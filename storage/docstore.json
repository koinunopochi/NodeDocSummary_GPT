{"docstore/metadata": {"92e6b704-ed02-434f-b494-b9d85a9fa755": {"doc_hash": "498eb79dfec662fb1f9e63d31ea81d26f5baa7692cc486ffb87861c90c951aef"}, "22afeb60-a6f9-4d52-ab15-dd8766e666e6": {"doc_hash": "7d507afa51979aed6d1db7353e326706984d4572132e979b44ff89735af1fee9"}, "10856d87-86c5-447d-97bb-a528f7ff197a": {"doc_hash": "463f2b0e8c3ba44e5651cb43921a307610c49ebc26b8b07ac0d7c6f29f42f31e"}, "a53c1972-c6fe-4218-812a-83869a6681b0": {"doc_hash": "3769b424856f88ba6ea68539a41b3aa4189638fa1bca1180494b0963047f7b83"}, "d6a5d83c-52a3-47a6-ae4f-8289bfef8230": {"doc_hash": "ccc0f740176d53e12b35e34e83f001f67abfa67b7b076148b4d400113d25716b"}, "12653304-54fc-4342-b769-ceca656d609f": {"doc_hash": "1118e8b72ebf3ad856a0a07726e98b70adb19e022dda6a474106a08e5041bbcd"}, "d0870d44-8d07-45bf-bbbd-65b1fbf25a0e": {"doc_hash": "3139fe4f042238f1a80dfa317368998909e441e75fcf7b2ae3dbb3cc96278344"}, "6056815f-e626-49c8-8e08-71dc6f0351db": {"doc_hash": "86aeaf09e1e8eb784c1e76b8a504231456e679a4462e6c89e900f4965fb5525d"}, "cfe7b9d9-cb36-4188-9aa0-c975df6b8bb5": {"doc_hash": "35e6e18eb3cd169cca3be82cb2571c3ca683a15cf0fdaab5334b2e5191ab8415"}, "2e12dc84-f0a9-43a5-ba2a-bfa8788ae9ba": {"doc_hash": "756978908f60cc4685bdcf4314d32c741975288b7e6e4d8926f79de9040aac91"}, "09b78c29-63ed-4771-8099-7bd3606af6fc": {"doc_hash": "067d91ad52ee0bb9841bc14a9cdf816f129e2c3f6efd54a5d09f09a3da669eef"}, "4a25b066-62a9-4f55-b020-602a18e23096": {"doc_hash": "dfb76ae616b5f72ca5b16dede0a508d72f3150b78ab1a11394fa61b24ac89753"}, "9c216f2a-cd71-4c09-b0dc-298b50e0cdea": {"doc_hash": "6318ed6864ddb9c657967a4203e0827f882aaa7f0f13078c845e4c4948441a98"}, "cf7b963a-fc1d-40f5-9f98-755f09a38812": {"doc_hash": "59c62aa9aad46cf2d802bff7c45b030149e70966ecd59a3bdb3079d56ce02835"}, "677dc043-d941-4173-8bf4-9c9189f34f53": {"doc_hash": "d4ba2162d502844a9637570abc46280789bf4e3899502c32dee4ba39e2433116"}, "cf39d002-e0d8-48a4-8a74-5d6333ac00c0": {"doc_hash": "767950371a03a2ec135c06ecf8a571590037ba6377bc393a231c71575ffc3816"}, "45b6fac1-8454-4e43-bff9-ffbdddb65724": {"doc_hash": "9cf66d9c898d480de410513d97fb45533ebd939f85b0ed762ed012ec37c3bb33"}, "2e4b33c6-7bb6-49d3-8f9a-df2e65e6b85e": {"doc_hash": "59998f5014989d82977cf86fe52bc250de7000da3b49a2b7c03a8d6cc97343ec"}, "230933eb-7b00-4abc-a9d2-b0c178ab0179": {"doc_hash": "47b8ac046d98551d897d59f8e287fefb5c2d0102cf7e00bf8bb0fc4475f1850a"}, "e4538698-c649-4f79-a7c8-ad01987c4428": {"doc_hash": "205ae5d0b47615abe12fa19c30b2fab53177f7d3e26bcd516ce078fde30bcf9b"}, "3cb5e388-7424-4b02-ba78-5a5d92173da7": {"doc_hash": "85ea1b038123b2e7636bdc1e55f77ed09c028cfc8bd028de4db60ad019b5c579"}, "0816f738-e81f-4bd0-9858-eae370b38f08": {"doc_hash": "c26e0d573194da261c2cf3802c01951b864c1077a40ae6a0655a16f70ac29ebb"}, "12187749-0103-4bb3-86ed-00fc530ec9a6": {"doc_hash": "5a4aefac9bfe2b6523d74ac89ec8270ac972551c981fe914c96f140fe52997cd"}, "9a46db64-0a77-483b-885d-7d1a344702d2": {"doc_hash": "3802d068b0b65e506f76392ab7dc44e89c3b6caca15bd30405f832ced0e66b75"}, "607b1318-cea0-45d0-8d1e-562f3058545f": {"doc_hash": "e6e3016bc4254a2b0c1b2cd78d0da520b81ebebd080420be04e8ddef85a17d21"}, "9d6818a9-92cb-4f90-a385-c71b64cbb4b5": {"doc_hash": "0fcc77f06c7e2403a10cccd109c6019c4aa875c1431789183380587883336c66"}, "dcfbeb29-196c-4115-8039-2cbf4a22162b": {"doc_hash": "1399c555b8fad65bfd406b4c67318186a127188b22a21d2bf207a74627280579"}, "5aa46f12-265f-4815-a6ad-7c0696ebade4": {"doc_hash": "f532d012f0ec292050b9492fa6231e77c162cfc4ecaeb4b4631e33c321cd6610"}, "3c0137c7-5723-4029-9c43-38b56e8cb1c1": {"doc_hash": "53c6185359b754a9cad36593261811cd2af6611577d01547a5e94a34bd5fef27"}, "742b05c1-4f44-4b88-95c2-7911491a7f72": {"doc_hash": "4487c81cd4163710a52f3e032b07aa6af7356f2d50f9e96d4576faa2f597a924"}, "c12967ae-fd69-41d2-b3e6-0b7db209b2fa": {"doc_hash": "79f55022489c81f8197beae091ee8df361451597aab1e6e8c0d0d8f63fd076ab"}, "62fc9ae7-6b63-42da-a112-331856c721c5": {"doc_hash": "f98f6e5058e86b9b0c345204de4ea8cc21efa94bc562964fa2ab5cd1edc21e98"}, "5a7f7b0f-cde3-4479-8150-60a9f0233c2a": {"doc_hash": "35ea68e960778b7575b1efe600abb3393a40932046f7e55fb0b9ff04b644d379"}, "cfd07ab3-41cf-4a97-b207-0a9b521dd0eb": {"doc_hash": "f871da2597a049156bc2ec2ed92395895fedfeaf6e9bfd06a821d2acb1c8a9d3"}, "80dbac04-19c2-433e-ad27-e3cab63d71df": {"doc_hash": "f57bab0f8d7343b3b5cac7ea4ab2b03629f4580763118e5f887938154ebeb47a"}, "266ec5d8-a696-4fe4-8351-bd36ddb41850": {"doc_hash": "f3c47912f43e5a01685ea4a7bb26edd0dd2ce3ee2078b6d0a5f020a58076af5a"}, "ece21d17-d6d7-4769-ac0a-2d9ef7b81ec1": {"doc_hash": "0ab4c775f3512771747a26479d30f088e144be889068c5939cb4eae87450e6f8"}, "b0c9054c-be65-4543-a0eb-e5eff3f9a4c6": {"doc_hash": "7cc68ab478ff13137bacb2176d2e8d9e564e7dd2f1b6fd1808a44b34e581f8bf"}, "07c62f69-12b3-4fbe-8672-bc62da6e33b1": {"doc_hash": "012b39f17f1c7b030fe229ce5c1e1b6e65475b218d62aee43643b76fd158b0c2"}, "ecd725f9-8fd8-4c66-876a-80ad14a52c23": {"doc_hash": "018e2783b6099b0b02e1db2eb174087fb7ab9aeb068dc7abb38898fb0bdeb06b"}, "8153433d-c0ab-40d3-a340-328599139646": {"doc_hash": "75b7f25f7a812d3c7dcd2a2be1975bc746a567bbf517c6e671110588a7854c70"}, "44b99643-f0e3-49a1-9a89-d5c487fcf89b": {"doc_hash": "5f652dced59d56a7b5ca456a5d873225360f8a74f3ee758db3a817863c42abde"}, "53821ca7-2228-4c01-b600-f51f66cfa78b": {"doc_hash": "1f9ea590f2f7613615c8f2a50ca498331bd854745a467386a294beb5e7d707db"}, "8aa94e6f-a752-4681-95ef-239a6c501d44": {"doc_hash": "2a1e1f4f2c503d770dc4255c01872306b2ed475cd40bdd1fcb56c96ea9b5b3b6"}, "3b6adcea-e942-4ead-9bb3-83a4a96114f7": {"doc_hash": "e4ee8c2f59e2186d35058e9b6b0231720bd94c89e7dbdb6f97abd0c4d21860f6"}, "d2d34dfb-6ca0-4171-8d08-8a20f443709e": {"doc_hash": "a475e9391be9454fc14a19614d4f33f266de0b9a42d917e89da5247a0c143154"}, "afbd573c-60b6-43d6-b53e-9317061fc681": {"doc_hash": "d85c02102393dee6c7030d7ced5b2d4a8474faa47c0f342152ea3c7b5c95dc77"}, "b5935bc4-3437-424d-910d-6c8efa48376c": {"doc_hash": "17b61a8170b70a860783517532d68cea13f4857a7aebbea2a0c1146520ea64c9"}, "8d400fff-6f48-490d-b82b-e90bcb2067df": {"doc_hash": "575b24de4e0b782e1bf87874c0e4bc83997ece0de30d2eefb782617603119283"}, "869cdb80-4b6d-4b7c-ae94-851f2aae8e6c": {"doc_hash": "fdf3bc7dd19564e0bcf9af65dcc2e3cbb62d780e75b20150aa527ebd3ee9314c"}, "fca743f9-4150-4029-bbd7-315c75e12906": {"doc_hash": "9708f371133614a24ff7bcf3f4d387f1534234eb98aab97285cb3ffd08489c12"}, "26c602bf-93ed-45b1-bd18-dc283b8e968c": {"doc_hash": "4008f310bb41212026c57ae70541077306bce8ddeea4e551e18a7fa664a92237"}, "44d1374f-4029-415c-af34-4139b183b81b": {"doc_hash": "4434077021905575d166cf9a1a3d9461de9eaad498f662f6574e109ad2abf8d2"}, "5715ec9a-836a-44bd-a60d-224ea5904c28": {"doc_hash": "bc2f661b0ed27145dcb08f7050f9aabc097d9855ffce5cf9484282935846c276"}, "1f74766a-82e7-4f38-8af0-1912e7dacc72": {"doc_hash": "547fe4b7adeb668551dabf3fa76bed92fd2663121c5e285cab0d650429ba5e37"}, "7733ee48-5fbf-44e4-b9ae-4b6b860cd68e": {"doc_hash": "2791facfbb65fd4d304f48545ba529a7df785ceeb702714f0125fc92f696b478"}, "cf73c240-9a87-442b-a70f-0ad8d68c443f": {"doc_hash": "f979f9e2d9fc9dbea9a2ff0638ed338e9e8093c4847fb4489202a0630dc0ff08"}, "b4b78d7d-9e82-4619-913e-8c960f470646": {"doc_hash": "9978b2c632dd458e242fa6e26863b45147d1dd4d3f0824292cfefaf382fc4bd2"}, "66f9d306-b9b5-417b-9c9f-6919fb1ed6ab": {"doc_hash": "2ed6555cf5565c91d5cd5b034b05783a4fead0aa70540414ff06ae5c3080c916"}, "3a0861cf-81e0-48f2-b32d-1fb7b27b51f8": {"doc_hash": "bb9b5c0b0bbd870ba11bc42ad9370ad3816d60d37fbe647b976e539cf0016c9e"}, "61e4a474-5726-4b4c-9109-f3a2e863d725": {"doc_hash": "7db5e48537fee90fc6e79e70e38dd11da450fa9cd3e123fb006c067d296721ef"}, "e63347af-d2b5-47a0-a266-c3c28139e23d": {"doc_hash": "3de06e86d9d847f6122bf9b7ec05a9e9cf401165b955de2708672e46fd93387b"}, "38dc4940-2cfc-45fd-990f-4de1231091c7": {"doc_hash": "3be1f827179a53c3d8ea23310f1d5c421a7a3050579dfec7d4885619e085e0cb"}, "15533de3-65f7-4a83-ae0c-839fbb4b3b59": {"doc_hash": "4b4d1c63f015d99fade6522058f03a7dc7e1b26adeccc15caa009a9a8e23138c"}, "91ad8f0c-3d77-495f-828b-e40db521f7c3": {"doc_hash": "c2032ab3494663c7fd3863c2959288b1e3a263a3d6e4972774164ed5aa4cf3a8"}, "d18342c0-4953-47b1-bd81-a49c03eb6c17": {"doc_hash": "fa1c3078976a53629dde5207ee7a19eff8618c7ea62b3da1edcdb7f80c890db3"}, "85d2d5cd-4cc6-46cd-919f-5c400251f1f9": {"doc_hash": "7f8e7f0428e2b00fe4d5e2d3dcb10f07088d7858779902dc1d634c30a5a796a9"}, "1bbd2e1c-b744-4257-924c-554b92d5cdca": {"doc_hash": "89e1826d76f81362c88941dc9028c0b410425aa29a0d49bbcb60b61d136dc5f6"}, "87603fde-ea28-4d58-a5c3-d4f3634e34a3": {"doc_hash": "a26879d6c4055820813f8029ec832c07b7acd753e95b1d4f30c4c31f7cc0616c"}, "9277f5cf-faca-4767-b9b5-bc1977682703": {"doc_hash": "230a7707a9a24589c66de78c2ff64c5d88d404ec59fc4749929757b9cf0567de"}, "7c3e94d1-c041-4784-b903-45f50a9c0c94": {"doc_hash": "2d8f38a126fdbce087264d30cbc35d2131fc8438879818270e430b8a660e13e7"}, "107ac360-82f3-4c49-9fe3-262c11d361ca": {"doc_hash": "e4e2c96f1732ad52aebf48cc7a02d82e901ed5f5f3d2cc6f403104e9577babe4"}, "8fb29e04-98bb-4907-a2bc-b5b65af301e3": {"doc_hash": "20f7b224fe80500a429d7b6580c3bd7b295400380f16448bff584c1daff83347"}, "d12ba89a-9759-4322-ac34-f1db6ceaadac": {"doc_hash": "add7f4ee048e410d44d9fc1f504b962d0a2177a35aa3105f90892c1f73951b80"}, "12d2a9bd-fffa-41f6-96cb-6049da95d6cc": {"doc_hash": "645af1bfa5a41e75bf734d3da7ac61daf234baf0cf6161df7d11eec1db055186"}, "93622c48-b330-4fe6-a114-a1fdca1f28a6": {"doc_hash": "b4f6c0fa6221cfdca0d85785a23a279fc010321b5084a1d0331f57d1213edd47"}, "eadc86b7-64eb-406c-a375-a95285fe7d5f": {"doc_hash": "235e255cacf143ff2593cb791543e89ab17e8aeb01091ef05d3f219564233235"}, "0eeb7054-7f7a-46fb-a4e5-37b8fc8d6d6a": {"doc_hash": "2896f77f38751bf031a54fdf967d45236fae8645a92e7cd75c54322ca102001a"}, "8d2b494d-d3e6-4301-bd18-74658c438476": {"doc_hash": "db338369e980b1b8e5a3cddc10a720773bf488ef52247c9679dd029f7b8713a7"}, "bc269a3d-8c56-43be-8f20-5037a3f4326a": {"doc_hash": "cb4db1b978643e05b91c9f8d05822bbc9fe366c449b89692d50640820e2c41f5"}, "8be2e641-6c17-41b5-b0af-ebe91a54ecf3": {"doc_hash": "1f500f53b758dd452ab33b7571aec2d52d985e9839ae8f00046ba4bc3e75e9a9"}, "d4a07df8-378f-4a62-8c92-bdd5d0f3f994": {"doc_hash": "7ad201ad2d39ea5941feb40701fdf3b261134aadc9e50ed651a2c7c8dc84e164"}, "bbf2d2ed-2e09-4dcb-a5b3-39513e5bebd1": {"doc_hash": "673f014e90f637de6dab1e85df494121a52c68a78359a839c83926ab069db38a"}, "6ae397dd-d45b-4a85-8777-8df3bbc90811": {"doc_hash": "afff12b3fbe8c0c126f08422a1cffd095d6a88c19d4ae6234fbb4f1bb991926e"}, "9025e6fb-6287-4ad6-856f-a1bdf0df5fd1": {"doc_hash": "a5b305b8b624df3f435f906a13a7ad58890625f6bb52b33913829f9e152901a5"}, "9766eb1e-4659-4940-a150-3ee5168fd61f": {"doc_hash": "ed352ae56b564877336c2ffd021b7ab4d37f2d62ad2feb8912b6e81bc62d4c87"}, "47067a13-1f46-4023-8255-f7701d2bc2ab": {"doc_hash": "c4ea09a5d56a736ff1acac461047301ccd1ee794857d688fe12abdb5615377c9"}, "2a190e60-1186-49d2-b2fb-58e4771e9cc3": {"doc_hash": "53c423c0e5136c526c8c92463e333c799588e6dda719739720f584516e27964d"}, "bc901dff-45f6-4ad8-a866-e34928958103": {"doc_hash": "c93777b8251e957382fe66b02e8f2419d2f29f1da32c1f9bb3c684b315d36140"}, "495a0bce-2501-41a7-819f-11a97b809512": {"doc_hash": "af28d93e40aa52c3781f9347795ade7733ac7802a50c4229a275a26080daca0f"}, "ce89fc1e-5d5c-4b95-81b4-be91921436b0": {"doc_hash": "df62ff8586a6f171b286319008d74fa31273d9156a0a90db27746d1239c692eb"}, "3c7165bf-c944-4036-8278-6dd63aa9f7c4": {"doc_hash": "be688758530bab4f9aeac41df80fc1b59e0d373b3b34fa7a49bf8b1a893e07fe"}, "40e9254f-42a4-4670-ace5-9f80e45c0286": {"doc_hash": "48dbb721a9d08dd7cdcaf33322c081ad24e81ff30e0aea443ff0315396944784"}, "f900ef23-539e-4ba8-83ec-4441159ae6f9": {"doc_hash": "1df1cca66073d131c28c47dc699fe1a7e216734c0fec0f72a981f66a322d437c"}, "d317c812-1c6f-4d33-8452-db03574cc045": {"doc_hash": "e2f870e1468287c7f21aa10c27b6e7909ad088505a2f04374fb10be56cde64dd"}, "8fc07d0e-c4f2-4ef2-9e35-247d7c7ea01f": {"doc_hash": "569ac23061b5495cb90f7a201a71732136f6da105088860844f5956e0e936603"}, "3bd24ee9-a33a-4c8c-8ee5-4873aad1cd35": {"doc_hash": "a9dcc995415ee231671f72ee7860fb8d31aa66143c6bc17e7cd3f2a283afc138"}, "934d44a4-5289-460d-b4c3-1a06bee7fd78": {"doc_hash": "a8e153c960a396fdb13956592c955466ebcb5da1b58cad6e9a0945044519acb6"}, "b3d170dd-7b74-43fd-bc4a-7d2d8ca1a6a3": {"doc_hash": "9e0efa57f7950e1a3777f3d1b69996d19cad4e9a752c9dbbd4c88e9ce5963227"}, "954d9db3-6e5c-4401-a9b9-a04bff6fa4fa": {"doc_hash": "f6db7c9bc5b9bcc5c8deb164c9b619e307305b8dc372dd05dc626c1f4e6ed4d4"}, "484def40-2481-4d94-bec0-bb78f07416e8": {"doc_hash": "4e1ab506264854822ba305b0cb5059803e89ef57468ac1f3ffb80e232a700d9a"}, "7d005c59-64e5-40df-a8e1-885327dab2af": {"doc_hash": "3aa332aade2ca9423854748dc8437cd48903729867507415090402b3baed16e8"}, "c42e69d7-855e-41e8-b5c2-0ed2722037e2": {"doc_hash": "ce9226e794e9f233b6b498d3c4c0d006f659ebe65b46d10cb731b8f53940ba23"}, "2c7e6930-5f92-48fe-bed6-26d863837e4e": {"doc_hash": "c987c21255115f9e6a0a0aa5aad4fc806fd4dbe443f60a307a5a28050592e725"}, "c613bb0a-6d02-4e67-a45d-adf1f2e667ba": {"doc_hash": "34305aecce2ca253bbd7d584650db83303b0dc97b98441e8a7e76c9d5c596c82"}, "6abd9e6f-679b-4d32-a6e0-d12a975b0df9": {"doc_hash": "2071823608691f811c590d58ac11b6c1ad4be2b5cd2c9833e6b4dcbfa7b8da39"}, "a39cf4e4-f5a1-4144-81a1-a80adc748076": {"doc_hash": "ac5e9f7fc876056e87033e463731dd2b7a37096c6c87f4dfdbf97dd80dc9dfe7"}, "6a2f6873-8a11-4851-82da-279d04885f74": {"doc_hash": "2470987598f9bab34521a92604f2254a616124b0acfd86a86168ce0abef8eab9"}, "b2d71d10-ca04-4003-9af5-27a6c820f255": {"doc_hash": "621434fa07ff075c63e3e3253f45ffa9088cb18f9c8d4f7a7445140da8a4d3b2"}, "dfe0673a-7bd6-4f5f-963f-9691ccd29a68": {"doc_hash": "fcd92d533905527b7c88d42330b65bbac76a4a36ee84485f0996566f437dc71c"}, "d8f119f9-4646-4bb9-829a-7df4e29fe195": {"doc_hash": "982c3dce5df023de64a49eca89c9b6297fb5b1af01c796c12b7fb6611bde7d4a"}, "05b28632-35aa-4008-a814-d52b33a57ccd": {"doc_hash": "d4ada2e4f3ab1aaa782aaf16dce3a6db77b85e8eb47dd139e7d9e88499d158ac"}, "eab16107-6145-452b-8310-5aaa94726b20": {"doc_hash": "20538b9e24c85ace6b4e5525a352d27b5b3149908a0e4e48268daf5b04ec1935"}, "59a26516-06bf-4536-a539-3d9a65cf5807": {"doc_hash": "211d5acece1ed404df4b930f3a2809f43f62f79b9cf46689255834587816522e"}, "7f7c9192-7bc7-419c-8c71-50cf927acb12": {"doc_hash": "9a92f620f54c0e3c3cc9ca54089c7d7ce554f9e45cebefcda3f08d1d332b37c5"}, "de53319b-6f86-44da-bb6e-6377806cfcc9": {"doc_hash": "61ee4dea650aafa99d8bf550ba68491144bfe44a2fb7714dd25adb36d4dfc36c"}, "b0ccac65-9b94-4200-bb4f-e0069cdc1f0e": {"doc_hash": "d8dc7b351ce5c2b3f26206feece8bbc23578f836ff2509e8a10b4429592120fb"}, "c027b190-ae21-4ec2-ba1d-418a27f55ac6": {"doc_hash": "f2c7573501163cdcb3056f964b8223ea9a7983fe2fd0bc8e889925fa6a2296b2"}, "5e949616-c418-458c-a7cd-24876b2a867d": {"doc_hash": "508b38ad4429196faeaf64e6e19a0f58b304611e30cc5139aec23436e6b4001b"}, "308b259a-6ccc-493e-81bf-52eaa0c1ca3f": {"doc_hash": "6a4d9797a391f9e2f1c6023187c63af2c34b20b89e3bb7909974c51ab59bf9f0"}, "cac3fcd5-2acf-4f39-8030-632c746159cf": {"doc_hash": "dd754e2a5f337125168e6a5bad66950b5223211db5c208711025568cc58f3fb2"}, "e5910548-c301-4a29-9bf7-f575881ddb66": {"doc_hash": "05a1bf4dce2ad8e78d86c708309c72eff8e1bea73a5b8bd867b12c6575991278"}, "23f15e96-4447-497f-84fd-8cec2e7e1ae6": {"doc_hash": "e6d1b19656fab4e671c7d019d8e2c1f48d24e3ca5995ac83924e42883700f5a4"}, "8eae90db-086c-441a-bb0a-74c6340ad9cb": {"doc_hash": "923d7c32f674ee28a0649e94b295c97042840e5c6f6eaf4d198c9d82531c94ee"}, "f089dba1-3d55-4c97-b465-c3c4bf07ce1f": {"doc_hash": "13aa6595ad6998e143a1e0dca9cbff121d4d52e4747f19529c8689b11b43969a"}, "0909e4a6-74ee-4b64-982f-d7b6e7bf5ce3": {"doc_hash": "999dcfa47b0c95bb21a84887d9b04fb2e702bfe13b68efc0ffc5ccee4323a1af"}, "380e454a-9668-4791-b684-ff1ded5cc581": {"doc_hash": "9a248b5ad961e6deb5955e3adfbf62df7a7d1553ae46ed1c17d6030c4aa9efba"}, "b7accf7d-fb30-46f3-ba18-2764f6521b0a": {"doc_hash": "cdbc083cb0ec310f26b2c758829ff387f3c4ae9d1a9031fadee037b9513bfe1a"}, "d397d7ae-5f91-4b27-b73a-d2d9a709405a": {"doc_hash": "d699a276bdf2c25b259c0b8cac6a0d607d4e20cd3b539ef6983e05953d94ccb8"}, "dca15ac6-c996-459b-aa37-26e62d0ad0d6": {"doc_hash": "7ad66e528a7f90b1e3ac03163b95c67e271756f3025a61bb7e9466bfa4bce982"}, "246b57df-0cc1-42af-9ab7-c79d153d870f": {"doc_hash": "61b14bafaadfa72e75a542d25ae35b858884298cf88b0fb2a2be695fd9a7c18b"}, "381c5598-3e6c-46d1-8fd0-3cc7d35c4d31": {"doc_hash": "7f5b0b4ed7d42e0e06379aed0de69f548d99521bd1e721aec3b9ce94e34f9987"}, "4ace4a50-bfb3-46fc-8d1a-f6e69e099ba3": {"doc_hash": "5fdebf6ab5905631f95dac887de2ee114a2e63c7514c9db0e7bd896cbb495d47"}, "79838027-d19e-4ae9-ab43-d3350c4ac441": {"doc_hash": "eee00266e72ab925d3a1accc88addaee131774516ee2fc93b87ca973017f5f24"}, "6ce69df3-3b8b-4bdd-bbcf-4f2827e7462e": {"doc_hash": "b547bf609bbc2e990fa9baa6f938c2ed52691ddea4593759b4188c269220e065"}, "5cf208ee-b9d0-4c66-9194-b420683dac97": {"doc_hash": "8d86e550ac414197b94117348fff3e29f8152f8c856bfde3748b4b6140b54faa"}, "18d36d9e-c45a-4e8d-8ccf-21d3224cd3e8": {"doc_hash": "86a0c288be84cc6b9573ed58ace5e47b7e760312716a2665c7227f5005e5abac"}, "a0497a65-4054-445f-a717-d3826321b2a0": {"doc_hash": "dad01470216db50650eda8db3b03e5a737edfe49b43a6fc7ba16542db94e7463"}, "32703e6f-7352-4a76-96a3-fbc461766203": {"doc_hash": "8cdcf0e304d80d0067191c64c918d9845defe20386d914d60e174ef2b227b71c"}, "894dd371-827b-4335-9a65-1b9f9fb97a5a": {"doc_hash": "e44a3e5488fbf6b9df1bbccd47075b3097f14f944a7995c89a377f09f977e7a5"}, "f52717ee-a5d7-4fd4-b64a-e5b003c63536": {"doc_hash": "0e820c90e97163d125e511bfc5f2fe261e003ecc5ea7155b4510a72690bedeaf"}, "10d47b2d-f056-4124-af79-fb7f74471b19": {"doc_hash": "d47911411862192dca1b7fca7383bc6f56e827485039dfbe85767c9f1e2b84ff"}, "d9794bbe-bd9f-4017-9aac-084bafa777c7": {"doc_hash": "c668f673591d847c8271a97f06ea335a6b590b8336d7802a3db0c731619c78f8"}, "192556e5-c307-424c-aec6-71bee4f86664": {"doc_hash": "834628ad4a37206e0dd7e0cdc39c96410e7ad182524be39a45a26e9ee8b1ca3b"}, "ab462cd1-ebcd-44a2-9f65-7a3d61b099e8": {"doc_hash": "a0df63c7438046f045618faa13cd0fe6294a895686591dcec80cfdbb6d921e26"}, "a5918e34-0acd-4314-8e8a-c474f9f5d8c5": {"doc_hash": "22a253940b2e83602860a420760e299992d77e3ac5239bf6fee3132804075412"}, "5550f28c-9352-413d-b9ee-fa75a7f16b11": {"doc_hash": "8cbc63c92da146e49c4debf9bb01c80b6701be75f6889d471f184819efb56220"}, "1eb13f4d-e5f3-4367-9c83-64a3075895bd": {"doc_hash": "e30adc503a0e5846569c01e6011a03d458b6b31ea837bffc68b308fa629ad700"}, "cedaea93-e423-4dc2-a69b-ac732b94caf5": {"doc_hash": "c2892cdc3cd62624de715714172a6e84d6dd1fa4933b9c193c96c9321e691ea7"}, "88d16533-8403-46a2-aa11-c3a373aeb2af": {"doc_hash": "ed1f441d04d137be3328f1ad5cf0a3e5afea3b4a8fc2a29b3cb2d9a2eed57c46"}, "ad14e17e-bc7d-45e3-9225-e53f5948aa54": {"doc_hash": "134c7233fb13e3cc94a42004b28d61a07c52f0441bb348fd0ade6a14b900888d"}, "b23b6475-1c5e-4e18-b221-2b65b8c4f0b9": {"doc_hash": "94813382a8c971af1798f3252f6e1eae8157883a9159e088d6db71605946b4a0"}, "a0d42d94-5af1-4d18-9398-ed08eb3da342": {"doc_hash": "e1ce04c4530579b4fdcb5d79c23ee45bd2a147cb552177796a72d10011f3a58b"}, "544da81b-7eab-40b6-bfa0-567dc9153a35": {"doc_hash": "fa6e24958299faf3be4764d69d8cc453bcec2770e5a4156cc9aacc00d51b330f"}, "b94f1052-2d57-42b4-b638-366f5ec11752": {"doc_hash": "fcd2e1682b0cd77ab45afaf6b8ee9f9b27965a4f4dea2e0dced040457aeda598"}, "f7d03f6e-8440-4f91-99a4-6d0d72799598": {"doc_hash": "cd366b3f2819eb6c147841c4606603f93c32296ab19acbb9cd495d24b2462365"}, "725a19c1-9d62-438b-9d18-9bae478560e0": {"doc_hash": "27fae7fff962ce56e60efeb0b78a797704375b2d799f61607755887c602d2d8e"}, "a670dba4-bc8c-4476-963c-90f9a5539f3f": {"doc_hash": "ef25944228a80209d88642c0d85dd454f462d490757617d9486e6800c42f6f67"}, "234d88c4-e24b-4d53-9160-ad5d9574d9bc": {"doc_hash": "9c6aee672858dafd41a9e8169ec60d54fe746e86aa3923c07a9eabb9c76b13be"}, "77246aac-535e-4fda-ada3-9a993c114738": {"doc_hash": "332a319bfd55acd94565d3661c655c59cbbaa94e3a66dc5c6a22bdef6bac7590"}, "448686ff-f244-41f3-a139-0029948a8b4d": {"doc_hash": "1e812932b74a6c6edf598a5000d73c28a9d358b496bf5aeed7e2efa1931798fc"}, "17f3c540-12cd-489b-9196-234e221060cc": {"doc_hash": "0e0e250aef63c8a2609e1255624ce2db6a0e7769a8d1ced197eddf73a5f72fb4"}, "a0e84fd5-a615-4654-aee5-28d3e2301ab5": {"doc_hash": "a010bb28e047cfabf0fc1b175c1c15e56371ad9edffbffe26076716cc28d061f"}, "34f1f2a3-5683-45f7-a980-89e1c12ac026": {"doc_hash": "182a126d8ed8f6bf486db60922deddaca5af3fc76545959a7e2e45ad49313f49"}, "21a076cf-742d-4eb4-a3d2-9b5e74fbf1fd": {"doc_hash": "465d3d4582870cb5da0b36d8d6968160ed4d388c33ef84a2729e0174abdfef12"}, "46165b1a-fcde-47c9-8514-271295c65a1c": {"doc_hash": "3033c90b8f042a8f4cf567f5e24a31bfb5dd2a8786fc9d73abd2cc2f1792d4a4"}, "ae805aa2-c046-404e-b14b-8306fa9eb4e7": {"doc_hash": "cb1fdc5c0068b3b745fc5c73312e4e78c8fa4dcf28c3af325bd8c58cd1a28a8d"}, "4ab325db-407c-4e55-b8ba-b173ac3935c3": {"doc_hash": "094e4bae032631aae861e0908d15b6296e6dca013277964d88e679abed6f3a96"}, "ce1133f2-577f-4a56-822d-104b7a6063e2": {"doc_hash": "b1e11329006cdd42b77958a69a5b1949bcb342fd1e98da4072180e0e3dc0a04a"}, "d62844ad-c3cb-4dd6-b933-a6ff13101171": {"doc_hash": "2936f7aae1f9c9c590348b6c272e3d82bad79e4ff8a05339318dea80c02bad68"}, "cac1783c-ff34-4e46-bdde-ad33ba71da92": {"doc_hash": "9fea39cc8313cd74579a0c137da097722a0647238bc61e56422da85df0bc2048"}, "ed932b46-10c1-4dfe-84d8-4e84509677c8": {"doc_hash": "83831f06df9c30eaf3acd97bcbfc164aff79dd229469cab3b51089df4e1b75ed"}, "7d127025-d5ec-415f-a459-a90aea105e10": {"doc_hash": "d9898a1b3b64861badcf547c1b0088aae153c3c8cbcdd1d63a2c4cf30f9e1f80"}, "e68f3048-a907-494e-b438-18c864bfed0a": {"doc_hash": "424403a16d83a70b320e4d7a252706a5ce3e6b0d44a2e20313b1b312d4d549f2"}, "75750ef2-14dc-484f-8ca7-1095d17a1593": {"doc_hash": "ff72bf95e875ce400f4eee90e172e4bc562dd41d68f05e9c5bbabb350e329eec"}, "4c375cc3-4156-4314-a63d-e25f123f2fa6": {"doc_hash": "6d834232ca07e1480f28fde8a5a639fa770fd325aaf3b4d7ebb18da928513872"}, "7969a43d-700e-440c-af7e-add7029cdd95": {"doc_hash": "bd4601da8e80474433c93d80fb3243c0c3e77fe1462d29ccb153559123ed8e84"}, "3e6d4cf1-dc1f-47b2-a2e1-6c9c84d2a8fb": {"doc_hash": "2ec0b00fe61411dccc045d0a7eea04ebf8a5cc9c446dfa2c65bbe15523a909c2"}, "fd4d54c8-1b64-4b2b-b545-f409ff747077": {"doc_hash": "306f792a72ae6e717b2e80c1ebe67cbb1c9eb07c958226478638485facc2a3af"}, "cfcb2c9e-791d-407a-9083-78121295a031": {"doc_hash": "6324995386e77c1d486613308eb1b59f68fcced425d2ef11a1fda87f740c4dc6"}, "0f7d4166-ed18-4659-98a1-7adb90e10e13": {"doc_hash": "9e6eede21ecfd5661392a62aac3898920a01aaf0411f102741e765f0f5fa4480"}, "d9ece896-f1d7-4571-b397-5eae5396430e": {"doc_hash": "04867a264858569cb1f5797816d72cc0278e2400be44747155d5c2b46f1f8d9f"}, "1aa78ba9-2832-448b-93ba-98eeac71d48e": {"doc_hash": "49117ea1565f00a44132a3cc9e18c21989a6e2bbe55b2ce96903cd8d254d7db4"}, "c754eb51-6dd4-46ef-a082-401cf0130f44": {"doc_hash": "31d31384e5ceef2602bde63d160e38601436777839b9f3ad05c062e652f9b739"}, "5cd466d8-861b-4177-908c-7cf5c36e50a1": {"doc_hash": "4dedcd346aadf7839a8b59e094c4bba2f94f4d71386b0b58422a80da93edbd21"}, "4a28f738-620b-4073-9c26-9f8b29d91ac9": {"doc_hash": "e0a01e9b4213347277b30bd60cdfe57fc8f33b1af5c9e832e6f34541181eae91"}, "c6c0295d-365b-4f33-8b57-10ce961d5233": {"doc_hash": "f591f8d983927e8ba80bae7e9b6d627336b2c7f62a8df9fe82521157365090bd"}, "1872616f-d9a0-4d46-93b9-a88abec4fd45": {"doc_hash": "60b658251c04b81ff5b04cd4f4a16ffef08be3f85477ef28b620b1fed921c5cb"}, "ac3e85b0-5e0a-4c2a-8933-a28750a61909": {"doc_hash": "48adecb0d191ef8d184769e5210cd3043526439509019c58313d4e7d4af47c47"}, "33af6221-e149-40af-b5a3-5c389e552f78": {"doc_hash": "fb60cb1125b9fdb757c0177c8b98f3c74149e235cbf9b596356c9354c782ea9d"}, "8c6682b3-7435-43f1-9394-3251d9bbaef4": {"doc_hash": "e0e721e5913f3e4e128ff470985f252900892cc4a7a60e39e33b750549265621"}, "7a915dde-a03c-43b7-a873-436f2cc3d956": {"doc_hash": "3c1cdc75b6440303e4c747c63a13925c6f56e03cf1e158746547e58982823613"}, "85569fd5-724a-4d92-9987-cbe0b5a0e43e": {"doc_hash": "0ce05111ef9741155c11e9598101f1445532e0e68521b34757f0279a6c3362fa"}, "b8e5a623-c55d-4d6d-bbc6-4b99b625de9d": {"doc_hash": "70a77b144520a92f7f84592623a3cb261e20fdd779ce85db79e47507b09db724"}, "aca8d836-1667-4a6b-85d8-e3af2b75e371": {"doc_hash": "da1cd7c2b4330dbd2345153bd0b3dd67c7ac9f4b64efd0fcbe6fa4dbe42dce89"}, "e99d50af-ad49-4480-83e6-0b04044446db": {"doc_hash": "6eb1d3b8d7ad901ada26f1be0c4c639ed85d14530b7383cfb83394fe5fafc572"}, "cca3bfbe-1bc8-42c5-8927-10a751f3327a": {"doc_hash": "c9a0c462e1dbca6ba488bafb57c74c0bdee90b5d0c501347dffefa01440a2761"}, "0d1a3e7f-e6ff-4b59-930e-3847f969fba9": {"doc_hash": "594c155673ca31b1143d56e7c76eb8f58076cc996a27f3c199b9c3239a81ac3e"}, "24094651-f782-49e2-9ecf-d11439a98fed": {"doc_hash": "4df5b4557036c2937b907694de32f9afc99c7d51aa66f37fd4b6d03549209775"}, "3198fd45-d87a-4d41-ac50-5b61a1cbbeef": {"doc_hash": "3f3953008a6f531f7e11f16250c0820a5c10d144691079a328ba1f2974f97795"}, "fbaeb9a2-98de-4ab8-9418-36a83cf16eb2": {"doc_hash": "b249e726aa7da1e890e2aab67871472a742f955cf7ee053724a8abcf44876618"}, "5d8b8642-ad40-4d76-9790-ae77a06f033d": {"doc_hash": "798ed5fb90fccb499d6f912e599114f06bbd7926739ad6cc1a75ae45a0a82c6e"}, "252fb6a8-ee16-456a-999a-3800aaaa8533": {"doc_hash": "acc964fd3b906fa43cd5654dacb3b1a8be97dbc393dfaf611c1a74ebec56f04f"}, "483a8f9a-56b8-4b42-ae83-acec80864087": {"doc_hash": "b263530206a2aa50614869d11bcd6a346e8938726fe201f8d033a865d70ba9e0"}, "0a51b6df-2fbf-4bdb-b90d-11199140a48e": {"doc_hash": "b070de8fe7f268637238f4f9b4f63fd9a359a773d4403fcbb503309dfd10ceba"}, "c275f33a-52a3-4927-b012-416bc6a5bf96": {"doc_hash": "ed275683cda40b4589799363a6b28b9ca93213de16e3557a53a01c77645ae7a5"}, "89746e5a-3a91-4313-95d7-345f2e959790": {"doc_hash": "f1111a4e6c1569f835eb4ef469731e52f6e04d9c6ab6186c31fc1a623e9b5627"}, "4adad584-cb0a-43f6-a76f-e11e73a22da9": {"doc_hash": "137e3a79100ed21cbd14d67d273502b395ddbadfa19f6c355ff5bafa50437b41"}, "2ff08561-57a3-4a39-ae73-784acff631f0": {"doc_hash": "3495d14c5e179c462e09219456598a13affac637f112408e9744dd8fbf61015f"}, "9d077f12-0fc7-4f31-8a16-dc315058765c": {"doc_hash": "c6e2af02cac6f5b7b169eb881e2948500303745a3456df5769ebc59df33e5588"}, "b4ae6c3d-2865-4f0a-81d1-474d20a612a9": {"doc_hash": "eff9178b2130cca5d0d05fa9bc4c5914ae14d1bc6f07dd0a821f70dff0ba6f4a"}, "a1621dd7-5c2d-440e-92ae-2b5ecafc3106": {"doc_hash": "8a0523c930aae96605e799a902e96d7b394f303ac421af671a1ec2c6e75d51c0"}, "16d7e77c-c9fb-465d-818c-dd52b1060d4a": {"doc_hash": "123f2e9af84431316112e3a7cf9abce6d62e93bafd8166261f071cba01037948"}, "b98a0517-0ba6-4e74-86c3-8ca35628adfb": {"doc_hash": "d4fd58d111e0abea8fb4079eda550c6dcdc710eb1b6ef6495dabdb6d5f7c27cf"}, "e88c6bc0-505e-4aa2-8a58-5c2c6a68a9a8": {"doc_hash": "cb254d0d448f0cf7d62e99c4e4b8897f567aa6c0073668c69eed4af5fbacf456"}, "1081ce51-d2a9-4f7b-add9-d19fcb45fee8": {"doc_hash": "44e9b802c389c996f367731f7637bddca49e4fb7a14023947e2263090bc317d7"}, "a4a22028-6cce-4e2e-83f8-334fe8aa12f1": {"doc_hash": "507cf4b04ade5746f8a28123aaa6b84d0e3c092c89a60d423f0602ba1788b6a5"}, "23521401-4668-4020-a333-127e28ce9a38": {"doc_hash": "8a6440b4143c4ec9103335e878caf5f446636839796919df210853faa0e74c89"}, "c27b36ca-2355-4fef-80d3-5f26540aa3ee": {"doc_hash": "15b37e37c578da92e991f31cbec7137943657060a00e53b562438c8a1b7375bd"}, "26caba95-903d-49d1-9a36-468af8648ee9": {"doc_hash": "5023500610ae81b2d812638c1d43399ddf96caa4c304f988d3b848f116a612e4"}, "a021d97f-fda3-4029-b77d-433bcc0f690f": {"doc_hash": "85b67f935641528c42a56fae7be4aa2bd0521431f0505981614a7e102322d3a0"}, "200e62cd-fe1d-4924-a49c-d6b99c259476": {"doc_hash": "41845863c83c54feef59a3d8110ff6eb825fde7ceae333d8e7809233f87eb5ea"}, "b2786f23-cb63-4104-8f1c-0192f5fb6f80": {"doc_hash": "83d5ffab1422ad1256df5a2e8c85da039eec73fd2e9037f63eb3a6189abc7b2b"}, "98f884d5-9291-4c02-ba14-fbba8f6a30d9": {"doc_hash": "5bcdcc1cd50cd5c516301373033d28c7bd1741ab5858cc4d09d4742addfe72f8"}, "11fcfefb-edc5-4a08-96dd-e8c5fe0b6b98": {"doc_hash": "1967cc7f389eab387ea49a9363e0ef692f5dfad5562f5090dae01b176e370959"}, "28c042a5-6c1c-42d6-ab92-89065f87ac2a": {"doc_hash": "70d6a85d31fc049beac23ff1ba3f76cd9df5c58e71f65a7ec9307e8a8d0289de"}, "d087411f-2980-45fa-bd8a-597f43ba2e76": {"doc_hash": "2bbe5df39056e2f33a65350b884d7f13f0ff9f31ee58d151d376927272e0056a"}, "73958485-16a2-4390-9ad3-4c1d895dc248": {"doc_hash": "611167120f8cb9578a473ae80c67e024d37c5cae4f2669168d655fc2135ef72a"}, "81d835b1-8828-4e98-81f5-c3d0deb3a7ee": {"doc_hash": "fcb022033d4a7a1e76590a2b0aa50d4526b87517666025827a4dc64b3b3426f9"}, "406155a1-7cd6-41fa-8c30-3904f998c906": {"doc_hash": "18e77a94a9b3fafe75190ec5efec7efb8370f822464f4d00cf5a89ffa82f5737"}, "38faf526-9356-4187-abec-0344ba4458dd": {"doc_hash": "63ae01a6fbb5fa2f1a620f12ea5e75deb1980828ab7883d4331cdd7c1a1c46ef"}, "c489dac2-2587-4ab5-ab12-5a0e906ec594": {"doc_hash": "1aa9678c591e30a846c22f8efbc21696adc3ace384852f3bfda52964c618de13"}, "0a176912-1a1b-4363-a881-03d966a4dd08": {"doc_hash": "46b14c67acb5b4f361824feb5a3d7dd43c36de6d3cbb581097c62f7ddca71517"}, "7819609c-c858-4a9b-8e0a-72de2eda0a97": {"doc_hash": "2780cbb9c2e1e1d8cbee166a9c1aa5194718910105cd17bf71328c44387b501b"}, "234182a4-1380-4609-9f42-28746c01d1fa": {"doc_hash": "91c531a7475520e3fe623416f5601e7c418f862dcd184c7b90f17dda95117013"}, "b75c2ab4-1118-4c37-8fdc-6bd770e64f6a": {"doc_hash": "b366f8ab892e5e83e95366cad6a4859dfd58d69e933d1674a140bf5b57b8c82f"}, "ed472733-bef2-4c3e-9916-2a30b1fa173e": {"doc_hash": "4d1cd9b32a12c7d81b4d5596286a03e08e1f047868718426626fb96ec5248ea5"}, "5a7cc356-f7b8-4ad3-8515-8a6e38053e87": {"doc_hash": "3ff6328778f27170aa34e979068075a4ce936110df8504e6405874077f585aca"}, "3243d57a-f855-425f-a8da-03789678317c": {"doc_hash": "18be835943e82a4b1b74975ca2120ecebf1f300a9829d39dc4fb519ca25b858b"}, "be40454d-e87d-4256-bf99-109a4fcf9c30": {"doc_hash": "372ccc53b09e352ab50fb4e347830e3c04bd9c3025f6ce9990ee9361a1e264ce"}, "dee5f16b-a098-46eb-8de9-af659764b1bb": {"doc_hash": "1120229b877539868bd0dbb4f1e51adc1d827651a5b6309974b96be98877210c"}, "198413d9-72fc-4128-9775-8234ac12097f": {"doc_hash": "c1dc6073e4ee5a7138b58cbd0994bac071b9f5af81499fe213b67dca66337a2d"}, "485c7f3d-29ab-4437-9d73-01ac1b76ca3e": {"doc_hash": "a22d7491d017ddc225849c998c9c45c052c1a3e18507547b20a58d8705343482"}, "1d3e1a41-a93a-484c-ad54-f1fbfc48999c": {"doc_hash": "85fa2055ccd6db1c3ef5fcc7b1f6bc70c95c623d30af0913c71ba9a3b5f163f9"}, "33b3b55a-6551-44e5-98c5-d152be55691d": {"doc_hash": "a17efb63f423d1fc312287e4b04980680ba551fedc3dd38d33c9611633e75de5"}, "2f9ca93b-0466-47e7-aa5b-cd02ca652978": {"doc_hash": "1c4e6a006393b0c2d1ba119ca6caf1b28215fd9ff3d3ca136629f87666701238"}, "d59a5400-45c9-4b97-8126-e4879d2cd3c6": {"doc_hash": "8e81506d557b774b05eb35c25ecc9bb19486a5dea6fdb6fc9303da94b4ba386c"}, "cae88f64-e179-4194-a4f4-91efc6d6f531": {"doc_hash": "1cf8b4908debfb76d59fc267d3db4ff129a2c3d682c31636c6fd2d0e44def569"}, "b2456f59-8915-4f48-8397-74e4584aec92": {"doc_hash": "0fd2da4bb29be12521317a7e94b4e2115b3888ba20f0a04b2976cdad745dad59"}, "0c325a46-39ef-4be8-b8fa-fd2497bdcac2": {"doc_hash": "ac3bb9f16d8ed4491fb27565846f11a38d4b358232d79f87f81ddb83102e714d"}, "fdda242e-c890-42e5-a799-8856f550fe96": {"doc_hash": "b8ba4772cfe532c4b759484854cbeaedd91c9309611417184c523a807a015635"}, "60f03787-a46c-470b-b581-d3a7c1cb395d": {"doc_hash": "3df0d1fe9fd7c4d5d1f9596b6a86bdd58f3ad21ee6b3bcf9c5a8432f4e961d15"}, "21a696ca-c469-421c-8e21-94cdfe54a8fa": {"doc_hash": "ef3bcb2e7fe3645b9d9f5be5207deb25f36c421968ebb4cafe3a5c353986d8a5"}, "01d3a7a0-0397-4e11-b67a-b12f96e67cf3": {"doc_hash": "9f4509d6852a937e3e9568cdaacd07140e3b9bb164eb8565fce4eb30d3e77bd0"}, "c2ff7abd-3c8e-4461-9fc0-b4c644f57ff0": {"doc_hash": "33714128b7247e0b9a03d84bc988da0f9c97df448ec4b26ab0835076cc53c1f0"}, "41fe4dd6-aee2-423f-b766-73418c1a52a3": {"doc_hash": "add94e950ecf5866b3b78f094851d451c90b50f626e178dce0c6752942ca481a"}, "dba49b44-a7b4-442a-ac9a-26d2647d0db7": {"doc_hash": "adbacb5042f3a58a01028d478093fdf81af3e91d1fb0f9849561f215f78154ec"}, "8aa59587-f8f9-4ca8-994d-69c4269d182f": {"doc_hash": "9f4d50f627bfd99af6c4845485f32842a5c0d8f955c623aec908d1ad26f399a5"}, "3e0d3e6b-2ff8-45b2-a962-1dc28b626b41": {"doc_hash": "2853926c8c9f38cf934bc6fe8b0193bb543221440448a829fc5f15727d5c6983"}, "ac670d2f-c041-422a-bd1b-9801efe09ded": {"doc_hash": "eabf355ca18dbf9e51f9f1b5703dee69f03c39399fe1d056d003e23a80f96f02"}, "fa612658-1ca2-4c59-afc0-a76745b2e4ab": {"doc_hash": "28bcc4d05c770c29cbb815d65c2c150cba6346fea25432bd452f8b0ce4cdc5d4"}, "f04a6beb-9470-4016-8cca-a072e3a64056": {"doc_hash": "b0f9f527ea1bb2e00dae54c7fc967fdeca80fb6a69ed6d107b3ff585420b4a49"}, "a30587c5-1ef0-452f-9164-600419d966e5": {"doc_hash": "8b3dfa9537697b56f0e3fb1ca5e91033231d46138bdc06bb62b1914fdf43c81e"}, "87232bc3-7c44-4b95-a461-7eba96828ef5": {"doc_hash": "2e9336cbf44da3e3bd00f31a36e8be06a83e083a9cff86570513791836f10458"}, "1d6fdef4-b589-40e5-a9b2-b31062438ca6": {"doc_hash": "6456f433c1d3b4610b0487baf3142ece07888dbf99913d5d51c0ffcb30ec3a71"}, "d0b3cf29-3256-4267-b72a-a1c9ec9b612c": {"doc_hash": "6de418ea2a74eeb3c0acfeaec150cccb549df1ef37b1374166d00ea5cea4dfd2"}, "9ab5c4bd-8a21-4e63-814e-8a08c6ecd5e6": {"doc_hash": "1ceed7610b23618932aa443589e12923c1e7865f8a8ba1212271bce93f5ff0e2"}, "be89f1a2-4e67-45f6-baf6-1e031cc9bf0f": {"doc_hash": "35c1d916935d4a2582d2f1bd68eae0fc0e9b3919b55b0c5525f99bea8ad52e53"}, "c2295cc0-eb19-4602-8cb7-ea33eabaa7eb": {"doc_hash": "08cf5edf36678d2c5f2d1ced9f03cd72c06f940b04a01abef530b7c8b662dae1"}, "f2bf2121-5d38-404f-8c32-cd68a0513bee": {"doc_hash": "5032123ff94039c109b18e6bfd750756370b40da6cf2c5f1a8b8aadb591a76a7"}, "abe72290-05b3-4ad9-a7a5-a79aa3594c7f": {"doc_hash": "89ad0a853d7584153edabbdf5b4a10f9f98a02e460f4b6f8ab744df6f1585c79"}, "5ff733bd-158c-4752-86ed-992ca81a5b90": {"doc_hash": "d2bfe495a155e1c60bfa65aed7c470d0996ef67b8f13cba1d9c0b48e96b6f25e"}, "fd041624-647f-4cbb-945f-fb875b6edf57": {"doc_hash": "030f6d80105283266ff1aeede20c269ad328321981a1b4d038f89b53be22bff7"}, "dadc9299-d93f-4b58-a62a-6bdb3a5a4c42": {"doc_hash": "f81da317ec65d6c14df7ab9d6dfe97dd15fc6e21fd0eb0b690f2e8a98ca6eb32"}, "2d0c821f-8dff-4d59-8420-53dda4141f28": {"doc_hash": "c429d38b6909ec02869e2bfab2dab8f8a397b3432b3a2a43c9ed853b7f5bfb06"}, "c80a5404-eaee-41cd-b58c-8ba41e42d1d9": {"doc_hash": "ef5fb625e0615663fff6f4ef300fa7e5fa59ce2d07fd8660866ada536239d7e3"}, "752fc47b-0923-423e-b016-bc72e3f6f3c6": {"doc_hash": "c175168f31e8c41f277f678f06b9ef4eb3a1b86861ae362f3cb5f03abd345dae"}, "57030195-7c66-4857-a2d1-4b6d485b2c76": {"doc_hash": "6e22378189b4712e5164456b3501ff4d0845a56d939835af3d10e032ee0da470"}, "65911d61-52e2-4a25-84b6-dc019ecae9fb": {"doc_hash": "53a07bcc29794db4f50c98f63a64fd932515fe5c162af63ea480d105336fdaf5"}, "d064d297-5790-4e45-86f2-93d1f472f453": {"doc_hash": "f238c4563fbfcef122a86646767615d148e4852bed38d84a1b8e68ce4893101d"}, "1aa1363d-88f8-410f-941f-68d9e2d4cfd7": {"doc_hash": "bbf217192736f6f4e6e72c2060953271d07ec3ec8f9efd2da3b3930e69ec55f8"}, "0d06cad7-65c5-42e2-afc7-fa0cf6186048": {"doc_hash": "5f081c7a036f96e2ee0fa426eefc82a0466aef4c982ffecd5735fa5f09d17a54"}, "3924f031-e68a-4a2c-9f41-eb974857a79c": {"doc_hash": "c8b7bc8010232568f95c14e2efcffdea108da448505a1b505e7cb249559cfdc4"}, "24779009-debb-4ec8-a04a-1647275e0540": {"doc_hash": "667bd3ee7667eadd655ab654a7afa70911f17b61983f3a545c5acc535281114e"}, "4cb50226-55bd-437d-b846-9c54ccd65582": {"doc_hash": "c32f3a468a732cf298213a7ecef11b8e448b90003c03bb57b1338890a47710dd"}, "0bb3bcb0-6119-41fb-b2ab-c4ee52b6dc8e": {"doc_hash": "08f66ae09547eb35f43419e97afc4f8a82422c53a6d3df3028b5985b78b39785"}, "868e48e7-1bf2-4384-a569-380a8a6dc23d": {"doc_hash": "681daab2f95b638014edbab0223564df2cb1cc721c4e72ac771e564c23cad132"}, "585549a2-c5eb-49ea-8719-32f277da79d6": {"doc_hash": "edeb6209deb8e3f2eb0f4c3e4dbf7168d82230aa218f91000baece0cbedd75c1"}, "b6577ba2-9638-4ab9-a8e6-05dfb760f9a5": {"doc_hash": "2a5e3a484d7e545c9df2d4732b163e905fd3d4d652f4002eae385eec38bf4c70"}, "ec8415e9-d302-4fb8-a348-507bce801f2a": {"doc_hash": "6c919282e1dc6864fcbfb8e4a89d86673e47045554709e9a9f33b57d75adf652"}, "f6d61d12-249d-415f-bdb5-38265f3941d7": {"doc_hash": "74201ec519d7d566eec5a7dcee962ce00bf585cf6de1bad92e0a2bec7bb0dcea"}, "702498ac-2af4-4d1f-ada5-1dae5e81406e": {"doc_hash": "f2c085cc42af500e5fcd3c91b147c9f354e7518cf3b758aeb4ca996318acfca2"}, "6fb86d8b-6caf-4c8f-ac4b-716bdb564d65": {"doc_hash": "95d3bf33906de070dc293943c329b88031dfbeb0f9a2d65f380fa0970d49003b"}, "f15b9cfa-d093-48a9-a389-93f9d427056a": {"doc_hash": "6657543a9afca495106a640c7fee299a1cc327354f22b1d73189905185d9387c"}, "d640a1b1-73f6-46f4-bcce-d0805f347826": {"doc_hash": "6f25317a3ae121df49ed08d20207a7947ab91db78433305ea525ec2f0bc0888e"}, "cd8fb35d-232b-4bc8-ac0c-2e785318af3f": {"doc_hash": "1c3c20b4f643853e29db4b9a67cabee6e2b0b63557ab0c070cdcaa21cf6ca6a9"}, "63598b81-90f8-4136-8917-ec457c6c2c8d": {"doc_hash": "88ef00276e9ef6791b50183dadfd7fe109542cc582123323408975cc41193854"}, "4d9cf0e1-43fe-46d3-a47a-65480392e6ca": {"doc_hash": "f428dc83396f7a744783413e477a98ee53977ed9b11a16972dfbb9de8030c286"}, "0ce3c2d5-8df6-49d1-a4c0-17d0b2837e49": {"doc_hash": "f32ce2c543ed24ee4e6d22438b7142492c9f16bc6f2693e592ea373858f13bb3"}, "b586837c-cf4a-4884-8727-1db0e8466c19": {"doc_hash": "8aa5dc7747c0452e7f3e15c3169b44687ce6334d9b30948ceecda65c7e181c74"}, "df6251a8-3af9-436f-b592-e3d4efb67e97": {"doc_hash": "39d840afa5132ba32eb9c5739e73cd66961a85a2a81a4084ef181df152ac82ad"}, "e0809066-1458-4da2-98ab-514c043598e0": {"doc_hash": "c11fc62bc73d4197fad569eca6c1be76f2431256496e1c75e02d910c593f1232"}, "feb691a8-4e81-4e53-ab2f-bee99042aa45": {"doc_hash": "c76a22d407415b6910a9e643b767a361297c9e802a943a4cea667e0f675cb3f0"}, "96d76070-0ca9-49ba-8b58-7120b8e8bc00": {"doc_hash": "05f002dd8ab5c4a5216b43ced907b3f6f5a8c7eebfbe7e17375274fda3e8c7e9"}, "421f1326-e58b-4472-9101-53daf8b4fa8e": {"doc_hash": "20adba820ea01d618365ddce71b4999fae650c7dc80cd87505ac62e73fd6cc77"}, "f9319a42-af48-41c3-8359-279d5074f719": {"doc_hash": "d30458a88cdf162f515492fa1c16d3c473bb0db2703aad4816fe573125ae61d6"}, "5a9a38e4-d1cf-4977-925e-4a2dcb106b58": {"doc_hash": "2dcbab54093e19e8c909a07c93b0e1ef413d976a1955f617d4f0d7747026c5a8"}, "de34ef7f-ce9c-40ee-90b1-1f84de834ae0": {"doc_hash": "b7e4cec7a2d35c15d2275f74c01cb68756630e80ee63f0a466faf9fdb491ee44"}, "f72d1e74-26c7-4cad-8913-64c92ab32c2e": {"doc_hash": "c508e107db676f8278ffee92f48704f6aebefda3a63bc44921c8ec43d2e59805"}, "11962aaf-17a3-49ea-a158-0c087e78a305": {"doc_hash": "a3ba20202bfa5e11f5604bbfb8d2e07123293831d1546edf83fd1fd521f2526d"}, "a54dac0e-5085-40e2-a28f-6563468d2786": {"doc_hash": "b9df5f2ce7ab6984caa372f833d1836b83ae446f7bd240590283078db43fa408"}, "d3f74bee-dd4e-4538-b98f-007ec595353b": {"doc_hash": "27cc2edfba4b13379abcee1dcc863ca7571c24d0a0f9ee043149ecb831c34980"}, "91331157-f852-4d62-a71d-91642e5a48ef": {"doc_hash": "4b3329000f62edebdc55fa4a81a1976ca7d044e81c3f1dff18382122e88fec8d"}, "fa58c07d-481f-4c09-91bd-659e8b76d138": {"doc_hash": "4fe28f9750ca0e64fc94af6f50ae763a75611ecdec278ecd9f706475318dc1e4"}, "1dd29e2a-55c5-4424-8648-4421bc1be5c6": {"doc_hash": "64bbcdb1f589192940d470ccdf60eaab9549c106204ceb0a60f9b54c8da190c6"}, "3cd9bf1b-c7eb-4df1-81a6-2ecab24c0172": {"doc_hash": "025269cbf4a9bf53724daa247da0df312b9f58776fc90835c45c6765a672e075"}, "c7f4920e-0fd0-4e44-b0c2-e6b6f3a14772": {"doc_hash": "c032dc15a93904a9a17f00b7b23b29f5bf4dd48d3825ed62fb4126129818f3ad"}, "307f3874-e32c-4f58-b1bc-dd78b89eee3f": {"doc_hash": "8b7d425d893b3621c8e7ad3c85482101a37062b9452850e13075d583f266a9e8"}, "2fa1c4f8-1995-4bb2-abdd-2fccd8eb0a10": {"doc_hash": "def3c02704a3ce1ae41571bfafee58a1985481d4fc238b1b1562967bf69f608b"}, "5e7e3090-8d38-4e9f-8251-e2de542e4ca0": {"doc_hash": "e2dfe6c5ce6f4b0a6f9196e24c83f6aac4799a89a2f2c6903b5b337ad00f41fb"}, "983fdbb7-bb27-4b07-a108-fe147b4e75e9": {"doc_hash": "93bbd56a8aac9576376536bdc73de3184e705eb7431aefe69251a3ef7ae61925"}, "6c1715f8-5f6a-42bb-b5d6-bb3fbab8a2a3": {"doc_hash": "1060829279a7b73447412cb39cbe795ef65aad1d72fe4b6292ae9e6457403b86"}, "b28a8fdb-49e6-46b0-91f9-a7fae735b3c2": {"doc_hash": "1ca0fc333b64c380082ef562b99b9235b8a707da2e1e83217d0f08947d0725a7"}, "b5bcdebc-2fda-4154-b9bf-f2e1607ba7f9": {"doc_hash": "6c6964abad823e30343462a75e7ff0f09054c65b5d49afa163ff20de6db55280"}, "53c36826-9765-40a2-a9f9-f6911011f9ac": {"doc_hash": "cd119e446234c8580f923517074777aed0b95317be3846674c2c104b2ffcd8ae"}, "672d8b52-130f-4faf-8f49-171fe5716ef9": {"doc_hash": "3847ab601f9ca210ce5b9952fb4393f8d4f9a4177a6e70dd6c40f503b98ffa0f"}, "e3a3af65-bc99-4e5e-90fd-98ddfcc5bc1e": {"doc_hash": "b7e139570cc365300b9bd53f0763b6c62ed6e5e0123afd254f6e28286f1871e1"}, "56c52ff9-c4ea-47f3-a44e-959d2952b570": {"doc_hash": "e0d58c27198d813cb994e17df821093ad87a2ee64608ed7f673413d54281a679"}, "e22ebdf8-807c-4fa5-97e5-7730faaf67c7": {"doc_hash": "10dd4dcaf2323160e360751b97cc4208cdbdbea8a9fc4f4213abc3ba9201a541"}, "222b3f29-b005-412f-a773-0ebf2f65321f": {"doc_hash": "348a3016a5144e98ec3a619a762f8d8d50d0e96ab03f463231127d7c5f54ac95"}, "206a099f-908d-4d50-b235-e9336f258c85": {"doc_hash": "b8a3b75d2e8000a781c042d9eaecd9066488234f436b3fd34c4a01e98782b9db"}, "dc227f45-2363-43fd-b88d-857430a27593": {"doc_hash": "2b5489c085d45d65547869f9df043e99958ae53651db6ef0b93f9162754234d1"}, "e4e64e29-ea7b-45bf-825e-a3b7c8613dcd": {"doc_hash": "edc00748b50eaa0515d083b1e25af8f48b74c8416ad1c2788a2ecfee4e023722"}, "a01fd3ef-84ef-47a7-ae83-3fe72de8c2db": {"doc_hash": "8d164dff57af4a9409780f5c4ef07d81a708d7b97e27ede076307c7631d9440b"}, "b73157b6-5369-4230-b1de-642a2bcda973": {"doc_hash": "85071ac31780e76e8ba07f989fcd64dd2c49c8a15852cf1ad915d5b5974a8059"}, "6024ea8c-014e-4fbf-9596-d8c1c23868a4": {"doc_hash": "4acb64b55693b897e679541b05343e815d098410546f4be608b341f691c67768"}, "c886bd00-86db-4ac3-847d-f9734ece03c0": {"doc_hash": "8e548d8d62abd34f8776d60ffb9edb951e5eb25b4d1ff7442ac73d9bce9f5ab2"}, "a6737da1-2132-4605-a002-49314e407d4e": {"doc_hash": "3c1296fd1d88dc60cd6257a1b6b248928974368ccfa7828a7f833de246380970"}, "a8813743-d3a0-48e4-8bf2-3f35af198440": {"doc_hash": "874bb90d32bcd19f252a97fa1746964906c912b4696691e14694e876a2ae75a4"}, "c211ea1a-447e-4f01-a874-9162d67bc71f": {"doc_hash": "d052a359177ead691414b632e3ebf2ed3d7a3fa9804c7494f92eb0d1851e28d8"}, "30362660-0838-43d1-8593-650e5e4a8556": {"doc_hash": "1d7ebd4802d9d5135c852716ae1b838b98a2f39055796086f81da06c9cb6e595"}, "8ef1ccaf-5d62-46cf-8a27-1f209ce94d22": {"doc_hash": "c7a807b764d82cda0d2683f50b35e08d590821c2adccfcec1dc947e734a51f64"}, "91977109-b8b3-4f83-95ec-faf49bf216e2": {"doc_hash": "e5e94505da86c9bba5d8bbdfebb1c81f80e3dc30dd837e3ec061e454dcc9bee6"}, "26c6628c-ca95-4017-82a8-d52b81f057c8": {"doc_hash": "146d89303cd6833496b9777d5313e4797bff07741340dacc809f7025cd5af92d"}, "9e576fb3-6d03-4d0a-8fc6-5369cdd97ac1": {"doc_hash": "6c958e8dadcfd9a9769d325e2721a000c3538c38b0b8f39b1292c0360a5ad1ed"}, "d8fee4b7-6e3f-4abf-a9c5-8e2b7e46e712": {"doc_hash": "2ac068195e258de777e63fdf62d33c7961a6146335f3ff1a3b5cdc0506d89482"}, "6e744871-dd04-4fb8-abf9-bc682380c400": {"doc_hash": "a7ffde0a284f00a691101362693b433f095216383129602476a605fffb4c5a88"}, "d90e6a65-bbff-457b-b358-ea9fd30e956a": {"doc_hash": "6cc337d118f5adad4cf150e7d6b024b6058ce760a2912ca7633c91ee19d9888d"}, "49c1881f-289a-4abd-9ad4-40c39c9e0713": {"doc_hash": "cb5eb930969cd5a98fe38adfad8a625788146e17ac9864664787d254eb9187a2"}, "02a45a7c-ff46-428c-bbd0-3165b82aa230": {"doc_hash": "2c914cb795f8c1f7e886965d265ce327c41fba9adbb578da88fd369904902c4d"}, "13eefe3f-fede-48ce-8a51-4b57d3bb62da": {"doc_hash": "c432229b66859548955e0f47a4276e020332d03a7d8fb5ccb5e71b33b441512c"}, "966e6733-f83d-4ee7-937c-2ffdca0e457f": {"doc_hash": "2b8de5261c510a9557ca632d0e13639dbe7bb3d18eb4a1253ab155ddb1fa7a7b"}, "acaac298-8536-4918-a3b4-a04e74f7ba6a": {"doc_hash": "e5293878ac6accadee7a69043a9f271969653101a0e96640b9210ea7ee282fb2"}, "3a41fbb6-9d23-4fc9-9354-8dbd1b58e097": {"doc_hash": "a392d55dc5076f813194e62feefc81d5062a60b90f8274213c08eea26909bd47"}, "614c096d-ee8b-42a5-a6d6-6e67f94d1902": {"doc_hash": "516069fab97d06acee30c69c9e286142c54cb993eda9cd9c5fc6aa8ef03972d7"}, "96f03475-68eb-42bb-ae51-c1a28e132d39": {"doc_hash": "8d9f1d5b49a4586e72ff4ef03744a6a68e0e093f518f508c4cf223b05c49464f"}, "a146b8b2-1170-4eee-aec1-d1089e2353a4": {"doc_hash": "762308bbc55f89a74ab1dc216c63c0cb31e58104b9ea40641f2aaab98407d857"}, "eff74c63-8c07-4779-84b4-6d0320c20e17": {"doc_hash": "93836a720880e8c41dae80639323652844bb867724f074a50f8e68fcb1c8e559"}, "139f3598-4977-49ef-aa94-1442cff29fc3": {"doc_hash": "6bb1b451196ef644ddf1793e47f8f6a3465e647677ef76dddeb39bf8c4307c27"}, "e344776e-9f79-4bf4-99cc-e69be6618399": {"doc_hash": "1f2758e3dd2688074a1070a107154267cff263658463756e7d2a66ece67c3bce"}, "2275f63e-d055-408f-b699-89d31d74a22e": {"doc_hash": "6a0e48f8da42eaae7cc1e86666c1dd47752fec01225ddaae9ed518d070b9468b"}, "b939fcc8-4dec-4b68-a6b0-a8f1355e9bad": {"doc_hash": "cc695cfcb7fbd486278feb8f32e72d71a92ed556df039b1bdbdf13e04ff04be4"}, "461b2e71-e613-4bfb-9686-884e8e8de780": {"doc_hash": "e9e29324a6cce220c40445b3817be5bd990f9ee78f52f594f697b0a13b74d050"}, "7716f1bb-4ada-4f1e-9538-5cef95f89ae3": {"doc_hash": "0f5957960e36c313a7c36ad2d5959f3deacf10df87e52c788a2f4a87bd8c1319"}, "c57e729b-238c-4491-8e8d-5013581cc40b": {"doc_hash": "6354dafc4d8f3d4d3d283f59ffdea1fabe73face2af9ae75270f4b4e80f1fcc2"}, "f39f727d-c0b5-43d5-b629-a48a6332a2c2": {"doc_hash": "1f6f39f0558fccc7cfb9a8695c801ae99c20b55d29b50216a7f540cc48847a17"}, "5fe01758-0676-4c31-bbd4-ff1f6f2e9b7c": {"doc_hash": "c79169ca0155d41d49e6a95002aef5f92a7aa8497d0670dfdf402361535eb814"}, "c6ee86c8-bb8c-43d1-b62b-0bb8b62dc2a8": {"doc_hash": "c24572973028d465744a62dc928afb949ba41b9a868598c953b0ff79134ab180"}, "e303c308-b8f7-47a2-ae93-cdbcc490215a": {"doc_hash": "9333b774188d1688354574c9b4356ddc360f5ea0062272cca91b06b5a4b5d249"}, "055bb1fa-2915-4dbe-9136-0316c4af0f35": {"doc_hash": "d1f171f9759f398b85e2eab362655d760dd6f72ba397da7c44e35b06ef91130d"}, "ceefb54c-b8e7-4674-8f4d-48e3e58edf04": {"doc_hash": "9cb8a1ba97f0f2c15d1142599e26c615b1775fd6e57080541ff9184a4122c280"}, "8367b34e-81e4-4fa3-8df2-e67be3829231": {"doc_hash": "a267287f5b151abf8986418dca4389eabdb3c2f2807837a756d3d1c855e3f2b1"}, "5bf36000-054b-4d18-bd1a-9be490774a25": {"doc_hash": "862141271f68c9f7c8a975cd902b376a4b5f9631d3c8d9c35cb3c71e938bef45"}, "35bd914c-f1d1-42c6-a872-a6a87bc7e150": {"doc_hash": "45c19b385800ecbc49f14bf6c4177718ae2ad46f11c8fdd6b146548376f8b252"}, "09fefd4f-f00e-4d65-b345-cb679948c22f": {"doc_hash": "747e708949b8b308a58c3b2100e52f465676fd8f6dc1574ddb7c9d568aca8fc5"}, "944ddace-f5fd-455a-afb2-c6bf3ac16459": {"doc_hash": "99297b15680cf8201074cf32ec11912cd10942ab6eff4cc57f67c118b75569d6"}, "419146ad-b25a-463b-b655-7f8ad2955de9": {"doc_hash": "9104aecef805b80a1ef01965cb59c099c776a9e8faec985e19b86792a7e15761"}, "4dba5d65-5930-464a-a590-3b3ceb89205c": {"doc_hash": "2d0831213783b82a984e6b3a26b3a3d8930b2e7a613a77de028c9539a9330b04"}, "62df63e2-57ac-4b3e-829b-4c9613097446": {"doc_hash": "621e6cc4a318c8f4a5412d5d118f73114fc58e0fc044277b0e6b3d1ee82a127e"}, "47231615-789c-4320-ab83-040e644a3667": {"doc_hash": "7624ae7ef35c5728f35ee84150809d5790c6572875d89dad21198f8562312de6"}, "16821b12-e76a-4b5c-881f-a13d94332c92": {"doc_hash": "b030e0cbf8abecf65415c3aa7b60bf8e4f0afdca934cd6595234cf45d3ec7b16"}, "faac8b5f-d032-42ef-9e44-a703fc9dc2a9": {"doc_hash": "b551972992b51385da755913b9730ac258764236874f0df550c13346cff66efa"}, "51af332a-3aaf-43bf-bdb1-e2f3669bef26": {"doc_hash": "910ccb491348c37c6b3c92948f884f08ffc73c5313fcbde9d805375128b86698"}, "79028bb8-3db1-4080-bd13-47ef0a5dc083": {"doc_hash": "18dca650b1bd122b16e0b19495d6278f65be7fa242a81b5d7897e83ba82b19e3"}, "33b17a8e-d792-4b4f-bf2d-f418d76a0b65": {"doc_hash": "2044fae5969570b429dcbc7669142c0a1a71007da4515e76df0cde9035230541"}, "9b9c5e28-4c54-4762-8c48-358a1a030630": {"doc_hash": "b3d73fea4a690590709409cd921de7035f669b8e92865d9d97e0ee675afca6a1"}, "aa3220b8-06dd-4e3f-af5e-05a076cc7b37": {"doc_hash": "a646161d227f45c32095381b6feb48130105ba1c4a9d1b5285cce457e49a090f"}, "de82f590-160e-4a99-9696-6d3d93815522": {"doc_hash": "a40e898350e4b86ee48fb7200aa4695fbdc67571d4c04a75d98510c15a5dcc7a"}, "04ab7a5f-bfbc-423d-ad3c-718ab6e752a5": {"doc_hash": "b87826759bdc86897532c23f48c35e5995cc752684d69136765a0b17056d2159"}, "9dbef09f-76b2-4066-979f-6e3381507640": {"doc_hash": "709706f90f7a5e2933f963e9d107601effb7950539327c63fa66ac728dd3229d"}, "2f30cea2-1553-4817-ac1a-86228992a932": {"doc_hash": "aed796d890787441a35a848f234fdceb582bf4a59da2da1b29035e852f735dfe"}, "28164c55-1477-4b59-b9b9-edcaf73406d0": {"doc_hash": "65b2194938b3c6e613595475048df81ade0d24a9d7ec4402156e98e0251fc0e9"}, "6e40acdd-f6f0-4032-99ce-3f324e260b4e": {"doc_hash": "915f3d01e6b0b16204211b53ab6ff47083e18342ac4ba0e0e5fff60c67b4b0eb"}, "8bc2282f-13bf-4fde-a196-caed39231544": {"doc_hash": "8334c6fd76fa2e7f3d36fadd1b84b2dc6cdbd7e7f77453c6f894000477c311fb"}, "e812b885-2381-4bd0-8c58-49f3615a8488": {"doc_hash": "280a1bd74bfc159dee1c9e2e495e272e1a456561861ba86d00b9b7110059fcd9"}, "3743d99d-344e-4152-b48c-986d87b65724": {"doc_hash": "36ec66b575d913c05a0efb1baa2f77253c5d7d46f7f1785b6750b52e53655cf8"}, "1e807694-1dd5-4180-890f-d5a8c2e9ca5b": {"doc_hash": "a7160be8c09304d7d5fce1c62eeb3d11ff14ee954c744058e2dd7b3fd1efc372"}, "d02f1baa-930f-466c-a8e5-899c0c06cfc9": {"doc_hash": "42cb9612d604e31af5834a332f09e75cb4fbc037ad697f32112c72964a55d45a"}, "c4e08ca5-4c1a-4a2b-aeee-533d8cebc18b": {"doc_hash": "24bbccc9755f8c874f1ac437f41f036ac3ced54dc732bb1f84ff42ee3460b837"}, "cd6d81f0-2483-4928-bc64-3bd0fcff95e7": {"doc_hash": "2262de537d2da9f65a58ae674ae917f1acc9fcc05ea5aa8e41cd63588f78c9b2"}, "dc2716c7-0ed5-46e3-b8ab-eab0bcbdd0c6": {"doc_hash": "6bf550c667560dce1c0fe9af2b92d790a650288bf95cd2ed1698eb2e801ac02b"}, "13b7e691-8e3f-4d79-9c1b-0aefce5d45ea": {"doc_hash": "0dbdc60350cd6266d90cf5ad962ffa55ef18e3902f9ad64c6adf06e8f556f1af"}, "f3dbe722-c33f-495f-9c8c-1fe59afc859c": {"doc_hash": "07e135d4df74c9ef89b3682bcc6e214a8e4e470ed1cb0224804069e0b9bd8225"}, "f612ff83-94d3-49c3-b874-1669b37bec02": {"doc_hash": "3896719a49d76d9af0df521e4d65183319a63107078a6623f4071017d089521b"}, "268b44ee-a70f-4a4f-a901-4386bdb361ec": {"doc_hash": "f37de836953a25749c066228aec032f92f05ea49d2d79ef0a8cbdf6ed970e117"}, "9614fc88-f8f2-41f0-b09d-f77f493fba02": {"doc_hash": "6e2d8fbc52f03c64475a7c3345c79f72539484aaf23913e52a1c7652cc0299dc"}, "44d15e2f-b35a-4caf-9f92-f9a69bbaae1b": {"doc_hash": "0d853e7924ce9880323e3a7b5e0064510e34b354e38c1e555dd47ce8032afcb5"}, "70b1d576-527d-407d-a6e5-7e400fcb36cc": {"doc_hash": "f8f78b35431e1344f49bd86775116ef9c6a21eecbc02d34c870ff06a50e5b117"}, "44386ce8-53a4-43ec-a215-c6dca675a35d": {"doc_hash": "cdc5090939d5914bf0812b14bbf37e755b1a35ee8bd31dcdd8cb0b24561d3199"}, "91bb3e2e-aec1-4958-b256-c75d0f52f799": {"doc_hash": "9f0bbbc50d5186c43fb5fb220f437799679d3766035a18a3146b305b41a38356"}, "ad6f061f-619e-474d-9811-1758ffb17dec": {"doc_hash": "b57cf4ebb04c81081b3b2700173b67b456853fa527dfe2f51245cfc9403931f0"}, "dda50a82-fef7-4ed5-b6df-efa5dcc1d565": {"doc_hash": "37995041de63f33e9489a064035af751bf2b897d34c0ed380a0b877f414397cb"}, "45a210d3-786c-41d3-9371-5a223655054f": {"doc_hash": "0118d0ea91257407dd471830f34ef85583f093e9b98c1fa532f505e08caa18d6"}, "f3dfe56c-02d7-4645-81af-56db0b8b7418": {"doc_hash": "233157acc3c67a961416bb8f8525bdb2d941504817304dfcc76bcedf53747214"}, "745a875e-d7b2-4cb0-9ff5-82f38b7a2b0b": {"doc_hash": "0d8e5aebaf897ef420b6145bc3ef6e925644d46e90a569424cb152cb3f15b19a"}, "f4c2e25a-5337-484b-809e-c782a054be61": {"doc_hash": "171c9280f37bfba0c44c7e16078aeab66f8cebd837f51cb69bc58da20bf6ce38"}, "c8151611-2df1-4868-84e7-e8755cce95c8": {"doc_hash": "acf8ebb455f69cda8fcc27c6ca0bf0c7906ae2455f8239624c12db9fe1ee08f5"}, "2df1b852-6003-4f38-ae65-8f64a0e4e73d": {"doc_hash": "d1f672cc049d96efb95f4df2626ac63cd844116c47a02fff24238b4ec5cc7a74"}, "e826400a-c3d2-490f-beea-7d5dc2409bbb": {"doc_hash": "a9f049e22aa836d1986fb80a47f3645c6a1227fb7df819506d504e13a05ed858"}, "202a59b9-b5ae-469e-afe9-65cb3c3afc24": {"doc_hash": "2d245c44b5a0944dd4f959bd2ee8d08f36891002013d21ee54acd3a52ba12249"}, "901ba4dc-77dd-4c11-9313-0b6eb245a589": {"doc_hash": "c5e792dbed3b33f60533b894e3fef91dc00c66d55f6c05f536c4d745fa81f551"}, "e4e336c5-7e84-4b6a-b2af-46d6e47b9e26": {"doc_hash": "e05d46e6b52f6763b9d63b3687fadc6b72d0be5f35aa121d742300c6d1e45146"}, "f60dc197-8ea9-4e74-9c9c-5c19dd4fa6bb": {"doc_hash": "9f490e969828203ede3998ef3f49a3f0067cd7957cce13d1f5676b7e82e7f245"}, "95d811e9-9614-47b3-9981-44aa42ecc717": {"doc_hash": "9b9a1a1872847fe08671e6e19133c2972cc92c33d671ddf9280a1125ee27081c"}, "ba83668d-cec9-45f1-995a-15e2d0ff46df": {"doc_hash": "b89a20ab7dbb3fca876973c82356a4836bd197c8f92643b8417acb99c3c783f8"}, "6713d2e3-04e1-45c8-ade5-d210de5e191a": {"doc_hash": "85fc58755bb98242c81ae9f23c9a598ee1837b365cdfa168f5190abeb6ef886e"}, "ed2e3410-a837-4827-9546-b19a57ea1566": {"doc_hash": "c13b75702d988c198f704f0659dc8caf03855753fdef2d01d23a30be9476aaba"}, "d4330b78-b0b2-4206-aca1-594930af62c7": {"doc_hash": "aa896b2969df7d09addf32be069aa576afb6b5673752490e5ee87a2fae66ff2b"}, "1399c9c4-8949-4d30-bb5d-f99ec2bdb5dc": {"doc_hash": "6001d31818a5b48c32260d89649d76842f02838134b14de48f4e4543f6685d50"}, "77d24da1-12ef-4dbd-8e28-683b660dfa80": {"doc_hash": "b8d53af79399232e3dc18977a95cf25ab81f98a7b1a8509ad4420073442d4f82"}, "0736c5b2-ab52-4f91-a979-92a8f69f16a3": {"doc_hash": "54d565c2bece5ecca710efc0917cb2aec1f83c69149e3e4cf54bc556210857bc"}, "828dea06-8c14-4471-983a-d13f070934a6": {"doc_hash": "2a9a2b5ed9cc922e96e7d4b8b563f2c83bd46fce2f05f4c2b64d2ef41447307a"}, "7ad6146b-8b45-4f80-82ad-843ce1636399": {"doc_hash": "247257cb921f14e9839275965197d2cdefc7cc70c9c570f2a5704b890b90a415"}, "88cce6f7-d6fb-44dc-b866-0001aec53849": {"doc_hash": "105256dd355b3ad5cde768ee70d39360154af384fc502f7f074189a530c686d0"}, "e3b05457-1dbf-4eaf-b156-97c5436b915f": {"doc_hash": "92706b895af489b718111110e15689b56136b8f3e8da50acf2e780084d9713bd"}, "53d5bd52-57de-483f-9280-db5e98e9f43d": {"doc_hash": "1e5d14fff9fb6d2aa9a2793475ce6f8086d77a4cd0fd4f13c0e57a05d170a59a"}, "21473cd2-d914-488a-8cbc-19b8b099b2a8": {"doc_hash": "7e1e8dfda80f5f037d13d724c52ad64ec163231e04220993ce55a021788a0374"}, "b56bbdd5-48d0-43c2-af1b-2ea639336829": {"doc_hash": "8b5c620dce09174084a4cf67fb53e6aa587ad66ff35b1b29595aadc0983af1bc"}, "6ab8c39b-db10-47d6-aa35-b590c63797ce": {"doc_hash": "6fdff455d2b2dfe824b7d6dca1c53020e78a3a1912ceb2da42937e5edaaa1e0f"}, "f089af4a-8eb4-4668-aff6-c730316b6796": {"doc_hash": "88992211568d702f22ad76a9f653f275c4633898df90df9bcdf1b307eed4b460"}, "c87fa6db-599b-4767-bc7a-d28087bc00d2": {"doc_hash": "d29d839c431b6e90bed186608c6bd8180a00300b1158782616d79e8789831597"}, "98d0eeea-d4b0-4d00-bea6-99dd25b69bd3": {"doc_hash": "85d397d839d2e0d8bc52ddb61ef81730516859644bd0777e7aed9e808a47a9eb"}, "3c1abc2d-128e-402c-a36a-f893a54f6102": {"doc_hash": "0abfa1d5af81dd94f00d2e3fa0ca82ba5d681c5fd94dc77143fad29361cd186e"}, "6473298d-b109-46ac-9257-481f5401da39": {"doc_hash": "09cc33f441db5f34f03a77e81309efa104b161810edf2dbdb04d0858ae6e8c1b"}, "9746563b-ff1a-49e2-b911-a8835713c9d7": {"doc_hash": "a3d848a9b27e5df77ae4e8b7431c75619a00df250c4dcec2c76c4fc177c4a920"}, "c5bc0063-99b1-44f2-a77c-4d3c50214f76": {"doc_hash": "91301f94f9bdc74cffbf1e6c2f472ce0e1cdb2942da1167988ea3cddeb962970"}, "e9aaf805-a86f-4ac6-994d-6145595906e4": {"doc_hash": "cc2ed8c1dba67c80fd64984b7c247d8cb0eec44ecb3b4c13b3a86f90d7100916"}, "bd26570b-8ce8-4801-86fb-ae8fe52b8004": {"doc_hash": "64a6fbe3a3d31b040e15517381bcd844021539dd5e66cc13f64c1ba3e7a17e08"}, "9f11dc7b-c668-4a87-957b-1e2f50842a2b": {"doc_hash": "31d463df44bca323ceb9110179ae4d8339483e39e505b4a615d645cfc13e2d8a"}, "de2085b5-1814-45d8-87f3-f7cb302890af": {"doc_hash": "e43ee02a63a5175f31b7cad7a2b6750510d81eb9434668ff8c7dc851b783cf67"}, "859f3bd5-cfad-46b0-8056-b0bf9be17853": {"doc_hash": "91021ec1d5060014c805d1a77b12a577570adeff37886e30d0ccbc44fc778df6"}, "1b4a46e1-bbcd-4835-85d9-14e757dd61f1": {"doc_hash": "5b4d8c1b94d70394ca199e3b3944de5dce43a5c8da494eed881abf144d3c08e5"}, "7c22a6e8-c58f-4732-8bc6-455a88782573": {"doc_hash": "33c42e2a6fb5d0e482346907865aeb88d0c1e5ecc047057f880d194720987117"}, "975cb97f-972f-48c7-a124-0c700142f915": {"doc_hash": "6da00f91409f6899a4a7f54c01d9267d5f28a6536f847e8171db7098c485e220"}, "ede587b8-8835-42db-847f-44d0462fb5b5": {"doc_hash": "768dc2049b74d369b6d60e23caee6d2a49dd745c5dd82cb99dbad69d68f8cb6c"}, "e248a952-241c-4886-b50c-9dd16a7bd73b": {"doc_hash": "a356e603c7cbbffe5bb34f061e92858b88d0afac263d7086b5c83f85d4b26ee7"}, "5d9064cb-8f14-4d9f-8d43-830f58e51746": {"doc_hash": "23f40cc347294e7c64d9c995ecd52ae71770de76b3c167509818f1be4c897969"}, "915249a3-32ea-403e-b5cc-84d6b3e6dfbd": {"doc_hash": "ba222531f5b0adcee9bdd273395aa84797048e7cfb48c278959092c25cdd4443"}, "70e43007-4458-43cf-921a-418f6feea89a": {"doc_hash": "99e45db08f000b77bbb23a4efab56a295657a23dd5e54ca10723ff564d78fce5"}, "c3570920-63c5-45ae-82a5-cdbc2b7d506f": {"doc_hash": "2dc8dc075c749bb4335966c96f7be4e576007ad6185b9b693cb2f60f89b9d538"}, "949b5ae9-0ceb-46bc-acdd-3d332aa7dde2": {"doc_hash": "ea5b995b21b76f946ad16f7da3242b306704c175b8750b6f688015cde8414164"}, "3062b395-3f6f-4af7-a6e6-01d547e4a51f": {"doc_hash": "272d4ac69833c6cc59d7fd8267c2de52a5bda32be0e45e49a2a5b7e0c85a0807"}, "6a2af759-eeeb-4442-84a5-bb297400f383": {"doc_hash": "cd28113cad62e8e79de0217287f7a3964b5f5e9ccae2efecf56fa345b047eb83"}, "fe1f3167-9f63-4233-898c-7afd4026fdbd": {"doc_hash": "fe3e9eba44f79737407e91bb25656081491c4b1dee1de8d36ae99c6bc0958abe"}, "3f39bf9a-ce2c-48c0-b26f-11c607d53dea": {"doc_hash": "fb7c56acb4289e226cb0249eb840fc1f721f8717712bef0c3712f1993ea14402"}, "a677123b-8f63-41cd-aa39-623adbde10e2": {"doc_hash": "bb2ac6b93f1f2d3e4dbf34ad7e0f9d29f0f473b3b6bb8da500f40506be65009d"}, "70122c97-d631-4a23-b35d-993012397db9": {"doc_hash": "9f9660b4492f92a0fdd1b5f56f66fb99a43fd60592722d5036cb7162da838ba1"}, "e28e5658-7758-431e-be16-ade496157289": {"doc_hash": "f90114b5e9573f48e37265a03968566cf073296805836d28723a8d99c7733db4"}, "d7ab8b59-d00c-4387-8cc9-03aa56a47168": {"doc_hash": "da2d6745596393d086a5189b5a380bbd00d88aeef6ebd4c9890c9a8d2640aeb8"}, "cfc2b28c-90b6-4eea-bc6b-251a3948aa1a": {"doc_hash": "0b7c6353877edb2106697a82890f3fa80b6b14367af170db640f3d849ba419fc"}, "8df46f2e-0ca3-4c92-b4ef-a79a7bbf42a7": {"doc_hash": "31b3ce55bf3d7d3919122c9abb4804284983ab2c5e26415de11da7ee60c428d1"}, "11cb62ce-5bc2-4f5b-bc5d-70986aa84c28": {"doc_hash": "661b33c919a2ef6b53c335fb900a733d467a490dbc0d3de064048fab63c63213"}, "47de11ce-96f0-4b35-919c-6e1280be7c90": {"doc_hash": "9220840c4aa5d54e2aeeda376660a3c12080f4bfc583711ef2ff1aecbf693337"}, "0206d144-1e84-4663-8f01-71f2472b5a94": {"doc_hash": "a41f0df258ff0f77f638fdb4fa9856bf62ed985407169ae3a077e5759d8bd0fa"}, "d972e862-9d6a-4d01-950c-491496dcc956": {"doc_hash": "2bd5c11173549d1095fa24ae5e9665ec9ae90fb7367f6053cc2603b4169e601f"}, "01671eb0-811a-4126-b00b-f851d4635d4f": {"doc_hash": "d835149428c80232a6d433db81ff3a630e0dbb8cea1f23e1e53c129ad7bc88c9"}, "96d9e942-210e-4e96-83a0-d49f9f84b596": {"doc_hash": "e2ed756d70096cd62a94f159460d0689986b8fb809a7a637a635091361c587e4"}, "7fa8802e-7ac4-48c0-b954-16ecc365b55a": {"doc_hash": "0b37b0d82b5c320e8efc96471068e61e6ea45cd01da782e85ec4b0aa71113d85"}, "fc69774c-284f-4be7-aac1-a3176778ba81": {"doc_hash": "2169291535e785a2869c24bbabb0b6796e8a6924d511bb11543a26c7f34049fe"}, "49e27079-7615-414f-9104-01f850d0ea51": {"doc_hash": "e130fb53e095415b93838be9cf8a6b107e0b072f1fab73386e3df3e895c64b25"}, "59ef6f78-4b45-41e9-978e-78b1e269d490": {"doc_hash": "0f08fe0fac03141876bba08262f4bd30dd01c0d86659ffdab570dc2535bc4ff0"}, "c3c7389e-2546-4a05-9277-8d8419ebc6ab": {"doc_hash": "3685ccda8cc8ec93f40ffe859658bf9172b21aae0d7eba45b807f2965f108f8e"}, "08029900-53e1-4449-83f1-97c3d1b0cd7d": {"doc_hash": "7c68bbc3075921f943b1b4e1a23f6d9ccdeea99cfc4f5e9e51a00c35ae96a599"}, "117189aa-3c43-4a30-9c9a-faba68327fb4": {"doc_hash": "2262bd470cd3ebde23cf5656157ad4a85498327e8fb98cbbdac580138c0ef3e6"}, "ab2a221d-dbc6-4f60-9ea3-1df5f6b16f0e": {"doc_hash": "6a5cbb6ab218aa81959aa556de00f8a7cecf50e7b7d811eb68d56b531723841d"}, "ca3f7fe8-f057-4b26-b254-89681364a0d0": {"doc_hash": "37fbff63e6d5865f15e555a64f5493522ba359068d8a4a1b1be7f2d5cc3120a3"}, "b821b5c0-7d90-4a3f-a42b-1507888c7a88": {"doc_hash": "92adf232fccb348b45a0ad3ab72b2597f1372d048ab0e4d50318269f75bc6c3d"}, "2f4dc8dc-97cb-449f-88c1-4900620166c6": {"doc_hash": "dd2893b6dbe37aa96359c920fdf0fe557e3315df56044cae1c4f8da127f5b49a"}, "017da089-3d49-4bd3-bc3b-787b4ce0f446": {"doc_hash": "fa9f38454af9ccec4b521f339eca05f3ec8053317cdf46b3ecd74e1df40c0102"}, "81ace837-80b9-4ec7-9327-b6953bd20f8f": {"doc_hash": "dfc54ee142f389f12698864b24ec80204ea464b11dd89f301d500e8dc378fcf8"}, "12760dc4-8d38-4d78-a87b-cbfd06155ea2": {"doc_hash": "7079b334ba096405264ec40371fa5c92a104807c53dfa025b4055132ccc37432"}, "c8c494bc-4d50-4097-b412-1a846bd4bfbb": {"doc_hash": "b818a1bd7a929f33293481ae7b64e836ba2cbc64ef7749bc0be8ee42d2cfd8ff"}, "df94f3b9-5318-48f0-a524-301539409b81": {"doc_hash": "b54268b4d2362b252f19c765339abcc39d02910019f76b808333c0bb5451a1e2"}, "b6f84671-c518-4612-90e8-0798c213695f": {"doc_hash": "a1a54bf3b123ec956d1c2047ac358ec380fafa51b88a603cae3d944e3afde7a7"}, "73490b47-48f7-4d97-91b0-0971f5030e1d": {"doc_hash": "89b7ae7994bc1b7776e1f2c152f06021ef3e0177cf2d4609357eb8c2e44a962d"}, "94d2899a-92a3-40ac-93d8-e99e17bc4759": {"doc_hash": "e5c40034d1cf024b0123ac5c4a0191ee4cde9f512c047137738655f63c96537c"}, "27464973-0516-421e-9816-230fd6681851": {"doc_hash": "9c7bfdb93ad52b47c248d0f9142301b31ef22b5376af6ac4fc4ffac033fe9b1a"}, "8e171c9f-9211-4b55-bb85-cf729ec1b47c": {"doc_hash": "72511a976e47f5ec313325dbdbbd950d3dd8399c0de5f09089dba90d7a73dd43"}, "836ff546-128e-406d-a2f7-e5ce1dff7772": {"doc_hash": "1058c39fa72ba3afa839cf6f91725acd9407175301db6d5259b4cd3567ea2d4d"}, "ded400d1-3f4b-4647-aba9-83210b951f9a": {"doc_hash": "ad93707659f560df6d91ef66e4a7bbf67855268b76773c2f8b5730f63c70bea7"}, "6085bcb1-61d5-4e7e-aa27-db76e850f6c7": {"doc_hash": "c9b2604ce29a133d61b086e2ee7223d6c4be799ede55e58ae461fac1551b46e7"}, "5b7e0dcb-09d2-4189-8c96-2ec4232a1c85": {"doc_hash": "70d116cfb5582b8ceecfe30be6727352885f2c5a22656bbc2089dcd13cedb296"}, "7a7a540b-da4f-4674-b2a5-6d609bdf6ac4": {"doc_hash": "e389c4e4dd47e4694b41574a66ae0c9b02862c82034687a1a1463fd11cd38955"}, "7f708d7d-35cf-4a38-b86b-cc32a5a7227a": {"doc_hash": "2b56d6b9bdfb967fe33b1edd29d317102ad39ec40b7e18f0bfa8b8d1ac6c4c0c"}, "504bf806-4451-4eba-a0fe-5263d7b4c179": {"doc_hash": "88e9124b61e85dfae193e13ff017bf1eb8d003fb07b99515cffaa5d4932d4ea0"}, "27c5a902-3c45-4f7e-a0dd-b37a7c2cfd31": {"doc_hash": "21a56613f4008088529cdd72afee43ab4581c38f0cc0d96acf87b6c8a48dbab4"}, "df843395-b69e-473c-bd40-3070f7dddf73": {"doc_hash": "76ed3bb96e6e9e5376273536c7a2866a59c8023035d4942731084ff75a27b6c6"}, "6991334e-eb0b-4620-b616-3bdbed967065": {"doc_hash": "753becfcf7e8d4a8717184b48d9bb599dd37c9b5b5f85f6bb3f13360777e10d0"}, "bd079558-1da8-4b38-abb2-301cd48f0124": {"doc_hash": "b3d141732c1a771baa911a1ccc1ca659e3adae4da1c3f7d751cb6f947bca29ae"}, "55cb1735-ad8d-4fad-a22a-4e1bdb7e4c0d": {"doc_hash": "7bae6a6cafe3d931c1bb9fdd26038a0b4b493c2c2f5d405cbf2f5bb1964fd362"}, "4c0824d7-2a88-426f-abab-be3406eb835c": {"doc_hash": "ac419f2d08a03b0b5678af87cf3e7eb276bdc83251e58fc6a147a08a9266dae5"}, "cfc0ee0d-4182-4c10-a058-e6633ba0bb9a": {"doc_hash": "ee5a2c8cf5433ce9d702ef9f1cb78c36276e8b27202ee0cd0ffa8ffc59e8098a"}, "b2d86efa-0e2f-47a7-af6f-7bcf090b1c47": {"doc_hash": "113ab5d1a68f9594457bf465e733358c5b97786cea8cde3c847ee563ec012cd4"}, "8b90ac34-39c0-470b-8e8a-aeac73415acc": {"doc_hash": "3828d5c18622773c630b404b105380287c678d99b127765bc9de19ce39c75d8d"}, "35daa43a-a023-4f93-8d32-41aea5315ef0": {"doc_hash": "db8e3fbc469d57950864b68776ccdebc4ea717eda96b6c4ff4ea602ed2dc27c1"}, "a09fce7c-1e38-4399-bf90-054899da8a4e": {"doc_hash": "c877ee5817f3d1a93ae7a8d9c6df99254cc22464291c8c0fa486fc9de55a4a92"}, "989adcc8-90c5-4331-9ec5-1c2ef69f145f": {"doc_hash": "2f52e361b1f28339b9a9cadb1857e6d53167e04d1a4588afd2e828f5627b19d9"}, "d7992973-0d75-4b0f-9fdc-5e6dc20d4468": {"doc_hash": "a0235ff5dde7d10e9220d75343d8f3ce71b1d256ee33bfde4d4d7c79b8b36c38"}, "39555c6c-44b6-46f0-adb7-24bbaf27c7ae": {"doc_hash": "aef6ebf105f765a1b27a5c714ab0710aca65f5fd7b873e32c959d2d25e69ff8c"}, "da9d3d0b-dca7-4569-9275-57f120868e1d": {"doc_hash": "78d4506eb615422440b98586fcc77e2c7b5f7ad1cc2f0ac5b7566ab1173fd8b4"}, "49aee804-3068-4c1c-88dd-d786eb641fb4": {"doc_hash": "a4dde9175d1f6630d2b447cb61ed304a2f2514b3ad08304e4461d04c91bdbac5"}, "6f984fa6-4bbf-43b1-b846-154737312fab": {"doc_hash": "d97e8f14426324a132b97aa9d8f7db090006cae780d90447062fb50e7e10db7d"}, "3d6920fa-da79-4049-81eb-30a0384f3759": {"doc_hash": "7fb3bf2bccfcab61966ae5dbc59d70bcda3df8bf561c16e4c777c30b198f5da0"}, "11c2cce1-0533-4a3b-8b51-61acbb91ec62": {"doc_hash": "582909c5c539072be068d3af9190ec62a18acc3cd998f7f066c41717864e9e63"}, "8c0d6e62-0d0f-4217-a63f-6b628684ad4b": {"doc_hash": "d450480597012ed2bfb028dd7d32c0786730f92f1d68c66686d47b6ad9b21753"}, "17147260-53a8-473d-8803-295737fcaa32": {"doc_hash": "a79ae9ac4c6ef72a8c76b26f90ee13059e262daa1a9ca221cd8ca16d6a5e7d8a"}, "c71abab8-e46d-44eb-acf6-2597bbb41145": {"doc_hash": "ff973b7bf2cbeb1cd12460a96f548a60c0ac9d4ba523217b0b7aac5cd1becde9"}, "9e09496b-16eb-4a47-8395-6efe86f6bc5a": {"doc_hash": "49090e9a031a9a5b213207d25d44e53f160695427ac1e836eb863a7bd0069ea1"}, "cb75f051-d172-4636-a4f5-d6f0c671208d": {"doc_hash": "0a94027fdf98a2b162b98aacea0e8b5f5a6fd6ab44829f50e438d6187d2b5d4f"}, "e26a46a6-7ebc-461c-b6da-7b1e8cc6938b": {"doc_hash": "e067df150c156e5e596774b3b2272cfe0e1d8deaa4b6509e8fb8bdf3ec9917e5"}, "d1da64b9-fe44-4b08-9e82-3c66d84c33bb": {"doc_hash": "ba9974766de276ccd80083f1ac25186ae6d73704eb4ee73f18f21bb0ea21c9fb"}, "f22a2c27-c5f0-4f51-885c-343af24e3e68": {"doc_hash": "dbd5bd7fb695b3de48b0b676a1132d83dff1c9ba004379e73280a6cc6dcdeaf4"}, "bf5690fd-0225-4606-bc19-0f6e828fd463": {"doc_hash": "7b6ffb2b2f8c119326fe7d30b8f369bbb323fa7f0c363bda5a422f86b13494e8"}, "880c4e56-d07c-4f9d-add7-3b9b68c51f60": {"doc_hash": "cec70d52541eed0ec9cc07a89c00e176cc1ff470dd6de66af947f4fa740ff5f5"}, "a95dc4bf-e9e6-454d-a0c0-2300fc7b688f": {"doc_hash": "a5732a39ebe822e72a5a419cabde55c21ace97ca0c4b5f8508c711c33e98b58f"}, "697a9db8-176b-4b82-8e3c-708b3359f67c": {"doc_hash": "9099d94362052689af0ecbc1b05e7a12af026a19a32cae031bb1cfb445497dd4"}, "fe5672f9-60f5-491b-8601-a55e84cb51ed": {"doc_hash": "0d8d505d5bce985d97bc9bb6f84479137b7ef059a1946b470c0f70d2843117f6"}, "e9fca149-7260-4295-98d0-2eefdf9a298e": {"doc_hash": "e4d45d0f8b368af31e7cecad84d5fba7542d4ce86aeb47431f16335a96aa0df4"}, "f3e692e9-0cab-4c10-af2d-aba16799d37a": {"doc_hash": "83da12a743bcdc440c558f32a819d2cb57971f80ef07dd55cc2b81c9e927eff4"}, "e0d6b48d-4374-4e43-9689-0e0797e06be6": {"doc_hash": "6c5f864efba32e8af74a643e44d9dcbc82f0541e0b7c478c5f88ba99d0a1950a"}, "09009419-a0cb-42e5-8cd8-d2f941c38406": {"doc_hash": "913376e4e723dc72f0669e367496815c7af9feab24f9ac31227fba3b51309321"}, "c61dbd27-9c2d-471c-92eb-b7b00ce93a6c": {"doc_hash": "a984a8b7e599bc2b3cff81bacdcc2b159d2f2b737188f838e19a5db0f152ea19"}, "e64855b4-730a-42f0-a2cc-7b7a6de5451c": {"doc_hash": "681e738546c2b411704575ba519a2c5577fa5d92a12753157852256b4aa9b7ab"}, "197a86e7-b566-4916-98fd-11f309cb9997": {"doc_hash": "622d78768de3c64b84b0b448b02c7bce2707288cce914b1a12c6841158fb19ef"}, "2d4f8e80-a0af-413d-b693-95820e2dabda": {"doc_hash": "2ef67e4f2aaa7ee20e0aa760453003fd9d22c200e96663dba8fe991b78e30338"}, "c6270d9c-fc5f-4de7-aefa-456a43666911": {"doc_hash": "52e303e1f64bdacb77a036fe4e047697c9c2af98719d1919e2f661a6e81f5816"}, "c2d2f453-d412-443c-8c56-e617ab782c97": {"doc_hash": "eaf86e86dad6f18a50cb13c668cf7cf05c00bf6bad5f7da9b0691c8fa42cfa84"}, "5cfe727c-fce1-4059-84c8-3fca3d4cf145": {"doc_hash": "80ae3d96980e35520438a4af95444311ba965df42939927229abe56d7c6178f2"}, "254020c3-127a-422a-88e5-9de6fdec1d74": {"doc_hash": "0e61adc3012df4e060ad0206dca125571b57ef1aa0a82978124bd0c780cfc119"}, "646c1e7c-1050-49ab-8c7f-06c3cfe1083c": {"doc_hash": "548ff88219205f2ada2b9cc9e19a49e99bcd69128c55a738a3b0c69cfa58c943"}, "3d0af644-0053-4bf8-99a5-b49c26ad7c6a": {"doc_hash": "f6fcaea5481ac195450ebb04e722bad1ae30468bbcaad89024c15a4aeaf63efe"}, "cf6840ac-57d9-4ccd-87a9-68c98b5fd776": {"doc_hash": "af1aeb4ea598c23e85e9086a7564c34ef835733d7e1fa1ac62fe15344fb42145"}, "89449869-b965-4d78-9c32-b5a9d52fcb55": {"doc_hash": "3113442c0696f533f4fb58f82b955c50be3af638b3b48fe52c7062902db918a1"}, "442c2b04-fff3-42c4-9308-7a690e2505c5": {"doc_hash": "26829df074074b783d1f996d6ae49d0662a6ed2b573558110ee51a1bf0f49de3"}, "5eda6d1b-7b55-4341-a8fe-95f0b0335208": {"doc_hash": "073c889b0547649ee2ec1b35415a2e0949222e8a93eb987bbff4356fc6f160e1"}, "8f37e84a-f440-4af1-93a9-0b9db3f1e691": {"doc_hash": "6f8159edda3923a752dfee7fb371a6e3b75e46c52a022a86cb20b9e12596140d"}, "eda68e73-81a5-439e-868f-7a69310c4db5": {"doc_hash": "57ba32d5f0cdf8db002b52d3847ec4e5a1dd1f8e41208db2c071d2f2c70f4d72"}, "19f12354-eba4-4792-80d2-4f6a66322190": {"doc_hash": "6c99a914820d31c432bafe2e5032ad4d3e42c65c87ca6305ef57a67d9ebf84c3"}, "7fbbbec5-542a-4453-8609-2065dc31d125": {"doc_hash": "89e8b6da2faab392a7f1803d79176a442f21916d9b34bcaac060e26e56a74251"}, "e334e41f-bc4b-43f7-bb06-09af73602534": {"doc_hash": "3446c6683551c0c930d239135cc54216495b8e1ecb27b50db755103849eca4c7"}, "abc1e945-2d68-4373-8aca-9630059f6c37": {"doc_hash": "27224b4244cac2c007408caddef10a1bddb91ff0bdf2dd5eed43d399f54f507a"}, "c324cb4f-477b-47a3-a6e4-05c7412153c1": {"doc_hash": "6fd6348001084f43a6f70680bf0a47160450bca8ff1a130e63961769290e9d73"}, "c57b57ea-f932-4c54-9bec-3de9d6745756": {"doc_hash": "675e6b406242f0afef1805a5031b0687cdec5055d63e141ab63cb9a6bfcd3ad2"}, "b75d51c9-1f5e-4fa3-bc99-7feafb6e97be": {"doc_hash": "f783b27bd6841f42360fb6ad101d18d3059fb9369e4bb0101326288e2d3ab0ad"}, "3fe1edae-4f3d-4515-812e-fea95acf16c4": {"doc_hash": "44172e67ba28b2f240ffddf5223bb5da9bf7e30d84e51c13eb386e6eed28b81a"}, "c04de061-93fc-43f8-ba9f-ca915d615434": {"doc_hash": "f9fd522b8dbc2396e6ce610517ac89b1a9a1b3fe4ea2d01b1106aa71372f2064"}, "c32fb036-64ff-4e7f-897d-c1b75455ba59": {"doc_hash": "e29f0a9a4cc3b6d900a63045acd324f5844fb3751664702b99d127a2dee1ff27"}, "3b3ebad6-0223-4cc8-a28e-65f5d3c67911": {"doc_hash": "0dfc3635d0fccb35c2370934b6ebb811eb635d2f92c9f41d95cc35e7c631b4b6"}, "4e1d0a88-41ba-4a4f-83d3-aa0be1baac0d": {"doc_hash": "15a32e69b24b9a22405717a0c80aa3075bfc93af4dd8f2e724c6a6b11692c875"}, "66b21fa0-beda-495e-97d1-7fa4b253dd8f": {"doc_hash": "a5a9aad20876e4d49fb5381bcabb4970daffe0ae5066b407417bdaf36ffde6d8"}, "179d7165-b487-454f-8c46-904c7403a870": {"doc_hash": "05d92be0439e82b7a00a458b0ca0ba049c45e704b7c19ba171acf69f765670fa"}, "347a1705-a98e-46eb-882b-8ce15e0857ed": {"doc_hash": "def640ab56ac890cdb4b7e34ce808869e71c6f77eedefd1bcda74455ac8dd086"}, "d3eba34d-5696-4d59-80cb-f04b1f571be1": {"doc_hash": "253aea07dfc588eb839f84250227880501646a9f99acd2a0a8cd49d83198d4af"}, "72181837-a318-4836-a858-e6a66531044a": {"doc_hash": "42c1abd81c5ad9f2fba12905bc38b2d4243e15e14ef204037f4fd4447bcf7af3"}, "e257371f-bf32-446c-b109-ac29ad0a509a": {"doc_hash": "ff970f4cc84f2e1241cf88954463536f9117d3a0a2f211de0a5b112420f4564d"}, "f5d7a85d-03ba-45f5-a5ba-8984bf316199": {"doc_hash": "6753e9efd10698ff75eed171b2a9fb99c156ddefe6addad761cbf041f2d3de51"}, "96bf16f9-f61f-4a71-ad58-aa1ec8ddcac0": {"doc_hash": "c45a8304f175dfbd3559ac75224af970cf0a5898405ed9f42aebf29f9eab112d"}, "9732105c-d098-4c3c-8e79-ca7d71048626": {"doc_hash": "1e231e9e0210a19d57c80faf00d796b43f4ed9a9915d752c59a36384bfd15a26"}, "1a6ceb15-6dac-4bd5-a64f-1c9592654a76": {"doc_hash": "2e919eea3d2b896cda8c52b4b7fac47dbeff96a407bc1217e7bae57b0f6e54b6"}, "d9dd1bca-2320-44f6-9c52-d88cfe1f2d57": {"doc_hash": "ef0527fe1f1d2ea9849758962d364e8b2dcea745dc1bab85164dbfee6d681fa2"}, "a1c0ccdb-5f85-4785-a740-5dcec8df9b7e": {"doc_hash": "f42135cc3a61736021c3d09f1ee88e6dbc1357c33ca1856ad94d2b516fe09fa7"}, "619ea8ee-410f-4aea-8396-e8c417966439": {"doc_hash": "00f7a758c026ec969f00d8d8b7e5f2665083c2bf2b5045eaf5fc0f69e18435b5"}, "b71bb035-5dc1-406c-b96a-2f16f27e555e": {"doc_hash": "1bab91dd5d4e1c231ed184d0fd32993e6d7612a60ad0db7291e579cabfa9cb5b"}, "d2bd15c4-dd58-494d-aecd-3e6c9b7a7db1": {"doc_hash": "1fb19c9f2970530e6dfbaff3e6ad4f7280d887765e2e0849eaec3eed70c3d6c8"}, "2f5543de-eeb3-43a8-8aad-e74e49d3d571": {"doc_hash": "bfc5703877d4b1deefc0e1a7ee93a0a63e60a724c7249380eb0b66f1c5e91795"}, "90ade5d6-bc77-413a-a903-794bbe9cbdcc": {"doc_hash": "ec619e37c03e567b2bd5a169d48b9931ac0a3b45ce08470dcfceff82a9f269d1"}, "ee3fc4fe-8875-40d2-95ee-0a977aa39b0e": {"doc_hash": "cbba638b67095c4e41d6dc221e6e5190162014717fca8bd22b127b229cf344a2"}, "dbeea4da-9ad7-413e-8372-664c85be9626": {"doc_hash": "2776da962831b57611a6a22e8e117dab1b37ea020fd96796b43ed143f38ff616"}, "9464584b-051d-4a38-9883-4688fca3899b": {"doc_hash": "2bc3d28d955607d543d62fd5457556eee9ff111f728ad0cd64614c101a187089"}, "70ad25c9-7437-4038-b802-f9fd91768bb3": {"doc_hash": "30150940244edf85f4ae93555ad3aee9dd59178295ef662e4069b4b3855d867d"}, "6decd566-fdd4-4fd7-8d74-4407486c0b6b": {"doc_hash": "36d2fe767a2df31e25e441ad9188d0f4e1a6385888049fc87c524a12797efaca"}, "fb689884-ed29-4177-b45e-7a0ca060ce90": {"doc_hash": "cff7d6b7a7438e10e122443af727a0559559de7802f93033b39ac290fe47d1ce"}, "afa7f831-b3c0-4860-92a1-d7484d54b64c": {"doc_hash": "f6c76b9a9c0d19309f120f2ae6d5ed9834e3092dd71dc1b60763af5fa32d04d8"}, "eda2e308-c2aa-42fc-95fa-1b3ef7477010": {"doc_hash": "d89fa59315a4381a663bb65b814a6ed6e6b384c95f18888fcb52c806f4b7dd43"}, "b40aab9e-48f2-4a39-b5c4-2b98754eac72": {"doc_hash": "768b636db06542a61ff5004f32fd6690a0a7030cc7b60552b71fc2cf37089816"}, "95f97f3d-15b6-47b4-942e-7178636a3a53": {"doc_hash": "809f281b04288e89183d26f8cbe2159d00357cb140a70e27ef636419a2f08952"}, "f899b191-0f8f-4105-8386-9f53dbc68804": {"doc_hash": "6652e2c6f682ada89689f0fcc87bfe18497233d9beab7d484ae02b969053c418"}, "09474376-01aa-475e-8b49-2b3ca45d5d42": {"doc_hash": "3cccbd7bd7c4cefa0f79290b2ad05bf847203ea76f5de09dc48783102ba1bfa4"}, "b5ca7149-12ba-4859-929c-aa591d20cd45": {"doc_hash": "c8a767038eef331dfee38357cd2ebd598c7d33eded30a8df7da7719fbafd8f8a"}, "1663052e-64e8-4645-b7d9-802949fc0d8f": {"doc_hash": "135dd89c3a0370ec8928917c2b6fb44787bd6d12f30837b754d4600a97fe3c2b"}, "75587a64-23e4-4877-b206-6405120fce4a": {"doc_hash": "a1eab2466fadad874cf1724324396c71d44c18f83013a8c6e2d0ef1d4fd2d8bc"}, "4e8836d5-f0f1-4bbd-be80-5ae596bb305a": {"doc_hash": "6e869be55f5836fe7a4d8f9d90d65a9bb796700075e0742f8d22d806cb2ab7aa"}, "da088617-b5bb-492a-934a-c5e1db540e55": {"doc_hash": "675dc85d5fa59b671b026995515796e7d2ad0f07d74db383b1a5132265eefa15"}, "05395487-c7f1-4ad9-b7a1-12c7be11accf": {"doc_hash": "f5699390c3632fe3eee527457ccce7e01a5568b4b6670a83ace069e9f25f5e60"}, "3b661ca2-c7c3-4fbd-aabf-f4d7f457f21d": {"doc_hash": "93168a554ee6f7f31a4d5a64ca3904aab4748fdc027a85e8c96c6814a1492dd4"}, "5b1b00ff-a575-4f5e-a68b-a24c43ed7400": {"doc_hash": "5c1535ace202c8164f9062636b13bea0394f8cb51a0dd659a7aac8835ec3b856"}, "c2bbebd3-2bc6-4af2-bb06-59934c1c4830": {"doc_hash": "8a6bc389bf1426ce12c42758b1245887d946331e6bc3ade966044a4b943cabec"}, "8df92ab3-dd52-44a3-8531-adeb78e28d84": {"doc_hash": "36ce6312176b89dfe557379436487b0ab41e2a8c15d8678738ad585cee191fe7"}, "6aa7e63c-019b-458b-9c2d-a02609cd70cb": {"doc_hash": "4c297ed80dbf360c05b139bad5de5a053b673bb19985566ddb62ac6908b706f6"}, "ef6c744c-b5f0-4a2a-b973-b5ebd30acbff": {"doc_hash": "31d78018d51f05314f78d9ee8b4f4106fec10eb7607b22c903eeab7cf3daa659"}, "83062838-8411-4df5-a206-d0da3bdb61d6": {"doc_hash": "df8b2ea15fd4cadef7bd7f5dedcd0dfef80358612aeefbe56b0f98741e88d836"}, "a77d541d-5e91-4dc8-81da-5a5c733db40c": {"doc_hash": "27043f01802748f0eedb5a7e1755577ccdf49090b316f8954a4ee6ccce884c90"}, "528630c1-96b6-442f-9c07-9e2123cdcf22": {"doc_hash": "3bd93c792bedf06bed2fe5ebb2c93f8c45b93d6878e9e5a06fa507a178f8372c"}, "4dc2fa0e-a7b2-42c4-853a-6375ec7424fd": {"doc_hash": "29a611a72d406dd28ae9c7939e5ae8dce84ac2abbbafe164d06e8c2f50405f13"}, "b5a799cb-6e19-443f-a276-b5cc49b1a007": {"doc_hash": "c44b1bfdaa7629062426ba1fd6b380c61a2f5e81dc4b0b0c59cfe367093577e6"}, "fe6b61b4-5e0d-4686-83f2-d42158fcae16": {"doc_hash": "97dec17445cc99b73a542f691cdf84947110200f843cf399416b5ad7cc52493c"}, "fd6cf43a-5fad-4f99-8275-5fb84bef24e7": {"doc_hash": "64be0ebdc9fd1a7401eca2f0e175ec4fc96fe39cafd90cbe8337e58418d8dbc6"}, "9fb24bfb-c301-4a1e-be5a-1427e6a633e2": {"doc_hash": "b8eef2e2754ce779c0be7785be395ab49d061f37c21f553c71039b2780a73ebd"}, "9e3a1e6d-0ec2-4652-84c3-6d52522e4732": {"doc_hash": "949d2179cfc6bb05aa4a30ce9626bfc31f6d180f29150bc5b7498425be7a10f7"}, "a1f3d2d5-ce83-49a1-9d80-b459664ec4fc": {"doc_hash": "a7f1a2af1df8b360cf0c168d49ad17a14901212d18f55fc7cecc384e8101ea05"}, "151d952e-a71f-4621-8467-2de0f47167b5": {"doc_hash": "480b79befdff8276db29408937d1a67679c3024f6b120c1ac392b41f8b64f4ad"}, "0a19234f-63a9-40a5-a1a8-00740cee7e83": {"doc_hash": "477f71b2cb8b7d79fd35b3bbe64566ac52e5274d005603fd000c523732b3baa0"}, "2469663a-d793-4288-aac8-aa824b38d599": {"doc_hash": "2ee1d74fcb030e99d6874d26da8f66e5eda2e4a06aa317c8581222c342134cbb"}, "b6adcef2-a506-4a7b-873f-9219b2fe5777": {"doc_hash": "1bfd4d55272443ea1a60ff55040b78024964cdd58b12906e6cd8d79ec81a8ecd"}, "6cbd530e-526f-4c61-a47f-38bcdb94838b": {"doc_hash": "78a01e85a550a02acb31a914853298072d5cd2ef0fe123077e578206496f670f"}, "208bfe41-6243-4845-a2d9-bd8ec3432a97": {"doc_hash": "b2581fb1ba83cc367daf98f247860d4b0c81ab3fd9cf37b4e83a0bab79e10b4b"}, "a9b5ee2a-eed2-4bf2-b20e-756a1d4d1004": {"doc_hash": "adf3f15293a0546edbe9149cbb5235e8b6b012dd69269986337e0535eb2c6b68"}, "5edb9302-f110-4727-a9b7-39cd5539ebe2": {"doc_hash": "23b8282c27b6c9830b9f091eea4076648f9f9a93ec25c9db0a2a6b50740039fe"}, "55aa3957-0016-4e6a-8ff9-466e7c0eb950": {"doc_hash": "9501c4ebc1cba935351ea5fedc54b3e493a560f4ceb2e36c4c5808ef24787425"}, "1ca75eae-3b9f-4c16-b185-8a5b6a175df2": {"doc_hash": "7df973aec40bc0fd5e69ad739d511b7146ec5d372aee68e47d01fb525cfb5730"}, "9d80c51d-90dc-4bb7-b1f5-1e823238aa7e": {"doc_hash": "d243410bb7544f391f273dad80198611403529fc82ab3735e38a5d0cc1c84843"}, "cce75144-f9d3-4d0b-912e-0fdb4186a8e6": {"doc_hash": "c98d11c619d6b48f3bd1011ed43aae8b9c4213574f7eeee0bd049065e2f9ad02"}, "62453880-9b8f-4a33-8482-8c249808f241": {"doc_hash": "e21319957017fd59144da043f710554e9b491120aaedb5882eb59b3e71056c4a"}, "5fda61c7-4e0d-49eb-bac6-2d001a6159e4": {"doc_hash": "038fb71d072019ffa11bdde2f8f1c59959d7911827bb64d04bdc15577268c84e"}, "c53073c0-cbee-4128-826e-b3746ab542da": {"doc_hash": "3ab21cff9794cf09cd4cf493bbe4fcb6cafb48c375c566cbf66b9dcebd143116"}, "dc592ea2-d70b-4e52-b33c-71442c5586d5": {"doc_hash": "0e51f553c9275988007c76341b086c69491e7ee40b853f8cf5d2e38eb7b83783"}, "1ac05ec4-e6ae-4a3c-8c88-86b4f4f20417": {"doc_hash": "2198549329a9f03f6ec2b4bbb9f20587065000e5626df2bc741cc18946482e42"}, "874bd209-ce70-4314-b0d9-554121aa5dda": {"doc_hash": "8a5c953589e19de21c94f87bd74854ec5f752b9518c32eb8179c46be0b60398b"}, "488d2714-8e1d-4c55-a427-1a494c40ed52": {"doc_hash": "736aa0f0468d5780dac2f3979e35c159386be11ca50b9b0e2b8c16875fa71dec"}, "c8d4ba5a-1b6e-410a-852f-9b929fc98fcb": {"doc_hash": "9b8db5375c78d1a4230372aaae85dfa49e58795c28617c28ee6638b76d11d663"}, "dc6fab6b-aed4-414f-8a3b-60ed4d36a822": {"doc_hash": "fcf6b1516433a2ea6fab7dc069395ca403412dc0a935c2f3d2d65fe012761980"}, "5a30cd38-e618-4652-a89a-e56870fd0260": {"doc_hash": "05de5967b1c730be2536f285210f1f577af86ccb568e6de4d04679a5c296bc52"}, "cb0dc0b4-5ada-4f50-b7f5-99696a42523c": {"doc_hash": "f3b5c12e5bb55eae2a1ae1a23eccd69ce69d68710e8c3ca0ab29fd3c736edbb6"}, "d114c4d8-81e0-46dd-b0bc-fd602a7241ce": {"doc_hash": "f91b5b854aba54809642693db67a2ef55721214353b4614c19befecacc339863"}, "a4cc352b-2e7d-4663-989d-f873e9003929": {"doc_hash": "443d0f9de6a0d41153df58c1055488b9f19baaf1e61952a64e0633a8741831c9"}, "75219c29-cfb4-4da3-8d68-f654a9dd90a8": {"doc_hash": "f7c5a73d5be0a727ebd8554595a0cf7be75f7c8b91b54e547769bb9a8134e739"}, "a58acca8-560e-45f4-bae3-b85e956723c8": {"doc_hash": "761dbb8d0257ae5c6b752e79196561a83e3cc51ec75107a2582b85eb1f28f85f"}, "11567fbf-00a3-433d-9a00-b378439facb0": {"doc_hash": "35b00c728b8e9c039717cab180e8a7c875f6d2ebd437cffc447a60997da0728b"}, "91ea5816-6359-4a6e-ab29-5809cf3676f9": {"doc_hash": "8bba9584bc5199c1717e969416bc8859a46e6f394dcd4f1c0f710e54e5885eb1"}, "33ee83af-988d-4b9a-8639-59492373e4f2": {"doc_hash": "288e82a258bd30e86bd204f6c92310d327222691ae03213566a40055b14116a5"}, "4615a3dd-99a9-48e5-b242-be6dba899086": {"doc_hash": "37d38d5ad2d034fce7f373d982c2ee5f68b1c9516315773760d429feadeda291"}, "2fec37b5-4c9a-4fa1-b837-6a6c5ab3f1b1": {"doc_hash": "074aa860c2cb79ca35a0f75c28d01aa57886b837459e19e194a9fdacb2dbca57"}, "077eaf74-7a6e-4a89-a4f6-ba0b6cd254b3": {"doc_hash": "a55058e7a467cd9f935c0e9a27b66106ff4bd3877ade066dbb8d9bbfcc9e6650"}, "f6c3584a-f0e3-42c9-8d7e-0bba4457292e": {"doc_hash": "0e520b805af95bbe98152543165eb04416b1c031457cf2caafe36f111d271699"}, "e53598e6-ac9f-4da9-8238-99bb3f239ccd": {"doc_hash": "a3689f23c2fa5ad1ff52e9e36ec7a0aec5456e73e2d6a53c3d4934dc78a20cf4"}, "5e3c63db-6ee2-476f-98a9-546bade2dfb2": {"doc_hash": "d4b9344662500fb685d75310671538d79f70b4674ea362381d08174e6f145b51"}, "986f6386-364d-4e17-87c0-6b872b2da6d6": {"doc_hash": "96456ac62a659882adb27cf0f444b2948620c1451a56d025f1f6475e031c8470"}, "434c6f84-6a6f-4871-80b5-ba7421c8080f": {"doc_hash": "7e3394969ddc9a735be35ac331263fd95211ebb74d06ce5c96e538845e21459e"}, "8dbdc791-3296-4096-8e6b-4f0cb635fe4b": {"doc_hash": "7ebfa228909c5d3175eeeb33582f828b744629b59794f2bc23529ca94aa84ac3"}, "61ba4d45-7b68-4bec-a789-333a186ab480": {"doc_hash": "f9c582eeca3f10a083ed07781e3dbc06f84a79bd50f0c5e6754c2a61a24b615d"}, "03910ff0-968c-42dd-a5c1-e6286a04c9ba": {"doc_hash": "085a2c927ae60ec5ccc94929f9162e7010fe311f19854e06fd1e11d894326b0d"}, "d3d065d6-3471-4a44-9c99-408915752261": {"doc_hash": "25a3f55647cafed16f3f7c20e52956b3e7353b47ec58703aee872a036ef00156"}, "6c47a3d6-6047-4a0c-8745-c2158bb78021": {"doc_hash": "8529af9d479c97d0ec6004cf229cfbdc979d1449b064331bc397899cab288d92"}, "c6a2ec23-91ed-4545-8f07-ad32667e138a": {"doc_hash": "99d1a28f227b613b9d239aad0a9814c24041b54de309114cdc47b9e6778220e3"}, "adae52c7-5b3f-440f-9b3c-6cec913f1997": {"doc_hash": "2c212b4745f50e8ae6c176105257749ee1241cb65142c38759a74f64674a52ec"}, "1470bfa7-c72f-40ab-b138-c9b4fa724c3f": {"doc_hash": "a17d7653f4da63c99e7ed8b292c962627e7d2de4ecf1eca2648d4fbc59e2c3f5"}, "e7b16ddd-a20b-4681-aef3-a544a7568816": {"doc_hash": "858cd5626b041020b174cf5fa66e1fbdcb7ff75e787269220611089b4748ea6b"}, "5eee9f1a-e559-421c-ad6a-83d3cebe3292": {"doc_hash": "3201e5ea2762725d7983d693af69ea315a132e59dafc30a93f168252721caa80"}, "642ad60b-0459-498a-ae44-e8ecce2ef906": {"doc_hash": "29d180ca567e846eabd88bccf77b03e12f7790f7f55994dab10277234c52dc9f"}, "d3685227-1f39-44ef-a67b-865a0d83160b": {"doc_hash": "57332478370eadaeaa315fffdcf6c8ad87c491c59b9f340e8fbaa0abcfb6d8c0"}, "3b96a36d-0f9e-4b06-821a-287201bdf2fa": {"doc_hash": "1a9efbdc7933f69b434caaf963843ca698e99ae0feb28aed4939b4d5d5dc0794"}, "4fcd6c31-87a7-45a8-a394-a5f58c465030": {"doc_hash": "a162a994c7b2fde087d6ddc30da8c6f3920aca10c4daa03b6008612a99b86553"}, "94246ae5-ad1d-4792-9d68-55ec42dcb980": {"doc_hash": "5cdac512356e8d8954e08045bec9b2c1ef558010c770cad46d89e269aac3a9a8"}, "4c5cea20-5ef3-485d-a767-b16ff37c2bd0": {"doc_hash": "53efb3fd6bece20758f64d50d0729fe4467df8e7084cd105133a1b99e3d666b2"}, "1d93b67d-1693-4a1e-a481-873ae7145fe1": {"doc_hash": "507fbce19aa0960579b9b4597f436f758cedb60b88a2029c523131d56689c90b"}, "af9d7f56-51b7-4672-8420-0e92d45f1816": {"doc_hash": "ef8128faeab07b525678202708b1991ccb4b6c7e90afbda016289776dca0d64f"}, "f87b72c8-52e8-4565-9fb3-5571515b0ad3": {"doc_hash": "34fca228a909b0f98e9292a4c3aeeb23845ec610003817132d64ee431413b82a"}, "c8c2f28f-1706-4e9f-a325-074f5434989f": {"doc_hash": "616cdc7a954bef66306e95a561bcb77bd45102fe4dcd60cccbc53dd594faaa66"}, "ead5c369-8142-442e-afb5-a7d0f96b4131": {"doc_hash": "92f624659138b04b4ee2ae9d8aceb826a3f0cae19899596e1dd9d7e0ec6a1c44"}, "8fca06c9-fac5-433d-9866-5f43feb388db": {"doc_hash": "0c79ce2bcac8d44db6fa6de406d80015719a34921a4dc3347e3989158413c0c1"}, "78b65d60-7067-4824-9f25-514ba0bd8c12": {"doc_hash": "f688f85f61f0e8a1e3280c53102698a5fe4b86982e72ac65fad982ca63cd0ce3"}, "529ebe19-48d1-4594-b39a-d1685ff656f8": {"doc_hash": "094dd278abfa18e206e7d7612d0c818a7d1e90ac24d9be5b330ba19d49fd7389"}, "2a8290fd-e31b-4dcb-ac9f-099e3ea1c7c5": {"doc_hash": "e01f2da8e4f79ceb11d1e86f74ef25de22f359b60093e60610e136c6fc943455"}, "a307986a-c285-4959-8d44-9e8a8ed15e8e": {"doc_hash": "0a5dd874acfdea0c55b70300657d9a8fddf4665098b60a17e1dbb345a367644d"}, "1491b303-f93e-49d2-9e09-afbe5012080c": {"doc_hash": "50889502d8a8381baf7ddd641519f230edfdadfe3425e4ec7fcba63c4cf130c1"}, "0a38c7ce-1f85-4ac1-9a2c-f99ee2381013": {"doc_hash": "a8b0534f2a353429a93f4371b74c059f7ff9f501acb33b06d1c94ce8c3e9f3b7"}, "0da0c754-f0fd-4667-b427-22a478831eea": {"doc_hash": "6cef0065e392d92dcff7acca20b1268eed3fbc2c37a6c593147b99a498d91902"}, "e1fa3ab2-cc42-4b2f-a3f0-bcbc13b25dd5": {"doc_hash": "6e4c6b0f2638da1deb4e2beed3117b27ade8237c5ed913bc40baf279399268c8"}, "e5e44e82-92ee-4e42-9870-8034e6e28c38": {"doc_hash": "0a490e36b9ea89f021ea4a3efb8412fb16a0b7a329eae8a192cd594e34046162"}, "60ea219f-bda3-43a9-a50b-d3158b458287": {"doc_hash": "e951ad1358d328b9fce1e9ead2ecc3e5cf1d844cb82adb5bfcef4f33d2d28d2f"}, "ea315296-a041-4cfb-8a01-2d1d98bae8ff": {"doc_hash": "ed6c22adff90835a4fe646d1884a213f64535d2d955e04f41cd83cc0635d7944"}, "ba3f9ec9-cb02-4bc4-b680-99d4c32cc602": {"doc_hash": "ba51aafb26130133834110e06132c5ae339f96fecdb44143e6f62b53b7b0f840"}, "a687e957-e81e-43cd-a57b-f75eaa0ec11b": {"doc_hash": "cb9b6ed5ba1b0f90fc4ac0bfeae0c2b1cbc58cb2f0dc1047e97e032ed5c642d5"}, "2873721f-37f6-4181-b991-6ddfeb8b70d3": {"doc_hash": "2ad827048a1e1b9958c388fe4857eb476c2f6e0f35bb46d9035f976c0c3e8506"}, "4704d167-f5f5-49bb-ad16-f193475c21e8": {"doc_hash": "1c559e40e2dec58f3d9aa29d58eb904a89d33cfc02148b48a9073fbf500994e2"}, "b5d72976-091a-41ad-a2aa-04a096cf423b": {"doc_hash": "8b2e35cc56a2b4eaa9e86a76c3fa2a99436887d33e23157cd501b84bb50f82e5"}, "0dc87b76-6110-4bae-a014-216d60d40b88": {"doc_hash": "9af4205428c459045cda44e41ac1612c603ec3f90a664e0c79c4f9f066483def"}, "fc81db04-edc6-4116-9857-ea2931fd07bd": {"doc_hash": "4dd19f53ec3390933daf27d22db9782bcbe32048a170edc3b9f05714dfe09b79"}, "e3286f1e-f608-48e0-bd7e-07d001f03676": {"doc_hash": "e3ec2d6a67421fe94fff855f0be34098a40e958132b4308f6115aaeebfda229a"}, "4cecb6d2-f2c8-4a08-bfb5-8ece52415cbc": {"doc_hash": "f88a01678e38bc3443143e85c55ab11fa2faaf83020f73ffba119bb94d9c144a"}, "cd18d4a9-67b1-430d-a5e1-0c0b0d5756a1": {"doc_hash": "018a850169c0c9a6d73dbe5f3d7edeb71d79343828a8c2aef715805d82397a05"}, "2da48d2f-a23a-40c1-90f3-e07ec6250e26": {"doc_hash": "950a242d27ac5250387ddcd98c3075b0ca493ad01af765c8af78a42736af1ae7"}, "8c82172b-9a6e-4d67-8dc6-dcc6678fc9f7": {"doc_hash": "62b0806ebcf6f7ead36b17ce3fbeacb5f2a44ada9a053b3e612116a5b8583a15"}, "588a4467-c21e-4fa7-9cda-96d0f1a99f27": {"doc_hash": "12803653ed286628417ddb15d157c0fac46469e9387afafc58f9754780631e65"}, "e637231c-04dd-43d6-a857-700a0c1e8d3b": {"doc_hash": "eeef601260d9d2de3d51750040d2d23f56ab9244362b3c5ab1ac2810fe3d4d0d"}, "ab028029-cc14-440f-ae5b-f64a9cc75c26": {"doc_hash": "385d7437e5f94e37adc862edd614367acdd038cbb7e971927bdc25445f957ce8"}, "b109de20-d727-4481-9e33-ad25048f984b": {"doc_hash": "0bf1abcf3d500e9b3d93e3718c38b4e6242b5479cc4ed8a925fd22581cf7c3d0"}, "9d6ced0a-a520-4d9e-961d-e04e0c6691b5": {"doc_hash": "6549ec42f3560cd174efc2ccfd356fe8a8d5adcdf612fdac594cecfbb42a4925"}, "dd53c56e-9a77-492e-ad27-23bdb3298cf5": {"doc_hash": "4567796c63cb485d522e500cf8e5d804b383d01a64490ec072ec16e118916b1f"}, "89d8d47e-ccf2-4765-99ae-dc9bb07ac0ef": {"doc_hash": "7780c7ecf1453eeb2d435d2c685acca0c325604edfae58c049f184c177730169"}, "c8690a61-831a-4a56-98dc-0842eeb30131": {"doc_hash": "fac6ce6d70b44ccf1fafdcf67c44732f464748572aed7a640772f75e35e06420"}, "c530cf2e-8df2-499d-b4c5-cfefd97c112a": {"doc_hash": "94ec5a715dfa83e49478ed2dfe5d3207b29c1478554855ee728938d4a64223e6"}, "23d19efe-a7d9-4654-9ad6-630d77264703": {"doc_hash": "99a06b3eeed3d86ddf27befc732739e3ba90bf182bed196b6c2885929affeb08"}, "d017ad32-0c88-4f29-90cf-e4b2d1f80ab7": {"doc_hash": "59d0113c39d0c3e11ef2c457b534181e53d15f150b0ad3f3c1a3d8f85673e3e0"}, "062cd079-4e4e-4026-b2b4-6323e7e665c5": {"doc_hash": "c50d1c5418ca855c9d08664f3b42d14d28259a3a0b7462415370d89cfba97df4"}, "ae4c8c66-0e89-43f4-9500-f237c12b3601": {"doc_hash": "4f1a73261090ef73a4cee681e8bd5501445e85898b55208b66e734d575a0adbd"}, "e951c3f9-0e10-44c4-b2c3-0194421798ad": {"doc_hash": "945eb5bc220cafc03e0eddcacfcc66d24ab6ad2f71863b5b2f72cdff135e9e07"}, "dc2e1e8b-5171-4eed-95bd-aef7d467810e": {"doc_hash": "a4a999b717ea213e8d01092822bb083be1c624bde6c8ed0179e7a04ec7b3206e"}, "bfc5be4b-78c2-4b9a-91c3-7addeee44c54": {"doc_hash": "6208c85bc9d5e58a47bd87ecef13243655b9f14a53cabb7a5c5cca01e5973ef8"}, "2a02800a-7491-4ec4-a04d-26ac28ef184d": {"doc_hash": "e139644bb5ae455c2143aed27c506be45d5b3e5bed81138e2e23a42bb886f282"}, "cd2ad020-c056-4d0e-95f9-20bbeb04a3de": {"doc_hash": "914c350a7b12dc4b287a3dc6bdbea2ea8a982f907341f8344d0d25fd93761c1a"}, "c0978359-2ad3-4b07-976f-ccc867a589f8": {"doc_hash": "4c38ffe6ba48c9944e41917054c8826cfb881c5a3af6b59f4a3e5400e2ee8265"}, "90af0c58-811a-4ad5-994b-473d0ee72bed": {"doc_hash": "bfbd2fae57c1c84d582a95a725fc73fd29014f8b0337ded0a95f8d8058846fc9"}, "2f4e1eef-93d9-473b-a5e3-39c1af513eb1": {"doc_hash": "13dfe2ddb83d7e1c432b456d4d793deba42c811739ef121a1979de76d509c889"}, "3ea45ace-3643-432a-bb80-ce54e41e21e3": {"doc_hash": "286c22310feb1ef97685d12335340c80da837b3c9c1f28423376bc313f56eac8"}, "275357e0-dd39-4c48-a3b9-6d51db67cb28": {"doc_hash": "4a8a6bc0d7fb11e9fb1c43d6cb615d0be7ea41aaae838a9eb652bd97c379570b"}, "af4bb0a2-f70c-4673-b097-60708f757992": {"doc_hash": "59cb2603238fce087aad4b756a3d04ba7841daa3db1add56457f4ff983bfb497"}, "321f6854-b985-465d-89f5-323ffac96eb8": {"doc_hash": "61e4ea48ed921b48dc1938e14a2b219183cbbde2dcbe249abe902febf7a5d9b6"}, "bf41b33d-8b63-44dd-a3bf-21313d7f95c8": {"doc_hash": "e59c6c984145554b8f061b91ab3ba0b17fd7a95b36ec5a382994b97ba57804a0"}, "3f769631-6159-4deb-9ba5-57b369ff1bf3": {"doc_hash": "a627f63f90fea145d5ec531d9b88ae9c6352ac5a6fdd9c263497cfda485dc61e"}, "f0960cab-a321-4042-abcb-811fe6f01e4c": {"doc_hash": "ebc39a1cf05bfb220758b53d26113f0daf9e13936054840c8f6f0fedaf09bc49"}, "94fd537a-2814-4a1d-aaac-6c4c702a9e0b": {"doc_hash": "967d2ce3bd835295d2ed673fd85cfab569f88209a3145e76daeffb8fc78e5f4a"}, "e948a1f4-ec7a-4b6e-9905-6694b5d01514": {"doc_hash": "4f33bc306a81ed3c46133706a99018a131889385204505b7fb3cb52abf501733"}, "b56a46fe-d22d-48de-b632-2115f8a48662": {"doc_hash": "8511def9c835af98f8ba3df94c6531adec1d0b79ad4197c08e23ae398b7655fa"}, "19564b9e-2bf3-4ef4-8590-90d7b3c547a7": {"doc_hash": "2692c65bae4ad15806182de97259302fcda4c66dd3c87270044a976f4f0d7ead"}, "1a800b79-316f-4abf-91ec-e06f3791c39c": {"doc_hash": "26a6fd51dba6ea23d98ade6d01bdf4b62ecc0042b02cafb9fbdd92b9a7871498"}, "60c92978-bbb9-42ca-948e-8dee1647a031": {"doc_hash": "96a883bbc3204e935b2160757ecd2139a56f3c8f5522dd53baf53b430047bac2"}, "e4be4985-4247-45c6-8261-6fbcdaae509c": {"doc_hash": "8ccabda51fed3442caf4601e3bfeb9dd5b72304eaa7c47a4f32906d3791ba13c"}, "c57b9855-4cfe-4412-a922-49a3aa16ee4c": {"doc_hash": "74d1e0d753b67949979302e6d8f714393c6d98c5e925bf5e2f436b0fcca63178"}, "2ee7ec9e-c484-455a-8b1c-facd32dfb71d": {"doc_hash": "fae2fc252babc5ae106b1e70be7254b37409f7fbbacf395799fd4bcc32a96876"}, "89324b9f-70dc-47db-b2cf-9515b1e12059": {"doc_hash": "1b3085770049a544a9fffa02b7a9c354834a9bf3df04acd098d8b5639922813f"}, "e0a98a36-eed8-49b4-be2d-a7c9a2ce368d": {"doc_hash": "274fa6427a75fd57d33c6d08574729317365f7b950a5ae27c9516a85742e3c5f"}, "c68dbbf2-b165-4442-bedd-1b195a67cff0": {"doc_hash": "df27df0038c6da1bb03387dc81561cf7e7f2fcb8a4d20e0ffff55ba5c9cc568b"}, "132fc77b-5382-4efa-a632-55cf1f25db12": {"doc_hash": "bc546c22f5cd330fbce5ebf3c19ab0e86ce99afb5a51bed73c03ba24de997441"}, "6e648e46-fb93-4391-9518-0c2dffac5f54": {"doc_hash": "c85ea1e802152b01bc10e4be4e4f52e393c4e257c0123b51625a0a809594057a"}, "ea53a369-133a-4fc3-beac-a6448e403cd9": {"doc_hash": "494189141f260cc7ba68b030a9256888c523bc6d7db6943ab71b345e3318c66c"}, "aa4e7791-3cff-49ac-a609-be2aba3133ae": {"doc_hash": "aacfdf75b0e4bee9f22033bcf9d02790dd6b415c0c9929deddab9b0652144273"}, "b988ccb0-1f15-4ef9-a527-a1984fb77bcf": {"doc_hash": "61d58ccbfb8b11cb439c1ddf9e45c8c58e06bb270565734be2c68c7d106063eb"}, "4e01b4fc-d9ad-4dbc-a342-753c8fa3fd7c": {"doc_hash": "2b216bf002965218481c18fd796dd6d6eae5c33196521fc679413ed78ae511c1"}, "526ca6c3-3dd0-4832-877a-b5ebb9936fe9": {"doc_hash": "697501662d731862626fa4df8cc0154a884f0826ee61ddd5e0a6a445365dd0c3"}, "c0260e24-dc30-4226-9097-1663702ab0d4": {"doc_hash": "af543c1317d43bf297dbc8a20c3946042e514dc817116b750fe86b1ea0d6cfe2"}, "792be52d-5f81-435a-b1f2-9d3bdbb72c9d": {"doc_hash": "d8aa8dc572a1a3ac97e6484dd024ea4ff9a03a167568f40ebddf36c981af8e2f"}, "0d423703-fcb3-4c86-aea5-3b479c304f58": {"doc_hash": "20807b706ccf77814339f37d147dc74eb0914dc08b52dbb6dcb0732327fe42b9"}, "868a5167-7dbe-46db-b253-a21ac05b29b7": {"doc_hash": "9de1d8299c7ee775cef71885f85c40566a1d743819b65021f886e76420d8c43f"}, "17649369-9cf1-4353-a573-c8f7c5c62a50": {"doc_hash": "7106f90ee7360d416d096ac4e27b7b79b60776b0768c2f700a2054a19f1263a4"}, "b9bf9179-5546-44cb-bedc-6a50ee45b101": {"doc_hash": "8322acf41636b3dab64da4178bd2f87260f067aed51a1f95e2a4a90f370f546c"}, "43bcd484-6c23-4db3-8598-ca885aa66ce3": {"doc_hash": "b20d821f1cdba732bb3491f8fff0eea5cc0719a5b776a03275b3ed341acb1559"}, "eb21a1c6-831f-4ae8-840c-583fd6602758": {"doc_hash": "9bbe6577f14a622b9ec50554ee3576b8731d5cebbd39f7ef595e93ef071a5d1a"}, "1dd30100-91b9-46ff-a7b7-489af0113098": {"doc_hash": "9083646cc8e085f293774a5d03f8787bc17b22ada76ccc4a43ce4b20504f818c"}, "7fc02c10-c46c-4c67-ba14-b120db61a040": {"doc_hash": "ba3082b318c50cf427da50922883a1b233d6fd08f80726ec54bbbc45589e73f6"}, "8635794b-809c-42ca-8257-bb1528316aca": {"doc_hash": "aacc9fd2e07d166fb538beb64288426fa65d87f54252ec3e0c84fc9530498391"}, "f0008f03-fb03-4545-8173-6fad740d37d7": {"doc_hash": "d30eb7e12bd8b240fdcaf34b487e7fd78cd38c347e44d000e38e45e6b5e25c8b"}, "8c266d43-bccf-4ab6-a2df-a33f031931c7": {"doc_hash": "9d57993df1947f86a38f797a6ec47a95927fb2b7a6a83fae126010e4ff640e77"}, "37cc330c-9931-408a-86fc-98b4f25cab0f": {"doc_hash": "2cfc24b1cdf0940c8ff330558c671136154da5f92a1d72f05868fd0e1b222e93"}, "9b23b0e4-81ef-4b48-8fb2-8f88920fbeed": {"doc_hash": "9a7efd69562f58a26dc227cb09edc22697e2f6fce61c38f2b3efaf7460dee3ae"}, "f069d572-39e5-4229-b227-67de55ad5c62": {"doc_hash": "4fdc9f435aeca00b35b81a67d5d0248626424857e2a1a157786afbb9ebea7231"}, "aaf9bfa8-079f-4727-86ca-40857182d919": {"doc_hash": "f485498c32f6dbfaffcdcb317b9913a1211939f144cb7ba9ed7b9865665d4598"}, "fb5842c7-0b31-4600-b69c-eee69c4176e1": {"doc_hash": "b2b6622c168575bc24a20a5bb5dd3b228a4ab152e5cf02fb67c0460d7cb95542"}, "ebe70bf2-84ea-461d-846a-0bf8e53e745f": {"doc_hash": "0587c0c86f719e25d3b2fba6c5226aab2b0cf2ccaa227d9e6c095e940f1e4b81"}, "98f93731-019b-4181-8e64-fbd1bce7451c": {"doc_hash": "72c44d595cbd68bfcaf27512a9421a8a1d94e691f29c8ec3f44cd1edc53af10a"}, "5f25302b-231f-4093-acc7-c59aca414427": {"doc_hash": "87fe9c2af0befa330d380d65eb8502407100a906816933987425e4ee4b176384"}, "5e5f13b4-eaba-4f24-8a61-62e42c539070": {"doc_hash": "5208d7f3c0e8547ff7e0095b02916bf0b4ff5fcc88a0642f53dea92f1395e028"}, "e7fed89d-4749-4df0-a451-0f404dcf2fc9": {"doc_hash": "a1bf78bd636a3c40fb31cbee69703994c31eb3a1c75092567d7a0c326798a8a1"}, "9f9cc3e6-6f5b-428b-b34a-09ae8876b4d4": {"doc_hash": "87544ff8c1336a41e104557a2589c15a15b6c3f6ecfa7974b3eec3642a7fc88e"}, "397ccffd-7c67-4588-b0a2-3febb40e5a35": {"doc_hash": "95839418987c56e9a63f391bc1a770ac23dc9d1c54a3b7e1cbdd30f66d46118b"}, "40b85575-0fd9-4fa9-9610-0120cd21dc9e": {"doc_hash": "835abf7b811b10d44df6dca65174f1693e6b4cce01e27f0e1dc8192601a09df1"}, "823e36f4-e1d1-4948-87a6-8514453e89b3": {"doc_hash": "5ef7d4c1f06ab85f1831d3476b0b211709bc91013e60cb9a6ae612682e5c3a60"}, "7c43228c-caf0-488c-ba1c-0ba2582c9494": {"doc_hash": "ac8c3db2b7a33b189acd74d7cb4b69aeae97ea3bbdd468a4bb91c1005a16f407"}, "4978ecbd-99b5-41f7-8a52-6923e01a4e19": {"doc_hash": "93b21ac7f96fef5d9ddb78cca60feb716547ac75110fda8ba43b2d0692670782"}, "e4dff01e-b9d6-4249-9e4d-87c2949f7658": {"doc_hash": "41ecdcbf4bc21d9ada61eeeca77b065dd2ee3c80ffc8c76189155865313875db"}, "4e979809-ca56-4a61-9734-f4d4a92bab07": {"doc_hash": "09ee3a0665871037da839601dd6b3a3f479ee2d265a3da1acbcf6b758162e961"}, "bb64ed71-7dd1-4c84-b6ef-662617a10ee6": {"doc_hash": "ba169beaef5deac57f300b28757a706f3038a2518c2191131116684c8770fca9"}, "1a8f6b0a-b781-4acf-96f0-f8785fef47a2": {"doc_hash": "874553b7cc2294b6c09e645ed0debe50906de34dd72ec29c42497e76a8187f06"}, "78ac8cbc-ab57-40b2-b7a6-f8387938a8b1": {"doc_hash": "223e42df82ca4dd6ab204c18fcef60945742fe094095817fe666259769cc0b26"}, "16ed4d02-577f-44fe-a575-5f1eeb7fbdaa": {"doc_hash": "9a7ddfb6d7a6c28446363066f4f7687910564c8cfd6dd162e145d66c5ed2acf1"}, "203bbc51-3eb1-4611-b8ed-55bf27d5baef": {"doc_hash": "2e9bf86482229668a43f1df4d66fb5096ec37414c1b5f111c9810f3307614039"}, "ce18685d-01da-4127-ac7b-2f4a0b17f9cf": {"doc_hash": "51dcc730cd48ae5c6dfc952671b970611746cb9eddcab154a192cc56c5b3800b"}, "1132bb57-0b64-452d-85fa-d918673a8be4": {"doc_hash": "53b086683e5eb331ac08fb7a72af22f6a2995e9abae3b5dfc38c4db72dd1adca"}, "184e1c95-c438-49a3-b6b9-6f67f4074674": {"doc_hash": "a752e6aa36b9c8e43594f521890211bb6d91392bd959b40e80c7044a45637c44"}, "c019ca3e-ff9c-43f6-b0e5-83aed8fec6f9": {"doc_hash": "c6c53a25e7218db622ca285b4d3c818ac289a2de4a592fe36db0feca9f286376"}, "52d8caac-92d5-468e-884b-a67c965c7a9c": {"doc_hash": "fc89488cc7d78333a35b0ac7a7aea9a515100737357dfb77b42405afa221cd5e"}, "d7d3e291-76e9-4657-885a-4643d66b1e26": {"doc_hash": "770e16c97d895e2c00ffb3a3babd1f2372f9acbe955cd10081f9eab3f2eac7be"}, "f375d61b-61d2-40e7-b410-92b4192d9a75": {"doc_hash": "07152771c23e61bcef909163e4b2fe37ac9cc7ae6352172e4ff5947dd2faec8f"}, "96ce3dc7-2a84-4103-bfa4-5513671e4fa3": {"doc_hash": "ea42a203c776c0de8e8c5cf7f453e5a495d2f1211556f52acc86ad186d40413f"}, "11d4433a-c921-4db7-b736-6b9d64d05033": {"doc_hash": "270633d7724c5ed4377d6d078b83abaa5e577292da1b219f309de38aeffd09fd"}, "4307f7b3-a54a-4ceb-9fba-aa44c63217d5": {"doc_hash": "3518b74afce89dbdd5ce02219cb1835c8b73387b1fb5f25faffb4dc1ab33f45c"}, "51270bef-7da4-43c8-b56f-e951d2c012d2": {"doc_hash": "d96aff3e1c68cb6f720d347ef39ed4e84959cb1af9f5fc9798c580b6b8f9dc96"}, "0ed3fb26-c9e6-47aa-b44b-083b1f702925": {"doc_hash": "7233f1771f315f36e02167a98a46e18afe040dd0ab75a8121da04d0cf9faee00"}, "29afcbc9-d49c-4ab4-9457-cc4d67e096cd": {"doc_hash": "c72f0ed62710588943fd8451e288cd2d4ba7fd3a3860d03b0c13bfb6b1b65dad"}, "dd7c1aeb-2e27-48c0-b18b-df8866e10dd5": {"doc_hash": "987bf72edb29c51ace9114b2c1bc0f512e327f963720d68633682a12b9604076"}, "a9b29a62-ce5e-433b-9910-9117bc2d23b8": {"doc_hash": "e6800a09bd57bc039e8518331a0671b693f959be65521f74c6e4b59a6bc5b937"}, "8c44c899-bd65-4691-bb38-5a69f6429b2f": {"doc_hash": "5d00acb923695da354d2fee4ec317df73ab365c0b764946c4cf192d0c6aa4cdd"}, "3e1f8747-4406-4786-b548-990dc8d40b94": {"doc_hash": "d04d541af6459046ef4cc69dc45c28f6ed6c87493bc427897bf575c9d3987546"}, "e244774b-d408-4c33-b47b-0eeab3569b1c": {"doc_hash": "3b204c9ef656082dba0e8a135ac34824bb092868e0c5caac1bf15cabf4f78578"}, "ecb2f577-e7cf-458c-b5fa-14d954f8baf5": {"doc_hash": "8de031d3aa770bcb4877ed9fe704d60cb2f13a17947178b5806dcd60f183d91b"}, "d00ea9e9-590b-4896-8b23-15f3d30f8b74": {"doc_hash": "e60539d7915773dff6111acda939d79f5378594df09832e8a3e66a388f153446"}, "20513dc9-e293-4231-92c5-1e53d5b0b328": {"doc_hash": "aa2d04e7d459fab52e88b7458b7f61e257855e55c7cabf077b6d6250f1e7f157"}, "39d8060d-1add-43d1-ade2-ca7c6e6cd3dd": {"doc_hash": "ec1499902830ba28455717a321a376ee4b7882f0376003722ef7c20b30974147"}, "72d4ed02-fa09-4cf6-b100-511fb1f9d032": {"doc_hash": "358247a914c015237c2e3073d4be1b306f0ba19b5acab225013a42183f52cdf0"}, "e12c1bc6-c3ea-4b10-9e3e-6088c7b391fc": {"doc_hash": "4b490fc7cb4ddac9f2bc3cdaff186a8643fcd0fb729e33338e887396afbf18c8"}, "fd43d51a-3075-4bca-bc5e-9520a2fb86eb": {"doc_hash": "60a73f950268fa6fbe21611df9b260b24fb69b47e55ec9bc82fdb5127d84974b"}, "f801cc62-51b3-442b-9d82-65d987a9fddc": {"doc_hash": "5b8faf9e026c61b95af21328cb0fd705c6276ad60cf0b9b50f18387cc7480708"}, "0eb3bb76-fac8-412e-b066-04fa384d36be": {"doc_hash": "29a16324f6e1d988b46d5b0f3cdaef8406e8bcb56a3385762f2d0338b41b24d3"}, "0835b830-98a6-4a68-abea-44de7e49abda": {"doc_hash": "6d71c342e8c7d10d29c28af50d9b147a6cf167300dce11b16469e1ba7644c0fc"}, "aa928c03-f2a9-40d2-906c-a3e40039062c": {"doc_hash": "5fb087ba55c265f43766cac674aabe91dc33948e54b6253262fd0be0e541e99e"}, "13840be5-2b9d-43e9-a0dc-1d9291068cc0": {"doc_hash": "750bf5d40ba220fd6924d1d26a31f0974e572c0edf0b517f2f843fe2058e7cdd"}, "8f1a91a9-b000-4c3a-93ea-b68b40efc0bf": {"doc_hash": "9076e8f1ea405ce5798f22c1e4aaf5eabd11f84c6e0d90e69887afe3bf6ba79c"}, "b5c2029e-67f7-4144-b567-30a1ac03ec66": {"doc_hash": "63085a99bccdade13e24e048688d5344c6a1abaae8992a06695f6727a6d166d5"}, "a730170c-d863-4fe0-891f-8c162d8c689d": {"doc_hash": "b6f346c960b6a6ec3c94e523bcd62552d9c6180e9aaef60e8fa6567db2416958"}, "88555136-6254-4717-8884-7ac4fbe42200": {"doc_hash": "6b974c555a72d8f85b61e0058628d8688ac488796359e9f08270d2ca022c0ab9"}, "8b183847-ebb3-4ced-b5c2-7472e70a4242": {"doc_hash": "b33297aebc9359e07781ef16566ecc4cf7a03d2b40ecfa1e3cee826ac021fb1c"}, "9e9727cc-26b8-4a59-92ba-1cae9bdbb896": {"doc_hash": "6c619caea50bc786feebde180e9a950c8b2a6f5a2aea62c74dae9b5afe411565"}, "ea1ebeae-27b0-4f80-b12f-8e07b2004ab1": {"doc_hash": "6462a857f3007ff2b80411703ad9de219cbc0126fc49d81eaac32048a4970aac"}, "5a968fd3-cddd-493b-8a2e-febc5f6250a2": {"doc_hash": "6ca4a4ee268bcc67d0b7d52a9b199d5e854492fecacb9cb35b372fe18a96005b"}, "32758a03-556d-4c57-87fd-b6a3a227353b": {"doc_hash": "b0442a6aa41fd6a0b9f01fb111647efe6fb7788935f33b6d58d8c719febf79fc"}, "098d021b-24d0-40c0-9b79-bd04652bba4f": {"doc_hash": "3677fa2f37c382134a68fcdacfd0fa507e5d54c5212cfa1208a3ff53b7883ae4"}, "49dec80d-8f99-49a6-9421-7a3101ae7e2c": {"doc_hash": "e035133f05651fdd61e140237fd42915575ab9d3a868ffe98f3910994dc32012"}, "a6d8a47e-8a5c-44a2-9b6d-4b981077bfb8": {"doc_hash": "d9fa0a1add365e92860f0e6dc7ee170e7a40dd4d3cf8d638720fba567b6794ca"}, "ac6dcd45-acfd-46b0-9fee-31a97ba2955f": {"doc_hash": "a7e8945983062da6269914850c6431924893ecefbaa08bd6cf034f9e1645fd03"}, "05344775-dac4-4b89-aac3-e73fcbeb5e90": {"doc_hash": "31a6a73ff1cfd35ec42608260d207b636859d274887f18097c1856e8f4b9c28c"}, "5a4bcb56-6f65-4840-a3ef-799c5730e35d": {"doc_hash": "f1840f03626b64aad48a5f5b9e0fd6f7c8ddb0b101ae3a5200e546fd47627c99"}, "f38e8cd4-2863-432f-a518-e3a7c3afd82e": {"doc_hash": "605bde969b54675d12c33a714c0ed112f502fe1a4567ee0360b286d54d2a2d34"}, "bd1fb1fd-9dfc-4758-870b-fd0dfb1a3362": {"doc_hash": "e9073366b793b4b9c19bc066ca39d475b19cdbad64c3f3df7332ba22894cfcd2"}, "e4574074-6845-45ed-8a80-25f6cfc1bd48": {"doc_hash": "b04753f2bcb1c1715bdf1b559dddf197a972c6c7f76c1d48b90ae7c0310476b5"}, "41d1c388-96fa-4bfe-b13d-09d4a6336e19": {"doc_hash": "12d42136902084495c4163e341623fc3ec1918293161b182fac3632ed0ca2eda"}, "854cb19b-7eb0-47da-9a83-9bf4271caafb": {"doc_hash": "9c03d35923ad7b9cccac09e6ff5d79685826f2769f837b029faf364515b7327d"}, "2c2152d5-7ed2-404c-9785-f400ad6cbf7a": {"doc_hash": "756c67783b8a8dd7c8e0e0339a271bce0b278ab4f2cc10474ed28bf4cc9cb4a9"}, "f73838fb-ea70-4b8f-8482-2ff631a7d2f9": {"doc_hash": "b453541e737957e3b092d82b81bb495366b3c53cf4b0800bb851a894f6670449"}, "65012525-4f33-4f14-9904-099be04fe78a": {"doc_hash": "8fa3a4de826191a9a22d3cab6f6b94abef4919e957a4a565372aef181a478a7d"}, "815d5737-6799-498d-84a9-9ada8feae2bb": {"doc_hash": "f8a37872e37a56a7c1b1aa12e2ccc1285d314f1268a868ba989a74f86c1e20db"}, "fdadb992-a837-4a93-a570-16b5a107772c": {"doc_hash": "af8307f756278d75930a92c5254b3e01b078f41122f19b6764b3b16d652ee300"}, "58853dec-bbc1-4f23-bd08-c9c4a83bfa00": {"doc_hash": "7d56a691365d8c0d482667c9dda6097c1779b5adccfd3c168d14d1e9574d1a22"}, "0b7638c4-8068-422c-9792-6cb8449f5380": {"doc_hash": "1ea1559b172f9e7162ea6e024ea5bb8d8528b6f22ba6a6e7976fba2af87557de"}, "635e075a-c5c0-4957-b41b-03a63dce412a": {"doc_hash": "c73766465de54bcb6f7ae8c364ba0df389620c168356ed91519be6b9694c2399"}, "99d9910c-53f5-4e40-9683-9cdaf00817be": {"doc_hash": "9a98f5469c0f0ee93fa075a927e7d9002ece5937a6301cd418419e99314ecf3a"}, "419b92c4-0a52-4061-bdcd-594b246eee38": {"doc_hash": "b5d61feec1489bf317a91b8cf321e0427ce1cb079a581a8c076384d0eb96e0b6"}, "20e0feac-fa97-40f0-8957-0d6c19c30a33": {"doc_hash": "3aebbad58f357570d1692ac1cf500a9ebf05cd870976278f1206ad47e3fa6d78"}, "c37b2361-c202-473d-bf39-cee5bbde4d32": {"doc_hash": "b37a7f2d24b3286919e6a68229c1b66e04b4fe40ada8911f8361249f666ccae5"}, "618c6c2a-f2cb-4bfc-b7ca-832c809a3d83": {"doc_hash": "0afd4bb915b98ce3d2ba03a318a5577527176b43704daa04890a2a2779dcde29"}, "2c66a51e-2513-481c-a279-1e55ff11ccb1": {"doc_hash": "39f20250b56ff9339a68d4e90212286a52e33ce1e25df42bc2e618571a82b1d1"}, "98fa1933-6de3-4f53-9109-9cfc0a25491d": {"doc_hash": "c415f8cbc928a48eaf0a6357ef8388d2487aed4855cbd6eadf1efd241e564210"}, "18a86824-8a10-4d0a-b4be-18fdb64f3ac6": {"doc_hash": "e2b3b430c63457d93aa7ce520525c3befb4f62f886273dad78e7d4bef3bde0fe"}, "eb2e8e1a-44a4-4dc2-a891-d313441238a4": {"doc_hash": "e8c5c7af269a8bf47311d44eb9f6775fd0c127b1d3cbfa6c36ab43db6e1361fd"}, "740732ce-bc1a-4c91-a2d3-5c0ab10bc60b": {"doc_hash": "1976cf8488dbf42becb52678fb14f677dbba9678ac2303648aa5d81c12431139"}, "4bf70481-825f-4b92-92bc-9443888dfe24": {"doc_hash": "b93eec71961696cff901386418a21973f4ee04ac9a8344f74cf9d23f2241d5bd"}, "f71c0155-c447-4c30-87da-b0105d12a537": {"doc_hash": "d95fddbb550e9b6016c01f3004c766c99b8f45c6e79c7a422de8fac4361635b9"}, "bf67375e-eed0-4373-a87e-7703de3a87c8": {"doc_hash": "9284c5a351c6f445116b9a6d7f9042a0f90b9d7c21539ce37c9ee06340cdf2ef"}, "b741adfb-6bc4-49cd-971e-1ee02bfbcfab": {"doc_hash": "53f80659696ffe7e1fff0fd230eda59bf4dc7fc4266b66281450d9cb10d08f96"}, "12b61431-9abd-4d0e-ac5c-18b8697d2ffa": {"doc_hash": "98e8491ba45acaf24cc56531af7c433f35a0824296ab2a96f7b3b24d3aba53d4"}, "449a0449-9615-4daf-a41a-21712f8df628": {"doc_hash": "6a4e3ff5b58c22c42212a3950507164e8fc8712330e181b6068e933b62745c5a"}, "aa33f70a-f3b5-48b1-8ee7-0c0c1ccda6f2": {"doc_hash": "501b3c31b88a6b083a02f3c1738e4d8ec1125695b33dd4ffda3502580e206a1c"}, "6492bf57-d943-4b47-bc4b-7425a48a13a5": {"doc_hash": "b9d1c9b0f2e96e2c2dbfa093404e752da9645bc12346612a89b5fec408f3ba0e"}, "a5f0a211-ff89-4cc5-950d-a04ce90fcfb3": {"doc_hash": "dba317411d8d4009316da0b0324fc46a02319d76898f10a0c8b5743dc5aeb552"}, "f5b92018-201f-4fa4-aa25-f9dc9d59c02a": {"doc_hash": "95b176b48aca8ea5ec4bdfc13342c0025eb7dbd74b058c8e622c9cc06d066c01"}, "eb44fa65-027b-4be5-b949-aeffe4a9cb18": {"doc_hash": "a1b3e70f449bd849e27ebf3d74d881e8b3e792f88293ef840979e7916315e62d"}, "87cfa9be-cd2c-498d-b06f-397a3bed950d": {"doc_hash": "ebd6b8489950ab9fffbc4c8aac9e4f723eab82a8f7a84c6679ffab94807f08c4"}, "1b77c616-9a04-43f6-8103-c60c5542b594": {"doc_hash": "6baaa219c4948f9e434dc75f9f2f3b11255e387f3329bdf52b8bf567a44a7472"}, "6f88cfbf-e12c-49a8-928e-795876a16b6d": {"doc_hash": "4cdf5d168be80b48057ce629bc5618da282f1683cd057a076ddd70ebe98fec33"}, "32c0b39a-6f4b-441c-ad68-de43fdef945e": {"doc_hash": "7a9d6bda6e615b020a62df7e936ac1dd4980a06df44b104cc432c01409b5ff3f"}, "3937eb1f-1148-4831-be0e-8095bf9c46ee": {"doc_hash": "e1f34d50f89e433ff501409fe8e1a7d606c9be6a19993b326cfdc892fe28dc3a"}, "dbcd3d9f-fa7e-47b6-b9a4-3e11df4423c5": {"doc_hash": "dc88a58ac14f0c5c80bc8ebc999970cb7529702115e32b38c07098837de97aea"}, "38178f26-1ac8-477e-918e-3e106fe68c30": {"doc_hash": "918c4d40d94275161ff1b3b33a44316d24c700f7437b53e3a4d6df58b2b6ff39"}, "977d084f-2c78-4d47-b558-e1f937cb8023": {"doc_hash": "f19895a6bc70cdd6ae1c4bc99e40c12ff74682c90658c1385d48708e6f6178d4"}, "588be179-5add-405f-be93-6cccbf66ab98": {"doc_hash": "31e7513eefd93b3513b008072b64375df2115076a5c5676e4cbf996cca8098c2"}, "5d068e48-b2d8-4339-9926-a8220620c4a7": {"doc_hash": "73b8d8d0c5d82ea214953a98c7fbcb5463d7eaf31a69ecba74b662b0a48432ff"}, "d373936e-731b-431f-9309-e0430ccf3986": {"doc_hash": "c9ac8fc798115633895206957a40d017dfa00dfc0c1be14431067521360a3475"}, "7135fd03-891b-4e3d-a91e-ed938f4c234c": {"doc_hash": "ea5b7f28bcd44a280109756fc49005e45023bef763acddf552e11ac7333672bf"}, "1e46f31d-bf83-48a6-991f-5721abe56a31": {"doc_hash": "3bbefe9cf4850b0f8892e12d422fadf2fb60f2af987b5c8735249af0d9baea63"}, "1912c505-1ffd-4a40-af71-607313a5ce43": {"doc_hash": "ce92f8974a73d1f44f7795d8c13a188094dba86602ae87f912239b8c58af61cc"}, "0c7dbe74-9f71-4766-b3b9-057da687c59e": {"doc_hash": "f2baae4e3c59c7f6d6ae438675959c680bb6cb0a2ce6b0b48cc368712375c05c"}}, "docstore/data": {"22afeb60-a6f9-4d52-ab15-dd8766e666e6": {"__data__": {"text": "url:https://nodejs.org/docs/latest-v18.x/api/all.html\nAbout this documentation\nContributing\nStability index\nStability overview\nJSON output\nSystem calls and man pages\nUsage and example\nUsage\nExample\nAssert\nStrict assertion mode\nLegacy assertion mode\nClass: assert.AssertionError\nnew assert.AssertionError(options)\nClass: assert.CallTracker\nnew assert.CallTracker()\ntracker.calls([fn][, exact])\ntracker.getCalls(fn)\ntracker.report()\ntracker.reset([fn])\ntracker.verify()\nassert(value[, message])\nassert.deepEqual(actual, expected[, message])\nComparison details\nassert.deepStrictEqual(actual, expected[, message])\nComparison details\nassert.doesNotMatch(string, regexp[, message])\nassert.doesNotReject(asyncFn[, error][, message])\nassert.doesNotThrow(fn[, error][, message])\nassert.equal(actual, expected[, message])\nassert.fail([message])\nassert.fail(actual, expected[, message[, operator[, stackStartFn]]])\nassert.ifError(value)\nassert.match(string, regexp[, message])\nassert.notDeepEqual(actual, expected[, message])\nassert.notDeepStrictEqual(actual, expected[, message])\nassert.notEqual(actual, expected[, message])\nassert.notStrictEqual(actual, expected[, message])\nassert.ok(value[, message])\nassert.rejects(asyncFn[, error][, message])\nassert.strictEqual(actual, expected[, message])\nassert.throws(fn[, error][, message])\nAsynchronous context tracking\nIntroduction\nClass: AsyncLocalStorage\nnew AsyncLocalStorage()\nStatic method: AsyncLocalStorage.bind(fn)\nStatic method: AsyncLocalStorage.snapshot()\nasyncLocalStorage.disable()\nasyncLocalStorage.getStore()\nasyncLocalStorage.enterWith(store)\nasyncLocalStorage.run(store, callback[, ...args])\nasyncLocalStorage.exit(callback[, ...args])\nUsage with async/await\nTroubleshooting: Context loss\nClass: AsyncResource\nnew AsyncResource(type[, options])\nStatic method: AsyncResource.bind(fn[, type[, thisArg]])\nasyncResource.bind(fn[, thisArg])\nasyncResource.runInAsyncScope(fn[, thisArg, ...args])\nasyncResource.emitDestroy()\nasyncResource.asyncId()\nasyncResource.triggerAsyncId()\nUsing AsyncResource for a Worker thread pool\nIntegrating AsyncResource with EventEmitter\nAsync hooks\nTerminology\nOverview\nasync_hooks.createHook(callbacks)\nError handling\nPrinting in AsyncHook callbacks\nClass: AsyncHook\nasyncHook.enable()\nasyncHook.disable()\nHook callbacks\ninit(asyncId, type, triggerAsyncId, resource)\ntype\ntriggerAsyncId\nresource\nAsynchronous context example\nbefore(asyncId)\nafter(asyncId)\ndestroy(asyncId)\npromiseResolve(asyncId)\nasync_hooks.executionAsyncResource()\nasync_hooks.executionAsyncId()\nasync_hooks.triggerAsyncId()\nasync_hooks.asyncWrapProviders\nPromise execution tracking\nJavaScript embedder API\nClass: AsyncResource\nClass: AsyncLocalStorage\nBuffer\nBuffers and character encodings\nBuffers and TypedArrays\nBuffers and iteration\nClass: Blob\nnew buffer.Blob([sources[, options]])\nblob.arrayBuffer()\nblob.size\nblob.slice([start[, end[, type]]])\nblob.stream()\nblob.text()\nblob.type\nBlob objects and MessageChannel\nClass: Buffer\nStatic method: Buffer.alloc(size[, fill[, encoding]])\nStatic method: Buffer.allocUnsafe(size)\nStatic method: Buffer.allocUnsafeSlow(size)\nStatic method: Buffer.byteLength(string[, encoding])\nStatic method: Buffer.compare(buf1, buf2)\nStatic", "doc_id": "22afeb60-a6f9-4d52-ab15-dd8766e666e6", "embedding": null, "doc_hash": "7d507afa51979aed6d1db7353e326706984d4572132e979b44ff89735af1fee9", "extra_info": null, "node_info": {"start": 0, "end": 3220}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "3": "10856d87-86c5-447d-97bb-a528f7ff197a"}}, "__type__": "1"}, "10856d87-86c5-447d-97bb-a528f7ff197a": {"__data__": {"text": "execution tracking\nJavaScript embedder API\nClass: AsyncResource\nClass: AsyncLocalStorage\nBuffer\nBuffers and character encodings\nBuffers and TypedArrays\nBuffers and iteration\nClass: Blob\nnew buffer.Blob([sources[, options]])\nblob.arrayBuffer()\nblob.size\nblob.slice([start[, end[, type]]])\nblob.stream()\nblob.text()\nblob.type\nBlob objects and MessageChannel\nClass: Buffer\nStatic method: Buffer.alloc(size[, fill[, encoding]])\nStatic method: Buffer.allocUnsafe(size)\nStatic method: Buffer.allocUnsafeSlow(size)\nStatic method: Buffer.byteLength(string[, encoding])\nStatic method: Buffer.compare(buf1, buf2)\nStatic method: Buffer.concat(list[, totalLength])\nStatic method: Buffer.copyBytesFrom(view[, offset[, length]])\nStatic method: Buffer.from(array)\nStatic method: Buffer.from(arrayBuffer[, byteOffset[, length]])\nStatic method: Buffer.from(buffer)\nStatic method: Buffer.from(object[, offsetOrEncoding[, length]])\nStatic method: Buffer.from(string[, encoding])\nStatic method: Buffer.isBuffer(obj)\nStatic method: Buffer.isEncoding(encoding)\nClass property: Buffer.poolSize\nbuf[index]\nbuf.buffer\nbuf.byteOffset\nbuf.compare(target[, targetStart[, targetEnd[, sourceStart[, sourceEnd]]]])\nbuf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])\nbuf.entries()\nbuf.equals(otherBuffer)\nbuf.fill(value[, offset[, end]][, encoding])\nbuf.includes(value[, byteOffset][, encoding])\nbuf.indexOf(value[, byteOffset][, encoding])\nbuf.keys()\nbuf.lastIndexOf(value[, byteOffset][, encoding])\nbuf.length\nbuf.parent\nbuf.readBigInt64BE([offset])\nbuf.readBigInt64LE([offset])\nbuf.readBigUInt64BE([offset])\nbuf.readBigUInt64LE([offset])\nbuf.readDoubleBE([offset])\nbuf.readDoubleLE([offset])\nbuf.readFloatBE([offset])\nbuf.readFloatLE([offset])\nbuf.readInt8([offset])\nbuf.readInt16BE([offset])\nbuf.readInt16LE([offset])\nbuf.readInt32BE([offset])\nbuf.readInt32LE([offset])\nbuf.readIntBE(offset, byteLength)\nbuf.readIntLE(offset, byteLength)\nbuf.readUInt8([offset])\nbuf.readUInt16BE([offset])\nbuf.readUInt16LE([offset])\nbuf.readUInt32BE([offset])\nbuf.readUInt32LE([offset])\nbuf.readUIntBE(offset, byteLength)\nbuf.readUIntLE(offset, byteLength)\nbuf.subarray([start[, end]])\nbuf.slice([start[, end]])\nbuf.swap16()\nbuf.swap32()\nbuf.swap64()\nbuf.toJSON()\nbuf.toString([encoding[, start[, end]]])\nbuf.values()\nbuf.write(string[, offset[, length]][, encoding])\nbuf.writeBigInt64BE(value[, offset])\nbuf.writeBigInt64LE(value[, offset])\nbuf.writeBigUInt64BE(value[, offset])\nbuf.writeBigUInt64LE(value[, offset])\nbuf.writeDoubleBE(value[, offset])\nbuf.writeDoubleLE(value[, offset])\nbuf.writeFloatBE(value[, offset])\nbuf.writeFloatLE(value[, offset])\nbuf.writeInt8(value[, offset])\nbuf.writeInt16BE(value[, offset])\nbuf.writeInt16LE(value[, offset])\nbuf.writeInt32BE(value[, offset])\nbuf.writeInt32LE(value[, offset])\nbuf.writeIntBE(value, offset, byteLength)\nbuf.writeIntLE(value, offset, byteLength)\nbuf.writeUInt8(value[,", "doc_id": "10856d87-86c5-447d-97bb-a528f7ff197a", "embedding": null, "doc_hash": "463f2b0e8c3ba44e5651cb43921a307610c49ebc26b8b07ac0d7c6f29f42f31e", "extra_info": null, "node_info": {"start": 2647, "end": 5540}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "22afeb60-a6f9-4d52-ab15-dd8766e666e6", "3": "a53c1972-c6fe-4218-812a-83869a6681b0"}}, "__type__": "1"}, "a53c1972-c6fe-4218-812a-83869a6681b0": {"__data__": {"text": "offset])\nbuf.writeBigInt64LE(value[, offset])\nbuf.writeBigUInt64BE(value[, offset])\nbuf.writeBigUInt64LE(value[, offset])\nbuf.writeDoubleBE(value[, offset])\nbuf.writeDoubleLE(value[, offset])\nbuf.writeFloatBE(value[, offset])\nbuf.writeFloatLE(value[, offset])\nbuf.writeInt8(value[, offset])\nbuf.writeInt16BE(value[, offset])\nbuf.writeInt16LE(value[, offset])\nbuf.writeInt32BE(value[, offset])\nbuf.writeInt32LE(value[, offset])\nbuf.writeIntBE(value, offset, byteLength)\nbuf.writeIntLE(value, offset, byteLength)\nbuf.writeUInt8(value[, offset])\nbuf.writeUInt16BE(value[, offset])\nbuf.writeUInt16LE(value[, offset])\nbuf.writeUInt32BE(value[, offset])\nbuf.writeUInt32LE(value[, offset])\nbuf.writeUIntBE(value, offset, byteLength)\nbuf.writeUIntLE(value, offset, byteLength)\nnew Buffer(array)\nnew Buffer(arrayBuffer[, byteOffset[, length]])\nnew Buffer(buffer)\nnew Buffer(size)\nnew Buffer(string[, encoding])\nClass: File\nnew buffer.File(sources, fileName[, options])\nfile.name\nfile.lastModified\nnode:buffer module APIs\nbuffer.atob(data)\nbuffer.btoa(data)\nbuffer.isAscii(input)\nbuffer.isUtf8(input)\nbuffer.INSPECT_MAX_BYTES\nbuffer.kMaxLength\nbuffer.kStringMaxLength\nbuffer.resolveObjectURL(id)\nbuffer.transcode(source, fromEnc, toEnc)\nClass: SlowBuffer\nnew SlowBuffer(size)\nBuffer constants\nbuffer.constants.MAX_LENGTH\nbuffer.constants.MAX_STRING_LENGTH\nBuffer.from(), Buffer.alloc(), and Buffer.allocUnsafe()\nThe --zero-fill-buffers command-line option\nWhat makes Buffer.allocUnsafe() and Buffer.allocUnsafeSlow() \"unsafe\"?\nC++ addons\nHello world\nContext-aware addons\nWorker support\nBuilding\nLinking to libraries included with Node.js\nLoading addons using require()\nNative abstractions for Node.js\nNode-API\nAddon examples\nFunction arguments\nCallbacks\nObject factory\nFunction factory\nWrapping C++ objects\nFactory of wrapped objects\nPassing wrapped objects around\nNode-API\nImplications of ABI stability\nBuilding\nBuild tools\nnode-gyp\nCMake.js\nUploading precompiled binaries\nnode-pre-gyp\nprebuild\nprebuildify\nUsage\nNode-API version matrix\nEnvironment life cycle APIs\nnapi_set_instance_data\nnapi_get_instance_data\nBasic Node-API data types\nnapi_status\nnapi_extended_error_info\nnapi_env\nnapi_value\nnapi_threadsafe_function\nnapi_threadsafe_function_release_mode\nnapi_threadsafe_function_call_mode\nNode-API memory management types\nnapi_handle_scope\nnapi_escapable_handle_scope\nnapi_ref\nnapi_type_tag\nnapi_async_cleanup_hook_handle\nNode-API callback types\nnapi_callback_info\nnapi_callback\nnapi_finalize\nnapi_async_execute_callback\nnapi_async_complete_callback\nnapi_threadsafe_function_call_js\nnapi_cleanup_hook\nnapi_async_cleanup_hook\nError handling\nReturn", "doc_id": "a53c1972-c6fe-4218-812a-83869a6681b0", "embedding": null, "doc_hash": "3769b424856f88ba6ea68539a41b3aa4189638fa1bca1180494b0963047f7b83", "extra_info": null, "node_info": {"start": 5598, "end": 8238}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "10856d87-86c5-447d-97bb-a528f7ff197a", "3": "d6a5d83c-52a3-47a6-ae4f-8289bfef8230"}}, "__type__": "1"}, "d6a5d83c-52a3-47a6-ae4f-8289bfef8230": {"__data__": {"text": "Node-API data types\nnapi_status\nnapi_extended_error_info\nnapi_env\nnapi_value\nnapi_threadsafe_function\nnapi_threadsafe_function_release_mode\nnapi_threadsafe_function_call_mode\nNode-API memory management types\nnapi_handle_scope\nnapi_escapable_handle_scope\nnapi_ref\nnapi_type_tag\nnapi_async_cleanup_hook_handle\nNode-API callback types\nnapi_callback_info\nnapi_callback\nnapi_finalize\nnapi_async_execute_callback\nnapi_async_complete_callback\nnapi_threadsafe_function_call_js\nnapi_cleanup_hook\nnapi_async_cleanup_hook\nError handling\nReturn values\nnapi_get_last_error_info\nExceptions\nnapi_throw\nnapi_throw_error\nnapi_throw_type_error\nnapi_throw_range_error\nnode_api_throw_syntax_error\nnapi_is_error\nnapi_create_error\nnapi_create_type_error\nnapi_create_range_error\nnode_api_create_syntax_error\nnapi_get_and_clear_last_exception\nnapi_is_exception_pending\nnapi_fatal_exception\nFatal errors\nnapi_fatal_error\nObject lifetime management\nMaking handle lifespan shorter than that of the native method\nnapi_open_handle_scope\nnapi_close_handle_scope\nnapi_open_escapable_handle_scope\nnapi_close_escapable_handle_scope\nnapi_escape_handle\nReferences to objects with a lifespan longer than that of the native method\nnapi_create_reference\nnapi_delete_reference\nnapi_reference_ref\nnapi_reference_unref\nnapi_get_reference_value\nCleanup on exit of the current Node.js instance\nnapi_add_env_cleanup_hook\nnapi_remove_env_cleanup_hook\nnapi_add_async_cleanup_hook\nnapi_remove_async_cleanup_hook\nModule registration\nWorking with JavaScript values\nEnum types\nnapi_key_collection_mode\nnapi_key_filter\nnapi_key_conversion\nnapi_valuetype\nnapi_typedarray_type\nObject creation functions\nnapi_create_array\nnapi_create_array_with_length\nnapi_create_arraybuffer\nnapi_create_buffer\nnapi_create_buffer_copy\nnapi_create_date\nnapi_create_external\nnapi_create_external_arraybuffer\nnapi_create_external_buffer\nnapi_create_object\nnapi_create_symbol\nnode_api_symbol_for\nnapi_create_typedarray\nnapi_create_dataview\nFunctions to convert from C types to Node-API\nnapi_create_int32\nnapi_create_uint32\nnapi_create_int64\nnapi_create_double\nnapi_create_bigint_int64\nnapi_create_bigint_uint64\nnapi_create_bigint_words\nnapi_create_string_latin1\nnapi_create_string_utf16\nnapi_create_string_utf8\nFunctions to convert from Node-API to C types\nnapi_get_array_length\nnapi_get_arraybuffer_info\nnapi_get_buffer_info\nnapi_get_prototype\nnapi_get_typedarray_info\nnapi_get_dataview_info\nnapi_get_date_value\nnapi_get_value_bool\nnapi_get_value_double\nnapi_get_value_bigint_int64\nnapi_get_value_bigint_uint64\nnapi_get_value_bigint_words\nnapi_get_value_external\nnapi_get_value_int32\nnapi_get_value_int64\nnapi_get_value_string_latin1\nnapi_get_value_string_utf8\nnapi_get_value_string_utf16\nnapi_get_value_uint32\nFunctions to get global", "doc_id": "d6a5d83c-52a3-47a6-ae4f-8289bfef8230", "embedding": null, "doc_hash": "ccc0f740176d53e12b35e34e83f001f67abfa67b7b076148b4d400113d25716b", "extra_info": null, "node_info": {"start": 8232, "end": 10993}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a53c1972-c6fe-4218-812a-83869a6681b0", "3": "12653304-54fc-4342-b769-ceca656d609f"}}, "__type__": "1"}, "12653304-54fc-4342-b769-ceca656d609f": {"__data__": {"text": "to get global instances\nnapi_get_boolean\nnapi_get_global\nnapi_get_null\nnapi_get_undefined\nWorking with JavaScript values and abstract operations\nnapi_coerce_to_bool\nnapi_coerce_to_number\nnapi_coerce_to_object\nnapi_coerce_to_string\nnapi_typeof\nnapi_instanceof\nnapi_is_array\nnapi_is_arraybuffer\nnapi_is_buffer\nnapi_is_date\nnapi_is_error\nnapi_is_typedarray\nnapi_is_dataview\nnapi_strict_equals\nnapi_detach_arraybuffer\nnapi_is_detached_arraybuffer\nWorking with JavaScript properties\nStructures\nnapi_property_attributes\nnapi_property_descriptor\nFunctions\nnapi_get_property_names\nnapi_get_all_property_names\nnapi_set_property\nnapi_get_property\nnapi_has_property\nnapi_delete_property\nnapi_has_own_property\nnapi_set_named_property\nnapi_get_named_property\nnapi_has_named_property\nnapi_set_element\nnapi_get_element\nnapi_has_element\nnapi_delete_element\nnapi_define_properties\nnapi_object_freeze\nnapi_object_seal\nWorking with JavaScript functions\nnapi_call_function\nnapi_create_function\nnapi_get_cb_info\nnapi_get_new_target\nnapi_new_instance\nObject wrap\nnapi_define_class\nnapi_wrap\nnapi_unwrap\nnapi_remove_wrap\nnapi_type_tag_object\nnapi_check_object_type_tag\nnapi_add_finalizer\nSimple asynchronous operations\nnapi_create_async_work\nnapi_delete_async_work\nnapi_queue_async_work\nnapi_cancel_async_work\nCustom asynchronous operations\nnapi_async_init\nnapi_async_destroy\nnapi_make_callback\nnapi_open_callback_scope\nnapi_close_callback_scope\nVersion management\nnapi_get_node_version\nnapi_get_version\nMemory management\nnapi_adjust_external_memory\nPromises\nnapi_create_promise\nnapi_resolve_deferred\nnapi_reject_deferred\nnapi_is_promise\nScript execution\nnapi_run_script\nlibuv event loop\nnapi_get_uv_event_loop\nAsynchronous thread-safe function calls\nCalling a thread-safe function\nReference counting of thread-safe functions\nDeciding whether to keep the process running\nnapi_create_threadsafe_function\nnapi_get_threadsafe_function_context\nnapi_call_threadsafe_function\nnapi_acquire_threadsafe_function\nnapi_release_threadsafe_function\nnapi_ref_threadsafe_function\nnapi_unref_threadsafe_function\nMiscellaneous utilities\nnode_api_get_module_file_name\nC++ embedder API\nExample embedding application\nSetting up per-process state\nPer-instance state\nChild process\nAsynchronous process creation\nSpawning .bat and .cmd files on Windows\nchild_process.exec(command[, options][, callback])\nchild_process.execFile(file[, args][, options][, callback])\nchild_process.fork(modulePath[, args][, options])\nchild_process.spawn(command[, args][, options])\noptions.detached\noptions.stdio\nSynchronous process creation\nchild_process.execFileSync(file[, args][, options])\nchild_process.execSync(command[, options])\nchild_process.spawnSync(command[, args][, options])\nClass: ChildProcess\nEvent: 'close'\nEvent: 'disconnect'\nEvent: 'error'\nEvent: 'exit'\nEvent: 'message'\nEvent:", "doc_id": "12653304-54fc-4342-b769-ceca656d609f", "embedding": null, "doc_hash": "1118e8b72ebf3ad856a0a07726e98b70adb19e022dda6a474106a08e5041bbcd", "extra_info": null, "node_info": {"start": 11507, "end": 14336}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d6a5d83c-52a3-47a6-ae4f-8289bfef8230", "3": "d0870d44-8d07-45bf-bbbd-65b1fbf25a0e"}}, "__type__": "1"}, "d0870d44-8d07-45bf-bbbd-65b1fbf25a0e": {"__data__": {"text": "embedding application\nSetting up per-process state\nPer-instance state\nChild process\nAsynchronous process creation\nSpawning .bat and .cmd files on Windows\nchild_process.exec(command[, options][, callback])\nchild_process.execFile(file[, args][, options][, callback])\nchild_process.fork(modulePath[, args][, options])\nchild_process.spawn(command[, args][, options])\noptions.detached\noptions.stdio\nSynchronous process creation\nchild_process.execFileSync(file[, args][, options])\nchild_process.execSync(command[, options])\nchild_process.spawnSync(command[, args][, options])\nClass: ChildProcess\nEvent: 'close'\nEvent: 'disconnect'\nEvent: 'error'\nEvent: 'exit'\nEvent: 'message'\nEvent: 'spawn'\nsubprocess.channel\nsubprocess.channel.ref()\nsubprocess.channel.unref()\nsubprocess.connected\nsubprocess.disconnect()\nsubprocess.exitCode\nsubprocess.kill([signal])\nsubprocess.killed\nsubprocess.pid\nsubprocess.ref()\nsubprocess.send(message[, sendHandle[, options]][, callback])\nExample: sending a server object\nExample: sending a socket object\nsubprocess.signalCode\nsubprocess.spawnargs\nsubprocess.spawnfile\nsubprocess.stderr\nsubprocess.stdin\nsubprocess.stdio\nsubprocess.stdout\nsubprocess.unref()\nmaxBuffer and Unicode\nShell requirements\nDefault Windows shell\nAdvanced serialization\nCluster\nHow it works\nClass: Worker\nEvent: 'disconnect'\nEvent: 'error'\nEvent: 'exit'\nEvent: 'listening'\nEvent: 'message'\nEvent: 'online'\nworker.disconnect()\nworker.exitedAfterDisconnect\nworker.id\nworker.isConnected()\nworker.isDead()\nworker.kill([signal])\nworker.process\nworker.send(message[, sendHandle[, options]][, callback])\nEvent: 'disconnect'\nEvent: 'exit'\nEvent: 'fork'\nEvent: 'listening'\nEvent: 'message'\nEvent: 'online'\nEvent: 'setup'\ncluster.disconnect([callback])\ncluster.fork([env])\ncluster.isMaster\ncluster.isPrimary\ncluster.isWorker\ncluster.schedulingPolicy\ncluster.settings\ncluster.setupMaster([settings])\ncluster.setupPrimary([settings])\ncluster.worker\ncluster.workers\nCommand-line API\nSynopsis\nProgram entry point\nECMAScript modules loader entry point caveat\nOptions\n-\n--\n--abort-on-uncaught-exception\n--build-snapshot\n--completion-bash\n-C condition,", "doc_id": "d0870d44-8d07-45bf-bbbd-65b1fbf25a0e", "embedding": null, "doc_hash": "3139fe4f042238f1a80dfa317368998909e441e75fcf7b2ae3dbb3cc96278344", "extra_info": null, "node_info": {"start": 13707, "end": 15837}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "12653304-54fc-4342-b769-ceca656d609f", "3": "6056815f-e626-49c8-8e08-71dc6f0351db"}}, "__type__": "1"}, "6056815f-e626-49c8-8e08-71dc6f0351db": {"__data__": {"text": "sendHandle[, options]][, callback])\nEvent: 'disconnect'\nEvent: 'exit'\nEvent: 'fork'\nEvent: 'listening'\nEvent: 'message'\nEvent: 'online'\nEvent: 'setup'\ncluster.disconnect([callback])\ncluster.fork([env])\ncluster.isMaster\ncluster.isPrimary\ncluster.isWorker\ncluster.schedulingPolicy\ncluster.settings\ncluster.setupMaster([settings])\ncluster.setupPrimary([settings])\ncluster.worker\ncluster.workers\nCommand-line API\nSynopsis\nProgram entry point\nECMAScript modules loader entry point caveat\nOptions\n-\n--\n--abort-on-uncaught-exception\n--build-snapshot\n--completion-bash\n-C condition, --conditions=condition\n--cpu-prof\n--cpu-prof-dir\n--cpu-prof-interval\n--cpu-prof-name\n--diagnostic-dir=directory\n--disable-proto=mode\n--disallow-code-generation-from-strings\n--dns-result-order=order\n--enable-fips\n--enable-source-maps\n--experimental-global-customevent\n--experimental-global-webcrypto\n--experimental-import-meta-resolve\n--experimental-loader=module\n--experimental-network-imports\n--experimental-policy\n--no-experimental-fetch\n--no-experimental-repl-await\n--experimental-shadow-realm\n--experimental-specifier-resolution=mode\n--experimental-test-coverage\n--experimental-vm-modules\n--experimental-wasi-unstable-preview1\n--experimental-wasm-modules\n--force-context-aware\n--force-fips\n--frozen-intrinsics\n--force-node-api-uncaught-exceptions-policy\n--heapsnapshot-near-heap-limit=max_count\n--heapsnapshot-signal=signal\n--heap-prof\n--heap-prof-dir\n--heap-prof-interval\n--heap-prof-name\n--icu-data-dir=file\n--input-type=type\n--inspect-brk[=[host:]port]\n--inspect-port=[host:]port\n--inspect[=[host:]port]\nWarning: binding inspector to a public IP:port combination is insecure\n--inspect-publish-uid=stderr,http\n--insecure-http-parser\n--jitless\n--max-http-header-size=size\n--napi-modules\n--no-addons\n--no-deprecation\n--no-extra-info-on-fatal-exception\n--no-force-async-hooks-checks\n--no-global-search-paths\n--no-warnings\n--node-memory-debug\n--openssl-config=file\n--openssl-shared-config\n--openssl-legacy-provider\n--pending-deprecation\n--policy-integrity=sri\n--preserve-symlinks\n--preserve-symlinks-main\n--prof\n--prof-process\n--redirect-warnings=file\n--report-compact\n--report-dir=directory,", "doc_id": "6056815f-e626-49c8-8e08-71dc6f0351db", "embedding": null, "doc_hash": "86aeaf09e1e8eb784c1e76b8a504231456e679a4462e6c89e900f4965fb5525d", "extra_info": null, "node_info": {"start": 15923, "end": 18092}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d0870d44-8d07-45bf-bbbd-65b1fbf25a0e", "3": "cfe7b9d9-cb36-4188-9aa0-c975df6b8bb5"}}, "__type__": "1"}, "cfe7b9d9-cb36-4188-9aa0-c975df6b8bb5": {"__data__": {"text": "is insecure\n--inspect-publish-uid=stderr,http\n--insecure-http-parser\n--jitless\n--max-http-header-size=size\n--napi-modules\n--no-addons\n--no-deprecation\n--no-extra-info-on-fatal-exception\n--no-force-async-hooks-checks\n--no-global-search-paths\n--no-warnings\n--node-memory-debug\n--openssl-config=file\n--openssl-shared-config\n--openssl-legacy-provider\n--pending-deprecation\n--policy-integrity=sri\n--preserve-symlinks\n--preserve-symlinks-main\n--prof\n--prof-process\n--redirect-warnings=file\n--report-compact\n--report-dir=directory, report-directory=directory\n--report-filename=filename\n--report-on-fatalerror\n--report-on-signal\n--report-signal=signal\n--report-uncaught-exception\n--secure-heap=n\n--secure-heap-min=n\n--snapshot-blob=path\n--test\n--test-name-pattern\n--test-reporter\n--test-reporter-destination\n--test-only\n--throw-deprecation\n--title=title\n--tls-cipher-list=list\n--tls-keylog=file\n--tls-max-v1.2\n--tls-max-v1.3\n--tls-min-v1.0\n--tls-min-v1.1\n--tls-min-v1.2\n--tls-min-v1.3\n--trace-atomics-wait\n--trace-deprecation\n--trace-event-categories\n--trace-event-file-pattern\n--trace-events-enabled\n--trace-exit\n--trace-sigint\n--trace-sync-io\n--trace-tls\n--trace-uncaught\n--trace-warnings\n--track-heap-objects\n--unhandled-rejections=mode\n--use-bundled-ca, --use-openssl-ca\n--use-largepages=mode\n--v8-options\n--v8-pool-size=num\n--watch\n--watch-path\n--watch-preserve-output\n--zero-fill-buffers\n-c, --check\n-e, --eval \"script\"\n-h, --help\n-i, --interactive\n-p, --print \"script\"\n-r, --require module\n-v, --version\nEnvironment variables\nFORCE_COLOR=[1, 2, 3]\nNODE_DEBUG=module[,\u2026]\nNODE_DEBUG_NATIVE=module[,\u2026]\nNODE_DISABLE_COLORS=1\nNODE_EXTRA_CA_CERTS=file\nNODE_ICU_DATA=file\nNODE_NO_WARNINGS=1\nNODE_OPTIONS=options...\nNODE_PATH=path[:\u2026]\nNODE_PENDING_DEPRECATION=1\nNODE_PENDING_PIPE_INSTANCES=instances\nNODE_PRESERVE_SYMLINKS=1\nNODE_REDIRECT_WARNINGS=file\nNODE_REPL_HISTORY=file\nNODE_REPL_EXTERNAL_MODULE=file\nNODE_SKIP_PLATFORM_CHECK=value\nNODE_TLS_REJECT_UNAUTHORIZED=value\nNODE_V8_COVERAGE=dir\nCoverage output\nSource map cache\nNO_COLOR=<any>\nOPENSSL_CONF=file\nSSL_CERT_DIR=dir\nSSL_CERT_FILE=file\nTZ\nUV_THREADPOOL_SIZE=size\nUseful V8 options\n--max-old-space-size=SIZE (in megabytes)\n--max-semi-space-size=SIZE (in megabytes)\nConsole\nClass: Console\nnew Console(stdout[, stderr][, ignoreErrors])\nnew Console(options)\nconsole.assert(value[, ...message])\nconsole.clear()\nconsole.count([label])\nconsole.countReset([label])\nconsole.debug(data[, ...args])\nconsole.dir(obj[,", "doc_id": "cfe7b9d9-cb36-4188-9aa0-c975df6b8bb5", "embedding": null, "doc_hash": "35e6e18eb3cd169cca3be82cb2571c3ca683a15cf0fdaab5334b2e5191ab8415", "extra_info": null, "node_info": {"start": 18126, "end": 20582}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6056815f-e626-49c8-8e08-71dc6f0351db", "3": "2e12dc84-f0a9-43a5-ba2a-bfa8788ae9ba"}}, "__type__": "1"}, "2e12dc84-f0a9-43a5-ba2a-bfa8788ae9ba": {"__data__": {"text": "output\nSource map cache\nNO_COLOR=<any>\nOPENSSL_CONF=file\nSSL_CERT_DIR=dir\nSSL_CERT_FILE=file\nTZ\nUV_THREADPOOL_SIZE=size\nUseful V8 options\n--max-old-space-size=SIZE (in megabytes)\n--max-semi-space-size=SIZE (in megabytes)\nConsole\nClass: Console\nnew Console(stdout[, stderr][, ignoreErrors])\nnew Console(options)\nconsole.assert(value[, ...message])\nconsole.clear()\nconsole.count([label])\nconsole.countReset([label])\nconsole.debug(data[, ...args])\nconsole.dir(obj[, options])\nconsole.dirxml(...data)\nconsole.error([data][, ...args])\nconsole.group([...label])\nconsole.groupCollapsed()\nconsole.groupEnd()\nconsole.info([data][, ...args])\nconsole.log([data][, ...args])\nconsole.table(tabularData[, properties])\nconsole.time([label])\nconsole.timeEnd([label])\nconsole.timeLog([label][, ...data])\nconsole.trace([message][, ...args])\nconsole.warn([data][, ...args])\nInspector only methods\nconsole.profile([label])\nconsole.profileEnd([label])\nconsole.timeStamp([label])\nCorepack\nWorkflows\nEnabling the feature\nConfiguring a package\nUpgrading the global versions\nOffline workflow\nSupported package managers\nCommon questions\nHow does Corepack interact with npm?\nRunning npm install -g yarn doesn't work\nCrypto\nDetermining if crypto support is unavailable\nClass: Certificate\nStatic method: Certificate.exportChallenge(spkac[, encoding])\nStatic method: Certificate.exportPublicKey(spkac[, encoding])\nStatic method: Certificate.verifySpkac(spkac[, encoding])\nLegacy API\nnew crypto.Certificate()\ncertificate.exportChallenge(spkac[, encoding])\ncertificate.exportPublicKey(spkac[, encoding])\ncertificate.verifySpkac(spkac[, encoding])\nClass: Cipher\ncipher.final([outputEncoding])\ncipher.getAuthTag()\ncipher.setAAD(buffer[, options])\ncipher.setAutoPadding([autoPadding])\ncipher.update(data[, inputEncoding][, outputEncoding])\nClass: Decipher\ndecipher.final([outputEncoding])\ndecipher.setAAD(buffer[, options])\ndecipher.setAuthTag(buffer[, encoding])\ndecipher.setAutoPadding([autoPadding])\ndecipher.update(data[, inputEncoding][, outputEncoding])\nClass: DiffieHellman\ndiffieHellman.computeSecret(otherPublicKey[, inputEncoding][, outputEncoding])\ndiffieHellman.generateKeys([encoding])\ndiffieHellman.getGenerator([encoding])\ndiffieHellman.getPrime([encoding])\ndiffieHellman.getPrivateKey([encoding])\ndiffieHellman.getPublicKey([encoding])\ndiffieHellman.setPrivateKey(privateKey[, encoding])\ndiffieHellman.setPublicKey(publicKey[, encoding])\ndiffieHellman.verifyError\nClass: DiffieHellmanGroup\nClass: ECDH\nStatic method: ECDH.convertKey(key, curve[, inputEncoding[, outputEncoding[, format]]])\necdh.computeSecret(otherPublicKey[, inputEncoding][, outputEncoding])\necdh.generateKeys([encoding[, format]])\necdh.getPrivateKey([encoding])\necdh.getPublicKey([encoding][, format])\necdh.setPrivateKey(privateKey[, encoding])\necdh.setPublicKey(publicKey[, encoding])\nClass: Hash\nhash.copy([options])\nhash.digest([encoding])\nhash.update(data[, inputEncoding])\nClass: Hmac\nhmac.digest([encoding])\nhmac.update(data[, inputEncoding])\nClass: KeyObject\nStatic method:", "doc_id": "2e12dc84-f0a9-43a5-ba2a-bfa8788ae9ba", "embedding": null, "doc_hash": "756978908f60cc4685bdcf4314d32c741975288b7e6e4d8926f79de9040aac91", "extra_info": null, "node_info": {"start": 20659, "end": 23689}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cfe7b9d9-cb36-4188-9aa0-c975df6b8bb5", "3": "09b78c29-63ed-4771-8099-7bd3606af6fc"}}, "__type__": "1"}, "09b78c29-63ed-4771-8099-7bd3606af6fc": {"__data__": {"text": "ECDH\nStatic method: ECDH.convertKey(key, curve[, inputEncoding[, outputEncoding[, format]]])\necdh.computeSecret(otherPublicKey[, inputEncoding][, outputEncoding])\necdh.generateKeys([encoding[, format]])\necdh.getPrivateKey([encoding])\necdh.getPublicKey([encoding][, format])\necdh.setPrivateKey(privateKey[, encoding])\necdh.setPublicKey(publicKey[, encoding])\nClass: Hash\nhash.copy([options])\nhash.digest([encoding])\nhash.update(data[, inputEncoding])\nClass: Hmac\nhmac.digest([encoding])\nhmac.update(data[, inputEncoding])\nClass: KeyObject\nStatic method: KeyObject.from(key)\nkeyObject.asymmetricKeyDetails\nkeyObject.asymmetricKeyType\nkeyObject.export([options])\nkeyObject.equals(otherKeyObject)\nkeyObject.symmetricKeySize\nkeyObject.type\nClass: Sign\nsign.sign(privateKey[, outputEncoding])\nsign.update(data[, inputEncoding])\nClass: Verify\nverify.update(data[, inputEncoding])\nverify.verify(object, signature[, signatureEncoding])\nClass: X509Certificate\nnew X509Certificate(buffer)\nx509.ca\nx509.checkEmail(email[, options])\nx509.checkHost(name[, options])\nx509.checkIP(ip)\nx509.checkIssued(otherCert)\nx509.checkPrivateKey(privateKey)\nx509.fingerprint\nx509.fingerprint256\nx509.fingerprint512\nx509.infoAccess\nx509.issuer\nx509.issuerCertificate\nx509.keyUsage\nx509.publicKey\nx509.raw\nx509.serialNumber\nx509.subject\nx509.subjectAltName\nx509.toJSON()\nx509.toLegacyObject()\nx509.toString()\nx509.validFrom\nx509.validTo\nx509.verify(publicKey)\nnode:crypto module methods and properties\ncrypto.constants\ncrypto.DEFAULT_ENCODING\ncrypto.fips\ncrypto.checkPrime(candidate[, options], callback)\ncrypto.checkPrimeSync(candidate[, options])\ncrypto.createCipher(algorithm, password[, options])\ncrypto.createCipheriv(algorithm, key, iv[, options])\ncrypto.createDecipher(algorithm, password[, options])\ncrypto.createDecipheriv(algorithm, key, iv[, options])\ncrypto.createDiffieHellman(prime[, primeEncoding][, generator][, generatorEncoding])\ncrypto.createDiffieHellman(primeLength[, generator])\ncrypto.createDiffieHellmanGroup(name)\ncrypto.createECDH(curveName)\ncrypto.createHash(algorithm[, options])\ncrypto.createHmac(algorithm, key[, options])\ncrypto.createPrivateKey(key)\ncrypto.createPublicKey(key)\ncrypto.createSecretKey(key[, encoding])\ncrypto.createSign(algorithm[, options])\ncrypto.createVerify(algorithm[, options])\ncrypto.diffieHellman(options)\ncrypto.generateKey(type, options, callback)\ncrypto.generateKeyPair(type, options, callback)\ncrypto.generateKeyPairSync(type, options)\ncrypto.generateKeySync(type, options)\ncrypto.generatePrime(size[, options[, callback]])\ncrypto.generatePrimeSync(size[, options])\ncrypto.getCipherInfo(nameOrNid[, options])\ncrypto.getCiphers()\ncrypto.getCurves()\ncrypto.getDiffieHellman(groupName)\ncrypto.getFips()\ncrypto.getHashes()\ncrypto.getRandomValues(typedArray)\ncrypto.hkdf(digest, ikm, salt, info, keylen, callback)\ncrypto.hkdfSync(digest, ikm, salt, info,", "doc_id": "09b78c29-63ed-4771-8099-7bd3606af6fc", "embedding": null, "doc_hash": "067d91ad52ee0bb9841bc14a9cdf816f129e2c3f6efd54a5d09f09a3da669eef", "extra_info": null, "node_info": {"start": 23603, "end": 26482}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2e12dc84-f0a9-43a5-ba2a-bfa8788ae9ba", "3": "4a25b066-62a9-4f55-b020-602a18e23096"}}, "__type__": "1"}, "4a25b066-62a9-4f55-b020-602a18e23096": {"__data__": {"text": "options, callback)\ncrypto.generateKeyPair(type, options, callback)\ncrypto.generateKeyPairSync(type, options)\ncrypto.generateKeySync(type, options)\ncrypto.generatePrime(size[, options[, callback]])\ncrypto.generatePrimeSync(size[, options])\ncrypto.getCipherInfo(nameOrNid[, options])\ncrypto.getCiphers()\ncrypto.getCurves()\ncrypto.getDiffieHellman(groupName)\ncrypto.getFips()\ncrypto.getHashes()\ncrypto.getRandomValues(typedArray)\ncrypto.hkdf(digest, ikm, salt, info, keylen, callback)\ncrypto.hkdfSync(digest, ikm, salt, info, keylen)\ncrypto.pbkdf2(password, salt, iterations, keylen, digest, callback)\ncrypto.pbkdf2Sync(password, salt, iterations, keylen, digest)\ncrypto.privateDecrypt(privateKey, buffer)\ncrypto.privateEncrypt(privateKey, buffer)\ncrypto.publicDecrypt(key, buffer)\ncrypto.publicEncrypt(key, buffer)\ncrypto.randomBytes(size[, callback])\ncrypto.randomFillSync(buffer[, offset][, size])\ncrypto.randomFill(buffer[, offset][, size], callback)\ncrypto.randomInt([min, ]max[, callback])\ncrypto.randomUUID([options])\ncrypto.scrypt(password, salt, keylen[, options], callback)\ncrypto.scryptSync(password, salt, keylen[, options])\ncrypto.secureHeapUsed()\ncrypto.setEngine(engine[, flags])\ncrypto.setFips(bool)\ncrypto.sign(algorithm, data, key[, callback])\ncrypto.subtle\ncrypto.timingSafeEqual(a, b)\ncrypto.verify(algorithm, data, key, signature[, callback])\ncrypto.webcrypto\nNotes\nUsing strings as inputs to cryptographic APIs\nLegacy streams API (prior to Node.js 0.10)\nSupport for weak or compromised algorithms\nCCM mode\nCrypto constants\nOpenSSL options\nOpenSSL engine constants\nOther OpenSSL constants\nNode.js crypto constants\nDebugger\nWatchers\nCommand reference\nStepping\nBreakpoints\nInformation\nExecution control\nVarious\nAdvanced usage\nV8 inspector integration for Node.js\nDeprecated APIs\nRevoking deprecations\nList of deprecated APIs\nDEP0001: http.OutgoingMessage.prototype.flush\nDEP0002: require('_linklist')\nDEP0003: _writableState.buffer\nDEP0004: CryptoStream.prototype.readyState\nDEP0005: Buffer() constructor\nDEP0006: child_process options.customFds\nDEP0007: Replace cluster worker.suicide with worker.exitedAfterDisconnect\nDEP0008: require('node:constants')\nDEP0009: crypto.pbkdf2 without digest\nDEP0010: crypto.createCredentials\nDEP0011: crypto.Credentials\nDEP0012: Domain.dispose\nDEP0013: fs asynchronous function without callback\nDEP0014: fs.read legacy String interface\nDEP0015: fs.readSync legacy String interface\nDEP0016: GLOBAL/root\nDEP0017: Intl.v8BreakIterator\nDEP0018: Unhandled promise rejections\nDEP0019: require('.') resolved outside directory\nDEP0020: Server.connections\nDEP0021: Server.listenFD\nDEP0022: os.tmpDir()\nDEP0023: os.getNetworkInterfaces()\nDEP0024: REPLServer.prototype.convertToContext()\nDEP0025: require('node:sys')\nDEP0026: util.print()\nDEP0027: util.puts()\nDEP0028: util.debug()\nDEP0029: util.error()\nDEP0030: SlowBuffer\nDEP0031: ecdh.setPublicKey()\nDEP0032: node:domain module\nDEP0033: EventEmitter.listenerCount()\nDEP0034: fs.exists(path,", "doc_id": "4a25b066-62a9-4f55-b020-602a18e23096", "embedding": null, "doc_hash": "dfb76ae616b5f72ca5b16dede0a508d72f3150b78ab1a11394fa61b24ac89753", "extra_info": null, "node_info": {"start": 26512, "end": 29495}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "09b78c29-63ed-4771-8099-7bd3606af6fc", "3": "9c216f2a-cd71-4c09-b0dc-298b50e0cdea"}}, "__type__": "1"}, "9c216f2a-cd71-4c09-b0dc-298b50e0cdea": {"__data__": {"text": "GLOBAL/root\nDEP0017: Intl.v8BreakIterator\nDEP0018: Unhandled promise rejections\nDEP0019: require('.') resolved outside directory\nDEP0020: Server.connections\nDEP0021: Server.listenFD\nDEP0022: os.tmpDir()\nDEP0023: os.getNetworkInterfaces()\nDEP0024: REPLServer.prototype.convertToContext()\nDEP0025: require('node:sys')\nDEP0026: util.print()\nDEP0027: util.puts()\nDEP0028: util.debug()\nDEP0029: util.error()\nDEP0030: SlowBuffer\nDEP0031: ecdh.setPublicKey()\nDEP0032: node:domain module\nDEP0033: EventEmitter.listenerCount()\nDEP0034: fs.exists(path, callback)\nDEP0035: fs.lchmod(path, mode, callback)\nDEP0036: fs.lchmodSync(path, mode)\nDEP0037: fs.lchown(path, uid, gid, callback)\nDEP0038: fs.lchownSync(path, uid, gid)\nDEP0039: require.extensions\nDEP0040: node:punycode module\nDEP0041: NODE_REPL_HISTORY_FILE environment variable\nDEP0042: tls.CryptoStream\nDEP0043: tls.SecurePair\nDEP0044: util.isArray()\nDEP0045: util.isBoolean()\nDEP0046: util.isBuffer()\nDEP0047: util.isDate()\nDEP0048: util.isError()\nDEP0049: util.isFunction()\nDEP0050: util.isNull()\nDEP0051: util.isNullOrUndefined()\nDEP0052: util.isNumber()\nDEP0053: util.isObject()\nDEP0054: util.isPrimitive()\nDEP0055: util.isRegExp()\nDEP0056: util.isString()\nDEP0057: util.isSymbol()\nDEP0058: util.isUndefined()\nDEP0059: util.log()\nDEP0060: util._extend()\nDEP0061: fs.SyncWriteStream\nDEP0062: node --debug\nDEP0063: ServerResponse.prototype.writeHeader()\nDEP0064: tls.createSecurePair()\nDEP0065: repl.REPL_MODE_MAGIC and NODE_REPL_MODE=magic\nDEP0066: OutgoingMessage.prototype._headers, OutgoingMessage.prototype._headerNames\nDEP0067: OutgoingMessage.prototype._renderHeaders\nDEP0068: node debug\nDEP0069: vm.runInDebugContext(string)\nDEP0070: async_hooks.currentId()\nDEP0071: async_hooks.triggerId()\nDEP0072: async_hooks.AsyncResource.triggerId()\nDEP0073: Several internal properties of net.Server\nDEP0074: REPLServer.bufferedCommand\nDEP0075: REPLServer.parseREPLKeyword()\nDEP0076: tls.parseCertString()\nDEP0077: Module._debug()\nDEP0078: REPLServer.turnOffEditorMode()\nDEP0079: Custom inspection function on objects via .inspect()\nDEP0080: path._makeLong()\nDEP0081: fs.truncate() using a file descriptor\nDEP0082: REPLServer.prototype.memory()\nDEP0083: Disabling ECDH by setting ecdhCurve to false\nDEP0084: requiring bundled internal dependencies\nDEP0085: AsyncHooks sensitive API\nDEP0086: Remove runInAsyncIdScope\nDEP0089: require('node:assert')\nDEP0090: Invalid GCM authentication tag lengths\nDEP0091: crypto.DEFAULT_ENCODING\nDEP0092: Top-level this bound to module.exports\nDEP0093: crypto.fips is deprecated and replaced\nDEP0094: Using assert.fail() with more than one argument\nDEP0095: timers.enroll()\nDEP0096: timers.unenroll()\nDEP0097: MakeCallback with domain property\nDEP0098: AsyncHooks embedder AsyncResource.emitBefore and AsyncResource.emitAfter APIs\nDEP0099: Async context-unaware node::MakeCallback C++ APIs\nDEP0100:", "doc_id": "9c216f2a-cd71-4c09-b0dc-298b50e0cdea", "embedding": null, "doc_hash": "6318ed6864ddb9c657967a4203e0827f882aaa7f0f13078c845e4c4948441a98", "extra_info": null, "node_info": {"start": 29483, "end": 32360}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4a25b066-62a9-4f55-b020-602a18e23096", "3": "cf7b963a-fc1d-40f5-9f98-755f09a38812"}}, "__type__": "1"}, "cf7b963a-fc1d-40f5-9f98-755f09a38812": {"__data__": {"text": "to false\nDEP0084: requiring bundled internal dependencies\nDEP0085: AsyncHooks sensitive API\nDEP0086: Remove runInAsyncIdScope\nDEP0089: require('node:assert')\nDEP0090: Invalid GCM authentication tag lengths\nDEP0091: crypto.DEFAULT_ENCODING\nDEP0092: Top-level this bound to module.exports\nDEP0093: crypto.fips is deprecated and replaced\nDEP0094: Using assert.fail() with more than one argument\nDEP0095: timers.enroll()\nDEP0096: timers.unenroll()\nDEP0097: MakeCallback with domain property\nDEP0098: AsyncHooks embedder AsyncResource.emitBefore and AsyncResource.emitAfter APIs\nDEP0099: Async context-unaware node::MakeCallback C++ APIs\nDEP0100: process.assert()\nDEP0101: --with-lttng\nDEP0102: Using noAssert in Buffer#(read|write) operations\nDEP0103: process.binding('util').is[...] typechecks\nDEP0104: process.env string coercion\nDEP0105: decipher.finaltol\nDEP0106: crypto.createCipher and crypto.createDecipher\nDEP0107: tls.convertNPNProtocols()\nDEP0108: zlib.bytesRead\nDEP0109: http, https, and tls support for invalid URLs\nDEP0110: vm.Script cached data\nDEP0111: process.binding()\nDEP0112: dgram private APIs\nDEP0113: Cipher.setAuthTag(), Decipher.getAuthTag()\nDEP0114: crypto._toBuf()\nDEP0115: crypto.prng(), crypto.pseudoRandomBytes(), crypto.rng()\nDEP0116: Legacy URL API\nDEP0117: Native crypto handles\nDEP0118: dns.lookup() support for a falsy host name\nDEP0119: process.binding('uv').errname() private API\nDEP0120: Windows Performance Counter support\nDEP0121: net._setSimultaneousAccepts()\nDEP0122: tls Server.prototype.setOptions()\nDEP0123: setting the TLS ServerName to an IP address\nDEP0124: using REPLServer.rli\nDEP0125: require('node:_stream_wrap')\nDEP0126: timers.active()\nDEP0127: timers._unrefActive()\nDEP0128: modules with an invalid main entry and an index.js file\nDEP0129: ChildProcess._channel\nDEP0130: Module.createRequireFromPath()\nDEP0131: Legacy HTTP parser\nDEP0132: worker.terminate() with callback\nDEP0133: http connection\nDEP0134: process._tickCallback\nDEP0135: WriteStream.open() and ReadStream.open() are internal\nDEP0136: http finished\nDEP0137: Closing fs.FileHandle on garbage collection\nDEP0138: process.mainModule\nDEP0139: process.umask() with no arguments\nDEP0140: Use request.destroy() instead of request.abort()\nDEP0141: repl.inputStream and repl.outputStream\nDEP0142: repl._builtinLibs\nDEP0143: Transform._transformState\nDEP0144: module.parent\nDEP0145: socket.bufferSize\nDEP0146: new crypto.Certificate()\nDEP0147: fs.rmdir(path, { recursive: true })\nDEP0148: Folder mappings in \"exports\" (trailing \"/\")\nDEP0149: http.IncomingMessage#connection\nDEP0150: Changing the value of process.config\nDEP0151: Main index lookup and extension searching\nDEP0152: Extension PerformanceEntry properties\nDEP0153: dns.lookup and dnsPromises.lookup options type coercion\nDEP0154: RSA-PSS generate key pair options\nDEP0155: Trailing slashes in pattern specifier resolutions\nDEP0156: .aborted property and 'abort', 'aborted' event in http\nDEP0157: Thenable support in streams\nDEP0158: buffer.slice(start, end)\nDEP0159: ERR_INVALID_CALLBACK\nDEP0160: process.on('multipleResolves', handler)\nDEP0161: process._getActiveRequests() and", "doc_id": "cf7b963a-fc1d-40f5-9f98-755f09a38812", "embedding": null, "doc_hash": "59c62aa9aad46cf2d802bff7c45b030149e70966ecd59a3bdb3079d56ce02835", "extra_info": null, "node_info": {"start": 32289, "end": 35434}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9c216f2a-cd71-4c09-b0dc-298b50e0cdea", "3": "677dc043-d941-4173-8bf4-9c9189f34f53"}}, "__type__": "1"}, "677dc043-d941-4173-8bf4-9c9189f34f53": {"__data__": {"text": "in \"exports\" (trailing \"/\")\nDEP0149: http.IncomingMessage#connection\nDEP0150: Changing the value of process.config\nDEP0151: Main index lookup and extension searching\nDEP0152: Extension PerformanceEntry properties\nDEP0153: dns.lookup and dnsPromises.lookup options type coercion\nDEP0154: RSA-PSS generate key pair options\nDEP0155: Trailing slashes in pattern specifier resolutions\nDEP0156: .aborted property and 'abort', 'aborted' event in http\nDEP0157: Thenable support in streams\nDEP0158: buffer.slice(start, end)\nDEP0159: ERR_INVALID_CALLBACK\nDEP0160: process.on('multipleResolves', handler)\nDEP0161: process._getActiveRequests() and process._getActiveHandles()\nDEP0162: fs.write(), fs.writeFileSync() coercion to string\nDEP0163: channel.subscribe(onMessage), channel.unsubscribe(onMessage)\nDEP0164: process.exit(code), process.exitCode coercion to integer\nDEP0165: --trace-atomics-wait\nDEP0166: Double slashes in imports and exports targets\nDEP0167: Weak DiffieHellmanGroup instances (modp1, modp2, modp5)\nDEP0168: Unhandled exception in Node-API callbacks\nDEP0169: Insecure url.parse()\nDEP0170: Invalid port when using url.parse()\nDEP0171: Setters for http.IncomingMessage headers and trailers\nDiagnostics Channel\nPublic API\nOverview\ndiagnostics_channel.hasSubscribers(name)\ndiagnostics_channel.channel(name)\ndiagnostics_channel.subscribe(name, onMessage)\ndiagnostics_channel.unsubscribe(name, onMessage)\nClass: Channel\nchannel.hasSubscribers\nchannel.publish(message)\nchannel.subscribe(onMessage)\nchannel.unsubscribe(onMessage)\nBuilt-in Channels\nHTTP\nDNS\nClass: dns.Resolver\nResolver([options])\nresolver.cancel()\nresolver.setLocalAddress([ipv4][, ipv6])\ndns.getServers()\ndns.lookup(hostname[, options], callback)\nSupported getaddrinfo flags\ndns.lookupService(address, port, callback)\ndns.resolve(hostname[, rrtype], callback)\ndns.resolve4(hostname[, options], callback)\ndns.resolve6(hostname[, options], callback)\ndns.resolveAny(hostname, callback)\ndns.resolveCname(hostname, callback)\ndns.resolveCaa(hostname, callback)\ndns.resolveMx(hostname, callback)\ndns.resolveNaptr(hostname, callback)\ndns.resolveNs(hostname, callback)\ndns.resolvePtr(hostname, callback)\ndns.resolveSoa(hostname, callback)\ndns.resolveSrv(hostname, callback)\ndns.resolveTxt(hostname, callback)\ndns.reverse(ip, callback)\ndns.setDefaultResultOrder(order)\ndns.setServers(servers)\nDNS promises API\nClass: dnsPromises.Resolver\nresolver.cancel()\ndnsPromises.getServers()\ndnsPromises.lookup(hostname[, options])\ndnsPromises.lookupService(address, port)\ndnsPromises.resolve(hostname[, rrtype])\ndnsPromises.resolve4(hostname[, options])\ndnsPromises.resolve6(hostname[,", "doc_id": "677dc043-d941-4173-8bf4-9c9189f34f53", "embedding": null, "doc_hash": "d4ba2162d502844a9637570abc46280789bf4e3899502c32dee4ba39e2433116", "extra_info": null, "node_info": {"start": 35444, "end": 38079}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cf7b963a-fc1d-40f5-9f98-755f09a38812", "3": "cf39d002-e0d8-48a4-8a74-5d6333ac00c0"}}, "__type__": "1"}, "cf39d002-e0d8-48a4-8a74-5d6333ac00c0": {"__data__": {"text": "callback)\ndns.resolvePtr(hostname, callback)\ndns.resolveSoa(hostname, callback)\ndns.resolveSrv(hostname, callback)\ndns.resolveTxt(hostname, callback)\ndns.reverse(ip, callback)\ndns.setDefaultResultOrder(order)\ndns.setServers(servers)\nDNS promises API\nClass: dnsPromises.Resolver\nresolver.cancel()\ndnsPromises.getServers()\ndnsPromises.lookup(hostname[, options])\ndnsPromises.lookupService(address, port)\ndnsPromises.resolve(hostname[, rrtype])\ndnsPromises.resolve4(hostname[, options])\ndnsPromises.resolve6(hostname[, options])\ndnsPromises.resolveAny(hostname)\ndnsPromises.resolveCaa(hostname)\ndnsPromises.resolveCname(hostname)\ndnsPromises.resolveMx(hostname)\ndnsPromises.resolveNaptr(hostname)\ndnsPromises.resolveNs(hostname)\ndnsPromises.resolvePtr(hostname)\ndnsPromises.resolveSoa(hostname)\ndnsPromises.resolveSrv(hostname)\ndnsPromises.resolveTxt(hostname)\ndnsPromises.reverse(ip)\ndnsPromises.setDefaultResultOrder(order)\ndnsPromises.setServers(servers)\nError codes\nImplementation considerations\ndns.lookup()\ndns.resolve(), dns.resolve*(), and dns.reverse()\nDomain\nWarning: Don't ignore errors!\nAdditions to Error objects\nImplicit binding\nExplicit binding\ndomain.create()\nClass: Domain\ndomain.members\ndomain.add(emitter)\ndomain.bind(callback)\ndomain.enter()\ndomain.exit()\ndomain.intercept(callback)\ndomain.remove(emitter)\ndomain.run(fn[, ...args])\nDomains and promises\nErrors\nError propagation and interception\nError-first callbacks\nClass: Error\nnew Error(message[, options])\nError.captureStackTrace(targetObject[, constructorOpt])\nError.stackTraceLimit\nerror.cause\nerror.code\nerror.message\nerror.stack\nClass: AssertionError\nClass: RangeError\nClass: ReferenceError\nClass: SyntaxError\nClass: SystemError\nerror.address\nerror.code\nerror.dest\nerror.errno\nerror.info\nerror.message\nerror.path\nerror.port\nerror.syscall\nCommon system errors\nClass: TypeError\nExceptions vs. errors\nOpenSSL errors\nerror.opensslErrorStack\nerror.function\nerror.library\nerror.reason\nNode.js error codes ABORT_ERR ERR_AMBIGUOUS_ARGUMENT ERR_ARG_NOT_ITERABLE ERR_ASSERTION ERR_ASYNC_CALLBACK ERR_ASYNC_TYPE ERR_BROTLI_COMPRESSION_FAILED ERR_BROTLI_INVALID_PARAM ERR_BUFFER_CONTEXT_NOT_AVAILABLE ERR_BUFFER_OUT_OF_BOUNDS ERR_BUFFER_TOO_LARGE ERR_CANNOT_WATCH_SIGINT ERR_CHILD_CLOSED_BEFORE_REPLY ERR_CHILD_PROCESS_IPC_REQUIRED ERR_CHILD_PROCESS_STDIO_MAXBUFFER ERR_CLOSED_MESSAGE_PORT ERR_CONSOLE_WRITABLE_STREAM ERR_CONSTRUCT_CALL_INVALID ERR_CONSTRUCT_CALL_REQUIRED ERR_CONTEXT_NOT_INITIALIZED ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED ERR_CRYPTO_ECDH_INVALID_FORMAT ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY ERR_CRYPTO_ENGINE_UNKNOWN ERR_CRYPTO_FIPS_FORCED ERR_CRYPTO_FIPS_UNAVAILABLE", "doc_id": "cf39d002-e0d8-48a4-8a74-5d6333ac00c0", "embedding": null, "doc_hash": "767950371a03a2ec135c06ecf8a571590037ba6377bc393a231c71575ffc3816", "extra_info": null, "node_info": {"start": 38158, "end": 40803}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "677dc043-d941-4173-8bf4-9c9189f34f53", "3": "45b6fac1-8454-4e43-bff9-ffbdddb65724"}}, "__type__": "1"}, "45b6fac1-8454-4e43-bff9-ffbdddb65724": {"__data__": {"text": "ERR_CHILD_PROCESS_IPC_REQUIRED ERR_CHILD_PROCESS_STDIO_MAXBUFFER ERR_CLOSED_MESSAGE_PORT ERR_CONSOLE_WRITABLE_STREAM ERR_CONSTRUCT_CALL_INVALID ERR_CONSTRUCT_CALL_REQUIRED ERR_CONTEXT_NOT_INITIALIZED ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED ERR_CRYPTO_ECDH_INVALID_FORMAT ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY ERR_CRYPTO_ENGINE_UNKNOWN ERR_CRYPTO_FIPS_FORCED ERR_CRYPTO_FIPS_UNAVAILABLE ERR_CRYPTO_HASH_FINALIZED ERR_CRYPTO_HASH_UPDATE_FAILED ERR_CRYPTO_INCOMPATIBLE_KEY ERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS ERR_CRYPTO_INITIALIZATION_FAILED ERR_CRYPTO_INVALID_AUTH_TAG ERR_CRYPTO_INVALID_COUNTER ERR_CRYPTO_INVALID_CURVE ERR_CRYPTO_INVALID_DIGEST ERR_CRYPTO_INVALID_IV ERR_CRYPTO_INVALID_JWK ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE ERR_CRYPTO_INVALID_KEYLEN ERR_CRYPTO_INVALID_KEYPAIR ERR_CRYPTO_INVALID_KEYTYPE ERR_CRYPTO_INVALID_MESSAGELEN ERR_CRYPTO_INVALID_SCRYPT_PARAMS ERR_CRYPTO_INVALID_STATE ERR_CRYPTO_INVALID_TAG_LENGTH ERR_CRYPTO_JOB_INIT_FAILED ERR_CRYPTO_JWK_UNSUPPORTED_CURVE ERR_CRYPTO_JWK_UNSUPPORTED_KEY_TYPE ERR_CRYPTO_OPERATION_FAILED ERR_CRYPTO_PBKDF2_ERROR ERR_CRYPTO_SCRYPT_INVALID_PARAMETER ERR_CRYPTO_SCRYPT_NOT_SUPPORTED ERR_CRYPTO_SIGN_KEY_REQUIRED ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH ERR_CRYPTO_UNKNOWN_CIPHER ERR_CRYPTO_UNKNOWN_DH_GROUP ERR_CRYPTO_UNSUPPORTED_OPERATION ERR_DEBUGGER_ERROR ERR_DEBUGGER_STARTUP_ERROR ERR_DLOPEN_DISABLED ERR_DLOPEN_FAILED ERR_DIR_CLOSED ERR_DIR_CONCURRENT_OPERATION ERR_DNS_SET_SERVERS_FAILED ERR_DOMAIN_CALLBACK_NOT_AVAILABLE ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE ERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION ERR_ENCODING_INVALID_ENCODED_DATA ERR_ENCODING_NOT_SUPPORTED ERR_EVAL_ESM_CANNOT_PRINT ERR_EVENT_RECURSION ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE ERR_FALSY_VALUE_REJECTION ERR_FEATURE_UNAVAILABLE_ON_PLATFORM ERR_FS_CP_DIR_TO_NON_DIR ERR_FS_CP_EEXIST ERR_FS_CP_EINVAL ERR_HTTP_CONTENT_LENGTH_MISMATCH ERR_FS_CP_FIFO_PIPE ERR_FS_CP_NON_DIR_TO_DIR ERR_FS_CP_SOCKET ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY ERR_FS_CP_UNKNOWN ERR_FS_EISDIR ERR_FS_FILE_TOO_LARGE", "doc_id": "45b6fac1-8454-4e43-bff9-ffbdddb65724", "embedding": null, "doc_hash": "9cf66d9c898d480de410513d97fb45533ebd939f85b0ed762ed012ec37c3bb33", "extra_info": null, "node_info": {"start": 40938, "end": 42958}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cf39d002-e0d8-48a4-8a74-5d6333ac00c0", "3": "2e4b33c6-7bb6-49d3-8f9a-df2e65e6b85e"}}, "__type__": "1"}, "2e4b33c6-7bb6-49d3-8f9a-df2e65e6b85e": {"__data__": {"text": "ERR_EVENT_RECURSION ERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE ERR_FALSY_VALUE_REJECTION ERR_FEATURE_UNAVAILABLE_ON_PLATFORM ERR_FS_CP_DIR_TO_NON_DIR ERR_FS_CP_EEXIST ERR_FS_CP_EINVAL ERR_HTTP_CONTENT_LENGTH_MISMATCH ERR_FS_CP_FIFO_PIPE ERR_FS_CP_NON_DIR_TO_DIR ERR_FS_CP_SOCKET ERR_FS_CP_SYMLINK_TO_SUBDIRECTORY ERR_FS_CP_UNKNOWN ERR_FS_EISDIR ERR_FS_FILE_TOO_LARGE ERR_FS_INVALID_SYMLINK_TYPE ERR_HTTP_HEADERS_SENT ERR_HTTP_INVALID_HEADER_VALUE ERR_HTTP_INVALID_STATUS_CODE ERR_HTTP_REQUEST_TIMEOUT ERR_HTTP_SOCKET_ENCODING ERR_HTTP_TRAILER_INVALID ERR_HTTP2_ALTSVC_INVALID_ORIGIN ERR_HTTP2_ALTSVC_LENGTH ERR_HTTP2_CONNECT_AUTHORITY ERR_HTTP2_CONNECT_PATH ERR_HTTP2_CONNECT_SCHEME ERR_HTTP2_ERROR ERR_HTTP2_GOAWAY_SESSION ERR_HTTP2_HEADER_SINGLE_VALUE ERR_HTTP2_HEADERS_AFTER_RESPOND ERR_HTTP2_HEADERS_SENT ERR_HTTP2_INFO_STATUS_NOT_ALLOWED ERR_HTTP2_INVALID_CONNECTION_HEADERS ERR_HTTP2_INVALID_HEADER_VALUE ERR_HTTP2_INVALID_INFO_STATUS ERR_HTTP2_INVALID_ORIGIN ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH ERR_HTTP2_INVALID_PSEUDOHEADER ERR_HTTP2_INVALID_SESSION ERR_HTTP2_INVALID_SETTING_VALUE ERR_HTTP2_INVALID_STREAM ERR_HTTP2_MAX_PENDING_SETTINGS_ACK ERR_HTTP2_NESTED_PUSH ERR_HTTP2_NO_MEM ERR_HTTP2_NO_SOCKET_MANIPULATION ERR_HTTP2_ORIGIN_LENGTH ERR_HTTP2_OUT_OF_STREAMS ERR_HTTP2_PAYLOAD_FORBIDDEN ERR_HTTP2_PING_CANCEL ERR_HTTP2_PING_LENGTH ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED ERR_HTTP2_PUSH_DISABLED ERR_HTTP2_SEND_FILE ERR_HTTP2_SEND_FILE_NOSEEK ERR_HTTP2_SESSION_ERROR ERR_HTTP2_SETTINGS_CANCEL ERR_HTTP2_SOCKET_BOUND ERR_HTTP2_SOCKET_UNBOUND ERR_HTTP2_STATUS_101 ERR_HTTP2_STATUS_INVALID ERR_HTTP2_STREAM_CANCEL ERR_HTTP2_STREAM_ERROR ERR_HTTP2_STREAM_SELF_DEPENDENCY ERR_HTTP2_TOO_MANY_INVALID_FRAMES ERR_HTTP2_TRAILERS_ALREADY_SENT ERR_HTTP2_TRAILERS_NOT_READY ERR_HTTP2_UNSUPPORTED_PROTOCOL ERR_ILLEGAL_CONSTRUCTOR ERR_IMPORT_ASSERTION_TYPE_FAILED ERR_IMPORT_ASSERTION_TYPE_MISSING ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED ERR_INCOMPATIBLE_OPTION_PAIR ERR_INPUT_TYPE_NOT_ALLOWED ERR_INSPECTOR_ALREADY_ACTIVATED ERR_INSPECTOR_ALREADY_CONNECTED ERR_INSPECTOR_CLOSED", "doc_id": "2e4b33c6-7bb6-49d3-8f9a-df2e65e6b85e", "embedding": null, "doc_hash": "59998f5014989d82977cf86fe52bc250de7000da3b49a2b7c03a8d6cc97343ec", "extra_info": null, "node_info": {"start": 42979, "end": 45050}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "45b6fac1-8454-4e43-bff9-ffbdddb65724", "3": "230933eb-7b00-4abc-a9d2-b0c178ab0179"}}, "__type__": "1"}, "230933eb-7b00-4abc-a9d2-b0c178ab0179": {"__data__": {"text": "ERR_HTTP2_TOO_MANY_INVALID_FRAMES ERR_HTTP2_TRAILERS_ALREADY_SENT ERR_HTTP2_TRAILERS_NOT_READY ERR_HTTP2_UNSUPPORTED_PROTOCOL ERR_ILLEGAL_CONSTRUCTOR ERR_IMPORT_ASSERTION_TYPE_FAILED ERR_IMPORT_ASSERTION_TYPE_MISSING ERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED ERR_INCOMPATIBLE_OPTION_PAIR ERR_INPUT_TYPE_NOT_ALLOWED ERR_INSPECTOR_ALREADY_ACTIVATED ERR_INSPECTOR_ALREADY_CONNECTED ERR_INSPECTOR_CLOSED ERR_INSPECTOR_COMMAND ERR_INSPECTOR_NOT_ACTIVE ERR_INSPECTOR_NOT_AVAILABLE ERR_INSPECTOR_NOT_CONNECTED ERR_INSPECTOR_NOT_WORKER ERR_INTERNAL_ASSERTION ERR_INVALID_ADDRESS_FAMILY ERR_INVALID_ARG_TYPE ERR_INVALID_ARG_VALUE ERR_INVALID_ASYNC_ID ERR_INVALID_BUFFER_SIZE ERR_INVALID_CHAR ERR_INVALID_CURSOR_POS ERR_INVALID_FD ERR_INVALID_FD_TYPE ERR_INVALID_FILE_URL_HOST ERR_INVALID_FILE_URL_PATH ERR_INVALID_HANDLE_TYPE ERR_INVALID_HTTP_TOKEN ERR_INVALID_IP_ADDRESS ERR_INVALID_MIME_SYNTAX ERR_INVALID_MODULE ERR_INVALID_MODULE_SPECIFIER ERR_INVALID_OBJECT_DEFINE_PROPERTY ERR_INVALID_PACKAGE_CONFIG ERR_INVALID_PACKAGE_TARGET ERR_INVALID_PERFORMANCE_MARK ERR_INVALID_PROTOCOL ERR_INVALID_REPL_EVAL_CONFIG ERR_INVALID_REPL_INPUT ERR_INVALID_RETURN_PROPERTY ERR_INVALID_RETURN_PROPERTY_VALUE ERR_INVALID_RETURN_VALUE ERR_INVALID_STATE ERR_INVALID_SYNC_FORK_INPUT ERR_INVALID_THIS ERR_INVALID_TRANSFER_OBJECT ERR_INVALID_TUPLE ERR_INVALID_URI ERR_INVALID_URL ERR_INVALID_URL_SCHEME ERR_IPC_CHANNEL_CLOSED ERR_IPC_DISCONNECTED ERR_IPC_ONE_PIPE ERR_IPC_SYNC_FORK ERR_LOADER_CHAIN_INCOMPLETE ERR_MANIFEST_ASSERT_INTEGRITY ERR_MANIFEST_DEPENDENCY_MISSING ERR_MANIFEST_INTEGRITY_MISMATCH ERR_MANIFEST_INVALID_RESOURCE_FIELD ERR_MANIFEST_INVALID_SPECIFIER ERR_MANIFEST_PARSE_POLICY ERR_MANIFEST_TDZ ERR_MANIFEST_UNKNOWN_ONERROR ERR_MEMORY_ALLOCATION_FAILED ERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE ERR_METHOD_NOT_IMPLEMENTED ERR_MISSING_ARGS ERR_MISSING_OPTION ERR_MISSING_PASSPHRASE ERR_MISSING_PLATFORM_FOR_WORKER ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST ERR_MODULE_NOT_FOUND ERR_MULTIPLE_CALLBACK ERR_NAPI_CONS_FUNCTION ERR_NAPI_INVALID_DATAVIEW_ARGS ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT", "doc_id": "230933eb-7b00-4abc-a9d2-b0c178ab0179", "embedding": null, "doc_hash": "47b8ac046d98551d897d59f8e287fefb5c2d0102cf7e00bf8bb0fc4475f1850a", "extra_info": null, "node_info": {"start": 45017, "end": 47092}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2e4b33c6-7bb6-49d3-8f9a-df2e65e6b85e", "3": "e4538698-c649-4f79-a7c8-ad01987c4428"}}, "__type__": "1"}, "e4538698-c649-4f79-a7c8-ad01987c4428": {"__data__": {"text": "ERR_MANIFEST_TDZ ERR_MANIFEST_UNKNOWN_ONERROR ERR_MEMORY_ALLOCATION_FAILED ERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE ERR_METHOD_NOT_IMPLEMENTED ERR_MISSING_ARGS ERR_MISSING_OPTION ERR_MISSING_PASSPHRASE ERR_MISSING_PLATFORM_FOR_WORKER ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST ERR_MODULE_NOT_FOUND ERR_MULTIPLE_CALLBACK ERR_NAPI_CONS_FUNCTION ERR_NAPI_INVALID_DATAVIEW_ARGS ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT ERR_NAPI_INVALID_TYPEDARRAY_LENGTH ERR_NAPI_TSFN_CALL_JS ERR_NAPI_TSFN_GET_UNDEFINED ERR_NAPI_TSFN_START_IDLE_LOOP ERR_NAPI_TSFN_STOP_IDLE_LOOP ERR_NOT_BUILDING_SNAPSHOT ERR_NO_CRYPTO ERR_NO_ICU ERR_NON_CONTEXT_AWARE_DISABLED ERR_OUT_OF_RANGE ERR_PACKAGE_IMPORT_NOT_DEFINED ERR_PACKAGE_PATH_NOT_EXPORTED ERR_PARSE_ARGS_INVALID_OPTION_VALUE ERR_PARSE_ARGS_UNEXPECTED_POSITIONAL ERR_PARSE_ARGS_UNKNOWN_OPTION ERR_PERFORMANCE_INVALID_TIMESTAMP ERR_PERFORMANCE_MEASURE_INVALID_OPTIONS ERR_PROTO_ACCESS ERR_REQUIRE_ESM ERR_SCRIPT_EXECUTION_INTERRUPTED ERR_SCRIPT_EXECUTION_TIMEOUT ERR_SERVER_ALREADY_LISTEN ERR_SERVER_NOT_RUNNING ERR_SOCKET_ALREADY_BOUND ERR_SOCKET_BAD_BUFFER_SIZE ERR_SOCKET_BAD_PORT ERR_SOCKET_BAD_TYPE ERR_SOCKET_BUFFER_SIZE ERR_SOCKET_CLOSED ERR_SOCKET_CLOSED_BEFORE_CONNECTION ERR_SOCKET_DGRAM_IS_CONNECTED ERR_SOCKET_DGRAM_NOT_CONNECTED ERR_SOCKET_DGRAM_NOT_RUNNING ERR_SRI_PARSE ERR_STREAM_ALREADY_FINISHED ERR_STREAM_CANNOT_PIPE ERR_STREAM_DESTROYED ERR_STREAM_NULL_VALUES ERR_STREAM_PREMATURE_CLOSE ERR_STREAM_PUSH_AFTER_EOF ERR_STREAM_UNSHIFT_AFTER_END_EVENT ERR_STREAM_WRAP ERR_STREAM_WRITE_AFTER_END ERR_STRING_TOO_LONG ERR_SYNTHETIC ERR_SYSTEM_ERROR ERR_TAP_LEXER_ERROR ERR_TAP_PARSER_ERROR ERR_TAP_VALIDATION_ERROR ERR_TEST_FAILURE ERR_TLS_CERT_ALTNAME_FORMAT ERR_TLS_CERT_ALTNAME_INVALID ERR_TLS_DH_PARAM_SIZE ERR_TLS_HANDSHAKE_TIMEOUT ERR_TLS_INVALID_CONTEXT ERR_TLS_INVALID_PROTOCOL_METHOD ERR_TLS_INVALID_PROTOCOL_VERSION ERR_TLS_INVALID_STATE ERR_TLS_PROTOCOL_VERSION_CONFLICT ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED ERR_TLS_RENEGOTIATION_DISABLED ERR_TLS_REQUIRED_SERVER_NAME ERR_TLS_SESSION_ATTACK", "doc_id": "e4538698-c649-4f79-a7c8-ad01987c4428", "embedding": null, "doc_hash": "205ae5d0b47615abe12fa19c30b2fab53177f7d3e26bcd516ce078fde30bcf9b", "extra_info": null, "node_info": {"start": 47082, "end": 49117}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "230933eb-7b00-4abc-a9d2-b0c178ab0179", "3": "3cb5e388-7424-4b02-ba78-5a5d92173da7"}}, "__type__": "1"}, "3cb5e388-7424-4b02-ba78-5a5d92173da7": {"__data__": {"text": "ERR_TEST_FAILURE ERR_TLS_CERT_ALTNAME_FORMAT ERR_TLS_CERT_ALTNAME_INVALID ERR_TLS_DH_PARAM_SIZE ERR_TLS_HANDSHAKE_TIMEOUT ERR_TLS_INVALID_CONTEXT ERR_TLS_INVALID_PROTOCOL_METHOD ERR_TLS_INVALID_PROTOCOL_VERSION ERR_TLS_INVALID_STATE ERR_TLS_PROTOCOL_VERSION_CONFLICT ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED ERR_TLS_RENEGOTIATION_DISABLED ERR_TLS_REQUIRED_SERVER_NAME ERR_TLS_SESSION_ATTACK ERR_TLS_SNI_FROM_SERVER ERR_TRACE_EVENTS_CATEGORY_REQUIRED ERR_TRACE_EVENTS_UNAVAILABLE ERR_TRANSFORM_ALREADY_TRANSFORMING ERR_TRANSFORM_WITH_LENGTH_0 ERR_TTY_INIT_FAILED ERR_UNAVAILABLE_DURING_EXIT ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET ERR_UNESCAPED_CHARACTERS ERR_UNHANDLED_ERROR ERR_UNKNOWN_BUILTIN_MODULE ERR_UNKNOWN_CREDENTIAL ERR_UNKNOWN_ENCODING ERR_UNKNOWN_FILE_EXTENSION ERR_UNKNOWN_MODULE_FORMAT ERR_UNKNOWN_SIGNAL ERR_UNSUPPORTED_DIR_IMPORT ERR_UNSUPPORTED_ESM_URL_SCHEME ERR_USE_AFTER_CLOSE ERR_VALID_PERFORMANCE_ENTRY_TYPE ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING ERR_VM_MODULE_ALREADY_LINKED ERR_VM_MODULE_CACHED_DATA_REJECTED ERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA ERR_VM_MODULE_DIFFERENT_CONTEXT ERR_VM_MODULE_LINK_FAILURE ERR_VM_MODULE_NOT_MODULE ERR_VM_MODULE_STATUS ERR_WASI_ALREADY_STARTED ERR_WASI_NOT_STARTED ERR_WEBASSEMBLY_RESPONSE ERR_WORKER_INIT_FAILED ERR_WORKER_INVALID_EXEC_ARGV ERR_WORKER_NOT_RUNNING ERR_WORKER_OUT_OF_MEMORY ERR_WORKER_PATH ERR_WORKER_UNSERIALIZABLE_ERROR ERR_WORKER_UNSUPPORTED_OPERATION ERR_ZLIB_INITIALIZATION_FAILED HPE_HEADER_OVERFLOW HPE_UNEXPECTED_CONTENT_LENGTH MODULE_NOT_FOUND Legacy Node.js error", "doc_id": "3cb5e388-7424-4b02-ba78-5a5d92173da7", "embedding": null, "doc_hash": "85ea1b038123b2e7636bdc1e55f77ed09c028cfc8bd028de4db60ad019b5c579", "extra_info": null, "node_info": {"start": 49140, "end": 50685}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e4538698-c649-4f79-a7c8-ad01987c4428", "3": "0816f738-e81f-4bd0-9858-eae370b38f08"}}, "__type__": "1"}, "0816f738-e81f-4bd0-9858-eae370b38f08": {"__data__": {"text": "ERR_VM_MODULE_NOT_MODULE ERR_VM_MODULE_STATUS ERR_WASI_ALREADY_STARTED ERR_WASI_NOT_STARTED ERR_WEBASSEMBLY_RESPONSE ERR_WORKER_INIT_FAILED ERR_WORKER_INVALID_EXEC_ARGV ERR_WORKER_NOT_RUNNING ERR_WORKER_OUT_OF_MEMORY ERR_WORKER_PATH ERR_WORKER_UNSERIALIZABLE_ERROR ERR_WORKER_UNSUPPORTED_OPERATION ERR_ZLIB_INITIALIZATION_FAILED HPE_HEADER_OVERFLOW HPE_UNEXPECTED_CONTENT_LENGTH MODULE_NOT_FOUND Legacy Node.js error codes\nERR_CANNOT_TRANSFER_OBJECT\nERR_CRYPTO_HASH_DIGEST_NO_UTF16\nERR_HTTP2_FRAME_ERROR\nERR_HTTP2_HEADERS_OBJECT\nERR_HTTP2_HEADER_REQUIRED\nERR_HTTP2_INFO_HEADERS_AFTER_RESPOND\nERR_HTTP2_STREAM_CLOSED\nERR_HTTP_INVALID_CHAR\nERR_INDEX_OUT_OF_RANGE\nERR_INVALID_OPT_VALUE\nERR_INVALID_OPT_VALUE_ENCODING\nERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST\nERR_NAPI_CONS_PROTOTYPE_OBJECT\nERR_NETWORK_IMPORT_BAD_RESPONSE\nERR_NETWORK_IMPORT_DISALLOWED\nERR_NO_LONGER_SUPPORTED\nERR_OPERATION_FAILED\nERR_OUTOFMEMORY\nERR_PARSE_HISTORY_DATA\nERR_SOCKET_CANNOT_SEND\nERR_STDERR_CLOSE\nERR_STDOUT_CLOSE\nERR_STREAM_READ_NOT_IMPLEMENTED\nERR_TLS_RENEGOTIATION_FAILED\nERR_TRANSFERRING_EXTERNALIZED_SHAREDARRAYBUFFER\nERR_UNKNOWN_STDIN_TYPE\nERR_UNKNOWN_STREAM_TYPE\nERR_V8BREAKITERATOR\nERR_VALUE_OUT_OF_RANGE\nERR_VM_MODULE_NOT_LINKED\nERR_VM_MODULE_LINKING_ERRORED\nERR_WORKER_UNSUPPORTED_EXTENSION\nERR_ZLIB_BINDING_CLOSED\nERR_CPU_USAGE\nEvents\nPassing arguments and this to listeners\nAsynchronous vs. synchronous\nHandling events only once\nError events\nCapture rejections of promises\nClass: EventEmitter\nEvent: 'newListener'\nEvent: 'removeListener'\nemitter.addListener(eventName, listener)\nemitter.emit(eventName[, ...args])\nemitter.eventNames()\nemitter.getMaxListeners()\nemitter.listenerCount(eventName[, listener])\nemitter.listeners(eventName)\nemitter.off(eventName, listener)\nemitter.on(eventName, listener)\nemitter.once(eventName, listener)\nemitter.prependListener(eventName, listener)\nemitter.prependOnceListener(eventName, listener)\nemitter.removeAllListeners([eventName])\nemitter.removeListener(eventName, listener)\nemitter.setMaxListeners(n)\nemitter.rawListeners(eventName)\nemitter[Symbol.for('nodejs.rejection')](err, eventName[, ...args])\nevents.defaultMaxListeners\nevents.errorMonitor\nevents.getEventListeners(emitterOrTarget, eventName)\nevents.once(emitter, name[, options])\nAwaiting multiple events emitted on process.nextTick()\nevents.captureRejections\nevents.captureRejectionSymbol\nevents.listenerCount(emitter, eventName)\nevents.on(emitter, eventName[,", "doc_id": "0816f738-e81f-4bd0-9858-eae370b38f08", "embedding": null, "doc_hash": "c26e0d573194da261c2cf3802c01951b864c1077a40ae6a0655a16f70ac29ebb", "extra_info": null, "node_info": {"start": 50660, "end": 53105}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3cb5e388-7424-4b02-ba78-5a5d92173da7", "3": "12187749-0103-4bb3-86ed-00fc530ec9a6"}}, "__type__": "1"}, "12187749-0103-4bb3-86ed-00fc530ec9a6": {"__data__": {"text": "listener)\nemitter.prependOnceListener(eventName, listener)\nemitter.removeAllListeners([eventName])\nemitter.removeListener(eventName, listener)\nemitter.setMaxListeners(n)\nemitter.rawListeners(eventName)\nemitter[Symbol.for('nodejs.rejection')](err, eventName[, ...args])\nevents.defaultMaxListeners\nevents.errorMonitor\nevents.getEventListeners(emitterOrTarget, eventName)\nevents.once(emitter, name[, options])\nAwaiting multiple events emitted on process.nextTick()\nevents.captureRejections\nevents.captureRejectionSymbol\nevents.listenerCount(emitter, eventName)\nevents.on(emitter, eventName[, options])\nevents.setMaxListeners(n[, ...eventTargets])\nClass: events.EventEmitterAsyncResource extends EventEmitter\nnew events.EventEmitterAsyncResource([options])\neventemitterasyncresource.asyncId\neventemitterasyncresource.asyncResource\neventemitterasyncresource.emitDestroy()\neventemitterasyncresource.triggerAsyncId\nEventTarget and Event API\nNode.js EventTarget vs. DOM EventTarget\nNodeEventTarget vs. EventEmitter\nEvent listener\nEventTarget error handling\nClass: Event\nevent.bubbles\nevent.cancelBubble\nevent.cancelable\nevent.composed\nevent.composedPath()\nevent.currentTarget\nevent.defaultPrevented\nevent.eventPhase\nevent.isTrusted\nevent.preventDefault()\nevent.returnValue\nevent.srcElement\nevent.stopImmediatePropagation()\nevent.stopPropagation()\nevent.target\nevent.timeStamp\nevent.type\nClass: EventTarget\neventTarget.addEventListener(type, listener[, options])\neventTarget.dispatchEvent(event)\neventTarget.removeEventListener(type, listener[, options])\nClass: CustomEvent\nevent.detail\nClass: NodeEventTarget\nnodeEventTarget.addListener(type, listener)\nnodeEventTarget.emit(type, arg)\nnodeEventTarget.eventNames()\nnodeEventTarget.listenerCount(type)\nnodeEventTarget.setMaxListeners(n)\nnodeEventTarget.getMaxListeners()\nnodeEventTarget.off(type, listener[, options])\nnodeEventTarget.on(type, listener)\nnodeEventTarget.once(type, listener)\nnodeEventTarget.removeAllListeners([type])\nnodeEventTarget.removeListener(type, listener[, options])\nFile system\nPromise example\nCallback example\nSynchronous example\nPromises API\nClass: FileHandle\nEvent: 'close'\nfilehandle.appendFile(data[, options])\nfilehandle.chmod(mode)\nfilehandle.chown(uid, gid)\nfilehandle.close()\nfilehandle.createReadStream([options])\nfilehandle.createWriteStream([options])\nfilehandle.datasync()\nfilehandle.fd\nfilehandle.read(buffer, offset, length, position)\nfilehandle.read([options])\nfilehandle.read(buffer[, options])\nfilehandle.readableWebStream()\nfilehandle.readFile(options)\nfilehandle.readLines([options])\nfilehandle.readv(buffers[, position])\nfilehandle.stat([options])\nfilehandle.sync()\nfilehandle.truncate(len)\nfilehandle.utimes(atime, mtime)\nfilehandle.write(buffer, offset[, length[, position]])\nfilehandle.write(buffer[, options])\nfilehandle.write(string[, position[, encoding]])\nfilehandle.writeFile(data, options)\nfilehandle.writev(buffers[, position])\nfsPromises.access(path[, mode])\nfsPromises.appendFile(path, data[, options])\nfsPromises.chmod(path, mode)\nfsPromises.chown(path, uid, gid)\nfsPromises.copyFile(src, dest[, mode])\nfsPromises.cp(src, dest[, options])\nfsPromises.lchmod(path, mode)\nfsPromises.lchown(path, uid, gid)\nfsPromises.lutimes(path, atime,", "doc_id": "12187749-0103-4bb3-86ed-00fc530ec9a6", "embedding": null, "doc_hash": "5a4aefac9bfe2b6523d74ac89ec8270ac972551c981fe914c96f140fe52997cd", "extra_info": null, "node_info": {"start": 52930, "end": 56163}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0816f738-e81f-4bd0-9858-eae370b38f08", "3": "9a46db64-0a77-483b-885d-7d1a344702d2"}}, "__type__": "1"}, "9a46db64-0a77-483b-885d-7d1a344702d2": {"__data__": {"text": "mtime)\nfilehandle.write(buffer, offset[, length[, position]])\nfilehandle.write(buffer[, options])\nfilehandle.write(string[, position[, encoding]])\nfilehandle.writeFile(data, options)\nfilehandle.writev(buffers[, position])\nfsPromises.access(path[, mode])\nfsPromises.appendFile(path, data[, options])\nfsPromises.chmod(path, mode)\nfsPromises.chown(path, uid, gid)\nfsPromises.copyFile(src, dest[, mode])\nfsPromises.cp(src, dest[, options])\nfsPromises.lchmod(path, mode)\nfsPromises.lchown(path, uid, gid)\nfsPromises.lutimes(path, atime, mtime)\nfsPromises.link(existingPath, newPath)\nfsPromises.lstat(path[, options])\nfsPromises.mkdir(path[, options])\nfsPromises.mkdtemp(prefix[, options])\nfsPromises.open(path, flags[, mode])\nfsPromises.opendir(path[, options])\nfsPromises.readdir(path[, options])\nfsPromises.readFile(path[, options])\nfsPromises.readlink(path[, options])\nfsPromises.realpath(path[, options])\nfsPromises.rename(oldPath, newPath)\nfsPromises.rmdir(path[, options])\nfsPromises.rm(path[, options])\nfsPromises.stat(path[, options])\nfsPromises.statfs(path[, options])\nfsPromises.symlink(target, path[, type])\nfsPromises.truncate(path[, len])\nfsPromises.unlink(path)\nfsPromises.utimes(path, atime, mtime)\nfsPromises.watch(filename[, options])\nfsPromises.writeFile(file, data[, options])\nfsPromises.constants\nCallback API\nfs.access(path[, mode], callback)\nfs.appendFile(path, data[, options], callback)\nfs.chmod(path, mode, callback)\nFile modes\nfs.chown(path, uid, gid, callback)\nfs.close(fd[, callback])\nfs.copyFile(src, dest[, mode], callback)\nfs.cp(src, dest[, options], callback)\nfs.createReadStream(path[, options])\nfs.createWriteStream(path[, options])\nfs.exists(path, callback)\nfs.fchmod(fd, mode, callback)\nfs.fchown(fd, uid, gid, callback)\nfs.fdatasync(fd, callback)\nfs.fstat(fd[, options], callback)\nfs.fsync(fd, callback)\nfs.ftruncate(fd[, len], callback)\nfs.futimes(fd, atime, mtime, callback)\nfs.lchmod(path, mode, callback)\nfs.lchown(path, uid, gid, callback)\nfs.lutimes(path, atime, mtime, callback)\nfs.link(existingPath, newPath, callback)\nfs.lstat(path[, options], callback)\nfs.mkdir(path[, options], callback)\nfs.mkdtemp(prefix[, options], callback)\nfs.open(path[, flags[, mode]], callback)\nfs.opendir(path[, options], callback)\nfs.read(fd, buffer, offset, length, position, callback)\nfs.read(fd[, options], callback)\nfs.read(fd, buffer[, options], callback)\nfs.readdir(path[, options], callback)\nfs.readFile(path[, options], callback)\nFile descriptors\nPerformance Considerations\nfs.readlink(path[, options], callback)\nfs.readv(fd, buffers[, position], callback)\nfs.realpath(path[, options], callback)\nfs.realpath.native(path[, options], callback)\nfs.rename(oldPath, newPath, callback)\nfs.rmdir(path[, options], callback)\nfs.rm(path[, options],", "doc_id": "9a46db64-0a77-483b-885d-7d1a344702d2", "embedding": null, "doc_hash": "3802d068b0b65e506f76392ab7dc44e89c3b6caca15bd30405f832ced0e66b75", "extra_info": null, "node_info": {"start": 56229, "end": 58994}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "12187749-0103-4bb3-86ed-00fc530ec9a6", "3": "607b1318-cea0-45d0-8d1e-562f3058545f"}}, "__type__": "1"}, "607b1318-cea0-45d0-8d1e-562f3058545f": {"__data__": {"text": "flags[, mode]], callback)\nfs.opendir(path[, options], callback)\nfs.read(fd, buffer, offset, length, position, callback)\nfs.read(fd[, options], callback)\nfs.read(fd, buffer[, options], callback)\nfs.readdir(path[, options], callback)\nfs.readFile(path[, options], callback)\nFile descriptors\nPerformance Considerations\nfs.readlink(path[, options], callback)\nfs.readv(fd, buffers[, position], callback)\nfs.realpath(path[, options], callback)\nfs.realpath.native(path[, options], callback)\nfs.rename(oldPath, newPath, callback)\nfs.rmdir(path[, options], callback)\nfs.rm(path[, options], callback)\nfs.stat(path[, options], callback)\nfs.statfs(path[, options], callback)\nfs.symlink(target, path[, type], callback)\nfs.truncate(path[, len], callback)\nfs.unlink(path, callback)\nfs.unwatchFile(filename[, listener])\nfs.utimes(path, atime, mtime, callback)\nfs.watch(filename[, options][, listener])\nCaveats\nAvailability\nInodes\nFilename argument\nfs.watchFile(filename[, options], listener)\nfs.write(fd, buffer, offset[, length[, position]], callback)\nfs.write(fd, buffer[, options], callback)\nfs.write(fd, string[, position[, encoding]], callback)\nfs.writeFile(file, data[, options], callback)\nUsing fs.writeFile() with file descriptors\nfs.writev(fd, buffers[, position], callback)\nSynchronous API\nfs.accessSync(path[, mode])\nfs.appendFileSync(path, data[, options])\nfs.chmodSync(path, mode)\nfs.chownSync(path, uid, gid)\nfs.closeSync(fd)\nfs.copyFileSync(src, dest[, mode])\nfs.cpSync(src, dest[, options])\nfs.existsSync(path)\nfs.fchmodSync(fd, mode)\nfs.fchownSync(fd, uid, gid)\nfs.fdatasyncSync(fd)\nfs.fstatSync(fd[, options])\nfs.fsyncSync(fd)\nfs.ftruncateSync(fd[, len])\nfs.futimesSync(fd, atime, mtime)\nfs.lchmodSync(path, mode)\nfs.lchownSync(path, uid, gid)\nfs.lutimesSync(path, atime, mtime)\nfs.linkSync(existingPath, newPath)\nfs.lstatSync(path[, options])\nfs.mkdirSync(path[, options])\nfs.mkdtempSync(prefix[, options])\nfs.opendirSync(path[, options])\nfs.openSync(path[, flags[, mode]])\nfs.readdirSync(path[, options])\nfs.readFileSync(path[, options])\nfs.readlinkSync(path[, options])\nfs.readSync(fd, buffer, offset, length[, position])\nfs.readSync(fd, buffer[, options])\nfs.readvSync(fd, buffers[, position])\nfs.realpathSync(path[, options])\nfs.realpathSync.native(path[, options])\nfs.renameSync(oldPath, newPath)\nfs.rmdirSync(path[, options])\nfs.rmSync(path[, options])\nfs.statSync(path[, options])\nfs.statfsSync(path[, options])\nfs.symlinkSync(target, path[, type])\nfs.truncateSync(path[, len])\nfs.unlinkSync(path)\nfs.utimesSync(path, atime, mtime)\nfs.writeFileSync(file, data[, options])\nfs.writeSync(fd, buffer, offset[, length[, position]])\nfs.writeSync(fd, buffer[, options])\nfs.writeSync(fd, string[, position[,", "doc_id": "607b1318-cea0-45d0-8d1e-562f3058545f", "embedding": null, "doc_hash": "e6e3016bc4254a2b0c1b2cd78d0da520b81ebebd080420be04e8ddef85a17d21", "extra_info": null, "node_info": {"start": 58959, "end": 61667}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9a46db64-0a77-483b-885d-7d1a344702d2", "3": "9d6818a9-92cb-4f90-a385-c71b64cbb4b5"}}, "__type__": "1"}, "9d6818a9-92cb-4f90-a385-c71b64cbb4b5": {"__data__": {"text": "position])\nfs.realpathSync(path[, options])\nfs.realpathSync.native(path[, options])\nfs.renameSync(oldPath, newPath)\nfs.rmdirSync(path[, options])\nfs.rmSync(path[, options])\nfs.statSync(path[, options])\nfs.statfsSync(path[, options])\nfs.symlinkSync(target, path[, type])\nfs.truncateSync(path[, len])\nfs.unlinkSync(path)\nfs.utimesSync(path, atime, mtime)\nfs.writeFileSync(file, data[, options])\nfs.writeSync(fd, buffer, offset[, length[, position]])\nfs.writeSync(fd, buffer[, options])\nfs.writeSync(fd, string[, position[, encoding]])\nfs.writevSync(fd, buffers[, position])\nCommon Objects\nClass: fs.Dir\ndir.close()\ndir.close(callback)\ndir.closeSync()\ndir.path\ndir.read()\ndir.read(callback)\ndir.readSync()\ndir[Symbol.asyncIterator]()\nClass: fs.Dirent\ndirent.isBlockDevice()\ndirent.isCharacterDevice()\ndirent.isDirectory()\ndirent.isFIFO()\ndirent.isFile()\ndirent.isSocket()\ndirent.isSymbolicLink()\ndirent.name\nClass: fs.FSWatcher\nEvent: 'change'\nEvent: 'close'\nEvent: 'error'\nwatcher.close()\nwatcher.ref()\nwatcher.unref()\nClass: fs.StatWatcher\nwatcher.ref()\nwatcher.unref()\nClass: fs.ReadStream\nEvent: 'close'\nEvent: 'open'\nEvent: 'ready'\nreadStream.bytesRead\nreadStream.path\nreadStream.pending\nClass: fs.Stats\nstats.isBlockDevice()\nstats.isCharacterDevice()\nstats.isDirectory()\nstats.isFIFO()\nstats.isFile()\nstats.isSocket()\nstats.isSymbolicLink()\nstats.dev\nstats.ino\nstats.mode\nstats.nlink\nstats.uid\nstats.gid\nstats.rdev\nstats.size\nstats.blksize\nstats.blocks\nstats.atimeMs\nstats.mtimeMs\nstats.ctimeMs\nstats.birthtimeMs\nstats.atimeNs\nstats.mtimeNs\nstats.ctimeNs\nstats.birthtimeNs\nstats.atime\nstats.mtime\nstats.ctime\nstats.birthtime\nStat time values\nClass: fs.StatFs\nstatfs.bavail\nstatfs.bfree\nstatfs.blocks\nstatfs.bsize\nstatfs.ffree\nstatfs.files\nstatfs.type\nClass: fs.WriteStream\nEvent: 'close'\nEvent: 'open'\nEvent: 'ready'\nwriteStream.bytesWritten\nwriteStream.close([callback])\nwriteStream.path\nwriteStream.pending\nfs.constants\nFS constants\nFile access constants\nFile copy constants\nFile open constants\nFile type constants\nFile mode constants\nNotes\nOrdering of callback and promise-based operations\nFile paths\nString paths\nFile URL paths\nPlatform-specific considerations\nBuffer paths\nPer-drive working directories on Windows\nFile descriptors\nThreadpool usage\nFile system flags\nGlobal objects\nClass: AbortController\nabortController.abort([reason])\nabortController.signal\nClass: AbortSignal\nStatic method: AbortSignal.abort([reason])\nStatic method: AbortSignal.timeout(delay)\nEvent: 'abort'\nabortSignal.aborted\nabortSignal.onabort\nabortSignal.reason\nabortSignal.throwIfAborted()\nClass: Blob\nClass: Buffer\nClass: ByteLengthQueuingStrategy\n__dirname\n__filename\natob(data)\nBroadcastChannel\nbtoa(data)\nclearImmediate(immediateObject)\nclearInterval(intervalObject)\nclearTimeout(timeoutObject)\nClass: CompressionStream\nconsole\nClass:", "doc_id": "9d6818a9-92cb-4f90-a385-c71b64cbb4b5", "embedding": null, "doc_hash": "0fcc77f06c7e2403a10cccd109c6019c4aa875c1431789183380587883336c66", "extra_info": null, "node_info": {"start": 61715, "end": 64537}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "607b1318-cea0-45d0-8d1e-562f3058545f", "3": "dcfbeb29-196c-4115-8039-2cbf4a22162b"}}, "__type__": "1"}, "dcfbeb29-196c-4115-8039-2cbf4a22162b": {"__data__": {"text": "working directories on Windows\nFile descriptors\nThreadpool usage\nFile system flags\nGlobal objects\nClass: AbortController\nabortController.abort([reason])\nabortController.signal\nClass: AbortSignal\nStatic method: AbortSignal.abort([reason])\nStatic method: AbortSignal.timeout(delay)\nEvent: 'abort'\nabortSignal.aborted\nabortSignal.onabort\nabortSignal.reason\nabortSignal.throwIfAborted()\nClass: Blob\nClass: Buffer\nClass: ByteLengthQueuingStrategy\n__dirname\n__filename\natob(data)\nBroadcastChannel\nbtoa(data)\nclearImmediate(immediateObject)\nclearInterval(intervalObject)\nclearTimeout(timeoutObject)\nClass: CompressionStream\nconsole\nClass: CountQueuingStrategy\nCrypto\ncrypto\nCryptoKey\nCustomEvent\nClass: DecompressionStream\nEvent\nEventTarget\nexports\nfetch\nClass FormData\nglobal\nClass Headers\nMessageChannel\nMessageEvent\nMessagePort\nmodule\nperformance\nprocess\nqueueMicrotask(callback)\nClass: ReadableByteStreamController\nClass: ReadableStream\nClass: ReadableStreamBYOBReader\nClass: ReadableStreamBYOBRequest\nClass: ReadableStreamDefaultController\nClass: ReadableStreamDefaultReader\nrequire()\nResponse\nRequest\nsetImmediate(callback[, ...args])\nsetInterval(callback, delay[, ...args])\nsetTimeout(callback, delay[, ...args])\nstructuredClone(value[, options])\nSubtleCrypto\nDOMException\nTextDecoder\nClass: TextDecoderStream\nTextEncoder\nClass: TextEncoderStream\nClass: TransformStream\nClass: TransformStreamDefaultController\nURL\nURLSearchParams\nWebAssembly\nClass: WritableStream\nClass: WritableStreamDefaultController\nClass: WritableStreamDefaultWriter\nHTTP\nClass: http.Agent\nnew Agent([options])\nagent.createConnection(options[, callback])\nagent.keepSocketAlive(socket)\nagent.reuseSocket(socket, request)\nagent.destroy()\nagent.freeSockets\nagent.getName([options])\nagent.maxFreeSockets\nagent.maxSockets\nagent.maxTotalSockets\nagent.requests\nagent.sockets\nClass: http.ClientRequest\nEvent: 'abort'\nEvent: 'close'\nEvent: 'connect'\nEvent: 'continue'\nEvent: 'finish'\nEvent: 'information'\nEvent: 'response'\nEvent: 'socket'\nEvent: 'timeout'\nEvent: 'upgrade'\nrequest.abort()\nrequest.aborted\nrequest.connection\nrequest.cork()\nrequest.end([data[, encoding]][, callback])\nrequest.destroy([error])\nrequest.destroyed\nrequest.finished\nrequest.flushHeaders()\nrequest.getHeader(name)\nrequest.getHeaderNames()\nrequest.getHeaders()\nrequest.getRawHeaderNames()\nrequest.hasHeader(name)\nrequest.maxHeadersCount\nrequest.path\nrequest.method\nrequest.host\nrequest.protocol\nrequest.removeHeader(name)\nrequest.reusedSocket\nrequest.setHeader(name, value)\nrequest.setNoDelay([noDelay])\nrequest.setSocketKeepAlive([enable][, initialDelay])\nrequest.setTimeout(timeout[, callback])\nrequest.socket\nrequest.uncork()\nrequest.writableEnded\nrequest.writableFinished\nrequest.write(chunk[, encoding][, callback])\nClass: http.Server\nEvent: 'checkContinue'\nEvent: 'checkExpectation'\nEvent: 'clientError'\nEvent: 'close'\nEvent: 'connect'\nEvent: 'connection'\nEvent: 'dropRequest'\nEvent: 'request'\nEvent: 'upgrade'\nserver.close([callback])\nserver.closeAllConnections()\nserver.closeIdleConnections()\nserver.headersTimeout\nserver.listen()\nserver.listening\nserver.maxHeadersCount\nserver.requestTimeout\nserver.setTimeout([msecs][, callback])\nserver.maxRequestsPerSocket\nserver.timeout\nserver.keepAliveTimeout\nClass: http.ServerResponse\nEvent: 'close'\nEvent:", "doc_id": "dcfbeb29-196c-4115-8039-2cbf4a22162b", "embedding": null, "doc_hash": "1399c555b8fad65bfd406b4c67318186a127188b22a21d2bf207a74627280579", "extra_info": null, "node_info": {"start": 64424, "end": 67716}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9d6818a9-92cb-4f90-a385-c71b64cbb4b5", "3": "5aa46f12-265f-4815-a6ad-7c0696ebade4"}}, "__type__": "1"}, "5aa46f12-265f-4815-a6ad-7c0696ebade4": {"__data__": {"text": "encoding][, callback])\nClass: http.Server\nEvent: 'checkContinue'\nEvent: 'checkExpectation'\nEvent: 'clientError'\nEvent: 'close'\nEvent: 'connect'\nEvent: 'connection'\nEvent: 'dropRequest'\nEvent: 'request'\nEvent: 'upgrade'\nserver.close([callback])\nserver.closeAllConnections()\nserver.closeIdleConnections()\nserver.headersTimeout\nserver.listen()\nserver.listening\nserver.maxHeadersCount\nserver.requestTimeout\nserver.setTimeout([msecs][, callback])\nserver.maxRequestsPerSocket\nserver.timeout\nserver.keepAliveTimeout\nClass: http.ServerResponse\nEvent: 'close'\nEvent: 'finish'\nresponse.addTrailers(headers)\nresponse.connection\nresponse.cork()\nresponse.end([data[, encoding]][, callback])\nresponse.finished\nresponse.flushHeaders()\nresponse.getHeader(name)\nresponse.getHeaderNames()\nresponse.getHeaders()\nresponse.hasHeader(name)\nresponse.headersSent\nresponse.removeHeader(name)\nresponse.req\nresponse.sendDate\nresponse.setHeader(name, value)\nresponse.setTimeout(msecs[, callback])\nresponse.socket\nresponse.statusCode\nresponse.statusMessage\nresponse.strictContentLength\nresponse.uncork()\nresponse.writableEnded\nresponse.writableFinished\nresponse.write(chunk[, encoding][, callback])\nresponse.writeContinue()\nresponse.writeEarlyHints(hints[, callback])\nresponse.writeHead(statusCode[, statusMessage][, headers])\nresponse.writeProcessing()\nClass: http.IncomingMessage\nEvent: 'aborted'\nEvent: 'close'\nmessage.aborted\nmessage.complete\nmessage.connection\nmessage.destroy([error])\nmessage.headers\nmessage.headersDistinct\nmessage.httpVersion\nmessage.method\nmessage.rawHeaders\nmessage.rawTrailers\nmessage.setTimeout(msecs[, callback])\nmessage.socket\nmessage.statusCode\nmessage.statusMessage\nmessage.trailers\nmessage.trailersDistinct\nmessage.url\nClass: http.OutgoingMessage\nEvent: 'drain'\nEvent: 'finish'\nEvent: 'prefinish'\noutgoingMessage.addTrailers(headers)\noutgoingMessage.appendHeader(name, value)\noutgoingMessage.connection\noutgoingMessage.cork()\noutgoingMessage.destroy([error])\noutgoingMessage.end(chunk[, encoding][, callback])\noutgoingMessage.flushHeaders()\noutgoingMessage.getHeader(name)\noutgoingMessage.getHeaderNames()\noutgoingMessage.getHeaders()\noutgoingMessage.hasHeader(name)\noutgoingMessage.headersSent\noutgoingMessage.pipe()\noutgoingMessage.removeHeader(name)\noutgoingMessage.setHeader(name, value)\noutgoingMessage.setHeaders(headers)\noutgoingMessage.setTimeout(msesc[, callback])\noutgoingMessage.socket\noutgoingMessage.uncork()\noutgoingMessage.writableCorked\noutgoingMessage.writableEnded\noutgoingMessage.writableFinished\noutgoingMessage.writableHighWaterMark\noutgoingMessage.writableLength\noutgoingMessage.writableObjectMode\noutgoingMessage.write(chunk[, encoding][, callback])\nhttp.METHODS\nhttp.STATUS_CODES\nhttp.createServer([options][, requestListener])\nhttp.get(options[, callback])\nhttp.get(url[, options][, callback])\nhttp.globalAgent\nhttp.maxHeaderSize\nhttp.request(options[, callback])\nhttp.request(url[, options][, callback])\nhttp.validateHeaderName(name[, label])\nhttp.validateHeaderValue(name, value)\nhttp.setMaxIdleHTTPParsers(max)\nHTTP/2\nDetermining if crypto support is unavailable\nCore API\nServer-side example\nClient-side example\nClass: Http2Session\nHttp2Session and sockets\nEvent: 'close'\nEvent: 'connect'\nEvent: 'error'\nEvent: 'frameError'\nEvent: 'goaway'\nEvent: 'localSettings'\nEvent: 'ping'\nEvent: 'remoteSettings'\nEvent: 'stream'\nEvent:", "doc_id": "5aa46f12-265f-4815-a6ad-7c0696ebade4", "embedding": null, "doc_hash": "f532d012f0ec292050b9492fa6231e77c162cfc4ecaeb4b4631e33c321cd6610", "extra_info": null, "node_info": {"start": 67786, "end": 71142}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dcfbeb29-196c-4115-8039-2cbf4a22162b", "3": "3c0137c7-5723-4029-9c43-38b56e8cb1c1"}}, "__type__": "1"}, "3c0137c7-5723-4029-9c43-38b56e8cb1c1": {"__data__": {"text": "callback])\nhttp.get(url[, options][, callback])\nhttp.globalAgent\nhttp.maxHeaderSize\nhttp.request(options[, callback])\nhttp.request(url[, options][, callback])\nhttp.validateHeaderName(name[, label])\nhttp.validateHeaderValue(name, value)\nhttp.setMaxIdleHTTPParsers(max)\nHTTP/2\nDetermining if crypto support is unavailable\nCore API\nServer-side example\nClient-side example\nClass: Http2Session\nHttp2Session and sockets\nEvent: 'close'\nEvent: 'connect'\nEvent: 'error'\nEvent: 'frameError'\nEvent: 'goaway'\nEvent: 'localSettings'\nEvent: 'ping'\nEvent: 'remoteSettings'\nEvent: 'stream'\nEvent: 'timeout'\nhttp2session.alpnProtocol\nhttp2session.close([callback])\nhttp2session.closed\nhttp2session.connecting\nhttp2session.destroy([error][, code])\nhttp2session.destroyed\nhttp2session.encrypted\nhttp2session.goaway([code[, lastStreamID[, opaqueData]]])\nhttp2session.localSettings\nhttp2session.originSet\nhttp2session.pendingSettingsAck\nhttp2session.ping([payload, ]callback)\nhttp2session.ref()\nhttp2session.remoteSettings\nhttp2session.setLocalWindowSize(windowSize)\nhttp2session.setTimeout(msecs, callback)\nhttp2session.socket\nhttp2session.state\nhttp2session.settings([settings][, callback])\nhttp2session.type\nhttp2session.unref()\nClass: ServerHttp2Session\nserverhttp2session.altsvc(alt, originOrStream)\nSpecifying alternative services\nserverhttp2session.origin(...origins)\nClass: ClientHttp2Session\nEvent: 'altsvc'\nEvent: 'origin'\nclienthttp2session.request(headers[, options])\nClass: Http2Stream\nHttp2Stream Lifecycle\nCreation\nDestruction\nEvent: 'aborted'\nEvent: 'close'\nEvent: 'error'\nEvent: 'frameError'\nEvent: 'ready'\nEvent: 'timeout'\nEvent: 'trailers'\nEvent: 'wantTrailers'\nhttp2stream.aborted\nhttp2stream.bufferSize\nhttp2stream.close(code[, callback])\nhttp2stream.closed\nhttp2stream.destroyed\nhttp2stream.endAfterHeaders\nhttp2stream.id\nhttp2stream.pending\nhttp2stream.priority(options)\nhttp2stream.rstCode\nhttp2stream.sentHeaders\nhttp2stream.sentInfoHeaders\nhttp2stream.sentTrailers\nhttp2stream.session\nhttp2stream.setTimeout(msecs, callback)\nhttp2stream.state\nhttp2stream.sendTrailers(headers)\nClass: ClientHttp2Stream\nEvent: 'continue'\nEvent: 'headers'\nEvent: 'push'\nEvent: 'response'\nClass: ServerHttp2Stream\nhttp2stream.additionalHeaders(headers)\nhttp2stream.headersSent\nhttp2stream.pushAllowed\nhttp2stream.pushStream(headers[, options], callback)\nhttp2stream.respond([headers[, options]])\nhttp2stream.respondWithFD(fd[, headers[, options]])\nhttp2stream.respondWithFile(path[, headers[, options]])\nClass: Http2Server\nEvent: 'checkContinue'\nEvent: 'connection'\nEvent: 'request'\nEvent: 'session'\nEvent: 'sessionError'\nEvent: 'stream'\nEvent: 'timeout'\nserver.close([callback])\nserver.setTimeout([msecs][, callback])\nserver.timeout\nserver.updateSettings([settings])\nClass: Http2SecureServer\nEvent: 'checkContinue'\nEvent: 'connection'\nEvent: 'request'\nEvent: 'session'\nEvent: 'sessionError'\nEvent: 'stream'\nEvent: 'timeout'\nEvent: 'unknownProtocol'\nserver.close([callback])\nserver.setTimeout([msecs][, callback])\nserver.timeout\nserver.updateSettings([settings])\nhttp2.createServer([options][, onRequestHandler])\nhttp2.createSecureServer(options[, onRequestHandler])\nhttp2.connect(authority[,", "doc_id": "3c0137c7-5723-4029-9c43-38b56e8cb1c1", "embedding": null, "doc_hash": "53c6185359b754a9cad36593261811cd2af6611577d01547a5e94a34bd5fef27", "extra_info": null, "node_info": {"start": 71133, "end": 74310}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5aa46f12-265f-4815-a6ad-7c0696ebade4", "3": "742b05c1-4f44-4b88-95c2-7911491a7f72"}}, "__type__": "1"}, "742b05c1-4f44-4b88-95c2-7911491a7f72": {"__data__": {"text": "'connection'\nEvent: 'request'\nEvent: 'session'\nEvent: 'sessionError'\nEvent: 'stream'\nEvent: 'timeout'\nserver.close([callback])\nserver.setTimeout([msecs][, callback])\nserver.timeout\nserver.updateSettings([settings])\nClass: Http2SecureServer\nEvent: 'checkContinue'\nEvent: 'connection'\nEvent: 'request'\nEvent: 'session'\nEvent: 'sessionError'\nEvent: 'stream'\nEvent: 'timeout'\nEvent: 'unknownProtocol'\nserver.close([callback])\nserver.setTimeout([msecs][, callback])\nserver.timeout\nserver.updateSettings([settings])\nhttp2.createServer([options][, onRequestHandler])\nhttp2.createSecureServer(options[, onRequestHandler])\nhttp2.connect(authority[, options][, listener])\nhttp2.constants\nError codes for RST_STREAM and GOAWAY\nhttp2.getDefaultSettings()\nhttp2.getPackedSettings([settings])\nhttp2.getUnpackedSettings(buf)\nhttp2.sensitiveHeaders\nHeaders object\nSensitive headers\nSettings object\nError handling\nInvalid character handling in header names and values\nPush streams on the client\nSupporting the CONNECT method\nThe extended CONNECT protocol\nCompatibility API\nALPN negotiation\nClass: http2.Http2ServerRequest\nEvent: 'aborted'\nEvent: 'close'\nrequest.aborted\nrequest.authority\nrequest.complete\nrequest.connection\nrequest.destroy([error])\nrequest.headers\nrequest.httpVersion\nrequest.method\nrequest.rawHeaders\nrequest.rawTrailers\nrequest.scheme\nrequest.setTimeout(msecs, callback)\nrequest.socket\nrequest.stream\nrequest.trailers\nrequest.url\nClass: http2.Http2ServerResponse\nEvent: 'close'\nEvent: 'finish'\nresponse.addTrailers(headers)\nresponse.connection\nresponse.createPushResponse(headers, callback)\nresponse.end([data[, encoding]][, callback])\nresponse.finished\nresponse.getHeader(name)\nresponse.getHeaderNames()\nresponse.getHeaders()\nresponse.hasHeader(name)\nresponse.headersSent\nresponse.removeHeader(name)\nresponse.req\nresponse.sendDate\nresponse.setHeader(name, value)\nresponse.setTimeout(msecs[, callback])\nresponse.socket\nresponse.statusCode\nresponse.statusMessage\nresponse.stream\nresponse.writableEnded\nresponse.write(chunk[, encoding][, callback])\nresponse.writeContinue()\nresponse.writeEarlyHints(hints)\nresponse.writeHead(statusCode[, statusMessage][, headers])\nCollecting HTTP/2 performance metrics\nNote on :authority and host\nHTTPS\nDetermining if crypto support is unavailable\nClass: https.Agent\nnew Agent([options])\nEvent: 'keylog'\nClass: https.Server\nserver.close([callback])\nserver.closeAllConnections()\nserver.closeIdleConnections()\nserver.headersTimeout\nserver.listen()\nserver.maxHeadersCount\nserver.requestTimeout\nserver.setTimeout([msecs][, callback])\nserver.timeout\nserver.keepAliveTimeout\nhttps.createServer([options][, requestListener])\nhttps.get(options[, callback])\nhttps.get(url[, options][, callback])\nhttps.globalAgent\nhttps.request(options[, callback])\nhttps.request(url[, options][, callback])\nInspector\ninspector.close()\ninspector.console\ninspector.open([port[, host[, wait]]])\ninspector.url()\ninspector.waitForDebugger()\nClass: inspector.Session\nnew inspector.Session()\nEvent: 'inspectorNotification'\nEvent: <inspector-protocol-method>;\nsession.connect()\nsession.connectToMainThread()\nsession.disconnect()\nsession.post(method[, params][, callback])\nExample usage\nCPU profiler\nHeap profiler\nInternationalization support\nOptions for building Node.js\nDisable all internationalization features (none)\nBuild with a pre-installed ICU (system-icu)\nEmbed a limited set of ICU data (small-icu)\nProviding ICU data at", "doc_id": "742b05c1-4f44-4b88-95c2-7911491a7f72", "embedding": null, "doc_hash": "4487c81cd4163710a52f3e032b07aa6af7356f2d50f9e96d4576faa2f597a924", "extra_info": null, "node_info": {"start": 74243, "end": 77673}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3c0137c7-5723-4029-9c43-38b56e8cb1c1", "3": "c12967ae-fd69-41d2-b3e6-0b7db209b2fa"}}, "__type__": "1"}, "c12967ae-fd69-41d2-b3e6-0b7db209b2fa": {"__data__": {"text": "options][, callback])\nInspector\ninspector.close()\ninspector.console\ninspector.open([port[, host[, wait]]])\ninspector.url()\ninspector.waitForDebugger()\nClass: inspector.Session\nnew inspector.Session()\nEvent: 'inspectorNotification'\nEvent: <inspector-protocol-method>;\nsession.connect()\nsession.connectToMainThread()\nsession.disconnect()\nsession.post(method[, params][, callback])\nExample usage\nCPU profiler\nHeap profiler\nInternationalization support\nOptions for building Node.js\nDisable all internationalization features (none)\nBuild with a pre-installed ICU (system-icu)\nEmbed a limited set of ICU data (small-icu)\nProviding ICU data at runtime\nEmbed the entire ICU (full-icu)\nDetecting internationalization support\nModules: CommonJS modules\nEnabling\nAccessing the main module\nPackage manager tips\nThe .mjs extension\nAll together\nCaching\nModule caching caveats\nCore modules\nCycles\nFile modules\nFolders as modules\nLoading from node_modules folders\nLoading from the global folders\nThe module wrapper\nThe module scope\n__dirname\n__filename\nexports\nmodule\nrequire(id)\nrequire.cache\nrequire.extensions\nrequire.main\nrequire.resolve(request[, options])\nrequire.resolve.paths(request)\nThe module object\nmodule.children\nmodule.exports\nexports shortcut\nmodule.filename\nmodule.id\nmodule.isPreloading\nmodule.loaded\nmodule.parent\nmodule.path\nmodule.paths\nmodule.require(id)\nThe Module object\nSource map v3 support\nModules: ECMAScript modules\nIntroduction\nEnabling\nPackages\nimport Specifiers\nTerminology\nMandatory file extensions\nURLs\nfile: URLs\ndata: imports\nnode: imports\nImport assertions\nBuiltin modules\nimport() expressions\nimport.meta\nimport.meta.url\nimport.meta.resolve(specifier[, parent])\nInteroperability with CommonJS\nimport statements\nrequire\nCommonJS Namespaces\nDifferences between ES modules and CommonJS\nNo require, exports, or module.exports\nNo __filename or __dirname\nNo Addon Loading\nNo require.resolve\nNo NODE_PATH\nNo require.extensions\nNo require.cache\nJSON modules\nWasm modules\nTop-level await\nHTTPS and HTTP imports\nImports are limited to HTTP/1\nHTTP is limited to loopback addresses\nAuthentication is never sent to the destination server.\nCORS is never checked on the destination server\nCannot load non-network dependencies\nNetwork-based loading is not enabled by default\nLoaders\nHooks\nresolve(specifier, context, nextResolve)\nload(url, context, nextLoad)\nglobalPreload()\nExamples\nHTTPS loader\nTranspiler loader\nResolution algorithm\nFeatures\nResolver algorithm\nResolver Algorithm Specification\nCustomizing ESM specifier resolution algorithm\nModules: node:module API\nThe Module object\nmodule.builtinModules\nmodule.createRequire(filename)\nmodule.isBuiltin(moduleName)\nmodule.syncBuiltinESMExports()\nSource map v3 support\nmodule.findSourceMap(path)\nClass: module.SourceMap\nnew SourceMap(payload)\nsourceMap.payload\nsourceMap.findEntry(lineNumber, columnNumber)\nModules: Packages\nIntroduction\nDetermining module system\nModules loaders\npackage.json and file extensions\n--input-type flag\nDetermining package manager\nPackage entry points\nMain entry point export\nSubpath exports\nExtensions in subpaths\nExports sugar\nSubpath imports\nSubpath patterns\nConditional exports\nNested conditions\nResolving user conditions\nCommunity Conditions Definitions\nSelf-referencing a package using its name\nDual CommonJS/ES module packages\nDual package hazard\nWriting dual packages while avoiding or minimizing hazards\nApproach #1: Use an ES module wrapper\nApproach #2: Isolate state\nNode.js package.json field definitions\n\"name\"\n\"main\"\n\"packageManager\"\n\"type\"\n\"exports\"\n\"imports\"\nNet\nIPC", "doc_id": "c12967ae-fd69-41d2-b3e6-0b7db209b2fa", "embedding": null, "doc_hash": "79f55022489c81f8197beae091ee8df361451597aab1e6e8c0d0d8f63fd076ab", "extra_info": null, "node_info": {"start": 77694, "end": 81262}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "742b05c1-4f44-4b88-95c2-7911491a7f72", "3": "62fc9ae7-6b63-42da-a112-331856c721c5"}}, "__type__": "1"}, "62fc9ae7-6b63-42da-a112-331856c721c5": {"__data__": {"text": "columnNumber)\nModules: Packages\nIntroduction\nDetermining module system\nModules loaders\npackage.json and file extensions\n--input-type flag\nDetermining package manager\nPackage entry points\nMain entry point export\nSubpath exports\nExtensions in subpaths\nExports sugar\nSubpath imports\nSubpath patterns\nConditional exports\nNested conditions\nResolving user conditions\nCommunity Conditions Definitions\nSelf-referencing a package using its name\nDual CommonJS/ES module packages\nDual package hazard\nWriting dual packages while avoiding or minimizing hazards\nApproach #1: Use an ES module wrapper\nApproach #2: Isolate state\nNode.js package.json field definitions\n\"name\"\n\"main\"\n\"packageManager\"\n\"type\"\n\"exports\"\n\"imports\"\nNet\nIPC support\nIdentifying paths for IPC connections\nClass: net.BlockList\nblockList.addAddress(address[, type])\nblockList.addRange(start, end[, type])\nblockList.addSubnet(net, prefix[, type])\nblockList.check(address[, type])\nblockList.rules\nClass: net.SocketAddress\nnew net.SocketAddress([options])\nsocketaddress.address\nsocketaddress.family\nsocketaddress.flowlabel\nsocketaddress.port\nClass: net.Server\nnew net.Server([options][, connectionListener])\nEvent: 'close'\nEvent: 'connection'\nEvent: 'error'\nEvent: 'listening'\nEvent: 'drop'\nserver.address()\nserver.close([callback])\nserver.getConnections(callback)\nserver.listen()\nserver.listen(handle[, backlog][, callback])\nserver.listen(options[, callback])\nserver.listen(path[, backlog][, callback])\nserver.listen([port[, host[, backlog]]][, callback])\nserver.listening\nserver.maxConnections\nserver.ref()\nserver.unref()\nClass: net.Socket\nnew net.Socket([options])\nEvent: 'close'\nEvent: 'connect'\nEvent: 'data'\nEvent: 'drain'\nEvent: 'end'\nEvent: 'error'\nEvent: 'lookup'\nEvent: 'ready'\nEvent: 'timeout'\nsocket.address()\nsocket.bufferSize\nsocket.bytesRead\nsocket.bytesWritten\nsocket.connect()\nsocket.connect(options[, connectListener])\nsocket.connect(path[, connectListener])\nsocket.connect(port[, host][, connectListener])\nsocket.connecting\nsocket.destroy([error])\nsocket.destroyed\nsocket.destroySoon()\nsocket.end([data[, encoding]][, callback])\nsocket.localAddress\nsocket.localPort\nsocket.localFamily\nsocket.pause()\nsocket.pending\nsocket.ref()\nsocket.remoteAddress\nsocket.remoteFamily\nsocket.remotePort\nsocket.resetAndDestroy()\nsocket.resume()\nsocket.setEncoding([encoding])\nsocket.setKeepAlive([enable][, initialDelay])\nsocket.setNoDelay([noDelay])\nsocket.setTimeout(timeout[, callback])\nsocket.timeout\nsocket.unref()\nsocket.write(data[, encoding][, callback])\nsocket.readyState\nnet.connect()\nnet.connect(options[, connectListener])\nnet.connect(path[, connectListener])\nnet.connect(port[, host][, connectListener])\nnet.createConnection()\nnet.createConnection(options[, connectListener])\nnet.createConnection(path[, connectListener])\nnet.createConnection(port[, host][, connectListener])\nnet.createServer([options][, connectionListener])\nnet.isIP(input)\nnet.isIPv4(input)\nnet.isIPv6(input)\nOS\nos.EOL\nos.availableParallelism()\nos.arch()\nos.constants\nos.cpus()\nos.devNull\nos.endianness()\nos.freemem()\nos.getPriority([pid])\nos.homedir()\nos.hostname()\nos.loadavg()\nos.machine()\nos.networkInterfaces()\nos.platform()\nos.release()\nos.setPriority([pid,", "doc_id": "62fc9ae7-6b63-42da-a112-331856c721c5", "embedding": null, "doc_hash": "f98f6e5058e86b9b0c345204de4ea8cc21efa94bc562964fa2ab5cd1edc21e98", "extra_info": null, "node_info": {"start": 81203, "end": 84404}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c12967ae-fd69-41d2-b3e6-0b7db209b2fa", "3": "5a7f7b0f-cde3-4479-8150-60a9f0233c2a"}}, "__type__": "1"}, "5a7f7b0f-cde3-4479-8150-60a9f0233c2a": {"__data__": {"text": "connectListener])\nnet.createConnection()\nnet.createConnection(options[, connectListener])\nnet.createConnection(path[, connectListener])\nnet.createConnection(port[, host][, connectListener])\nnet.createServer([options][, connectionListener])\nnet.isIP(input)\nnet.isIPv4(input)\nnet.isIPv6(input)\nOS\nos.EOL\nos.availableParallelism()\nos.arch()\nos.constants\nos.cpus()\nos.devNull\nos.endianness()\nos.freemem()\nos.getPriority([pid])\nos.homedir()\nos.hostname()\nos.loadavg()\nos.machine()\nos.networkInterfaces()\nos.platform()\nos.release()\nos.setPriority([pid, ]priority)\nos.tmpdir()\nos.totalmem()\nos.type()\nos.uptime()\nos.userInfo([options])\nos.version()\nOS constants\nSignal constants\nError constants\nPOSIX error constants\nWindows-specific error constants\ndlopen constants\nPriority constants\nlibuv constants\nPath\nWindows vs. POSIX\npath.basename(path[, suffix])\npath.delimiter\npath.dirname(path)\npath.extname(path)\npath.format(pathObject)\npath.isAbsolute(path)\npath.join([...paths])\npath.normalize(path)\npath.parse(path)\npath.posix\npath.relative(from, to)\npath.resolve([...paths])\npath.sep\npath.toNamespacedPath(path)\npath.win32\nPerformance measurement APIs\nperf_hooks.performance\nperformance.clearMarks([name])\nperformance.clearMeasures([name])\nperformance.clearResourceTimings([name])\nperformance.eventLoopUtilization([utilization1[, utilization2]])\nperformance.getEntries()\nperformance.getEntriesByName(name[, type])\nperformance.getEntriesByType(type)\nperformance.mark([name[, options]])\nperformance.markResourceTiming(timingInfo, requestedUrl, initiatorType, global, cacheMode)\nperformance.measure(name[, startMarkOrOptions[, endMark]])\nperformance.nodeTiming\nperformance.now()\nperformance.setResourceTimingBufferSize(maxSize)\nperformance.timeOrigin\nperformance.timerify(fn[, options])\nperformance.toJSON()\nEvent: 'resourcetimingbufferfull'\nClass: PerformanceEntry\nperformanceEntry.detail\nperformanceEntry.duration\nperformanceEntry.entryType\nperformanceEntry.flags\nperformanceEntry.name\nperformanceEntry.kind\nperformanceEntry.startTime\nGarbage Collection ('gc') Details\nHTTP ('http') Details\nHTTP/2 ('http2') Details\nTimerify ('function') Details\nNet ('net') Details\nDNS ('dns') Details\nClass: PerformanceNodeTiming\nperformanceNodeTiming.bootstrapComplete\nperformanceNodeTiming.environment\nperformanceNodeTiming.idleTime\nperformanceNodeTiming.loopExit\nperformanceNodeTiming.loopStart\nperformanceNodeTiming.nodeStart\nperformanceNodeTiming.v8Start\nClass: PerformanceResourceTiming\nperformanceResourceTiming.workerStart\nperformanceResourceTiming.redirectStart\nperformanceResourceTiming.redirectEnd\nperformanceResourceTiming.fetchStart\nperformanceResourceTiming.domainLookupStart\nperformanceResourceTiming.domainLookupEnd\nperformanceResourceTiming.connectStart\nperformanceResourceTiming.connectEnd\nperformanceResourceTiming.secureConnectionStart\nperformanceResourceTiming.requestStart\nperformanceResourceTiming.responseEnd\nperformanceResourceTiming.transferSize\nperformanceResourceTiming.encodedBodySize\nperformanceResourceTiming.decodedBodySize\nperformanceResourceTiming.toJSON()\nClass: perf_hooks.PerformanceObserver\nPerformanceObserver.supportedEntryTypes\nnew PerformanceObserver(callback)\nperformanceObserver.disconnect()\nperformanceObserver.observe(options)\nClass: PerformanceObserverEntryList\nperformanceObserverEntryList.getEntries()\nperformanceObserverEntryList.getEntriesByName(name[,", "doc_id": "5a7f7b0f-cde3-4479-8150-60a9f0233c2a", "embedding": null, "doc_hash": "35ea68e960778b7575b1efe600abb3393a40932046f7e55fb0b9ff04b644d379", "extra_info": null, "node_info": {"start": 84525, "end": 87904}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "62fc9ae7-6b63-42da-a112-331856c721c5", "3": "cfd07ab3-41cf-4a97-b207-0a9b521dd0eb"}}, "__type__": "1"}, "cfd07ab3-41cf-4a97-b207-0a9b521dd0eb": {"__data__": {"text": "perf_hooks.PerformanceObserver\nPerformanceObserver.supportedEntryTypes\nnew PerformanceObserver(callback)\nperformanceObserver.disconnect()\nperformanceObserver.observe(options)\nClass: PerformanceObserverEntryList\nperformanceObserverEntryList.getEntries()\nperformanceObserverEntryList.getEntriesByName(name[, type])\nperformanceObserverEntryList.getEntriesByType(type)\nperf_hooks.createHistogram([options])\nperf_hooks.monitorEventLoopDelay([options])\nClass: Histogram\nhistogram.count\nhistogram.countBigInt\nhistogram.exceeds\nhistogram.exceedsBigInt\nhistogram.max\nhistogram.maxBigInt\nhistogram.mean\nhistogram.min\nhistogram.minBigInt\nhistogram.percentile(percentile)\nhistogram.percentileBigInt(percentile)\nhistogram.percentiles\nhistogram.percentilesBigInt\nhistogram.reset()\nhistogram.stddev\nClass: IntervalHistogram extends Histogram\nhistogram.disable()\nhistogram.enable()\nCloning an IntervalHistogram\nClass: RecordableHistogram extends Histogram\nhistogram.add(other)\nhistogram.record(val)\nhistogram.recordDelta()\nExamples\nMeasuring the duration of async operations\nMeasuring how long it takes to load dependencies\nMeasuring how long one HTTP round-trip takes\nMeasuring how long the net.connect (only for TCP) takes when the connection is successful\nMeasuring how long the DNS takes when the request is successful\nPermissions\nModule-based permissions\nPolicies\nEnabling\nFeatures\nError behavior\nIntegrity checks\nDependency redirection\nExample: Patched dependency\nScopes\nExample\nIntegrity using scopes\nDependency redirection using scopes\nExample: [import maps][] emulation\nProcess\nProcess events\nEvent: 'beforeExit'\nEvent: 'disconnect'\nEvent: 'exit'\nEvent: 'message'\nEvent: 'multipleResolves'\nEvent: 'rejectionHandled'\nEvent: 'uncaughtException'\nWarning: Using 'uncaughtException' correctly\nEvent: 'uncaughtExceptionMonitor'\nEvent: 'unhandledRejection'\nEvent: 'warning'\nEvent: 'worker'\nEmitting custom warnings\nNode.js warning names\nSignal events\nprocess.abort()\nprocess.allowedNodeEnvironmentFlags\nprocess.arch\nprocess.argv\nprocess.argv0\nprocess.channel\nprocess.channel.ref()\nprocess.channel.unref()\nprocess.chdir(directory)\nprocess.config\nprocess.connected\nprocess.constrainedMemory()\nprocess.cpuUsage([previousValue])\nprocess.cwd()\nprocess.debugPort\nprocess.disconnect()\nprocess.dlopen(module, filename[, flags])\nprocess.emitWarning(warning[, options])\nprocess.emitWarning(warning[, type[, code]][, ctor])\nAvoiding duplicate warnings\nprocess.env\nprocess.execArgv\nprocess.execPath\nprocess.exit([code])\nprocess.exitCode\nprocess.getActiveResourcesInfo()\nprocess.getegid()\nprocess.geteuid()\nprocess.getgid()\nprocess.getgroups()\nprocess.getuid()\nprocess.hasUncaughtExceptionCaptureCallback()\nprocess.hrtime([time])\nprocess.hrtime.bigint()\nprocess.initgroups(user, extraGroup)\nprocess.kill(pid[, signal])\nprocess.mainModule\nprocess.memoryUsage()\nprocess.memoryUsage.rss()\nprocess.nextTick(callback[, ...args])\nWhen to use queueMicrotask() vs. process.nextTick()\nprocess.noDeprecation\nprocess.pid\nprocess.platform\nprocess.ppid\nprocess.release\nprocess.report\nprocess.report.compact\nprocess.report.directory\nprocess.report.filename\nprocess.report.getReport([err])\nprocess.report.reportOnFatalError\nprocess.report.reportOnSignal\nprocess.report.reportOnUncaughtException\nprocess.report.signal\nprocess.report.writeReport([filename][, err])\nprocess.resourceUsage()\nprocess.send(message[, sendHandle[, options]][,", "doc_id": "cfd07ab3-41cf-4a97-b207-0a9b521dd0eb", "embedding": null, "doc_hash": "f871da2597a049156bc2ec2ed92395895fedfeaf6e9bfd06a821d2acb1c8a9d3", "extra_info": null, "node_info": {"start": 88143, "end": 91535}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5a7f7b0f-cde3-4479-8150-60a9f0233c2a", "3": "80dbac04-19c2-433e-ad27-e3cab63d71df"}}, "__type__": "1"}, "80dbac04-19c2-433e-ad27-e3cab63d71df": {"__data__": {"text": "extraGroup)\nprocess.kill(pid[, signal])\nprocess.mainModule\nprocess.memoryUsage()\nprocess.memoryUsage.rss()\nprocess.nextTick(callback[, ...args])\nWhen to use queueMicrotask() vs. process.nextTick()\nprocess.noDeprecation\nprocess.pid\nprocess.platform\nprocess.ppid\nprocess.release\nprocess.report\nprocess.report.compact\nprocess.report.directory\nprocess.report.filename\nprocess.report.getReport([err])\nprocess.report.reportOnFatalError\nprocess.report.reportOnSignal\nprocess.report.reportOnUncaughtException\nprocess.report.signal\nprocess.report.writeReport([filename][, err])\nprocess.resourceUsage()\nprocess.send(message[, sendHandle[, options]][, callback])\nprocess.setegid(id)\nprocess.seteuid(id)\nprocess.setgid(id)\nprocess.setgroups(groups)\nprocess.setuid(id)\nprocess.setSourceMapsEnabled(val)\nprocess.setUncaughtExceptionCaptureCallback(fn)\nprocess.stderr\nprocess.stderr.fd\nprocess.stdin\nprocess.stdin.fd\nprocess.stdout\nprocess.stdout.fd\nA note on process I/O\nprocess.throwDeprecation\nprocess.title\nprocess.traceDeprecation\nprocess.umask()\nprocess.umask(mask)\nprocess.uptime()\nprocess.version\nprocess.versions\nExit codes\nPunycode\npunycode.decode(string)\npunycode.encode(string)\npunycode.toASCII(domain)\npunycode.toUnicode(domain)\npunycode.ucs2\npunycode.ucs2.decode(string)\npunycode.ucs2.encode(codePoints)\npunycode.version\nQuery string\nquerystring.decode()\nquerystring.encode()\nquerystring.escape(str)\nquerystring.parse(str[, sep[, eq[, options]]])\nquerystring.stringify(obj[, sep[, eq[, options]]])\nquerystring.unescape(str)\nReadline\nClass: InterfaceConstructor\nEvent: 'close'\nEvent: 'line'\nEvent: 'history'\nEvent: 'pause'\nEvent: 'resume'\nEvent: 'SIGCONT'\nEvent: 'SIGINT'\nEvent: 'SIGTSTP'\nrl.close()\nrl.pause()\nrl.prompt([preserveCursor])\nrl.question(query[, options], callback)\nrl.resume()\nrl.setPrompt(prompt)\nrl.getPrompt()\nrl.write(data[, key])\nrl[Symbol.asyncIterator]()\nrl.line\nrl.cursor\nrl.getCursorPos()\nPromises API\nClass: readlinePromises.Interface\nrl.question(query[, options])\nClass: readlinePromises.Readline\nnew readlinePromises.Readline(stream[, options])\nrl.clearLine(dir)\nrl.clearScreenDown()\nrl.commit()\nrl.cursorTo(x[, y])\nrl.moveCursor(dx, dy)\nrl.rollback()\nreadlinePromises.createInterface(options)\nUse of the completer function\nCallback API\nClass: readline.Interface\nrl.question(query[, options], callback)\nreadline.clearLine(stream, dir[, callback])\nreadline.clearScreenDown(stream[, callback])\nreadline.createInterface(options)\nUse of the completer function\nreadline.cursorTo(stream, x[, y][, callback])\nreadline.moveCursor(stream, dx, dy[, callback])\nreadline.emitKeypressEvents(stream[, interface])\nExample: Tiny CLI\nExample: Read file stream line-by-Line\nTTY keybindings\nREPL\nDesign and features\nCommands and special keys\nDefault evaluation\nJavaScript expressions\nGlobal and local scope\nAccessing core Node.js modules\nGlobal uncaught exceptions\nAssignment of the _ (underscore) variable\nawait keyword\nReverse-i-search\nCustom evaluation functions\nRecoverable errors\nCustomizing REPL output\nClass:", "doc_id": "80dbac04-19c2-433e-ad27-e3cab63d71df", "embedding": null, "doc_hash": "f57bab0f8d7343b3b5cac7ea4ab2b03629f4580763118e5f887938154ebeb47a", "extra_info": null, "node_info": {"start": 91209, "end": 94229}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cfd07ab3-41cf-4a97-b207-0a9b521dd0eb", "3": "266ec5d8-a696-4fe4-8351-bd36ddb41850"}}, "__type__": "1"}, "266ec5d8-a696-4fe4-8351-bd36ddb41850": {"__data__": {"text": "dir[, callback])\nreadline.clearScreenDown(stream[, callback])\nreadline.createInterface(options)\nUse of the completer function\nreadline.cursorTo(stream, x[, y][, callback])\nreadline.moveCursor(stream, dx, dy[, callback])\nreadline.emitKeypressEvents(stream[, interface])\nExample: Tiny CLI\nExample: Read file stream line-by-Line\nTTY keybindings\nREPL\nDesign and features\nCommands and special keys\nDefault evaluation\nJavaScript expressions\nGlobal and local scope\nAccessing core Node.js modules\nGlobal uncaught exceptions\nAssignment of the _ (underscore) variable\nawait keyword\nReverse-i-search\nCustom evaluation functions\nRecoverable errors\nCustomizing REPL output\nClass: REPLServer\nEvent: 'exit'\nEvent: 'reset'\nreplServer.defineCommand(keyword, cmd)\nreplServer.displayPrompt([preserveCursor])\nreplServer.clearBufferedCommand()\nreplServer.parseREPLKeyword(keyword[, rest])\nreplServer.setupHistory(historyPath, callback)\nrepl.builtinModules\nrepl.start([options])\nThe Node.js REPL\nEnvironment variable options\nPersistent history\nUsing the Node.js REPL with advanced line-editors\nStarting multiple REPL instances against a single running instance\nDiagnostic report\nUsage\nConfiguration\nInteraction with workers\nSingle executable applications\nNotes\nrequire(id) in the injected module is not file based\n__filename and module.filename in the injected module\n__dirname in the injected module\nSingle executable application creation process\nPlatform support\nStream\nOrganization of this document\nTypes of streams\nStreams Promises API\nstream.pipeline(source[, ...transforms], destination[, options])\nstream.pipeline(streams[, options])\nstream.finished(stream[, options])\nObject mode\nBuffering\nAPI for stream consumers\nWritable streams\nClass: stream.Writable\nEvent: 'close'\nEvent: 'drain'\nEvent: 'error'\nEvent: 'finish'\nEvent: 'pipe'\nEvent: 'unpipe'\nwritable.cork()\nwritable.destroy([error])\nwritable.closed\nwritable.destroyed\nwritable.end([chunk[, encoding]][, callback])\nwritable.setDefaultEncoding(encoding)\nwritable.uncork()\nwritable.writable\nwritable.writableAborted\nwritable.writableEnded\nwritable.writableCorked\nwritable.errored\nwritable.writableFinished\nwritable.writableHighWaterMark\nwritable.writableLength\nwritable.writableNeedDrain\nwritable.writableObjectMode\nwritable.write(chunk[, encoding][, callback])\nReadable streams\nTwo reading modes\nThree states\nChoose one API style\nClass: stream.Readable\nEvent: 'close'\nEvent: 'data'\nEvent: 'end'\nEvent: 'error'\nEvent: 'pause'\nEvent: 'readable'\nEvent: 'resume'\nreadable.destroy([error])\nreadable.closed\nreadable.destroyed\nreadable.isPaused()\nreadable.pause()\nreadable.pipe(destination[, options])\nreadable.read([size])\nreadable.readable\nreadable.readableAborted\nreadable.readableDidRead\nreadable.readableEncoding\nreadable.readableEnded\nreadable.errored\nreadable.readableFlowing\nreadable.readableHighWaterMark\nreadable.readableLength\nreadable.readableObjectMode\nreadable.resume()\nreadable.setEncoding(encoding)\nreadable.unpipe([destination])\nreadable.unshift(chunk[, encoding])\nreadable.wrap(stream)\nreadable[Symbol.asyncIterator]()\nreadable.compose(stream[, options])\nreadable.iterator([options])\nreadable.map(fn[, options])\nreadable.filter(fn[, options])\nreadable.forEach(fn[, options])\nreadable.toArray([options])\nreadable.some(fn[, options])\nreadable.find(fn[, options])\nreadable.every(fn[, options])\nreadable.flatMap(fn[, options])\nreadable.drop(limit[, options])\nreadable.take(limit[,", "doc_id": "266ec5d8-a696-4fe4-8351-bd36ddb41850", "embedding": null, "doc_hash": "f3c47912f43e5a01685ea4a7bb26edd0dd2ce3ee2078b6d0a5f020a58076af5a", "extra_info": null, "node_info": {"start": 94240, "end": 97666}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "80dbac04-19c2-433e-ad27-e3cab63d71df", "3": "ece21d17-d6d7-4769-ac0a-2d9ef7b81ec1"}}, "__type__": "1"}, "ece21d17-d6d7-4769-ac0a-2d9ef7b81ec1": {"__data__": {"text": "encoding])\nreadable.wrap(stream)\nreadable[Symbol.asyncIterator]()\nreadable.compose(stream[, options])\nreadable.iterator([options])\nreadable.map(fn[, options])\nreadable.filter(fn[, options])\nreadable.forEach(fn[, options])\nreadable.toArray([options])\nreadable.some(fn[, options])\nreadable.find(fn[, options])\nreadable.every(fn[, options])\nreadable.flatMap(fn[, options])\nreadable.drop(limit[, options])\nreadable.take(limit[, options])\nreadable.asIndexedPairs([options])\nreadable.reduce(fn[, initial[, options]])\nDuplex and transform streams\nClass: stream.Duplex\nduplex.allowHalfOpen\nClass: stream.Transform\ntransform.destroy([error])\nstream.finished(stream[, options], callback)\nstream.pipeline(source[, ...transforms], destination, callback)\nstream.pipeline(streams, callback)\nstream.compose(...streams)\nstream.Readable.from(iterable[, options])\nstream.Readable.fromWeb(readableStream[, options])\nstream.Readable.isDisturbed(stream)\nstream.isErrored(stream)\nstream.isReadable(stream)\nstream.Readable.toWeb(streamReadable[, options])\nstream.Writable.fromWeb(writableStream[, options])\nstream.Writable.toWeb(streamWritable)\nstream.Duplex.from(src)\nstream.Duplex.fromWeb(pair[, options])\nstream.Duplex.toWeb(streamDuplex)\nstream.addAbortSignal(signal, stream)\nAPI for stream implementers\nSimplified construction\nImplementing a writable stream\nnew stream.Writable([options])\nwritable._construct(callback)\nwritable._write(chunk, encoding, callback)\nwritable._writev(chunks, callback)\nwritable._destroy(err, callback)\nwritable._final(callback)\nErrors while writing\nAn example writable stream\nDecoding buffers in a writable stream\nImplementing a readable stream\nnew stream.Readable([options])\nreadable._construct(callback)\nreadable._read(size)\nreadable._destroy(err, callback)\nreadable.push(chunk[, encoding])\nErrors while reading\nAn example counting stream\nImplementing a duplex stream\nnew stream.Duplex(options)\nAn example duplex stream\nObject mode duplex streams\nImplementing a transform stream\nnew stream.Transform([options])\nEvent: 'end'\nEvent: 'finish'\ntransform._flush(callback)\ntransform._transform(chunk, encoding, callback)\nClass: stream.PassThrough\nAdditional notes\nStreams compatibility with async generators and async iterators\nConsuming readable streams with async iterators\nCreating readable streams with async generators\nPiping to writable streams from async iterators\nCompatibility with older Node.js versions\nreadable.read(0)\nreadable.push('')\nhighWaterMark discrepancy after calling readable.setEncoding()\nString decoder\nClass: StringDecoder\nnew StringDecoder([encoding])\nstringDecoder.end([buffer])\nstringDecoder.write(buffer)\nTest runner\nSubtests\nSkipping tests\ndescribe/it syntax\nonly tests\nFiltering tests by name\nExtraneous asynchronous activity\nWatch mode\nRunning tests from the command line\nTest runner execution model\nCollecting code coverage\nMocking\nTest reporters\nCustom reporters\nMultiple reporters\nrun([options])\ntest([name][, options][, fn])\ndescribe([name][, options][, fn])\ndescribe.skip([name][, options][, fn])\ndescribe.todo([name][, options][, fn])\ndescribe.only([name][, options][, fn])\nit([name][, options][, fn])\nit.skip([name][, options][, fn])\nit.todo([name][, options][, fn])\nit.only([name][, options][, fn])\nbefore([fn][, options])\nafter([fn][, options])\nbeforeEach([fn][, options])\nafterEach([fn][, options])\nClass:", "doc_id": "ece21d17-d6d7-4769-ac0a-2d9ef7b81ec1", "embedding": null, "doc_hash": "0ab4c775f3512771747a26479d30f088e144be889068c5939cb4eae87450e6f8", "extra_info": null, "node_info": {"start": 97873, "end": 101226}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "266ec5d8-a696-4fe4-8351-bd36ddb41850", "3": "b0c9054c-be65-4543-a0eb-e5eff3f9a4c6"}}, "__type__": "1"}, "b0c9054c-be65-4543-a0eb-e5eff3f9a4c6": {"__data__": {"text": "activity\nWatch mode\nRunning tests from the command line\nTest runner execution model\nCollecting code coverage\nMocking\nTest reporters\nCustom reporters\nMultiple reporters\nrun([options])\ntest([name][, options][, fn])\ndescribe([name][, options][, fn])\ndescribe.skip([name][, options][, fn])\ndescribe.todo([name][, options][, fn])\ndescribe.only([name][, options][, fn])\nit([name][, options][, fn])\nit.skip([name][, options][, fn])\nit.todo([name][, options][, fn])\nit.only([name][, options][, fn])\nbefore([fn][, options])\nafter([fn][, options])\nbeforeEach([fn][, options])\nafterEach([fn][, options])\nClass: MockFunctionContext\nctx.calls\nctx.callCount()\nctx.mockImplementation(implementation)\nctx.mockImplementationOnce(implementation[, onCall])\nctx.resetCalls()\nctx.restore()\nClass: MockTracker\nmock.fn([original[, implementation]][, options])\nmock.getter(object, methodName[, implementation][, options])\nmock.method(object, methodName[, implementation][, options])\nmock.reset()\nmock.restoreAll()\nmock.setter(object, methodName[, implementation][, options])\nClass: TestsStream\nEvent: 'test:coverage'\nEvent: 'test:diagnostic'\nEvent: 'test:fail'\nEvent: 'test:pass'\nEvent: 'test:plan'\nEvent: 'test:start'\nClass: TestContext\ncontext.beforeEach([fn][, options])\ncontext.after([fn][, options])\ncontext.afterEach([fn][, options])\ncontext.diagnostic(message)\ncontext.name\ncontext.runOnly(shouldRunOnlyTests)\ncontext.signal\ncontext.skip([message])\ncontext.todo([message])\ncontext.test([name][, options][, fn])\nClass: SuiteContext\ncontext.name\ncontext.signal\nTimers\nClass: Immediate\nimmediate.hasRef()\nimmediate.ref()\nimmediate.unref()\nClass: Timeout\ntimeout.close()\ntimeout.hasRef()\ntimeout.ref()\ntimeout.refresh()\ntimeout.unref()\ntimeout[Symbol.toPrimitive]()\nScheduling timers\nsetImmediate(callback[, ...args])\nsetInterval(callback[, delay[, ...args]])\nsetTimeout(callback[, delay[, ...args]])\nCancelling timers\nclearImmediate(immediate)\nclearInterval(timeout)\nclearTimeout(timeout)\nTimers Promises API\ntimersPromises.setTimeout([delay[, value[, options]]])\ntimersPromises.setImmediate([value[, options]])\ntimersPromises.setInterval([delay[, value[, options]]])\ntimersPromises.scheduler.wait(delay[, options])\ntimersPromises.scheduler.yield()\nTLS (SSL)\nDetermining if crypto support is unavailable\nTLS/SSL concepts\nPerfect forward secrecy\nALPN and SNI\nPre-shared keys\nClient-initiated renegotiation attack mitigation\nSession resumption\nSession identifiers\nSession tickets\nModifying the default TLS cipher suite\nX509 certificate error codes\nClass: tls.CryptoStream\ncryptoStream.bytesWritten\nClass: tls.SecurePair\nEvent: 'secure'\nClass: tls.Server\nEvent: 'connection'\nEvent: 'keylog'\nEvent: 'newSession'\nEvent: 'OCSPRequest'\nEvent: 'resumeSession'\nEvent: 'secureConnection'\nEvent: 'tlsClientError'\nserver.addContext(hostname, context)\nserver.address()\nserver.close([callback])\nserver.getTicketKeys()\nserver.listen()\nserver.setSecureContext(options)\nserver.setTicketKeys(keys)\nClass: tls.TLSSocket\nnew tls.TLSSocket(socket[, options])\nEvent: 'keylog'\nEvent: 'OCSPResponse'\nEvent: 'secureConnect'\nEvent:", "doc_id": "b0c9054c-be65-4543-a0eb-e5eff3f9a4c6", "embedding": null, "doc_hash": "7cc68ab478ff13137bacb2176d2e8d9e564e7dd2f1b6fd1808a44b34e581f8bf", "extra_info": null, "node_info": {"start": 101078, "end": 104163}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ece21d17-d6d7-4769-ac0a-2d9ef7b81ec1", "3": "07c62f69-12b3-4fbe-8672-bc62da6e33b1"}}, "__type__": "1"}, "07c62f69-12b3-4fbe-8672-bc62da6e33b1": {"__data__": {"text": "certificate error codes\nClass: tls.CryptoStream\ncryptoStream.bytesWritten\nClass: tls.SecurePair\nEvent: 'secure'\nClass: tls.Server\nEvent: 'connection'\nEvent: 'keylog'\nEvent: 'newSession'\nEvent: 'OCSPRequest'\nEvent: 'resumeSession'\nEvent: 'secureConnection'\nEvent: 'tlsClientError'\nserver.addContext(hostname, context)\nserver.address()\nserver.close([callback])\nserver.getTicketKeys()\nserver.listen()\nserver.setSecureContext(options)\nserver.setTicketKeys(keys)\nClass: tls.TLSSocket\nnew tls.TLSSocket(socket[, options])\nEvent: 'keylog'\nEvent: 'OCSPResponse'\nEvent: 'secureConnect'\nEvent: 'session'\ntlsSocket.address()\ntlsSocket.authorizationError\ntlsSocket.authorized\ntlsSocket.disableRenegotiation()\ntlsSocket.enableTrace()\ntlsSocket.encrypted\ntlsSocket.exportKeyingMaterial(length, label[, context])\ntlsSocket.getCertificate()\ntlsSocket.getCipher()\ntlsSocket.getEphemeralKeyInfo()\ntlsSocket.getFinished()\ntlsSocket.getPeerCertificate([detailed])\nCertificate object\ntlsSocket.getPeerFinished()\ntlsSocket.getPeerX509Certificate()\ntlsSocket.getProtocol()\ntlsSocket.getSession()\ntlsSocket.getSharedSigalgs()\ntlsSocket.getTLSTicket()\ntlsSocket.getX509Certificate()\ntlsSocket.isSessionReused()\ntlsSocket.localAddress\ntlsSocket.localPort\ntlsSocket.remoteAddress\ntlsSocket.remoteFamily\ntlsSocket.remotePort\ntlsSocket.renegotiate(options, callback)\ntlsSocket.setMaxSendFragment(size)\ntls.checkServerIdentity(hostname, cert)\ntls.connect(options[, callback])\ntls.connect(path[, options][, callback])\ntls.connect(port[, host][, options][, callback])\ntls.createSecureContext([options])\ntls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized][, options])\ntls.createServer([options][, secureConnectionListener])\ntls.getCiphers()\ntls.rootCertificates\ntls.DEFAULT_ECDH_CURVE\ntls.DEFAULT_MAX_VERSION\ntls.DEFAULT_MIN_VERSION\ntls.DEFAULT_CIPHERS\nTrace events\nThe node:trace_events module\nTracing object\ntracing.categories\ntracing.disable()\ntracing.enable()\ntracing.enabled\ntrace_events.createTracing(options)\ntrace_events.getEnabledCategories()\nExamples\nCollect trace events data by inspector\nTTY\nClass: tty.ReadStream\nreadStream.isRaw\nreadStream.isTTY\nreadStream.setRawMode(mode)\nClass: tty.WriteStream\nEvent: 'resize'\nwriteStream.clearLine(dir[, callback])\nwriteStream.clearScreenDown([callback])\nwriteStream.columns\nwriteStream.cursorTo(x[, y][, callback])\nwriteStream.getColorDepth([env])\nwriteStream.getWindowSize()\nwriteStream.hasColors([count][, env])\nwriteStream.isTTY\nwriteStream.moveCursor(dx, dy[, callback])\nwriteStream.rows\ntty.isatty(fd)\nUDP/datagram sockets\nClass: dgram.Socket\nEvent: 'close'\nEvent: 'connect'\nEvent: 'error'\nEvent: 'listening'\nEvent: 'message'\nsocket.addMembership(multicastAddress[, multicastInterface])\nsocket.addSourceSpecificMembership(sourceAddress, groupAddress[, multicastInterface])\nsocket.address()\nsocket.bind([port][, address][, callback])\nsocket.bind(options[, callback])\nsocket.close([callback])\nsocket.connect(port[, address][, callback])\nsocket.disconnect()\nsocket.dropMembership(multicastAddress[,", "doc_id": "07c62f69-12b3-4fbe-8672-bc62da6e33b1", "embedding": null, "doc_hash": "012b39f17f1c7b030fe229ce5c1e1b6e65475b218d62aee43643b76fd158b0c2", "extra_info": null, "node_info": {"start": 104164, "end": 107211}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b0c9054c-be65-4543-a0eb-e5eff3f9a4c6", "3": "ecd725f9-8fd8-4c66-876a-80ad14a52c23"}}, "__type__": "1"}, "ecd725f9-8fd8-4c66-876a-80ad14a52c23": {"__data__": {"text": "env])\nwriteStream.isTTY\nwriteStream.moveCursor(dx, dy[, callback])\nwriteStream.rows\ntty.isatty(fd)\nUDP/datagram sockets\nClass: dgram.Socket\nEvent: 'close'\nEvent: 'connect'\nEvent: 'error'\nEvent: 'listening'\nEvent: 'message'\nsocket.addMembership(multicastAddress[, multicastInterface])\nsocket.addSourceSpecificMembership(sourceAddress, groupAddress[, multicastInterface])\nsocket.address()\nsocket.bind([port][, address][, callback])\nsocket.bind(options[, callback])\nsocket.close([callback])\nsocket.connect(port[, address][, callback])\nsocket.disconnect()\nsocket.dropMembership(multicastAddress[, multicastInterface])\nsocket.dropSourceSpecificMembership(sourceAddress, groupAddress[, multicastInterface])\nsocket.getRecvBufferSize()\nsocket.getSendBufferSize()\nsocket.getSendQueueSize()\nsocket.getSendQueueCount()\nsocket.ref()\nsocket.remoteAddress()\nsocket.send(msg[, offset, length][, port][, address][, callback])\nNote about UDP datagram size\nsocket.setBroadcast(flag)\nsocket.setMulticastInterface(multicastInterface)\nExample: IPv6 outgoing multicast interface\nExample: IPv4 outgoing multicast interface\nCall results\nsocket.setMulticastLoopback(flag)\nsocket.setMulticastTTL(ttl)\nsocket.setRecvBufferSize(size)\nsocket.setSendBufferSize(size)\nsocket.setTTL(ttl)\nsocket.unref()\nnode:dgram module functions\ndgram.createSocket(options[, callback])\ndgram.createSocket(type[, callback])\nURL\nURL strings and URL objects\nConstructing a URL from component parts and getting the constructed string\nThe WHATWG URL API\nClass: URL\nnew URL(input[, base])\nurl.hash\nurl.host\nurl.hostname\nurl.href\nurl.origin\nurl.password\nurl.pathname\nurl.port\nurl.protocol\nSpecial schemes\nurl.search\nurl.searchParams\nurl.username\nurl.toString()\nurl.toJSON()\nURL.createObjectURL(blob)\nURL.revokeObjectURL(id)\nClass: URLSearchParams\nnew URLSearchParams()\nnew URLSearchParams(string)\nnew URLSearchParams(obj)\nnew URLSearchParams(iterable)\nurlSearchParams.append(name, value)\nurlSearchParams.delete(name)\nurlSearchParams.entries()\nurlSearchParams.forEach(fn[, thisArg])\nurlSearchParams.get(name)\nurlSearchParams.getAll(name)\nurlSearchParams.has(name)\nurlSearchParams.keys()\nurlSearchParams.set(name, value)\nurlSearchParams.size\nurlSearchParams.sort()\nurlSearchParams.toString()\nurlSearchParams.values()\nurlSearchParams[Symbol.iterator]()\nurl.domainToASCII(domain)\nurl.domainToUnicode(domain)\nurl.fileURLToPath(url)\nurl.format(URL[, options])\nurl.pathToFileURL(path)\nurl.urlToHttpOptions(url)\nLegacy URL API\nLegacy urlObject\nurlObject.auth\nurlObject.hash\nurlObject.host\nurlObject.hostname\nurlObject.href\nurlObject.path\nurlObject.pathname\nurlObject.port\nurlObject.protocol\nurlObject.query\nurlObject.search\nurlObject.slashes\nurl.format(urlObject)\nurl.parse(urlString[, parseQueryString[, slashesDenoteHost]])\nurl.resolve(from, to)\nPercent-encoding in URLs\nLegacy API\nWHATWG API\nUtil\nutil.callbackify(original)\nutil.debuglog(section[, callback])\ndebuglog().enabled\nutil.debug(section)\nutil.deprecate(fn, msg[, code])\nutil.format(format[, ...args])\nutil.formatWithOptions(inspectOptions, format[,", "doc_id": "ecd725f9-8fd8-4c66-876a-80ad14a52c23", "embedding": null, "doc_hash": "018e2783b6099b0b02e1db2eb174087fb7ab9aeb068dc7abb38898fb0bdeb06b", "extra_info": null, "node_info": {"start": 107200, "end": 110249}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "07c62f69-12b3-4fbe-8672-bc62da6e33b1", "3": "8153433d-c0ab-40d3-a340-328599139646"}}, "__type__": "1"}, "8153433d-c0ab-40d3-a340-328599139646": {"__data__": {"text": "URL API\nLegacy urlObject\nurlObject.auth\nurlObject.hash\nurlObject.host\nurlObject.hostname\nurlObject.href\nurlObject.path\nurlObject.pathname\nurlObject.port\nurlObject.protocol\nurlObject.query\nurlObject.search\nurlObject.slashes\nurl.format(urlObject)\nurl.parse(urlString[, parseQueryString[, slashesDenoteHost]])\nurl.resolve(from, to)\nPercent-encoding in URLs\nLegacy API\nWHATWG API\nUtil\nutil.callbackify(original)\nutil.debuglog(section[, callback])\ndebuglog().enabled\nutil.debug(section)\nutil.deprecate(fn, msg[, code])\nutil.format(format[, ...args])\nutil.formatWithOptions(inspectOptions, format[, ...args])\nutil.getSystemErrorName(err)\nutil.getSystemErrorMap()\nutil.inherits(constructor, superConstructor)\nutil.inspect(object[, options])\nutil.inspect(object[, showHidden[, depth[, colors]]])\nCustomizing util.inspect colors\nModifiers\nForeground colors\nBackground colors\nCustom inspection functions on objects\nutil.inspect.custom\nutil.inspect.defaultOptions\nutil.isDeepStrictEqual(val1, val2)\nClass: util.MIMEType\nConstructor: new MIMEType(input)\nmime.type\nmime.subtype\nmime.essence\nmime.params\nmime.toString()\nmime.toJSON()\nClass: util.MIMEParams\nConstructor: new MIMEParams()\nmimeParams.delete(name)\nmimeParams.entries()\nmimeParams.get(name)\nmimeParams.has(name)\nmimeParams.keys()\nmimeParams.set(name, value)\nmimeParams.values()\nmimeParams[@@iterator]()\nutil.parseArgs([config])\nparseArgs tokens\nutil.promisify(original)\nCustom promisified functions\nutil.promisify.custom\nutil.stripVTControlCharacters(str)\nClass: util.TextDecoder\nWHATWG supported encodings\nEncodings supported by default (with full ICU data)\nEncodings supported when Node.js is built with the small-icu option\nEncodings supported when ICU is disabled\nnew TextDecoder([encoding[, options]])\ntextDecoder.decode([input[, options]])\ntextDecoder.encoding\ntextDecoder.fatal\ntextDecoder.ignoreBOM\nClass: util.TextEncoder\ntextEncoder.encode([input])\ntextEncoder.encodeInto(src, dest)\ntextEncoder.encoding\nutil.toUSVString(string)\nutil.transferableAbortController()\nutil.transferableAbortSignal(signal)\nutil.aborted(signal,", "doc_id": "8153433d-c0ab-40d3-a340-328599139646", "embedding": null, "doc_hash": "75b7f25f7a812d3c7dcd2a2be1975bc746a567bbf517c6e671110588a7854c70", "extra_info": null, "node_info": {"start": 110247, "end": 112326}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ecd725f9-8fd8-4c66-876a-80ad14a52c23", "3": "44b99643-f0e3-49a1-9a89-d5c487fcf89b"}}, "__type__": "1"}, "44b99643-f0e3-49a1-9a89-d5c487fcf89b": {"__data__": {"text": "util.TextDecoder\nWHATWG supported encodings\nEncodings supported by default (with full ICU data)\nEncodings supported when Node.js is built with the small-icu option\nEncodings supported when ICU is disabled\nnew TextDecoder([encoding[, options]])\ntextDecoder.decode([input[, options]])\ntextDecoder.encoding\ntextDecoder.fatal\ntextDecoder.ignoreBOM\nClass: util.TextEncoder\ntextEncoder.encode([input])\ntextEncoder.encodeInto(src, dest)\ntextEncoder.encoding\nutil.toUSVString(string)\nutil.transferableAbortController()\nutil.transferableAbortSignal(signal)\nutil.aborted(signal, resource)\nutil.types\nutil.types.isAnyArrayBuffer(value)\nutil.types.isArrayBufferView(value)\nutil.types.isArgumentsObject(value)\nutil.types.isArrayBuffer(value)\nutil.types.isAsyncFunction(value)\nutil.types.isBigInt64Array(value)\nutil.types.isBigUint64Array(value)\nutil.types.isBooleanObject(value)\nutil.types.isBoxedPrimitive(value)\nutil.types.isCryptoKey(value)\nutil.types.isDataView(value)\nutil.types.isDate(value)\nutil.types.isExternal(value)\nutil.types.isFloat32Array(value)\nutil.types.isFloat64Array(value)\nutil.types.isGeneratorFunction(value)\nutil.types.isGeneratorObject(value)\nutil.types.isInt8Array(value)\nutil.types.isInt16Array(value)\nutil.types.isInt32Array(value)\nutil.types.isKeyObject(value)\nutil.types.isMap(value)\nutil.types.isMapIterator(value)\nutil.types.isModuleNamespaceObject(value)\nutil.types.isNativeError(value)\nutil.types.isNumberObject(value)\nutil.types.isPromise(value)\nutil.types.isProxy(value)\nutil.types.isRegExp(value)\nutil.types.isSet(value)\nutil.types.isSetIterator(value)\nutil.types.isSharedArrayBuffer(value)\nutil.types.isStringObject(value)\nutil.types.isSymbolObject(value)\nutil.types.isTypedArray(value)\nutil.types.isUint8Array(value)\nutil.types.isUint8ClampedArray(value)\nutil.types.isUint16Array(value)\nutil.types.isUint32Array(value)\nutil.types.isWeakMap(value)\nutil.types.isWeakSet(value)\nutil.types.isWebAssemblyCompiledModule(value)\nDeprecated APIs\nutil._extend(target, source)\nutil.isArray(object)\nutil.isBoolean(object)\nutil.isBuffer(object)\nutil.isDate(object)\nutil.isError(object)\nutil.isFunction(object)\nutil.isNull(object)\nutil.isNullOrUndefined(object)\nutil.isNumber(object)\nutil.isObject(object)\nutil.isPrimitive(object)\nutil.isRegExp(object)\nutil.isString(object)\nutil.isSymbol(object)\nutil.isUndefined(object)\nutil.log(string)\nV8\nv8.cachedDataVersionTag()\nv8.getHeapCodeStatistics()\nv8.getHeapSnapshot()\nv8.getHeapSpaceStatistics()\nv8.getHeapStatistics()\nv8.setFlagsFromString(flags)\nv8.stopCoverage()\nv8.takeCoverage()\nv8.writeHeapSnapshot([filename])\nv8.setHeapSnapshotNearHeapLimit(limit)\nSerialization API\nv8.serialize(value)\nv8.deserialize(buffer)\nClass: v8.Serializer\nnew Serializer()\nserializer.writeHeader()\nserializer.writeValue(value)\nserializer.releaseBuffer()\nserializer.transferArrayBuffer(id,", "doc_id": "44b99643-f0e3-49a1-9a89-d5c487fcf89b", "embedding": null, "doc_hash": "5f652dced59d56a7b5ca456a5d873225360f8a74f3ee758db3a817863c42abde", "extra_info": null, "node_info": {"start": 112365, "end": 115194}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8153433d-c0ab-40d3-a340-328599139646", "3": "53821ca7-2228-4c01-b600-f51f66cfa78b"}}, "__type__": "1"}, "53821ca7-2228-4c01-b600-f51f66cfa78b": {"__data__": {"text": "API\nv8.serialize(value)\nv8.deserialize(buffer)\nClass: v8.Serializer\nnew Serializer()\nserializer.writeHeader()\nserializer.writeValue(value)\nserializer.releaseBuffer()\nserializer.transferArrayBuffer(id, arrayBuffer)\nserializer.writeUint32(value)\nserializer.writeUint64(hi, lo)\nserializer.writeDouble(value)\nserializer.writeRawBytes(buffer)\nserializer._writeHostObject(object)\nserializer._getDataCloneError(message)\nserializer._getSharedArrayBufferId(sharedArrayBuffer)\nserializer._setTreatArrayBufferViewsAsHostObjects(flag)\nClass: v8.Deserializer\nnew Deserializer(buffer)\ndeserializer.readHeader()\ndeserializer.readValue()\ndeserializer.transferArrayBuffer(id, arrayBuffer)\ndeserializer.getWireFormatVersion()\ndeserializer.readUint32()\ndeserializer.readUint64()\ndeserializer.readDouble()\ndeserializer.readRawBytes(length)\ndeserializer._readHostObject()\nClass: v8.DefaultSerializer\nClass: v8.DefaultDeserializer\nPromise hooks\npromiseHooks.onInit(init)\npromiseHooks.onSettled(settled)\npromiseHooks.onBefore(before)\npromiseHooks.onAfter(after)\npromiseHooks.createHook(callbacks)\nHook callbacks\ninit(promise, parent)\nbefore(promise)\nafter(promise)\nsettled(promise)\nStartup Snapshot API\nv8.startupSnapshot.addSerializeCallback(callback[, data])\nv8.startupSnapshot.addDeserializeCallback(callback[, data])\nv8.startupSnapshot.setDeserializeMainFunction(callback[, data])\nv8.startupSnapshot.isBuildingSnapshot()\nClass: v8.GCProfiler\nnew v8.GCProfiler()\nprofiler.start()\nprofiler.stop()\nVM (executing JavaScript)\nClass: vm.Script\nnew vm.Script(code[, options])\nscript.cachedDataRejected\nscript.createCachedData()\nscript.runInContext(contextifiedObject[, options])\nscript.runInNewContext([contextObject[, options]])\nscript.runInThisContext([options])\nscript.sourceMapURL\nClass: vm.Module\nmodule.dependencySpecifiers\nmodule.error\nmodule.evaluate([options])\nmodule.identifier\nmodule.link(linker)\nmodule.namespace\nmodule.status\nClass: vm.SourceTextModule\nnew vm.SourceTextModule(code[, options])\nsourceTextModule.createCachedData()\nClass: vm.SyntheticModule\nnew vm.SyntheticModule(exportNames, evaluateCallback[, options])\nsyntheticModule.setExport(name, value)\nvm.compileFunction(code[, params[, options]])\nvm.createContext([contextObject[, options]])\nvm.isContext(object)\nvm.measureMemory([options])\nvm.runInContext(code, contextifiedObject[, options])\nvm.runInNewContext(code[, contextObject[, options]])\nvm.runInThisContext(code[, options])\nExample: Running an HTTP server within a VM\nWhat does it mean to \"contextify\" an object?\nTimeout interactions with asynchronous tasks and Promises\nWebAssembly System Interface (WASI)\nClass: WASI\nnew WASI([options])\nwasi.start(instance)\nwasi.initialize(instance)\nwasi.wasiImport\nWeb Crypto API\nExamples\nGenerating keys\nAES keys\nECDSA key pairs\nEd25519/Ed448/X25519/X448 key pairs\nHMAC keys\nRSA key pairs\nEncryption and decryption\nExporting and importing keys\nWrapping and unwrapping keys\nSign and verify\nDeriving bits and keys\nDigest\nAlgorithm matrix\nClass: Crypto\ncrypto.subtle\ncrypto.getRandomValues(typedArray)\ncrypto.randomUUID()\nClass:", "doc_id": "53821ca7-2228-4c01-b600-f51f66cfa78b", "embedding": null, "doc_hash": "1f9ea590f2f7613615c8f2a50ca498331bd854745a467386a294beb5e7d707db", "extra_info": null, "node_info": {"start": 115537, "end": 118606}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "44b99643-f0e3-49a1-9a89-d5c487fcf89b", "3": "8aa94e6f-a752-4681-95ef-239a6c501d44"}}, "__type__": "1"}, "8aa94e6f-a752-4681-95ef-239a6c501d44": {"__data__": {"text": "HTTP server within a VM\nWhat does it mean to \"contextify\" an object?\nTimeout interactions with asynchronous tasks and Promises\nWebAssembly System Interface (WASI)\nClass: WASI\nnew WASI([options])\nwasi.start(instance)\nwasi.initialize(instance)\nwasi.wasiImport\nWeb Crypto API\nExamples\nGenerating keys\nAES keys\nECDSA key pairs\nEd25519/Ed448/X25519/X448 key pairs\nHMAC keys\nRSA key pairs\nEncryption and decryption\nExporting and importing keys\nWrapping and unwrapping keys\nSign and verify\nDeriving bits and keys\nDigest\nAlgorithm matrix\nClass: Crypto\ncrypto.subtle\ncrypto.getRandomValues(typedArray)\ncrypto.randomUUID()\nClass: CryptoKey\ncryptoKey.algorithm\ncryptoKey.extractable\ncryptoKey.type\ncryptoKey.usages\nClass: CryptoKeyPair\ncryptoKeyPair.privateKey\ncryptoKeyPair.publicKey\nClass: SubtleCrypto\nsubtle.decrypt(algorithm, key, data)\nsubtle.deriveBits(algorithm, baseKey, length)\nsubtle.deriveKey(algorithm, baseKey, derivedKeyAlgorithm, extractable, keyUsages)\nsubtle.digest(algorithm, data)\nsubtle.encrypt(algorithm, key, data)\nsubtle.exportKey(format, key)\nsubtle.generateKey(algorithm, extractable, keyUsages)\nsubtle.importKey(format, keyData, algorithm, extractable, keyUsages)\nsubtle.sign(algorithm, key, data)\nsubtle.unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgo, unwrappedKeyAlgo, extractable, keyUsages)\nsubtle.verify(algorithm, key, signature, data)\nsubtle.wrapKey(format, key, wrappingKey, wrapAlgo)\nAlgorithm parameters\nClass: AlgorithmIdentifier\nalgorithmIdentifier.name\nClass: AesCbcParams\naesCbcParams.iv\naesCbcParams.name\nClass: AesCtrParams\naesCtrParams.counter\naesCtrParams.length\naesCtrParams.name\nClass: AesGcmParams\naesGcmParams.additionalData\naesGcmParams.iv\naesGcmParams.name\naesGcmParams.tagLength\nClass: AesKeyGenParams\naesKeyGenParams.length\naesKeyGenParams.name\nClass: EcdhKeyDeriveParams\necdhKeyDeriveParams.name\necdhKeyDeriveParams.public\nClass: EcdsaParams\necdsaParams.hash\necdsaParams.name\nClass: EcKeyGenParams\necKeyGenParams.name\necKeyGenParams.namedCurve\nClass: EcKeyImportParams\necKeyImportParams.name\necKeyImportParams.namedCurve\nClass: Ed448Params\ned448Params.name\ned448Params.context\nClass: HkdfParams\nhkdfParams.hash\nhkdfParams.info\nhkdfParams.name\nhkdfParams.salt\nClass: HmacImportParams\nhmacImportParams.hash\nhmacImportParams.length\nhmacImportParams.name\nClass: HmacKeyGenParams\nhmacKeyGenParams.hash\nhmacKeyGenParams.length\nhmacKeyGenParams.name\nClass: Pbkdf2Params\npbkdb2Params.hash\npbkdf2Params.iterations\npbkdf2Params.name\npbkdf2Params.salt\nClass: RsaHashedImportParams\nrsaHashedImportParams.hash\nrsaHashedImportParams.name\nClass: RsaHashedKeyGenParams\nrsaHashedKeyGenParams.hash\nrsaHashedKeyGenParams.modulusLength\nrsaHashedKeyGenParams.name\nrsaHashedKeyGenParams.publicExponent\nClass:", "doc_id": "8aa94e6f-a752-4681-95ef-239a6c501d44", "embedding": null, "doc_hash": "2a1e1f4f2c503d770dc4255c01872306b2ed475cd40bdd1fcb56c96ea9b5b3b6", "extra_info": null, "node_info": {"start": 118234, "end": 120972}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "53821ca7-2228-4c01-b600-f51f66cfa78b", "3": "3b6adcea-e942-4ead-9bb3-83a4a96114f7"}}, "__type__": "1"}, "3b6adcea-e942-4ead-9bb3-83a4a96114f7": {"__data__": {"text": "HmacKeyGenParams\nhmacKeyGenParams.hash\nhmacKeyGenParams.length\nhmacKeyGenParams.name\nClass: Pbkdf2Params\npbkdb2Params.hash\npbkdf2Params.iterations\npbkdf2Params.name\npbkdf2Params.salt\nClass: RsaHashedImportParams\nrsaHashedImportParams.hash\nrsaHashedImportParams.name\nClass: RsaHashedKeyGenParams\nrsaHashedKeyGenParams.hash\nrsaHashedKeyGenParams.modulusLength\nrsaHashedKeyGenParams.name\nrsaHashedKeyGenParams.publicExponent\nClass: RsaOaepParams\nrsaOaepParams.label\nrsaOaepParams.name\nClass: RsaPssParams\nrsaPssParams.name\nrsaPssParams.saltLength\nWeb Streams API\nOverview\nExample ReadableStream\nAPI\nClass: ReadableStream\nnew ReadableStream([underlyingSource [, strategy]])\nreadableStream.locked\nreadableStream.cancel([reason])\nreadableStream.getReader([options])\nreadableStream.pipeThrough(transform[, options])\nreadableStream.pipeTo(destination[, options])\nreadableStream.tee()\nreadableStream.values([options])\nAsync Iteration\nTransferring with postMessage()\nClass: ReadableStreamDefaultReader\nnew ReadableStreamDefaultReader(stream)\nreadableStreamDefaultReader.cancel([reason])\nreadableStreamDefaultReader.closed\nreadableStreamDefaultReader.read()\nreadableStreamDefaultReader.releaseLock()\nClass: ReadableStreamBYOBReader\nnew ReadableStreamBYOBReader(stream)\nreadableStreamBYOBReader.cancel([reason])\nreadableStreamBYOBReader.closed\nreadableStreamBYOBReader.read(view)\nreadableStreamBYOBReader.releaseLock()\nClass: ReadableStreamDefaultController\nreadableStreamDefaultController.close()\nreadableStreamDefaultController.desiredSize\nreadableStreamDefaultController.enqueue([chunk])\nreadableStreamDefaultController.error([error])\nClass: ReadableByteStreamController\nreadableByteStreamController.byobRequest\nreadableByteStreamController.close()\nreadableByteStreamController.desiredSize\nreadableByteStreamController.enqueue(chunk)\nreadableByteStreamController.error([error])\nClass: ReadableStreamBYOBRequest\nreadableStreamBYOBRequest.respond(bytesWritten)\nreadableStreamBYOBRequest.respondWithNewView(view)\nreadableStreamBYOBRequest.view\nClass: WritableStream\nnew WritableStream([underlyingSink[, strategy]])\nwritableStream.abort([reason])\nwritableStream.close()\nwritableStream.getWriter()\nwritableStream.locked\nTransferring with postMessage()\nClass: WritableStreamDefaultWriter\nnew WritableStreamDefaultWriter(stream)\nwritableStreamDefaultWriter.abort([reason])\nwritableStreamDefaultWriter.close()\nwritableStreamDefaultWriter.closed\nwritableStreamDefaultWriter.desiredSize\nwritableStreamDefaultWriter.ready\nwritableStreamDefaultWriter.releaseLock()\nwritableStreamDefaultWriter.write([chunk])\nClass: WritableStreamDefaultController\nwritableStreamDefaultController.error([error])\nwritableStreamDefaultController.signal\nClass: TransformStream\nnew TransformStream([transformer[, writableStrategy[, readableStrategy]]])\ntransformStream.readable\ntransformStream.writable\nTransferring with postMessage()\nClass: TransformStreamDefaultController\ntransformStreamDefaultController.desiredSize\ntransformStreamDefaultController.enqueue([chunk])\ntransformStreamDefaultController.error([reason])\ntransformStreamDefaultController.terminate()\nClass: ByteLengthQueuingStrategy\nnew ByteLengthQueuingStrategy(options)\nbyteLengthQueuingStrategy.highWaterMark\nbyteLengthQueuingStrategy.size\nClass: CountQueuingStrategy\nnew CountQueuingStrategy(options)\ncountQueuingStrategy.highWaterMark\ncountQueuingStrategy.size\nClass: TextEncoderStream\nnew TextEncoderStream()\ntextEncoderStream.encoding\ntextEncoderStream.readable\ntextEncoderStream.writable\nClass: TextDecoderStream\nnew TextDecoderStream([encoding[,", "doc_id": "3b6adcea-e942-4ead-9bb3-83a4a96114f7", "embedding": null, "doc_hash": "e4ee8c2f59e2186d35058e9b6b0231720bd94c89e7dbdb6f97abd0c4d21860f6", "extra_info": null, "node_info": {"start": 121119, "end": 124694}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8aa94e6f-a752-4681-95ef-239a6c501d44", "3": "d2d34dfb-6ca0-4171-8d08-8a20f443709e"}}, "__type__": "1"}, "d2d34dfb-6ca0-4171-8d08-8a20f443709e": {"__data__": {"text": "with postMessage()\nClass: TransformStreamDefaultController\ntransformStreamDefaultController.desiredSize\ntransformStreamDefaultController.enqueue([chunk])\ntransformStreamDefaultController.error([reason])\ntransformStreamDefaultController.terminate()\nClass: ByteLengthQueuingStrategy\nnew ByteLengthQueuingStrategy(options)\nbyteLengthQueuingStrategy.highWaterMark\nbyteLengthQueuingStrategy.size\nClass: CountQueuingStrategy\nnew CountQueuingStrategy(options)\ncountQueuingStrategy.highWaterMark\ncountQueuingStrategy.size\nClass: TextEncoderStream\nnew TextEncoderStream()\ntextEncoderStream.encoding\ntextEncoderStream.readable\ntextEncoderStream.writable\nClass: TextDecoderStream\nnew TextDecoderStream([encoding[, options]])\ntextDecoderStream.encoding\ntextDecoderStream.fatal\ntextDecoderStream.ignoreBOM\ntextDecoderStream.readable\ntextDecoderStream.writable\nClass: CompressionStream\nnew CompressionStream(format)\ncompressionStream.readable\ncompressionStream.writable\nClass: DecompressionStream\nnew DecompressionStream(format)\ndecompressionStream.readable\ndecompressionStream.writable\nUtility Consumers\nstreamConsumers.arrayBuffer(stream)\nstreamConsumers.blob(stream)\nstreamConsumers.buffer(stream)\nstreamConsumers.json(stream)\nstreamConsumers.text(stream)\nWorker threads\nworker.getEnvironmentData(key)\nworker.isMainThread\nworker.markAsUntransferable(object)\nworker.moveMessagePortToContext(port, contextifiedSandbox)\nworker.parentPort\nworker.receiveMessageOnPort(port)\nworker.resourceLimits\nworker.SHARE_ENV\nworker.setEnvironmentData(key[, value])\nworker.threadId\nworker.workerData\nClass: BroadcastChannel extends EventTarget\nnew BroadcastChannel(name)\nbroadcastChannel.close()\nbroadcastChannel.onmessage\nbroadcastChannel.onmessageerror\nbroadcastChannel.postMessage(message)\nbroadcastChannel.ref()\nbroadcastChannel.unref()\nClass: MessageChannel\nClass: MessagePort\nEvent: 'close'\nEvent: 'message'\nEvent: 'messageerror'\nport.close()\nport.postMessage(value[, transferList])\nConsiderations when transferring TypedArrays and Buffers\nConsiderations when cloning objects with prototypes, classes, and accessors\nport.hasRef()\nport.ref()\nport.start()\nport.unref()\nClass: Worker\nnew Worker(filename[, options])\nEvent: 'error'\nEvent: 'exit'\nEvent: 'message'\nEvent: 'messageerror'\nEvent: 'online'\nworker.getHeapSnapshot()\nworker.performance\nperformance.eventLoopUtilization([utilization1[, utilization2]])\nworker.postMessage(value[, transferList])\nworker.ref()\nworker.resourceLimits\nworker.stderr\nworker.stdin\nworker.stdout\nworker.terminate()\nworker.threadId\nworker.unref()\nNotes\nSynchronous blocking of stdio\nLaunching worker threads from preload scripts\nZlib\nThreadpool usage and performance considerations\nCompressing HTTP requests and responses\nMemory usage tuning\nFor zlib-based streams\nFor Brotli-based streams\nFlushing\nConstants\nzlib constants\nBrotli constants\nFlush operations\nCompressor options\nDecompressor options\nClass: Options\nClass: BrotliOptions\nClass: zlib.BrotliCompress\nClass: zlib.BrotliDecompress\nClass: zlib.Deflate\nClass: zlib.DeflateRaw\nClass: zlib.Gunzip\nClass: zlib.Gzip\nClass: zlib.Inflate\nClass: zlib.InflateRaw\nClass: zlib.Unzip\nClass: zlib.ZlibBase\nzlib.bytesRead\nzlib.bytesWritten\nzlib.close([callback])\nzlib.flush([kind, ]callback)\nzlib.params(level, strategy,", "doc_id": "d2d34dfb-6ca0-4171-8d08-8a20f443709e", "embedding": null, "doc_hash": "a475e9391be9454fc14a19614d4f33f266de0b9a42d917e89da5247a0c143154", "extra_info": null, "node_info": {"start": 124428, "end": 127696}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3b6adcea-e942-4ead-9bb3-83a4a96114f7", "3": "afbd573c-60b6-43d6-b53e-9317061fc681"}}, "__type__": "1"}, "afbd573c-60b6-43d6-b53e-9317061fc681": {"__data__": {"text": "responses\nMemory usage tuning\nFor zlib-based streams\nFor Brotli-based streams\nFlushing\nConstants\nzlib constants\nBrotli constants\nFlush operations\nCompressor options\nDecompressor options\nClass: Options\nClass: BrotliOptions\nClass: zlib.BrotliCompress\nClass: zlib.BrotliDecompress\nClass: zlib.Deflate\nClass: zlib.DeflateRaw\nClass: zlib.Gunzip\nClass: zlib.Gzip\nClass: zlib.Inflate\nClass: zlib.InflateRaw\nClass: zlib.Unzip\nClass: zlib.ZlibBase\nzlib.bytesRead\nzlib.bytesWritten\nzlib.close([callback])\nzlib.flush([kind, ]callback)\nzlib.params(level, strategy, callback)\nzlib.reset()\nzlib.constants\nzlib.createBrotliCompress([options])\nzlib.createBrotliDecompress([options])\nzlib.createDeflate([options])\nzlib.createDeflateRaw([options])\nzlib.createGunzip([options])\nzlib.createGzip([options])\nzlib.createInflate([options])\nzlib.createInflateRaw([options])\nzlib.createUnzip([options])\nConvenience methods\nzlib.brotliCompress(buffer[, options], callback)\nzlib.brotliCompressSync(buffer[, options])\nzlib.brotliDecompress(buffer[, options], callback)\nzlib.brotliDecompressSync(buffer[, options])\nzlib.deflate(buffer[, options], callback)\nzlib.deflateSync(buffer[, options])\nzlib.deflateRaw(buffer[, options], callback)\nzlib.deflateRawSync(buffer[, options])\nzlib.gunzip(buffer[, options], callback)\nzlib.gunzipSync(buffer[, options])\nzlib.gzip(buffer[, options], callback)\nzlib.gzipSync(buffer[, options])\nzlib.inflate(buffer[, options], callback)\nzlib.inflateSync(buffer[, options])\nzlib.inflateRaw(buffer[, options], callback)\nzlib.inflateRawSync(buffer[, options])\nzlib.unzip(buffer[, options], callback)\nzlib.unzipSync(buffer[, options])\n\nAbout this documentation#\nWelcome to the official API reference documentation for Node.js!\n\nNode.js is a JavaScript runtime built on the V8 JavaScript engine.\n\nContributing#\nReport errors in this documentation in the issue tracker. See the contributing guide for directions on how to submit pull requests.\n\nStability index#\nThroughout the documentation are indications of a section's stability. Some APIs are so proven and so relied upon that they are unlikely to ever change at all. Others are brand new and experimental, or known to be hazardous.\n\nThe stability indices are as follows:\n\nStability: 0 - Deprecated. The feature may emit warnings. Backward compatibility is not guaranteed.\nStability: 1 - Experimental. The feature is not subject to semantic versioning rules. Non-backward compatible changes or removal may occur in any future release. Use of the feature is not recommended in production environments.\nStability: 2 - Stable. Compatibility with the npm ecosystem is a high priority.\nStability: 3 - Legacy. Although this feature is unlikely to be removed and is still covered by semantic versioning guarantees, it is no longer actively maintained, and other alternatives are available.\nFeatures are marked as legacy rather than being deprecated if their use does no harm, and they are widely relied upon within the npm ecosystem. Bugs found in legacy features are unlikely to be fixed.\n\nUse caution when making use of Experimental features, particularly within modules. Users may not be aware that experimental features are being used. Bugs or behavior changes may surprise users when Experimental API modifications occur. To avoid surprises, use of an Experimental feature may need a command-line flag. Experimental features may also emit a warning.\n\nStability overview#\nJSON output#\nAdded in:", "doc_id": "afbd573c-60b6-43d6-b53e-9317061fc681", "embedding": null, "doc_hash": "d85c02102393dee6c7030d7ced5b2d4a8474faa47c0f342152ea3c7b5c95dc77", "extra_info": null, "node_info": {"start": 127862, "end": 131301}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d2d34dfb-6ca0-4171-8d08-8a20f443709e", "3": "b5935bc4-3437-424d-910d-6c8efa48376c"}}, "__type__": "1"}, "b5935bc4-3437-424d-910d-6c8efa48376c": {"__data__": {"text": "npm ecosystem is a high priority.\nStability: 3 - Legacy. Although this feature is unlikely to be removed and is still covered by semantic versioning guarantees, it is no longer actively maintained, and other alternatives are available.\nFeatures are marked as legacy rather than being deprecated if their use does no harm, and they are widely relied upon within the npm ecosystem. Bugs found in legacy features are unlikely to be fixed.\n\nUse caution when making use of Experimental features, particularly within modules. Users may not be aware that experimental features are being used. Bugs or behavior changes may surprise users when Experimental API modifications occur. To avoid surprises, use of an Experimental feature may need a command-line flag. Experimental features may also emit a warning.\n\nStability overview#\nJSON output#\nAdded in: v0.6.12\nEvery .html document has a corresponding .json document. This is for IDEs and other utilities that consume the documentation.\n\nSystem calls and man pages#\nNode.js functions which wrap a system call will document that. The docs link to the corresponding man pages which describe how the system call works.\n\nMost Unix system calls have Windows analogues. Still, behavior differences may be unavoidable.\n\nUsage and example#\nUsage#\nnode [options] [V8 options] [script.js | -e \"script\" | - ] [arguments]\n\nPlease see the Command-line options document for more information.\n\nExample#\nAn example of a web server written with Node.js which responds with 'Hello, World!':\n\nCommands in this document start with $ or > to replicate how they would appear in a user's terminal. Do not include the $ and > characters. They are there to show the start of each command.\n\nLines that don't start with $ or > character show the output of the previous command.\n\nFirst, make sure to have downloaded and installed Node.js. See Installing Node.js via package manager for further install information.\n\nNow, create an empty project folder called projects, then navigate into it.\n\nLinux and Mac:\n\n$ mkdir ~/projects\n$ cd ~/projects\nWindows CMD:\n\n> mkdir %USERPROFILE%\\projects\n> cd %USERPROFILE%\\projects\nWindows PowerShell:\n\n> mkdir $env:USERPROFILE\\projects\n> cd $env:USERPROFILE\\projects\nNext, create a new source file in the projects folder and call it hello-world.js.\n\nOpen hello-world.js in any preferred text editor and paste in the following content:\n\nconst http = require('node:http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, World!\\n');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\nSave the file, go back to the terminal window, and enter the following command:\n\n$ node hello-world.js\nOutput like this should appear in the terminal:\n\nServer running at http://127.0.0.1:3000/\nNow, open any preferred web browser and visit http://127.0.0.1:3000.\n\nIf the browser displays the string Hello, World!, that indicates the server is working.\n\nAssert#\nStability: 2 - Stable\nSource Code: lib/assert.js\n\nThe node:assert module provides a set of assertion functions for verifying invariants.\n\nStrict assertion mode#\nHistory\nIn strict assertion mode, non-strict methods behave like their corresponding strict methods. For example, assert.deepEqual() will behave like assert.deepStrictEqual().\n\nIn strict assertion mode, error messages for objects display a diff. In legacy assertion mode, error messages for objects display the objects, often truncated.\n\nTo use strict assertion mode:\n\nimport { strict as assert } from 'node:assert';\nimport assert from", "doc_id": "b5935bc4-3437-424d-910d-6c8efa48376c", "embedding": null, "doc_hash": "17b61a8170b70a860783517532d68cea13f4857a7aebbea2a0c1146520ea64c9", "extra_info": null, "node_info": {"start": 131110, "end": 134799}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "afbd573c-60b6-43d6-b53e-9317061fc681", "3": "8d400fff-6f48-490d-b82b-e90bcb2067df"}}, "__type__": "1"}, "8d400fff-6f48-490d-b82b-e90bcb2067df": {"__data__": {"text": "the browser displays the string Hello, World!, that indicates the server is working.\n\nAssert#\nStability: 2 - Stable\nSource Code: lib/assert.js\n\nThe node:assert module provides a set of assertion functions for verifying invariants.\n\nStrict assertion mode#\nHistory\nIn strict assertion mode, non-strict methods behave like their corresponding strict methods. For example, assert.deepEqual() will behave like assert.deepStrictEqual().\n\nIn strict assertion mode, error messages for objects display a diff. In legacy assertion mode, error messages for objects display the objects, often truncated.\n\nTo use strict assertion mode:\n\nimport { strict as assert } from 'node:assert';\nimport assert from 'node:assert/strict';\nExample error diff:\n\nimport { strict as assert } from 'node:assert';\n\nassert.deepEqual([[[1, 2, 3]], 4, 5], [[[1, 2, '3']], 4, 5]);\n// AssertionError: Expected inputs to be strictly deep-equal:\n// + actual - expected ... Lines skipped\n//\n//   [\n//     [\n// ...\n//       2,\n// +     3\n// -     '3'\n//     ],\n// ...\n//     5\n//   ]\nTo deactivate the colors, use the NO_COLOR or NODE_DISABLE_COLORS environment variables. This will also deactivate the colors in the REPL. For more on color support in terminal environments, read the tty getColorDepth() documentation.\n\nLegacy assertion mode#\nLegacy assertion mode uses the == operator in:\n\nassert.deepEqual()\nassert.equal()\nassert.notDeepEqual()\nassert.notEqual()\nTo use legacy assertion mode:\n\nimport assert from 'node:assert';\nLegacy assertion mode may have surprising results, especially when using assert.deepEqual():\n\n// WARNING: This does not throw an AssertionError in legacy assertion mode!\nassert.deepEqual(/a/gi, new Date());\nClass: assert.AssertionError[src]#\nExtends: <errors.Error>\nIndicates the failure of an assertion. All errors thrown by the node:assert module will be instances of the AssertionError class.\n\nnew assert.AssertionError(options)#\nAdded in: v0.1.21\noptions <Object>\nmessage <string> If provided, the error message is set to this value.\nactual <any> The actual property on the error instance.\nexpected <any> The expected property on the error instance.\noperator <string> The operator property on the error instance.\nstackStartFn <Function> If provided, the generated stack trace omits frames before this function.\nA subclass of Error that indicates the failure of an assertion.\n\nAll instances contain the built-in Error properties (message and name) and:\n\nactual <any> Set to the actual argument for methods such as assert.strictEqual().\nexpected <any> Set to the expected value for methods such as assert.strictEqual().\ngeneratedMessage <boolean> Indicates if the message was auto-generated (true) or not.\ncode <string> Value is always ERR_ASSERTION to show that the error is an assertion error.\noperator <string> Set to the passed in operator value.\nimport assert from 'node:assert';\n\n// Generate an AssertionError to compare the error message later:\nconst { message } = new assert.AssertionError({\n  actual: 1,\n  expected: 2,\n  operator: 'strictEqual',\n});\n\n// Verify error output:\ntry {\n  assert.strictEqual(1, 2);\n} catch (err) {\n  assert(err instanceof assert.AssertionError);\n  assert.strictEqual(err.message, message);\n  assert.strictEqual(err.name, 'AssertionError');\n  assert.strictEqual(err.actual, 1);\n  assert.strictEqual(err.expected, 2);\n  assert.strictEqual(err.code,", "doc_id": "8d400fff-6f48-490d-b82b-e90bcb2067df", "embedding": null, "doc_hash": "575b24de4e0b782e1bf87874c0e4bc83997ece0de30d2eefb782617603119283", "extra_info": null, "node_info": {"start": 134913, "end": 138286}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b5935bc4-3437-424d-910d-6c8efa48376c", "3": "869cdb80-4b6d-4b7c-ae94-851f2aae8e6c"}}, "__type__": "1"}, "869cdb80-4b6d-4b7c-ae94-851f2aae8e6c": {"__data__": {"text": "<string> Set to the passed in operator value.\nimport assert from 'node:assert';\n\n// Generate an AssertionError to compare the error message later:\nconst { message } = new assert.AssertionError({\n  actual: 1,\n  expected: 2,\n  operator: 'strictEqual',\n});\n\n// Verify error output:\ntry {\n  assert.strictEqual(1, 2);\n} catch (err) {\n  assert(err instanceof assert.AssertionError);\n  assert.strictEqual(err.message, message);\n  assert.strictEqual(err.name, 'AssertionError');\n  assert.strictEqual(err.actual, 1);\n  assert.strictEqual(err.expected, 2);\n  assert.strictEqual(err.code, 'ERR_ASSERTION');\n  assert.strictEqual(err.operator, 'strictEqual');\n  assert.strictEqual(err.generatedMessage, true);\n}\nClass: assert.CallTracker#\nAdded in: v14.2.0, v12.19.0\nStability: 1 - Experimental\nThis feature is currently experimental and behavior might still change.\n\nnew assert.CallTracker()#\nAdded in: v14.2.0, v12.19.0\nCreates a new CallTracker object which can be used to track if functions were called a specific number of times. The tracker.verify() must be called for the verification to take place. The usual pattern would be to call it in a process.on('exit') handler.\n\nimport assert from 'node:assert';\nimport process from 'node:process';\n\nconst tracker = new assert.CallTracker();\n\nfunction func() {}\n\n// callsfunc() must be called exactly 1 time before tracker.verify().\nconst callsfunc = tracker.calls(func, 1);\n\ncallsfunc();\n\n// Calls tracker.verify() and verifies if all tracker.calls() functions have\n// been called exact times.\nprocess.on('exit', () => {\n  tracker.verify();\n});\ntracker.calls([fn][, exact])#\nAdded in: v14.2.0, v12.19.0\nfn <Function> Default: A no-op function.\nexact <number> Default: 1.\nReturns: <Function> that wraps fn.\nThe wrapper function is expected to be called exactly exact times. If the function has not been called exactly exact times when tracker.verify() is called, then tracker.verify() will throw an error.\n\nimport assert from 'node:assert';\n\n// Creates call tracker.\nconst tracker = new assert.CallTracker();\n\nfunction func() {}\n\n// Returns a function that wraps func() that must be called exact times\n// before tracker.verify().\nconst callsfunc = tracker.calls(func);\ntracker.getCalls(fn)#\nAdded in: v18.8.0\nfn <Function>.\n\nReturns: <Array> with all the calls to a tracked function.\n\nObject <Object>\n\nthisArg <Object>\narguments <Array> the arguments passed to the tracked function\nimport assert from 'node:assert';\n\nconst tracker = new assert.CallTracker();\n\nfunction func() {}\nconst callsfunc = tracker.calls(func);\ncallsfunc(1, 2, 3);\n\nassert.deepStrictEqual(tracker.getCalls(callsfunc),\n                       [{ thisArg: this, arguments: [1, 2, 3 ] }]);\ntracker.report()#\nAdded in: v14.2.0, v12.19.0\nReturns: <Array> of objects containing information about the wrapper functions returned by tracker.calls().\nObject <Object>\nmessage <string>\nactual <number> The actual number of times the function was called.\nexpected <number> The number of times the function was expected to be called.\noperator <string> The name of the function that is wrapped.\nstack <Object> A stack trace of the function.\nThe arrays contains information about the expected and actual number of", "doc_id": "869cdb80-4b6d-4b7c-ae94-851f2aae8e6c", "embedding": null, "doc_hash": "fdf3bc7dd19564e0bcf9af65dcc2e3cbb62d780e75b20150aa527ebd3ee9314c", "extra_info": null, "node_info": {"start": 138378, "end": 141584}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8d400fff-6f48-490d-b82b-e90bcb2067df", "3": "fca743f9-4150-4029-bbd7-315c75e12906"}}, "__type__": "1"}, "fca743f9-4150-4029-bbd7-315c75e12906": {"__data__": {"text": "2, 3);\n\nassert.deepStrictEqual(tracker.getCalls(callsfunc),\n                       [{ thisArg: this, arguments: [1, 2, 3 ] }]);\ntracker.report()#\nAdded in: v14.2.0, v12.19.0\nReturns: <Array> of objects containing information about the wrapper functions returned by tracker.calls().\nObject <Object>\nmessage <string>\nactual <number> The actual number of times the function was called.\nexpected <number> The number of times the function was expected to be called.\noperator <string> The name of the function that is wrapped.\nstack <Object> A stack trace of the function.\nThe arrays contains information about the expected and actual number of calls of the functions that have not been called the expected number of times.\n\nimport assert from 'node:assert';\n\n// Creates call tracker.\nconst tracker = new assert.CallTracker();\n\nfunction func() {}\n\n// Returns a function that wraps func() that must be called exact times\n// before tracker.verify().\nconst callsfunc = tracker.calls(func, 2);\n\n// Returns an array containing information on callsfunc()\ntracker.report();\n// [\n//  {\n//    message: 'Expected the func function to be executed 2 time(s) but was\n//    executed 0 time(s).',\n//    actual: 0,\n//    expected: 2,\n//    operator: 'func',\n//    stack: stack trace\n//  }\n// ]\ntracker.reset([fn])#\nAdded in: v18.8.0\nfn <Function> a tracked function to reset.\nreset calls of the call tracker. if a tracked function is passed as an argument, the calls will be reset for it. if no arguments are passed, all tracked functions will be reset\n\nimport assert from 'node:assert';\n\nconst tracker = new assert.CallTracker();\n\nfunction func() {}\nconst callsfunc = tracker.calls(func);\n\ncallsfunc();\n// Tracker was called once\ntracker.getCalls(callsfunc).length === 1;\n\ntracker.reset(callsfunc);\ntracker.getCalls(callsfunc).length === 0;\ntracker.verify()#\nAdded in: v14.2.0, v12.19.0\nIterates through the list of functions passed to tracker.calls() and will throw an error for functions that have not been called the expected number of times.\n\nimport assert from 'node:assert';\n\n// Creates call tracker.\nconst tracker = new assert.CallTracker();\n\nfunction func() {}\n\n// Returns a function that wraps func() that must be called exact times\n// before tracker.verify().\nconst callsfunc = tracker.calls(func, 2);\n\ncallsfunc();\n\n// Will throw an error since callsfunc() was only called once.\ntracker.verify();\nassert(value[, message])#\nAdded in: v0.5.9\nvalue <any> The input that is checked for being truthy.\nmessage <string> | <Error>\nAn alias of assert.ok().\n\nassert.deepEqual(actual, expected[, message])#\nHistory\nactual <any>\nexpected <any>\nmessage <string> | <Error>\nStrict assertion mode\n\nAn alias of assert.deepStrictEqual().\n\nLegacy assertion mode\n\nStability: 3 - Legacy: Use assert.deepStrictEqual() instead.\nTests for deep equality between the actual and expected parameters. Consider using assert.deepStrictEqual() instead. assert.deepEqual() can have surprising results.\n\nDeep equality means that the enumerable \"own\" properties of child objects are also recursively evaluated by the following rules.\n\nComparison details#\nPrimitive values are compared with the == operator, with the exception of NaN. It is treated as being identical in case both sides are NaN.\nType tags of objects should be the same.\nOnly enumerable \"own\" properties are considered.\nError names and messages are", "doc_id": "fca743f9-4150-4029-bbd7-315c75e12906", "embedding": null, "doc_hash": "9708f371133614a24ff7bcf3f4d387f1534234eb98aab97285cb3ffd08489c12", "extra_info": null, "node_info": {"start": 141559, "end": 144928}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "869cdb80-4b6d-4b7c-ae94-851f2aae8e6c", "3": "26c602bf-93ed-45b1-bd18-dc283b8e968c"}}, "__type__": "1"}, "26c602bf-93ed-45b1-bd18-dc283b8e968c": {"__data__": {"text": "<any>\nmessage <string> | <Error>\nStrict assertion mode\n\nAn alias of assert.deepStrictEqual().\n\nLegacy assertion mode\n\nStability: 3 - Legacy: Use assert.deepStrictEqual() instead.\nTests for deep equality between the actual and expected parameters. Consider using assert.deepStrictEqual() instead. assert.deepEqual() can have surprising results.\n\nDeep equality means that the enumerable \"own\" properties of child objects are also recursively evaluated by the following rules.\n\nComparison details#\nPrimitive values are compared with the == operator, with the exception of NaN. It is treated as being identical in case both sides are NaN.\nType tags of objects should be the same.\nOnly enumerable \"own\" properties are considered.\nError names and messages are always compared, even if these are not enumerable properties.\nObject wrappers are compared both as objects and unwrapped values.\nObject properties are compared unordered.\nMap keys and Set items are compared unordered.\nRecursion stops when both sides differ or both sides encounter a circular reference.\nImplementation does not test the [[Prototype]] of objects.\nSymbol properties are not compared.\nWeakMap and WeakSet comparison does not rely on their values.\nRegExp lastIndex, flags, and source are always compared, even if these are not enumerable properties.\nThe following example does not throw an AssertionError because the primitives are compared using the == operator.\n\nimport assert from 'node:assert';\n// WARNING: This does not throw an AssertionError!\n\nassert.deepEqual('+00000000', false);\n\"Deep\" equality means that the enumerable \"own\" properties of child objects are evaluated also:\n\nimport assert from 'node:assert';\n\nconst obj1 = {\n  a: {\n    b: 1,\n  },\n};\nconst obj2 = {\n  a: {\n    b: 2,\n  },\n};\nconst obj3 = {\n  a: {\n    b: 1,\n  },\n};\nconst obj4 = Object.create(obj1);\n\nassert.deepEqual(obj1, obj1);\n// OK\n\n// Values of b are different:\nassert.deepEqual(obj1, obj2);\n// AssertionError: { a: { b: 1 } } deepEqual { a: { b: 2 } }\n\nassert.deepEqual(obj1, obj3);\n// OK\n\n// Prototypes are ignored:\nassert.deepEqual(obj1, obj4);\n// AssertionError: { a: { b: 1 } } deepEqual {}\nIf the values are not equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError.\n\nassert.deepStrictEqual(actual, expected[, message])#\nHistory\nactual <any>\nexpected <any>\nmessage <string> | <Error>\nTests for deep equality between the actual and expected parameters. \"Deep\" equality means that the enumerable \"own\" properties of child objects are recursively evaluated also by the following rules.\n\nComparison details#\nPrimitive values are compared using Object.is().\nType tags of objects should be the same.\n[[Prototype]] of objects are compared using the === operator.\nOnly enumerable \"own\" properties are considered.\nError names and messages are always compared, even if these are not enumerable properties.\nEnumerable own Symbol properties are compared as well.\nObject wrappers are compared both as objects and unwrapped values.\nObject properties are compared unordered.\nMap keys and Set items are compared unordered.\nRecursion stops when both sides differ or both sides encounter a circular reference.\nWeakMap and WeakSet comparison does not rely on their values. See below for further details.\nRegExp lastIndex, flags, and source are always compared, even if these are not enumerable properties.\nimport assert from 'node:assert/strict';\n\n// This fails because 1 !== '1'.\nassert.deepStrictEqual({", "doc_id": "26c602bf-93ed-45b1-bd18-dc283b8e968c", "embedding": null, "doc_hash": "4008f310bb41212026c57ae70541077306bce8ddeea4e551e18a7fa664a92237", "extra_info": null, "node_info": {"start": 144810, "end": 148484}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fca743f9-4150-4029-bbd7-315c75e12906", "3": "44d1374f-4029-415c-af34-4139b183b81b"}}, "__type__": "1"}, "44d1374f-4029-415c-af34-4139b183b81b": {"__data__": {"text": "of objects are compared using the === operator.\nOnly enumerable \"own\" properties are considered.\nError names and messages are always compared, even if these are not enumerable properties.\nEnumerable own Symbol properties are compared as well.\nObject wrappers are compared both as objects and unwrapped values.\nObject properties are compared unordered.\nMap keys and Set items are compared unordered.\nRecursion stops when both sides differ or both sides encounter a circular reference.\nWeakMap and WeakSet comparison does not rely on their values. See below for further details.\nRegExp lastIndex, flags, and source are always compared, even if these are not enumerable properties.\nimport assert from 'node:assert/strict';\n\n// This fails because 1 !== '1'.\nassert.deepStrictEqual({ a: 1 }, { a: '1' });\n// AssertionError: Expected inputs to be strictly deep-equal:\n// + actual - expected\n//\n//   {\n// +   a: 1\n// -   a: '1'\n//   }\n\n// The following objects don't have own properties\nconst date = new Date();\nconst object = {};\nconst fakeDate = {};\nObject.setPrototypeOf(fakeDate, Date.prototype);\n\n// Different [[Prototype]]:\nassert.deepStrictEqual(object, fakeDate);\n// AssertionError: Expected inputs to be strictly deep-equal:\n// + actual - expected\n//\n// + {}\n// - Date {}\n\n// Different type tags:\nassert.deepStrictEqual(date, fakeDate);\n// AssertionError: Expected inputs to be strictly deep-equal:\n// + actual - expected\n//\n// + 2018-04-26T00:49:08.604Z\n// - Date {}\n\nassert.deepStrictEqual(NaN, NaN);\n// OK because Object.is(NaN, NaN) is true.\n\n// Different unwrapped numbers:\nassert.deepStrictEqual(new Number(1), new Number(2));\n// AssertionError: Expected inputs to be strictly deep-equal:\n// + actual - expected\n//\n// + [Number: 1]\n// - [Number: 2]\n\nassert.deepStrictEqual(new String('foo'), Object('foo'));\n// OK because the object and the string are identical when unwrapped.\n\nassert.deepStrictEqual(-0, -0);\n// OK\n\n// Different zeros:\nassert.deepStrictEqual(0, -0);\n// AssertionError: Expected inputs to be strictly deep-equal:\n// + actual - expected\n//\n// + 0\n// - -0\n\nconst symbol1 = Symbol();\nconst symbol2 = Symbol();\nassert.deepStrictEqual({ [symbol1]: 1 }, { [symbol1]: 1 });\n// OK, because it is the same symbol on both objects.\n\nassert.deepStrictEqual({ [symbol1]: 1 }, { [symbol2]: 1 });\n// AssertionError [ERR_ASSERTION]: Inputs identical but not reference equal:\n//\n// {\n//   [Symbol()]: 1\n// }\n\nconst weakMap1 = new WeakMap();\nconst weakMap2 = new WeakMap([[{}, {}]]);\nconst weakMap3 = new WeakMap();\nweakMap3.unequal = true;\n\nassert.deepStrictEqual(weakMap1, weakMap2);\n// OK, because it is impossible to compare the entries\n\n// Fails because weakMap3 has a property that weakMap1 does not contain:\nassert.deepStrictEqual(weakMap1, weakMap3);\n// AssertionError: Expected inputs to be strictly deep-equal:\n// + actual - expected\n//\n//   WeakMap {\n// +   [items unknown]\n// -   [items unknown],\n// -   unequal: true\n//   }\nIf the values are not equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message", "doc_id": "44d1374f-4029-415c-af34-4139b183b81b", "embedding": null, "doc_hash": "4434077021905575d166cf9a1a3d9461de9eaad498f662f6574e109ad2abf8d2", "extra_info": null, "node_info": {"start": 148468, "end": 151633}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "26c602bf-93ed-45b1-bd18-dc283b8e968c", "3": "5715ec9a-836a-44bd-a60d-224ea5904c28"}}, "__type__": "1"}, "5715ec9a-836a-44bd-a60d-224ea5904c28": {"__data__": {"text": "= true;\n\nassert.deepStrictEqual(weakMap1, weakMap2);\n// OK, because it is impossible to compare the entries\n\n// Fails because weakMap3 has a property that weakMap1 does not contain:\nassert.deepStrictEqual(weakMap1, weakMap3);\n// AssertionError: Expected inputs to be strictly deep-equal:\n// + actual - expected\n//\n//   WeakMap {\n// +   [items unknown]\n// -   [items unknown],\n// -   unequal: true\n//   }\nIf the values are not equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError.\n\nassert.doesNotMatch(string, regexp[, message])#\nHistory\nstring <string>\nregexp <RegExp>\nmessage <string> | <Error>\nExpects the string input not to match the regular expression.\n\nimport assert from 'node:assert/strict';\n\nassert.doesNotMatch('I will fail', /fail/);\n// AssertionError [ERR_ASSERTION]: The input was expected to not match the ...\n\nassert.doesNotMatch(123, /pass/);\n// AssertionError [ERR_ASSERTION]: The \"string\" argument must be of type string.\n\nassert.doesNotMatch('I will pass', /different/);\n// OK\nIf the values do match, or if the string argument is of another type than string, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError.\n\nassert.doesNotReject(asyncFn[, error][, message])#\nAdded in: v10.0.0\nasyncFn <Function> | <Promise>\nerror <RegExp> | <Function>\nmessage <string>\nAwaits the asyncFn promise or, if asyncFn is a function, immediately calls the function and awaits the returned promise to complete. It will then check that the promise is not rejected.\n\nIf asyncFn is a function and it throws an error synchronously, assert.doesNotReject() will return a rejected Promise with that error. If the function does not return a promise, assert.doesNotReject() will return a rejected Promise with an ERR_INVALID_RETURN_VALUE error. In both cases the error handler is skipped.\n\nUsing assert.doesNotReject() is actually not useful because there is little benefit in catching a rejection and then rejecting it again. Instead, consider adding a comment next to the specific code path that should not reject and keep error messages as expressive as possible.\n\nIf specified, error can be a Class, RegExp, or a validation function. See assert.throws() for more details.\n\nBesides the async nature to await the completion behaves identically to assert.doesNotThrow().\n\nimport assert from 'node:assert/strict';\n\nawait assert.doesNotReject(\n  async () => {\n    throw new TypeError('Wrong value');\n  },\n  SyntaxError,\n);\nimport assert from 'node:assert/strict';\n\nassert.doesNotReject(Promise.reject(new TypeError('Wrong value')))\n  .then(() => {\n    // ...\n  });\nassert.doesNotThrow(fn[, error][, message])#\nHistory\nfn <Function>\nerror <RegExp> | <Function>\nmessage <string>\nAsserts that the function fn does not throw an error.\n\nUsing assert.doesNotThrow() is actually not useful because there is no benefit in catching an error and then rethrowing it. Instead, consider adding a comment next to the specific code path that should not throw and keep error messages as expressive as possible.\n\nWhen assert.doesNotThrow() is called, it will immediately call the fn function.\n\nIf an error is thrown and", "doc_id": "5715ec9a-836a-44bd-a60d-224ea5904c28", "embedding": null, "doc_hash": "bc2f661b0ed27145dcb08f7050f9aabc097d9855ffce5cf9484282935846c276", "extra_info": null, "node_info": {"start": 151780, "end": 155337}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "44d1374f-4029-415c-af34-4139b183b81b", "3": "1f74766a-82e7-4f38-8af0-1912e7dacc72"}}, "__type__": "1"}, "1f74766a-82e7-4f38-8af0-1912e7dacc72": {"__data__": {"text": " SyntaxError,\n);\nimport assert from 'node:assert/strict';\n\nassert.doesNotReject(Promise.reject(new TypeError('Wrong value')))\n  .then(() => {\n    // ...\n  });\nassert.doesNotThrow(fn[, error][, message])#\nHistory\nfn <Function>\nerror <RegExp> | <Function>\nmessage <string>\nAsserts that the function fn does not throw an error.\n\nUsing assert.doesNotThrow() is actually not useful because there is no benefit in catching an error and then rethrowing it. Instead, consider adding a comment next to the specific code path that should not throw and keep error messages as expressive as possible.\n\nWhen assert.doesNotThrow() is called, it will immediately call the fn function.\n\nIf an error is thrown and it is the same type as that specified by the error parameter, then an AssertionError is thrown. If the error is of a different type, or if the error parameter is undefined, the error is propagated back to the caller.\n\nIf specified, error can be a Class, RegExp, or a validation function. See assert.throws() for more details.\n\nThe following, for instance, will throw the TypeError because there is no matching error type in the assertion:\n\nimport assert from 'node:assert/strict';\n\nassert.doesNotThrow(\n  () => {\n    throw new TypeError('Wrong value');\n  },\n  SyntaxError,\n);\nHowever, the following will result in an AssertionError with the message 'Got unwanted exception...':\n\nimport assert from 'node:assert/strict';\n\nassert.doesNotThrow(\n  () => {\n    throw new TypeError('Wrong value');\n  },\n  TypeError,\n);\nIf an AssertionError is thrown and a value is provided for the message parameter, the value of message will be appended to the AssertionError message:\n\nimport assert from 'node:assert/strict';\n\nassert.doesNotThrow(\n  () => {\n    throw new TypeError('Wrong value');\n  },\n  /Wrong value/,\n  'Whoops',\n);\n// Throws: AssertionError: Got unwanted exception: Whoops\nassert.equal(actual, expected[, message])#\nHistory\nactual <any>\nexpected <any>\nmessage <string> | <Error>\nStrict assertion mode\n\nAn alias of assert.strictEqual().\n\nLegacy assertion mode\n\nStability: 3 - Legacy: Use assert.strictEqual() instead.\nTests shallow, coercive equality between the actual and expected parameters using the == operator. NaN is specially handled and treated as being identical if both sides are NaN.\n\nimport assert from 'node:assert';\n\nassert.equal(1, 1);\n// OK, 1 == 1\nassert.equal(1, '1');\n// OK, 1 == '1'\nassert.equal(NaN, NaN);\n// OK\n\nassert.equal(1, 2);\n// AssertionError: 1 == 2\nassert.equal({ a: { b: 1 } }, { a: { b: 1 } });\n// AssertionError: { a: { b: 1 } } == { a: { b: 1 } }\nIf the values are not equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError.\n\nassert.fail([message])#\nAdded in: v0.1.21\nmessage <string> | <Error> Default: 'Failed'\nThrows an AssertionError with the provided error message or a default error message. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError.\n\nimport assert from 'node:assert/strict';\n\nassert.fail();\n// AssertionError [ERR_ASSERTION]: Failed\n\nassert.fail('boom');\n// AssertionError [ERR_ASSERTION]: boom\n\nassert.fail(new TypeError('need", "doc_id": "1f74766a-82e7-4f38-8af0-1912e7dacc72", "embedding": null, "doc_hash": "547fe4b7adeb668551dabf3fa76bed92fd2663121c5e285cab0d650429ba5e37", "extra_info": null, "node_info": {"start": 155262, "end": 158626}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5715ec9a-836a-44bd-a60d-224ea5904c28", "3": "7733ee48-5fbf-44e4-b9ae-4b6b860cd68e"}}, "__type__": "1"}, "7733ee48-5fbf-44e4-b9ae-4b6b860cd68e": {"__data__": {"text": "to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError.\n\nassert.fail([message])#\nAdded in: v0.1.21\nmessage <string> | <Error> Default: 'Failed'\nThrows an AssertionError with the provided error message or a default error message. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError.\n\nimport assert from 'node:assert/strict';\n\nassert.fail();\n// AssertionError [ERR_ASSERTION]: Failed\n\nassert.fail('boom');\n// AssertionError [ERR_ASSERTION]: boom\n\nassert.fail(new TypeError('need array'));\n// TypeError: need array\nUsing assert.fail() with more than two arguments is possible but deprecated. See below for further details.\n\nassert.fail(actual, expected[, message[, operator[, stackStartFn]]])#\nHistory\nStability: 0 - Deprecated: Use assert.fail([message]) or other assert functions instead.\nactual <any>\nexpected <any>\nmessage <string> | <Error>\noperator <string> Default: '!='\nstackStartFn <Function> Default: assert.fail\nIf message is falsy, the error message is set as the values of actual and expected separated by the provided operator. If just the two actual and expected arguments are provided, operator will default to '!='. If message is provided as third argument it will be used as the error message and the other arguments will be stored as properties on the thrown object. If stackStartFn is provided, all stack frames above that function will be removed from stacktrace (see Error.captureStackTrace). If no arguments are given, the default message Failed will be used.\n\nimport assert from 'node:assert/strict';\n\nassert.fail('a', 'b');\n// AssertionError [ERR_ASSERTION]: 'a' != 'b'\n\nassert.fail(1, 2, undefined, '>');\n// AssertionError [ERR_ASSERTION]: 1 > 2\n\nassert.fail(1, 2, 'fail');\n// AssertionError [ERR_ASSERTION]: fail\n\nassert.fail(1, 2, 'whoops', '>');\n// AssertionError [ERR_ASSERTION]: whoops\n\nassert.fail(1, 2, new TypeError('need array'));\n// TypeError: need array\nIn the last three cases actual, expected, and operator have no influence on the error message.\n\nExample use of stackStartFn for truncating the exception's stacktrace:\n\nimport assert from 'node:assert/strict';\n\nfunction suppressFrame() {\n  assert.fail('a', 'b', undefined, '!==', suppressFrame);\n}\nsuppressFrame();\n// AssertionError [ERR_ASSERTION]: 'a' !== 'b'\n//     at repl:1:1\n//     at ContextifyScript.Script.runInThisContext (vm.js:44:33)\n//     ...\nassert.ifError(value)#\nHistory\nvalue <any>\nThrows value if value is not undefined or null. This is useful when testing the error argument in callbacks. The stack trace contains all frames from the error passed to ifError() including the potential new frames for ifError() itself.\n\nimport assert from 'node:assert/strict';\n\nassert.ifError(null);\n// OK\nassert.ifError(0);\n// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 0\nassert.ifError('error');\n// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 'error'\nassert.ifError(new Error());\n// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: Error\n\n// Create some random error frames.\nlet err;\n(function errorFrame() {\n  err = new Error('test error');\n})();\n\n(function ifErrorFrame() {\n ", "doc_id": "7733ee48-5fbf-44e4-b9ae-4b6b860cd68e", "embedding": null, "doc_hash": "2791facfbb65fd4d304f48545ba529a7df785ceeb702714f0125fc92f696b478", "extra_info": null, "node_info": {"start": 158625, "end": 161967}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1f74766a-82e7-4f38-8af0-1912e7dacc72", "3": "cf73c240-9a87-442b-a70f-0ad8d68c443f"}}, "__type__": "1"}, "cf73c240-9a87-442b-a70f-0ad8d68c443f": {"__data__": {"text": "The stack trace contains all frames from the error passed to ifError() including the potential new frames for ifError() itself.\n\nimport assert from 'node:assert/strict';\n\nassert.ifError(null);\n// OK\nassert.ifError(0);\n// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 0\nassert.ifError('error');\n// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 'error'\nassert.ifError(new Error());\n// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: Error\n\n// Create some random error frames.\nlet err;\n(function errorFrame() {\n  err = new Error('test error');\n})();\n\n(function ifErrorFrame() {\n  assert.ifError(err);\n})();\n// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: test error\n//     at ifErrorFrame\n//     at errorFrame\nassert.match(string, regexp[, message])#\nHistory\nstring <string>\nregexp <RegExp>\nmessage <string> | <Error>\nExpects the string input to match the regular expression.\n\nimport assert from 'node:assert/strict';\n\nassert.match('I will fail', /pass/);\n// AssertionError [ERR_ASSERTION]: The input did not match the regular ...\n\nassert.match(123, /pass/);\n// AssertionError [ERR_ASSERTION]: The \"string\" argument must be of type string.\n\nassert.match('I will pass', /pass/);\n// OK\nIf the values do not match, or if the string argument is of another type than string, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError.\n\nassert.notDeepEqual(actual, expected[, message])#\nHistory\nactual <any>\nexpected <any>\nmessage <string> | <Error>\nStrict assertion mode\n\nAn alias of assert.notDeepStrictEqual().\n\nLegacy assertion mode\n\nStability: 3 - Legacy: Use assert.notDeepStrictEqual() instead.\nTests for any deep inequality. Opposite of assert.deepEqual().\n\nimport assert from 'node:assert';\n\nconst obj1 = {\n  a: {\n    b: 1,\n  },\n};\nconst obj2 = {\n  a: {\n    b: 2,\n  },\n};\nconst obj3 = {\n  a: {\n    b: 1,\n  },\n};\nconst obj4 = Object.create(obj1);\n\nassert.notDeepEqual(obj1, obj1);\n// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n\nassert.notDeepEqual(obj1, obj2);\n// OK\n\nassert.notDeepEqual(obj1, obj3);\n// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n\nassert.notDeepEqual(obj1, obj4);\n// OK\nIf the values are deeply equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError.\n\nassert.notDeepStrictEqual(actual, expected[, message])#\nHistory\nactual <any>\nexpected <any>\nmessage <string> | <Error>\nTests for deep strict inequality. Opposite of assert.deepStrictEqual().\n\nimport assert from 'node:assert/strict';\n\nassert.notDeepStrictEqual({ a: 1 }, { a: '1' });\n// OK\nIf the values are deeply and strictly equal, an AssertionError is thrown with a message property set equal to the value of the message", "doc_id": "cf73c240-9a87-442b-a70f-0ad8d68c443f", "embedding": null, "doc_hash": "f979f9e2d9fc9dbea9a2ff0638ed338e9e8093c4847fb4489202a0630dc0ff08", "extra_info": null, "node_info": {"start": 162011, "end": 165166}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7733ee48-5fbf-44e4-b9ae-4b6b860cd68e", "3": "b4b78d7d-9e82-4619-913e-8c960f470646"}}, "__type__": "1"}, "b4b78d7d-9e82-4619-913e-8c960f470646": {"__data__": {"text": "equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError.\n\nassert.notDeepStrictEqual(actual, expected[, message])#\nHistory\nactual <any>\nexpected <any>\nmessage <string> | <Error>\nTests for deep strict inequality. Opposite of assert.deepStrictEqual().\n\nimport assert from 'node:assert/strict';\n\nassert.notDeepStrictEqual({ a: 1 }, { a: '1' });\n// OK\nIf the values are deeply and strictly equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError.\n\nassert.notEqual(actual, expected[, message])#\nHistory\nactual <any>\nexpected <any>\nmessage <string> | <Error>\nStrict assertion mode\n\nAn alias of assert.notStrictEqual().\n\nLegacy assertion mode\n\nStability: 3 - Legacy: Use assert.notStrictEqual() instead.\nTests shallow, coercive inequality with the != operator. NaN is specially handled and treated as being identical if both sides are NaN.\n\nimport assert from 'node:assert';\n\nassert.notEqual(1, 2);\n// OK\n\nassert.notEqual(1, 1);\n// AssertionError: 1 != 1\n\nassert.notEqual(1, '1');\n// AssertionError: 1 != '1'\nIf the values are equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError.\n\nassert.notStrictEqual(actual, expected[, message])#\nHistory\nactual <any>\nexpected <any>\nmessage <string> | <Error>\nTests strict inequality between the actual and expected parameters as determined by Object.is().\n\nimport assert from 'node:assert/strict';\n\nassert.notStrictEqual(1, 2);\n// OK\n\nassert.notStrictEqual(1, 1);\n// AssertionError [ERR_ASSERTION]: Expected \"actual\" to be strictly unequal to:\n//\n// 1\n\nassert.notStrictEqual(1, '1');\n// OK\nIf the values are strictly equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError.\n\nassert.ok(value[, message])#\nHistory\nvalue <any>\nmessage <string> | <Error>\nTests if value is truthy. It is equivalent to assert.equal(!!value, true, message).\n\nIf value is not truthy, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError. If no arguments are passed in at all message will be set to the string: 'No value argument passed to `assert.ok()`'.\n\nBe aware that in the repl the error message will be different to the one thrown in a file! See below for further details.\n\nimport assert from 'node:assert/strict';\n\nassert.ok(true);\n// OK\nassert.ok(1);\n// OK\n\nassert.ok();\n// AssertionError: No value argument passed to `assert.ok()`\n\nassert.ok(false, 'it\\'s false');\n// AssertionError: it's false\n\n// In the", "doc_id": "b4b78d7d-9e82-4619-913e-8c960f470646", "embedding": null, "doc_hash": "9978b2c632dd458e242fa6e26863b45147d1dd4d3f0824292cfefaf382fc4bd2", "extra_info": null, "node_info": {"start": 165115, "end": 168598}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cf73c240-9a87-442b-a70f-0ad8d68c443f", "3": "66f9d306-b9b5-417b-9c9f-6919fb1ed6ab"}}, "__type__": "1"}, "66f9d306-b9b5-417b-9c9f-6919fb1ed6ab": {"__data__": {"text": "the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError. If no arguments are passed in at all message will be set to the string: 'No value argument passed to `assert.ok()`'.\n\nBe aware that in the repl the error message will be different to the one thrown in a file! See below for further details.\n\nimport assert from 'node:assert/strict';\n\nassert.ok(true);\n// OK\nassert.ok(1);\n// OK\n\nassert.ok();\n// AssertionError: No value argument passed to `assert.ok()`\n\nassert.ok(false, 'it\\'s false');\n// AssertionError: it's false\n\n// In the repl:\nassert.ok(typeof 123 === 'string');\n// AssertionError: false == true\n\n// In a file (e.g. test.js):\nassert.ok(typeof 123 === 'string');\n// AssertionError: The expression evaluated to a falsy value:\n//\n//   assert.ok(typeof 123 === 'string')\n\nassert.ok(false);\n// AssertionError: The expression evaluated to a falsy value:\n//\n//   assert.ok(false)\n\nassert.ok(0);\n// AssertionError: The expression evaluated to a falsy value:\n//\n//   assert.ok(0)\nimport assert from 'node:assert/strict';\n\n// Using `assert()` works the same:\nassert(0);\n// AssertionError: The expression evaluated to a falsy value:\n//\n//   assert(0)\nassert.rejects(asyncFn[, error][, message])#\nAdded in: v10.0.0\nasyncFn <Function> | <Promise>\nerror <RegExp> | <Function> | <Object> | <Error>\nmessage <string>\nAwaits the asyncFn promise or, if asyncFn is a function, immediately calls the function and awaits the returned promise to complete. It will then check that the promise is rejected.\n\nIf asyncFn is a function and it throws an error synchronously, assert.rejects() will return a rejected Promise with that error. If the function does not return a promise, assert.rejects() will return a rejected Promise with an ERR_INVALID_RETURN_VALUE error. In both cases the error handler is skipped.\n\nBesides the async nature to await the completion behaves identically to assert.throws().\n\nIf specified, error can be a Class, RegExp, a validation function, an object where each property will be tested for, or an instance of error where each property will be tested for including the non-enumerable message and name properties.\n\nIf specified, message will be the message provided by the AssertionError if the asyncFn fails to reject.\n\nimport assert from 'node:assert/strict';\n\nawait assert.rejects(\n  async () => {\n    throw new TypeError('Wrong value');\n  },\n  {\n    name: 'TypeError',\n    message: 'Wrong value',\n  },\n);\nimport assert from 'node:assert/strict';\n\nawait assert.rejects(\n  async () => {\n    throw new TypeError('Wrong value');\n  },\n  (err) => {\n    assert.strictEqual(err.name, 'TypeError');\n    assert.strictEqual(err.message, 'Wrong value');\n    return true;\n  },\n);\nimport assert from 'node:assert/strict';\n\nassert.rejects(\n  Promise.reject(new Error('Wrong value')),\n  Error,\n).then(() => {\n  // ...\n});\nerror cannot be a string. If a string is provided as the second argument, then error is assumed to be omitted and the string will be used for message instead. This can lead to easy-to-miss mistakes. Please read the example in assert.throws() carefully if using a string as", "doc_id": "66f9d306-b9b5-417b-9c9f-6919fb1ed6ab", "embedding": null, "doc_hash": "2ed6555cf5565c91d5cd5b034b05783a4fead0aa70540414ff06ae5c3080c916", "extra_info": null, "node_info": {"start": 168623, "end": 171879}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b4b78d7d-9e82-4619-913e-8c960f470646", "3": "3a0861cf-81e0-48f2-b32d-1fb7b27b51f8"}}, "__type__": "1"}, "3a0861cf-81e0-48f2-b32d-1fb7b27b51f8": {"__data__": {"text": " async () => {\n    throw new TypeError('Wrong value');\n  },\n  (err) => {\n    assert.strictEqual(err.name, 'TypeError');\n    assert.strictEqual(err.message, 'Wrong value');\n    return true;\n  },\n);\nimport assert from 'node:assert/strict';\n\nassert.rejects(\n  Promise.reject(new Error('Wrong value')),\n  Error,\n).then(() => {\n  // ...\n});\nerror cannot be a string. If a string is provided as the second argument, then error is assumed to be omitted and the string will be used for message instead. This can lead to easy-to-miss mistakes. Please read the example in assert.throws() carefully if using a string as the second argument gets considered.\n\nassert.strictEqual(actual, expected[, message])#\nHistory\nactual <any>\nexpected <any>\nmessage <string> | <Error>\nTests strict equality between the actual and expected parameters as determined by Object.is().\n\nimport assert from 'node:assert/strict';\n\nassert.strictEqual(1, 2);\n// AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:\n//\n// 1 !== 2\n\nassert.strictEqual(1, 1);\n// OK\n\nassert.strictEqual('Hello foobar', 'Hello World!');\n// AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:\n// + actual - expected\n//\n// + 'Hello foobar'\n// - 'Hello World!'\n//          ^\n\nconst apples = 1;\nconst oranges = 2;\nassert.strictEqual(apples, oranges, `apples ${apples} !== oranges ${oranges}`);\n// AssertionError [ERR_ASSERTION]: apples 1 !== oranges 2\n\nassert.strictEqual(1, '1', new TypeError('Inputs are not identical'));\n// TypeError: Inputs are not identical\nIf the values are not strictly equal, an AssertionError is thrown with a message property set equal to the value of the message parameter. If the message parameter is undefined, a default error message is assigned. If the message parameter is an instance of an Error then it will be thrown instead of the AssertionError.\n\nassert.throws(fn[, error][, message])#\nHistory\nfn <Function>\nerror <RegExp> | <Function> | <Object> | <Error>\nmessage <string>\nExpects the function fn to throw an error.\n\nIf specified, error can be a Class, RegExp, a validation function, a validation object where each property will be tested for strict deep equality, or an instance of error where each property will be tested for strict deep equality including the non-enumerable message and name properties. When using an object, it is also possible to use a regular expression, when validating against a string property. See below for examples.\n\nIf specified, message will be appended to the message provided by the AssertionError if the fn call fails to throw or in case the error validation fails.\n\nCustom validation object/error instance:\n\nimport assert from 'node:assert/strict';\n\nconst err = new TypeError('Wrong value');\nerr.code = 404;\nerr.foo = 'bar';\nerr.info = {\n  nested: true,\n  baz: 'text',\n};\nerr.reg = /abc/i;\n\nassert.throws(\n  () => {\n    throw err;\n  },\n  {\n    name: 'TypeError',\n    message: 'Wrong value',\n    info: {\n      nested: true,\n      baz: 'text',\n    },\n    // Only properties on the validation object will be tested for.\n    // Using nested objects requires all properties to be present. Otherwise\n    // the validation is going to fail.\n  },\n);\n\n// Using regular expressions to validate error properties:\nassert.throws(\n ", "doc_id": "3a0861cf-81e0-48f2-b32d-1fb7b27b51f8", "embedding": null, "doc_hash": "bb9b5c0b0bbd870ba11bc42ad9370ad3816d60d37fbe647b976e539cf0016c9e", "extra_info": null, "node_info": {"start": 171962, "end": 175227}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "66f9d306-b9b5-417b-9c9f-6919fb1ed6ab", "3": "61e4a474-5726-4b4c-9109-f3a2e863d725"}}, "__type__": "1"}, "61e4a474-5726-4b4c-9109-f3a2e863d725": {"__data__": {"text": "= 404;\nerr.foo = 'bar';\nerr.info = {\n  nested: true,\n  baz: 'text',\n};\nerr.reg = /abc/i;\n\nassert.throws(\n  () => {\n    throw err;\n  },\n  {\n    name: 'TypeError',\n    message: 'Wrong value',\n    info: {\n      nested: true,\n      baz: 'text',\n    },\n    // Only properties on the validation object will be tested for.\n    // Using nested objects requires all properties to be present. Otherwise\n    // the validation is going to fail.\n  },\n);\n\n// Using regular expressions to validate error properties:\nassert.throws(\n  () => {\n    throw err;\n  },\n  {\n    // The `name` and `message` properties are strings and using regular\n    // expressions on those will match against the string. If they fail, an\n    // error is thrown.\n    name: /^TypeError$/,\n    message: /Wrong/,\n    foo: 'bar',\n    info: {\n      nested: true,\n      // It is not possible to use regular expressions for nested properties!\n      baz: 'text',\n    },\n    // The `reg` property contains a regular expression and only if the\n    // validation object contains an identical regular expression, it is going\n    // to pass.\n    reg: /abc/i,\n  },\n);\n\n// Fails due to the different `message` and `name` properties:\nassert.throws(\n  () => {\n    const otherErr = new Error('Not found');\n    // Copy all enumerable properties from `err` to `otherErr`.\n    for (const [key, value] of Object.entries(err)) {\n      otherErr[key] = value;\n    }\n    throw otherErr;\n  },\n  // The error's `message` and `name` properties will also be checked when using\n  // an error as validation object.\n  err,\n);\nValidate instanceof using constructor:\n\nimport assert from 'node:assert/strict';\n\nassert.throws(\n  () => {\n    throw new Error('Wrong value');\n  },\n  Error,\n);\nValidate error message using RegExp:\n\nUsing a regular expression runs .toString on the error object, and will therefore also include the error name.\n\nimport assert from 'node:assert/strict';\n\nassert.throws(\n  () => {\n    throw new Error('Wrong value');\n  },\n  /^Error: Wrong value$/,\n);\nCustom error validation:\n\nThe function must return true to indicate all internal validations passed. It will otherwise fail with an AssertionError.\n\nimport assert from 'node:assert/strict';\n\nassert.throws(\n  () => {\n    throw new Error('Wrong value');\n  },\n  (err) => {\n    assert(err instanceof Error);\n    assert(/value/.test(err));\n    // Avoid returning anything from validation functions besides `true`.\n    // Otherwise, it's not clear what part of the validation failed. Instead,\n    // throw an error about the specific validation that failed (as done in this\n    // example) and add as much helpful debugging information to that error as\n    // possible.\n    return true;\n  },\n  'unexpected error',\n);\nerror cannot be a string. If a string is provided as the second argument, then error is assumed to be omitted and the string will be used for message instead. This can lead to easy-to-miss mistakes. Using the same message as the thrown error message is going to result in an ERR_AMBIGUOUS_ARGUMENT error. Please read the example below carefully if using a string as the second argument gets considered:\n\nimport assert from", "doc_id": "61e4a474-5726-4b4c-9109-f3a2e863d725", "embedding": null, "doc_hash": "7db5e48537fee90fc6e79e70e38dd11da450fa9cd3e123fb006c067d296721ef", "extra_info": null, "node_info": {"start": 175331, "end": 178464}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3a0861cf-81e0-48f2-b32d-1fb7b27b51f8", "3": "e63347af-d2b5-47a0-a266-c3c28139e23d"}}, "__type__": "1"}, "e63347af-d2b5-47a0-a266-c3c28139e23d": {"__data__": {"text": "validation functions besides `true`.\n    // Otherwise, it's not clear what part of the validation failed. Instead,\n    // throw an error about the specific validation that failed (as done in this\n    // example) and add as much helpful debugging information to that error as\n    // possible.\n    return true;\n  },\n  'unexpected error',\n);\nerror cannot be a string. If a string is provided as the second argument, then error is assumed to be omitted and the string will be used for message instead. This can lead to easy-to-miss mistakes. Using the same message as the thrown error message is going to result in an ERR_AMBIGUOUS_ARGUMENT error. Please read the example below carefully if using a string as the second argument gets considered:\n\nimport assert from 'node:assert/strict';\n\nfunction throwingFirst() {\n  throw new Error('First');\n}\n\nfunction throwingSecond() {\n  throw new Error('Second');\n}\n\nfunction notThrowing() {}\n\n// The second argument is a string and the input function threw an Error.\n// The first case will not throw as it does not match for the error message\n// thrown by the input function!\nassert.throws(throwingFirst, 'Second');\n// In the next example the message has no benefit over the message from the\n// error and since it is not clear if the user intended to actually match\n// against the error message, Node.js throws an `ERR_AMBIGUOUS_ARGUMENT` error.\nassert.throws(throwingSecond, 'Second');\n// TypeError [ERR_AMBIGUOUS_ARGUMENT]\n\n// The string is only used (as message) in case the function does not throw:\nassert.throws(notThrowing, 'Second');\n// AssertionError [ERR_ASSERTION]: Missing expected exception: Second\n\n// If it was intended to match for the error message do this instead:\n// It does not throw because the error messages match.\nassert.throws(throwingSecond, /Second$/);\n\n// If the error message does not match, an AssertionError is thrown.\nassert.throws(throwingFirst, /Second$/);\n// AssertionError [ERR_ASSERTION]\nDue to the confusing error-prone notation, avoid a string as the second argument.\n\nAsynchronous context tracking#\nStability: 2 - Stable\nSource Code: lib/async_hooks.js\n\nIntroduction#\nThese classes are used to associate state and propagate it throughout callbacks and promise chains. They allow storing data throughout the lifetime of a web request or any other asynchronous duration. It is similar to thread-local storage in other languages.\n\nThe AsyncLocalStorage and AsyncResource classes are part of the node:async_hooks module:\n\nimport { AsyncLocalStorage, AsyncResource } from 'node:async_hooks';\nClass: AsyncLocalStorage#\nHistory\nThis class creates stores that stay coherent through asynchronous operations.\n\nWhile you can create your own implementation on top of the node:async_hooks module, AsyncLocalStorage should be preferred as it is a performant and memory safe implementation that involves significant optimizations that are non-obvious to implement.\n\nThe following example uses AsyncLocalStorage to build a simple logger that assigns IDs to incoming HTTP requests and includes them in messages logged within each request.\n\nimport http from 'node:http';\nimport { AsyncLocalStorage } from 'node:async_hooks';\n\nconst asyncLocalStorage = new AsyncLocalStorage();\n\nfunction logWithId(msg) {\n  const id = asyncLocalStorage.getStore();\n  console.log(`${id !== undefined ? id : '-'}:`, msg);\n}\n\nlet idSeq = 0;\nhttp.createServer((req, res) => {\n  asyncLocalStorage.run(idSeq++, () => {\n    logWithId('start');\n    // Imagine any chain of async operations here\n    setImmediate(() => {\n      logWithId('finish');\n      res.end();\n    });\n ", "doc_id": "e63347af-d2b5-47a0-a266-c3c28139e23d", "embedding": null, "doc_hash": "3de06e86d9d847f6122bf9b7ec05a9e9cf401165b955de2708672e46fd93387b", "extra_info": null, "node_info": {"start": 178249, "end": 181854}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "61e4a474-5726-4b4c-9109-f3a2e863d725", "3": "38dc4940-2cfc-45fd-990f-4de1231091c7"}}, "__type__": "1"}, "38dc4940-2cfc-45fd-990f-4de1231091c7": {"__data__": {"text": "them in messages logged within each request.\n\nimport http from 'node:http';\nimport { AsyncLocalStorage } from 'node:async_hooks';\n\nconst asyncLocalStorage = new AsyncLocalStorage();\n\nfunction logWithId(msg) {\n  const id = asyncLocalStorage.getStore();\n  console.log(`${id !== undefined ? id : '-'}:`, msg);\n}\n\nlet idSeq = 0;\nhttp.createServer((req, res) => {\n  asyncLocalStorage.run(idSeq++, () => {\n    logWithId('start');\n    // Imagine any chain of async operations here\n    setImmediate(() => {\n      logWithId('finish');\n      res.end();\n    });\n  });\n}).listen(8080);\n\nhttp.get('http://localhost:8080');\nhttp.get('http://localhost:8080');\n// Prints:\n//   0: start\n//   1: start\n//   0: finish\n//   1: finish\nEach instance of AsyncLocalStorage maintains an independent storage context. Multiple instances can safely exist simultaneously without risk of interfering with each other's data.\n\nnew AsyncLocalStorage()#\nHistory\nCreates a new instance of AsyncLocalStorage. Store is only provided within a run() call or after an enterWith() call.\n\nStatic method: AsyncLocalStorage.bind(fn)#\nAdded in: v18.16.0\nStability: 1 - Experimental\nfn <Function> The function to bind to the current execution context.\nReturns: <Function> A new function that calls fn within the captured execution context.\nBinds the given function to the current execution context.\n\nStatic method: AsyncLocalStorage.snapshot()#\nAdded in: v18.16.0\nStability: 1 - Experimental\nReturns: <Function> A new function with the signature (fn: (...args) : R, ...args) : R.\nCaptures the current execution context and returns a function that accepts a function as an argument. Whenever the returned function is called, it calls the function passed to it within the captured context.\n\nconst asyncLocalStorage = new AsyncLocalStorage();\nconst runInAsyncScope = asyncLocalStorage.run(123, () => asyncLocalStorage.snapshot());\nconst result = asyncLocalStorage.run(321, () => runInAsyncScope(() => asyncLocalStorage.getStore()));\nconsole.log(result);  // returns 123\nAsyncLocalStorage.snapshot() can replace the use of AsyncResource for simple async context tracking purposes, for example:\n\nclass Foo {\n  #runInAsyncScope = AsyncLocalStorage.snapshot();\n\n  get() { return this.#runInAsyncScope(() => asyncLocalStorage.getStore()); }\n}\n\nconst foo = asyncLocalStorage.run(123, () => new Foo());\nconsole.log(asyncLocalStorage.run(321, () => foo.get())); // returns 123\nasyncLocalStorage.disable()#\nAdded in: v13.10.0, v12.17.0\nStability: 1 - Experimental\nDisables the instance of AsyncLocalStorage. All subsequent calls to asyncLocalStorage.getStore() will return undefined until asyncLocalStorage.run() or asyncLocalStorage.enterWith() is called again.\n\nWhen calling asyncLocalStorage.disable(), all current contexts linked to the instance will be exited.\n\nCalling asyncLocalStorage.disable() is required before the asyncLocalStorage can be garbage collected. This does not apply to stores provided by the asyncLocalStorage, as those objects are garbage collected along with the corresponding async resources.\n\nUse this method when the asyncLocalStorage is not in use anymore in the current process.\n\nasyncLocalStorage.getStore()#\nAdded in: v13.10.0, v12.17.0\nReturns: <any>\nReturns the current store. If called outside of an asynchronous context initialized by calling asyncLocalStorage.run() or asyncLocalStorage.enterWith(), it returns undefined.\n\nasyncLocalStorage.enterWith(store)#\nAdded in: v13.11.0,", "doc_id": "38dc4940-2cfc-45fd-990f-4de1231091c7", "embedding": null, "doc_hash": "3be1f827179a53c3d8ea23310f1d5c421a7a3050579dfec7d4885619e085e0cb", "extra_info": null, "node_info": {"start": 182011, "end": 185469}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e63347af-d2b5-47a0-a266-c3c28139e23d", "3": "15533de3-65f7-4a83-ae0c-839fbb4b3b59"}}, "__type__": "1"}, "15533de3-65f7-4a83-ae0c-839fbb4b3b59": {"__data__": {"text": "calling asyncLocalStorage.disable(), all current contexts linked to the instance will be exited.\n\nCalling asyncLocalStorage.disable() is required before the asyncLocalStorage can be garbage collected. This does not apply to stores provided by the asyncLocalStorage, as those objects are garbage collected along with the corresponding async resources.\n\nUse this method when the asyncLocalStorage is not in use anymore in the current process.\n\nasyncLocalStorage.getStore()#\nAdded in: v13.10.0, v12.17.0\nReturns: <any>\nReturns the current store. If called outside of an asynchronous context initialized by calling asyncLocalStorage.run() or asyncLocalStorage.enterWith(), it returns undefined.\n\nasyncLocalStorage.enterWith(store)#\nAdded in: v13.11.0, v12.17.0\nStability: 1 - Experimental\nstore <any>\nTransitions into the context for the remainder of the current synchronous execution and then persists the store through any following asynchronous calls.\n\nExample:\n\nconst store = { id: 1 };\n// Replaces previous store with the given store object\nasyncLocalStorage.enterWith(store);\nasyncLocalStorage.getStore(); // Returns the store object\nsomeAsyncOperation(() => {\n  asyncLocalStorage.getStore(); // Returns the same object\n});\nThis transition will continue for the entire synchronous execution. This means that if, for example, the context is entered within an event handler subsequent event handlers will also run within that context unless specifically bound to another context with an AsyncResource. That is why run() should be preferred over enterWith() unless there are strong reasons to use the latter method.\n\nconst store = { id: 1 };\n\nemitter.on('my-event', () => {\n  asyncLocalStorage.enterWith(store);\n});\nemitter.on('my-event', () => {\n  asyncLocalStorage.getStore(); // Returns the same object\n});\n\nasyncLocalStorage.getStore(); // Returns undefined\nemitter.emit('my-event');\nasyncLocalStorage.getStore(); // Returns the same object\nasyncLocalStorage.run(store, callback[, ...args])#\nAdded in: v13.10.0, v12.17.0\nstore <any>\ncallback <Function>\n...args <any>\nRuns a function synchronously within a context and returns its return value. The store is not accessible outside of the callback function. The store is accessible to any asynchronous operations created within the callback.\n\nThe optional args are passed to the callback function.\n\nIf the callback function throws an error, the error is thrown by run() too. The stacktrace is not impacted by this call and the context is exited.\n\nExample:\n\nconst store = { id: 2 };\ntry {\n  asyncLocalStorage.run(store, () => {\n    asyncLocalStorage.getStore(); // Returns the store object\n    setTimeout(() => {\n      asyncLocalStorage.getStore(); // Returns the store object\n    }, 200);\n    throw new Error();\n  });\n} catch (e) {\n  asyncLocalStorage.getStore(); // Returns undefined\n  // The error will be caught here\n}\nasyncLocalStorage.exit(callback[, ...args])#\nAdded in: v13.10.0, v12.17.0\nStability: 1 - Experimental\ncallback <Function>\n...args <any>\nRuns a function synchronously outside of a context and returns its return value. The store is not accessible within the callback function or the asynchronous operations created within the callback. Any getStore() call done within the callback function will always return undefined.\n\nThe optional args are passed to the callback function.\n\nIf the callback function throws an error, the error is thrown by exit() too. The stacktrace is not impacted by this call and the context is re-entered.\n\nExample:\n\n// Within a call to run\ntry {\n  asyncLocalStorage.getStore(); // Returns the store object or value\n  asyncLocalStorage.exit(() => {\n    asyncLocalStorage.getStore(); // Returns undefined\n    throw new Error();\n  });\n} catch", "doc_id": "15533de3-65f7-4a83-ae0c-839fbb4b3b59", "embedding": null, "doc_hash": "4b4d1c63f015d99fade6522058f03a7dc7e1b26adeccc15caa009a9a8e23138c", "extra_info": null, "node_info": {"start": 185274, "end": 189008}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "38dc4940-2cfc-45fd-990f-4de1231091c7", "3": "91ad8f0c-3d77-495f-828b-e40db521f7c3"}}, "__type__": "1"}, "91ad8f0c-3d77-495f-828b-e40db521f7c3": {"__data__": {"text": "1 - Experimental\ncallback <Function>\n...args <any>\nRuns a function synchronously outside of a context and returns its return value. The store is not accessible within the callback function or the asynchronous operations created within the callback. Any getStore() call done within the callback function will always return undefined.\n\nThe optional args are passed to the callback function.\n\nIf the callback function throws an error, the error is thrown by exit() too. The stacktrace is not impacted by this call and the context is re-entered.\n\nExample:\n\n// Within a call to run\ntry {\n  asyncLocalStorage.getStore(); // Returns the store object or value\n  asyncLocalStorage.exit(() => {\n    asyncLocalStorage.getStore(); // Returns undefined\n    throw new Error();\n  });\n} catch (e) {\n  asyncLocalStorage.getStore(); // Returns the same object or value\n  // The error will be caught here\n}\nUsage with async/await#\nIf, within an async function, only one await call is to run within a context, the following pattern should be used:\n\nasync function fn() {\n  await asyncLocalStorage.run(new Map(), () => {\n    asyncLocalStorage.getStore().set('key', value);\n    return foo(); // The return value of foo will be awaited\n  });\n}\nIn this example, the store is only available in the callback function and the functions called by foo. Outside of run, calling getStore will return undefined.\n\nTroubleshooting: Context loss#\nIn most cases, AsyncLocalStorage works without issues. In rare situations, the current store is lost in one of the asynchronous operations.\n\nIf your code is callback-based, it is enough to promisify it with util.promisify() so it starts working with native promises.\n\nIf you need to use a callback-based API or your code assumes a custom thenable implementation, use the AsyncResource class to associate the asynchronous operation with the correct execution context. Find the function call responsible for the context loss by logging the content of asyncLocalStorage.getStore() after the calls you suspect are responsible for the loss. When the code logs undefined, the last callback called is probably responsible for the context loss.\n\nClass: AsyncResource#\nHistory\nThe class AsyncResource is designed to be extended by the embedder's async resources. Using this, users can easily trigger the lifetime events of their own resources.\n\nThe init hook will trigger when an AsyncResource is instantiated.\n\nThe following is an overview of the AsyncResource API.\n\nimport { AsyncResource, executionAsyncId } from 'node:async_hooks';\n\n// AsyncResource() is meant to be extended. Instantiating a\n// new AsyncResource() also triggers init. If triggerAsyncId is omitted then\n// async_hook.executionAsyncId() is used.\nconst asyncResource = new AsyncResource(\n  type, { triggerAsyncId: executionAsyncId(), requireManualDestroy: false },\n);\n\n// Run a function in the execution context of the resource. This will\n// * establish the context of the resource\n// * trigger the AsyncHooks before callbacks\n// * call the provided function `fn` with the supplied arguments\n// * trigger the AsyncHooks after callbacks\n// * restore the original execution context\nasyncResource.runInAsyncScope(fn, thisArg, ...args);\n\n// Call AsyncHooks destroy callbacks.\nasyncResource.emitDestroy();\n\n// Return the unique ID assigned to the AsyncResource instance.\nasyncResource.asyncId();\n\n// Return the trigger ID for the AsyncResource instance.\nasyncResource.triggerAsyncId();\nnew AsyncResource(type[, options])#\ntype <string> The type of async event.\noptions <Object>\ntriggerAsyncId <number> The ID of the execution context that created this async event. Default: executionAsyncId().\nrequireManualDestroy <boolean> If set to true, disables emitDestroy when the object is garbage collected. This usually does not need to be set (even if emitDestroy is called manually), unless the resource's asyncId is retrieved and the sensitive API's emitDestroy is called with it. When set to false, the emitDestroy call on", "doc_id": "91ad8f0c-3d77-495f-828b-e40db521f7c3", "embedding": null, "doc_hash": "c2032ab3494663c7fd3863c2959288b1e3a263a3d6e4972774164ed5aa4cf3a8", "extra_info": null, "node_info": {"start": 189012, "end": 192998}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "15533de3-65f7-4a83-ae0c-839fbb4b3b59", "3": "d18342c0-4953-47b1-bd81-a49c03eb6c17"}}, "__type__": "1"}, "d18342c0-4953-47b1-bd81-a49c03eb6c17": {"__data__": {"text": "Call AsyncHooks destroy callbacks.\nasyncResource.emitDestroy();\n\n// Return the unique ID assigned to the AsyncResource instance.\nasyncResource.asyncId();\n\n// Return the trigger ID for the AsyncResource instance.\nasyncResource.triggerAsyncId();\nnew AsyncResource(type[, options])#\ntype <string> The type of async event.\noptions <Object>\ntriggerAsyncId <number> The ID of the execution context that created this async event. Default: executionAsyncId().\nrequireManualDestroy <boolean> If set to true, disables emitDestroy when the object is garbage collected. This usually does not need to be set (even if emitDestroy is called manually), unless the resource's asyncId is retrieved and the sensitive API's emitDestroy is called with it. When set to false, the emitDestroy call on garbage collection will only take place if there is at least one active destroy hook. Default: false.\nExample usage:\n\nclass DBQuery extends AsyncResource {\n  constructor(db) {\n    super('DBQuery');\n    this.db = db;\n  }\n\n  getInfo(query, callback) {\n    this.db.get(query, (err, data) => {\n      this.runInAsyncScope(callback, null, err, data);\n    });\n  }\n\n  close() {\n    this.db = null;\n    this.emitDestroy();\n  }\n}\nStatic method: AsyncResource.bind(fn[, type[, thisArg]])#\nHistory\nfn <Function> The function to bind to the current execution context.\ntype <string> An optional name to associate with the underlying AsyncResource.\nthisArg <any>\nBinds the given function to the current execution context.\n\nThe returned function will have an asyncResource property referencing the AsyncResource to which the function is bound.\n\nasyncResource.bind(fn[, thisArg])#\nHistory\nfn <Function> The function to bind to the current AsyncResource.\nthisArg <any>\nBinds the given function to execute to this AsyncResource's scope.\n\nThe returned function will have an asyncResource property referencing the AsyncResource to which the function is bound.\n\nasyncResource.runInAsyncScope(fn[, thisArg, ...args])#\nAdded in: v9.6.0\nfn <Function> The function to call in the execution context of this async resource.\nthisArg <any> The receiver to be used for the function call.\n...args <any> Optional arguments to pass to the function.\nCall the provided function with the provided arguments in the execution context of the async resource. This will establish the context, trigger the AsyncHooks before callbacks, call the function, trigger the AsyncHooks after callbacks, and then restore the original execution context.\n\nasyncResource.emitDestroy()#\nReturns: <AsyncResource> A reference to asyncResource.\nCall all destroy hooks. This should only ever be called once. An error will be thrown if it is called more than once. This must be manually called. If the resource is left to be collected by the GC then the destroy hooks will never be called.\n\nasyncResource.asyncId()#\nReturns: <number> The unique asyncId assigned to the resource.\nasyncResource.triggerAsyncId()#\nReturns: <number> The same triggerAsyncId that is passed to the AsyncResource constructor.\n\nUsing AsyncResource for a Worker thread pool#\nThe following example shows how to use the AsyncResource class to properly provide async tracking for a Worker pool. Other resource pools, such as database connection pools, can follow a similar model.\n\nAssuming that the task is adding two numbers, using a file named task_processor.js with the following content:\n\nimport { parentPort } from 'node:worker_threads';\nparentPort.on('message', (task) => {\n  parentPort.postMessage(task.a + task.b);\n});\na Worker pool around it could use the following structure:\n\nimport { AsyncResource } from 'node:async_hooks';\nimport { EventEmitter } from 'node:events';\nimport path from 'node:path';\nimport { Worker } from 'node:worker_threads';\n\nconst", "doc_id": "d18342c0-4953-47b1-bd81-a49c03eb6c17", "embedding": null, "doc_hash": "fa1c3078976a53629dde5207ee7a19eff8618c7ea62b3da1edcdb7f80c890db3", "extra_info": null, "node_info": {"start": 192977, "end": 196727}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "91ad8f0c-3d77-495f-828b-e40db521f7c3", "3": "85d2d5cd-4cc6-46cd-919f-5c400251f1f9"}}, "__type__": "1"}, "85d2d5cd-4cc6-46cd-919f-5c400251f1f9": {"__data__": {"text": "for a Worker thread pool#\nThe following example shows how to use the AsyncResource class to properly provide async tracking for a Worker pool. Other resource pools, such as database connection pools, can follow a similar model.\n\nAssuming that the task is adding two numbers, using a file named task_processor.js with the following content:\n\nimport { parentPort } from 'node:worker_threads';\nparentPort.on('message', (task) => {\n  parentPort.postMessage(task.a + task.b);\n});\na Worker pool around it could use the following structure:\n\nimport { AsyncResource } from 'node:async_hooks';\nimport { EventEmitter } from 'node:events';\nimport path from 'node:path';\nimport { Worker } from 'node:worker_threads';\n\nconst kTaskInfo = Symbol('kTaskInfo');\nconst kWorkerFreedEvent = Symbol('kWorkerFreedEvent');\n\nclass WorkerPoolTaskInfo extends AsyncResource {\n  constructor(callback) {\n    super('WorkerPoolTaskInfo');\n    this.callback = callback;\n  }\n\n  done(err, result) {\n    this.runInAsyncScope(this.callback, null, err, result);\n    this.emitDestroy();  // `TaskInfo`s are used only once.\n  }\n}\n\nexport default class WorkerPool extends EventEmitter {\n  constructor(numThreads) {\n    super();\n    this.numThreads = numThreads;\n    this.workers = [];\n    this.freeWorkers = [];\n    this.tasks = [];\n\n    for (let i = 0; i < numThreads; i++)\n      this.addNewWorker();\n\n    // Any time the kWorkerFreedEvent is emitted, dispatch\n    // the next task pending in the queue, if any.\n    this.on(kWorkerFreedEvent, () => {\n      if (this.tasks.length > 0) {\n        const { task, callback } = this.tasks.shift();\n        this.runTask(task, callback);\n      }\n    });\n  }\n\n  addNewWorker() {\n    const worker = new Worker(new URL('task_processor.js', import.meta.url));\n    worker.on('message', (result) => {\n      // In case of success: Call the callback that was passed to `runTask`,\n      // remove the `TaskInfo` associated with the Worker, and mark it as free\n      // again.\n      worker[kTaskInfo].done(null, result);\n      worker[kTaskInfo] = null;\n      this.freeWorkers.push(worker);\n      this.emit(kWorkerFreedEvent);\n    });\n    worker.on('error', (err) => {\n      // In case of an uncaught exception: Call the callback that was passed to\n      // `runTask` with the error.\n      if (worker[kTaskInfo])\n        worker[kTaskInfo].done(err, null);\n      else\n        this.emit('error', err);\n      // Remove the worker from the list and start a new Worker to replace the\n      // current one.\n      this.workers.splice(this.workers.indexOf(worker), 1);\n      this.addNewWorker();\n    });\n    this.workers.push(worker);\n    this.freeWorkers.push(worker);\n    this.emit(kWorkerFreedEvent);\n  }\n\n  runTask(task, callback) {\n    if (this.freeWorkers.length === 0) {\n      // No free threads, wait until a worker thread becomes", "doc_id": "85d2d5cd-4cc6-46cd-919f-5c400251f1f9", "embedding": null, "doc_hash": "7f8e7f0428e2b00fe4d5e2d3dcb10f07088d7858779902dc1d634c30a5a796a9", "extra_info": null, "node_info": {"start": 196791, "end": 199613}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d18342c0-4953-47b1-bd81-a49c03eb6c17", "3": "1bbd2e1c-b744-4257-924c-554b92d5cdca"}}, "__type__": "1"}, "1bbd2e1c-b744-4257-924c-554b92d5cdca": {"__data__": {"text": "null);\n      else\n        this.emit('error', err);\n      // Remove the worker from the list and start a new Worker to replace the\n      // current one.\n      this.workers.splice(this.workers.indexOf(worker), 1);\n      this.addNewWorker();\n    });\n    this.workers.push(worker);\n    this.freeWorkers.push(worker);\n    this.emit(kWorkerFreedEvent);\n  }\n\n  runTask(task, callback) {\n    if (this.freeWorkers.length === 0) {\n      // No free threads, wait until a worker thread becomes free.\n      this.tasks.push({ task, callback });\n      return;\n    }\n\n    const worker = this.freeWorkers.pop();\n    worker[kTaskInfo] = new WorkerPoolTaskInfo(callback);\n    worker.postMessage(task);\n  }\n\n  close() {\n    for (const worker of this.workers) worker.terminate();\n  }\n}\nWithout the explicit tracking added by the WorkerPoolTaskInfo objects, it would appear that the callbacks are associated with the individual Worker objects. However, the creation of the Workers is not associated with the creation of the tasks and does not provide information about when tasks were scheduled.\n\nThis pool could be used as follows:\n\nimport WorkerPool from './worker_pool.js';\nimport os from 'node:os';\n\nconst pool = new WorkerPool(os.availableParallelism());\n\nlet finished = 0;\nfor (let i = 0; i < 10; i++) {\n  pool.runTask({ a: 42, b: 100 }, (err, result) => {\n    console.log(i, err, result);\n    if (++finished === 10)\n      pool.close();\n  });\n}\nIntegrating AsyncResource with EventEmitter#\nEvent listeners triggered by an EventEmitter may be run in a different execution context than the one that was active when eventEmitter.on() was called.\n\nThe following example shows how to use the AsyncResource class to properly associate an event listener with the correct execution context. The same approach can be applied to a Stream or a similar event-driven class.\n\nimport { createServer } from 'node:http';\nimport { AsyncResource, executionAsyncId } from 'node:async_hooks';\n\nconst server = createServer((req, res) => {\n  req.on('close', AsyncResource.bind(() => {\n    // Execution context is bound to the current outer scope.\n  }));\n  req.on('close', () => {\n    // Execution context is bound to the scope that caused 'close' to emit.\n  });\n  res.end();\n}).listen(3000);\nAsync hooks#\nStability: 1 - Experimental. Please migrate away from this API, if you can. We do not recommend using the createHook, AsyncHook, and executionAsyncResource APIs as they have usability issues, safety risks, and performance implications. Async context tracking use cases are better served by the stable AsyncLocalStorage API. If you have a use case for createHook, AsyncHook, or executionAsyncResource beyond the context tracking need solved by AsyncLocalStorage or diagnostics data currently provided by Diagnostics Channel, please open an issue at https://github.com/nodejs/node/issues describing your use case so we can create a more purpose-focused API.\nSource Code: lib/async_hooks.js\n\nWe strongly discourage the use of the async_hooks API. Other APIs that can cover most of its use cases include:\n\nAsyncLocalStorage tracks async context\nprocess.getActiveResourcesInfo() tracks active resources\nThe node:async_hooks module provides an API to track asynchronous resources. It can be accessed using:\n\nimport async_hooks from 'node:async_hooks';\nTerminology#\nAn asynchronous resource represents an object with an associated callback. This callback may be called multiple", "doc_id": "1bbd2e1c-b744-4257-924c-554b92d5cdca", "embedding": null, "doc_hash": "89e1826d76f81362c88941dc9028c0b410425aa29a0d49bbcb60b61d136dc5f6", "extra_info": null, "node_info": {"start": 199855, "end": 203291}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "85d2d5cd-4cc6-46cd-919f-5c400251f1f9", "3": "87603fde-ea28-4d58-a5c3-d4f3634e34a3"}}, "__type__": "1"}, "87603fde-ea28-4d58-a5c3-d4f3634e34a3": {"__data__": {"text": "AsyncHook, or executionAsyncResource beyond the context tracking need solved by AsyncLocalStorage or diagnostics data currently provided by Diagnostics Channel, please open an issue at https://github.com/nodejs/node/issues describing your use case so we can create a more purpose-focused API.\nSource Code: lib/async_hooks.js\n\nWe strongly discourage the use of the async_hooks API. Other APIs that can cover most of its use cases include:\n\nAsyncLocalStorage tracks async context\nprocess.getActiveResourcesInfo() tracks active resources\nThe node:async_hooks module provides an API to track asynchronous resources. It can be accessed using:\n\nimport async_hooks from 'node:async_hooks';\nTerminology#\nAn asynchronous resource represents an object with an associated callback. This callback may be called multiple times, such as the 'connection' event in net.createServer(), or just a single time like in fs.open(). A resource can also be closed before the callback is called. AsyncHook does not explicitly distinguish between these different cases but will represent them as the abstract concept that is a resource.\n\nIf Workers are used, each thread has an independent async_hooks interface, and each thread will use a new set of async IDs.\n\nOverview#\nFollowing is a simple overview of the public API.\n\nimport async_hooks from 'node:async_hooks';\n\n// Return the ID of the current execution context.\nconst eid = async_hooks.executionAsyncId();\n\n// Return the ID of the handle responsible for triggering the callback of the\n// current execution scope to call.\nconst tid = async_hooks.triggerAsyncId();\n\n// Create a new AsyncHook instance. All of these callbacks are optional.\nconst asyncHook =\n    async_hooks.createHook({ init, before, after, destroy, promiseResolve });\n\n// Allow callbacks of this AsyncHook instance to call. This is not an implicit\n// action after running the constructor, and must be explicitly run to begin\n// executing callbacks.\nasyncHook.enable();\n\n// Disable listening for new asynchronous events.\nasyncHook.disable();\n\n//\n// The following are the callbacks that can be passed to createHook().\n//\n\n// init() is called during object construction. The resource may not have\n// completed construction when this callback runs. Therefore, all fields of the\n// resource referenced by \"asyncId\" may not have been populated.\nfunction init(asyncId, type, triggerAsyncId, resource) { }\n\n// before() is called just before the resource's callback is called. It can be\n// called 0-N times for handles (such as TCPWrap), and will be called exactly 1\n// time for requests (such as FSReqCallback).\nfunction before(asyncId) { }\n\n// after() is called just after the resource's callback has finished.\nfunction after(asyncId) { }\n\n// destroy() is called when the resource is destroyed.\nfunction destroy(asyncId) { }\n\n// promiseResolve() is called only for promise resources, when the\n// resolve() function passed to the Promise constructor is invoked\n// (either directly or through other means of resolving a promise).\nfunction promiseResolve(asyncId) { }\nasync_hooks.createHook(callbacks)#\nAdded in: v8.1.0\ncallbacks <Object> The Hook Callbacks to register\ninit <Function> The init callback.\nbefore <Function> The before callback.\nafter <Function> The after callback.\ndestroy <Function> The destroy callback.\npromiseResolve <Function> The promiseResolve callback.\nReturns: <AsyncHook> Instance used for disabling and enabling hooks\nRegisters functions to be called for different lifetime events of each async operation.\n\nThe callbacks init()/before()/after()/destroy() are called for the respective asynchronous event during a resource's lifetime.\n\nAll callbacks are optional. For example, if only resource cleanup needs to be tracked, then only the destroy callback needs to be passed. The specifics of all functions that can be passed to callbacks is in the Hook Callbacks", "doc_id": "87603fde-ea28-4d58-a5c3-d4f3634e34a3", "embedding": null, "doc_hash": "a26879d6c4055820813f8029ec832c07b7acd753e95b1d4f30c4c31f7cc0616c", "extra_info": null, "node_info": {"start": 202960, "end": 206834}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1bbd2e1c-b744-4257-924c-554b92d5cdca", "3": "9277f5cf-faca-4767-b9b5-bc1977682703"}}, "__type__": "1"}, "9277f5cf-faca-4767-b9b5-bc1977682703": {"__data__": {"text": "in: v8.1.0\ncallbacks <Object> The Hook Callbacks to register\ninit <Function> The init callback.\nbefore <Function> The before callback.\nafter <Function> The after callback.\ndestroy <Function> The destroy callback.\npromiseResolve <Function> The promiseResolve callback.\nReturns: <AsyncHook> Instance used for disabling and enabling hooks\nRegisters functions to be called for different lifetime events of each async operation.\n\nThe callbacks init()/before()/after()/destroy() are called for the respective asynchronous event during a resource's lifetime.\n\nAll callbacks are optional. For example, if only resource cleanup needs to be tracked, then only the destroy callback needs to be passed. The specifics of all functions that can be passed to callbacks is in the Hook Callbacks section.\n\nimport { createHook } from 'node:async_hooks';\n\nconst asyncHook = createHook({\n  init(asyncId, type, triggerAsyncId, resource) { },\n  destroy(asyncId) { },\n});\nThe callbacks will be inherited via the prototype chain:\n\nclass MyAsyncCallbacks {\n  init(asyncId, type, triggerAsyncId, resource) { }\n  destroy(asyncId) {}\n}\n\nclass MyAddedCallbacks extends MyAsyncCallbacks {\n  before(asyncId) { }\n  after(asyncId) { }\n}\n\nconst asyncHook = async_hooks.createHook(new MyAddedCallbacks());\nBecause promises are asynchronous resources whose lifecycle is tracked via the async hooks mechanism, the init(), before(), after(), and destroy() callbacks must not be async functions that return promises.\n\nError handling#\nIf any AsyncHook callbacks throw, the application will print the stack trace and exit. The exit path does follow that of an uncaught exception, but all 'uncaughtException' listeners are removed, thus forcing the process to exit. The 'exit' callbacks will still be called unless the application is run with --abort-on-uncaught-exception, in which case a stack trace will be printed and the application exits, leaving a core file.\n\nThe reason for this error handling behavior is that these callbacks are running at potentially volatile points in an object's lifetime, for example during class construction and destruction. Because of this, it is deemed necessary to bring down the process quickly in order to prevent an unintentional abort in the future. This is subject to change in the future if a comprehensive analysis is performed to ensure an exception can follow the normal control flow without unintentional side effects.\n\nPrinting in AsyncHook callbacks#\nBecause printing to the console is an asynchronous operation, console.log() will cause AsyncHook callbacks to be called. Using console.log() or similar asynchronous operations inside an AsyncHook callback function will cause an infinite recursion. An easy solution to this when debugging is to use a synchronous logging operation such as fs.writeFileSync(file, msg, flag). This will print to the file and will not invoke AsyncHook recursively because it is synchronous.\n\nimport { writeFileSync } from 'node:fs';\nimport { format } from 'node:util';\n\nfunction debug(...args) {\n  // Use a function like this one when debugging inside an AsyncHook callback\n  writeFileSync('log.out', `${format(...args)}\\n`, { flag: 'a' });\n}\nIf an asynchronous operation is needed for logging, it is possible to keep track of what caused the asynchronous operation using the information provided by AsyncHook itself. The logging should then be skipped when it was the logging itself that caused the AsyncHook callback to be called. By doing this, the otherwise infinite recursion is broken.\n\nClass: AsyncHook#\nThe class AsyncHook exposes an interface for tracking lifetime events of asynchronous operations.\n\nasyncHook.enable()#\nReturns: <AsyncHook> A reference to asyncHook.\nEnable the callbacks for a given AsyncHook instance. If no callbacks are provided, enabling is a no-op.\n\nThe AsyncHook instance is disabled by default. If the AsyncHook instance should be enabled immediately after creation,", "doc_id": "9277f5cf-faca-4767-b9b5-bc1977682703", "embedding": null, "doc_hash": "230a7707a9a24589c66de78c2ff64c5d88d404ec59fc4749929757b9cf0567de", "extra_info": null, "node_info": {"start": 206867, "end": 210803}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "87603fde-ea28-4d58-a5c3-d4f3634e34a3", "3": "7c3e94d1-c041-4784-b903-45f50a9c0c94"}}, "__type__": "1"}, "7c3e94d1-c041-4784-b903-45f50a9c0c94": {"__data__": {"text": "{ flag: 'a' });\n}\nIf an asynchronous operation is needed for logging, it is possible to keep track of what caused the asynchronous operation using the information provided by AsyncHook itself. The logging should then be skipped when it was the logging itself that caused the AsyncHook callback to be called. By doing this, the otherwise infinite recursion is broken.\n\nClass: AsyncHook#\nThe class AsyncHook exposes an interface for tracking lifetime events of asynchronous operations.\n\nasyncHook.enable()#\nReturns: <AsyncHook> A reference to asyncHook.\nEnable the callbacks for a given AsyncHook instance. If no callbacks are provided, enabling is a no-op.\n\nThe AsyncHook instance is disabled by default. If the AsyncHook instance should be enabled immediately after creation, the following pattern can be used.\n\nimport { createHook } from 'node:async_hooks';\n\nconst hook = createHook(callbacks).enable();\nasyncHook.disable()#\nReturns: <AsyncHook> A reference to asyncHook.\nDisable the callbacks for a given AsyncHook instance from the global pool of AsyncHook callbacks to be executed. Once a hook has been disabled it will not be called again until enabled.\n\nFor API consistency disable() also returns the AsyncHook instance.\n\n\nconsole.log(buf.lastIndexOf(Buffer.from('yolo')));\n// Prints: -1\nconsole.log(buf.lastIndexOf('buffer', 5));\n// Prints: 5\nconsole.log(buf.lastIndexOf('buffer', 4));\n// Prints: -1\n\nconst utf16Buffer = Buffer.from('\\u039a\\u0391\\u03a3\\u03a3\\u0395', 'utf16le');\n\nconsole.log(utf16Buffer.lastIndexOf('\\u03a3', undefined, 'utf16le'));\n// Prints: 6\nconsole.log(utf16Buffer.lastIndexOf('\\u03a3', -5, 'utf16le'));\n// Prints: 4\nIf value is not a string, number, or Buffer, this method will throw a TypeError. If value is a number, it will be coerced to a valid byte value, an integer between 0 and 255.\n\nIf byteOffset is not a number, it will be coerced to a number. Any arguments that coerce to NaN, like {} or undefined, will search the whole buffer. This behavior matches String.prototype.lastIndexOf().\n\nimport { Buffer } from 'node:buffer';\n\nconst b = Buffer.from('abcdef');\n\n// Passing a value that's a number, but not a valid byte.\n// Prints: 2, equivalent to searching for 99 or 'c'.\nconsole.log(b.lastIndexOf(99.9));\nconsole.log(b.lastIndexOf(256 + 99));\n\n// Passing a byteOffset that coerces to NaN.\n// Prints: 1, searching the whole buffer.\nconsole.log(b.lastIndexOf('b', undefined));\nconsole.log(b.lastIndexOf('b', {}));\n\n// Passing a byteOffset that coerces to 0.\n// Prints: -1, equivalent to passing 0.\nconsole.log(b.lastIndexOf('b', null));\nconsole.log(b.lastIndexOf('b', []));\nIf value is an empty string or empty Buffer, byteOffset will be returned.\n\nbuf.length#\nAdded in: v0.1.90\n<integer>\nReturns the number of bytes in buf.\n\nimport { Buffer } from 'node:buffer';\n\n// Create a `Buffer` and write a shorter string to it using UTF-8.\n\nconst buf = Buffer.alloc(1234);\n\nconsole.log(buf.length);\n// Prints: 1234\n\nbuf.write('some string', 0, 'utf8');\n\nconsole.log(buf.length);\n// Prints: 1234\nbuf.parent#\nDeprecated since: v8.0.0\nStability: 0 - Deprecated: Use buf.buffer instead.\nThe buf.parent property is a deprecated alias for buf.buffer.\n\nbuf.readBigInt64BE([offset])#\nAdded in:", "doc_id": "7c3e94d1-c041-4784-b903-45f50a9c0c94", "embedding": null, "doc_hash": "2d8f38a126fdbce087264d30cbc35d2131fc8438879818270e430b8a660e13e7", "extra_info": null, "node_info": {"start": 210817, "end": 214031}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9277f5cf-faca-4767-b9b5-bc1977682703", "3": "107ac360-82f3-4c49-9fe3-262c11d361ca"}}, "__type__": "1"}, "107ac360-82f3-4c49-9fe3-262c11d361ca": {"__data__": {"text": "empty string or empty Buffer, byteOffset will be returned.\n\nbuf.length#\nAdded in: v0.1.90\n<integer>\nReturns the number of bytes in buf.\n\nimport { Buffer } from 'node:buffer';\n\n// Create a `Buffer` and write a shorter string to it using UTF-8.\n\nconst buf = Buffer.alloc(1234);\n\nconsole.log(buf.length);\n// Prints: 1234\n\nbuf.write('some string', 0, 'utf8');\n\nconsole.log(buf.length);\n// Prints: 1234\nbuf.parent#\nDeprecated since: v8.0.0\nStability: 0 - Deprecated: Use buf.buffer instead.\nThe buf.parent property is a deprecated alias for buf.buffer.\n\nbuf.readBigInt64BE([offset])#\nAdded in: v12.0.0, v10.20.0\noffset <integer> Number of bytes to skip before starting to read. Must satisfy: 0 <= offset <= buf.length - 8. Default: 0.\nReturns: <bigint>\nReads a signed, big-endian 64-bit integer from buf at the specified offset.\n\nIntegers read from a Buffer are interpreted as two's complement signed values.\n\nbuf.readBigInt64LE([offset])#\nAdded in: v12.0.0, v10.20.0\noffset <integer> Number of bytes to skip before starting to read. Must satisfy: 0 <= offset <= buf.length - 8. Default: 0.\nReturns: <bigint>\nReads a signed, little-endian 64-bit integer from buf at the specified offset.\n\nIntegers read from a Buffer are interpreted as two's complement signed values.\n\nbuf.readBigUInt64BE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy: 0 <= offset <= buf.length - 8. Default: 0.\nReturns: <bigint>\nReads an unsigned, big-endian 64-bit integer from buf at the specified offset.\n\nThis function is also available under the readBigUint64BE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);\n\nconsole.log(buf.readBigUInt64BE(0));\n// Prints: 4294967295n\nbuf.readBigUInt64LE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy: 0 <= offset <= buf.length - 8. Default: 0.\nReturns: <bigint>\nReads an unsigned, little-endian 64-bit integer from buf at the specified offset.\n\nThis function is also available under the readBigUint64LE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);\n\nconsole.log(buf.readBigUInt64LE(0));\n// Prints: 18446744069414584320n\nbuf.readDoubleBE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 8. Default: 0.\nReturns: <number>\nReads a 64-bit, big-endian double from buf at the specified offset.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\nconsole.log(buf.readDoubleBE(0));\n// Prints: 8.20788039913184e-304\nbuf.readDoubleLE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 8. Default: 0.\nReturns: <number>\nReads a 64-bit, little-endian double from buf at the specified offset.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([1, 2, 3, 4, 5, 6, 7,", "doc_id": "107ac360-82f3-4c49-9fe3-262c11d361ca", "embedding": null, "doc_hash": "e4e2c96f1732ad52aebf48cc7a02d82e901ed5f5f3d2cc6f403104e9577babe4", "extra_info": null, "node_info": {"start": 214171, "end": 217185}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7c3e94d1-c041-4784-b903-45f50a9c0c94", "3": "8fb29e04-98bb-4907-a2bc-b5b65af301e3"}}, "__type__": "1"}, "8fb29e04-98bb-4907-a2bc-b5b65af301e3": {"__data__": {"text": "<number>\nReads a 64-bit, big-endian double from buf at the specified offset.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\nconsole.log(buf.readDoubleBE(0));\n// Prints: 8.20788039913184e-304\nbuf.readDoubleLE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 8. Default: 0.\nReturns: <number>\nReads a 64-bit, little-endian double from buf at the specified offset.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\nconsole.log(buf.readDoubleLE(0));\n// Prints: 5.447603722011605e-270\nconsole.log(buf.readDoubleLE(1));\n// Throws ERR_OUT_OF_RANGE.\nbuf.readFloatBE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <number>\nReads a 32-bit, big-endian float from buf at the specified offset.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([1, 2, 3, 4]);\n\nconsole.log(buf.readFloatBE(0));\n// Prints: 2.387939260590663e-38\nbuf.readFloatLE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <number>\nReads a 32-bit, little-endian float from buf at the specified offset.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([1, 2, 3, 4]);\n\nconsole.log(buf.readFloatLE(0));\n// Prints: 1.539989614439558e-36\nconsole.log(buf.readFloatLE(1));\n// Throws ERR_OUT_OF_RANGE.\nbuf.readInt8([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 1. Default: 0.\nReturns: <integer>\nReads a signed 8-bit integer from buf at the specified offset.\n\nIntegers read from a Buffer are interpreted as two's complement signed values.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([-1, 5]);\n\nconsole.log(buf.readInt8(0));\n// Prints: -1\nconsole.log(buf.readInt8(1));\n// Prints: 5\nconsole.log(buf.readInt8(2));\n// Throws ERR_OUT_OF_RANGE.\nbuf.readInt16BE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 2. Default: 0.\nReturns: <integer>\nReads a signed, big-endian 16-bit integer from buf at the specified offset.\n\nIntegers read from a Buffer are interpreted as two's complement signed values.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0, 5]);\n\nconsole.log(buf.readInt16BE(0));\n// Prints: 5\nbuf.readInt16LE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 2. Default: 0.\nReturns: <integer>\nReads a signed, little-endian 16-bit integer from buf at the specified offset.\n\nIntegers read from a Buffer are interpreted as two's complement signed values.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0, 5]);\n\nconsole.log(buf.readInt16LE(0));\n// Prints:", "doc_id": "8fb29e04-98bb-4907-a2bc-b5b65af301e3", "embedding": null, "doc_hash": "20f7b224fe80500a429d7b6580c3bd7b295400380f16448bff584c1daff83347", "extra_info": null, "node_info": {"start": 217219, "end": 220204}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "107ac360-82f3-4c49-9fe3-262c11d361ca", "3": "d12ba89a-9759-4322-ac34-f1db6ceaadac"}}, "__type__": "1"}, "d12ba89a-9759-4322-ac34-f1db6ceaadac": {"__data__": {"text": "read from a Buffer are interpreted as two's complement signed values.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0, 5]);\n\nconsole.log(buf.readInt16BE(0));\n// Prints: 5\nbuf.readInt16LE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 2. Default: 0.\nReturns: <integer>\nReads a signed, little-endian 16-bit integer from buf at the specified offset.\n\nIntegers read from a Buffer are interpreted as two's complement signed values.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0, 5]);\n\nconsole.log(buf.readInt16LE(0));\n// Prints: 1280\nconsole.log(buf.readInt16LE(1));\n// Throws ERR_OUT_OF_RANGE.\nbuf.readInt32BE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <integer>\nReads a signed, big-endian 32-bit integer from buf at the specified offset.\n\nIntegers read from a Buffer are interpreted as two's complement signed values.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0, 0, 0, 5]);\n\nconsole.log(buf.readInt32BE(0));\n// Prints: 5\nbuf.readInt32LE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <integer>\nReads a signed, little-endian 32-bit integer from buf at the specified offset.\n\nIntegers read from a Buffer are interpreted as two's complement signed values.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0, 0, 0, 5]);\n\nconsole.log(buf.readInt32LE(0));\n// Prints: 83886080\nconsole.log(buf.readInt32LE(1));\n// Throws ERR_OUT_OF_RANGE.\nbuf.readIntBE(offset, byteLength)#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - byteLength.\nbyteLength <integer> Number of bytes to read. Must satisfy 0 < byteLength <= 6.\nReturns: <integer>\nReads byteLength number of bytes from buf at the specified offset and interprets the result as a big-endian, two's complement signed value supporting up to 48 bits of accuracy.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\nconsole.log(buf.readIntBE(0, 6).toString(16));\n// Prints: 1234567890ab\nconsole.log(buf.readIntBE(1, 6).toString(16));\n// Throws ERR_OUT_OF_RANGE.\nconsole.log(buf.readIntBE(1, 0).toString(16));\n// Throws ERR_OUT_OF_RANGE.\nbuf.readIntLE(offset, byteLength)#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - byteLength.\nbyteLength <integer> Number of bytes to read. Must satisfy 0 < byteLength <= 6.\nReturns: <integer>\nReads byteLength number of bytes from buf at the specified offset and interprets the result as a little-endian, two's complement signed value supporting up to 48 bits of accuracy.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\nconsole.log(buf.readIntLE(0, 6).toString(16));\n// Prints:", "doc_id": "d12ba89a-9759-4322-ac34-f1db6ceaadac", "embedding": null, "doc_hash": "add7f4ee048e410d44d9fc1f504b962d0a2177a35aa3105f90892c1f73951b80", "extra_info": null, "node_info": {"start": 220133, "end": 223194}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8fb29e04-98bb-4907-a2bc-b5b65af301e3", "3": "12d2a9bd-fffa-41f6-96cb-6049da95d6cc"}}, "__type__": "1"}, "12d2a9bd-fffa-41f6-96cb-6049da95d6cc": {"__data__": {"text": "byteLength)#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - byteLength.\nbyteLength <integer> Number of bytes to read. Must satisfy 0 < byteLength <= 6.\nReturns: <integer>\nReads byteLength number of bytes from buf at the specified offset and interprets the result as a little-endian, two's complement signed value supporting up to 48 bits of accuracy.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\nconsole.log(buf.readIntLE(0, 6).toString(16));\n// Prints: -546f87a9cbee\nbuf.readUInt8([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 1. Default: 0.\nReturns: <integer>\nReads an unsigned 8-bit integer from buf at the specified offset.\n\nThis function is also available under the readUint8 alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([1, -2]);\n\nconsole.log(buf.readUInt8(0));\n// Prints: 1\nconsole.log(buf.readUInt8(1));\n// Prints: 254\nconsole.log(buf.readUInt8(2));\n// Throws ERR_OUT_OF_RANGE.\nbuf.readUInt16BE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 2. Default: 0.\nReturns: <integer>\nReads an unsigned, big-endian 16-bit integer from buf at the specified offset.\n\nThis function is also available under the readUint16BE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56]);\n\nconsole.log(buf.readUInt16BE(0).toString(16));\n// Prints: 1234\nconsole.log(buf.readUInt16BE(1).toString(16));\n// Prints: 3456\nbuf.readUInt16LE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 2. Default: 0.\nReturns: <integer>\nReads an unsigned, little-endian 16-bit integer from buf at the specified offset.\n\nThis function is also available under the readUint16LE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56]);\n\nconsole.log(buf.readUInt16LE(0).toString(16));\n// Prints: 3412\nconsole.log(buf.readUInt16LE(1).toString(16));\n// Prints: 5634\nconsole.log(buf.readUInt16LE(2).toString(16));\n// Throws ERR_OUT_OF_RANGE.\nbuf.readUInt32BE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <integer>\nReads an unsigned, big-endian 32-bit integer from buf at the specified offset.\n\nThis function is also available under the readUint32BE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n\nconsole.log(buf.readUInt32BE(0).toString(16));\n// Prints: 12345678\nbuf.readUInt32LE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <integer>\nReads an unsigned, little-endian 32-bit integer from buf at the specified offset.\n\nThis function is also available under the readUint32LE alias.\n\nimport { Buffer } from", "doc_id": "12d2a9bd-fffa-41f6-96cb-6049da95d6cc", "embedding": null, "doc_hash": "645af1bfa5a41e75bf734d3da7ac61daf234baf0cf6161df7d11eec1db055186", "extra_info": null, "node_info": {"start": 223258, "end": 226340}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d12ba89a-9759-4322-ac34-f1db6ceaadac", "3": "93622c48-b330-4fe6-a114-a1fdca1f28a6"}}, "__type__": "1"}, "93622c48-b330-4fe6-a114-a1fdca1f28a6": {"__data__": {"text": "an unsigned, big-endian 32-bit integer from buf at the specified offset.\n\nThis function is also available under the readUint32BE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n\nconsole.log(buf.readUInt32BE(0).toString(16));\n// Prints: 12345678\nbuf.readUInt32LE([offset])#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <integer>\nReads an unsigned, little-endian 32-bit integer from buf at the specified offset.\n\nThis function is also available under the readUint32LE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n\nconsole.log(buf.readUInt32LE(0).toString(16));\n// Prints: 78563412\nconsole.log(buf.readUInt32LE(1).toString(16));\n// Throws ERR_OUT_OF_RANGE.\nbuf.readUIntBE(offset, byteLength)#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - byteLength.\nbyteLength <integer> Number of bytes to read. Must satisfy 0 < byteLength <= 6.\nReturns: <integer>\nReads byteLength number of bytes from buf at the specified offset and interprets the result as an unsigned big-endian integer supporting up to 48 bits of accuracy.\n\nThis function is also available under the readUintBE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\nconsole.log(buf.readUIntBE(0, 6).toString(16));\n// Prints: 1234567890ab\nconsole.log(buf.readUIntBE(1, 6).toString(16));\n// Throws ERR_OUT_OF_RANGE.\nbuf.readUIntLE(offset, byteLength)#\nHistory\noffset <integer> Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - byteLength.\nbyteLength <integer> Number of bytes to read. Must satisfy 0 < byteLength <= 6.\nReturns: <integer>\nReads byteLength number of bytes from buf at the specified offset and interprets the result as an unsigned, little-endian integer supporting up to 48 bits of accuracy.\n\nThis function is also available under the readUintLE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\nconsole.log(buf.readUIntLE(0, 6).toString(16));\n// Prints: ab9078563412\nbuf.subarray([start[, end]])#\nAdded in: v3.0.0\nstart <integer> Where the new Buffer will start. Default: 0.\nend <integer> Where the new Buffer will end (not inclusive). Default: buf.length.\nReturns: <Buffer>\nReturns a new Buffer that references the same memory as the original, but offset and cropped by the start and end indices.\n\nSpecifying end greater than buf.length will return the same result as that of end equal to buf.length.\n\nThis method is inherited from TypedArray.prototype.subarray().\n\nModifying the new Buffer slice will modify the memory in the original Buffer because the allocated memory of the two objects overlap.\n\nimport { Buffer } from 'node:buffer';\n\n// Create a `Buffer` with the ASCII alphabet, take a slice, and modify one byte\n// from the original `Buffer`.\n\nconst buf1 = Buffer.allocUnsafe(26);\n\nfor (let i = 0; i < 26; i++) {\n  // 97 is the decimal ASCII value for 'a'.\n  buf1[i] = i + 97;\n}\n\nconst buf2 =", "doc_id": "93622c48-b330-4fe6-a114-a1fdca1f28a6", "embedding": null, "doc_hash": "b4f6c0fa6221cfdca0d85785a23a279fc010321b5084a1d0331f57d1213edd47", "extra_info": null, "node_info": {"start": 226281, "end": 229472}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "12d2a9bd-fffa-41f6-96cb-6049da95d6cc", "3": "eadc86b7-64eb-406c-a375-a95285fe7d5f"}}, "__type__": "1"}, "eadc86b7-64eb-406c-a375-a95285fe7d5f": {"__data__": {"text": "memory as the original, but offset and cropped by the start and end indices.\n\nSpecifying end greater than buf.length will return the same result as that of end equal to buf.length.\n\nThis method is inherited from TypedArray.prototype.subarray().\n\nModifying the new Buffer slice will modify the memory in the original Buffer because the allocated memory of the two objects overlap.\n\nimport { Buffer } from 'node:buffer';\n\n// Create a `Buffer` with the ASCII alphabet, take a slice, and modify one byte\n// from the original `Buffer`.\n\nconst buf1 = Buffer.allocUnsafe(26);\n\nfor (let i = 0; i < 26; i++) {\n  // 97 is the decimal ASCII value for 'a'.\n  buf1[i] = i + 97;\n}\n\nconst buf2 = buf1.subarray(0, 3);\n\nconsole.log(buf2.toString('ascii', 0, buf2.length));\n// Prints: abc\n\nbuf1[0] = 33;\n\nconsole.log(buf2.toString('ascii', 0, buf2.length));\n// Prints: !bc\nSpecifying negative indexes causes the slice to be generated relative to the end of buf rather than the beginning.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from('buffer');\n\nconsole.log(buf.subarray(-6, -1).toString());\n// Prints: buffe\n// (Equivalent to buf.subarray(0, 5).)\n\nconsole.log(buf.subarray(-6, -2).toString());\n// Prints: buff\n// (Equivalent to buf.subarray(0, 4).)\n\nconsole.log(buf.subarray(-5, -2).toString());\n// Prints: uff\n// (Equivalent to buf.subarray(1, 4).)\nbuf.slice([start[, end]])#\nHistory\nstart <integer> Where the new Buffer will start. Default: 0.\nend <integer> Where the new Buffer will end (not inclusive). Default: buf.length.\nReturns: <Buffer>\nStability: 0 - Deprecated: Use buf.subarray instead.\nReturns a new Buffer that references the same memory as the original, but offset and cropped by the start and end indices.\n\nThis method is not compatible with the Uint8Array.prototype.slice(), which is a superclass of Buffer. To copy the slice, use Uint8Array.prototype.slice().\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from('buffer');\n\nconst copiedBuf = Uint8Array.prototype.slice.call(buf);\ncopiedBuf[0]++;\nconsole.log(copiedBuf.toString());\n// Prints: cuffer\n\nconsole.log(buf.toString());\n// Prints: buffer\n\n// With buf.slice(), the original buffer is modified.\nconst notReallyCopiedBuf = buf.slice();\nnotReallyCopiedBuf[0]++;\nconsole.log(notReallyCopiedBuf.toString());\n// Prints: cuffer\nconsole.log(buf.toString());\n// Also prints: cuffer (!)\nbuf.swap16()#\nAdded in: v5.10.0\nReturns: <Buffer> A reference to buf.\nInterprets buf as an array of unsigned 16-bit integers and swaps the byte order in-place. Throws ERR_INVALID_BUFFER_SIZE if buf.length is not a multiple of 2.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\nconsole.log(buf1);\n// Prints: <Buffer 01 02 03 04 05 06 07 08>\n\nbuf1.swap16();\n\nconsole.log(buf1);\n// Prints: <Buffer 02 01 04 03 06 05 08 07>\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\nbuf2.swap16();\n// Throws ERR_INVALID_BUFFER_SIZE.\nOne convenient use of buf.swap16() is to perform a fast in-place conversion", "doc_id": "eadc86b7-64eb-406c-a375-a95285fe7d5f", "embedding": null, "doc_hash": "235e255cacf143ff2593cb791543e89ab17e8aeb01091ef05d3f219564233235", "extra_info": null, "node_info": {"start": 229465, "end": 232482}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "93622c48-b330-4fe6-a114-a1fdca1f28a6", "3": "0eeb7054-7f7a-46fb-a4e5-37b8fc8d6d6a"}}, "__type__": "1"}, "0eeb7054-7f7a-46fb-a4e5-37b8fc8d6d6a": {"__data__": {"text": "if buf.length is not a multiple of 2.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\nconsole.log(buf1);\n// Prints: <Buffer 01 02 03 04 05 06 07 08>\n\nbuf1.swap16();\n\nconsole.log(buf1);\n// Prints: <Buffer 02 01 04 03 06 05 08 07>\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\nbuf2.swap16();\n// Throws ERR_INVALID_BUFFER_SIZE.\nOne convenient use of buf.swap16() is to perform a fast in-place conversion between UTF-16 little-endian and UTF-16 big-endian:\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from('This is little-endian UTF-16', 'utf16le');\nbuf.swap16(); // Convert to big-endian UTF-16 text.\nbuf.swap32()#\nAdded in: v5.10.0\nReturns: <Buffer> A reference to buf.\nInterprets buf as an array of unsigned 32-bit integers and swaps the byte order in-place. Throws ERR_INVALID_BUFFER_SIZE if buf.length is not a multiple of 4.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\nconsole.log(buf1);\n// Prints: <Buffer 01 02 03 04 05 06 07 08>\n\nbuf1.swap32();\n\nconsole.log(buf1);\n// Prints: <Buffer 04 03 02 01 08 07 06 05>\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\nbuf2.swap32();\n// Throws ERR_INVALID_BUFFER_SIZE.\nbuf.swap64()#\nAdded in: v6.3.0\nReturns: <Buffer> A reference to buf.\nInterprets buf as an array of 64-bit numbers and swaps byte order in-place. Throws ERR_INVALID_BUFFER_SIZE if buf.length is not a multiple of 8.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\nconsole.log(buf1);\n// Prints: <Buffer 01 02 03 04 05 06 07 08>\n\nbuf1.swap64();\n\nconsole.log(buf1);\n// Prints: <Buffer 08 07 06 05 04 03 02 01>\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\nbuf2.swap64();\n// Throws ERR_INVALID_BUFFER_SIZE.\nbuf.toJSON()#\nAdded in: v0.9.2\nReturns: <Object>\nReturns a JSON representation of buf. JSON.stringify() implicitly calls this function when stringifying a Buffer instance.\n\nBuffer.from() accepts objects in the format returned from this method. In particular, Buffer.from(buf.toJSON()) works like Buffer.from(buf).\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\nconst json = JSON.stringify(buf);\n\nconsole.log(json);\n// Prints: {\"type\":\"Buffer\",\"data\":[1,2,3,4,5]}\n\nconst copy = JSON.parse(json, (key, value) => {\n  return value && value.type === 'Buffer' ?\n    Buffer.from(value) :\n    value;\n});\n\nconsole.log(copy);\n// Prints: <Buffer 01 02 03 04 05>\nbuf.toString([encoding[, start[, end]]])#\nAdded in: v0.1.90\nencoding <string> The character encoding to use.", "doc_id": "0eeb7054-7f7a-46fb-a4e5-37b8fc8d6d6a", "embedding": null, "doc_hash": "2896f77f38751bf031a54fdf967d45236fae8645a92e7cd75c54322ca102001a", "extra_info": null, "node_info": {"start": 232655, "end": 235269}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "eadc86b7-64eb-406c-a375-a95285fe7d5f", "3": "8d2b494d-d3e6-4301-bd18-74658c438476"}}, "__type__": "1"}, "8d2b494d-d3e6-4301-bd18-74658c438476": {"__data__": {"text": "like Buffer.from(buf).\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\nconst json = JSON.stringify(buf);\n\nconsole.log(json);\n// Prints: {\"type\":\"Buffer\",\"data\":[1,2,3,4,5]}\n\nconst copy = JSON.parse(json, (key, value) => {\n  return value && value.type === 'Buffer' ?\n    Buffer.from(value) :\n    value;\n});\n\nconsole.log(copy);\n// Prints: <Buffer 01 02 03 04 05>\nbuf.toString([encoding[, start[, end]]])#\nAdded in: v0.1.90\nencoding <string> The character encoding to use. Default: 'utf8'.\nstart <integer> The byte offset to start decoding at. Default: 0.\nend <integer> The byte offset to stop decoding at (not inclusive). Default: buf.length.\nReturns: <string>\nDecodes buf to a string according to the specified character encoding in encoding. start and end may be passed to decode only a subset of buf.\n\nIf encoding is 'utf8' and a byte sequence in the input is not valid UTF-8, then each invalid byte is replaced with the replacement character U+FFFD.\n\nThe maximum length of a string instance (in UTF-16 code units) is available as buffer.constants.MAX_STRING_LENGTH.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.allocUnsafe(26);\n\nfor (let i = 0; i < 26; i++) {\n  // 97 is the decimal ASCII value for 'a'.\n  buf1[i] = i + 97;\n}\n\nconsole.log(buf1.toString('utf8'));\n// Prints: abcdefghijklmnopqrstuvwxyz\nconsole.log(buf1.toString('utf8', 0, 5));\n// Prints: abcde\n\nconst buf2 = Buffer.from('t\u00e9st');\n\nconsole.log(buf2.toString('hex'));\n// Prints: 74c3a97374\nconsole.log(buf2.toString('utf8', 0, 3));\n// Prints: t\u00e9\nconsole.log(buf2.toString(undefined, 0, 3));\n// Prints: t\u00e9\nbuf.values()#\nAdded in: v1.1.0\nReturns: <Iterator>\nCreates and returns an iterator for buf values (bytes). This function is called automatically when a Buffer is used in a for..of statement.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from('buffer');\n\nfor (const value of buf.values()) {\n  console.log(value);\n}\n// Prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\n\nfor (const value of buf) {\n  console.log(value);\n}\n// Prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\nbuf.write(string[, offset[, length]][, encoding])#\nAdded in: v0.1.90\nstring <string> String to write to buf.\noffset <integer> Number of bytes to skip before starting to write string. Default: 0.\nlength <integer> Maximum number of bytes to write (written bytes will not exceed buf.length - offset). Default: buf.length - offset.\nencoding <string> The character encoding of string. Default: 'utf8'.\nReturns: <integer> Number of bytes written.\nWrites string to buf at offset according to the character encoding in encoding. The length parameter is the number of bytes to write. If buf did not contain enough space to fit the entire string, only part of string will be written. However, partially encoded characters will not be written.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.alloc(256);\n\nconst len = buf.write('\\u00bd + \\u00bc = \\u00be', 0);\n\nconsole.log(`${len} bytes:", "doc_id": "8d2b494d-d3e6-4301-bd18-74658c438476", "embedding": null, "doc_hash": "db338369e980b1b8e5a3cddc10a720773bf488ef52247c9679dd029f7b8713a7", "extra_info": null, "node_info": {"start": 235216, "end": 238238}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0eeb7054-7f7a-46fb-a4e5-37b8fc8d6d6a", "3": "bc269a3d-8c56-43be-8f20-5037a3f4326a"}}, "__type__": "1"}, "bc269a3d-8c56-43be-8f20-5037a3f4326a": {"__data__": {"text": "skip before starting to write string. Default: 0.\nlength <integer> Maximum number of bytes to write (written bytes will not exceed buf.length - offset). Default: buf.length - offset.\nencoding <string> The character encoding of string. Default: 'utf8'.\nReturns: <integer> Number of bytes written.\nWrites string to buf at offset according to the character encoding in encoding. The length parameter is the number of bytes to write. If buf did not contain enough space to fit the entire string, only part of string will be written. However, partially encoded characters will not be written.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.alloc(256);\n\nconst len = buf.write('\\u00bd + \\u00bc = \\u00be', 0);\n\nconsole.log(`${len} bytes: ${buf.toString('utf8', 0, len)}`);\n// Prints: 12 bytes: \u00bd + \u00bc = \u00be\n\nconst buffer = Buffer.alloc(10);\n\nconst length = buffer.write('abcd', 8);\n\nconsole.log(`${length} bytes: ${buffer.toString('utf8', 8, 10)}`);\n// Prints: 2 bytes : ab\nbuf.writeBigInt64BE(value[, offset])#\nAdded in: v12.0.0, v10.20.0\nvalue <bigint> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy: 0 <= offset <= buf.length - 8. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as big-endian.\n\nvalue is interpreted and written as a two's complement signed integer.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(8);\n\nbuf.writeBigInt64BE(0x0102030405060708n, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 01 02 03 04 05 06 07 08>\nbuf.writeBigInt64LE(value[, offset])#\nAdded in: v12.0.0, v10.20.0\nvalue <bigint> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy: 0 <= offset <= buf.length - 8. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as little-endian.\n\nvalue is interpreted and written as a two's complement signed integer.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(8);\n\nbuf.writeBigInt64LE(0x0102030405060708n, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 08 07 06 05 04 03 02 01>\nbuf.writeBigUInt64BE(value[, offset])#\nHistory\nvalue <bigint> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy: 0 <= offset <= buf.length - 8. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as big-endian.\n\nThis function is also available under the writeBigUint64BE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(8);\n\nbuf.writeBigUInt64BE(0xdecafafecacefaden, 0);\n\nconsole.log(buf);\n// Prints: <Buffer de ca fa fe ca ce fa de>\nbuf.writeBigUInt64LE(value[, offset])#\nHistory\nvalue <bigint> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy: 0 <= offset <= buf.length - 8. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as little-endian\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(8);\n\nbuf.writeBigUInt64LE(0xdecafafecacefaden,", "doc_id": "bc269a3d-8c56-43be-8f20-5037a3f4326a", "embedding": null, "doc_hash": "cb4db1b978643e05b91c9f8d05822bbc9fe366c449b89692d50640820e2c41f5", "extra_info": null, "node_info": {"start": 238057, "end": 241292}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8d2b494d-d3e6-4301-bd18-74658c438476", "3": "8be2e641-6c17-41b5-b0af-ebe91a54ecf3"}}, "__type__": "1"}, "8be2e641-6c17-41b5-b0af-ebe91a54ecf3": {"__data__": {"text": "buf = Buffer.allocUnsafe(8);\n\nbuf.writeBigUInt64BE(0xdecafafecacefaden, 0);\n\nconsole.log(buf);\n// Prints: <Buffer de ca fa fe ca ce fa de>\nbuf.writeBigUInt64LE(value[, offset])#\nHistory\nvalue <bigint> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy: 0 <= offset <= buf.length - 8. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as little-endian\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(8);\n\nbuf.writeBigUInt64LE(0xdecafafecacefaden, 0);\n\nconsole.log(buf);\n// Prints: <Buffer de fa ce ca fe fa ca de>\nThis function is also available under the writeBigUint64LE alias.\n\nbuf.writeDoubleBE(value[, offset])#\nHistory\nvalue <number> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 8. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as big-endian. The value must be a JavaScript number. Behavior is undefined when value is anything other than a JavaScript number.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(8);\n\nbuf.writeDoubleBE(123.456, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 40 5e dd 2f 1a 9f be 77>\nbuf.writeDoubleLE(value[, offset])#\nHistory\nvalue <number> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 8. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as little-endian. The value must be a JavaScript number. Behavior is undefined when value is anything other than a JavaScript number.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(8);\n\nbuf.writeDoubleLE(123.456, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 77 be 9f 1a 2f dd 5e 40>\nbuf.writeFloatBE(value[, offset])#\nHistory\nvalue <number> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as big-endian. Behavior is undefined when value is anything other than a JavaScript number.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeFloatBE(0xcafebabe, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 4f 4a fe bb>\nbuf.writeFloatLE(value[, offset])#\nHistory\nvalue <number> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as little-endian. Behavior is undefined when value is anything other than a JavaScript number.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\nconsole.log(buf);\n// Prints: <Buffer bb fe 4a 4f>\nbuf.writeInt8(value[, offset])#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 1. Default: 0.\nReturns: <integer> offset plus the number", "doc_id": "8be2e641-6c17-41b5-b0af-ebe91a54ecf3", "embedding": null, "doc_hash": "1f500f53b758dd452ab33b7571aec2d52d985e9839ae8f00046ba4bc3e75e9a9", "extra_info": null, "node_info": {"start": 241404, "end": 244750}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "bc269a3d-8c56-43be-8f20-5037a3f4326a", "3": "d4a07df8-378f-4a62-8c92-bdd5d0f3f994"}}, "__type__": "1"}, "d4a07df8-378f-4a62-8c92-bdd5d0f3f994": {"__data__": {"text": "satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as little-endian. Behavior is undefined when value is anything other than a JavaScript number.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\nconsole.log(buf);\n// Prints: <Buffer bb fe 4a 4f>\nbuf.writeInt8(value[, offset])#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 1. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset. value must be a valid signed 8-bit integer. Behavior is undefined when value is anything other than a signed 8-bit integer.\n\nvalue is interpreted and written as a two's complement signed integer.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(2);\n\nbuf.writeInt8(2, 0);\nbuf.writeInt8(-2, 1);\n\nconsole.log(buf);\n// Prints: <Buffer 02 fe>\nbuf.writeInt16BE(value[, offset])#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 2. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as big-endian. The value must be a valid signed 16-bit integer. Behavior is undefined when value is anything other than a signed 16-bit integer.\n\nThe value is interpreted and written as a two's complement signed integer.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(2);\n\nbuf.writeInt16BE(0x0102, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 01 02>\nbuf.writeInt16LE(value[, offset])#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 2. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as little-endian. The value must be a valid signed 16-bit integer. Behavior is undefined when value is anything other than a signed 16-bit integer.\n\nThe value is interpreted and written as a two's complement signed integer.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(2);\n\nbuf.writeInt16LE(0x0304, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 04 03>\nbuf.writeInt32BE(value[, offset])#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as big-endian. The value must be a valid signed 32-bit integer. Behavior is undefined when value is anything other than a signed 32-bit integer.\n\nThe value is interpreted and written as a two's complement signed integer.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeInt32BE(0x01020304, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 01 02 03 04>\nbuf.writeInt32LE(value[, offset])#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as little-endian. The", "doc_id": "d4a07df8-378f-4a62-8c92-bdd5d0f3f994", "embedding": null, "doc_hash": "7ad201ad2d39ea5941feb40701fdf3b261134aadc9e50ed651a2c7c8dc84e164", "extra_info": null, "node_info": {"start": 244704, "end": 248194}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8be2e641-6c17-41b5-b0af-ebe91a54ecf3", "3": "bbf2d2ed-2e09-4dcb-a5b3-39513e5bebd1"}}, "__type__": "1"}, "bbf2d2ed-2e09-4dcb-a5b3-39513e5bebd1": {"__data__": {"text": "a valid signed 32-bit integer. Behavior is undefined when value is anything other than a signed 32-bit integer.\n\nThe value is interpreted and written as a two's complement signed integer.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeInt32BE(0x01020304, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 01 02 03 04>\nbuf.writeInt32LE(value[, offset])#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as little-endian. The value must be a valid signed 32-bit integer. Behavior is undefined when value is anything other than a signed 32-bit integer.\n\nThe value is interpreted and written as a two's complement signed integer.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeInt32LE(0x05060708, 0);\n\nconsole.log(buf);\n// Prints: <Buffer 08 07 06 05>\nbuf.writeIntBE(value, offset, byteLength)#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - byteLength.\nbyteLength <integer> Number of bytes to write. Must satisfy 0 < byteLength <= 6.\nReturns: <integer> offset plus the number of bytes written.\nWrites byteLength bytes of value to buf at the specified offset as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined when value is anything other than a signed integer.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(6);\n\nbuf.writeIntBE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: <Buffer 12 34 56 78 90 ab>\nbuf.writeIntLE(value, offset, byteLength)#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - byteLength.\nbyteLength <integer> Number of bytes to write. Must satisfy 0 < byteLength <= 6.\nReturns: <integer> offset plus the number of bytes written.\nWrites byteLength bytes of value to buf at the specified offset as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined when value is anything other than a signed integer.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(6);\n\nbuf.writeIntLE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: <Buffer ab 90 78 56 34 12>\nbuf.writeUInt8(value[, offset])#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 1. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset. value must be a valid unsigned 8-bit integer. Behavior is undefined when value is anything other than an unsigned 8-bit integer.\n\nThis function is also available under the writeUint8 alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt8(0x3, 0);\nbuf.writeUInt8(0x4, 1);\nbuf.writeUInt8(0x23, 2);\nbuf.writeUInt8(0x42, 3);\n\nconsole.log(buf);\n// Prints: <Buffer 03 04 23 42>\nbuf.writeUInt16BE(value[, offset])#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length -", "doc_id": "bbf2d2ed-2e09-4dcb-a5b3-39513e5bebd1", "embedding": null, "doc_hash": "673f014e90f637de6dab1e85df494121a52c68a78359a839c83926ab069db38a", "extra_info": null, "node_info": {"start": 248173, "end": 251582}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d4a07df8-378f-4a62-8c92-bdd5d0f3f994", "3": "6ae397dd-d45b-4a85-8777-8df3bbc90811"}}, "__type__": "1"}, "6ae397dd-d45b-4a85-8777-8df3bbc90811": {"__data__": {"text": "valid unsigned 8-bit integer. Behavior is undefined when value is anything other than an unsigned 8-bit integer.\n\nThis function is also available under the writeUint8 alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt8(0x3, 0);\nbuf.writeUInt8(0x4, 1);\nbuf.writeUInt8(0x23, 2);\nbuf.writeUInt8(0x42, 3);\n\nconsole.log(buf);\n// Prints: <Buffer 03 04 23 42>\nbuf.writeUInt16BE(value[, offset])#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 2. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as big-endian. The value must be a valid unsigned 16-bit integer. Behavior is undefined when value is anything other than an unsigned 16-bit integer.\n\nThis function is also available under the writeUint16BE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\nconsole.log(buf);\n// Prints: <Buffer de ad be ef>\nbuf.writeUInt16LE(value[, offset])#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 2. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as little-endian. The value must be a valid unsigned 16-bit integer. Behavior is undefined when value is anything other than an unsigned 16-bit integer.\n\nThis function is also available under the writeUint16LE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\nconsole.log(buf);\n// Prints: <Buffer ad de ef be>\nbuf.writeUInt32BE(value[, offset])#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as big-endian. The value must be a valid unsigned 32-bit integer. Behavior is undefined when value is anything other than an unsigned 32-bit integer.\n\nThis function is also available under the writeUint32BE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt32BE(0xfeedface, 0);\n\nconsole.log(buf);\n// Prints: <Buffer fe ed fa ce>\nbuf.writeUInt32LE(value[, offset])#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as little-endian. The value must be a valid unsigned 32-bit integer. Behavior is undefined when value is anything other than an unsigned 32-bit integer.\n\nThis function is also available under the writeUint32LE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\nconsole.log(buf);\n// Prints: <Buffer ce fa ed fe>\nbuf.writeUIntBE(value, offset, byteLength)#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to", "doc_id": "6ae397dd-d45b-4a85-8777-8df3bbc90811", "embedding": null, "doc_hash": "afff12b3fbe8c0c126f08422a1cffd095d6a88c19d4ae6234fbb4f1bb991926e", "extra_info": null, "node_info": {"start": 251650, "end": 255027}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "bbf2d2ed-2e09-4dcb-a5b3-39513e5bebd1", "3": "9025e6fb-6287-4ad6-856f-a1bdf0df5fd1"}}, "__type__": "1"}, "9025e6fb-6287-4ad6-856f-a1bdf0df5fd1": {"__data__": {"text": "satisfy 0 <= offset <= buf.length - 4. Default: 0.\nReturns: <integer> offset plus the number of bytes written.\nWrites value to buf at the specified offset as little-endian. The value must be a valid unsigned 32-bit integer. Behavior is undefined when value is anything other than an unsigned 32-bit integer.\n\nThis function is also available under the writeUint32LE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\nconsole.log(buf);\n// Prints: <Buffer ce fa ed fe>\nbuf.writeUIntBE(value, offset, byteLength)#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - byteLength.\nbyteLength <integer> Number of bytes to write. Must satisfy 0 < byteLength <= 6.\nReturns: <integer> offset plus the number of bytes written.\nWrites byteLength bytes of value to buf at the specified offset as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined when value is anything other than an unsigned integer.\n\nThis function is also available under the writeUintBE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: <Buffer 12 34 56 78 90 ab>\nbuf.writeUIntLE(value, offset, byteLength)#\nHistory\nvalue <integer> Number to be written to buf.\noffset <integer> Number of bytes to skip before starting to write. Must satisfy 0 <= offset <= buf.length - byteLength.\nbyteLength <integer> Number of bytes to write. Must satisfy 0 < byteLength <= 6.\nReturns: <integer> offset plus the number of bytes written.\nWrites byteLength bytes of value to buf at the specified offset as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined when value is anything other than an unsigned integer.\n\nThis function is also available under the writeUintLE alias.\n\nimport { Buffer } from 'node:buffer';\n\nconst buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: <Buffer ab 90 78 56 34 12>\nnew Buffer(array)#\nHistory\nStability: 0 - Deprecated: Use Buffer.from(array) instead.\narray <integer[]> An array of bytes to copy from.\nSee Buffer.from(array).\n\nnew Buffer(arrayBuffer[, byteOffset[, length]])#\nHistory\nStability: 0 - Deprecated: Use Buffer.from(arrayBuffer[, byteOffset[, length]]) instead.\narrayBuffer <ArrayBuffer> | <SharedArrayBuffer> An ArrayBuffer, SharedArrayBuffer or the .buffer property of a TypedArray.\nbyteOffset <integer> Index of first byte to expose. Default: 0.\nlength <integer> Number of bytes to expose. Default: arrayBuffer.byteLength - byteOffset.\nSee Buffer.from(arrayBuffer[, byteOffset[, length]]).\n\nnew Buffer(buffer)#\nHistory\nStability: 0 - Deprecated: Use Buffer.from(buffer) instead.\nbuffer <Buffer> | <Uint8Array> An existing Buffer or Uint8Array from which to copy data.\nSee Buffer.from(buffer).\n\nnew Buffer(size)#\nHistory\nStability: 0 - Deprecated: Use Buffer.alloc() instead (also see Buffer.allocUnsafe()).\nsize <integer> The desired length of the new Buffer.\nSee Buffer.alloc() and Buffer.allocUnsafe(). This variant of the constructor is equivalent to Buffer.alloc().\n\nnew Buffer(string[, encoding])#\nHistory\nStability: 0 - Deprecated: Use Buffer.from(string[, encoding]) instead.\nstring <string> String to encode.\nencoding <string> The encoding of string. Default: 'utf8'.\nSee Buffer.from(string[, encoding]).\n\nClass: File#\nAdded in:", "doc_id": "9025e6fb-6287-4ad6-856f-a1bdf0df5fd1", "embedding": null, "doc_hash": "a5b305b8b624df3f435f906a13a7ad58890625f6bb52b33913829f9e152901a5", "extra_info": null, "node_info": {"start": 254955, "end": 258443}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6ae397dd-d45b-4a85-8777-8df3bbc90811", "3": "9766eb1e-4659-4940-a150-3ee5168fd61f"}}, "__type__": "1"}, "9766eb1e-4659-4940-a150-3ee5168fd61f": {"__data__": {"text": "instead.\nbuffer <Buffer> | <Uint8Array> An existing Buffer or Uint8Array from which to copy data.\nSee Buffer.from(buffer).\n\nnew Buffer(size)#\nHistory\nStability: 0 - Deprecated: Use Buffer.alloc() instead (also see Buffer.allocUnsafe()).\nsize <integer> The desired length of the new Buffer.\nSee Buffer.alloc() and Buffer.allocUnsafe(). This variant of the constructor is equivalent to Buffer.alloc().\n\nnew Buffer(string[, encoding])#\nHistory\nStability: 0 - Deprecated: Use Buffer.from(string[, encoding]) instead.\nstring <string> String to encode.\nencoding <string> The encoding of string. Default: 'utf8'.\nSee Buffer.from(string[, encoding]).\n\nClass: File#\nAdded in: v18.13.0\nStability: 1 - Experimental\nExtends: <Blob>\nA File provides information about files.\n\nnew buffer.File(sources, fileName[, options])#\nAdded in: v18.13.0\nsources <string[]> | <ArrayBuffer[]> | <TypedArray[]> | <DataView[]> | <Blob[]> | <File[]> An array of string, <ArrayBuffer>, <TypedArray>, <DataView>, <File>, or <Blob> objects, or any mix of such objects, that will be stored within the File.\nfileName <string> The name of the file.\noptions <Object>\nendings <string> One of either 'transparent' or 'native'. When set to 'native', line endings in string source parts will be converted to the platform native line-ending as specified by require('node:os').EOL.\ntype <string> The File content-type.\nlastModified <number> The last modified date of the file. Default: Date.now().\nfile.name#\nAdded in: v18.13.0\nType: <string>\nThe name of the File.\n\nfile.lastModified#\nAdded in: v18.13.0\nType: <number>\nThe last modified date of the File.\n\nnode:buffer module APIs#\nWhile, the Buffer object is available as a global, there are additional Buffer-related APIs that are available only via the node:buffer module accessed using require('node:buffer').\n\nbuffer.atob(data)#\nAdded in: v15.13.0, v14.17.0\nStability: 3 - Legacy. Use Buffer.from(data, 'base64') instead.\ndata <any> The Base64-encoded input string.\nDecodes a string of Base64-encoded data into bytes, and encodes those bytes into a string using Latin-1 (ISO-8859-1).\n\nThe data may be any JavaScript-value that can be coerced into a string.\n\nThis function is only provided for compatibility with legacy web platform APIs and should never be used in new code, because they use strings to represent binary data and predate the introduction of typed arrays in JavaScript. For code running using Node.js APIs, converting between base64-encoded strings and binary data should be performed using Buffer.from(str, 'base64') and buf.toString('base64').\n\nbuffer.btoa(data)#\nAdded in: v15.13.0, v14.17.0\nStability: 3 - Legacy. Use buf.toString('base64') instead.\ndata <any> An ASCII (Latin1) string.\nDecodes a string into bytes using Latin-1 (ISO-8859), and encodes those bytes into a string using Base64.\n\nThe data may be any JavaScript-value that can be coerced into a string.\n\nThis function is only provided for compatibility with legacy web platform APIs and should never be used in new code, because they use strings to represent binary data and predate the introduction of typed arrays in JavaScript. For code running using Node.js APIs, converting between base64-encoded strings and binary data should be performed using Buffer.from(str, 'base64') and buf.toString('base64').\n\nbuffer.isAscii(input)#\nAdded in: v18.15.0\ninput <Buffer> | <ArrayBuffer> | <TypedArray> The input to validate.\nReturns: <boolean>\nThis", "doc_id": "9766eb1e-4659-4940-a150-3ee5168fd61f", "embedding": null, "doc_hash": "ed352ae56b564877336c2ffd021b7ab4d37f2d62ad2feb8912b6e81bc62d4c87", "extra_info": null, "node_info": {"start": 258446, "end": 261880}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9025e6fb-6287-4ad6-856f-a1bdf0df5fd1", "3": "47067a13-1f46-4023-8255-f7701d2bc2ab"}}, "__type__": "1"}, "47067a13-1f46-4023-8255-f7701d2bc2ab": {"__data__": {"text": "string.\nDecodes a string into bytes using Latin-1 (ISO-8859), and encodes those bytes into a string using Base64.\n\nThe data may be any JavaScript-value that can be coerced into a string.\n\nThis function is only provided for compatibility with legacy web platform APIs and should never be used in new code, because they use strings to represent binary data and predate the introduction of typed arrays in JavaScript. For code running using Node.js APIs, converting between base64-encoded strings and binary data should be performed using Buffer.from(str, 'base64') and buf.toString('base64').\n\nbuffer.isAscii(input)#\nAdded in: v18.15.0\ninput <Buffer> | <ArrayBuffer> | <TypedArray> The input to validate.\nReturns: <boolean>\nThis function returns true if input contains only valid ASCII-encoded data, including the case in which input is empty.\n\nThrows if the input is a detached array buffer.\n\nbuffer.isUtf8(input)#\nAdded in: v18.14.0\ninput <Buffer> | <ArrayBuffer> | <TypedArray> The input to validate.\nReturns: <boolean>\nThis function returns true if input contains only valid UTF-8-encoded data, including the case in which input is empty.\n\nThrows if the input is a detached array buffer.\n\nbuffer.INSPECT_MAX_BYTES#\nAdded in: v0.5.4\n<integer> Default: 50\nReturns the maximum number of bytes that will be returned when buf.inspect() is called. This can be overridden by user modules. See util.inspect() for more details on buf.inspect() behavior.\n\nbuffer.kMaxLength#\nAdded in: v3.0.0\n<integer> The largest size allowed for a single Buffer instance.\nAn alias for buffer.constants.MAX_LENGTH.\n\nbuffer.kStringMaxLength#\nAdded in: v3.0.0\n<integer> The largest length allowed for a single string instance.\nAn alias for buffer.constants.MAX_STRING_LENGTH.\n\nbuffer.resolveObjectURL(id)#\nAdded in: v16.7.0\nStability: 1 - Experimental\nid <string> A 'blob:nodedata:... URL string returned by a prior call to URL.createObjectURL().\nReturns: <Blob>\nResolves a 'blob:nodedata:...' an associated <Blob> object registered using a prior call to URL.createObjectURL().\n\nbuffer.transcode(source, fromEnc, toEnc)#\nHistory\nsource <Buffer> | <Uint8Array> A Buffer or Uint8Array instance.\nfromEnc <string> The current encoding.\ntoEnc <string> To target encoding.\nReturns: <Buffer>\nRe-encodes the given Buffer or Uint8Array instance from one character encoding to another. Returns a new Buffer instance.\n\nThrows if the fromEnc or toEnc specify invalid character encodings or if conversion from fromEnc to toEnc is not permitted.\n\nEncodings supported by buffer.transcode() are: 'ascii', 'utf8', 'utf16le', 'ucs2', 'latin1', and 'binary'.\n\nThe transcoding process will use substitution characters if a given byte sequence cannot be adequately represented in the target encoding. For instance:\n\nimport { Buffer, transcode } from 'node:buffer';\n\nconst newBuf = transcode(Buffer.from('\u20ac'), 'utf8', 'ascii');\nconsole.log(newBuf.toString('ascii'));\n// Prints: '?'\nBecause the Euro (\u20ac) sign is not representable in US-ASCII, it is replaced with ? in the transcoded Buffer.\n\nClass: SlowBuffer#\nDeprecated since: v6.0.0\nStability: 0 - Deprecated: Use Buffer.allocUnsafeSlow() instead.\nSee Buffer.allocUnsafeSlow(). This was never a class in the sense that the constructor always returned a Buffer instance, rather than a SlowBuffer instance.\n\nnew SlowBuffer(size)#\nDeprecated since: v6.0.0\nStability: 0 - Deprecated: Use Buffer.allocUnsafeSlow() instead.\nsize", "doc_id": "47067a13-1f46-4023-8255-f7701d2bc2ab", "embedding": null, "doc_hash": "c4ea09a5d56a736ff1acac461047301ccd1ee794857d688fe12abdb5615377c9", "extra_info": null, "node_info": {"start": 261850, "end": 265276}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9766eb1e-4659-4940-a150-3ee5168fd61f", "3": "2a190e60-1186-49d2-b2fb-58e4771e9cc3"}}, "__type__": "1"}, "2a190e60-1186-49d2-b2fb-58e4771e9cc3": {"__data__": {"text": "} from 'node:buffer';\n\nconst newBuf = transcode(Buffer.from('\u20ac'), 'utf8', 'ascii');\nconsole.log(newBuf.toString('ascii'));\n// Prints: '?'\nBecause the Euro (\u20ac) sign is not representable in US-ASCII, it is replaced with ? in the transcoded Buffer.\n\nClass: SlowBuffer#\nDeprecated since: v6.0.0\nStability: 0 - Deprecated: Use Buffer.allocUnsafeSlow() instead.\nSee Buffer.allocUnsafeSlow(). This was never a class in the sense that the constructor always returned a Buffer instance, rather than a SlowBuffer instance.\n\nnew SlowBuffer(size)#\nDeprecated since: v6.0.0\nStability: 0 - Deprecated: Use Buffer.allocUnsafeSlow() instead.\nsize <integer> The desired length of the new SlowBuffer.\nSee Buffer.allocUnsafeSlow().\n\nBuffer constants#\nAdded in: v8.2.0\nbuffer.constants.MAX_LENGTH#\nHistory\n<integer> The largest size allowed for a single Buffer instance.\nOn 32-bit architectures, this value currently is 230 - 1 (about 1 GiB).\n\nOn 64-bit architectures, this value currently is 232 (about 4 GiB).\n\nIt reflects v8::TypedArray::kMaxLength under the hood.\n\nThis value is also available as buffer.kMaxLength.\n\nbuffer.constants.MAX_STRING_LENGTH#\nAdded in: v8.2.0\n<integer> The largest length allowed for a single string instance.\nRepresents the largest length that a string primitive can have, counted in UTF-16 code units.\n\nThis value may depend on the JS engine that is being used.\n\nBuffer.from(), Buffer.alloc(), and Buffer.allocUnsafe()#\nIn versions of Node.js prior to 6.0.0, Buffer instances were created using the Buffer constructor function, which allocates the returned Buffer differently based on what arguments are provided:\n\nPassing a number as the first argument to Buffer() (e.g. new Buffer(10)) allocates a new Buffer object of the specified size. Prior to Node.js 8.0.0, the memory allocated for such Buffer instances is not initialized and can contain sensitive data. Such Buffer instances must be subsequently initialized by using either buf.fill(0) or by writing to the entire Buffer before reading data from the Buffer. While this behavior is intentional to improve performance, development experience has demonstrated that a more explicit distinction is required between creating a fast-but-uninitialized Buffer versus creating a slower-but-safer Buffer. Since Node.js 8.0.0, Buffer(num) and new Buffer(num) return a Buffer with initialized memory.\nPassing a string, array, or Buffer as the first argument copies the passed object's data into the Buffer.\nPassing an ArrayBuffer or a SharedArrayBuffer returns a Buffer that shares allocated memory with the given array buffer.\nBecause the behavior of new Buffer() is different depending on the type of the first argument, security and reliability issues can be inadvertently introduced into applications when argument validation or Buffer initialization is not performed.\n\nFor example, if an attacker can cause an application to receive a number where a string is expected, the application may call new Buffer(100) instead of new Buffer(\"100\"), leading it to allocate a 100 byte buffer instead of allocating a 3 byte buffer with content \"100\". This is commonly possible using JSON API calls. Since JSON distinguishes between numeric and string types, it allows injection of numbers where a naively written application that does not validate its input sufficiently might expect to always receive a string. Before Node.js 8.0.0, the 100 byte buffer might contain arbitrary pre-existing in-memory data, so may be used to expose in-memory secrets to a remote attacker. Since Node.js 8.0.0, exposure of memory cannot occur because the data is zero-filled. However, other attacks are still possible, such as causing very large buffers to be allocated by the server, leading to performance degradation or crashing on memory exhaustion.\n\nTo make the creation of Buffer instances more reliable and less error-prone, the various forms of the new Buffer() constructor have been deprecated and replaced", "doc_id": "2a190e60-1186-49d2-b2fb-58e4771e9cc3", "embedding": null, "doc_hash": "53c423c0e5136c526c8c92463e333c799588e6dda719739720f584516e27964d", "extra_info": null, "node_info": {"start": 265343, "end": 269294}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "47067a13-1f46-4023-8255-f7701d2bc2ab", "3": "bc901dff-45f6-4ad8-a866-e34928958103"}}, "__type__": "1"}, "bc901dff-45f6-4ad8-a866-e34928958103": {"__data__": {"text": "using JSON API calls. Since JSON distinguishes between numeric and string types, it allows injection of numbers where a naively written application that does not validate its input sufficiently might expect to always receive a string. Before Node.js 8.0.0, the 100 byte buffer might contain arbitrary pre-existing in-memory data, so may be used to expose in-memory secrets to a remote attacker. Since Node.js 8.0.0, exposure of memory cannot occur because the data is zero-filled. However, other attacks are still possible, such as causing very large buffers to be allocated by the server, leading to performance degradation or crashing on memory exhaustion.\n\nTo make the creation of Buffer instances more reliable and less error-prone, the various forms of the new Buffer() constructor have been deprecated and replaced by separate Buffer.from(), Buffer.alloc(), and Buffer.allocUnsafe() methods.\n\nDevelopers should migrate all existing uses of the new Buffer() constructors to one of these new APIs.\n\nBuffer.from(array) returns a new Buffer that contains a copy of the provided octets.\nBuffer.from(arrayBuffer[, byteOffset[, length]]) returns a new Buffer that shares the same allocated memory as the given ArrayBuffer.\nBuffer.from(buffer) returns a new Buffer that contains a copy of the contents of the given Buffer.\nBuffer.from(string[, encoding]) returns a new Buffer that contains a copy of the provided string.\nBuffer.alloc(size[, fill[, encoding]]) returns a new initialized Buffer of the specified size. This method is slower than Buffer.allocUnsafe(size) but guarantees that newly created Buffer instances never contain old data that is potentially sensitive. A TypeError will be thrown if size is not a number.\nBuffer.allocUnsafe(size) and Buffer.allocUnsafeSlow(size) each return a new uninitialized Buffer of the specified size. Because the Buffer is uninitialized, the allocated segment of memory might contain old data that is potentially sensitive.\nBuffer instances returned by Buffer.allocUnsafe() and Buffer.from(array) may be allocated off a shared internal memory pool if size is less than or equal to half Buffer.poolSize. Instances returned by Buffer.allocUnsafeSlow() never use the shared internal memory pool.\n\nThe --zero-fill-buffers command-line option#\nAdded in: v5.10.0\nNode.js can be started using the --zero-fill-buffers command-line option to cause all newly-allocated Buffer instances to be zero-filled upon creation by default. Without the option, buffers created with Buffer.allocUnsafe(), Buffer.allocUnsafeSlow(), and new SlowBuffer(size) are not zero-filled. Use of this flag can have a measurable negative impact on performance. Use the --zero-fill-buffers option only when necessary to enforce that newly allocated Buffer instances cannot contain old data that is potentially sensitive.\n\n$ node --zero-fill-buffers\n> Buffer.allocUnsafe(5);\n<Buffer 00 00 00 00 00>\nWhat makes Buffer.allocUnsafe() and Buffer.allocUnsafeSlow() \"unsafe\"?#\nWhen calling Buffer.allocUnsafe() and Buffer.allocUnsafeSlow(), the segment of allocated memory is uninitialized (it is not zeroed-out). While this design makes the allocation of memory quite fast, the allocated segment of memory might contain old data that is potentially sensitive. Using a Buffer created by Buffer.allocUnsafe() without completely overwriting the memory can allow this old data to be leaked when the Buffer memory is read.\n\nWhile there are clear performance advantages to using Buffer.allocUnsafe(), extra care must be taken in order to avoid introducing security vulnerabilities into an application.\n\nC++ addons#\nAddons are dynamically-linked shared objects written in C++. The require() function can load addons as ordinary Node.js modules. Addons provide an interface between JavaScript and C/C++ libraries.\n\nThere are three options for implementing addons: Node-API, nan, or direct use of internal V8, libuv, and Node.js libraries. Unless there is a need for direct access to functionality which is not exposed by Node-API, use Node-API. Refer to C/C++ addons with Node-API for more information on", "doc_id": "bc901dff-45f6-4ad8-a866-e34928958103", "embedding": null, "doc_hash": "c93777b8251e957382fe66b02e8f2419d2f29f1da32c1f9bb3c684b315d36140", "extra_info": null, "node_info": {"start": 269162, "end": 273258}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2a190e60-1186-49d2-b2fb-58e4771e9cc3", "3": "495a0bce-2501-41a7-819f-11a97b809512"}}, "__type__": "1"}, "495a0bce-2501-41a7-819f-11a97b809512": {"__data__": {"text": "Using a Buffer created by Buffer.allocUnsafe() without completely overwriting the memory can allow this old data to be leaked when the Buffer memory is read.\n\nWhile there are clear performance advantages to using Buffer.allocUnsafe(), extra care must be taken in order to avoid introducing security vulnerabilities into an application.\n\nC++ addons#\nAddons are dynamically-linked shared objects written in C++. The require() function can load addons as ordinary Node.js modules. Addons provide an interface between JavaScript and C/C++ libraries.\n\nThere are three options for implementing addons: Node-API, nan, or direct use of internal V8, libuv, and Node.js libraries. Unless there is a need for direct access to functionality which is not exposed by Node-API, use Node-API. Refer to C/C++ addons with Node-API for more information on Node-API.\n\nWhen not using Node-API, implementing addons is complicated, involving knowledge of several components and APIs:\n\nV8: the C++ library Node.js uses to provide the JavaScript implementation. V8 provides the mechanisms for creating objects, calling functions, etc. V8's API is documented mostly in the v8.h header file (deps/v8/include/v8.h in the Node.js source tree), which is also available online.\n\nlibuv: The C library that implements the Node.js event loop, its worker threads and all of the asynchronous behaviors of the platform. It also serves as a cross-platform abstraction library, giving easy, POSIX-like access across all major operating systems to many common system tasks, such as interacting with the file system, sockets, timers, and system events. libuv also provides a threading abstraction similar to POSIX threads for more sophisticated asynchronous addons that need to move beyond the standard event loop. Addon authors should avoid blocking the event loop with I/O or other time-intensive tasks by offloading work via libuv to non-blocking system operations, worker threads, or a custom use of libuv threads.\n\nInternal Node.js libraries. Node.js itself exports C++ APIs that addons can use, the most important of which is the node::ObjectWrap class.\n\nNode.js includes other statically linked libraries including OpenSSL. These other libraries are located in the deps/ directory in the Node.js source tree. Only the libuv, OpenSSL, V8, and zlib symbols are purposefully re-exported by Node.js and may be used to various extents by addons. See Linking to libraries included with Node.js for additional information.\n\nAll of the following examples are available for download and may be used as the starting-point for an addon.\n\nHello world#\nThis \"Hello world\" example is a simple addon, written in C++, that is the equivalent of the following JavaScript code:\n\nmodule.exports.hello = () => 'world';\nFirst, create the file hello.cc:\n\n// hello.cc\n#include <node.h>\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid Method(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  args.GetReturnValue().Set(String::NewFromUtf8(\n      isolate, \"world\").ToLocalChecked());\n}\n\nvoid Initialize(Local<Object> exports) {\n  NODE_SET_METHOD(exports, \"hello\", Method);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Initialize)\n\n}  // namespace demo\nAll Node.js addons must export an initialization function following the pattern:\n\nvoid Initialize(Local<Object> exports);\nNODE_MODULE(NODE_GYP_MODULE_NAME, Initialize)\nThere is no semi-colon after NODE_MODULE as it's not a function (see node.h).\n\nThe module_name must match the filename of the final binary (excluding the .node suffix).\n\nIn the hello.cc example, then, the", "doc_id": "495a0bce-2501-41a7-819f-11a97b809512", "embedding": null, "doc_hash": "af28d93e40aa52c3781f9347795ade7733ac7802a50c4229a275a26080daca0f", "extra_info": null, "node_info": {"start": 273239, "end": 276927}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "bc901dff-45f6-4ad8-a866-e34928958103", "3": "ce89fc1e-5d5c-4b95-81b4-be91921436b0"}}, "__type__": "1"}, "ce89fc1e-5d5c-4b95-81b4-be91921436b0": {"__data__": {"text": "     isolate, \"world\").ToLocalChecked());\n}\n\nvoid Initialize(Local<Object> exports) {\n  NODE_SET_METHOD(exports, \"hello\", Method);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Initialize)\n\n}  // namespace demo\nAll Node.js addons must export an initialization function following the pattern:\n\nvoid Initialize(Local<Object> exports);\nNODE_MODULE(NODE_GYP_MODULE_NAME, Initialize)\nThere is no semi-colon after NODE_MODULE as it's not a function (see node.h).\n\nThe module_name must match the filename of the final binary (excluding the .node suffix).\n\nIn the hello.cc example, then, the initialization function is Initialize and the addon module name is addon.\n\nWhen building addons with node-gyp, using the macro NODE_GYP_MODULE_NAME as the first parameter of NODE_MODULE() will ensure that the name of the final binary will be passed to NODE_MODULE().\n\nAddons defined with NODE_MODULE() can not be loaded in multiple contexts or multiple threads at the same time.\n\nContext-aware addons#\nThere are environments in which Node.js addons may need to be loaded multiple times in multiple contexts. For example, the Electron runtime runs multiple instances of Node.js in a single process. Each instance will have its own require() cache, and thus each instance will need a native addon to behave correctly when loaded via require(). This means that the addon must support multiple initializations.\n\nA context-aware addon can be constructed by using the macro NODE_MODULE_INITIALIZER, which expands to the name of a function which Node.js will expect to find when it loads an addon. An addon can thus be initialized as in the following example:\n\nusing namespace v8;\n\nextern \"C\" NODE_MODULE_EXPORT void\nNODE_MODULE_INITIALIZER(Local<Object> exports,\n                        Local<Value> module,\n                        Local<Context> context) {\n  /* Perform addon initialization steps here. */\n}\nAnother option is to use the macro NODE_MODULE_INIT(), which will also construct a context-aware addon. Unlike NODE_MODULE(), which is used to construct an addon around a given addon initializer function, NODE_MODULE_INIT() serves as the declaration of such an initializer to be followed by a function body.\n\nThe following three variables may be used inside the function body following an invocation of NODE_MODULE_INIT():\n\nLocal<Object> exports,\nLocal<Value> module, and\nLocal<Context> context\nThe choice to build a context-aware addon carries with it the responsibility of carefully managing global static data. Since the addon may be loaded multiple times, potentially even from different threads, any global static data stored in the addon must be properly protected, and must not contain any persistent references to JavaScript objects. The reason for this is that JavaScript objects are only valid in one context, and will likely cause a crash when accessed from the wrong context or from a different thread than the one on which they were created.\n\nThe context-aware addon can be structured to avoid global static data by performing the following steps:\n\nDefine a class which will hold per-addon-instance data and which has a static member of the form\nstatic void DeleteInstance(void* data) {\n  // Cast `data` to an instance of the class and delete it.\n}\nHeap-allocate an instance of this class in the addon initializer. This can be accomplished using the new keyword.\nCall node::AddEnvironmentCleanupHook(), passing it the above-created instance and a pointer to DeleteInstance(). This will ensure the instance is deleted when the environment is torn down.\nStore the instance of the class in a v8::External, and\nPass the v8::External to all methods exposed to JavaScript by passing it to v8::FunctionTemplate::New() or v8::Function::New() which creates the", "doc_id": "ce89fc1e-5d5c-4b95-81b4-be91921436b0", "embedding": null, "doc_hash": "df62ff8586a6f171b286319008d74fa31273d9156a0a90db27746d1239c692eb", "extra_info": null, "node_info": {"start": 277131, "end": 280873}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "495a0bce-2501-41a7-819f-11a97b809512", "3": "3c7165bf-c944-4036-8278-6dd63aa9f7c4"}}, "__type__": "1"}, "3c7165bf-c944-4036-8278-6dd63aa9f7c4": {"__data__": {"text": "addon can be structured to avoid global static data by performing the following steps:\n\nDefine a class which will hold per-addon-instance data and which has a static member of the form\nstatic void DeleteInstance(void* data) {\n  // Cast `data` to an instance of the class and delete it.\n}\nHeap-allocate an instance of this class in the addon initializer. This can be accomplished using the new keyword.\nCall node::AddEnvironmentCleanupHook(), passing it the above-created instance and a pointer to DeleteInstance(). This will ensure the instance is deleted when the environment is torn down.\nStore the instance of the class in a v8::External, and\nPass the v8::External to all methods exposed to JavaScript by passing it to v8::FunctionTemplate::New() or v8::Function::New() which creates the native-backed JavaScript functions. The third parameter of v8::FunctionTemplate::New() or v8::Function::New() accepts the v8::External and makes it available in the native callback using the v8::FunctionCallbackInfo::Data() method.\nThis will ensure that the per-addon-instance data reaches each binding that can be called from JavaScript. The per-addon-instance data must also be passed into any asynchronous callbacks the addon may create.\n\nThe following example illustrates the implementation of a context-aware addon:\n\n#include <node.h>\n\nusing namespace v8;\n\nclass AddonData {\n public:\n  explicit AddonData(Isolate* isolate):\n      call_count(0) {\n    // Ensure this per-addon-instance data is deleted at environment cleanup.\n    node::AddEnvironmentCleanupHook(isolate, DeleteInstance, this);\n  }\n\n  // Per-addon data.\n  int call_count;\n\n  static void DeleteInstance(void* data) {\n    delete static_cast<AddonData*>(data);\n  }\n};\n\nstatic void Method(const v8::FunctionCallbackInfo<v8::Value>& info) {\n  // Retrieve the per-addon-instance data.\n  AddonData* data =\n      reinterpret_cast<AddonData*>(info.Data().As<External>()->Value());\n  data->call_count++;\n  info.GetReturnValue().Set((double)data->call_count);\n}\n\n// Initialize this addon to be context-aware.\nNODE_MODULE_INIT(/* exports, module, context */) {\n  Isolate* isolate = context->GetIsolate();\n\n  // Create a new instance of `AddonData` for this instance of the addon and\n  // tie its life cycle to that of the Node.js environment.\n  AddonData* data = new AddonData(isolate);\n\n  // Wrap the data in a `v8::External` so we can pass it to the method we\n  // expose.\n  Local<External> external = External::New(isolate, data);\n\n  // Expose the method `Method` to JavaScript, and make sure it receives the\n  // per-addon-instance data we created above by passing `external` as the\n  // third parameter to the `FunctionTemplate` constructor.\n  exports->Set(context,\n               String::NewFromUtf8(isolate, \"method\").ToLocalChecked(),\n               FunctionTemplate::New(isolate, Method, external)\n                  ->GetFunction(context).ToLocalChecked()).FromJust();\n}\nWorker support#\nHistory\nIn order to be loaded from multiple Node.js environments, such as a main thread and a Worker thread, an add-on needs to either:\n\nBe an Node-API addon, or\nBe declared as context-aware using NODE_MODULE_INIT() as described above\nIn order to support Worker threads, addons need to clean up any resources they may have allocated when such a thread exists. This can be achieved through the usage of the AddEnvironmentCleanupHook() function:\n\nvoid AddEnvironmentCleanupHook(v8::Isolate* isolate,\n       ", "doc_id": "3c7165bf-c944-4036-8278-6dd63aa9f7c4", "embedding": null, "doc_hash": "be688758530bab4f9aeac41df80fc1b59e0d373b3b34fa7a49bf8b1a893e07fe", "extra_info": null, "node_info": {"start": 280711, "end": 284160}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ce89fc1e-5d5c-4b95-81b4-be91921436b0", "3": "40e9254f-42a4-4670-ace5-9f80e45c0286"}}, "__type__": "1"}, "40e9254f-42a4-4670-ace5-9f80e45c0286": {"__data__": {"text": "       FunctionTemplate::New(isolate, Method, external)\n                  ->GetFunction(context).ToLocalChecked()).FromJust();\n}\nWorker support#\nHistory\nIn order to be loaded from multiple Node.js environments, such as a main thread and a Worker thread, an add-on needs to either:\n\nBe an Node-API addon, or\nBe declared as context-aware using NODE_MODULE_INIT() as described above\nIn order to support Worker threads, addons need to clean up any resources they may have allocated when such a thread exists. This can be achieved through the usage of the AddEnvironmentCleanupHook() function:\n\nvoid AddEnvironmentCleanupHook(v8::Isolate* isolate,\n                               void (*fun)(void* arg),\n                               void* arg);\nThis function adds a hook that will run before a given Node.js instance shuts down. If necessary, such hooks can be removed before they are run using RemoveEnvironmentCleanupHook(), which has the same signature. Callbacks are run in last-in first-out order.\n\nIf necessary, there is an additional pair of AddEnvironmentCleanupHook() and RemoveEnvironmentCleanupHook() overloads, where the cleanup hook takes a callback function. This can be used for shutting down asynchronous resources, such as any libuv handles registered by the addon.\n\nThe following addon.cc uses AddEnvironmentCleanupHook:\n\n// addon.cc\n#include <node.h>\n#include <assert.h>\n#include <stdlib.h>\n\nusing node::AddEnvironmentCleanupHook;\nusing v8::HandleScope;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\n\n// Note: In a real-world application, do not rely on static/global data.\nstatic char cookie[] = \"yum yum\";\nstatic int cleanup_cb1_called = 0;\nstatic int cleanup_cb2_called = 0;\n\nstatic void cleanup_cb1(void* arg) {\n  Isolate* isolate = static_cast<Isolate*>(arg);\n  HandleScope scope(isolate);\n  Local<Object> obj = Object::New(isolate);\n  assert(!obj.IsEmpty());  // assert VM is still alive\n  assert(obj->IsObject());\n  cleanup_cb1_called++;\n}\n\nstatic void cleanup_cb2(void* arg) {\n  assert(arg == static_cast<void*>(cookie));\n  cleanup_cb2_called++;\n}\n\nstatic void sanity_check(void*) {\n  assert(cleanup_cb1_called == 1);\n  assert(cleanup_cb2_called == 1);\n}\n\n// Initialize this addon to be context-aware.\nNODE_MODULE_INIT(/* exports, module, context */) {\n  Isolate* isolate = context->GetIsolate();\n\n  AddEnvironmentCleanupHook(isolate, sanity_check, nullptr);\n  AddEnvironmentCleanupHook(isolate, cleanup_cb2, cookie);\n  AddEnvironmentCleanupHook(isolate, cleanup_cb1, isolate);\n}\nTest in JavaScript by running:\n\n// test.js\nrequire('./build/Release/addon');\nBuilding#\nOnce the source code has been written, it must be compiled into the binary addon.node file. To do so, create a file called binding.gyp in the top-level of the project describing the build configuration of the module using a JSON-like format. This file is used by node-gyp, a tool written specifically to compile Node.js addons.\n\n{\n  \"targets\": [\n    {\n      \"target_name\": \"addon\",\n      \"sources\": [ \"hello.cc\" ]\n    }\n  ]\n}\nA version of the node-gyp utility is bundled and distributed with Node.js as part of", "doc_id": "40e9254f-42a4-4670-ace5-9f80e45c0286", "embedding": null, "doc_hash": "48dbb721a9d08dd7cdcaf33322c081ad24e81ff30e0aea443ff0315396944784", "extra_info": null, "node_info": {"start": 284290, "end": 287398}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3c7165bf-c944-4036-8278-6dd63aa9f7c4", "3": "f900ef23-539e-4ba8-83ec-4441159ae6f9"}}, "__type__": "1"}, "f900ef23-539e-4ba8-83ec-4441159ae6f9": {"__data__": {"text": "isolate);\n}\nTest in JavaScript by running:\n\n// test.js\nrequire('./build/Release/addon');\nBuilding#\nOnce the source code has been written, it must be compiled into the binary addon.node file. To do so, create a file called binding.gyp in the top-level of the project describing the build configuration of the module using a JSON-like format. This file is used by node-gyp, a tool written specifically to compile Node.js addons.\n\n{\n  \"targets\": [\n    {\n      \"target_name\": \"addon\",\n      \"sources\": [ \"hello.cc\" ]\n    }\n  ]\n}\nA version of the node-gyp utility is bundled and distributed with Node.js as part of npm. This version is not made directly available for developers to use and is intended only to support the ability to use the npm install command to compile and install addons. Developers who wish to use node-gyp directly can install it using the command npm install -g node-gyp. See the node-gyp installation instructions for more information, including platform-specific requirements.\n\nOnce the binding.gyp file has been created, use node-gyp configure to generate the appropriate project build files for the current platform. This will generate either a Makefile (on Unix platforms) or a vcxproj file (on Windows) in the build/ directory.\n\nNext, invoke the node-gyp build command to generate the compiled addon.node file. This will be put into the build/Release/ directory.\n\nWhen using npm install to install a Node.js addon, npm uses its own bundled version of node-gyp to perform this same set of actions, generating a compiled version of the addon for the user's platform on demand.\n\nOnce built, the binary addon can be used from within Node.js by pointing require() to the built addon.node module:\n\n// hello.js\nconst addon = require('./build/Release/addon');\n\nconsole.log(addon.hello());\n// Prints: 'world'\nBecause the exact path to the compiled addon binary can vary depending on how it is compiled (i.e. sometimes it may be in ./build/Debug/), addons can use the bindings package to load the compiled module.\n\nWhile the bindings package implementation is more sophisticated in how it locates addon modules, it is essentially using a try\u2026catch pattern similar to:\n\ntry {\n  return require('./build/Release/addon.node');\n} catch (err) {\n  return require('./build/Debug/addon.node');\n}\nLinking to libraries included with Node.js#\nNode.js uses statically linked libraries such as V8, libuv, and OpenSSL. All addons are required to link to V8 and may link to any of the other dependencies as well. Typically, this is as simple as including the appropriate #include <...> statements (e.g. #include <v8.h>) and node-gyp will locate the appropriate headers automatically. However, there are a few caveats to be aware of:\n\nWhen node-gyp runs, it will detect the specific release version of Node.js and download either the full source tarball or just the headers. If the full source is downloaded, addons will have complete access to the full set of Node.js dependencies. However, if only the Node.js headers are downloaded, then only the symbols exported by Node.js will be available.\n\nnode-gyp can be run using the --nodedir flag pointing at a local Node.js source image. Using this option, the addon will have access to the full set of dependencies.\n\nLoading addons using require()#\nThe filename extension of the compiled addon binary is .node (as opposed to .dll or .so). The require() function is written to look for files with the .node file extension and initialize those as dynamically-linked libraries.\n\nWhen calling require(), the .node extension can usually be omitted and Node.js will still find and initialize the addon. One caveat, however, is that Node.js will first attempt to locate and load modules or JavaScript files that happen to share the same base name. For instance, if there is a file", "doc_id": "f900ef23-539e-4ba8-83ec-4441159ae6f9", "embedding": null, "doc_hash": "1df1cca66073d131c28c47dc699fe1a7e216734c0fec0f72a981f66a322d437c", "extra_info": null, "node_info": {"start": 287439, "end": 291257}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "40e9254f-42a4-4670-ace5-9f80e45c0286", "3": "d317c812-1c6f-4d33-8452-db03574cc045"}}, "__type__": "1"}, "d317c812-1c6f-4d33-8452-db03574cc045": {"__data__": {"text": "then only the symbols exported by Node.js will be available.\n\nnode-gyp can be run using the --nodedir flag pointing at a local Node.js source image. Using this option, the addon will have access to the full set of dependencies.\n\nLoading addons using require()#\nThe filename extension of the compiled addon binary is .node (as opposed to .dll or .so). The require() function is written to look for files with the .node file extension and initialize those as dynamically-linked libraries.\n\nWhen calling require(), the .node extension can usually be omitted and Node.js will still find and initialize the addon. One caveat, however, is that Node.js will first attempt to locate and load modules or JavaScript files that happen to share the same base name. For instance, if there is a file addon.js in the same directory as the binary addon.node, then require('addon') will give precedence to the addon.js file and load it instead.\n\nNative abstractions for Node.js#\nEach of the examples illustrated in this document directly use the Node.js and V8 APIs for implementing addons. The V8 API can, and has, changed dramatically from one V8 release to the next (and one major Node.js release to the next). With each change, addons may need to be updated and recompiled in order to continue functioning. The Node.js release schedule is designed to minimize the frequency and impact of such changes but there is little that Node.js can do to ensure stability of the V8 APIs.\n\nThe Native Abstractions for Node.js (or nan) provide a set of tools that addon developers are recommended to use to keep compatibility between past and future releases of V8 and Node.js. See the nan examples for an illustration of how it can be used.\n\nNode-API#\nStability: 2 - Stable\nNode-API is an API for building native addons. It is independent from the underlying JavaScript runtime (e.g. V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate addons from changes in the underlying JavaScript engine and allow modules compiled for one version to run on later versions of Node.js without recompilation. Addons are built/packaged with the same approach/tools outlined in this document (node-gyp, etc.). The only difference is the set of APIs that are used by the native code. Instead of using the V8 or Native Abstractions for Node.js APIs, the functions available in the Node-API are used.\n\nCreating and maintaining an addon that benefits from the ABI stability provided by Node-API carries with it certain implementation considerations.\n\nTo use Node-API in the above \"Hello world\" example, replace the content of hello.cc with the following. All other instructions remain the same.\n\n// hello.cc using Node-API\n#include <node_api.h>\n\nnamespace demo {\n\nnapi_value Method(napi_env env, napi_callback_info args) {\n  napi_value greeting;\n  napi_status status;\n\n  status = napi_create_string_utf8(env, \"world\", NAPI_AUTO_LENGTH, &greeting);\n  if (status != napi_ok) return nullptr;\n  return greeting;\n}\n\nnapi_value init(napi_env env, napi_value exports) {\n  napi_status status;\n  napi_value fn;\n\n  status = napi_create_function(env, nullptr, 0, Method, nullptr, &fn);\n  if (status != napi_ok) return nullptr;\n\n  status = napi_set_named_property(env, exports, \"hello\", fn);\n  if (status != napi_ok) return nullptr;\n  return exports;\n}\n\nNAPI_MODULE(NODE_GYP_MODULE_NAME, init)\n\n}  // namespace demo\nThe functions available and how to use them are documented in C/C++ addons with Node-API.\n\nAddon examples#\nFollowing are some example addons intended to help developers get started. The", "doc_id": "d317c812-1c6f-4d33-8452-db03574cc045", "embedding": null, "doc_hash": "e2f870e1468287c7f21aa10c27b6e7909ad088505a2f04374fb10be56cde64dd", "extra_info": null, "node_info": {"start": 291105, "end": 294759}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f900ef23-539e-4ba8-83ec-4441159ae6f9", "3": "8fc07d0e-c4f2-4ef2-9e35-247d7c7ea01f"}}, "__type__": "1"}, "8fc07d0e-c4f2-4ef2-9e35-247d7c7ea01f": {"__data__": {"text": "init(napi_env env, napi_value exports) {\n  napi_status status;\n  napi_value fn;\n\n  status = napi_create_function(env, nullptr, 0, Method, nullptr, &fn);\n  if (status != napi_ok) return nullptr;\n\n  status = napi_set_named_property(env, exports, \"hello\", fn);\n  if (status != napi_ok) return nullptr;\n  return exports;\n}\n\nNAPI_MODULE(NODE_GYP_MODULE_NAME, init)\n\n}  // namespace demo\nThe functions available and how to use them are documented in C/C++ addons with Node-API.\n\nAddon examples#\nFollowing are some example addons intended to help developers get started. The examples use the V8 APIs. Refer to the online V8 reference for help with the various V8 calls, and V8's Embedder's Guide for an explanation of several concepts used such as handles, scopes, function templates, etc.\n\nEach of these examples using the following binding.gyp file:\n\n{\n  \"targets\": [\n    {\n      \"target_name\": \"addon\",\n      \"sources\": [ \"addon.cc\" ]\n    }\n  ]\n}\nIn cases where there is more than one .cc file, simply add the additional filename to the sources array:\n\n\"sources\": [\"addon.cc\", \"myexample.cc\"]\nOnce the binding.gyp file is ready, the example addons can be configured and built using node-gyp:\n\n$ node-gyp configure build\nFunction arguments#\nAddons will typically expose objects and functions that can be accessed from JavaScript running within Node.js. When functions are invoked from JavaScript, the input arguments and return value must be mapped to and from the C/C++ code.\n\nThe following example illustrates how to read function arguments passed from JavaScript and how to return a result:\n\n// addon.cc\n#include <node.h>\n\nnamespace demo {\n\nusing v8::Exception;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\n// This is the implementation of the \"add\" method\n// Input arguments are passed using the\n// const FunctionCallbackInfo<Value>& args struct\nvoid Add(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n\n  // Check the number of arguments passed.\n  if (args.Length() < 2) {\n    // Throw an Error that is passed back to JavaScript\n    isolate->ThrowException(Exception::TypeError(\n        String::NewFromUtf8(isolate,\n                            \"Wrong number of arguments\").ToLocalChecked()));\n    return;\n  }\n\n  // Check the argument types\n  if (!args[0]->IsNumber() || !args[1]->IsNumber()) {\n    isolate->ThrowException(Exception::TypeError(\n        String::NewFromUtf8(isolate,\n                            \"Wrong arguments\").ToLocalChecked()));\n    return;\n  }\n\n  // Perform the operation\n  double value =\n      args[0].As<Number>()->Value() + args[1].As<Number>()->Value();\n  Local<Number> num = Number::New(isolate, value);\n\n  // Set the return value (using the passed in\n  // FunctionCallbackInfo<Value>&)\n  args.GetReturnValue().Set(num);\n}\n\nvoid Init(Local<Object> exports) {\n  NODE_SET_METHOD(exports, \"add\",", "doc_id": "8fc07d0e-c4f2-4ef2-9e35-247d7c7ea01f", "embedding": null, "doc_hash": "569ac23061b5495cb90f7a201a71732136f6da105088860844f5956e0e936603", "extra_info": null, "node_info": {"start": 294927, "end": 297874}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d317c812-1c6f-4d33-8452-db03574cc045", "3": "3bd24ee9-a33a-4c8c-8ee5-4873aad1cd35"}}, "__type__": "1"}, "3bd24ee9-a33a-4c8c-8ee5-4873aad1cd35": {"__data__": {"text": "       String::NewFromUtf8(isolate,\n                            \"Wrong arguments\").ToLocalChecked()));\n    return;\n  }\n\n  // Perform the operation\n  double value =\n      args[0].As<Number>()->Value() + args[1].As<Number>()->Value();\n  Local<Number> num = Number::New(isolate, value);\n\n  // Set the return value (using the passed in\n  // FunctionCallbackInfo<Value>&)\n  args.GetReturnValue().Set(num);\n}\n\nvoid Init(Local<Object> exports) {\n  NODE_SET_METHOD(exports, \"add\", Add);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Init)\n\n}  // namespace demo\nOnce compiled, the example addon can be required and used from within Node.js:\n\n// test.js\nconst addon = require('./build/Release/addon');\n\nconsole.log('This should be eight:', addon.add(3, 5));\nCallbacks#\nIt is common practice within addons to pass JavaScript functions to a C++ function and execute them from there. The following example illustrates how to invoke such callbacks:\n\n// addon.cc\n#include <node.h>\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Null;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid RunCallback(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  Local<Context> context = isolate->GetCurrentContext();\n  Local<Function> cb = Local<Function>::Cast(args[0]);\n  const unsigned argc = 1;\n  Local<Value> argv[argc] = {\n      String::NewFromUtf8(isolate,\n                          \"hello world\").ToLocalChecked() };\n  cb->Call(context, Null(isolate), argc, argv).ToLocalChecked();\n}\n\nvoid Init(Local<Object> exports, Local<Object> module) {\n  NODE_SET_METHOD(module, \"exports\", RunCallback);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Init)\n\n}  // namespace demo\nThis example uses a two-argument form of Init() that receives the full module object as the second argument. This allows the addon to completely overwrite exports with a single function instead of adding the function as a property of exports.\n\nTo test it, run the following JavaScript:\n\n// test.js\nconst addon = require('./build/Release/addon');\n\naddon((msg) => {\n  console.log(msg);\n// Prints: 'hello world'\n});\nIn this example, the callback function is invoked synchronously.\n\nObject factory#\nAddons can create and return new objects from within a C++ function as illustrated in the following example. An object is created and returned with a property msg that echoes the string passed to createObject():\n\n// addon.cc\n#include <node.h>\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  Local<Context> context = isolate->GetCurrentContext();\n\n  Local<Object> obj = Object::New(isolate);\n  obj->Set(context,\n           String::NewFromUtf8(isolate,\n                           ", "doc_id": "3bd24ee9-a33a-4c8c-8ee5-4873aad1cd35", "embedding": null, "doc_hash": "a9dcc995415ee231671f72ee7860fb8d31aa66143c6bc17e7cd3f2a283afc138", "extra_info": null, "node_info": {"start": 297982, "end": 300929}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8fc07d0e-c4f2-4ef2-9e35-247d7c7ea01f", "3": "934d44a4-5289-460d-b4c3-1a06bee7fd78"}}, "__type__": "1"}, "934d44a4-5289-460d-b4c3-1a06bee7fd78": {"__data__": {"text": "string passed to createObject():\n\n// addon.cc\n#include <node.h>\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  Local<Context> context = isolate->GetCurrentContext();\n\n  Local<Object> obj = Object::New(isolate);\n  obj->Set(context,\n           String::NewFromUtf8(isolate,\n                               \"msg\").ToLocalChecked(),\n                               args[0]->ToString(context).ToLocalChecked())\n           .FromJust();\n\n  args.GetReturnValue().Set(obj);\n}\n\nvoid Init(Local<Object> exports, Local<Object> module) {\n  NODE_SET_METHOD(module, \"exports\", CreateObject);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Init)\n\n}  // namespace demo\nTo test it in JavaScript:\n\n// test.js\nconst addon = require('./build/Release/addon');\n\nconst obj1 = addon('hello');\nconst obj2 = addon('world');\nconsole.log(obj1.msg, obj2.msg);\n// Prints: 'hello world'\nFunction factory#\nAnother common scenario is creating JavaScript functions that wrap C++ functions and returning those back to JavaScript:\n\n// addon.cc\n#include <node.h>\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid MyFunction(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  args.GetReturnValue().Set(String::NewFromUtf8(\n      isolate, \"hello world\").ToLocalChecked());\n}\n\nvoid CreateFunction(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n\n  Local<Context> context = isolate->GetCurrentContext();\n  Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, MyFunction);\n  Local<Function> fn = tpl->GetFunction(context).ToLocalChecked();\n\n  // omit this to make it anonymous\n  fn->SetName(String::NewFromUtf8(\n      isolate, \"theFunction\").ToLocalChecked());\n\n  args.GetReturnValue().Set(fn);\n}\n\nvoid Init(Local<Object> exports, Local<Object> module) {\n  NODE_SET_METHOD(module, \"exports\", CreateFunction);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Init)\n\n}  // namespace demo\nTo test:\n\n// test.js\nconst addon = require('./build/Release/addon');\n\nconst fn = addon();\nconsole.log(fn());\n// Prints: 'hello world'\nWrapping C++ objects#\nIt is also possible to wrap C++ objects/classes in a way that allows new instances to be created using the JavaScript new operator:\n\n// addon.cc\n#include <node.h>\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing v8::Local;\nusing v8::Object;\n\nvoid InitAll(Local<Object> exports) {\n  MyObject::Init(exports);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, InitAll)\n\n}  // namespace demo\nThen, in", "doc_id": "934d44a4-5289-460d-b4c3-1a06bee7fd78", "embedding": null, "doc_hash": "a8e153c960a396fdb13956592c955466ebcb5da1b58cad6e9a0945044519acb6", "extra_info": null, "node_info": {"start": 300875, "end": 303686}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3bd24ee9-a33a-4c8c-8ee5-4873aad1cd35", "3": "b3d170dd-7b74-43fd-bc4a-7d2d8ca1a6a3"}}, "__type__": "1"}, "b3d170dd-7b74-43fd-bc4a-7d2d8ca1a6a3": {"__data__": {"text": " // namespace demo\nTo test:\n\n// test.js\nconst addon = require('./build/Release/addon');\n\nconst fn = addon();\nconsole.log(fn());\n// Prints: 'hello world'\nWrapping C++ objects#\nIt is also possible to wrap C++ objects/classes in a way that allows new instances to be created using the JavaScript new operator:\n\n// addon.cc\n#include <node.h>\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing v8::Local;\nusing v8::Object;\n\nvoid InitAll(Local<Object> exports) {\n  MyObject::Init(exports);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, InitAll)\n\n}  // namespace demo\nThen, in myobject.h, the wrapper class inherits from node::ObjectWrap:\n\n// myobject.h\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include <node.h>\n#include <node_object_wrap.h>\n\nnamespace demo {\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Local<v8::Object> exports);\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static void New(const v8::FunctionCallbackInfo<v8::Value>& args);\n  static void PlusOne(const v8::FunctionCallbackInfo<v8::Value>& args);\n\n  double value_;\n};\n\n}  // namespace demo\n\n#endif\nIn myobject.cc, implement the various methods that are to be exposed. Below, the method plusOne() is exposed by adding it to the constructor's prototype:\n\n// myobject.cc\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::ObjectTemplate;\nusing v8::String;\nusing v8::Value;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init(Local<Object> exports) {\n  Isolate* isolate = exports->GetIsolate();\n  Local<Context> context = isolate->GetCurrentContext();\n\n  Local<ObjectTemplate> addon_data_tpl = ObjectTemplate::New(isolate);\n  addon_data_tpl->SetInternalFieldCount(1);  // 1 field for the MyObject::New()\n  Local<Object> addon_data =\n      addon_data_tpl->NewInstance(context).ToLocalChecked();\n\n  // Prepare constructor template\n  Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, New, addon_data);\n  tpl->SetClassName(String::NewFromUtf8(isolate, \"MyObject\").ToLocalChecked());\n  tpl->InstanceTemplate()->SetInternalFieldCount(1);\n\n  // Prototype\n  NODE_SET_PROTOTYPE_METHOD(tpl, \"plusOne\", PlusOne);\n\n  Local<Function> constructor = tpl->GetFunction(context).ToLocalChecked();\n  addon_data->SetInternalField(0, constructor);\n  exports->Set(context, String::NewFromUtf8(\n      isolate, \"MyObject\").ToLocalChecked(),\n      constructor).FromJust();\n}\n\nvoid MyObject::New(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  Local<Context> context = isolate->GetCurrentContext();\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]->IsUndefined() ?\n        0 : args[0]->NumberValue(context).FromMaybe(0);\n    MyObject* obj = new MyObject(value);\n", "doc_id": "b3d170dd-7b74-43fd-bc4a-7d2d8ca1a6a3", "embedding": null, "doc_hash": "9e0efa57f7950e1a3777f3d1b69996d19cad4e9a752c9dbbd4c88e9ce5963227", "extra_info": null, "node_info": {"start": 303628, "end": 306593}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "934d44a4-5289-460d-b4c3-1a06bee7fd78", "3": "954d9db3-6e5c-4401-a9b9-a04bff6fa4fa"}}, "__type__": "1"}, "954d9db3-6e5c-4401-a9b9-a04bff6fa4fa": {"__data__": {"text": " addon_data->SetInternalField(0, constructor);\n  exports->Set(context, String::NewFromUtf8(\n      isolate, \"MyObject\").ToLocalChecked(),\n      constructor).FromJust();\n}\n\nvoid MyObject::New(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  Local<Context> context = isolate->GetCurrentContext();\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]->IsUndefined() ?\n        0 : args[0]->NumberValue(context).FromMaybe(0);\n    MyObject* obj = new MyObject(value);\n    obj->Wrap(args.This());\n    args.GetReturnValue().Set(args.This());\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local<Value> argv[argc] = { args[0] };\n    Local<Function> cons =\n        args.Data().As<Object>()->GetInternalField(0).As<Function>();\n    Local<Object> result =\n        cons->NewInstance(context, argc, argv).ToLocalChecked();\n    args.GetReturnValue().Set(result);\n  }\n}\n\nvoid MyObject::PlusOne(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n\n  MyObject* obj = ObjectWrap::Unwrap<MyObject>(args.Holder());\n  obj->value_ += 1;\n\n  args.GetReturnValue().Set(Number::New(isolate, obj->value_));\n}\n\n}  // namespace demo\nTo build this example, the myobject.cc file must be added to the binding.gyp:\n\n{\n  \"targets\": [\n    {\n      \"target_name\": \"addon\",\n      \"sources\": [\n        \"addon.cc\",\n        \"myobject.cc\"\n      ]\n    }\n  ]\n}\nTest it with:\n\n// test.js\nconst addon = require('./build/Release/addon');\n\nconst obj = new addon.MyObject(10);\nconsole.log(obj.plusOne());\n// Prints: 11\nconsole.log(obj.plusOne());\n// Prints: 12\nconsole.log(obj.plusOne());\n// Prints: 13\nThe destructor for a wrapper object will run when the object is garbage-collected. For destructor testing, there are command-line flags that can be used to make it possible to force garbage collection. These flags are provided by the underlying V8 JavaScript engine. They are subject to change or removal at any time. They are not documented by Node.js or V8, and they should never be used outside of testing.\n\nDuring shutdown of the process or worker threads destructors are not called by the JS engine. Therefore it's the responsibility of the user to track these objects and ensure proper destruction to avoid resource leaks.\n\nFactory of wrapped objects#\nAlternatively, it is possible to use a factory pattern to avoid explicitly creating object instances using the JavaScript new operator:\n\nconst obj = addon.createObject();\n// instead of:\n// const obj = new addon.Object();\nFirst, the createObject() method is implemented in addon.cc:\n\n// addon.cc\n#include <node.h>\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo<Value>& args) {\n  MyObject::NewInstance(args);\n}\n\nvoid InitAll(Local<Object> exports, Local<Object> module) {\n ", "doc_id": "954d9db3-6e5c-4401-a9b9-a04bff6fa4fa", "embedding": null, "doc_hash": "f6db7c9bc5b9bcc5c8deb164c9b619e307305b8dc372dd05dc626c1f4e6ed4d4", "extra_info": null, "node_info": {"start": 306610, "end": 309645}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b3d170dd-7b74-43fd-bc4a-7d2d8ca1a6a3", "3": "484def40-2481-4d94-bec0-bb78f07416e8"}}, "__type__": "1"}, "484def40-2481-4d94-bec0-bb78f07416e8": {"__data__": {"text": "it is possible to use a factory pattern to avoid explicitly creating object instances using the JavaScript new operator:\n\nconst obj = addon.createObject();\n// instead of:\n// const obj = new addon.Object();\nFirst, the createObject() method is implemented in addon.cc:\n\n// addon.cc\n#include <node.h>\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo<Value>& args) {\n  MyObject::NewInstance(args);\n}\n\nvoid InitAll(Local<Object> exports, Local<Object> module) {\n  MyObject::Init(exports->GetIsolate());\n\n  NODE_SET_METHOD(module, \"exports\", CreateObject);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, InitAll)\n\n}  // namespace demo\nIn myobject.h, the static method NewInstance() is added to handle instantiating the object. This method takes the place of using new in JavaScript:\n\n// myobject.h\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include <node.h>\n#include <node_object_wrap.h>\n\nnamespace demo {\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Isolate* isolate);\n  static void NewInstance(const v8::FunctionCallbackInfo<v8::Value>& args);\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static void New(const v8::FunctionCallbackInfo<v8::Value>& args);\n  static void PlusOne(const v8::FunctionCallbackInfo<v8::Value>& args);\n  static v8::Global<v8::Function> constructor;\n  double value_;\n};\n\n}  // namespace demo\n\n#endif\nThe implementation in myobject.cc is similar to the previous example:\n\n// myobject.cc\n#include <node.h>\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing node::AddEnvironmentCleanupHook;\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Global;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\n// Warning! This is not thread-safe, this addon cannot be used for worker\n// threads.\nGlobal<Function> MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init(Isolate* isolate) {\n  // Prepare constructor template\n  Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, New);\n  tpl->SetClassName(String::NewFromUtf8(isolate, \"MyObject\").ToLocalChecked());\n  tpl->InstanceTemplate()->SetInternalFieldCount(1);\n\n  // Prototype\n  NODE_SET_PROTOTYPE_METHOD(tpl, \"plusOne\", PlusOne);\n\n  Local<Context> context = isolate->GetCurrentContext();\n  constructor.Reset(isolate, tpl->GetFunction(context).ToLocalChecked());\n\n  AddEnvironmentCleanupHook(isolate, [](void*) {\n    constructor.Reset();\n  }, nullptr);\n}\n\nvoid MyObject::New(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  Local<Context> context = isolate->GetCurrentContext();\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]->IsUndefined() ?\n        0 :", "doc_id": "484def40-2481-4d94-bec0-bb78f07416e8", "embedding": null, "doc_hash": "4e1ab506264854822ba305b0cb5059803e89ef57468ac1f3ffb80e232a700d9a", "extra_info": null, "node_info": {"start": 309571, "end": 312577}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "954d9db3-6e5c-4401-a9b9-a04bff6fa4fa", "3": "7d005c59-64e5-40df-a8e1-885327dab2af"}}, "__type__": "1"}, "7d005c59-64e5-40df-a8e1-885327dab2af": {"__data__": {"text": "\"plusOne\", PlusOne);\n\n  Local<Context> context = isolate->GetCurrentContext();\n  constructor.Reset(isolate, tpl->GetFunction(context).ToLocalChecked());\n\n  AddEnvironmentCleanupHook(isolate, [](void*) {\n    constructor.Reset();\n  }, nullptr);\n}\n\nvoid MyObject::New(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  Local<Context> context = isolate->GetCurrentContext();\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]->IsUndefined() ?\n        0 : args[0]->NumberValue(context).FromMaybe(0);\n    MyObject* obj = new MyObject(value);\n    obj->Wrap(args.This());\n    args.GetReturnValue().Set(args.This());\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local<Value> argv[argc] = { args[0] };\n    Local<Function> cons = Local<Function>::New(isolate, constructor);\n    Local<Object> instance =\n        cons->NewInstance(context, argc, argv).ToLocalChecked();\n    args.GetReturnValue().Set(instance);\n  }\n}\n\nvoid MyObject::NewInstance(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n\n  const unsigned argc = 1;\n  Local<Value> argv[argc] = { args[0] };\n  Local<Function> cons = Local<Function>::New(isolate, constructor);\n  Local<Context> context = isolate->GetCurrentContext();\n  Local<Object> instance =\n      cons->NewInstance(context, argc, argv).ToLocalChecked();\n\n  args.GetReturnValue().Set(instance);\n}\n\nvoid MyObject::PlusOne(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n\n  MyObject* obj = ObjectWrap::Unwrap<MyObject>(args.Holder());\n  obj->value_ += 1;\n\n  args.GetReturnValue().Set(Number::New(isolate, obj->value_));\n}\n\n}  // namespace demo\nOnce again, to build this example, the myobject.cc file must be added to the binding.gyp:\n\n{\n  \"targets\": [\n    {\n      \"target_name\": \"addon\",\n      \"sources\": [\n        \"addon.cc\",\n        \"myobject.cc\"\n      ]\n    }\n  ]\n}\nTest it with:\n\n// test.js\nconst createObject = require('./build/Release/addon');\n\nconst obj = createObject(10);\nconsole.log(obj.plusOne());\n// Prints: 11\nconsole.log(obj.plusOne());\n// Prints: 12\nconsole.log(obj.plusOne());\n// Prints: 13\n\nconst obj2 = createObject(20);\nconsole.log(obj2.plusOne());\n// Prints: 21\nconsole.log(obj2.plusOne());\n// Prints: 22\nconsole.log(obj2.plusOne());\n// Prints: 23\nPassing wrapped objects around#\nIn addition to wrapping and returning C++ objects, it is possible to pass wrapped objects around by unwrapping them with the Node.js helper function node::ObjectWrap::Unwrap. The following examples shows a function add() that can take two MyObject objects as input arguments:\n\n// addon.cc\n#include <node.h>\n#include <node_object_wrap.h>\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing", "doc_id": "7d005c59-64e5-40df-a8e1-885327dab2af", "embedding": null, "doc_hash": "3aa332aade2ca9423854748dc8437cd48903729867507415090402b3baed16e8", "extra_info": null, "node_info": {"start": 312657, "end": 315552}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "484def40-2481-4d94-bec0-bb78f07416e8", "3": "c42e69d7-855e-41e8-b5c2-0ed2722037e2"}}, "__type__": "1"}, "c42e69d7-855e-41e8-b5c2-0ed2722037e2": {"__data__": {"text": "Prints: 21\nconsole.log(obj2.plusOne());\n// Prints: 22\nconsole.log(obj2.plusOne());\n// Prints: 23\nPassing wrapped objects around#\nIn addition to wrapping and returning C++ objects, it is possible to pass wrapped objects around by unwrapping them with the Node.js helper function node::ObjectWrap::Unwrap. The following examples shows a function add() that can take two MyObject objects as input arguments:\n\n// addon.cc\n#include <node.h>\n#include <node_object_wrap.h>\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo<Value>& args) {\n  MyObject::NewInstance(args);\n}\n\nvoid Add(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  Local<Context> context = isolate->GetCurrentContext();\n\n  MyObject* obj1 = node::ObjectWrap::Unwrap<MyObject>(\n      args[0]->ToObject(context).ToLocalChecked());\n  MyObject* obj2 = node::ObjectWrap::Unwrap<MyObject>(\n      args[1]->ToObject(context).ToLocalChecked());\n\n  double sum = obj1->value() + obj2->value();\n  args.GetReturnValue().Set(Number::New(isolate, sum));\n}\n\nvoid InitAll(Local<Object> exports) {\n  MyObject::Init(exports->GetIsolate());\n\n  NODE_SET_METHOD(exports, \"createObject\", CreateObject);\n  NODE_SET_METHOD(exports, \"add\", Add);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, InitAll)\n\n}  // namespace demo\nIn myobject.h, a new public method is added to allow access to private values after unwrapping the object.\n\n// myobject.h\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include <node.h>\n#include <node_object_wrap.h>\n\nnamespace demo {\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Isolate* isolate);\n  static void NewInstance(const v8::FunctionCallbackInfo<v8::Value>& args);\n  inline double value() const { return value_; }\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static void New(const v8::FunctionCallbackInfo<v8::Value>& args);\n  static v8::Global<v8::Function> constructor;\n  double value_;\n};\n\n}  // namespace demo\n\n#endif\nThe implementation of myobject.cc is similar to before:\n\n// myobject.cc\n#include <node.h>\n#include \"myobject.h\"\n\nnamespace demo {\n\nusing node::AddEnvironmentCleanupHook;\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Global;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\n// Warning! This is not thread-safe, this addon cannot be used for worker\n// threads.\nGlobal<Function> MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init(Isolate* isolate) {\n  // Prepare constructor template\n  Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, New);\n  tpl->SetClassName(String::NewFromUtf8(isolate, \"MyObject\").ToLocalChecked());\n  tpl->InstanceTemplate()->SetInternalFieldCount(1);\n\n  Local<Context>", "doc_id": "c42e69d7-855e-41e8-b5c2-0ed2722037e2", "embedding": null, "doc_hash": "ce9226e794e9f233b6b498d3c4c0d006f659ebe65b46d10cb731b8f53940ba23", "extra_info": null, "node_info": {"start": 315508, "end": 318541}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7d005c59-64e5-40df-a8e1-885327dab2af", "3": "2c7e6930-5f92-48fe-bed6-26d863837e4e"}}, "__type__": "1"}, "2c7e6930-5f92-48fe-bed6-26d863837e4e": {"__data__": {"text": "v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\n// Warning! This is not thread-safe, this addon cannot be used for worker\n// threads.\nGlobal<Function> MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init(Isolate* isolate) {\n  // Prepare constructor template\n  Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, New);\n  tpl->SetClassName(String::NewFromUtf8(isolate, \"MyObject\").ToLocalChecked());\n  tpl->InstanceTemplate()->SetInternalFieldCount(1);\n\n  Local<Context> context = isolate->GetCurrentContext();\n  constructor.Reset(isolate, tpl->GetFunction(context).ToLocalChecked());\n\n  AddEnvironmentCleanupHook(isolate, [](void*) {\n    constructor.Reset();\n  }, nullptr);\n}\n\nvoid MyObject::New(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n  Local<Context> context = isolate->GetCurrentContext();\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]->IsUndefined() ?\n        0 : args[0]->NumberValue(context).FromMaybe(0);\n    MyObject* obj = new MyObject(value);\n    obj->Wrap(args.This());\n    args.GetReturnValue().Set(args.This());\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local<Value> argv[argc] = { args[0] };\n    Local<Function> cons = Local<Function>::New(isolate, constructor);\n    Local<Object> instance =\n        cons->NewInstance(context, argc, argv).ToLocalChecked();\n    args.GetReturnValue().Set(instance);\n  }\n}\n\nvoid MyObject::NewInstance(const FunctionCallbackInfo<Value>& args) {\n  Isolate* isolate = args.GetIsolate();\n\n  const unsigned argc = 1;\n  Local<Value> argv[argc] = { args[0] };\n  Local<Function> cons = Local<Function>::New(isolate, constructor);\n  Local<Context> context = isolate->GetCurrentContext();\n  Local<Object> instance =\n      cons->NewInstance(context, argc, argv).ToLocalChecked();\n\n  args.GetReturnValue().Set(instance);\n}\n\n}  // namespace demo\nTest it with:\n\n// test.js\nconst addon = require('./build/Release/addon');\n\nconst obj1 = addon.createObject(10);\nconst obj2 = addon.createObject(20);\nconst result = addon.add(obj1, obj2);\n\nconsole.log(result);\n// Prints: 30\nNode-API#\nStability: 2 - Stable\nNode-API (formerly N-API) is an API for building native Addons. It is independent from the underlying JavaScript runtime (for example, V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate addons from changes in the underlying JavaScript engine and allow modules compiled for one major version to run on later major versions of Node.js without recompilation. The ABI Stability guide provides a more in-depth explanation.\n\nAddons are built/packaged with the same approach/tools outlined in the section titled C++ Addons. The only difference is the set of APIs that are used by the native code. Instead of using the V8 or Native Abstractions for Node.js APIs, the functions available in Node-API are used.\n\nAPIs exposed by Node-API are generally used to", "doc_id": "2c7e6930-5f92-48fe-bed6-26d863837e4e", "embedding": null, "doc_hash": "c987c21255115f9e6a0a0aa5aad4fc806fd4dbe443f60a307a5a28050592e725", "extra_info": null, "node_info": {"start": 318526, "end": 321716}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c42e69d7-855e-41e8-b5c2-0ed2722037e2", "3": "c613bb0a-6d02-4e67-a45d-adf1f2e667ba"}}, "__type__": "1"}, "c613bb0a-6d02-4e67-a45d-adf1f2e667ba": {"__data__": {"text": "It is independent from the underlying JavaScript runtime (for example, V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate addons from changes in the underlying JavaScript engine and allow modules compiled for one major version to run on later major versions of Node.js without recompilation. The ABI Stability guide provides a more in-depth explanation.\n\nAddons are built/packaged with the same approach/tools outlined in the section titled C++ Addons. The only difference is the set of APIs that are used by the native code. Instead of using the V8 or Native Abstractions for Node.js APIs, the functions available in Node-API are used.\n\nAPIs exposed by Node-API are generally used to create and manipulate JavaScript values. Concepts and operations generally map to ideas specified in the ECMA-262 Language Specification. The APIs have the following properties:\n\nAll Node-API calls return a status code of type napi_status. This status indicates whether the API call succeeded or failed.\nThe API's return value is passed via an out parameter.\nAll JavaScript values are abstracted behind an opaque type named napi_value.\nIn case of an error status code, additional information can be obtained using napi_get_last_error_info. More information can be found in the error handling section Error handling.\nNode-API is a C API that ensures ABI stability across Node.js versions and different compiler levels. A C++ API can be easier to use. To support using C++, the project maintains a C++ wrapper module called node-addon-api. This wrapper provides an inlineable C++ API. Binaries built with node-addon-api will depend on the symbols for the Node-API C-based functions exported by Node.js. node-addon-api is a more efficient way to write code that calls Node-API. Take, for example, the following node-addon-api code. The first section shows the node-addon-api code and the second section shows what actually gets used in the addon.\n\nObject obj = Object::New(env);\nobj[\"foo\"] = String::New(env, \"bar\");\nnapi_status status;\nnapi_value object, string;\nstatus = napi_create_object(env, &object);\nif (status != napi_ok) {\n  napi_throw_error(env, ...);\n  return;\n}\n\nstatus = napi_create_string_utf8(env, \"bar\", NAPI_AUTO_LENGTH, &string);\nif (status != napi_ok) {\n  napi_throw_error(env, ...);\n  return;\n}\n\nstatus = napi_set_named_property(env, object, \"foo\", string);\nif (status != napi_ok) {\n  napi_throw_error(env, ...);\n  return;\n}\nThe end result is that the addon only uses the exported C APIs. As a result, it still gets the benefits of the ABI stability provided by the C API.\n\nWhen using node-addon-api instead of the C APIs, start with the API docs for node-addon-api.\n\nThe Node-API Resource offers an excellent orientation and tips for developers just getting started with Node-API and node-addon-api. Additional media resources can be found on the Node-API Media page.\n\nImplications of ABI stability#\nAlthough Node-API provides an ABI stability guarantee, other parts of Node.js do not, and any external libraries used from the addon may not. In particular, none of the following APIs provide an ABI stability guarantee across major versions:\n\nthe Node.js C++ APIs available via any of\n\n#include <node.h>\n#include <node_buffer.h>\n#include <node_version.h>\n#include <node_object_wrap.h>\nthe libuv APIs which are also included with Node.js and available via\n\n#include <uv.h>\nthe V8 API available via\n\n#include <v8.h>\nThus, for an addon to remain ABI-compatible across Node.js", "doc_id": "c613bb0a-6d02-4e67-a45d-adf1f2e667ba", "embedding": null, "doc_hash": "34305aecce2ca253bbd7d584650db83303b0dc97b98441e8a7e76c9d5c596c82", "extra_info": null, "node_info": {"start": 321586, "end": 325173}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2c7e6930-5f92-48fe-bed6-26d863837e4e", "3": "6abd9e6f-679b-4d32-a6e0-d12a975b0df9"}}, "__type__": "1"}, "6abd9e6f-679b-4d32-a6e0-d12a975b0df9": {"__data__": {"text": "be found on the Node-API Media page.\n\nImplications of ABI stability#\nAlthough Node-API provides an ABI stability guarantee, other parts of Node.js do not, and any external libraries used from the addon may not. In particular, none of the following APIs provide an ABI stability guarantee across major versions:\n\nthe Node.js C++ APIs available via any of\n\n#include <node.h>\n#include <node_buffer.h>\n#include <node_version.h>\n#include <node_object_wrap.h>\nthe libuv APIs which are also included with Node.js and available via\n\n#include <uv.h>\nthe V8 API available via\n\n#include <v8.h>\nThus, for an addon to remain ABI-compatible across Node.js major versions, it must use Node-API exclusively by restricting itself to using\n\n#include <node_api.h>\nand by checking, for all external libraries that it uses, that the external library makes ABI stability guarantees similar to Node-API.\n\nBuilding#\nUnlike modules written in JavaScript, developing and deploying Node.js native addons using Node-API requires an additional set of tools. Besides the basic tools required to develop for Node.js, the native addon developer requires a toolchain that can compile C and C++ code into a binary. In addition, depending upon how the native addon is deployed, the user of the native addon will also need to have a C/C++ toolchain installed.\n\nFor Linux developers, the necessary C/C++ toolchain packages are readily available. GCC is widely used in the Node.js community to build and test across a variety of platforms. For many developers, the LLVM compiler infrastructure is also a good choice.\n\nFor Mac developers, Xcode offers all the required compiler tools. However, it is not necessary to install the entire Xcode IDE. The following command installs the necessary toolchain:\n\nxcode-select --install\nFor Windows developers, Visual Studio offers all the required compiler tools. However, it is not necessary to install the entire Visual Studio IDE. The following command installs the necessary toolchain:\n\nnpm install --global windows-build-tools\nThe sections below describe the additional tools available for developing and deploying Node.js native addons.\n\nBuild tools#\nBoth the tools listed here require that users of the native addon have a C/C++ toolchain installed in order to successfully install the native addon.\n\nnode-gyp#\nnode-gyp is a build system based on the gyp-next fork of Google's GYP tool and comes bundled with npm. GYP, and therefore node-gyp, requires that Python be installed.\n\nHistorically, node-gyp has been the tool of choice for building native addons. It has widespread adoption and documentation. However, some developers have run into limitations in node-gyp.\n\nCMake.js#\nCMake.js is an alternative build system based on CMake.\n\nCMake.js is a good choice for projects that already use CMake or for developers affected by limitations in node-gyp.\n\nUploading precompiled binaries#\nThe three tools listed here permit native addon developers and maintainers to create and upload binaries to public or private servers. These tools are typically integrated with CI/CD build systems like Travis CI and AppVeyor to build and upload binaries for a variety of platforms and architectures. These binaries are then available for download by users who do not need to have a C/C++ toolchain installed.\n\nnode-pre-gyp#\nnode-pre-gyp is a tool based on node-gyp that adds the ability to upload binaries to a server of the developer's choice. node-pre-gyp has particularly good support for uploading binaries to Amazon S3.\n\nprebuild#\nprebuild is a tool that supports builds using either node-gyp or CMake.js. Unlike node-pre-gyp which supports a variety of servers, prebuild uploads binaries only to GitHub releases. prebuild is a good choice for GitHub projects using CMake.js.\n\nprebuildify#\nprebuildify is a tool based on node-gyp. The advantage of prebuildify is", "doc_id": "6abd9e6f-679b-4d32-a6e0-d12a975b0df9", "embedding": null, "doc_hash": "2071823608691f811c590d58ac11b6c1ad4be2b5cd2c9833e6b4dcbfa7b8da39", "extra_info": null, "node_info": {"start": 325287, "end": 329149}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c613bb0a-6d02-4e67-a45d-adf1f2e667ba", "3": "a39cf4e4-f5a1-4144-81a1-a80adc748076"}}, "__type__": "1"}, "a39cf4e4-f5a1-4144-81a1-a80adc748076": {"__data__": {"text": "of platforms and architectures. These binaries are then available for download by users who do not need to have a C/C++ toolchain installed.\n\nnode-pre-gyp#\nnode-pre-gyp is a tool based on node-gyp that adds the ability to upload binaries to a server of the developer's choice. node-pre-gyp has particularly good support for uploading binaries to Amazon S3.\n\nprebuild#\nprebuild is a tool that supports builds using either node-gyp or CMake.js. Unlike node-pre-gyp which supports a variety of servers, prebuild uploads binaries only to GitHub releases. prebuild is a good choice for GitHub projects using CMake.js.\n\nprebuildify#\nprebuildify is a tool based on node-gyp. The advantage of prebuildify is that the built binaries are bundled with the native addon when it's uploaded to npm. The binaries are downloaded from npm and are immediately available to the module user when the native addon is installed.\n\nUsage#\nIn order to use the Node-API functions, include the file node_api.h which is located in the src directory in the node development tree:\n\n#include <node_api.h>\nThis will opt into the default NAPI_VERSION for the given release of Node.js. In order to ensure compatibility with specific versions of Node-API, the version can be specified explicitly when including the header:\n\n#define NAPI_VERSION 3\n#include <node_api.h>\nThis restricts the Node-API surface to just the functionality that was available in the specified (and earlier) versions.\n\nSome of the Node-API surface is experimental and requires explicit opt-in:\n\n#define NAPI_EXPERIMENTAL\n#include <node_api.h>\nIn this case the entire API surface, including any experimental APIs, will be available to the module code.\n\nNode-API version matrix#\nNode-API versions are additive and versioned independently from Node.js. Version 4 is an extension to version 3 in that it has all of the APIs from version 3 with some additions. This means that it is not necessary to recompile for new versions of Node.js which are listed as supporting a later version.\n\n1\t2\t3\nv6.x\t\t\tv6.14.2*\nv8.x\tv8.6.0**\tv8.10.0*\tv8.11.2\nv9.x\tv9.0.0*\tv9.3.0*\tv9.11.0*\n\u2265 v10.x\tall releases\tall releases\tall releases\n4\t5\t6\t7\t8\nv10.x\tv10.16.0\tv10.17.0\tv10.20.0\tv10.23.0\t\nv11.x\tv11.8.0\t\t\t\t\nv12.x\tv12.0.0\tv12.11.0\tv12.17.0\tv12.19.0\tv12.22.0\nv13.x\tv13.0.0\tv13.0.0\t\t\t\nv14.x\tv14.0.0\tv14.0.0\tv14.0.0\tv14.12.0\tv14.17.0\nv15.x\tv15.0.0\tv15.0.0\tv15.0.0\tv15.0.0\tv15.12.0\nv16.x\tv16.0.0\tv16.0.0\tv16.0.0\tv16.0.0\tv16.0.0\n* Node-API was experimental.\n\n** Node.js 8.0.0 included Node-API as experimental. It was released as Node-API version 1 but continued to evolve until Node.js 8.6.0. The API is different in versions prior to Node.js 8.6.0. We recommend Node-API version 3 or later.\n\nEach API documented for Node-API will have a header named added in:, and APIs which are stable will have the additional header Node-API version:. APIs are directly usable when using a Node.js version which supports the Node-API version shown in", "doc_id": "a39cf4e4-f5a1-4144-81a1-a80adc748076", "embedding": null, "doc_hash": "ac5e9f7fc876056e87033e463731dd2b7a37096c6c87f4dfdbf97dd80dc9dfe7", "extra_info": null, "node_info": {"start": 329110, "end": 332056}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6abd9e6f-679b-4d32-a6e0-d12a975b0df9", "3": "6a2f6873-8a11-4851-82da-279d04885f74"}}, "__type__": "1"}, "6a2f6873-8a11-4851-82da-279d04885f74": {"__data__": {"text": "Node-API was experimental.\n\n** Node.js 8.0.0 included Node-API as experimental. It was released as Node-API version 1 but continued to evolve until Node.js 8.6.0. The API is different in versions prior to Node.js 8.6.0. We recommend Node-API version 3 or later.\n\nEach API documented for Node-API will have a header named added in:, and APIs which are stable will have the additional header Node-API version:. APIs are directly usable when using a Node.js version which supports the Node-API version shown in Node-API version: or higher. When using a Node.js version that does not support the Node-API version: listed or if there is no Node-API version: listed, then the API will only be available if #define NAPI_EXPERIMENTAL precedes the inclusion of node_api.h or js_native_api.h. If an API appears not to be available on a version of Node.js which is later than the one shown in added in: then this is most likely the reason for the apparent absence.\n\nThe Node-APIs associated strictly with accessing ECMAScript features from native code can be found separately in js_native_api.h and js_native_api_types.h. The APIs defined in these headers are included in node_api.h and node_api_types.h. The headers are structured in this way in order to allow implementations of Node-API outside of Node.js. For those implementations the Node.js specific APIs may not be applicable.\n\nThe Node.js-specific parts of an addon can be separated from the code that exposes the actual functionality to the JavaScript environment so that the latter may be used with multiple implementations of Node-API. In the example below, addon.c and addon.h refer only to js_native_api.h. This ensures that addon.c can be reused to compile against either the Node.js implementation of Node-API or any implementation of Node-API outside of Node.js.\n\naddon_node.c is a separate file that contains the Node.js specific entry point to the addon and which instantiates the addon by calling into addon.c when the addon is loaded into a Node.js environment.\n\n// addon.h\n#ifndef _ADDON_H_\n#define _ADDON_H_\n#include <js_native_api.h>\nnapi_value create_addon(napi_env env);\n#endif  // _ADDON_H_\n// addon.c\n#include \"addon.h\"\n\n#define NAPI_CALL(env, call)                                      \\\n  do {                                                            \\\n    napi_status status = (call);                                  \\\n    if (status != napi_ok) {                                      \\\n      const napi_extended_error_info* error_info = NULL;          \\\n      napi_get_last_error_info((env), &error_info);               \\\n      const char* err_message = error_info->error_message;        \\\n      bool is_pending;                                            \\\n      napi_is_exception_pending((env), &is_pending);              \\\n ", "doc_id": "6a2f6873-8a11-4851-82da-279d04885f74", "embedding": null, "doc_hash": "2470987598f9bab34521a92604f2254a616124b0acfd86a86168ce0abef8eab9", "extra_info": null, "node_info": {"start": 332227, "end": 335028}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a39cf4e4-f5a1-4144-81a1-a80adc748076", "3": "b2d71d10-ca04-4003-9af5-27a6c820f255"}}, "__type__": "1"}, "b2d71d10-ca04-4003-9af5-27a6c820f255": {"__data__": {"text": " \\\n      const napi_extended_error_info* error_info = NULL;          \\\n      napi_get_last_error_info((env), &error_info);               \\\n      const char* err_message = error_info->error_message;        \\\n      bool is_pending;                                            \\\n      napi_is_exception_pending((env), &is_pending);              \\\n      if (!is_pending) {                                          \\\n        const char* message = (err_message == NULL)               \\\n            ? \"empty error message\"                               \\\n            : err_message;                                        \\\n        napi_throw_error((env), NULL, message);                   \\\n        return NULL;                                              \\\n      }                                                           \\\n    }                                                             \\\n  } while(0)\n\nstatic napi_value\nDoSomethingUseful(napi_env env, napi_callback_info info) {\n  // Do something useful.\n  return NULL;\n}\n\nnapi_value create_addon(napi_env env) {\n  napi_value result;\n  NAPI_CALL(env, napi_create_object(env, &result));\n\n  napi_value exported_function;\n  NAPI_CALL(env, napi_create_function(env,\n                                      \"doSomethingUseful\",\n                                      NAPI_AUTO_LENGTH,\n                                      DoSomethingUseful,\n                                      NULL,\n                                      &exported_function));\n\n  NAPI_CALL(env, napi_set_named_property(env,\n                                ", "doc_id": "b2d71d10-ca04-4003-9af5-27a6c820f255", "embedding": null, "doc_hash": "621434fa07ff075c63e3e3253f45ffa9088cb18f9c8d4f7a7445140da8a4d3b2", "extra_info": null, "node_info": {"start": 335248, "end": 336814}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6a2f6873-8a11-4851-82da-279d04885f74", "3": "dfe0673a-7bd6-4f5f-963f-9691ccd29a68"}}, "__type__": "1"}, "dfe0673a-7bd6-4f5f-963f-9691ccd29a68": {"__data__": {"text": "          NAPI_AUTO_LENGTH,\n                                      DoSomethingUseful,\n                                      NULL,\n                                      &exported_function));\n\n  NAPI_CALL(env, napi_set_named_property(env,\n                                         result,\n                                         \"doSomethingUseful\",\n                                         exported_function));\n\n  return result;\n}\n// addon_node.c\n#include <node_api.h>\n#include \"addon.h\"\n\nNAPI_MODULE_INIT() {\n  // This function body is expected to return a `napi_value`.\n  // The variables `napi_env env` and `napi_value exports` may be used within\n  // the body, as they are provided by the definition of `NAPI_MODULE_INIT()`.\n  return create_addon(env);\n}\nEnvironment life cycle APIs#\nSection 8.7 of the ECMAScript Language Specification defines the concept of an \"Agent\" as a self-contained environment in which JavaScript code runs. Multiple such Agents may be started and terminated either concurrently or in sequence by the process.\n\nA Node.js environment corresponds to an ECMAScript Agent. In the main process, an environment is created at startup, and additional environments can be created on separate threads to serve as worker threads. When Node.js is embedded in another application, the main thread of the application may also construct and destroy a Node.js environment multiple times during the life cycle of the application process such that each Node.js environment created by the application may, in turn, during its life cycle create and destroy additional environments as worker threads.\n\nFrom the perspective of a native addon this means that the bindings it provides may be called multiple times, from multiple contexts, and even concurrently from multiple threads.\n\nNative addons may need to allocate global state which they use during their entire life cycle such that the state must be unique to each instance of the addon.\n\nTo this end, Node-API provides a way to allocate data such that its life cycle is tied to the life cycle of the Agent.\n\nnapi_set_instance_data#\nAdded in: v12.8.0, v10.20.0 N-API version: 6\nnapi_status napi_set_instance_data(napi_env env,\n                                   void* data,\n                                   napi_finalize finalize_cb,\n                                   void* finalize_hint);\n[in] env: The environment that the Node-API call is invoked under.\n[in] data: The data item to make available to bindings of this instance.\n[in] finalize_cb: The function to call when the environment is being torn down. The function receives data so that it might free it. napi_finalize provides more details.\n[in] finalize_hint: Optional hint to pass to the finalize callback during collection.\nReturns napi_ok if the API succeeded.\n\nThis API associates data", "doc_id": "dfe0673a-7bd6-4f5f-963f-9691ccd29a68", "embedding": null, "doc_hash": "fcd92d533905527b7c88d42330b65bbac76a4a36ee84485f0996566f437dc71c", "extra_info": null, "node_info": {"start": 336916, "end": 339729}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b2d71d10-ca04-4003-9af5-27a6c820f255", "3": "d8f119f9-4646-4bb9-829a-7df4e29fe195"}}, "__type__": "1"}, "d8f119f9-4646-4bb9-829a-7df4e29fe195": {"__data__": {"text": "                    napi_finalize finalize_cb,\n                                   void* finalize_hint);\n[in] env: The environment that the Node-API call is invoked under.\n[in] data: The data item to make available to bindings of this instance.\n[in] finalize_cb: The function to call when the environment is being torn down. The function receives data so that it might free it. napi_finalize provides more details.\n[in] finalize_hint: Optional hint to pass to the finalize callback during collection.\nReturns napi_ok if the API succeeded.\n\nThis API associates data with the currently running Agent. data can later be retrieved using napi_get_instance_data(). Any existing data associated with the currently running Agent which was set by means of a previous call to napi_set_instance_data() will be overwritten. If a finalize_cb was provided by the previous call, it will not be called.\n\nnapi_get_instance_data#\nAdded in: v12.8.0, v10.20.0 N-API version: 6\nnapi_status napi_get_instance_data(napi_env env,\n                                   void** data);\n[in] env: The environment that the Node-API call is invoked under.\n[out] data: The data item that was previously associated with the currently running Agent by a call to napi_set_instance_data().\nReturns napi_ok if the API succeeded.\n\nThis API retrieves data that was previously associated with the currently running Agent via napi_set_instance_data(). If no data is set, the call will succeed and data will be set to NULL.\n\nBasic Node-API data types#\nNode-API exposes the following fundamental datatypes as abstractions that are consumed by the various APIs. These APIs should be treated as opaque, introspectable only with other Node-API calls.\n\nnapi_status#\nAdded in: v8.0.0 N-API version: 1\nIntegral status code indicating the success or failure of a Node-API call. Currently, the following status codes are supported.\n\ntypedef enum {\n  napi_ok,\n  napi_invalid_arg,\n  napi_object_expected,\n  napi_string_expected,\n  napi_name_expected,\n  napi_function_expected,\n  napi_number_expected,\n  napi_boolean_expected,\n  napi_array_expected,\n  napi_generic_failure,\n  napi_pending_exception,\n  napi_cancelled,\n  napi_escape_called_twice,\n  napi_handle_scope_mismatch,\n  napi_callback_scope_mismatch,\n  napi_queue_full,\n  napi_closing,\n  napi_bigint_expected,\n  napi_date_expected,\n  napi_arraybuffer_expected,\n  napi_detachable_arraybuffer_expected,\n  napi_would_deadlock,  /* unused */\n  napi_no_external_buffers_allowed\n} napi_status;\nIf additional information is required upon an API returning a failed status, it can be obtained by calling napi_get_last_error_info.\n\nnapi_extended_error_info#\nAdded in: v8.0.0 N-API version: 1\ntypedef struct {\n  const char* error_message;\n  void* engine_reserved;\n  uint32_t engine_error_code;\n  napi_status error_code;\n} napi_extended_error_info;\nerror_message: UTF8-encoded string containing a VM-neutral description of the error.\nengine_reserved: Reserved for VM-specific error details. This is currently not implemented for any VM.\nengine_error_code: VM-specific error", "doc_id": "d8f119f9-4646-4bb9-829a-7df4e29fe195", "embedding": null, "doc_hash": "982c3dce5df023de64a49eca89c9b6297fb5b1af01c796c12b7fb6611bde7d4a", "extra_info": null, "node_info": {"start": 339400, "end": 342460}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dfe0673a-7bd6-4f5f-963f-9691ccd29a68", "3": "05b28632-35aa-4008-a814-d52b33a57ccd"}}, "__type__": "1"}, "05b28632-35aa-4008-a814-d52b33a57ccd": {"__data__": {"text": "*/\n  napi_no_external_buffers_allowed\n} napi_status;\nIf additional information is required upon an API returning a failed status, it can be obtained by calling napi_get_last_error_info.\n\nnapi_extended_error_info#\nAdded in: v8.0.0 N-API version: 1\ntypedef struct {\n  const char* error_message;\n  void* engine_reserved;\n  uint32_t engine_error_code;\n  napi_status error_code;\n} napi_extended_error_info;\nerror_message: UTF8-encoded string containing a VM-neutral description of the error.\nengine_reserved: Reserved for VM-specific error details. This is currently not implemented for any VM.\nengine_error_code: VM-specific error code. This is currently not implemented for any VM.\nerror_code: The Node-API status code that originated with the last error.\nSee the Error handling section for additional information.\n\nnapi_env#\nnapi_env is used to represent a context that the underlying Node-API implementation can use to persist VM-specific state. This structure is passed to native functions when they're invoked, and it must be passed back when making Node-API calls. Specifically, the same napi_env that was passed in when the initial native function was called must be passed to any subsequent nested Node-API calls. Caching the napi_env for the purpose of general reuse, and passing the napi_env between instances of the same addon running on different Worker threads is not allowed. The napi_env becomes invalid when an instance of a native addon is unloaded. Notification of this event is delivered through the callbacks given to napi_add_env_cleanup_hook and napi_set_instance_data.\n\nnapi_value#\nThis is an opaque pointer that is used to represent a JavaScript value.\n\nnapi_threadsafe_function#\nAdded in: v10.6.0 N-API version: 4\nThis is an opaque pointer that represents a JavaScript function which can be called asynchronously from multiple threads via napi_call_threadsafe_function().\n\nnapi_threadsafe_function_release_mode#\nAdded in: v10.6.0 N-API version: 4\nA value to be given to napi_release_threadsafe_function() to indicate whether the thread-safe function is to be closed immediately (napi_tsfn_abort) or merely released (napi_tsfn_release) and thus available for subsequent use via napi_acquire_threadsafe_function() and napi_call_threadsafe_function().\n\ntypedef enum {\n  napi_tsfn_release,\n  napi_tsfn_abort\n} napi_threadsafe_function_release_mode;\nnapi_threadsafe_function_call_mode#\nAdded in: v10.6.0 N-API version: 4\nA value to be given to napi_call_threadsafe_function() to indicate whether the call should block whenever the queue associated with the thread-safe function is full.\n\ntypedef enum {\n  napi_tsfn_nonblocking,\n  napi_tsfn_blocking\n} napi_threadsafe_function_call_mode;\nNode-API memory management types#\nnapi_handle_scope#\nThis is an abstraction used to control and modify the lifetime of objects created within a particular scope. In general, Node-API values are created within the context of a handle scope. When a native method is called from JavaScript, a default handle scope will exist. If the user does not explicitly create a new handle scope, Node-API values will be created in the default handle scope. For any invocations of code outside the execution of a native method (for instance, during a libuv callback invocation), the module is required to create a scope before invoking any functions that can result in the creation of JavaScript values.\n\nHandle scopes are created using napi_open_handle_scope and are destroyed using napi_close_handle_scope. Closing the scope can indicate to the GC that all napi_values created during the lifetime of the handle scope are no longer referenced from the current stack frame.\n\nFor more details, review the Object", "doc_id": "05b28632-35aa-4008-a814-d52b33a57ccd", "embedding": null, "doc_hash": "d4ada2e4f3ab1aaa782aaf16dce3a6db77b85e8eb47dd139e7d9e88499d158ac", "extra_info": null, "node_info": {"start": 342340, "end": 346038}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d8f119f9-4646-4bb9-829a-7df4e29fe195", "3": "eab16107-6145-452b-8310-5aaa94726b20"}}, "__type__": "1"}, "eab16107-6145-452b-8310-5aaa94726b20": {"__data__": {"text": "lifetime of objects created within a particular scope. In general, Node-API values are created within the context of a handle scope. When a native method is called from JavaScript, a default handle scope will exist. If the user does not explicitly create a new handle scope, Node-API values will be created in the default handle scope. For any invocations of code outside the execution of a native method (for instance, during a libuv callback invocation), the module is required to create a scope before invoking any functions that can result in the creation of JavaScript values.\n\nHandle scopes are created using napi_open_handle_scope and are destroyed using napi_close_handle_scope. Closing the scope can indicate to the GC that all napi_values created during the lifetime of the handle scope are no longer referenced from the current stack frame.\n\nFor more details, review the Object lifetime management.\n\nnapi_escapable_handle_scope#\nAdded in: v8.0.0 N-API version: 1\nEscapable handle scopes are a special type of handle scope to return values created within a particular handle scope to a parent scope.\n\nnapi_ref#\nAdded in: v8.0.0 N-API version: 1\nThis is the abstraction to use to reference a napi_value. This allows for users to manage the lifetimes of JavaScript values, including defining their minimum lifetimes explicitly.\n\nFor more details, review the Object lifetime management.\n\nnapi_type_tag#\nAdded in: v14.8.0, v12.19.0 N-API version: 8\nA 128-bit value stored as two unsigned 64-bit integers. It serves as a UUID with which JavaScript objects can be \"tagged\" in order to ensure that they are of a certain type. This is a stronger check than napi_instanceof, because the latter can report a false positive if the object's prototype has been manipulated. Type-tagging is most useful in conjunction with napi_wrap because it ensures that the pointer retrieved from a wrapped object can be safely cast to the native type corresponding to the type tag that had been previously applied to the JavaScript object.\n\ntypedef struct {\n  uint64_t lower;\n  uint64_t upper;\n} napi_type_tag;\nnapi_async_cleanup_hook_handle#\nAdded in: v14.10.0, v12.19.0\nAn opaque value returned by napi_add_async_cleanup_hook. It must be passed to napi_remove_async_cleanup_hook when the chain of asynchronous cleanup events completes.\n\nNode-API callback types#\nnapi_callback_info#\nAdded in: v8.0.0 N-API version: 1\nOpaque datatype that is passed to a callback function. It can be used for getting additional information about the context in which the callback was invoked.\n\nnapi_callback#\nAdded in: v8.0.0 N-API version: 1\nFunction pointer type for user-provided native functions which are to be exposed to JavaScript via Node-API. Callback functions should satisfy the following signature:\n\ntypedef napi_value (*napi_callback)(napi_env, napi_callback_info);\nUnless for reasons discussed in Object Lifetime Management, creating a handle and/or callback scope inside a napi_callback is not necessary.\n\nnapi_finalize#\nAdded in: v8.0.0 N-API version: 1\nFunction pointer type for add-on provided functions that allow the user to be notified when externally-owned data is ready to be cleaned up because the object with which it was associated with, has been garbage-collected. The user must provide a function satisfying the following signature which would get called upon the object's collection. Currently, napi_finalize can be used for finding out when objects that have external data are collected.\n\ntypedef void (*napi_finalize)(napi_env env,\n                              void* finalize_data,\n                            ", "doc_id": "eab16107-6145-452b-8310-5aaa94726b20", "embedding": null, "doc_hash": "20538b9e24c85ace6b4e5525a352d27b5b3149908a0e4e48268daf5b04ec1935", "extra_info": null, "node_info": {"start": 345849, "end": 349458}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "05b28632-35aa-4008-a814-d52b33a57ccd", "3": "59a26516-06bf-4536-a539-3d9a65cf5807"}}, "__type__": "1"}, "59a26516-06bf-4536-a539-3d9a65cf5807": {"__data__": {"text": "in: v8.0.0 N-API version: 1\nFunction pointer type for add-on provided functions that allow the user to be notified when externally-owned data is ready to be cleaned up because the object with which it was associated with, has been garbage-collected. The user must provide a function satisfying the following signature which would get called upon the object's collection. Currently, napi_finalize can be used for finding out when objects that have external data are collected.\n\ntypedef void (*napi_finalize)(napi_env env,\n                              void* finalize_data,\n                              void* finalize_hint);\nUnless for reasons discussed in Object Lifetime Management, creating a handle and/or callback scope inside the function body is not necessary.\n\nnapi_async_execute_callback#\nAdded in: v8.0.0 N-API version: 1\nFunction pointer used with functions that support asynchronous operations. Callback functions must satisfy the following signature:\n\ntypedef void (*napi_async_execute_callback)(napi_env env, void* data);\nImplementations of this function must avoid making Node-API calls that execute JavaScript or interact with JavaScript objects. Node-API calls should be in the napi_async_complete_callback instead. Do not use the napi_env parameter as it will likely result in execution of JavaScript.\n\nnapi_async_complete_callback#\nAdded in: v8.0.0 N-API version: 1\nFunction pointer used with functions that support asynchronous operations. Callback functions must satisfy the following signature:\n\ntypedef void (*napi_async_complete_callback)(napi_env env,\n                                             napi_status status,\n                                             void* data);\nUnless for reasons discussed in Object Lifetime Management, creating a handle and/or callback scope inside the function body is not necessary.\n\nnapi_threadsafe_function_call_js#\nAdded in: v10.6.0 N-API version: 4\nFunction pointer used with asynchronous thread-safe function calls. The callback will be called on the main thread. Its purpose is to use a data item arriving via the queue from one of the secondary threads to construct the parameters necessary for a call into JavaScript, usually via napi_call_function, and then make the call into JavaScript.\n\nThe data arriving from the secondary thread via the queue is given in the data parameter and the JavaScript function to call is given in the js_callback parameter.\n\nNode-API sets up the environment prior to calling this callback, so it is sufficient to call the JavaScript function via napi_call_function rather than via napi_make_callback.\n\nCallback functions must satisfy the following signature:\n\ntypedef void (*napi_threadsafe_function_call_js)(napi_env env,\n                                                 napi_value js_callback,\n                                                 void* context,\n                                                 void* data);\n[in] env: The environment to use for API calls, or NULL if the thread-safe function is being torn down and data may need to be", "doc_id": "59a26516-06bf-4536-a539-3d9a65cf5807", "embedding": null, "doc_hash": "211d5acece1ed404df4b930f3a2809f43f62f79b9cf46689255834587816522e", "extra_info": null, "node_info": {"start": 349743, "end": 352789}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "eab16107-6145-452b-8310-5aaa94726b20", "3": "7f7c9192-7bc7-419c-8c71-50cf927acb12"}}, "__type__": "1"}, "7f7c9192-7bc7-419c-8c71-50cf927acb12": {"__data__": {"text": "env,\n                                                 napi_value js_callback,\n                                                 void* context,\n                                                 void* data);\n[in] env: The environment to use for API calls, or NULL if the thread-safe function is being torn down and data may need to be freed.\n[in] js_callback: The JavaScript function to call, or NULL if the thread-safe function is being torn down and data may need to be freed. It may also be NULL if the thread-safe function was created without js_callback.\n[in] context: The optional data with which the thread-safe function was created.\n[in] data: Data created by the secondary thread. It is the responsibility of the callback to convert this native data to JavaScript values (with Node-API functions) that can be passed as parameters when js_callback is invoked. This pointer is managed entirely by the threads and this callback. Thus this callback should free the data.\nUnless for reasons discussed in Object Lifetime Management, creating a handle and/or callback scope inside the function body is not necessary.\n\nnapi_cleanup_hook#\nAdded in: v18.13.0 N-API version: 3\nFunction pointer used with napi_add_env_cleanup_hook. It will be called when the environment is being torn down.\n\nCallback functions must satisfy the following signature:\n\ntypedef void (*napi_cleanup_hook)(void* data);\n[in] data: The data that was passed to napi_add_env_cleanup_hook.\nnapi_async_cleanup_hook#\nAdded in: v14.10.0, v12.19.0\nFunction pointer used with napi_add_async_cleanup_hook. It will be called when the environment is being torn down.\n\nCallback functions must satisfy the following signature:\n\ntypedef void (*napi_async_cleanup_hook)(napi_async_cleanup_hook_handle handle,\n                                        void* data);\n[in] handle: The handle that must be passed to napi_remove_async_cleanup_hook after completion of the asynchronous cleanup.\n[in] data: The data that was passed to napi_add_async_cleanup_hook.\nThe body of the function should initiate the asynchronous cleanup actions at the end of which handle must be passed in a call to napi_remove_async_cleanup_hook.\n\nError handling#\nNode-API uses both return values and JavaScript exceptions for error handling. The following sections explain the approach for each case.\n\nReturn values#\nAll of the Node-API functions share the same error handling pattern. The return type of all API functions is napi_status.\n\nThe return value will be napi_ok if the request was successful and no uncaught JavaScript exception was thrown. If an error occurred AND an exception was thrown, the napi_status value for the error will be returned. If an exception was thrown, and no error occurred, napi_pending_exception will be returned.\n\nIn cases where a return value other than napi_ok or napi_pending_exception is returned, napi_is_exception_pending must be called to check if an exception is pending. See the section on exceptions for more details.\n\nThe full set of possible napi_status values is defined in napi_api_types.h.\n\nThe napi_status return value provides a VM-independent representation of the error which occurred. In some cases it is useful to", "doc_id": "7f7c9192-7bc7-419c-8c71-50cf927acb12", "embedding": null, "doc_hash": "9a92f620f54c0e3c3cc9ca54089c7d7ce554f9e45cebefcda3f08d1d332b37c5", "extra_info": null, "node_info": {"start": 353100, "end": 356292}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "59a26516-06bf-4536-a539-3d9a65cf5807", "3": "de53319b-6f86-44da-bb6e-6377806cfcc9"}}, "__type__": "1"}, "de53319b-6f86-44da-bb6e-6377806cfcc9": {"__data__": {"text": "return value will be napi_ok if the request was successful and no uncaught JavaScript exception was thrown. If an error occurred AND an exception was thrown, the napi_status value for the error will be returned. If an exception was thrown, and no error occurred, napi_pending_exception will be returned.\n\nIn cases where a return value other than napi_ok or napi_pending_exception is returned, napi_is_exception_pending must be called to check if an exception is pending. See the section on exceptions for more details.\n\nThe full set of possible napi_status values is defined in napi_api_types.h.\n\nThe napi_status return value provides a VM-independent representation of the error which occurred. In some cases it is useful to be able to get more detailed information, including a string representing the error as well as VM (engine)-specific information.\n\nIn order to retrieve this information napi_get_last_error_info is provided which returns a napi_extended_error_info structure. The format of the napi_extended_error_info structure is as follows:\n\nAdded in: v8.0.0 N-API version: 1\ntypedef struct napi_extended_error_info {\n  const char* error_message;\n  void* engine_reserved;\n  uint32_t engine_error_code;\n  napi_status error_code;\n};\nerror_message: Textual representation of the error that occurred.\nengine_reserved: Opaque handle reserved for engine use only.\nengine_error_code: VM specific error code.\nerror_code: Node-API status code for the last error.\nnapi_get_last_error_info returns the information for the last Node-API call that was made.\n\nDo not rely on the content or format of any of the extended information as it is not subject to SemVer and may change at any time. It is intended only for logging purposes.\n\nnapi_get_last_error_info#\nAdded in: v8.0.0 N-API version: 1\nnapi_status\nnapi_get_last_error_info(napi_env env,\n                         const napi_extended_error_info** result);\n[in] env: The environment that the API is invoked under.\n[out] result: The napi_extended_error_info structure with more information about the error.\nReturns napi_ok if the API succeeded.\n\nThis API retrieves a napi_extended_error_info structure with information about the last error that occurred.\n\nThe content of the napi_extended_error_info returned is only valid up until a Node-API function is called on the same env. This includes a call to napi_is_exception_pending so it may often be necessary to make a copy of the information so that it can be used later. The pointer returned in error_message points to a statically-defined string so it is safe to use that pointer if you have copied it out of the error_message field (which will be overwritten) before another Node-API function was called.\n\nDo not rely on the content or format of any of the extended information as it is not subject to SemVer and may change at any time. It is intended only for logging purposes.\n\nThis API can be called even if there is a pending JavaScript exception.\n\nExceptions#\nAny Node-API function call may result in a pending JavaScript exception. This is the case for any of the API functions, even those that may not cause the execution of JavaScript.\n\nIf the napi_status returned by a function is napi_ok then no exception is pending and no additional action is required. If the napi_status returned is anything other than napi_ok or napi_pending_exception, in order to try to recover and continue instead of simply returning immediately, napi_is_exception_pending must be called in order to determine if an exception is pending or not.\n\nIn many cases when a Node-API function is called and an exception is already pending, the function will return immediately", "doc_id": "de53319b-6f86-44da-bb6e-6377806cfcc9", "embedding": null, "doc_hash": "61ee4dea650aafa99d8bf550ba68491144bfe44a2fb7714dd25adb36d4dfc36c", "extra_info": null, "node_info": {"start": 355831, "end": 359487}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7f7c9192-7bc7-419c-8c71-50cf927acb12", "3": "b0ccac65-9b94-4200-bb4f-e0069cdc1f0e"}}, "__type__": "1"}, "b0ccac65-9b94-4200-bb4f-e0069cdc1f0e": {"__data__": {"text": "API can be called even if there is a pending JavaScript exception.\n\nExceptions#\nAny Node-API function call may result in a pending JavaScript exception. This is the case for any of the API functions, even those that may not cause the execution of JavaScript.\n\nIf the napi_status returned by a function is napi_ok then no exception is pending and no additional action is required. If the napi_status returned is anything other than napi_ok or napi_pending_exception, in order to try to recover and continue instead of simply returning immediately, napi_is_exception_pending must be called in order to determine if an exception is pending or not.\n\nIn many cases when a Node-API function is called and an exception is already pending, the function will return immediately with a napi_status of napi_pending_exception. However, this is not the case for all functions. Node-API allows a subset of the functions to be called to allow for some minimal cleanup before returning to JavaScript. In that case, napi_status will reflect the status for the function. It will not reflect previous pending exceptions. To avoid confusion, check the error status after every function call.\n\nWhen an exception is pending one of two approaches can be employed.\n\nThe first approach is to do any appropriate cleanup and then return so that execution will return to JavaScript. As part of the transition back to JavaScript, the exception will be thrown at the point in the JavaScript code where the native method was invoked. The behavior of most Node-API calls is unspecified while an exception is pending, and many will simply return napi_pending_exception, so do as little as possible and then return to JavaScript where the exception can be handled.\n\nThe second approach is to try to handle the exception. There will be cases where the native code can catch the exception, take the appropriate action, and then continue. This is only recommended in specific cases where it is known that the exception can be safely handled. In these cases napi_get_and_clear_last_exception can be used to get and clear the exception. On success, result will contain the handle to the last JavaScript Object thrown. If it is determined, after retrieving the exception, the exception cannot be handled after all it can be re-thrown it with napi_throw where error is the JavaScript value to be thrown.\n\nThe following utility functions are also available in case native code needs to throw an exception or determine if a napi_value is an instance of a JavaScript Error object: napi_throw_error, napi_throw_type_error, napi_throw_range_error, node_api_throw_syntax_error and napi_is_error.\n\nThe following utility functions are also available in case native code needs to create an Error object: napi_create_error, napi_create_type_error, napi_create_range_error and node_api_create_syntax_error, where result is the napi_value that refers to the newly created JavaScript Error object.\n\nThe Node.js project is adding error codes to all of the errors generated internally. The goal is for applications to use these error codes for all error checking. The associated error messages will remain, but will only be meant to be used for logging and display with the expectation that the message can change without SemVer applying. In order to support this model with Node-API, both in internal functionality and for module specific functionality (as its good practice), the throw_ and create_ functions take an optional code parameter which is the string for the code to be added to the error object. If the optional parameter is NULL then no code will be associated with the error. If a code is provided, the name associated with the error is also updated to be:\n\noriginalName [code]\nwhere originalName is the original name associated with the error and code is the code that was provided. For example, if the code is 'ERR_ERROR_1' and a TypeError is being created the name will be:\n\nTypeError [ERR_ERROR_1]\nnapi_throw#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_throw(napi_env", "doc_id": "b0ccac65-9b94-4200-bb4f-e0069cdc1f0e", "embedding": null, "doc_hash": "d8dc7b351ce5c2b3f26206feece8bbc23578f836ff2509e8a10b4429592120fb", "extra_info": null, "node_info": {"start": 359456, "end": 363506}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "de53319b-6f86-44da-bb6e-6377806cfcc9", "3": "c027b190-ae21-4ec2-ba1d-418a27f55ac6"}}, "__type__": "1"}, "c027b190-ae21-4ec2-ba1d-418a27f55ac6": {"__data__": {"text": "In order to support this model with Node-API, both in internal functionality and for module specific functionality (as its good practice), the throw_ and create_ functions take an optional code parameter which is the string for the code to be added to the error object. If the optional parameter is NULL then no code will be associated with the error. If a code is provided, the name associated with the error is also updated to be:\n\noriginalName [code]\nwhere originalName is the original name associated with the error and code is the code that was provided. For example, if the code is 'ERR_ERROR_1' and a TypeError is being created the name will be:\n\nTypeError [ERR_ERROR_1]\nnapi_throw#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_throw(napi_env env, napi_value error);\n[in] env: The environment that the API is invoked under.\n[in] error: The JavaScript value to be thrown.\nReturns napi_ok if the API succeeded.\n\nThis API throws the JavaScript value provided.\n\nnapi_throw_error#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_throw_error(napi_env env,\n                                         const char* code,\n                                         const char* msg);\n[in] env: The environment that the API is invoked under.\n[in] code: Optional error code to be set on the error.\n[in] msg: C string representing the text to be associated with the error.\nReturns napi_ok if the API succeeded.\n\nThis API throws a JavaScript Error with the text provided.\n\nnapi_throw_type_error#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_throw_type_error(napi_env env,\n                                              const char* code,\n                                              const char* msg);\n[in] env: The environment that the API is invoked under.\n[in] code: Optional error code to be set on the error.\n[in] msg: C string representing the text to be associated with the error.\nReturns napi_ok if the API succeeded.\n\nThis API throws a JavaScript TypeError with the text provided.\n\nnapi_throw_range_error#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_throw_range_error(napi_env env,\n                                               const char* code,\n                                               const char* msg);\n[in] env: The environment that the API is invoked under.\n[in] code: Optional error code to be set on the error.\n[in] msg: C string representing the text to be associated with the error.\nReturns napi_ok if the API succeeded.\n\nThis API throws a JavaScript RangeError with the text provided.\n\nnode_api_throw_syntax_error#\nAdded in: v17.2.0, v16.14.0\nStability: 1 - Experimental\nNAPI_EXTERN napi_status node_api_throw_syntax_error(napi_env env,\n ", "doc_id": "c027b190-ae21-4ec2-ba1d-418a27f55ac6", "embedding": null, "doc_hash": "f2c7573501163cdcb3056f964b8223ea9a7983fe2fd0bc8e889925fa6a2296b2", "extra_info": null, "node_info": {"start": 363508, "end": 366226}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b0ccac65-9b94-4200-bb4f-e0069cdc1f0e", "3": "5e949616-c418-458c-a7cd-24876b2a867d"}}, "__type__": "1"}, "5e949616-c418-458c-a7cd-24876b2a867d": {"__data__": {"text": "                                              const char* msg);\n[in] env: The environment that the API is invoked under.\n[in] code: Optional error code to be set on the error.\n[in] msg: C string representing the text to be associated with the error.\nReturns napi_ok if the API succeeded.\n\nThis API throws a JavaScript RangeError with the text provided.\n\nnode_api_throw_syntax_error#\nAdded in: v17.2.0, v16.14.0\nStability: 1 - Experimental\nNAPI_EXTERN napi_status node_api_throw_syntax_error(napi_env env,\n                                                    const char* code,\n                                                    const char* msg);\n[in] env: The environment that the API is invoked under.\n[in] code: Optional error code to be set on the error.\n[in] msg: C string representing the text to be associated with the error.\nReturns napi_ok if the API succeeded.\n\nThis API throws a JavaScript SyntaxError with the text provided.\n\nnapi_is_error#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_is_error(napi_env env,\n                                      napi_value value,\n                                      bool* result);\n[in] env: The environment that the API is invoked under.\n[in] value: The napi_value to be checked.\n[out] result: Boolean value that is set to true if napi_value represents an error, false otherwise.\nReturns napi_ok if the API succeeded.\n\nThis API queries a napi_value to check if it represents an error object.\n\nnapi_create_error#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_create_error(napi_env env,\n                                          napi_value code,\n                                          napi_value msg,\n                                          napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] code: Optional napi_value with the string for the error code to be associated with the error.\n[in] msg: napi_value that references a JavaScript string to be used as the message for the Error.\n[out] result: napi_value representing the error created.\nReturns napi_ok if the API succeeded.\n\nThis API returns a JavaScript Error with the text provided.\n\nnapi_create_type_error#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_create_type_error(napi_env env,\n                                            ", "doc_id": "5e949616-c418-458c-a7cd-24876b2a867d", "embedding": null, "doc_hash": "508b38ad4429196faeaf64e6e19a0f58b304611e30cc5139aec23436e6b4001b", "extra_info": null, "node_info": {"start": 366473, "end": 368794}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c027b190-ae21-4ec2-ba1d-418a27f55ac6", "3": "308b259a-6ccc-493e-81bf-52eaa0c1ca3f"}}, "__type__": "1"}, "308b259a-6ccc-493e-81bf-52eaa0c1ca3f": {"__data__": {"text": "API is invoked under.\n[in] code: Optional napi_value with the string for the error code to be associated with the error.\n[in] msg: napi_value that references a JavaScript string to be used as the message for the Error.\n[out] result: napi_value representing the error created.\nReturns napi_ok if the API succeeded.\n\nThis API returns a JavaScript Error with the text provided.\n\nnapi_create_type_error#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_create_type_error(napi_env env,\n                                               napi_value code,\n                                               napi_value msg,\n                                               napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] code: Optional napi_value with the string for the error code to be associated with the error.\n[in] msg: napi_value that references a JavaScript string to be used as the message for the Error.\n[out] result: napi_value representing the error created.\nReturns napi_ok if the API succeeded.\n\nThis API returns a JavaScript TypeError with the text provided.\n\nnapi_create_range_error#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_create_range_error(napi_env env,\n                                                napi_value code,\n                                                napi_value msg,\n                                                napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] code: Optional napi_value with the string for the error code to be associated with the error.\n[in] msg: napi_value that references a JavaScript string to be used as the message for the Error.\n[out] result: napi_value representing the error created.\nReturns napi_ok if the API succeeded.\n\nThis API returns a JavaScript RangeError with the text provided.\n\nnode_api_create_syntax_error#\nAdded in: v17.2.0, v16.14.0\nStability: 1 - Experimental\nNAPI_EXTERN napi_status node_api_create_syntax_error(napi_env env,\n                                                     napi_value code,\n                                                     napi_value msg,\n                                                     napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] code: Optional", "doc_id": "308b259a-6ccc-493e-81bf-52eaa0c1ca3f", "embedding": null, "doc_hash": "6a4d9797a391f9e2f1c6023187c63af2c34b20b89e3bb7909974c51ab59bf9f0", "extra_info": null, "node_info": {"start": 368766, "end": 371048}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5e949616-c418-458c-a7cd-24876b2a867d", "3": "cac3fcd5-2acf-4f39-8030-632c746159cf"}}, "__type__": "1"}, "cac3fcd5-2acf-4f39-8030-632c746159cf": {"__data__": {"text": "                                                    napi_value code,\n                                                     napi_value msg,\n                                                     napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] code: Optional napi_value with the string for the error code to be associated with the error.\n[in] msg: napi_value that references a JavaScript string to be used as the message for the Error.\n[out] result: napi_value representing the error created.\nReturns napi_ok if the API succeeded.\n\nThis API returns a JavaScript SyntaxError with the text provided.\n\nnapi_get_and_clear_last_exception#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_and_clear_last_exception(napi_env env,\n                                              napi_value* result);\n[in] env: The environment that the API is invoked under.\n[out] result: The exception if one is pending, NULL otherwise.\nReturns napi_ok if the API succeeded.\n\nThis API can be called even if there is a pending JavaScript exception.\n\nnapi_is_exception_pending#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_is_exception_pending(napi_env env, bool* result);\n[in] env: The environment that the API is invoked under.\n[out] result: Boolean value that is set to true if an exception is pending.\nReturns napi_ok if the API succeeded.\n\nThis API can be called even if there is a pending JavaScript exception.\n\nnapi_fatal_exception#\nAdded in: v9.10.0 N-API version: 3\nnapi_status napi_fatal_exception(napi_env env, napi_value err);\n[in] env: The environment that the API is invoked under.\n[in] err: The error that is passed to 'uncaughtException'.\nTrigger an 'uncaughtException' in JavaScript. Useful if an async callback throws an exception with no way to recover.\n\nFatal errors#\nIn the event of an unrecoverable error in a native addon, a fatal error can be thrown to immediately terminate the process.\n\nnapi_fatal_error#\nAdded in: v8.2.0 N-API version: 1\nNAPI_NO_RETURN void napi_fatal_error(const char* location,\n                                     size_t location_len,\n                                     const char* message,\n                                     size_t message_len);\n[in] location: Optional location at which the error occurred.\n[in] location_len: The length of the location in bytes, or NAPI_AUTO_LENGTH if it is null-terminated.\n[in] message: The message associated with the error.\n[in] message_len: The length of the message in bytes, or NAPI_AUTO_LENGTH if it is", "doc_id": "cac3fcd5-2acf-4f39-8030-632c746159cf", "embedding": null, "doc_hash": "dd754e2a5f337125168e6a5bad66950b5223211db5c208711025568cc58f3fb2", "extra_info": null, "node_info": {"start": 371365, "end": 373874}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "308b259a-6ccc-493e-81bf-52eaa0c1ca3f", "3": "e5910548-c301-4a29-9bf7-f575881ddb66"}}, "__type__": "1"}, "e5910548-c301-4a29-9bf7-f575881ddb66": {"__data__": {"text": "                  size_t location_len,\n                                     const char* message,\n                                     size_t message_len);\n[in] location: Optional location at which the error occurred.\n[in] location_len: The length of the location in bytes, or NAPI_AUTO_LENGTH if it is null-terminated.\n[in] message: The message associated with the error.\n[in] message_len: The length of the message in bytes, or NAPI_AUTO_LENGTH if it is null-terminated.\nThe function call does not return, the process will be terminated.\n\nThis API can be called even if there is a pending JavaScript exception.\n\nObject lifetime management#\nAs Node-API calls are made, handles to objects in the heap for the underlying VM may be returned as napi_values. These handles must hold the objects 'live' until they are no longer required by the native code, otherwise the objects could be collected before the native code was finished using them.\n\nAs object handles are returned they are associated with a 'scope'. The lifespan for the default scope is tied to the lifespan of the native method call. The result is that, by default, handles remain valid and the objects associated with these handles will be held live for the lifespan of the native method call.\n\nIn many cases, however, it is necessary that the handles remain valid for either a shorter or longer lifespan than that of the native method. The sections which follow describe the Node-API functions that can be used to change the handle lifespan from the default.\n\nMaking handle lifespan shorter than that of the native method#\nIt is often necessary to make the lifespan of handles shorter than the lifespan of a native method. For example, consider a native method that has a loop which iterates through the elements in a large array:\n\nfor (int i = 0; i < 1000000; i++) {\n  napi_value result;\n  napi_status status = napi_get_element(env, object, i, &result);\n  if (status != napi_ok) {\n    break;\n  }\n  // do something with element\n}\nThis would result in a large number of handles being created, consuming substantial resources. In addition, even though the native code could only use the most recent handle, all of the associated objects would also be kept alive since they all share the same scope.\n\nTo handle this case, Node-API provides the ability to establish a new 'scope' to which newly created handles will be associated. Once those handles are no longer required, the scope can be 'closed' and any handles associated with the scope are invalidated. The methods available to open/close scopes are napi_open_handle_scope and napi_close_handle_scope.\n\nNode-API only supports a single nested hierarchy of scopes. There is only one active scope at any time, and all new handles will be associated with that scope while it is active. Scopes must be closed in the reverse order from which they are opened. In addition, all scopes created within a native method must be closed before returning from that method.\n\nTaking the earlier example, adding calls to napi_open_handle_scope and napi_close_handle_scope would ensure that at most a single handle is valid throughout the execution of the loop:\n\nfor (int i = 0; i < 1000000; i++) {\n  napi_handle_scope scope;\n  napi_status status = napi_open_handle_scope(env, &scope);\n  if (status != napi_ok) {\n    break;\n  }\n  napi_value result;\n  status = napi_get_element(env, object, i, &result);\n  if (status != napi_ok) {\n    break;\n  }\n  // do something with element\n  status = napi_close_handle_scope(env,", "doc_id": "e5910548-c301-4a29-9bf7-f575881ddb66", "embedding": null, "doc_hash": "05a1bf4dce2ad8e78d86c708309c72eff8e1bea73a5b8bd867b12c6575991278", "extra_info": null, "node_info": {"start": 373675, "end": 377185}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cac3fcd5-2acf-4f39-8030-632c746159cf", "3": "23f15e96-4447-497f-84fd-8cec2e7e1ae6"}}, "__type__": "1"}, "23f15e96-4447-497f-84fd-8cec2e7e1ae6": {"__data__": {"text": "closed before returning from that method.\n\nTaking the earlier example, adding calls to napi_open_handle_scope and napi_close_handle_scope would ensure that at most a single handle is valid throughout the execution of the loop:\n\nfor (int i = 0; i < 1000000; i++) {\n  napi_handle_scope scope;\n  napi_status status = napi_open_handle_scope(env, &scope);\n  if (status != napi_ok) {\n    break;\n  }\n  napi_value result;\n  status = napi_get_element(env, object, i, &result);\n  if (status != napi_ok) {\n    break;\n  }\n  // do something with element\n  status = napi_close_handle_scope(env, scope);\n  if (status != napi_ok) {\n    break;\n  }\n}\nWhen nesting scopes, there are cases where a handle from an inner scope needs to live beyond the lifespan of that scope. Node-API supports an 'escapable scope' in order to support this case. An escapable scope allows one handle to be 'promoted' so that it 'escapes' the current scope and the lifespan of the handle changes from the current scope to that of the outer scope.\n\nThe methods available to open/close escapable scopes are napi_open_escapable_handle_scope and napi_close_escapable_handle_scope.\n\nThe request to promote a handle is made through napi_escape_handle which can only be called once.\n\nnapi_open_handle_scope#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_open_handle_scope(napi_env env,\n                                               napi_handle_scope* result);\n[in] env: The environment that the API is invoked under.\n[out] result: napi_value representing the new scope.\nReturns napi_ok if the API succeeded.\n\nThis API opens a new scope.\n\nnapi_close_handle_scope#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_close_handle_scope(napi_env env,\n                                                napi_handle_scope scope);\n[in] env: The environment that the API is invoked under.\n[in] scope: napi_value representing the scope to be closed.\nReturns napi_ok if the API succeeded.\n\nThis API closes the scope passed in. Scopes must be closed in the reverse order from which they were created.\n\nThis API can be called even if there is a pending JavaScript exception.\n\nnapi_open_escapable_handle_scope#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status\n    napi_open_escapable_handle_scope(napi_env env,\n                                     napi_handle_scope* result);\n[in] env: The environment that the API is invoked under.\n[out] result: napi_value representing the new scope.\nReturns napi_ok if the API succeeded.\n\nThis API opens a new scope from which one object can be promoted to the outer scope.\n\nnapi_close_escapable_handle_scope#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status\n    napi_close_escapable_handle_scope(napi_env env,\n                                     ", "doc_id": "23f15e96-4447-497f-84fd-8cec2e7e1ae6", "embedding": null, "doc_hash": "e6d1b19656fab4e671c7d019d8e2c1f48d24e3ca5995ac83924e42883700f5a4", "extra_info": null, "node_info": {"start": 377014, "end": 379783}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e5910548-c301-4a29-9bf7-f575881ddb66", "3": "8eae90db-086c-441a-bb0a-74c6340ad9cb"}}, "__type__": "1"}, "8eae90db-086c-441a-bb0a-74c6340ad9cb": {"__data__": {"text": "                        napi_handle_scope* result);\n[in] env: The environment that the API is invoked under.\n[out] result: napi_value representing the new scope.\nReturns napi_ok if the API succeeded.\n\nThis API opens a new scope from which one object can be promoted to the outer scope.\n\nnapi_close_escapable_handle_scope#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status\n    napi_close_escapable_handle_scope(napi_env env,\n                                      napi_handle_scope scope);\n[in] env: The environment that the API is invoked under.\n[in] scope: napi_value representing the scope to be closed.\nReturns napi_ok if the API succeeded.\n\nThis API closes the scope passed in. Scopes must be closed in the reverse order from which they were created.\n\nThis API can be called even if there is a pending JavaScript exception.\n\nnapi_escape_handle#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_escape_handle(napi_env env,\n                               napi_escapable_handle_scope scope,\n                               napi_value escapee,\n                               napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] scope: napi_value representing the current scope.\n[in] escapee: napi_value representing the JavaScript Object to be escaped.\n[out] result: napi_value representing the handle to the escaped Object in the outer scope.\nReturns napi_ok if the API succeeded.\n\nThis API promotes the handle to the JavaScript object so that it is valid for the lifetime of the outer scope. It can only be called once per scope. If it is called more than once an error will be returned.\n\nThis API can be called even if there is a pending JavaScript exception.\n\nReferences to objects with a lifespan longer than that of the native method#\nIn some cases an addon will need to be able to create and reference objects with a lifespan longer than that of a single native method invocation. For example, to create a constructor and later use that constructor in a request to creates instances, it must be possible to reference the constructor object across many different instance creation requests. This would not be possible with a normal handle returned as a napi_value as described in the earlier section. The lifespan of a normal handle is managed by scopes and all scopes must be closed before the end of a native method.\n\nNode-API provides methods to create persistent references to an object. Each persistent reference has an associated count with a value of 0 or higher. The count determines if the reference will keep the corresponding object live. References with a count of 0 do not prevent the object from being collected and are often called 'weak' references. Any count greater than 0 will prevent the object from being collected.\n\nReferences can be created with an initial reference count. The count can then be modified through napi_reference_ref and napi_reference_unref. If an object is collected while the count for a reference is 0, all subsequent calls to get the object associated with the reference napi_get_reference_value will return NULL for the returned napi_value. An attempt to call napi_reference_ref for a reference whose object has been collected results in an error.\n\nReferences must be deleted once they are no longer required by the addon. When a reference is deleted, it will no longer prevent the corresponding object from being collected. Failure to delete a persistent reference results", "doc_id": "8eae90db-086c-441a-bb0a-74c6340ad9cb", "embedding": null, "doc_hash": "923d7c32f674ee28a0649e94b295c97042840e5c6f6eaf4d198c9d82531c94ee", "extra_info": null, "node_info": {"start": 379912, "end": 383373}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "23f15e96-4447-497f-84fd-8cec2e7e1ae6", "3": "f089dba1-3d55-4c97-b465-c3c4bf07ce1f"}}, "__type__": "1"}, "f089dba1-3d55-4c97-b465-c3c4bf07ce1f": {"__data__": {"text": "References with a count of 0 do not prevent the object from being collected and are often called 'weak' references. Any count greater than 0 will prevent the object from being collected.\n\nReferences can be created with an initial reference count. The count can then be modified through napi_reference_ref and napi_reference_unref. If an object is collected while the count for a reference is 0, all subsequent calls to get the object associated with the reference napi_get_reference_value will return NULL for the returned napi_value. An attempt to call napi_reference_ref for a reference whose object has been collected results in an error.\n\nReferences must be deleted once they are no longer required by the addon. When a reference is deleted, it will no longer prevent the corresponding object from being collected. Failure to delete a persistent reference results in a 'memory leak' with both the native memory for the persistent reference and the corresponding object on the heap being retained forever.\n\nThere can be multiple persistent references created which refer to the same object, each of which will either keep the object live or not based on its individual count. Multiple persistent references to the same object can result in unexpectedly keeping alive native memory. The native structures for a persistent reference must be kept alive until finalizers for the referenced object are executed. If a new persistent reference is created for the same object, the finalizers for that object will not be run and the native memory pointed by the earlier persistent reference will not be freed. This can be avoided by calling napi_delete_reference in addition to napi_reference_unref when possible.\n\nnapi_create_reference#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_create_reference(napi_env env,\n                                              napi_value value,\n                                              uint32_t initial_refcount,\n                                              napi_ref* result);\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing the Object to which we want a reference.\n[in] initial_refcount: Initial reference count for the new reference.\n[out] result: napi_ref pointing to the new reference.\nReturns napi_ok if the API succeeded.\n\nThis API creates a new reference with the specified reference count to the Object passed in.\n\nnapi_delete_reference#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_delete_reference(napi_env env, napi_ref ref);\n[in] env: The environment that the API is invoked under.\n[in] ref: napi_ref to be deleted.\nReturns napi_ok if the API succeeded.\n\nThis API deletes the reference passed in.\n\nThis API can be called even if there is a pending JavaScript exception.\n\nnapi_reference_ref#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_reference_ref(napi_env env,\n                                           napi_ref ref,\n                                           uint32_t* result);\n[in] env: The environment that the API is invoked under.\n[in] ref: napi_ref for which the reference count will be incremented.\n[out] result: The new reference", "doc_id": "f089dba1-3d55-4c97-b465-c3c4bf07ce1f", "embedding": null, "doc_hash": "13aa6595ad6998e143a1e0dca9cbff121d4d52e4747f19529c8689b11b43969a", "extra_info": null, "node_info": {"start": 383000, "end": 386185}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8eae90db-086c-441a-bb0a-74c6340ad9cb", "3": "0909e4a6-74ee-4b64-982f-d7b6e7bf5ce3"}}, "__type__": "1"}, "0909e4a6-74ee-4b64-982f-d7b6e7bf5ce3": {"__data__": {"text": "a pending JavaScript exception.\n\nnapi_reference_ref#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_reference_ref(napi_env env,\n                                           napi_ref ref,\n                                           uint32_t* result);\n[in] env: The environment that the API is invoked under.\n[in] ref: napi_ref for which the reference count will be incremented.\n[out] result: The new reference count.\nReturns napi_ok if the API succeeded.\n\nThis API increments the reference count for the reference passed in and returns the resulting reference count.\n\nnapi_reference_unref#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_reference_unref(napi_env env,\n                                             napi_ref ref,\n                                             uint32_t* result);\n[in] env: The environment that the API is invoked under.\n[in] ref: napi_ref for which the reference count will be decremented.\n[out] result: The new reference count.\nReturns napi_ok if the API succeeded.\n\nThis API decrements the reference count for the reference passed in and returns the resulting reference count.\n\nnapi_get_reference_value#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_get_reference_value(napi_env env,\n                                                 napi_ref ref,\n                                                 napi_value* result);\nthe napi_value passed in or out of these methods is a handle to the object to which the reference is related.\n\n[in] env: The environment that the API is invoked under.\n[in] ref: napi_ref for which we requesting the corresponding Object.\n[out] result: The napi_value for the Object referenced by the napi_ref.\nReturns napi_ok if the API succeeded.\n\nIf still valid, this API returns the napi_value representing the JavaScript Object associated with the napi_ref. Otherwise, result will be NULL.\n\nCleanup on exit of the current Node.js instance#\nWhile a Node.js process typically releases all its resources when exiting, embedders of Node.js, or future Worker support, may require addons to register clean-up hooks that will be run once the current Node.js instance exits.\n\nNode-API provides functions for registering and un-registering such callbacks. When those callbacks are run, all resources that are being held by the addon should be freed up.\n\nnapi_add_env_cleanup_hook#\nAdded in: v10.2.0 N-API version: 3\nNODE_EXTERN napi_status napi_add_env_cleanup_hook(napi_env env,\n                                                  napi_cleanup_hook fun,\n           ", "doc_id": "0909e4a6-74ee-4b64-982f-d7b6e7bf5ce3", "embedding": null, "doc_hash": "999dcfa47b0c95bb21a84887d9b04fb2e702bfe13b68efc0ffc5ccee4323a1af", "extra_info": null, "node_info": {"start": 386621, "end": 389170}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f089dba1-3d55-4c97-b465-c3c4bf07ce1f", "3": "380e454a-9668-4791-b684-ff1ded5cc581"}}, "__type__": "1"}, "380e454a-9668-4791-b684-ff1ded5cc581": {"__data__": {"text": "Worker support, may require addons to register clean-up hooks that will be run once the current Node.js instance exits.\n\nNode-API provides functions for registering and un-registering such callbacks. When those callbacks are run, all resources that are being held by the addon should be freed up.\n\nnapi_add_env_cleanup_hook#\nAdded in: v10.2.0 N-API version: 3\nNODE_EXTERN napi_status napi_add_env_cleanup_hook(napi_env env,\n                                                  napi_cleanup_hook fun,\n                                                  void* arg);\nRegisters fun as a function to be run with the arg parameter once the current Node.js environment exits.\n\nA function can safely be specified multiple times with different arg values. In that case, it will be called multiple times as well. Providing the same fun and arg values multiple times is not allowed and will lead the process to abort.\n\nThe hooks will be called in reverse order, i.e. the most recently added one will be called first.\n\nRemoving this hook can be done by using napi_remove_env_cleanup_hook. Typically, that happens when the resource for which this hook was added is being torn down anyway.\n\nFor asynchronous cleanup, napi_add_async_cleanup_hook is available.\n\nnapi_remove_env_cleanup_hook#\nAdded in: v10.2.0 N-API version: 3\nNAPI_EXTERN napi_status napi_remove_env_cleanup_hook(napi_env env,\n                                                     void (*fun)(void* arg),\n                                                     void* arg);\nUnregisters fun as a function to be run with the arg parameter once the current Node.js environment exits. Both the argument and the function value need to be exact matches.\n\nThe function must have originally been registered with napi_add_env_cleanup_hook, otherwise the process will abort.\n\nnapi_add_async_cleanup_hook#\nHistory\nN-API version: 8\nNAPI_EXTERN napi_status napi_add_async_cleanup_hook(\n    napi_env env,\n    napi_async_cleanup_hook hook,\n    void* arg,\n    napi_async_cleanup_hook_handle* remove_handle);\n[in] env: The environment that the API is invoked under.\n[in] hook: The function pointer to call at environment teardown.\n[in] arg: The pointer to pass to hook when it gets called.\n[out] remove_handle: Optional handle that refers to the asynchronous cleanup hook.\nRegisters hook, which is a function of type napi_async_cleanup_hook, as a function to be run with the remove_handle and arg parameters once the current Node.js environment exits.\n\nUnlike napi_add_env_cleanup_hook, the hook is allowed to be asynchronous.\n\nOtherwise, behavior generally matches that of napi_add_env_cleanup_hook.\n\nIf remove_handle is not NULL, an opaque value will be stored in it that must later be passed to napi_remove_async_cleanup_hook, regardless of whether the hook has already been invoked. Typically, that happens when the resource for which this hook was added is being torn down", "doc_id": "380e454a-9668-4791-b684-ff1ded5cc581", "embedding": null, "doc_hash": "9a248b5ad961e6deb5955e3adfbf62df7a7d1553ae46ed1c17d6030c4aa9efba", "extra_info": null, "node_info": {"start": 389076, "end": 391977}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0909e4a6-74ee-4b64-982f-d7b6e7bf5ce3", "3": "b7accf7d-fb30-46f3-ba18-2764f6521b0a"}}, "__type__": "1"}, "b7accf7d-fb30-46f3-ba18-2764f6521b0a": {"__data__": {"text": "arg: The pointer to pass to hook when it gets called.\n[out] remove_handle: Optional handle that refers to the asynchronous cleanup hook.\nRegisters hook, which is a function of type napi_async_cleanup_hook, as a function to be run with the remove_handle and arg parameters once the current Node.js environment exits.\n\nUnlike napi_add_env_cleanup_hook, the hook is allowed to be asynchronous.\n\nOtherwise, behavior generally matches that of napi_add_env_cleanup_hook.\n\nIf remove_handle is not NULL, an opaque value will be stored in it that must later be passed to napi_remove_async_cleanup_hook, regardless of whether the hook has already been invoked. Typically, that happens when the resource for which this hook was added is being torn down anyway.\n\nnapi_remove_async_cleanup_hook#\nHistory\nNAPI_EXTERN napi_status napi_remove_async_cleanup_hook(\n    napi_async_cleanup_hook_handle remove_handle);\n[in] remove_handle: The handle to an asynchronous cleanup hook that was created with napi_add_async_cleanup_hook.\nUnregisters the cleanup hook corresponding to remove_handle. This will prevent the hook from being executed, unless it has already started executing. This must be called on any napi_async_cleanup_hook_handle value obtained from napi_add_async_cleanup_hook.\n\nModule registration#\nNode-API modules are registered in a manner similar to other modules except that instead of using the NODE_MODULE macro the following is used:\n\nNAPI_MODULE(NODE_GYP_MODULE_NAME, Init)\nThe next difference is the signature for the Init method. For a Node-API module it is as follows:\n\nnapi_value Init(napi_env env, napi_value exports);\nThe return value from Init is treated as the exports object for the module. The Init method is passed an empty object via the exports parameter as a convenience. If Init returns NULL, the parameter passed as exports is exported by the module. Node-API modules cannot modify the module object but can specify anything as the exports property of the module.\n\nTo add the method hello as a function so that it can be called as a method provided by the addon:\n\nnapi_value Init(napi_env env, napi_value exports) {\n  napi_status status;\n  napi_property_descriptor desc = {\n    \"hello\",\n    NULL,\n    Method,\n    NULL,\n    NULL,\n    NULL,\n    napi_writable | napi_enumerable | napi_configurable,\n    NULL\n  };\n  status = napi_define_properties(env, exports, 1, &desc);\n  if (status != napi_ok) return NULL;\n  return exports;\n}\nTo set a function to be returned by the require() for the addon:\n\nnapi_value Init(napi_env env, napi_value exports) {\n  napi_value method;\n  napi_status status;\n  status = napi_create_function(env, \"exports\", NAPI_AUTO_LENGTH, Method, NULL, &method);\n  if (status != napi_ok) return NULL;\n  return method;\n}\nTo define a class so that new instances can be created (often used with Object wrap):\n\n// NOTE: partial example, not all referenced code is included\nnapi_value Init(napi_env env, napi_value exports) {\n  napi_status status;\n  napi_property_descriptor properties[] = {\n    { \"value\", NULL, NULL, GetValue, SetValue, NULL, napi_writable | napi_configurable, NULL },\n    DECLARE_NAPI_METHOD(\"plusOne\", PlusOne),\n    DECLARE_NAPI_METHOD(\"multiply\", Multiply),\n  };\n\n  napi_value cons;\n  status =\n     ", "doc_id": "b7accf7d-fb30-46f3-ba18-2764f6521b0a", "embedding": null, "doc_hash": "cdbc083cb0ec310f26b2c758829ff387f3c4ae9d1a9031fadee037b9513bfe1a", "extra_info": null, "node_info": {"start": 391735, "end": 394983}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "380e454a-9668-4791-b684-ff1ded5cc581", "3": "d397d7ae-5f91-4b27-b73a-d2d9a709405a"}}, "__type__": "1"}, "d397d7ae-5f91-4b27-b73a-d2d9a709405a": {"__data__": {"text": "&method);\n  if (status != napi_ok) return NULL;\n  return method;\n}\nTo define a class so that new instances can be created (often used with Object wrap):\n\n// NOTE: partial example, not all referenced code is included\nnapi_value Init(napi_env env, napi_value exports) {\n  napi_status status;\n  napi_property_descriptor properties[] = {\n    { \"value\", NULL, NULL, GetValue, SetValue, NULL, napi_writable | napi_configurable, NULL },\n    DECLARE_NAPI_METHOD(\"plusOne\", PlusOne),\n    DECLARE_NAPI_METHOD(\"multiply\", Multiply),\n  };\n\n  napi_value cons;\n  status =\n      napi_define_class(env, \"MyObject\", New, NULL, 3, properties, &cons);\n  if (status != napi_ok) return NULL;\n\n  status = napi_create_reference(env, cons, 1, &constructor);\n  if (status != napi_ok) return NULL;\n\n  status = napi_set_named_property(env, exports, \"MyObject\", cons);\n  if (status != napi_ok) return NULL;\n\n  return exports;\n}\nYou can also use the NAPI_MODULE_INIT macro, which acts as a shorthand for NAPI_MODULE and defining an Init function:\n\nNAPI_MODULE_INIT() {\n  napi_value answer;\n  napi_status result;\n\n  status = napi_create_int64(env, 42, &answer);\n  if (status != napi_ok) return NULL;\n\n  status = napi_set_named_property(env, exports, \"answer\", answer);\n  if (status != napi_ok) return NULL;\n\n  return exports;\n}\nAll Node-API addons are context-aware, meaning they may be loaded multiple times. There are a few design considerations when declaring such a module. The documentation on context-aware addons provides more details.\n\nThe variables env and exports will be available inside the function body following the macro invocation.\n\nFor more details on setting properties on objects, see the section on Working with JavaScript properties.\n\nFor more details on building addon modules in general, refer to the existing API.\n\nWorking with JavaScript values#\nNode-API exposes a set of APIs to create all types of JavaScript values. Some of these types are documented under Section 6 of the ECMAScript Language Specification.\n\nFundamentally, these APIs are used to do one of the following:\n\nCreate a new JavaScript object\nConvert from a primitive C type to a Node-API value\nConvert from Node-API value to a primitive C type\nGet global instances including undefined and null\nNode-API values are represented by the type napi_value. Any Node-API call that requires a JavaScript value takes in a napi_value. In some cases, the API does check the type of the napi_value up-front. However, for better performance, it's better for the caller to make sure that the napi_value in question is of the JavaScript type expected by the API.\n\nEnum types#\nnapi_key_collection_mode#\nAdded in: v13.7.0, v12.17.0, v10.20.0 N-API version: 6\ntypedef enum {\n  napi_key_include_prototypes,\n  napi_key_own_only\n} napi_key_collection_mode;\nDescribes the Keys/Properties filter enums:\n\nnapi_key_collection_mode limits the range of collected properties.\n\nnapi_key_own_only limits the collected properties to the given object only. napi_key_include_prototypes will include all keys of the objects's prototype chain as well.\n\nnapi_key_filter#\nAdded in: v13.7.0, v12.17.0, v10.20.0 N-API version: 6\ntypedef enum {\n  napi_key_all_properties = 0,\n  napi_key_writable = 1,\n  napi_key_enumerable = 1 << 1,\n ", "doc_id": "d397d7ae-5f91-4b27-b73a-d2d9a709405a", "embedding": null, "doc_hash": "d699a276bdf2c25b259c0b8cac6a0d607d4e20cd3b539ef6983e05953d94ccb8", "extra_info": null, "node_info": {"start": 395143, "end": 398398}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b7accf7d-fb30-46f3-ba18-2764f6521b0a", "3": "dca15ac6-c996-459b-aa37-26e62d0ad0d6"}}, "__type__": "1"}, "dca15ac6-c996-459b-aa37-26e62d0ad0d6": {"__data__": {"text": "6\ntypedef enum {\n  napi_key_include_prototypes,\n  napi_key_own_only\n} napi_key_collection_mode;\nDescribes the Keys/Properties filter enums:\n\nnapi_key_collection_mode limits the range of collected properties.\n\nnapi_key_own_only limits the collected properties to the given object only. napi_key_include_prototypes will include all keys of the objects's prototype chain as well.\n\nnapi_key_filter#\nAdded in: v13.7.0, v12.17.0, v10.20.0 N-API version: 6\ntypedef enum {\n  napi_key_all_properties = 0,\n  napi_key_writable = 1,\n  napi_key_enumerable = 1 << 1,\n  napi_key_configurable = 1 << 2,\n  napi_key_skip_strings = 1 << 3,\n  napi_key_skip_symbols = 1 << 4\n} napi_key_filter;\nProperty filter bits. They can be or'ed to build a composite filter.\n\nnapi_key_conversion#\nAdded in: v13.7.0, v12.17.0, v10.20.0 N-API version: 6\ntypedef enum {\n  napi_key_keep_numbers,\n  napi_key_numbers_to_strings\n} napi_key_conversion;\nnapi_key_numbers_to_strings will convert integer indices to strings. napi_key_keep_numbers will return numbers for integer indices.\n\nnapi_valuetype#\ntypedef enum {\n  // ES6 types (corresponds to typeof)\n  napi_undefined,\n  napi_null,\n  napi_boolean,\n  napi_number,\n  napi_string,\n  napi_symbol,\n  napi_object,\n  napi_function,\n  napi_external,\n  napi_bigint,\n} napi_valuetype;\nDescribes the type of a napi_value. This generally corresponds to the types described in Section 6.1 of the ECMAScript Language Specification. In addition to types in that section, napi_valuetype can also represent Functions and Objects with external data.\n\nA JavaScript value of type napi_external appears in JavaScript as a plain object such that no properties can be set on it, and no prototype.\n\nnapi_typedarray_type#\ntypedef enum {\n  napi_int8_array,\n  napi_uint8_array,\n  napi_uint8_clamped_array,\n  napi_int16_array,\n  napi_uint16_array,\n  napi_int32_array,\n  napi_uint32_array,\n  napi_float32_array,\n  napi_float64_array,\n  napi_bigint64_array,\n  napi_biguint64_array,\n} napi_typedarray_type;\nThis represents the underlying binary scalar datatype of the TypedArray. Elements of this enum correspond to Section 22.2 of the ECMAScript Language Specification.\n\nObject creation functions#\nnapi_create_array#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_array(napi_env env, napi_value* result)\n[in] env: The environment that the Node-API call is invoked under.\n[out] result: A napi_value representing a JavaScript Array.\nReturns napi_ok if the API succeeded.\n\nThis API returns a Node-API value corresponding to a JavaScript Array type. JavaScript arrays are described in Section 22.1 of the ECMAScript Language Specification.\n\nnapi_create_array_with_length#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_array_with_length(napi_env env,\n                                     ", "doc_id": "dca15ac6-c996-459b-aa37-26e62d0ad0d6", "embedding": null, "doc_hash": "7ad66e528a7f90b1e3ac03163b95c67e271756f3025a61bb7e9466bfa4bce982", "extra_info": null, "node_info": {"start": 398385, "end": 401175}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d397d7ae-5f91-4b27-b73a-d2d9a709405a", "3": "246b57df-0cc1-42af-9ab7-c79d153d870f"}}, "__type__": "1"}, "246b57df-0cc1-42af-9ab7-c79d153d870f": {"__data__": {"text": "env, napi_value* result)\n[in] env: The environment that the Node-API call is invoked under.\n[out] result: A napi_value representing a JavaScript Array.\nReturns napi_ok if the API succeeded.\n\nThis API returns a Node-API value corresponding to a JavaScript Array type. JavaScript arrays are described in Section 22.1 of the ECMAScript Language Specification.\n\nnapi_create_array_with_length#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_array_with_length(napi_env env,\n                                          size_t length,\n                                          napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] length: The initial length of the Array.\n[out] result: A napi_value representing a JavaScript Array.\nReturns napi_ok if the API succeeded.\n\nThis API returns a Node-API value corresponding to a JavaScript Array type. The Array's length property is set to the passed-in length parameter. However, the underlying buffer is not guaranteed to be pre-allocated by the VM when the array is created. That behavior is left to the underlying VM implementation. If the buffer must be a contiguous block of memory that can be directly read and/or written via C, consider using napi_create_external_arraybuffer.\n\nJavaScript arrays are described in Section 22.1 of the ECMAScript Language Specification.\n\nnapi_create_arraybuffer#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_arraybuffer(napi_env env,\n                                    size_t byte_length,\n                                    void** data,\n                                    napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] length: The length in bytes of the array buffer to create.\n[out] data: Pointer to the underlying byte buffer of the ArrayBuffer. data can optionally be ignored by passing NULL.\n[out] result: A napi_value representing a JavaScript ArrayBuffer.\nReturns napi_ok if the API succeeded.\n\nThis API returns a Node-API value corresponding to a JavaScript ArrayBuffer. ArrayBuffers are used to represent fixed-length binary data buffers. They are normally used as a backing-buffer for TypedArray objects. The ArrayBuffer allocated will have an underlying byte buffer whose size is determined by the length parameter that's passed in. The underlying buffer is optionally returned back to the caller in case the caller wants to directly manipulate the buffer. This buffer can only be written to directly from native code. To write to this buffer from JavaScript, a typed array or DataView object would need to be created.\n\nJavaScript ArrayBuffer objects are described in Section 24.1 of the ECMAScript Language Specification.\n\nnapi_create_buffer#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_buffer(napi_env env,\n                               size_t size,\n                               void** data,\n                            ", "doc_id": "246b57df-0cc1-42af-9ab7-c79d153d870f", "embedding": null, "doc_hash": "61b14bafaadfa72e75a542d25ae35b858884298cf88b0fb2a2be695fd9a7c18b", "extra_info": null, "node_info": {"start": 401243, "end": 404156}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dca15ac6-c996-459b-aa37-26e62d0ad0d6", "3": "381c5598-3e6c-46d1-8fd0-3cc7d35c4d31"}}, "__type__": "1"}, "381c5598-3e6c-46d1-8fd0-3cc7d35c4d31": {"__data__": {"text": "can only be written to directly from native code. To write to this buffer from JavaScript, a typed array or DataView object would need to be created.\n\nJavaScript ArrayBuffer objects are described in Section 24.1 of the ECMAScript Language Specification.\n\nnapi_create_buffer#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_buffer(napi_env env,\n                               size_t size,\n                               void** data,\n                               napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] size: Size in bytes of the underlying buffer.\n[out] data: Raw pointer to the underlying buffer. data can optionally be ignored by passing NULL.\n[out] result: A napi_value representing a node::Buffer.\nReturns napi_ok if the API succeeded.\n\nThis API allocates a node::Buffer object. While this is still a fully-supported data structure, in most cases using a TypedArray will suffice.\n\nnapi_create_buffer_copy#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_buffer_copy(napi_env env,\n                                    size_t length,\n                                    const void* data,\n                                    void** result_data,\n                                    napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] size: Size in bytes of the input buffer (should be the same as the size of the new buffer).\n[in] data: Raw pointer to the underlying buffer to copy from.\n[out] result_data: Pointer to the new Buffer's underlying data buffer. result_data can optionally be ignored by passing NULL.\n[out] result: A napi_value representing a node::Buffer.\nReturns napi_ok if the API succeeded.\n\nThis API allocates a node::Buffer object and initializes it with data copied from the passed-in buffer. While this is still a fully-supported data structure, in most cases using a TypedArray will suffice.\n\nnapi_create_date#\nAdded in: v11.11.0, v10.17.0 N-API version: 5\nnapi_status napi_create_date(napi_env env,\n                             double time,\n                             napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] time: ECMAScript time value in milliseconds since 01 January, 1970 UTC.\n[out] result: A napi_value representing a JavaScript Date.\nReturns napi_ok if the API succeeded.\n\nThis API does not observe leap seconds; they are ignored, as ECMAScript aligns with POSIX time specification.\n\nThis API allocates a JavaScript Date object.\n\nJavaScript Date objects are described in Section 20.3 of the ECMAScript Language Specification.\n\nnapi_create_external#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_external(napi_env env,\n   ", "doc_id": "381c5598-3e6c-46d1-8fd0-3cc7d35c4d31", "embedding": null, "doc_hash": "7f5b0b4ed7d42e0e06379aed0de69f548d99521bd1e721aec3b9ce94e34f9987", "extra_info": null, "node_info": {"start": 404249, "end": 406947}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "246b57df-0cc1-42af-9ab7-c79d153d870f", "3": "4ace4a50-bfb3-46fc-8d1a-f6e69e099ba3"}}, "__type__": "1"}, "4ace4a50-bfb3-46fc-8d1a-f6e69e099ba3": {"__data__": {"text": "           napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] time: ECMAScript time value in milliseconds since 01 January, 1970 UTC.\n[out] result: A napi_value representing a JavaScript Date.\nReturns napi_ok if the API succeeded.\n\nThis API does not observe leap seconds; they are ignored, as ECMAScript aligns with POSIX time specification.\n\nThis API allocates a JavaScript Date object.\n\nJavaScript Date objects are described in Section 20.3 of the ECMAScript Language Specification.\n\nnapi_create_external#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_external(napi_env env,\n                                 void* data,\n                                 napi_finalize finalize_cb,\n                                 void* finalize_hint,\n                                 napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] data: Raw pointer to the external data.\n[in] finalize_cb: Optional callback to call when the external value is being collected. napi_finalize provides more details.\n[in] finalize_hint: Optional hint to pass to the finalize callback during collection.\n[out] result: A napi_value representing an external value.\nReturns napi_ok if the API succeeded.\n\nThis API allocates a JavaScript value with external data attached to it. This is used to pass external data through JavaScript code, so it can be retrieved later by native code using napi_get_value_external.\n\nThe API adds a napi_finalize callback which will be called when the JavaScript object just created has been garbage collected.\n\nThe created value is not an object, and therefore does not support additional properties. It is considered a distinct value type: calling napi_typeof() with an external value yields napi_external.\n\nnapi_create_external_arraybuffer#\nAdded in: v8.0.0 N-API version: 1\nnapi_status\nnapi_create_external_arraybuffer(napi_env env,\n                                 void* external_data,\n                                 size_t byte_length,\n                                 napi_finalize finalize_cb,\n                                 void* finalize_hint,\n                                 napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] external_data: Pointer to the underlying byte buffer of the ArrayBuffer.\n[in] byte_length: The length in bytes of the underlying buffer.\n[in] finalize_cb: Optional callback to call when the ArrayBuffer is being collected. napi_finalize provides more details.\n[in] finalize_hint: Optional hint to pass to the finalize callback during collection.\n[out] result: A napi_value representing a JavaScript ArrayBuffer.\nReturns napi_ok if the API succeeded.\n\nSome runtimes other than Node.js have dropped support for external buffers. On runtimes other than", "doc_id": "4ace4a50-bfb3-46fc-8d1a-f6e69e099ba3", "embedding": null, "doc_hash": "5fdebf6ab5905631f95dac887de2ee114a2e63c7514c9db0e7bd896cbb495d47", "extra_info": null, "node_info": {"start": 406745, "end": 409535}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "381c5598-3e6c-46d1-8fd0-3cc7d35c4d31", "3": "79838027-d19e-4ae9-ab43-d3350c4ac441"}}, "__type__": "1"}, "79838027-d19e-4ae9-ab43-d3350c4ac441": {"__data__": {"text": "                        napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] external_data: Pointer to the underlying byte buffer of the ArrayBuffer.\n[in] byte_length: The length in bytes of the underlying buffer.\n[in] finalize_cb: Optional callback to call when the ArrayBuffer is being collected. napi_finalize provides more details.\n[in] finalize_hint: Optional hint to pass to the finalize callback during collection.\n[out] result: A napi_value representing a JavaScript ArrayBuffer.\nReturns napi_ok if the API succeeded.\n\nSome runtimes other than Node.js have dropped support for external buffers. On runtimes other than Node.js this method may return napi_no_external_buffers_allowed to indicate that external buffers are not supported. One such runtime is Electron as described in this issue electron/issues/35801.\n\nIn order to maintain broadest compatibility with all runtimes you may define NODE_API_NO_EXTERNAL_BUFFERS_ALLOWED in your addon before includes for the node-api headers. Doing so will hide the 2 functions that create external buffers. This will ensure a compilation error occurs if you accidentally use one of these methods.\n\nThis API returns a Node-API value corresponding to a JavaScript ArrayBuffer. The underlying byte buffer of the ArrayBuffer is externally allocated and managed. The caller must ensure that the byte buffer remains valid until the finalize callback is called.\n\nThe API adds a napi_finalize callback which will be called when the JavaScript object just created has been garbage collected.\n\nJavaScript ArrayBuffers are described in Section 24.1 of the ECMAScript Language Specification.\n\nnapi_create_external_buffer#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_external_buffer(napi_env env,\n                                        size_t length,\n                                        void* data,\n                                        napi_finalize finalize_cb,\n                                        void* finalize_hint,\n                                        napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] length: Size in bytes of the input buffer (should be the same as the size of the new buffer).\n[in] data: Raw pointer to the underlying buffer to expose to JavaScript.\n[in] finalize_cb: Optional callback to call when the ArrayBuffer is being collected. napi_finalize provides more details.\n[in] finalize_hint: Optional hint to pass to the finalize callback during collection.\n[out] result: A napi_value representing a node::Buffer.\nReturns napi_ok if the API succeeded.\n\nSome runtimes other than Node.js have dropped support for external buffers. On runtimes other than Node.js this method may return napi_no_external_buffers_allowed to indicate that external buffers are not supported. One such runtime is Electron as described in this issue electron/issues/35801.\n\nIn order to maintain broadest compatibility with all runtimes you may define NODE_API_NO_EXTERNAL_BUFFERS_ALLOWED in your addon before includes for the node-api headers. Doing so will hide the 2 functions that create external buffers. This will ensure a compilation error occurs", "doc_id": "79838027-d19e-4ae9-ab43-d3350c4ac441", "embedding": null, "doc_hash": "eee00266e72ab925d3a1accc88addaee131774516ee2fc93b87ca973017f5f24", "extra_info": null, "node_info": {"start": 409523, "end": 412702}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4ace4a50-bfb3-46fc-8d1a-f6e69e099ba3", "3": "6ce69df3-3b8b-4bdd-bbcf-4f2827e7462e"}}, "__type__": "1"}, "6ce69df3-3b8b-4bdd-bbcf-4f2827e7462e": {"__data__": {"text": "finalize_hint: Optional hint to pass to the finalize callback during collection.\n[out] result: A napi_value representing a node::Buffer.\nReturns napi_ok if the API succeeded.\n\nSome runtimes other than Node.js have dropped support for external buffers. On runtimes other than Node.js this method may return napi_no_external_buffers_allowed to indicate that external buffers are not supported. One such runtime is Electron as described in this issue electron/issues/35801.\n\nIn order to maintain broadest compatibility with all runtimes you may define NODE_API_NO_EXTERNAL_BUFFERS_ALLOWED in your addon before includes for the node-api headers. Doing so will hide the 2 functions that create external buffers. This will ensure a compilation error occurs if you accidentally use one of these methods.\n\nThis API allocates a node::Buffer object and initializes it with data backed by the passed in buffer. While this is still a fully-supported data structure, in most cases using a TypedArray will suffice.\n\nThe API adds a napi_finalize callback which will be called when the JavaScript object just created has been garbage collected.\n\nFor Node.js >=4 Buffers are Uint8Arrays.\n\nnapi_create_object#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_object(napi_env env, napi_value* result)\n[in] env: The environment that the API is invoked under.\n[out] result: A napi_value representing a JavaScript Object.\nReturns napi_ok if the API succeeded.\n\nThis API allocates a default JavaScript Object. It is the equivalent of doing new Object() in JavaScript.\n\nThe JavaScript Object type is described in Section 6.1.7 of the ECMAScript Language Specification.\n\nnapi_create_symbol#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_symbol(napi_env env,\n                               napi_value description,\n                               napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] description: Optional napi_value which refers to a JavaScript string to be set as the description for the symbol.\n[out] result: A napi_value representing a JavaScript symbol.\nReturns napi_ok if the API succeeded.\n\nThis API creates a JavaScript symbol value from a UTF8-encoded C string.\n\nThe JavaScript symbol type is described in Section 19.4 of the ECMAScript Language Specification.\n\nnode_api_symbol_for#\nAdded in: v17.5.0\nStability: 1 - Experimental\nnapi_status node_api_symbol_for(napi_env env,\n                                const char* utf8description,\n                                size_t length,\n                                napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] utf8description: UTF-8 C string representing the text to be used as the description for the symbol.\n[in] length: The length of the description string in bytes, or NAPI_AUTO_LENGTH if it is null-terminated.\n[out] result: A napi_value representing a JavaScript symbol.\nReturns napi_ok if the API succeeded.\n\nThis API searches in the global registry for an existing symbol with the given description. If the symbol already exists it will be returned, otherwise a new symbol will be created in the", "doc_id": "6ce69df3-3b8b-4bdd-bbcf-4f2827e7462e", "embedding": null, "doc_hash": "b547bf609bbc2e990fa9baa6f938c2ed52691ddea4593759b4188c269220e065", "extra_info": null, "node_info": {"start": 412601, "end": 415738}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "79838027-d19e-4ae9-ab43-d3350c4ac441", "3": "5cf208ee-b9d0-4c66-9194-b420683dac97"}}, "__type__": "1"}, "5cf208ee-b9d0-4c66-9194-b420683dac97": {"__data__": {"text": "size_t length,\n                                napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] utf8description: UTF-8 C string representing the text to be used as the description for the symbol.\n[in] length: The length of the description string in bytes, or NAPI_AUTO_LENGTH if it is null-terminated.\n[out] result: A napi_value representing a JavaScript symbol.\nReturns napi_ok if the API succeeded.\n\nThis API searches in the global registry for an existing symbol with the given description. If the symbol already exists it will be returned, otherwise a new symbol will be created in the registry.\n\nThe JavaScript symbol type is described in Section 19.4 of the ECMAScript Language Specification.\n\nnapi_create_typedarray#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_typedarray(napi_env env,\n                                   napi_typedarray_type type,\n                                   size_t length,\n                                   napi_value arraybuffer,\n                                   size_t byte_offset,\n                                   napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] type: Scalar datatype of the elements within the TypedArray.\n[in] length: Number of elements in the TypedArray.\n[in] arraybuffer: ArrayBuffer underlying the typed array.\n[in] byte_offset: The byte offset within the ArrayBuffer from which to start projecting the TypedArray.\n[out] result: A napi_value representing a JavaScript TypedArray.\nReturns napi_ok if the API succeeded.\n\nThis API creates a JavaScript TypedArray object over an existing ArrayBuffer. TypedArray objects provide an array-like view over an underlying data buffer where each element has the same underlying binary scalar datatype.\n\nIt's required that (length * size_of_element) + byte_offset should be <= the size in bytes of the array passed in. If not, a RangeError exception is raised.\n\nJavaScript TypedArray objects are described in Section 22.2 of the ECMAScript Language Specification.\n\nnapi_create_dataview#\nAdded in: v8.3.0 N-API version: 1\nnapi_status napi_create_dataview(napi_env env,\n                                 size_t byte_length,\n                                 napi_value arraybuffer,\n                                 size_t byte_offset,\n                                 napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] length: Number of elements in the DataView.\n[in] arraybuffer: ArrayBuffer underlying the DataView.\n[in] byte_offset: The byte offset within the ArrayBuffer from which to start projecting the DataView.\n[out] result: A", "doc_id": "5cf208ee-b9d0-4c66-9194-b420683dac97", "embedding": null, "doc_hash": "8d86e550ac414197b94117348fff3e29f8152f8c856bfde3748b4b6140b54faa", "extra_info": null, "node_info": {"start": 415886, "end": 418528}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6ce69df3-3b8b-4bdd-bbcf-4f2827e7462e", "3": "18d36d9e-c45a-4e8d-8ccf-21d3224cd3e8"}}, "__type__": "1"}, "18d36d9e-c45a-4e8d-8ccf-21d3224cd3e8": {"__data__": {"text": "                                napi_value arraybuffer,\n                                 size_t byte_offset,\n                                 napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] length: Number of elements in the DataView.\n[in] arraybuffer: ArrayBuffer underlying the DataView.\n[in] byte_offset: The byte offset within the ArrayBuffer from which to start projecting the DataView.\n[out] result: A napi_value representing a JavaScript DataView.\nReturns napi_ok if the API succeeded.\n\nThis API creates a JavaScript DataView object over an existing ArrayBuffer. DataView objects provide an array-like view over an underlying data buffer, but one which allows items of different size and type in the ArrayBuffer.\n\nIt is required that byte_length + byte_offset is less than or equal to the size in bytes of the array passed in. If not, a RangeError exception is raised.\n\nJavaScript DataView objects are described in Section 24.3 of the ECMAScript Language Specification.\n\nFunctions to convert from C types to Node-API#\nnapi_create_int32#\nAdded in: v8.4.0 N-API version: 1\nnapi_status napi_create_int32(napi_env env, int32_t value, napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] value: Integer value to be represented in JavaScript.\n[out] result: A napi_value representing a JavaScript number.\nReturns napi_ok if the API succeeded.\n\nThis API is used to convert from the C int32_t type to the JavaScript number type.\n\nThe JavaScript number type is described in Section 6.1.6 of the ECMAScript Language Specification.\n\nnapi_create_uint32#\nAdded in: v8.4.0 N-API version: 1\nnapi_status napi_create_uint32(napi_env env, uint32_t value, napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] value: Unsigned integer value to be represented in JavaScript.\n[out] result: A napi_value representing a JavaScript number.\nReturns napi_ok if the API succeeded.\n\nThis API is used to convert from the C uint32_t type to the JavaScript number type.\n\nThe JavaScript number type is described in Section 6.1.6 of the ECMAScript Language Specification.\n\nnapi_create_int64#\nAdded in: v8.4.0 N-API version: 1\nnapi_status napi_create_int64(napi_env env, int64_t value, napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] value: Integer value to be represented in JavaScript.\n[out] result: A napi_value representing a JavaScript number.\nReturns napi_ok if the API succeeded.\n\nThis API is used to convert from the C int64_t type to the JavaScript number type.\n\nThe JavaScript number type is described in Section 6.1.6 of the ECMAScript Language Specification. Note the complete range of int64_t cannot be represented with full precision in JavaScript. Integer values outside the range of Number.MIN_SAFE_INTEGER -(2**53 - 1) - Number.MAX_SAFE_INTEGER (2**53 - 1) will lose precision.\n\nnapi_create_double#\nAdded in: v8.4.0 N-API version: 1\nnapi_status napi_create_double(napi_env env, double value, napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] value: Double-precision value to be represented in JavaScript.\n[out] result:", "doc_id": "18d36d9e-c45a-4e8d-8ccf-21d3224cd3e8", "embedding": null, "doc_hash": "86a0c288be84cc6b9573ed58ace5e47b7e760312716a2665c7227f5005e5abac", "extra_info": null, "node_info": {"start": 418731, "end": 421893}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5cf208ee-b9d0-4c66-9194-b420683dac97", "3": "a0497a65-4054-445f-a717-d3826321b2a0"}}, "__type__": "1"}, "a0497a65-4054-445f-a717-d3826321b2a0": {"__data__": {"text": "the C int64_t type to the JavaScript number type.\n\nThe JavaScript number type is described in Section 6.1.6 of the ECMAScript Language Specification. Note the complete range of int64_t cannot be represented with full precision in JavaScript. Integer values outside the range of Number.MIN_SAFE_INTEGER -(2**53 - 1) - Number.MAX_SAFE_INTEGER (2**53 - 1) will lose precision.\n\nnapi_create_double#\nAdded in: v8.4.0 N-API version: 1\nnapi_status napi_create_double(napi_env env, double value, napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] value: Double-precision value to be represented in JavaScript.\n[out] result: A napi_value representing a JavaScript number.\nReturns napi_ok if the API succeeded.\n\nThis API is used to convert from the C double type to the JavaScript number type.\n\nThe JavaScript number type is described in Section 6.1.6 of the ECMAScript Language Specification.\n\nnapi_create_bigint_int64#\nAdded in: v10.7.0 N-API version: 6\nnapi_status napi_create_bigint_int64(napi_env env,\n                                     int64_t value,\n                                     napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] value: Integer value to be represented in JavaScript.\n[out] result: A napi_value representing a JavaScript BigInt.\nReturns napi_ok if the API succeeded.\n\nThis API converts the C int64_t type to the JavaScript BigInt type.\n\nnapi_create_bigint_uint64#\nAdded in: v10.7.0 N-API version: 6\nnapi_status napi_create_bigint_uint64(napi_env env,\n                                      uint64_t value,\n                                      napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] value: Unsigned integer value to be represented in JavaScript.\n[out] result: A napi_value representing a JavaScript BigInt.\nReturns napi_ok if the API succeeded.\n\nThis API converts the C uint64_t type to the JavaScript BigInt type.\n\nnapi_create_bigint_words#\nAdded in: v10.7.0 N-API version: 6\nnapi_status napi_create_bigint_words(napi_env env,\n                                     int sign_bit,\n                                     size_t word_count,\n                                     const uint64_t* words,\n                                     napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] sign_bit: Determines if the resulting BigInt will be positive or negative.\n[in] word_count: The length of the words array.\n[in] words: An array of uint64_t little-endian 64-bit", "doc_id": "a0497a65-4054-445f-a717-d3826321b2a0", "embedding": null, "doc_hash": "dad01470216db50650eda8db3b03e5a737edfe49b43a6fc7ba16542db94e7463", "extra_info": null, "node_info": {"start": 421632, "end": 424152}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "18d36d9e-c45a-4e8d-8ccf-21d3224cd3e8", "3": "32703e6f-7352-4a76-96a3-fbc461766203"}}, "__type__": "1"}, "32703e6f-7352-4a76-96a3-fbc461766203": {"__data__": {"text": "                              size_t word_count,\n                                     const uint64_t* words,\n                                     napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] sign_bit: Determines if the resulting BigInt will be positive or negative.\n[in] word_count: The length of the words array.\n[in] words: An array of uint64_t little-endian 64-bit words.\n[out] result: A napi_value representing a JavaScript BigInt.\nReturns napi_ok if the API succeeded.\n\nThis API converts an array of unsigned 64-bit words into a single BigInt value.\n\nThe resulting BigInt is calculated as: (\u20131)sign_bit (words[0] \u00d7 (264)0 + words[1] \u00d7 (264)1 + \u2026)\n\nnapi_create_string_latin1#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_string_latin1(napi_env env,\n                                      const char* str,\n                                      size_t length,\n                                      napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] str: Character buffer representing an ISO-8859-1-encoded string.\n[in] length: The length of the string in bytes, or NAPI_AUTO_LENGTH if it is null-terminated.\n[out] result: A napi_value representing a JavaScript string.\nReturns napi_ok if the API succeeded.\n\nThis API creates a JavaScript string value from an ISO-8859-1-encoded C string. The native string is copied.\n\nThe JavaScript string type is described in Section 6.1.4 of the ECMAScript Language Specification.\n\nnapi_create_string_utf16#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_string_utf16(napi_env env,\n                                     const char16_t* str,\n                                     size_t length,\n                                     napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] str: Character buffer representing a UTF16-LE-encoded string.\n[in] length: The length of the string in two-byte code units, or NAPI_AUTO_LENGTH if it is null-terminated.\n[out] result: A napi_value representing a JavaScript string.\nReturns napi_ok if the API succeeded.\n\nThis API creates a JavaScript string value from a UTF16-LE-encoded C string. The native string is copied.\n\nThe JavaScript string type is described in Section 6.1.4 of the ECMAScript Language Specification.\n\nnapi_create_string_utf8#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_string_utf8(napi_env", "doc_id": "32703e6f-7352-4a76-96a3-fbc461766203", "embedding": null, "doc_hash": "8cdcf0e304d80d0067191c64c918d9845defe20386d914d60e174ef2b227b71c", "extra_info": null, "node_info": {"start": 424454, "end": 426876}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a0497a65-4054-445f-a717-d3826321b2a0", "3": "894dd371-827b-4335-9a65-1b9f9fb97a5a"}}, "__type__": "1"}, "894dd371-827b-4335-9a65-1b9f9fb97a5a": {"__data__": {"text": "The environment that the API is invoked under.\n[in] str: Character buffer representing a UTF16-LE-encoded string.\n[in] length: The length of the string in two-byte code units, or NAPI_AUTO_LENGTH if it is null-terminated.\n[out] result: A napi_value representing a JavaScript string.\nReturns napi_ok if the API succeeded.\n\nThis API creates a JavaScript string value from a UTF16-LE-encoded C string. The native string is copied.\n\nThe JavaScript string type is described in Section 6.1.4 of the ECMAScript Language Specification.\n\nnapi_create_string_utf8#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_string_utf8(napi_env env,\n                                    const char* str,\n                                    size_t length,\n                                    napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] str: Character buffer representing a UTF8-encoded string.\n[in] length: The length of the string in bytes, or NAPI_AUTO_LENGTH if it is null-terminated.\n[out] result: A napi_value representing a JavaScript string.\nReturns napi_ok if the API succeeded.\n\nThis API creates a JavaScript string value from a UTF8-encoded C string. The native string is copied.\n\nThe JavaScript string type is described in Section 6.1.4 of the ECMAScript Language Specification.\n\nFunctions to convert from Node-API to C types#\nnapi_get_array_length#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_array_length(napi_env env,\n                                  napi_value value,\n                                  uint32_t* result)\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing the JavaScript Array whose length is being queried.\n[out] result: uint32 representing length of the array.\nReturns napi_ok if the API succeeded.\n\nThis API returns the length of an array.\n\nArray length is described in Section 22.1.4.1 of the ECMAScript Language Specification.\n\nnapi_get_arraybuffer_info#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_arraybuffer_info(napi_env env,\n                                      napi_value arraybuffer,\n                                      void** data,\n                                      size_t* byte_length)\n[in] env: The environment that the API is invoked under.\n[in] arraybuffer: napi_value representing the ArrayBuffer being queried.\n[out] data: The underlying data buffer of the ArrayBuffer. If byte_length is 0, this may be NULL or any other pointer value.\n[out] byte_length: Length in bytes of the underlying data buffer.\nReturns napi_ok if the API succeeded.\n\nThis API is used to retrieve the underlying data buffer of an ArrayBuffer and", "doc_id": "894dd371-827b-4335-9a65-1b9f9fb97a5a", "embedding": null, "doc_hash": "e44a3e5488fbf6b9df1bbccd47075b3097f14f944a7995c89a377f09f977e7a5", "extra_info": null, "node_info": {"start": 426585, "end": 429248}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "32703e6f-7352-4a76-96a3-fbc461766203", "3": "f52717ee-a5d7-4fd4-b64a-e5b003c63536"}}, "__type__": "1"}, "f52717ee-a5d7-4fd4-b64a-e5b003c63536": {"__data__": {"text": "                              void** data,\n                                      size_t* byte_length)\n[in] env: The environment that the API is invoked under.\n[in] arraybuffer: napi_value representing the ArrayBuffer being queried.\n[out] data: The underlying data buffer of the ArrayBuffer. If byte_length is 0, this may be NULL or any other pointer value.\n[out] byte_length: Length in bytes of the underlying data buffer.\nReturns napi_ok if the API succeeded.\n\nThis API is used to retrieve the underlying data buffer of an ArrayBuffer and its length.\n\nWARNING: Use caution while using this API. The lifetime of the underlying data buffer is managed by the ArrayBuffer even after it's returned. A possible safe way to use this API is in conjunction with napi_create_reference, which can be used to guarantee control over the lifetime of the ArrayBuffer. It's also safe to use the returned data buffer within the same callback as long as there are no calls to other APIs that might trigger a GC.\n\nnapi_get_buffer_info#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_buffer_info(napi_env env,\n                                 napi_value value,\n                                 void** data,\n                                 size_t* length)\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing the node::Buffer being queried.\n[out] data: The underlying data buffer of the node::Buffer. If length is 0, this may be NULL or any other pointer value.\n[out] length: Length in bytes of the underlying data buffer.\nReturns napi_ok if the API succeeded.\n\nThis API is used to retrieve the underlying data buffer of a node::Buffer and its length.\n\nWarning: Use caution while using this API since the underlying data buffer's lifetime is not guaranteed if it's managed by the VM.\n\nnapi_get_prototype#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_prototype(napi_env env,\n                               napi_value object,\n                               napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] object: napi_value representing JavaScript Object whose prototype to return. This returns the equivalent of Object.getPrototypeOf (which is not the same as the function's prototype property).\n[out] result: napi_value representing prototype of the given object.\nReturns napi_ok if the API succeeded.\n\nnapi_get_typedarray_info#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_typedarray_info(napi_env env,\n                                     napi_value typedarray,\n                                     napi_typedarray_type* type,\n                                     size_t*", "doc_id": "f52717ee-a5d7-4fd4-b64a-e5b003c63536", "embedding": null, "doc_hash": "0e820c90e97163d125e511bfc5f2fe261e003ecc5ea7155b4510a72690bedeaf", "extra_info": null, "node_info": {"start": 429399, "end": 432055}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "894dd371-827b-4335-9a65-1b9f9fb97a5a", "3": "10d47b2d-f056-4124-af79-fb7f74471b19"}}, "__type__": "1"}, "10d47b2d-f056-4124-af79-fb7f74471b19": {"__data__": {"text": "napi_ok if the API succeeded.\n\nnapi_get_typedarray_info#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_typedarray_info(napi_env env,\n                                     napi_value typedarray,\n                                     napi_typedarray_type* type,\n                                     size_t* length,\n                                     void** data,\n                                     napi_value* arraybuffer,\n                                     size_t* byte_offset)\n[in] env: The environment that the API is invoked under.\n[in] typedarray: napi_value representing the TypedArray whose properties to query.\n[out] type: Scalar datatype of the elements within the TypedArray.\n[out] length: The number of elements in the TypedArray.\n[out] data: The data buffer underlying the TypedArray adjusted by the byte_offset value so that it points to the first element in the TypedArray. If the length of the array is 0, this may be NULL or any other pointer value.\n[out] arraybuffer: The ArrayBuffer underlying the TypedArray.\n[out] byte_offset: The byte offset within the underlying native array at which the first element of the arrays is located. The value for the data parameter has already been adjusted so that data points to the first element in the array. Therefore, the first byte of the native array would be at data - byte_offset.\nReturns napi_ok if the API succeeded.\n\nThis API returns various properties of a typed array.\n\nAny of the out parameters may be NULL if that property is unneeded.\n\nWarning: Use caution while using this API since the underlying data buffer is managed by the VM.\n\nnapi_get_dataview_info#\nAdded in: v8.3.0 N-API version: 1\nnapi_status napi_get_dataview_info(napi_env env,\n                                   napi_value dataview,\n                                   size_t* byte_length,\n                                   void** data,\n                                   napi_value* arraybuffer,\n                                   size_t* byte_offset)\n[in] env: The environment that the API is invoked under.\n[in] dataview: napi_value representing the DataView whose properties to query.\n[out] byte_length: Number of bytes in the DataView.\n[out] data: The data buffer underlying the DataView. If byte_length is 0, this may be NULL or any other pointer value.\n[out] arraybuffer: ArrayBuffer underlying the DataView.\n[out] byte_offset: The byte offset within the data buffer from which to start projecting the DataView.\nReturns napi_ok if the API", "doc_id": "10d47b2d-f056-4124-af79-fb7f74471b19", "embedding": null, "doc_hash": "d47911411862192dca1b7fca7383bc6f56e827485039dfbe85767c9f1e2b84ff", "extra_info": null, "node_info": {"start": 432274, "end": 434764}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f52717ee-a5d7-4fd4-b64a-e5b003c63536", "3": "d9794bbe-bd9f-4017-9aac-084bafa777c7"}}, "__type__": "1"}, "d9794bbe-bd9f-4017-9aac-084bafa777c7": {"__data__": {"text": "              napi_value* arraybuffer,\n                                   size_t* byte_offset)\n[in] env: The environment that the API is invoked under.\n[in] dataview: napi_value representing the DataView whose properties to query.\n[out] byte_length: Number of bytes in the DataView.\n[out] data: The data buffer underlying the DataView. If byte_length is 0, this may be NULL or any other pointer value.\n[out] arraybuffer: ArrayBuffer underlying the DataView.\n[out] byte_offset: The byte offset within the data buffer from which to start projecting the DataView.\nReturns napi_ok if the API succeeded.\n\nAny of the out parameters may be NULL if that property is unneeded.\n\nThis API returns various properties of a DataView.\n\nnapi_get_date_value#\nAdded in: v11.11.0, v10.17.0 N-API version: 5\nnapi_status napi_get_date_value(napi_env env,\n                                napi_value value,\n                                double* result)\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing a JavaScript Date.\n[out] result: Time value as a double represented as milliseconds since midnight at the beginning of 01 January, 1970 UTC.\nThis API does not observe leap seconds; they are ignored, as ECMAScript aligns with POSIX time specification.\n\nReturns napi_ok if the API succeeded. If a non-date napi_value is passed in it returns napi_date_expected.\n\nThis API returns the C double primitive of time value for the given JavaScript Date.\n\nnapi_get_value_bool#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_value_bool(napi_env env, napi_value value, bool* result)\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing JavaScript Boolean.\n[out] result: C boolean primitive equivalent of the given JavaScript Boolean.\nReturns napi_ok if the API succeeded. If a non-boolean napi_value is passed in it returns napi_boolean_expected.\n\nThis API returns the C boolean primitive equivalent of the given JavaScript Boolean.\n\nnapi_get_value_double#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_value_double(napi_env env,\n                                  napi_value value,\n                                  double* result)\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing JavaScript number.\n[out] result: C double primitive equivalent of the given JavaScript number.\nReturns napi_ok if the API succeeded. If a non-number napi_value is passed in it returns napi_number_expected.\n\nThis API returns the C double primitive equivalent of the given JavaScript number.\n\nnapi_get_value_bigint_int64#\nAdded in: v10.7.0 N-API version: 6\nnapi_status napi_get_value_bigint_int64(napi_env env,\n                                        napi_value value,\n", "doc_id": "d9794bbe-bd9f-4017-9aac-084bafa777c7", "embedding": null, "doc_hash": "c668f673591d847c8271a97f06ea335a6b590b8336d7802a3db0c731619c78f8", "extra_info": null, "node_info": {"start": 434485, "end": 437247}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "10d47b2d-f056-4124-af79-fb7f74471b19", "3": "192556e5-c307-424c-aec6-71bee4f86664"}}, "__type__": "1"}, "192556e5-c307-424c-aec6-71bee4f86664": {"__data__": {"text": "API is invoked under.\n[in] value: napi_value representing JavaScript number.\n[out] result: C double primitive equivalent of the given JavaScript number.\nReturns napi_ok if the API succeeded. If a non-number napi_value is passed in it returns napi_number_expected.\n\nThis API returns the C double primitive equivalent of the given JavaScript number.\n\nnapi_get_value_bigint_int64#\nAdded in: v10.7.0 N-API version: 6\nnapi_status napi_get_value_bigint_int64(napi_env env,\n                                        napi_value value,\n                                        int64_t* result,\n                                        bool* lossless);\n[in] env: The environment that the API is invoked under\n[in] value: napi_value representing JavaScript BigInt.\n[out] result: C int64_t primitive equivalent of the given JavaScript BigInt.\n[out] lossless: Indicates whether the BigInt value was converted losslessly.\nReturns napi_ok if the API succeeded. If a non-BigInt is passed in it returns napi_bigint_expected.\n\nThis API returns the C int64_t primitive equivalent of the given JavaScript BigInt. If needed it will truncate the value, setting lossless to false.\n\nnapi_get_value_bigint_uint64#\nAdded in: v10.7.0 N-API version: 6\nnapi_status napi_get_value_bigint_uint64(napi_env env,\n                                        napi_value value,\n                                        uint64_t* result,\n                                        bool* lossless);\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing JavaScript BigInt.\n[out] result: C uint64_t primitive equivalent of the given JavaScript BigInt.\n[out] lossless: Indicates whether the BigInt value was converted losslessly.\nReturns napi_ok if the API succeeded. If a non-BigInt is passed in it returns napi_bigint_expected.\n\nThis API returns the C uint64_t primitive equivalent of the given JavaScript BigInt. If needed it will truncate the value, setting lossless to false.\n\nnapi_get_value_bigint_words#\nAdded in: v10.7.0 N-API version: 6\nnapi_status napi_get_value_bigint_words(napi_env env,\n                                        napi_value value,\n                                        int* sign_bit,\n                                        size_t* word_count,\n                                        uint64_t*", "doc_id": "192556e5-c307-424c-aec6-71bee4f86664", "embedding": null, "doc_hash": "834628ad4a37206e0dd7e0cdc39c96410e7ad182524be39a45a26e9ee8b1ca3b", "extra_info": null, "node_info": {"start": 437283, "end": 439590}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d9794bbe-bd9f-4017-9aac-084bafa777c7", "3": "ab462cd1-ebcd-44a2-9f65-7a3d61b099e8"}}, "__type__": "1"}, "ab462cd1-ebcd-44a2-9f65-7a3d61b099e8": {"__data__": {"text": "env,\n                                        napi_value value,\n                                        int* sign_bit,\n                                        size_t* word_count,\n                                        uint64_t* words);\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing JavaScript BigInt.\n[out] sign_bit: Integer representing if the JavaScript BigInt is positive or negative.\n[in/out] word_count: Must be initialized to the length of the words array. Upon return, it will be set to the actual number of words that would be needed to store this BigInt.\n[out] words: Pointer to a pre-allocated 64-bit word array.\nReturns napi_ok if the API succeeded.\n\nThis API converts a single BigInt value into a sign bit, 64-bit little-endian array, and the number of elements in the array. sign_bit and words may be both set to NULL, in order to get only word_count.\n\nnapi_get_value_external#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_value_external(napi_env env,\n                                    napi_value value,\n                                    void** result)\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing JavaScript external value.\n[out] result: Pointer to the data wrapped by the JavaScript external value.\nReturns napi_ok if the API succeeded. If a non-external napi_value is passed in it returns napi_invalid_arg.\n\nThis API retrieves the external data pointer that was previously passed to napi_create_external().\n\nnapi_get_value_int32#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_value_int32(napi_env env,\n                                 napi_value value,\n                                 int32_t* result)\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing JavaScript number.\n[out] result: C int32 primitive equivalent of the given JavaScript number.\nReturns napi_ok if the API succeeded. If a non-number napi_value is passed in napi_number_expected.\n\nThis API returns the C int32 primitive equivalent of the given JavaScript number.\n\nIf the number exceeds the range of the 32 bit integer, then the result is truncated to the equivalent of the bottom 32 bits. This can result in a large positive number becoming a negative number if the value is > 231 - 1.\n\nNon-finite number values (NaN, +Infinity, or -Infinity) set the result to zero.\n\nnapi_get_value_int64#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_value_int64(napi_env env,\n                                ", "doc_id": "ab462cd1-ebcd-44a2-9f65-7a3d61b099e8", "embedding": null, "doc_hash": "a0df63c7438046f045618faa13cd0fe6294a895686591dcec80cfdbb6d921e26", "extra_info": null, "node_info": {"start": 439959, "end": 442506}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "192556e5-c307-424c-aec6-71bee4f86664", "3": "a5918e34-0acd-4314-8e8a-c474f9f5d8c5"}}, "__type__": "1"}, "a5918e34-0acd-4314-8e8a-c474f9f5d8c5": {"__data__": {"text": "napi_value is passed in napi_number_expected.\n\nThis API returns the C int32 primitive equivalent of the given JavaScript number.\n\nIf the number exceeds the range of the 32 bit integer, then the result is truncated to the equivalent of the bottom 32 bits. This can result in a large positive number becoming a negative number if the value is > 231 - 1.\n\nNon-finite number values (NaN, +Infinity, or -Infinity) set the result to zero.\n\nnapi_get_value_int64#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_value_int64(napi_env env,\n                                 napi_value value,\n                                 int64_t* result)\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing JavaScript number.\n[out] result: C int64 primitive equivalent of the given JavaScript number.\nReturns napi_ok if the API succeeded. If a non-number napi_value is passed in it returns napi_number_expected.\n\nThis API returns the C int64 primitive equivalent of the given JavaScript number.\n\nnumber values outside the range of Number.MIN_SAFE_INTEGER -(2**53 - 1) - Number.MAX_SAFE_INTEGER (2**53 - 1) will lose precision.\n\nNon-finite number values (NaN, +Infinity, or -Infinity) set the result to zero.\n\nnapi_get_value_string_latin1#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_value_string_latin1(napi_env env,\n                                         napi_value value,\n                                         char* buf,\n                                         size_t bufsize,\n                                         size_t* result)\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing JavaScript string.\n[in] buf: Buffer to write the ISO-8859-1-encoded string into. If NULL is passed in, the length of the string in bytes and excluding the null terminator is returned in result.\n[in] bufsize: Size of the destination buffer. When this value is insufficient, the returned string is truncated and null-terminated.\n[out] result: Number of bytes copied into the buffer, excluding the null terminator.\nReturns napi_ok if the API succeeded. If a non-string napi_value is passed in it returns napi_string_expected.\n\nThis API returns the ISO-8859-1-encoded string corresponding the value passed in.\n\nnapi_get_value_string_utf8#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_value_string_utf8(napi_env env,\n                                       napi_value value,\n                                       char* buf,\n          ", "doc_id": "a5918e34-0acd-4314-8e8a-c474f9f5d8c5", "embedding": null, "doc_hash": "22a253940b2e83602860a420760e299992d77e3ac5239bf6fee3132804075412", "extra_info": null, "node_info": {"start": 442111, "end": 444620}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ab462cd1-ebcd-44a2-9f65-7a3d61b099e8", "3": "5550f28c-9352-413d-b9ee-fa75a7f16b11"}}, "__type__": "1"}, "5550f28c-9352-413d-b9ee-fa75a7f16b11": {"__data__": {"text": "a non-string napi_value is passed in it returns napi_string_expected.\n\nThis API returns the ISO-8859-1-encoded string corresponding the value passed in.\n\nnapi_get_value_string_utf8#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_value_string_utf8(napi_env env,\n                                       napi_value value,\n                                       char* buf,\n                                       size_t bufsize,\n                                       size_t* result)\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing JavaScript string.\n[in] buf: Buffer to write the UTF8-encoded string into. If NULL is passed in, the length of the string in bytes and excluding the null terminator is returned in result.\n[in] bufsize: Size of the destination buffer. When this value is insufficient, the returned string is truncated and null-terminated.\n[out] result: Number of bytes copied into the buffer, excluding the null terminator.\nReturns napi_ok if the API succeeded. If a non-string napi_value is passed in it returns napi_string_expected.\n\nThis API returns the UTF8-encoded string corresponding the value passed in.\n\nnapi_get_value_string_utf16#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_value_string_utf16(napi_env env,\n                                        napi_value value,\n                                        char16_t* buf,\n                                        size_t bufsize,\n                                        size_t* result)\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing JavaScript string.\n[in] buf: Buffer to write the UTF16-LE-encoded string into. If NULL is passed in, the length of the string in 2-byte code units and excluding the null terminator is returned.\n[in] bufsize: Size of the destination buffer. When this value is insufficient, the returned string is truncated and null-terminated.\n[out] result: Number of 2-byte code units copied into the buffer, excluding the null terminator.\nReturns napi_ok if the API succeeded. If a non-string napi_value is passed in it returns napi_string_expected.\n\nThis API returns the UTF16-encoded string corresponding the value passed in.\n\nnapi_get_value_uint32#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_value_uint32(napi_env env,\n                                  napi_value value,\n                           ", "doc_id": "5550f28c-9352-413d-b9ee-fa75a7f16b11", "embedding": null, "doc_hash": "8cbc63c92da146e49c4debf9bb01c80b6701be75f6889d471f184819efb56220", "extra_info": null, "node_info": {"start": 444810, "end": 447217}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a5918e34-0acd-4314-8e8a-c474f9f5d8c5", "3": "1eb13f4d-e5f3-4367-9c83-64a3075895bd"}}, "__type__": "1"}, "1eb13f4d-e5f3-4367-9c83-64a3075895bd": {"__data__": {"text": "result: Number of 2-byte code units copied into the buffer, excluding the null terminator.\nReturns napi_ok if the API succeeded. If a non-string napi_value is passed in it returns napi_string_expected.\n\nThis API returns the UTF16-encoded string corresponding the value passed in.\n\nnapi_get_value_uint32#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_value_uint32(napi_env env,\n                                  napi_value value,\n                                  uint32_t* result)\n[in] env: The environment that the API is invoked under.\n[in] value: napi_value representing JavaScript number.\n[out] result: C primitive equivalent of the given napi_value as a uint32_t.\nReturns napi_ok if the API succeeded. If a non-number napi_value is passed in it returns napi_number_expected.\n\nThis API returns the C primitive equivalent of the given napi_value as a uint32_t.\n\nFunctions to get global instances#\nnapi_get_boolean#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_boolean(napi_env env, bool value, napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The value of the boolean to retrieve.\n[out] result: napi_value representing JavaScript Boolean singleton to retrieve.\nReturns napi_ok if the API succeeded.\n\nThis API is used to return the JavaScript singleton object that is used to represent the given boolean value.\n\nnapi_get_global#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_global(napi_env env, napi_value* result)\n[in] env: The environment that the API is invoked under.\n[out] result: napi_value representing JavaScript global object.\nReturns napi_ok if the API succeeded.\n\nThis API returns the global object.\n\nnapi_get_null#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_null(napi_env env, napi_value* result)\n[in] env: The environment that the API is invoked under.\n[out] result: napi_value representing JavaScript null object.\nReturns napi_ok if the API succeeded.\n\nThis API returns the null object.\n\nnapi_get_undefined#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_undefined(napi_env env, napi_value* result)\n[in] env: The environment that the API is invoked under.\n[out] result: napi_value representing JavaScript Undefined value.\nReturns napi_ok if the API succeeded.\n\nThis API returns the Undefined object.\n\nWorking with JavaScript values and abstract operations#\nNode-API exposes a set of APIs to perform some abstract operations on JavaScript values. Some of these operations are documented under Section 7 of the ECMAScript Language Specification.\n\nThese APIs support doing one of the following:\n\nCoerce JavaScript values to specific JavaScript types (such as number or string).\nCheck the type of a JavaScript value.\nCheck for equality between two JavaScript values.\nnapi_coerce_to_bool#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_coerce_to_bool(napi_env env,\n                                napi_value value,\n              ", "doc_id": "1eb13f4d-e5f3-4367-9c83-64a3075895bd", "embedding": null, "doc_hash": "e30adc503a0e5846569c01e6011a03d458b6b31ea837bffc68b308fa629ad700", "extra_info": null, "node_info": {"start": 447131, "end": 450064}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5550f28c-9352-413d-b9ee-fa75a7f16b11", "3": "cedaea93-e423-4dc2-a69b-ac732b94caf5"}}, "__type__": "1"}, "cedaea93-e423-4dc2-a69b-ac732b94caf5": {"__data__": {"text": "exposes a set of APIs to perform some abstract operations on JavaScript values. Some of these operations are documented under Section 7 of the ECMAScript Language Specification.\n\nThese APIs support doing one of the following:\n\nCoerce JavaScript values to specific JavaScript types (such as number or string).\nCheck the type of a JavaScript value.\nCheck for equality between two JavaScript values.\nnapi_coerce_to_bool#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_coerce_to_bool(napi_env env,\n                                napi_value value,\n                                napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The JavaScript value to coerce.\n[out] result: napi_value representing the coerced JavaScript Boolean.\nReturns napi_ok if the API succeeded.\n\nThis API implements the abstract operation ToBoolean() as defined in Section 7.1.2 of the ECMAScript Language Specification.\n\nnapi_coerce_to_number#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_coerce_to_number(napi_env env,\n                                  napi_value value,\n                                  napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The JavaScript value to coerce.\n[out] result: napi_value representing the coerced JavaScript number.\nReturns napi_ok if the API succeeded.\n\nThis API implements the abstract operation ToNumber() as defined in Section 7.1.3 of the ECMAScript Language Specification. This function potentially runs JS code if the passed-in value is an object.\n\nnapi_coerce_to_object#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_coerce_to_object(napi_env env,\n                                  napi_value value,\n                                  napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The JavaScript value to coerce.\n[out] result: napi_value representing the coerced JavaScript Object.\nReturns napi_ok if the API succeeded.\n\nThis API implements the abstract operation ToObject() as defined in Section 7.1.13 of the ECMAScript Language Specification.\n\nnapi_coerce_to_string#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_coerce_to_string(napi_env env,\n                                  napi_value value,\n                                  napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The JavaScript value to coerce.\n[out] result: napi_value representing the coerced JavaScript string.\nReturns napi_ok if the API succeeded.\n\nThis API implements the abstract operation ToString() as defined in Section 7.1.13 of the ECMAScript Language Specification. This", "doc_id": "cedaea93-e423-4dc2-a69b-ac732b94caf5", "embedding": null, "doc_hash": "c2892cdc3cd62624de715714172a6e84d6dd1fa4933b9c193c96c9321e691ea7", "extra_info": null, "node_info": {"start": 449971, "end": 452623}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1eb13f4d-e5f3-4367-9c83-64a3075895bd", "3": "88d16533-8403-46a2-aa11-c3a373aeb2af"}}, "__type__": "1"}, "88d16533-8403-46a2-aa11-c3a373aeb2af": {"__data__": {"text": "napi_coerce_to_string(napi_env env,\n                                  napi_value value,\n                                  napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The JavaScript value to coerce.\n[out] result: napi_value representing the coerced JavaScript string.\nReturns napi_ok if the API succeeded.\n\nThis API implements the abstract operation ToString() as defined in Section 7.1.13 of the ECMAScript Language Specification. This function potentially runs JS code if the passed-in value is an object.\n\nnapi_typeof#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_typeof(napi_env env, napi_value value, napi_valuetype* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The JavaScript value whose type to query.\n[out] result: The type of the JavaScript value.\nReturns napi_ok if the API succeeded.\n\nnapi_invalid_arg if the type of value is not a known ECMAScript type and value is not an External value.\nThis API represents behavior similar to invoking the typeof Operator on the object as defined in Section 12.5.5 of the ECMAScript Language Specification. However, there are some differences:\n\nIt has support for detecting an External value.\nIt detects null as a separate type, while ECMAScript typeof would detect object.\nIf value has a type that is invalid, an error is returned.\n\nnapi_instanceof#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_instanceof(napi_env env,\n                            napi_value object,\n                            napi_value constructor,\n                            bool* result)\n[in] env: The environment that the API is invoked under.\n[in] object: The JavaScript value to check.\n[in] constructor: The JavaScript function object of the constructor function to check against.\n[out] result: Boolean that is set to true if object instanceof constructor is true.\nReturns napi_ok if the API succeeded.\n\nThis API represents invoking the instanceof Operator on the object as defined in Section 12.10.4 of the ECMAScript Language Specification.\n\nnapi_is_array#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_is_array(napi_env env, napi_value value, bool* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The JavaScript value to check.\n[out] result: Whether the given object is an array.\nReturns napi_ok if the API succeeded.\n\nThis API represents invoking the IsArray operation on the object as defined in Section 7.2.2 of the ECMAScript Language Specification.\n\nnapi_is_arraybuffer#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_is_arraybuffer(napi_env env, napi_value value, bool* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The JavaScript value to check.\n[out] result: Whether the given object is an ArrayBuffer.\nReturns napi_ok if the API succeeded.\n\nThis API checks if the Object passed in is an array buffer.\n\nnapi_is_buffer#\nAdded in: v8.0.0 N-API version: 1\nnapi_status", "doc_id": "88d16533-8403-46a2-aa11-c3a373aeb2af", "embedding": null, "doc_hash": "ed1f441d04d137be3328f1ad5cf0a3e5afea3b4a8fc2a29b3cb2d9a2eed57c46", "extra_info": null, "node_info": {"start": 452711, "end": 455668}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cedaea93-e423-4dc2-a69b-ac732b94caf5", "3": "ad14e17e-bc7d-45e3-9225-e53f5948aa54"}}, "__type__": "1"}, "ad14e17e-bc7d-45e3-9225-e53f5948aa54": {"__data__": {"text": "if the API succeeded.\n\nThis API represents invoking the IsArray operation on the object as defined in Section 7.2.2 of the ECMAScript Language Specification.\n\nnapi_is_arraybuffer#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_is_arraybuffer(napi_env env, napi_value value, bool* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The JavaScript value to check.\n[out] result: Whether the given object is an ArrayBuffer.\nReturns napi_ok if the API succeeded.\n\nThis API checks if the Object passed in is an array buffer.\n\nnapi_is_buffer#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_is_buffer(napi_env env, napi_value value, bool* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The JavaScript value to check.\n[out] result: Whether the given napi_value represents a node::Buffer object.\nReturns napi_ok if the API succeeded.\n\nThis API checks if the Object passed in is a buffer.\n\nnapi_is_date#\nAdded in: v11.11.0, v10.17.0 N-API version: 5\nnapi_status napi_is_date(napi_env env, napi_value value, bool* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The JavaScript value to check.\n[out] result: Whether the given napi_value represents a JavaScript Date object.\nReturns napi_ok if the API succeeded.\n\nThis API checks if the Object passed in is a date.\n\nnapi_is_error#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_is_error(napi_env env, napi_value value, bool* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The JavaScript value to check.\n[out] result: Whether the given napi_value represents an Error object.\nReturns napi_ok if the API succeeded.\n\nThis API checks if the Object passed in is an Error.\n\nnapi_is_typedarray#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_is_typedarray(napi_env env, napi_value value, bool* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The JavaScript value to check.\n[out] result: Whether the given napi_value represents a TypedArray.\nReturns napi_ok if the API succeeded.\n\nThis API checks if the Object passed in is a typed array.\n\nnapi_is_dataview#\nAdded in: v8.3.0 N-API version: 1\nnapi_status napi_is_dataview(napi_env env, napi_value value, bool* result)\n[in] env: The environment that the API is invoked under.\n[in] value: The JavaScript value to check.\n[out] result: Whether the given napi_value represents a DataView.\nReturns napi_ok if the API succeeded.\n\nThis API checks if the Object passed in is a DataView.\n\nnapi_strict_equals#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_strict_equals(napi_env env,\n                               napi_value lhs,\n                               napi_value rhs,\n                               bool* result)\n[in] env: The environment that the API is invoked under.\n[in] lhs:", "doc_id": "ad14e17e-bc7d-45e3-9225-e53f5948aa54", "embedding": null, "doc_hash": "134c7233fb13e3cc94a42004b28d61a07c52f0441bb348fd0ade6a14b900888d", "extra_info": null, "node_info": {"start": 455500, "end": 458319}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "88d16533-8403-46a2-aa11-c3a373aeb2af", "3": "b23b6475-1c5e-4e18-b221-2b65b8c4f0b9"}}, "__type__": "1"}, "b23b6475-1c5e-4e18-b221-2b65b8c4f0b9": {"__data__": {"text": "API checks if the Object passed in is a DataView.\n\nnapi_strict_equals#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_strict_equals(napi_env env,\n                               napi_value lhs,\n                               napi_value rhs,\n                               bool* result)\n[in] env: The environment that the API is invoked under.\n[in] lhs: The JavaScript value to check.\n[in] rhs: The JavaScript value to check against.\n[out] result: Whether the two napi_value objects are equal.\nReturns napi_ok if the API succeeded.\n\nThis API represents the invocation of the Strict Equality algorithm as defined in Section 7.2.14 of the ECMAScript Language Specification.\n\nnapi_detach_arraybuffer#\nAdded in: v13.0.0, v12.16.0, v10.22.0 N-API version: 7\nnapi_status napi_detach_arraybuffer(napi_env env,\n                                    napi_value arraybuffer)\n[in] env: The environment that the API is invoked under.\n[in] arraybuffer: The JavaScript ArrayBuffer to be detached.\nReturns napi_ok if the API succeeded. If a non-detachable ArrayBuffer is passed in it returns napi_detachable_arraybuffer_expected.\n\nGenerally, an ArrayBuffer is non-detachable if it has been detached before. The engine may impose additional conditions on whether an ArrayBuffer is detachable. For example, V8 requires that the ArrayBuffer be external, that is, created with napi_create_external_arraybuffer.\n\nThis API represents the invocation of the ArrayBuffer detach operation as defined in Section 24.1.1.3 of the ECMAScript Language Specification.\n\nnapi_is_detached_arraybuffer#\nAdded in: v13.3.0, v12.16.0, v10.22.0 N-API version: 7\nnapi_status napi_is_detached_arraybuffer(napi_env env,\n                                         napi_value arraybuffer,\n                                         bool* result)\n[in] env: The environment that the API is invoked under.\n[in] arraybuffer: The JavaScript ArrayBuffer to be checked.\n[out] result: Whether the arraybuffer is detached.\nReturns napi_ok if the API succeeded.\n\nThe ArrayBuffer is considered detached if its internal data is null.\n\nThis API represents the invocation of the ArrayBuffer IsDetachedBuffer operation as defined in Section 24.1.1.2 of the ECMAScript Language Specification.\n\nWorking with JavaScript properties#\nNode-API exposes a set of APIs to get and set properties on JavaScript objects. Some of these types are documented under Section 7 of the ECMAScript Language Specification.\n\nProperties in JavaScript are represented as a tuple of a key and a value. Fundamentally, all property keys in Node-API can be represented in one of the following forms:\n\nNamed: a simple UTF8-encoded string\nInteger-Indexed: an index value represented by uint32_t\nJavaScript value: these are represented in Node-API by napi_value. This can be a napi_value representing a string, number, or symbol.\nNode-API values are represented by the type napi_value. Any Node-API call that requires a JavaScript value takes in a napi_value.", "doc_id": "b23b6475-1c5e-4e18-b221-2b65b8c4f0b9", "embedding": null, "doc_hash": "94813382a8c971af1798f3252f6e1eae8157883a9159e088d6db71605946b4a0", "extra_info": null, "node_info": {"start": 458621, "end": 461586}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ad14e17e-bc7d-45e3-9225-e53f5948aa54", "3": "a0d42d94-5af1-4d18-9398-ed08eb3da342"}}, "__type__": "1"}, "a0d42d94-5af1-4d18-9398-ed08eb3da342": {"__data__": {"text": "of the ECMAScript Language Specification.\n\nWorking with JavaScript properties#\nNode-API exposes a set of APIs to get and set properties on JavaScript objects. Some of these types are documented under Section 7 of the ECMAScript Language Specification.\n\nProperties in JavaScript are represented as a tuple of a key and a value. Fundamentally, all property keys in Node-API can be represented in one of the following forms:\n\nNamed: a simple UTF8-encoded string\nInteger-Indexed: an index value represented by uint32_t\nJavaScript value: these are represented in Node-API by napi_value. This can be a napi_value representing a string, number, or symbol.\nNode-API values are represented by the type napi_value. Any Node-API call that requires a JavaScript value takes in a napi_value. However, it's the caller's responsibility to make sure that the napi_value in question is of the JavaScript type expected by the API.\n\nThe APIs documented in this section provide a simple interface to get and set properties on arbitrary JavaScript objects represented by napi_value.\n\nFor instance, consider the following JavaScript code snippet:\n\nconst obj = {};\nobj.myProp = 123;\nThe equivalent can be done using Node-API values with the following snippet:\n\nnapi_status status = napi_generic_failure;\n\n// const obj = {}\nnapi_value obj, value;\nstatus = napi_create_object(env, &obj);\nif (status != napi_ok) return status;\n\n// Create a napi_value for 123\nstatus = napi_create_int32(env, 123, &value);\nif (status != napi_ok) return status;\n\n// obj.myProp = 123\nstatus = napi_set_named_property(env, obj, \"myProp\", value);\nif (status != napi_ok) return status;\nIndexed properties can be set in a similar manner. Consider the following JavaScript snippet:\n\nconst arr = [];\narr[123] = 'hello';\nThe equivalent can be done using Node-API values with the following snippet:\n\nnapi_status status = napi_generic_failure;\n\n// const arr = [];\nnapi_value arr, value;\nstatus = napi_create_array(env, &arr);\nif (status != napi_ok) return status;\n\n// Create a napi_value for 'hello'\nstatus = napi_create_string_utf8(env, \"hello\", NAPI_AUTO_LENGTH, &value);\nif (status != napi_ok) return status;\n\n// arr[123] = 'hello';\nstatus = napi_set_element(env, arr, 123, value);\nif (status != napi_ok) return status;\nProperties can be retrieved using the APIs described in this section. Consider the following JavaScript snippet:\n\nconst arr = [];\nconst value = arr[123];\nThe following is the approximate equivalent of the Node-API counterpart:\n\nnapi_status status = napi_generic_failure;\n\n// const arr = []\nnapi_value arr, value;\nstatus = napi_create_array(env, &arr);\nif (status != napi_ok) return status;\n\n// const value = arr[123]\nstatus = napi_get_element(env, arr, 123, &value);\nif (status != napi_ok) return status;\nFinally, multiple properties can also be defined on an object for performance reasons. Consider the following JavaScript:\n\nconst obj = {};\nObject.defineProperties(obj, {\n  'foo': { value: 123, writable: true, configurable: true, enumerable: true },\n  'bar': { value: 456, writable: true, configurable: true, enumerable: true },\n});\nThe following is the approximate equivalent of the Node-API counterpart:\n\nnapi_status status = napi_status_generic_failure;\n\n// const obj = {};\nnapi_value obj;\nstatus = napi_create_object(env, &obj);\nif (status != napi_ok) return", "doc_id": "a0d42d94-5af1-4d18-9398-ed08eb3da342", "embedding": null, "doc_hash": "e1ce04c4530579b4fdcb5d79c23ee45bd2a147cb552177796a72d10011f3a58b", "extra_info": null, "node_info": {"start": 461152, "end": 464486}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b23b6475-1c5e-4e18-b221-2b65b8c4f0b9", "3": "544da81b-7eab-40b6-bfa0-567dc9153a35"}}, "__type__": "1"}, "544da81b-7eab-40b6-bfa0-567dc9153a35": {"__data__": {"text": "arr, 123, &value);\nif (status != napi_ok) return status;\nFinally, multiple properties can also be defined on an object for performance reasons. Consider the following JavaScript:\n\nconst obj = {};\nObject.defineProperties(obj, {\n  'foo': { value: 123, writable: true, configurable: true, enumerable: true },\n  'bar': { value: 456, writable: true, configurable: true, enumerable: true },\n});\nThe following is the approximate equivalent of the Node-API counterpart:\n\nnapi_status status = napi_status_generic_failure;\n\n// const obj = {};\nnapi_value obj;\nstatus = napi_create_object(env, &obj);\nif (status != napi_ok) return status;\n\n// Create napi_values for 123 and 456\nnapi_value fooValue, barValue;\nstatus = napi_create_int32(env, 123, &fooValue);\nif (status != napi_ok) return status;\nstatus = napi_create_int32(env, 456, &barValue);\nif (status != napi_ok) return status;\n\n// Set the properties\nnapi_property_descriptor descriptors[] = {\n  { \"foo\", NULL, NULL, NULL, NULL, fooValue, napi_writable | napi_configurable, NULL },\n  { \"bar\", NULL, NULL, NULL, NULL, barValue, napi_writable | napi_configurable, NULL }\n}\nstatus = napi_define_properties(env,\n                                obj,\n                                sizeof(descriptors) / sizeof(descriptors[0]),\n                                descriptors);\nif (status != napi_ok) return status;\nStructures#\nnapi_property_attributes#\nHistory\ntypedef enum {\n  napi_default = 0,\n  napi_writable = 1 << 0,\n  napi_enumerable = 1 << 1,\n  napi_configurable = 1 << 2,\n\n  // Used with napi_define_class to distinguish static properties\n  // from instance properties. Ignored by napi_define_properties.\n  napi_static = 1 << 10,\n\n  // Default for class methods.\n  napi_default_method = napi_writable | napi_configurable,\n\n  // Default for object properties, like in JS obj[prop].\n  napi_default_jsproperty = napi_writable |\n                          napi_enumerable |\n                          napi_configurable,\n} napi_property_attributes;\nnapi_property_attributes are flags used to control the behavior of properties set on a JavaScript object. Other than napi_static they correspond to the attributes listed in Section 6.1.7.1 of the ECMAScript Language Specification. They can be one or more of the following bitflags:\n\nnapi_default: No explicit attributes are set on the property. By default, a property is read only, not enumerable and not configurable.\nnapi_writable: The property is writable.\nnapi_enumerable: The property is enumerable.\nnapi_configurable: The property is configurable as defined in Section 6.1.7.1 of the ECMAScript Language Specification.\nnapi_static: The property will be defined as a static property on a class as opposed to an instance property, which is the default. This is used only by napi_define_class. It is ignored by napi_define_properties.\nnapi_default_method: Like a method in a JS class, the property is configurable and writeable, but not enumerable.\nnapi_default_jsproperty: Like a property set via assignment in", "doc_id": "544da81b-7eab-40b6-bfa0-567dc9153a35", "embedding": null, "doc_hash": "fa6e24958299faf3be4764d69d8cc453bcec2770e5a4156cc9aacc00d51b330f", "extra_info": null, "node_info": {"start": 464612, "end": 467611}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a0d42d94-5af1-4d18-9398-ed08eb3da342", "3": "b94f1052-2d57-42b4-b638-366f5ec11752"}}, "__type__": "1"}, "b94f1052-2d57-42b4-b638-366f5ec11752": {"__data__": {"text": "following bitflags:\n\nnapi_default: No explicit attributes are set on the property. By default, a property is read only, not enumerable and not configurable.\nnapi_writable: The property is writable.\nnapi_enumerable: The property is enumerable.\nnapi_configurable: The property is configurable as defined in Section 6.1.7.1 of the ECMAScript Language Specification.\nnapi_static: The property will be defined as a static property on a class as opposed to an instance property, which is the default. This is used only by napi_define_class. It is ignored by napi_define_properties.\nnapi_default_method: Like a method in a JS class, the property is configurable and writeable, but not enumerable.\nnapi_default_jsproperty: Like a property set via assignment in JavaScript, the property is writable, enumerable, and configurable.\nnapi_property_descriptor#\ntypedef struct {\n  // One of utf8name or name should be NULL.\n  const char* utf8name;\n  napi_value name;\n\n  napi_callback method;\n  napi_callback getter;\n  napi_callback setter;\n  napi_value value;\n\n  napi_property_attributes attributes;\n  void* data;\n} napi_property_descriptor;\nutf8name: Optional string describing the key for the property, encoded as UTF8. One of utf8name or name must be provided for the property.\nname: Optional napi_value that points to a JavaScript string or symbol to be used as the key for the property. One of utf8name or name must be provided for the property.\nvalue: The value that's retrieved by a get access of the property if the property is a data property. If this is passed in, set getter, setter, method and data to NULL (since these members won't be used).\ngetter: A function to call when a get access of the property is performed. If this is passed in, set value and method to NULL (since these members won't be used). The given function is called implicitly by the runtime when the property is accessed from JavaScript code (or if a get on the property is performed using a Node-API call). napi_callback provides more details.\nsetter: A function to call when a set access of the property is performed. If this is passed in, set value and method to NULL (since these members won't be used). The given function is called implicitly by the runtime when the property is set from JavaScript code (or if a set on the property is performed using a Node-API call). napi_callback provides more details.\nmethod: Set this to make the property descriptor object's value property to be a JavaScript function represented by method. If this is passed in, set value, getter and setter to NULL (since these members won't be used). napi_callback provides more details.\nattributes: The attributes associated with the particular property. See napi_property_attributes.\ndata: The callback data passed into method, getter and setter if this function is invoked.\nFunctions#\nnapi_get_property_names#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_property_names(napi_env env,\n                                    napi_value object,\n                                    napi_value* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object from which to retrieve the properties.\n[out] result: A napi_value representing an array of JavaScript values that represent the property names of the object. The API can be used to iterate over result using napi_get_array_length and napi_get_element.\nReturns napi_ok if the API succeeded.\n\nThis API returns the names of the enumerable properties of object as an array of strings. The properties of object whose key is a symbol will not be", "doc_id": "b94f1052-2d57-42b4-b638-366f5ec11752", "embedding": null, "doc_hash": "fcd2e1682b0cd77ab45afaf6b8ee9f9b27965a4f4dea2e0dced040457aeda598", "extra_info": null, "node_info": {"start": 467502, "end": 471089}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "544da81b-7eab-40b6-bfa0-567dc9153a35", "3": "f7d03f6e-8440-4f91-99a4-6d0d72799598"}}, "__type__": "1"}, "f7d03f6e-8440-4f91-99a4-6d0d72799598": {"__data__": {"text": "             napi_value object,\n                                    napi_value* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object from which to retrieve the properties.\n[out] result: A napi_value representing an array of JavaScript values that represent the property names of the object. The API can be used to iterate over result using napi_get_array_length and napi_get_element.\nReturns napi_ok if the API succeeded.\n\nThis API returns the names of the enumerable properties of object as an array of strings. The properties of object whose key is a symbol will not be included.\n\nnapi_get_all_property_names#\nAdded in: v13.7.0, v12.17.0, v10.20.0 N-API version: 6\nnapi_get_all_property_names(napi_env env,\n                            napi_value object,\n                            napi_key_collection_mode key_mode,\n                            napi_key_filter key_filter,\n                            napi_key_conversion key_conversion,\n                            napi_value* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object from which to retrieve the properties.\n[in] key_mode: Whether to retrieve prototype properties as well.\n[in] key_filter: Which properties to retrieve (enumerable/readable/writable).\n[in] key_conversion: Whether to convert numbered property keys to strings.\n[out] result: A napi_value representing an array of JavaScript values that represent the property names of the object. napi_get_array_length and napi_get_element can be used to iterate over result.\nReturns napi_ok if the API succeeded.\n\nThis API returns an array containing the names of the available properties of this object.\n\nnapi_set_property#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_set_property(napi_env env,\n                              napi_value object,\n                              napi_value key,\n                              napi_value value);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object on which to set the property.\n[in] key: The name of the property to set.\n[in] value: The property value.\nReturns napi_ok if the API succeeded.\n\nThis API set a property on the Object passed in.\n\nnapi_get_property#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_property(napi_env env,\n                              napi_value object,\n                              napi_value key,\n                              napi_value* result);\n[in] env:", "doc_id": "f7d03f6e-8440-4f91-99a4-6d0d72799598", "embedding": null, "doc_hash": "cd366b3f2819eb6c147841c4606603f93c32296ab19acbb9cd495d24b2462365", "extra_info": null, "node_info": {"start": 471257, "end": 473747}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b94f1052-2d57-42b4-b638-366f5ec11752", "3": "725a19c1-9d62-438b-9d18-9bae478560e0"}}, "__type__": "1"}, "725a19c1-9d62-438b-9d18-9bae478560e0": {"__data__": {"text": "property to set.\n[in] value: The property value.\nReturns napi_ok if the API succeeded.\n\nThis API set a property on the Object passed in.\n\nnapi_get_property#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_property(napi_env env,\n                              napi_value object,\n                              napi_value key,\n                              napi_value* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object from which to retrieve the property.\n[in] key: The name of the property to retrieve.\n[out] result: The value of the property.\nReturns napi_ok if the API succeeded.\n\nThis API gets the requested property from the Object passed in.\n\nnapi_has_property#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_has_property(napi_env env,\n                              napi_value object,\n                              napi_value key,\n                              bool* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object to query.\n[in] key: The name of the property whose existence to check.\n[out] result: Whether the property exists on the object or not.\nReturns napi_ok if the API succeeded.\n\nThis API checks if the Object passed in has the named property.\n\nnapi_delete_property#\nAdded in: v8.2.0 N-API version: 1\nnapi_status napi_delete_property(napi_env env,\n                                 napi_value object,\n                                 napi_value key,\n                                 bool* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object to query.\n[in] key: The name of the property to delete.\n[out] result: Whether the property deletion succeeded or not. result can optionally be ignored by passing NULL.\nReturns napi_ok if the API succeeded.\n\nThis API attempts to delete the key own property from object.\n\nnapi_has_own_property#\nAdded in: v8.2.0 N-API version: 1\nnapi_status napi_has_own_property(napi_env env,\n                                  napi_value object,\n                                  napi_value key,\n                                  bool* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object to query.\n[in] key: The name of the own property whose existence to check.\n[out] result: Whether the own property exists on the object or not.\nReturns", "doc_id": "725a19c1-9d62-438b-9d18-9bae478560e0", "embedding": null, "doc_hash": "27fae7fff962ce56e60efeb0b78a797704375b2d799f61607755887c602d2d8e", "extra_info": null, "node_info": {"start": 473965, "end": 476345}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f7d03f6e-8440-4f91-99a4-6d0d72799598", "3": "a670dba4-bc8c-4476-963c-90f9a5539f3f"}}, "__type__": "1"}, "a670dba4-bc8c-4476-963c-90f9a5539f3f": {"__data__": {"text": "napi_has_own_property(napi_env env,\n                                  napi_value object,\n                                  napi_value key,\n                                  bool* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object to query.\n[in] key: The name of the own property whose existence to check.\n[out] result: Whether the own property exists on the object or not.\nReturns napi_ok if the API succeeded.\n\nThis API checks if the Object passed in has the named own property. key must be a string or a symbol, or an error will be thrown. Node-API will not perform any conversion between data types.\n\nnapi_set_named_property#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_set_named_property(napi_env env,\n                                    napi_value object,\n                                    const char* utf8Name,\n                                    napi_value value);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object on which to set the property.\n[in] utf8Name: The name of the property to set.\n[in] value: The property value.\nReturns napi_ok if the API succeeded.\n\nThis method is equivalent to calling napi_set_property with a napi_value created from the string passed in as utf8Name.\n\nnapi_get_named_property#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_named_property(napi_env env,\n                                    napi_value object,\n                                    const char* utf8Name,\n                                    napi_value* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object from which to retrieve the property.\n[in] utf8Name: The name of the property to get.\n[out] result: The value of the property.\nReturns napi_ok if the API succeeded.\n\nThis method is equivalent to calling napi_get_property with a napi_value created from the string passed in as utf8Name.\n\nnapi_has_named_property#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_has_named_property(napi_env env,\n                                    napi_value object,\n                                    const char* utf8Name,\n                                    bool* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object:", "doc_id": "a670dba4-bc8c-4476-963c-90f9a5539f3f", "embedding": null, "doc_hash": "ef25944228a80209d88642c0d85dd454f462d490757617d9486e6800c42f6f67", "extra_info": null, "node_info": {"start": 476329, "end": 478628}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "725a19c1-9d62-438b-9d18-9bae478560e0", "3": "234d88c4-e24b-4d53-9160-ad5d9574d9bc"}}, "__type__": "1"}, "234d88c4-e24b-4d53-9160-ad5d9574d9bc": {"__data__": {"text": "in: v8.0.0 N-API version: 1\nnapi_status napi_has_named_property(napi_env env,\n                                    napi_value object,\n                                    const char* utf8Name,\n                                    bool* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object to query.\n[in] utf8Name: The name of the property whose existence to check.\n[out] result: Whether the property exists on the object or not.\nReturns napi_ok if the API succeeded.\n\nThis method is equivalent to calling napi_has_property with a napi_value created from the string passed in as utf8Name.\n\nnapi_set_element#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_set_element(napi_env env,\n                             napi_value object,\n                             uint32_t index,\n                             napi_value value);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object from which to set the properties.\n[in] index: The index of the property to set.\n[in] value: The property value.\nReturns napi_ok if the API succeeded.\n\nThis API sets an element on the Object passed in.\n\nnapi_get_element#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_element(napi_env env,\n                             napi_value object,\n                             uint32_t index,\n                             napi_value* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object from which to retrieve the property.\n[in] index: The index of the property to get.\n[out] result: The value of the property.\nReturns napi_ok if the API succeeded.\n\nThis API gets the element at the requested index.\n\nnapi_has_element#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_has_element(napi_env env,\n                             napi_value object,\n                             uint32_t index,\n                             bool* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object to query.\n[in] index: The index of the property whose existence to check.\n[out] result: Whether the property exists on the object or not.\nReturns napi_ok if the API succeeded.\n\nThis API returns if the Object passed in has an element at the requested index.\n\nnapi_delete_element#\nAdded in: v8.2.0 N-API version: 1\nnapi_status", "doc_id": "234d88c4-e24b-4d53-9160-ad5d9574d9bc", "embedding": null, "doc_hash": "9c6aee672858dafd41a9e8169ec60d54fe746e86aa3923c07a9eabb9c76b13be", "extra_info": null, "node_info": {"start": 478723, "end": 481075}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a670dba4-bc8c-4476-963c-90f9a5539f3f", "3": "77246aac-535e-4fda-ada3-9a993c114738"}}, "__type__": "1"}, "77246aac-535e-4fda-ada3-9a993c114738": {"__data__": {"text": "object,\n                             uint32_t index,\n                             bool* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object to query.\n[in] index: The index of the property whose existence to check.\n[out] result: Whether the property exists on the object or not.\nReturns napi_ok if the API succeeded.\n\nThis API returns if the Object passed in has an element at the requested index.\n\nnapi_delete_element#\nAdded in: v8.2.0 N-API version: 1\nnapi_status napi_delete_element(napi_env env,\n                                napi_value object,\n                                uint32_t index,\n                                bool* result);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object to query.\n[in] index: The index of the property to delete.\n[out] result: Whether the element deletion succeeded or not. result can optionally be ignored by passing NULL.\nReturns napi_ok if the API succeeded.\n\nThis API attempts to delete the specified index from object.\n\nnapi_define_properties#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_define_properties(napi_env env,\n                                   napi_value object,\n                                   size_t property_count,\n                                   const napi_property_descriptor* properties);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object from which to retrieve the properties.\n[in] property_count: The number of elements in the properties array.\n[in] properties: The array of property descriptors.\nReturns napi_ok if the API succeeded.\n\nThis method allows the efficient definition of multiple properties on a given object. The properties are defined using property descriptors (see napi_property_descriptor). Given an array of such property descriptors, this API will set the properties on the object one at a time, as defined by DefineOwnProperty() (described in Section 9.1.6 of the ECMA-262 specification).\n\nnapi_object_freeze#\nAdded in: v14.14.0, v12.20.0 N-API version: 8\nnapi_status napi_object_freeze(napi_env env,\n                               napi_value object);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object to freeze.\nReturns napi_ok if the API succeeded.\n\nThis method freezes a given object. This prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. It also prevents the object's prototype from being changed. This is described in Section 19.1.2.6 of the ECMA-262 specification.\n\nnapi_object_seal#\nAdded in: v14.14.0, v12.20.0 N-API", "doc_id": "77246aac-535e-4fda-ada3-9a993c114738", "embedding": null, "doc_hash": "332a319bfd55acd94565d3661c655c59cbbaa94e3a66dc5c6a22bdef6bac7590", "extra_info": null, "node_info": {"start": 480875, "end": 483667}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "234d88c4-e24b-4d53-9160-ad5d9574d9bc", "3": "448686ff-f244-41f3-a139-0029948a8b4d"}}, "__type__": "1"}, "448686ff-f244-41f3-a139-0029948a8b4d": {"__data__": {"text": "                           napi_value object);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object to freeze.\nReturns napi_ok if the API succeeded.\n\nThis method freezes a given object. This prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. It also prevents the object's prototype from being changed. This is described in Section 19.1.2.6 of the ECMA-262 specification.\n\nnapi_object_seal#\nAdded in: v14.14.0, v12.20.0 N-API version: 8\nnapi_status napi_object_seal(napi_env env,\n                             napi_value object);\n[in] env: The environment that the Node-API call is invoked under.\n[in] object: The object to seal.\nReturns napi_ok if the API succeeded.\n\nThis method seals a given object. This prevents new properties from being added to it, as well as marking all existing properties as non-configurable. This is described in Section 19.1.2.20 of the ECMA-262 specification.\n\nWorking with JavaScript functions#\nNode-API provides a set of APIs that allow JavaScript code to call back into native code. Node-APIs that support calling back into native code take in a callback functions represented by the napi_callback type. When the JavaScript VM calls back to native code, the napi_callback function provided is invoked. The APIs documented in this section allow the callback function to do the following:\n\nGet information about the context in which the callback was invoked.\nGet the arguments passed into the callback.\nReturn a napi_value back from the callback.\nAdditionally, Node-API provides a set of functions which allow calling JavaScript functions from native code. One can either call a function like a regular JavaScript function call, or as a constructor function.\n\nAny non-NULL data which is passed to this API via the data field of the napi_property_descriptor items can be associated with object and freed whenever object is garbage-collected by passing both object and the data to napi_add_finalizer.\n\nnapi_call_function#\nAdded in: v8.0.0 N-API version: 1\nNAPI_EXTERN napi_status napi_call_function(napi_env env,\n                                           napi_value recv,\n                                           napi_value func,\n                                           size_t argc,\n                                           const napi_value* argv,\n                                           napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] recv: The this value passed to the called function.\n[in] func: napi_value representing the JavaScript function to be invoked.\n[in] argc: The count of elements in the argv array.\n[in] argv: Array of napi_values representing JavaScript values passed in as arguments to the function.\n[out] result: napi_value representing the JavaScript object returned.\nReturns", "doc_id": "448686ff-f244-41f3-a139-0029948a8b4d", "embedding": null, "doc_hash": "1e812932b74a6c6edf598a5000d73c28a9d358b496bf5aeed7e2efa1931798fc", "extra_info": null, "node_info": {"start": 483512, "end": 486514}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "77246aac-535e-4fda-ada3-9a993c114738", "3": "17f3c540-12cd-489b-9196-234e221060cc"}}, "__type__": "1"}, "17f3c540-12cd-489b-9196-234e221060cc": {"__data__": {"text": "                    const napi_value* argv,\n                                           napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] recv: The this value passed to the called function.\n[in] func: napi_value representing the JavaScript function to be invoked.\n[in] argc: The count of elements in the argv array.\n[in] argv: Array of napi_values representing JavaScript values passed in as arguments to the function.\n[out] result: napi_value representing the JavaScript object returned.\nReturns napi_ok if the API succeeded.\n\nThis method allows a JavaScript function object to be called from a native add-on. This is the primary mechanism of calling back from the add-on's native code into JavaScript. For the special case of calling into JavaScript after an async operation, see napi_make_callback.\n\nA sample use case might look as follows. Consider the following JavaScript snippet:\n\nfunction AddTwo(num) {\n  return num + 2;\n}\nglobal.AddTwo = AddTwo;\nThen, the above function can be invoked from a native add-on using the following code:\n\n// Get the function named \"AddTwo\" on the global object\nnapi_value global, add_two, arg;\nnapi_status status = napi_get_global(env, &global);\nif (status != napi_ok) return;\n\nstatus = napi_get_named_property(env, global, \"AddTwo\", &add_two);\nif (status != napi_ok) return;\n\n// const arg = 1337\nstatus = napi_create_int32(env, 1337, &arg);\nif (status != napi_ok) return;\n\nnapi_value* argv = &arg;\nsize_t argc = 1;\n\n// AddTwo(arg);\nnapi_value return_val;\nstatus = napi_call_function(env, global, add_two, argc, argv, &return_val);\nif (status != napi_ok) return;\n\n// Convert the result back to a native type\nint32_t result;\nstatus = napi_get_value_int32(env, return_val, &result);\nif (status != napi_ok) return;\nnapi_create_function#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_create_function(napi_env env,\n                                 const char* utf8name,\n                                 size_t length,\n                                 napi_callback cb,\n                                 void* data,\n                                 napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] utf8Name: Optional name of the function encoded as UTF8. This is visible within JavaScript as the new function object's name property.\n[in] length: The length of the utf8name in bytes, or NAPI_AUTO_LENGTH if it is null-terminated.\n[in] cb: The native function which should be called when this function object is invoked. napi_callback provides more details.\n[in] data: User-provided data context. This will be passed back into the function when invoked later.\n[out] result: napi_value representing the JavaScript function object for the newly created function.\nReturns", "doc_id": "17f3c540-12cd-489b-9196-234e221060cc", "embedding": null, "doc_hash": "0e0e250aef63c8a2609e1255624ce2db6a0e7769a8d1ced197eddf73a5f72fb4", "extra_info": null, "node_info": {"start": 486659, "end": 489427}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "448686ff-f244-41f3-a139-0029948a8b4d", "3": "a0e84fd5-a615-4654-aee5-28d3e2301ab5"}}, "__type__": "1"}, "a0e84fd5-a615-4654-aee5-28d3e2301ab5": {"__data__": {"text": "                            napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] utf8Name: Optional name of the function encoded as UTF8. This is visible within JavaScript as the new function object's name property.\n[in] length: The length of the utf8name in bytes, or NAPI_AUTO_LENGTH if it is null-terminated.\n[in] cb: The native function which should be called when this function object is invoked. napi_callback provides more details.\n[in] data: User-provided data context. This will be passed back into the function when invoked later.\n[out] result: napi_value representing the JavaScript function object for the newly created function.\nReturns napi_ok if the API succeeded.\n\nThis API allows an add-on author to create a function object in native code. This is the primary mechanism to allow calling into the add-on's native code from JavaScript.\n\nThe newly created function is not automatically visible from script after this call. Instead, a property must be explicitly set on any object that is visible to JavaScript, in order for the function to be accessible from script.\n\nIn order to expose a function as part of the add-on's module exports, set the newly created function on the exports object. A sample module might look as follows:\n\nnapi_value SayHello(napi_env env, napi_callback_info info) {\n  printf(\"Hello\\n\");\n  return NULL;\n}\n\nnapi_value Init(napi_env env, napi_value exports) {\n  napi_status status;\n\n  napi_value fn;\n  status = napi_create_function(env, NULL, 0, SayHello, NULL, &fn);\n  if (status != napi_ok) return NULL;\n\n  status = napi_set_named_property(env, exports, \"sayHello\", fn);\n  if (status != napi_ok) return NULL;\n\n  return exports;\n}\n\nNAPI_MODULE(NODE_GYP_MODULE_NAME, Init)\nGiven the above code, the add-on can be used from JavaScript as follows:\n\nconst myaddon = require('./addon');\nmyaddon.sayHello();\nThe string passed to require() is the name of the target in binding.gyp responsible for creating the .node file.\n\nAny non-NULL data which is passed to this API via the data parameter can be associated with the resulting JavaScript function (which is returned in the result parameter) and freed whenever the function is garbage-collected by passing both the JavaScript function and the data to napi_add_finalizer.\n\nJavaScript Functions are described in Section 19.2 of the ECMAScript Language Specification.\n\nnapi_get_cb_info#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_cb_info(napi_env env,\n                             napi_callback_info cbinfo,\n                             size_t* argc,\n                             napi_value* argv,\n                             napi_value* thisArg,\n                             void** data)\n[in] env: The environment that the API is invoked under.\n[in] cbinfo: The callback info passed into the callback function.\n[in-out] argc: Specifies the length of the provided argv array and receives the actual count of arguments. argc can optionally be ignored by passing NULL.\n[out] argv: C array of napi_values to which the arguments will be copied. If there", "doc_id": "a0e84fd5-a615-4654-aee5-28d3e2301ab5", "embedding": null, "doc_hash": "a010bb28e047cfabf0fc1b175c1c15e56371ad9edffbffe26076716cc28d061f", "extra_info": null, "node_info": {"start": 489272, "end": 492345}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "17f3c540-12cd-489b-9196-234e221060cc", "3": "34f1f2a3-5683-45f7-a980-89e1c12ac026"}}, "__type__": "1"}, "34f1f2a3-5683-45f7-a980-89e1c12ac026": {"__data__": {"text": "                   napi_value* argv,\n                             napi_value* thisArg,\n                             void** data)\n[in] env: The environment that the API is invoked under.\n[in] cbinfo: The callback info passed into the callback function.\n[in-out] argc: Specifies the length of the provided argv array and receives the actual count of arguments. argc can optionally be ignored by passing NULL.\n[out] argv: C array of napi_values to which the arguments will be copied. If there are more arguments than the provided count, only the requested number of arguments are copied. If there are fewer arguments provided than claimed, the rest of argv is filled with napi_value values that represent undefined. argv can optionally be ignored by passing NULL.\n[out] thisArg: Receives the JavaScript this argument for the call. thisArg can optionally be ignored by passing NULL.\n[out] data: Receives the data pointer for the callback. data can optionally be ignored by passing NULL.\nReturns napi_ok if the API succeeded.\n\nThis method is used within a callback function to retrieve details about the call like the arguments and the this pointer from a given callback info.\n\nnapi_get_new_target#\nAdded in: v8.6.0 N-API version: 1\nnapi_status napi_get_new_target(napi_env env,\n                                napi_callback_info cbinfo,\n                                napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] cbinfo: The callback info passed into the callback function.\n[out] result: The new.target of the constructor call.\nReturns napi_ok if the API succeeded.\n\nThis API returns the new.target of the constructor call. If the current callback is not a constructor call, the result is NULL.\n\nnapi_new_instance#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_new_instance(napi_env env,\n                              napi_value cons,\n                              size_t argc,\n                              napi_value* argv,\n                              napi_value* result)\n[in] env: The environment that the API is invoked under.\n[in] cons: napi_value representing the JavaScript function to be invoked as a constructor.\n[in] argc: The count of elements in the argv array.\n[in] argv: Array of JavaScript values as napi_value representing the arguments to the constructor. If argc is zero this parameter may be omitted by passing in NULL.\n[out] result: napi_value representing the JavaScript object returned, which in this case is the constructed object.\nThis method is used to instantiate a new JavaScript value using a given napi_value that represents the constructor for the object. For example, consider the following snippet:\n\nfunction MyObject(param) {\n  this.param = param;\n}\n\nconst arg = 'hello';\nconst value = new MyObject(arg);\nThe following can be approximated in Node-API using the following snippet:\n\n// Get the constructor function", "doc_id": "34f1f2a3-5683-45f7-a980-89e1c12ac026", "embedding": null, "doc_hash": "182a126d8ed8f6bf486db60922deddaca5af3fc76545959a7e2e45ad49313f49", "extra_info": null, "node_info": {"start": 492554, "end": 495440}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a0e84fd5-a615-4654-aee5-28d3e2301ab5", "3": "21a076cf-742d-4eb4-a3d2-9b5e74fbf1fd"}}, "__type__": "1"}, "21a076cf-742d-4eb4-a3d2-9b5e74fbf1fd": {"__data__": {"text": "argc: The count of elements in the argv array.\n[in] argv: Array of JavaScript values as napi_value representing the arguments to the constructor. If argc is zero this parameter may be omitted by passing in NULL.\n[out] result: napi_value representing the JavaScript object returned, which in this case is the constructed object.\nThis method is used to instantiate a new JavaScript value using a given napi_value that represents the constructor for the object. For example, consider the following snippet:\n\nfunction MyObject(param) {\n  this.param = param;\n}\n\nconst arg = 'hello';\nconst value = new MyObject(arg);\nThe following can be approximated in Node-API using the following snippet:\n\n// Get the constructor function MyObject\nnapi_value global, constructor, arg, value;\nnapi_status status = napi_get_global(env, &global);\nif (status != napi_ok) return;\n\nstatus = napi_get_named_property(env, global, \"MyObject\", &constructor);\nif (status != napi_ok) return;\n\n// const arg = \"hello\"\nstatus = napi_create_string_utf8(env, \"hello\", NAPI_AUTO_LENGTH, &arg);\nif (status != napi_ok) return;\n\nnapi_value* argv = &arg;\nsize_t argc = 1;\n\n// const value = new MyObject(arg)\nstatus = napi_new_instance(env, constructor, argc, argv, &value);\nReturns napi_ok if the API succeeded.\n\nObject wrap#\nNode-API offers a way to \"wrap\" C++ classes and instances so that the class constructor and methods can be called from JavaScript.\n\nThe napi_define_class API defines a JavaScript class with constructor, static properties and methods, and instance properties and methods that correspond to the C++ class.\nWhen JavaScript code invokes the constructor, the constructor callback uses napi_wrap to wrap a new C++ instance in a JavaScript object, then returns the wrapper object.\nWhen JavaScript code invokes a method or property accessor on the class, the corresponding napi_callback C++ function is invoked. For an instance callback, napi_unwrap obtains the C++ instance that is the target of the call.\nFor wrapped objects it may be difficult to distinguish between a function called on a class prototype and a function called on an instance of a class. A common pattern used to address this problem is to save a persistent reference to the class constructor for later instanceof checks.\n\nnapi_value MyClass_constructor = NULL;\nstatus = napi_get_reference_value(env, MyClass::es_constructor, &MyClass_constructor);\nassert(napi_ok == status);\nbool is_instance = false;\nstatus = napi_instanceof(env, es_this, MyClass_constructor, &is_instance);\nassert(napi_ok == status);\nif (is_instance) {\n  // napi_unwrap() ...\n} else {\n  // otherwise...\n}\nThe reference must be freed once it is no longer needed.\n\nThere are occasions where napi_instanceof() is insufficient for ensuring that a JavaScript object is a wrapper for a certain native type. This is the case especially when wrapped JavaScript objects are passed back into the addon via static methods rather than as the this value of prototype methods. In such cases there is a chance that they may be unwrapped incorrectly.\n\nconst myAddon = require('./build/Release/my_addon.node');\n\n// `openDatabase()` returns a JavaScript object that wraps a native database\n// handle.\nconst dbHandle = myAddon.openDatabase();\n\n// `query()` returns a JavaScript object that wraps a native query handle.\nconst queryHandle = myAddon.query(dbHandle, 'Gimme ALL the things!');\n\n// There is an accidental error in the line below. The first parameter to\n// `myAddon.queryHasRecords()` should be the database handle (`dbHandle`), not\n// the query handle (`query`), so the", "doc_id": "21a076cf-742d-4eb4-a3d2-9b5e74fbf1fd", "embedding": null, "doc_hash": "465d3d4582870cb5da0b36d8d6968160ed4d388c33ef84a2729e0174abdfef12", "extra_info": null, "node_info": {"start": 495178, "end": 498755}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "34f1f2a3-5683-45f7-a980-89e1c12ac026", "3": "46165b1a-fcde-47c9-8514-271295c65a1c"}}, "__type__": "1"}, "46165b1a-fcde-47c9-8514-271295c65a1c": {"__data__": {"text": "JavaScript objects are passed back into the addon via static methods rather than as the this value of prototype methods. In such cases there is a chance that they may be unwrapped incorrectly.\n\nconst myAddon = require('./build/Release/my_addon.node');\n\n// `openDatabase()` returns a JavaScript object that wraps a native database\n// handle.\nconst dbHandle = myAddon.openDatabase();\n\n// `query()` returns a JavaScript object that wraps a native query handle.\nconst queryHandle = myAddon.query(dbHandle, 'Gimme ALL the things!');\n\n// There is an accidental error in the line below. The first parameter to\n// `myAddon.queryHasRecords()` should be the database handle (`dbHandle`), not\n// the query handle (`query`), so the correct condition for the while-loop\n// should be\n//\n// myAddon.queryHasRecords(dbHandle, queryHandle)\n//\nwhile (myAddon.queryHasRecords(queryHandle, dbHandle)) {\n  // retrieve records\n}\nIn the above example myAddon.queryHasRecords() is a method that accepts two arguments. The first is a database handle and the second is a query handle. Internally, it unwraps the first argument and casts the resulting pointer to a native database handle. It then unwraps the second argument and casts the resulting pointer to a query handle. If the arguments are passed in the wrong order, the casts will work, however, there is a good chance that the underlying database operation will fail, or will even cause an invalid memory access.\n\nTo ensure that the pointer retrieved from the first argument is indeed a pointer to a database handle and, similarly, that the pointer retrieved from the second argument is indeed a pointer to a query handle, the implementation of queryHasRecords() has to perform a type validation. Retaining the JavaScript class constructor from which the database handle was instantiated and the constructor from which the query handle was instantiated in napi_refs can help, because napi_instanceof() can then be used to ensure that the instances passed into queryHashRecords() are indeed of the correct type.\n\nUnfortunately, napi_instanceof() does not protect against prototype manipulation. For example, the prototype of the database handle instance can be set to the prototype of the constructor for query handle instances. In this case, the database handle instance can appear as a query handle instance, and it will pass the napi_instanceof() test for a query handle instance, while still containing a pointer to a database handle.\n\nTo this end, Node-API provides type-tagging capabilities.\n\nA type tag is a 128-bit integer unique to the addon. Node-API provides the napi_type_tag structure for storing a type tag. When such a value is passed along with a JavaScript object stored in a napi_value to napi_type_tag_object(), the JavaScript object will be \"marked\" with the type tag. The \"mark\" is invisible on the JavaScript side. When a JavaScript object arrives into a native binding, napi_check_object_type_tag() can be used along with the original type tag to determine whether the JavaScript object was previously \"marked\" with the type tag. This creates a type-checking capability of a higher fidelity than napi_instanceof() can provide, because such type- tagging survives prototype manipulation and addon unloading/reloading.\n\nContinuing the above example, the following skeleton addon implementation illustrates the use of napi_type_tag_object() and napi_check_object_type_tag().\n\n// This value is the type tag for a database handle. The command\n//\n//   uuidgen | sed -r -e 's/-//g' -e 's/(.{16})(.*)/0x\\1, 0x\\2/'\n//\n// can be used to obtain the two values with which to initialize the structure.\nstatic const napi_type_tag DatabaseHandleTypeTag = {\n  0x1edf75a38336451d, 0xa5ed9ce2e4c00c38\n};\n\n// This value is the type tag for a query handle.\nstatic const napi_type_tag QueryHandleTypeTag = {\n ", "doc_id": "46165b1a-fcde-47c9-8514-271295c65a1c", "embedding": null, "doc_hash": "3033c90b8f042a8f4cf567f5e24a31bfb5dd2a8786fc9d73abd2cc2f1792d4a4", "extra_info": null, "node_info": {"start": 498747, "end": 502589}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "21a076cf-742d-4eb4-a3d2-9b5e74fbf1fd", "3": "ae805aa2-c046-404e-b14b-8306fa9eb4e7"}}, "__type__": "1"}, "ae805aa2-c046-404e-b14b-8306fa9eb4e7": {"__data__": {"text": "the above example, the following skeleton addon implementation illustrates the use of napi_type_tag_object() and napi_check_object_type_tag().\n\n// This value is the type tag for a database handle. The command\n//\n//   uuidgen | sed -r -e 's/-//g' -e 's/(.{16})(.*)/0x\\1, 0x\\2/'\n//\n// can be used to obtain the two values with which to initialize the structure.\nstatic const napi_type_tag DatabaseHandleTypeTag = {\n  0x1edf75a38336451d, 0xa5ed9ce2e4c00c38\n};\n\n// This value is the type tag for a query handle.\nstatic const napi_type_tag QueryHandleTypeTag = {\n  0x9c73317f9fad44a3, 0x93c3920bf3b0ad6a\n};\n\nstatic napi_value\nopenDatabase(napi_env env, napi_callback_info info) {\n  napi_status status;\n  napi_value result;\n\n  // Perform the underlying action which results in a database handle.\n  DatabaseHandle* dbHandle = open_database();\n\n  // Create a new, empty JS object.\n  status = napi_create_object(env, &result);\n  if (status != napi_ok) return NULL;\n\n  // Tag the object to indicate that it holds a pointer to a `DatabaseHandle`.\n  status = napi_type_tag_object(env, result, &DatabaseHandleTypeTag);\n  if (status != napi_ok) return NULL;\n\n  // Store the pointer to the `DatabaseHandle` structure inside the JS object.\n  status = napi_wrap(env, result, dbHandle, NULL, NULL, NULL);\n  if (status != napi_ok) return NULL;\n\n  return result;\n}\n\n// Later when we receive a JavaScript object purporting to be a database handle\n// we can use `napi_check_object_type_tag()` to ensure that it is indeed such a\n// handle.\n\nstatic napi_value\nquery(napi_env env, napi_callback_info info) {\n  napi_status status;\n  size_t argc = 2;\n  napi_value argv[2];\n  bool is_db_handle;\n\n  status = napi_get_cb_info(env, info, &argc, argv, NULL, NULL);\n  if (status != napi_ok) return NULL;\n\n  // Check that the object passed as the first parameter has the previously\n  // applied tag.\n  status = napi_check_object_type_tag(env,\n                                      argv[0],\n                                      &DatabaseHandleTypeTag,\n                                      &is_db_handle);\n  if (status != napi_ok) return NULL;\n\n  // Throw a `TypeError` if it doesn't.\n  if (!is_db_handle) {\n    // Throw a TypeError.\n    return NULL;\n  }\n}\nnapi_define_class#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_define_class(napi_env env,\n                              const char* utf8name,\n                              size_t length,\n                              napi_callback constructor,\n                     ", "doc_id": "ae805aa2-c046-404e-b14b-8306fa9eb4e7", "embedding": null, "doc_hash": "cb1fdc5c0068b3b745fc5c73312e4e78c8fa4dcf28c3af325bd8c58cd1a28a8d", "extra_info": null, "node_info": {"start": 502731, "end": 505226}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "46165b1a-fcde-47c9-8514-271295c65a1c", "3": "4ab325db-407c-4e55-b8ba-b173ac3935c3"}}, "__type__": "1"}, "4ab325db-407c-4e55-b8ba-b173ac3935c3": {"__data__": {"text": "{\n    // Throw a TypeError.\n    return NULL;\n  }\n}\nnapi_define_class#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_define_class(napi_env env,\n                              const char* utf8name,\n                              size_t length,\n                              napi_callback constructor,\n                              void* data,\n                              size_t property_count,\n                              const napi_property_descriptor* properties,\n                              napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] utf8name: Name of the JavaScript constructor function; When wrapping a C++ class, we recommend for clarity that this name be the same as that of the C++ class.\n[in] length: The length of the utf8name in bytes, or NAPI_AUTO_LENGTH if it is null-terminated.\n[in] constructor: Callback function that handles constructing instances of the class. When wrapping a C++ class, this method must be a static member with the napi_callback signature. A C++ class constructor cannot be used. napi_callback provides more details.\n[in] data: Optional data to be passed to the constructor callback as the data property of the callback info.\n[in] property_count: Number of items in the properties array argument.\n[in] properties: Array of property descriptors describing static and instance data properties, accessors, and methods on the class See napi_property_descriptor.\n[out] result: A napi_value representing the constructor function for the class.\nReturns napi_ok if the API succeeded.\n\nDefines a JavaScript class, including:\n\nA JavaScript constructor function that has the class name. When wrapping a corresponding C++ class, the callback passed via constructor can be used to instantiate a new C++ class instance, which can then be placed inside the JavaScript object instance being constructed using napi_wrap.\nProperties on the constructor function whose implementation can call corresponding static data properties, accessors, and methods of the C++ class (defined by property descriptors with the napi_static attribute).\nProperties on the constructor function's prototype object. When wrapping a C++ class, non-static data properties, accessors, and methods of the C++ class can be called from the static functions given in the property descriptors without the napi_static attribute after retrieving the C++ class instance placed inside the JavaScript object instance by using napi_unwrap.\nWhen wrapping a C++ class, the C++ constructor callback passed via constructor should be a static method on the class that calls the actual class constructor, then wraps the new C++ instance in a JavaScript object, and returns the wrapper object. See napi_wrap for details.\n\nThe JavaScript constructor function returned from napi_define_class is often saved and used later to construct new instances of the class from native code, and/or to check whether provided values are instances of the class. In that case, to prevent the function value from being garbage-collected, a strong persistent reference to it can be created using napi_create_reference, ensuring that the reference count is kept >= 1.\n\nAny non-NULL data which is passed to this API via the data parameter or via the data field of the napi_property_descriptor array items can be associated with the resulting JavaScript constructor (which is returned in the result", "doc_id": "4ab325db-407c-4e55-b8ba-b173ac3935c3", "embedding": null, "doc_hash": "094e4bae032631aae861e0908d15b6296e6dca013277964d88e679abed6f3a96", "extra_info": null, "node_info": {"start": 505524, "end": 508922}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ae805aa2-c046-404e-b14b-8306fa9eb4e7", "3": "ce1133f2-577f-4a56-822d-104b7a6063e2"}}, "__type__": "1"}, "ce1133f2-577f-4a56-822d-104b7a6063e2": {"__data__": {"text": "should be a static method on the class that calls the actual class constructor, then wraps the new C++ instance in a JavaScript object, and returns the wrapper object. See napi_wrap for details.\n\nThe JavaScript constructor function returned from napi_define_class is often saved and used later to construct new instances of the class from native code, and/or to check whether provided values are instances of the class. In that case, to prevent the function value from being garbage-collected, a strong persistent reference to it can be created using napi_create_reference, ensuring that the reference count is kept >= 1.\n\nAny non-NULL data which is passed to this API via the data parameter or via the data field of the napi_property_descriptor array items can be associated with the resulting JavaScript constructor (which is returned in the result parameter) and freed whenever the class is garbage-collected by passing both the JavaScript function and the data to napi_add_finalizer.\n\nnapi_wrap#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_wrap(napi_env env,\n                      napi_value js_object,\n                      void* native_object,\n                      napi_finalize finalize_cb,\n                      void* finalize_hint,\n                      napi_ref* result);\n[in] env: The environment that the API is invoked under.\n[in] js_object: The JavaScript object that will be the wrapper for the native object.\n[in] native_object: The native instance that will be wrapped in the JavaScript object.\n[in] finalize_cb: Optional native callback that can be used to free the native instance when the JavaScript object has been garbage-collected. napi_finalize provides more details.\n[in] finalize_hint: Optional contextual hint that is passed to the finalize callback.\n[out] result: Optional reference to the wrapped object.\nReturns napi_ok if the API succeeded.\n\nWraps a native instance in a JavaScript object. The native instance can be retrieved later using napi_unwrap().\n\nWhen JavaScript code invokes a constructor for a class that was defined using napi_define_class(), the napi_callback for the constructor is invoked. After constructing an instance of the native class, the callback must then call napi_wrap() to wrap the newly constructed instance in the already-created JavaScript object that is the this argument to the constructor callback. (That this object was created from the constructor function's prototype, so it already has definitions of all the instance properties and methods.)\n\nTypically when wrapping a class instance, a finalize callback should be provided that simply deletes the native instance that is received as the data argument to the finalize callback.\n\nThe optional returned reference is initially a weak reference, meaning it has a reference count of 0. Typically this reference count would be incremented temporarily during async operations that require the instance to remain valid.\n\nCaution: The optional returned reference (if obtained) should be deleted via napi_delete_reference ONLY in response to the finalize callback invocation. If it is deleted before then, then the finalize callback may never be invoked. Therefore, when obtaining a reference a finalize callback is also required in order to enable correct disposal of the reference.\n\nFinalizer callbacks may be deferred, leaving a window where the object has been garbage collected (and the weak reference is invalid) but the finalizer hasn't been called yet. When using napi_get_reference_value() on weak references returned by napi_wrap(), you should still handle an empty result.\n\nCalling napi_wrap() a second time on an object will return an error. To associate another native instance with the object, use napi_remove_wrap() first.\n\nnapi_unwrap#\nAdded in:", "doc_id": "ce1133f2-577f-4a56-822d-104b7a6063e2", "embedding": null, "doc_hash": "b1e11329006cdd42b77958a69a5b1949bcb342fd1e98da4072180e0e3dc0a04a", "extra_info": null, "node_info": {"start": 508392, "end": 512169}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4ab325db-407c-4e55-b8ba-b173ac3935c3", "3": "d62844ad-c3cb-4dd6-b933-a6ff13101171"}}, "__type__": "1"}, "d62844ad-c3cb-4dd6-b933-a6ff13101171": {"__data__": {"text": "reference (if obtained) should be deleted via napi_delete_reference ONLY in response to the finalize callback invocation. If it is deleted before then, then the finalize callback may never be invoked. Therefore, when obtaining a reference a finalize callback is also required in order to enable correct disposal of the reference.\n\nFinalizer callbacks may be deferred, leaving a window where the object has been garbage collected (and the weak reference is invalid) but the finalizer hasn't been called yet. When using napi_get_reference_value() on weak references returned by napi_wrap(), you should still handle an empty result.\n\nCalling napi_wrap() a second time on an object will return an error. To associate another native instance with the object, use napi_remove_wrap() first.\n\nnapi_unwrap#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_unwrap(napi_env env,\n                        napi_value js_object,\n                        void** result);\n[in] env: The environment that the API is invoked under.\n[in] js_object: The object associated with the native instance.\n[out] result: Pointer to the wrapped native instance.\nReturns napi_ok if the API succeeded.\n\nRetrieves a native instance that was previously wrapped in a JavaScript object using napi_wrap().\n\nWhen JavaScript code invokes a method or property accessor on the class, the corresponding napi_callback is invoked. If the callback is for an instance method or accessor, then the this argument to the callback is the wrapper object; the wrapped C++ instance that is the target of the call can be obtained then by calling napi_unwrap() on the wrapper object.\n\nnapi_remove_wrap#\nAdded in: v8.5.0 N-API version: 1\nnapi_status napi_remove_wrap(napi_env env,\n                             napi_value js_object,\n                             void** result);\n[in] env: The environment that the API is invoked under.\n[in] js_object: The object associated with the native instance.\n[out] result: Pointer to the wrapped native instance.\nReturns napi_ok if the API succeeded.\n\nRetrieves a native instance that was previously wrapped in the JavaScript object js_object using napi_wrap() and removes the wrapping. If a finalize callback was associated with the wrapping, it will no longer be called when the JavaScript object becomes garbage-collected.\n\nnapi_type_tag_object#\nAdded in: v14.8.0, v12.19.0 N-API version: 8\nnapi_status napi_type_tag_object(napi_env env,\n                                 napi_value js_object,\n                                 const napi_type_tag* type_tag);\n[in] env: The environment that the API is invoked under.\n[in] js_object: The JavaScript object to be marked.\n[in] type_tag: The tag with which the object is to be marked.\nReturns napi_ok if the API succeeded.\n\nAssociates the value of the type_tag pointer with the JavaScript object. napi_check_object_type_tag() can then be used to compare the tag that was attached to the object with one owned by the addon to ensure that the object has the right type.\n\nIf the object already has an associated type tag, this API will return napi_invalid_arg.\n\nnapi_check_object_type_tag#\nAdded in: v14.8.0, v12.19.0", "doc_id": "d62844ad-c3cb-4dd6-b933-a6ff13101171", "embedding": null, "doc_hash": "2936f7aae1f9c9c590348b6c272e3d82bad79e4ff8a05339318dea80c02bad68", "extra_info": null, "node_info": {"start": 512196, "end": 515339}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ce1133f2-577f-4a56-822d-104b7a6063e2", "3": "cac1783c-ff34-4e46-bdde-ad33ba71da92"}}, "__type__": "1"}, "cac1783c-ff34-4e46-bdde-ad33ba71da92": {"__data__": {"text": "     const napi_type_tag* type_tag);\n[in] env: The environment that the API is invoked under.\n[in] js_object: The JavaScript object to be marked.\n[in] type_tag: The tag with which the object is to be marked.\nReturns napi_ok if the API succeeded.\n\nAssociates the value of the type_tag pointer with the JavaScript object. napi_check_object_type_tag() can then be used to compare the tag that was attached to the object with one owned by the addon to ensure that the object has the right type.\n\nIf the object already has an associated type tag, this API will return napi_invalid_arg.\n\nnapi_check_object_type_tag#\nAdded in: v14.8.0, v12.19.0 N-API version: 8\nnapi_status napi_check_object_type_tag(napi_env env,\n                                       napi_value js_object,\n                                       const napi_type_tag* type_tag,\n                                       bool* result);\n[in] env: The environment that the API is invoked under.\n[in] js_object: The JavaScript object whose type tag to examine.\n[in] type_tag: The tag with which to compare any tag found on the object.\n[out] result: Whether the type tag given matched the type tag on the object. false is also returned if no type tag was found on the object.\nReturns napi_ok if the API succeeded.\n\nCompares the pointer given as type_tag with any that can be found on js_object. If no tag is found on js_object or, if a tag is found but it does not match type_tag, then result is set to false. If a tag is found and it matches type_tag, then result is set to true.\n\nnapi_add_finalizer#\nAdded in: v8.0.0 N-API version: 5\nnapi_status napi_add_finalizer(napi_env env,\n                               napi_value js_object,\n                               void* finalize_data,\n                               napi_finalize finalize_cb,\n                               void* finalize_hint,\n                               napi_ref* result);\n[in] env: The environment that the API is invoked under.\n[in] js_object: The JavaScript object to which the native data will be attached.\n[in] finalize_data: Optional data to be passed to finalize_cb.\n[in] finalize_cb: Native callback that will be used to free the native data when the JavaScript object has been garbage-collected. napi_finalize provides more details.\n[in] finalize_hint: Optional contextual hint that is passed to the finalize callback.\n[out] result: Optional reference to the JavaScript object.\nReturns napi_ok if the API succeeded.\n\nAdds a napi_finalize callback which will be called when the JavaScript object in js_object has been garbage-collected.\n\nThis API can be called multiple times on a single JavaScript object.\n\nCaution: The optional returned reference (if obtained) should be deleted via napi_delete_reference ONLY in response to the finalize", "doc_id": "cac1783c-ff34-4e46-bdde-ad33ba71da92", "embedding": null, "doc_hash": "9fea39cc8313cd74579a0c137da097722a0647238bc61e56422da85df0bc2048", "extra_info": null, "node_info": {"start": 515490, "end": 518263}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d62844ad-c3cb-4dd6-b933-a6ff13101171", "3": "ed932b46-10c1-4dfe-84d8-4e84509677c8"}}, "__type__": "1"}, "ed932b46-10c1-4dfe-84d8-4e84509677c8": {"__data__": {"text": "finalize_data: Optional data to be passed to finalize_cb.\n[in] finalize_cb: Native callback that will be used to free the native data when the JavaScript object has been garbage-collected. napi_finalize provides more details.\n[in] finalize_hint: Optional contextual hint that is passed to the finalize callback.\n[out] result: Optional reference to the JavaScript object.\nReturns napi_ok if the API succeeded.\n\nAdds a napi_finalize callback which will be called when the JavaScript object in js_object has been garbage-collected.\n\nThis API can be called multiple times on a single JavaScript object.\n\nCaution: The optional returned reference (if obtained) should be deleted via napi_delete_reference ONLY in response to the finalize callback invocation. If it is deleted before then, then the finalize callback may never be invoked. Therefore, when obtaining a reference a finalize callback is also required in order to enable correct disposal of the reference.\n\nSimple asynchronous operations#\nAddon modules often need to leverage async helpers from libuv as part of their implementation. This allows them to schedule work to be executed asynchronously so that their methods can return in advance of the work being completed. This allows them to avoid blocking overall execution of the Node.js application.\n\nNode-API provides an ABI-stable interface for these supporting functions which covers the most common asynchronous use cases.\n\nNode-API defines the napi_async_work structure which is used to manage asynchronous workers. Instances are created/deleted with napi_create_async_work and napi_delete_async_work.\n\nThe execute and complete callbacks are functions that will be invoked when the executor is ready to execute and when it completes its task respectively.\n\nThe execute function should avoid making any Node-API calls that could result in the execution of JavaScript or interaction with JavaScript objects. Most often, any code that needs to make Node-API calls should be made in complete callback instead. Avoid using the napi_env parameter in the execute callback as it will likely execute JavaScript.\n\nThese functions implement the following interfaces:\n\ntypedef void (*napi_async_execute_callback)(napi_env env,\n                                            void* data);\ntypedef void (*napi_async_complete_callback)(napi_env env,\n                                             napi_status status,\n                                             void* data);\nWhen these methods are invoked, the data parameter passed will be the addon-provided void* data that was passed into the napi_create_async_work call.\n\nOnce created the async worker can be queued for execution using the napi_queue_async_work function:\n\nnapi_status napi_queue_async_work(napi_env env,\n                                  napi_async_work work);\nnapi_cancel_async_work can be used if the work needs to be cancelled before the work has started execution.\n\nAfter calling napi_cancel_async_work, the complete callback will be invoked with a status value of napi_cancelled. The work should not be deleted before the complete callback invocation, even when it was cancelled.\n\nnapi_create_async_work#\nHistory\nN-API version: 1\nnapi_status napi_create_async_work(napi_env env,\n                                   napi_value", "doc_id": "ed932b46-10c1-4dfe-84d8-4e84509677c8", "embedding": null, "doc_hash": "83831f06df9c30eaf3acd97bcbfc164aff79dd229469cab3b51089df4e1b75ed", "extra_info": null, "node_info": {"start": 518172, "end": 521463}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cac1783c-ff34-4e46-bdde-ad33ba71da92", "3": "7d127025-d5ec-415f-a459-a90aea105e10"}}, "__type__": "1"}, "7d127025-d5ec-415f-a459-a90aea105e10": {"__data__": {"text": "                       napi_async_work work);\nnapi_cancel_async_work can be used if the work needs to be cancelled before the work has started execution.\n\nAfter calling napi_cancel_async_work, the complete callback will be invoked with a status value of napi_cancelled. The work should not be deleted before the complete callback invocation, even when it was cancelled.\n\nnapi_create_async_work#\nHistory\nN-API version: 1\nnapi_status napi_create_async_work(napi_env env,\n                                   napi_value async_resource,\n                                   napi_value async_resource_name,\n                                   napi_async_execute_callback execute,\n                                   napi_async_complete_callback complete,\n                                   void* data,\n                                   napi_async_work* result);\n[in] env: The environment that the API is invoked under.\n[in] async_resource: An optional object associated with the async work that will be passed to possible async_hooks init hooks.\n[in] async_resource_name: Identifier for the kind of resource that is being provided for diagnostic information exposed by the async_hooks API.\n[in] execute: The native function which should be called to execute the logic asynchronously. The given function is called from a worker pool thread and can execute in parallel with the main event loop thread.\n[in] complete: The native function which will be called when the asynchronous logic is completed or is cancelled. The given function is called from the main event loop thread. napi_async_complete_callback provides more details.\n[in] data: User-provided data context. This will be passed back into the execute and complete functions.\n[out] result: napi_async_work* which is the handle to the newly created async work.\nReturns napi_ok if the API succeeded.\n\nThis API allocates a work object that is used to execute logic asynchronously. It should be freed using napi_delete_async_work once the work is no longer required.\n\nasync_resource_name should be a null-terminated, UTF-8-encoded string.\n\nThe async_resource_name identifier is provided by the user and should be representative of the type of async work being performed. It is also recommended to apply namespacing to the identifier, e.g. by including the module name. See the async_hooks documentation for more information.\n\nnapi_delete_async_work#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_delete_async_work(napi_env env,\n                                   napi_async_work work);\n[in] env: The environment that the API is invoked under.\n[in] work: The handle returned by the call to napi_create_async_work.\nReturns napi_ok if the API succeeded.\n\nThis API frees a previously allocated work object.\n\nThis API can be called even if there is a pending JavaScript exception.\n\nnapi_queue_async_work#\nAdded in: v8.0.0 N-API", "doc_id": "7d127025-d5ec-415f-a459-a90aea105e10", "embedding": null, "doc_hash": "d9898a1b3b64861badcf547c1b0088aae153c3c8cbcdd1d63a2c4cf30f9e1f80", "extra_info": null, "node_info": {"start": 521693, "end": 524563}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ed932b46-10c1-4dfe-84d8-4e84509677c8", "3": "e68f3048-a907-494e-b438-18c864bfed0a"}}, "__type__": "1"}, "e68f3048-a907-494e-b438-18c864bfed0a": {"__data__": {"text": "in: v8.0.0 N-API version: 1\nnapi_status napi_delete_async_work(napi_env env,\n                                   napi_async_work work);\n[in] env: The environment that the API is invoked under.\n[in] work: The handle returned by the call to napi_create_async_work.\nReturns napi_ok if the API succeeded.\n\nThis API frees a previously allocated work object.\n\nThis API can be called even if there is a pending JavaScript exception.\n\nnapi_queue_async_work#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_queue_async_work(napi_env env,\n                                  napi_async_work work);\n[in] env: The environment that the API is invoked under.\n[in] work: The handle returned by the call to napi_create_async_work.\nReturns napi_ok if the API succeeded.\n\nThis API requests that the previously allocated work be scheduled for execution. Once it returns successfully, this API must not be called again with the same napi_async_work item or the result will be undefined.\n\nnapi_cancel_async_work#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_cancel_async_work(napi_env env,\n                                   napi_async_work work);\n[in] env: The environment that the API is invoked under.\n[in] work: The handle returned by the call to napi_create_async_work.\nReturns napi_ok if the API succeeded.\n\nThis API cancels queued work if it has not yet been started. If it has already started executing, it cannot be cancelled and napi_generic_failure will be returned. If successful, the complete callback will be invoked with a status value of napi_cancelled. The work should not be deleted before the complete callback invocation, even if it has been successfully cancelled.\n\nThis API can be called even if there is a pending JavaScript exception.\n\nCustom asynchronous operations#\nThe simple asynchronous work APIs above may not be appropriate for every scenario. When using any other asynchronous mechanism, the following APIs are necessary to ensure an asynchronous operation is properly tracked by the runtime.\n\nnapi_async_init#\nAdded in: v8.6.0 N-API version: 1\nnapi_status napi_async_init(napi_env env,\n                            napi_value async_resource,\n                            napi_value async_resource_name,\n                            napi_async_context* result)\n[in] env: The environment that the API is invoked under.\n[in] async_resource: Object associated with the async work that will be passed to possible async_hooks init hooks and can be accessed by async_hooks.executionAsyncResource().\n[in] async_resource_name: Identifier for the kind of resource that is being provided for diagnostic information exposed by the async_hooks API.\n[out] result: The initialized async context.\nReturns napi_ok if the API succeeded.\n\nThe async_resource object needs to be kept alive until napi_async_destroy to keep async_hooks related API acts correctly. In order to retain ABI compatibility with previous versions,", "doc_id": "e68f3048-a907-494e-b438-18c864bfed0a", "embedding": null, "doc_hash": "424403a16d83a70b320e4d7a252706a5ce3e6b0d44a2e20313b1b312d4d549f2", "extra_info": null, "node_info": {"start": 524585, "end": 527502}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7d127025-d5ec-415f-a459-a90aea105e10", "3": "75750ef2-14dc-484f-8ca7-1095d17a1593"}}, "__type__": "1"}, "75750ef2-14dc-484f-8ca7-1095d17a1593": {"__data__": {"text": "             napi_async_context* result)\n[in] env: The environment that the API is invoked under.\n[in] async_resource: Object associated with the async work that will be passed to possible async_hooks init hooks and can be accessed by async_hooks.executionAsyncResource().\n[in] async_resource_name: Identifier for the kind of resource that is being provided for diagnostic information exposed by the async_hooks API.\n[out] result: The initialized async context.\nReturns napi_ok if the API succeeded.\n\nThe async_resource object needs to be kept alive until napi_async_destroy to keep async_hooks related API acts correctly. In order to retain ABI compatibility with previous versions, napi_async_contexts are not maintaining the strong reference to the async_resource objects to avoid introducing causing memory leaks. However, if the async_resource is garbage collected by JavaScript engine before the napi_async_context was destroyed by napi_async_destroy, calling napi_async_context related APIs like napi_open_callback_scope and napi_make_callback can cause problems like loss of async context when using the AsyncLocalStorage API.\n\nIn order to retain ABI compatibility with previous versions, passing NULL for async_resource does not result in an error. However, this is not recommended as this will result poor results with async_hooks init hooks and async_hooks.executionAsyncResource() as the resource is now required by the underlying async_hooks implementation in order to provide the linkage between async callbacks.\n\nnapi_async_destroy#\nAdded in: v8.6.0 N-API version: 1\nnapi_status napi_async_destroy(napi_env env,\n                               napi_async_context async_context);\n[in] env: The environment that the API is invoked under.\n[in] async_context: The async context to be destroyed.\nReturns napi_ok if the API succeeded.\n\nThis API can be called even if there is a pending JavaScript exception.\n\nnapi_make_callback#\nHistory\nN-API version: 1\nNAPI_EXTERN napi_status napi_make_callback(napi_env env,\n                                           napi_async_context async_context,\n                                           napi_value recv,\n                                           napi_value func,\n                                           size_t argc,\n                                           const napi_value* argv,\n                                           napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] async_context: Context for the async operation that is invoking the callback. This should normally be a value previously obtained from napi_async_init. In order to retain ABI compatibility with previous versions, passing NULL for async_context does not result in an error. However, this results in incorrect operation of async hooks. Potential issues include loss of async context when", "doc_id": "75750ef2-14dc-484f-8ca7-1095d17a1593", "embedding": null, "doc_hash": "ff72bf95e875ce400f4eee90e172e4bc562dd41d68f05e9c5bbabb350e329eec", "extra_info": null, "node_info": {"start": 527303, "end": 530153}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e68f3048-a907-494e-b438-18c864bfed0a", "3": "4c375cc3-4156-4314-a63d-e25f123f2fa6"}}, "__type__": "1"}, "4c375cc3-4156-4314-a63d-e25f123f2fa6": {"__data__": {"text": "                              const napi_value* argv,\n                                           napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] async_context: Context for the async operation that is invoking the callback. This should normally be a value previously obtained from napi_async_init. In order to retain ABI compatibility with previous versions, passing NULL for async_context does not result in an error. However, this results in incorrect operation of async hooks. Potential issues include loss of async context when using the AsyncLocalStorage API.\n[in] recv: The this value passed to the called function.\n[in] func: napi_value representing the JavaScript function to be invoked.\n[in] argc: The count of elements in the argv array.\n[in] argv: Array of JavaScript values as napi_value representing the arguments to the function. If argc is zero this parameter may be omitted by passing in NULL.\n[out] result: napi_value representing the JavaScript object returned.\nReturns napi_ok if the API succeeded.\n\nThis method allows a JavaScript function object to be called from a native add-on. This API is similar to napi_call_function. However, it is used to call from native code back into JavaScript after returning from an async operation (when there is no other script on the stack). It is a fairly simple wrapper around node::MakeCallback.\n\nNote it is not necessary to use napi_make_callback from within a napi_async_complete_callback; in that situation the callback's async context has already been set up, so a direct call to napi_call_function is sufficient and appropriate. Use of the napi_make_callback function may be required when implementing custom async behavior that does not use napi_create_async_work.\n\nAny process.nextTicks or Promises scheduled on the microtask queue by JavaScript during the callback are ran before returning back to C/C++.\n\nnapi_open_callback_scope#\nAdded in: v9.6.0 N-API version: 3\nNAPI_EXTERN napi_status napi_open_callback_scope(napi_env env,\n                                                 napi_value resource_object,\n                                                 napi_async_context context,\n                                                 napi_callback_scope* result)\n[in] env: The environment that the API is invoked under.\n[in] resource_object: An object associated with the async work that will be passed to possible async_hooks init hooks. This parameter has been deprecated and is ignored at runtime. Use the async_resource parameter in napi_async_init instead.\n[in] context: Context for the async operation that is invoking the callback. This should be a value previously obtained from napi_async_init.\n[out] result: The newly created scope.\nThere are cases (for example, resolving promises) where it is necessary to have the equivalent of the scope associated with a callback in place when making certain Node-API calls. If there is no other script on the stack the napi_open_callback_scope and napi_close_callback_scope functions can be used to open/close the required scope.\n\nnapi_close_callback_scope#\nAdded in: v9.6.0 N-API version: 3\nNAPI_EXTERN napi_status", "doc_id": "4c375cc3-4156-4314-a63d-e25f123f2fa6", "embedding": null, "doc_hash": "6d834232ca07e1480f28fde8a5a639fa770fd325aaf3b4d7ebb18da928513872", "extra_info": null, "node_info": {"start": 530315, "end": 533477}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "75750ef2-14dc-484f-8ca7-1095d17a1593", "3": "7969a43d-700e-440c-af7e-add7029cdd95"}}, "__type__": "1"}, "7969a43d-700e-440c-af7e-add7029cdd95": {"__data__": {"text": "This parameter has been deprecated and is ignored at runtime. Use the async_resource parameter in napi_async_init instead.\n[in] context: Context for the async operation that is invoking the callback. This should be a value previously obtained from napi_async_init.\n[out] result: The newly created scope.\nThere are cases (for example, resolving promises) where it is necessary to have the equivalent of the scope associated with a callback in place when making certain Node-API calls. If there is no other script on the stack the napi_open_callback_scope and napi_close_callback_scope functions can be used to open/close the required scope.\n\nnapi_close_callback_scope#\nAdded in: v9.6.0 N-API version: 3\nNAPI_EXTERN napi_status napi_close_callback_scope(napi_env env,\n                                                  napi_callback_scope scope)\n[in] env: The environment that the API is invoked under.\n[in] scope: The scope to be closed.\nThis API can be called even if there is a pending JavaScript exception.\n\nVersion management#\nnapi_get_node_version#\nAdded in: v8.4.0 N-API version: 1\ntypedef struct {\n  uint32_t major;\n  uint32_t minor;\n  uint32_t patch;\n  const char* release;\n} napi_node_version;\n\nnapi_status napi_get_node_version(napi_env env,\n                                  const napi_node_version** version);\n[in] env: The environment that the API is invoked under.\n[out] version: A pointer to version information for Node.js itself.\nReturns napi_ok if the API succeeded.\n\nThis function fills the version struct with the major, minor, and patch version of Node.js that is currently running, and the release field with the value of process.release.name.\n\nThe returned buffer is statically allocated and does not need to be freed.\n\nnapi_get_version#\nAdded in: v8.0.0 N-API version: 1\nnapi_status napi_get_version(napi_env env,\n                             uint32_t* result);\n[in] env: The environment that the API is invoked under.\n[out] result: The highest version of Node-API supported.\nReturns napi_ok if the API succeeded.\n\nThis API returns the highest Node-API version supported by the Node.js runtime. Node-API is planned to be additive such that newer releases of Node.js may support additional API functions. In order to allow an addon to use a newer function when running with versions of Node.js that support it, while providing fallback behavior when running with Node.js versions that don't support it:\n\nCall napi_get_version() to determine if the API is available.\nIf available, dynamically load a pointer to the function using uv_dlsym().\nUse the dynamically loaded pointer to invoke the function.\nIf the function is not available, provide an alternate implementation that does not use the function.\nMemory management#\nnapi_adjust_external_memory#\nAdded in: v8.5.0 N-API version: 1\nNAPI_EXTERN napi_status napi_adjust_external_memory(napi_env env,\n                                                    int64_t change_in_bytes,\n                                                ", "doc_id": "7969a43d-700e-440c-af7e-add7029cdd95", "embedding": null, "doc_hash": "bd4601da8e80474433c93d80fb3243c0c3e77fe1462d29ccb153559123ed8e84", "extra_info": null, "node_info": {"start": 533273, "end": 536269}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4c375cc3-4156-4314-a63d-e25f123f2fa6", "3": "3e6d4cf1-dc1f-47b2-a2e1-6c9c84d2a8fb"}}, "__type__": "1"}, "3e6d4cf1-dc1f-47b2-a2e1-6c9c84d2a8fb": {"__data__": {"text": "the dynamically loaded pointer to invoke the function.\nIf the function is not available, provide an alternate implementation that does not use the function.\nMemory management#\nnapi_adjust_external_memory#\nAdded in: v8.5.0 N-API version: 1\nNAPI_EXTERN napi_status napi_adjust_external_memory(napi_env env,\n                                                    int64_t change_in_bytes,\n                                                    int64_t* result);\n[in] env: The environment that the API is invoked under.\n[in] change_in_bytes: The change in externally allocated memory that is kept alive by JavaScript objects.\n[out] result: The adjusted value\nReturns napi_ok if the API succeeded.\n\nThis function gives V8 an indication of the amount of externally allocated memory that is kept alive by JavaScript objects (i.e. a JavaScript object that points to its own memory allocated by a native addon). Registering externally allocated memory will trigger global garbage collections more often than it would otherwise.\n\nPromises#\nNode-API provides facilities for creating Promise objects as described in Section 25.4 of the ECMA specification. It implements promises as a pair of objects. When a promise is created by napi_create_promise(), a \"deferred\" object is created and returned alongside the Promise. The deferred object is bound to the created Promise and is the only means to resolve or reject the Promise using napi_resolve_deferred() or napi_reject_deferred(). The deferred object that is created by napi_create_promise() is freed by napi_resolve_deferred() or napi_reject_deferred(). The Promise object may be returned to JavaScript where it can be used in the usual fashion.\n\nFor example, to create a promise and pass it to an asynchronous worker:\n\nnapi_deferred deferred;\nnapi_value promise;\nnapi_status status;\n\n// Create the promise.\nstatus = napi_create_promise(env, &deferred, &promise);\nif (status != napi_ok) return NULL;\n\n// Pass the deferred to a function that performs an asynchronous action.\ndo_something_asynchronous(deferred);\n\n// Return the promise to JS\nreturn promise;\nThe above function do_something_asynchronous() would perform its asynchronous action and then it would resolve or reject the deferred, thereby concluding the promise and freeing the deferred:\n\nnapi_deferred deferred;\nnapi_value undefined;\nnapi_status status;\n\n// Create a value with which to conclude the deferred.\nstatus = napi_get_undefined(env, &undefined);\nif (status != napi_ok) return NULL;\n\n// Resolve or reject the promise associated with the deferred depending on\n// whether the asynchronous action succeeded.\nif (asynchronous_action_succeeded) {\n  status = napi_resolve_deferred(env, deferred, undefined);\n} else {\n  status = napi_reject_deferred(env, deferred, undefined);\n}\nif (status != napi_ok) return NULL;\n\n// At this point the deferred has been freed, so we should assign NULL to it.\ndeferred = NULL;\nnapi_create_promise#\nAdded in: v8.5.0 N-API version: 1\nnapi_status napi_create_promise(napi_env env,\n                                napi_deferred* deferred,\n                         ", "doc_id": "3e6d4cf1-dc1f-47b2-a2e1-6c9c84d2a8fb", "embedding": null, "doc_hash": "2ec0b00fe61411dccc045d0a7eea04ebf8a5cc9c446dfa2c65bbe15523a909c2", "extra_info": null, "node_info": {"start": 536600, "end": 539692}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7969a43d-700e-440c-af7e-add7029cdd95", "3": "fd4d54c8-1b64-4b2b-b545-f409ff747077"}}, "__type__": "1"}, "fd4d54c8-1b64-4b2b-b545-f409ff747077": {"__data__": {"text": "status = napi_resolve_deferred(env, deferred, undefined);\n} else {\n  status = napi_reject_deferred(env, deferred, undefined);\n}\nif (status != napi_ok) return NULL;\n\n// At this point the deferred has been freed, so we should assign NULL to it.\ndeferred = NULL;\nnapi_create_promise#\nAdded in: v8.5.0 N-API version: 1\nnapi_status napi_create_promise(napi_env env,\n                                napi_deferred* deferred,\n                                napi_value* promise);\n[in] env: The environment that the API is invoked under.\n[out] deferred: A newly created deferred object which can later be passed to napi_resolve_deferred() or napi_reject_deferred() to resolve resp. reject the associated promise.\n[out] promise: The JavaScript promise associated with the deferred object.\nReturns napi_ok if the API succeeded.\n\nThis API creates a deferred object and a JavaScript promise.\n\nnapi_resolve_deferred#\nAdded in: v8.5.0 N-API version: 1\nnapi_status napi_resolve_deferred(napi_env env,\n                                  napi_deferred deferred,\n                                  napi_value resolution);\n[in] env: The environment that the API is invoked under.\n[in] deferred: The deferred object whose associated promise to resolve.\n[in] resolution: The value with which to resolve the promise.\nThis API resolves a JavaScript promise by way of the deferred object with which it is associated. Thus, it can only be used to resolve JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using napi_create_promise() and the deferred object returned from that call must have been retained in order to be passed to this API.\n\nThe deferred object is freed upon successful completion.\n\nnapi_reject_deferred#\nAdded in: v8.5.0 N-API version: 1\nnapi_status napi_reject_deferred(napi_env env,\n                                 napi_deferred deferred,\n                                 napi_value rejection);\n[in] env: The environment that the API is invoked under.\n[in] deferred: The deferred object whose associated promise to resolve.\n[in] rejection: The value with which to reject the promise.\nThis API rejects a JavaScript promise by way of the deferred object with which it is associated. Thus, it can only be used to reject JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using napi_create_promise() and the deferred object returned from that call must have been retained in order to be passed to this API.\n\nThe deferred object is freed upon successful completion.\n\nnapi_is_promise#\nAdded in: v8.5.0 N-API version: 1\nnapi_status napi_is_promise(napi_env env,\n                            napi_value value,\n                            bool*", "doc_id": "fd4d54c8-1b64-4b2b-b545-f409ff747077", "embedding": null, "doc_hash": "306f792a72ae6e717b2e80c1ebe67cbb1c9eb07c958226478638485facc2a3af", "extra_info": null, "node_info": {"start": 539647, "end": 542454}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3e6d4cf1-dc1f-47b2-a2e1-6c9c84d2a8fb", "3": "cfcb2c9e-791d-407a-9083-78121295a031"}}, "__type__": "1"}, "cfcb2c9e-791d-407a-9083-78121295a031": {"__data__": {"text": "it is associated. Thus, it can only be used to reject JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using napi_create_promise() and the deferred object returned from that call must have been retained in order to be passed to this API.\n\nThe deferred object is freed upon successful completion.\n\nnapi_is_promise#\nAdded in: v8.5.0 N-API version: 1\nnapi_status napi_is_promise(napi_env env,\n                            napi_value value,\n                            bool* is_promise);\n[in] env: The environment that the API is invoked under.\n[in] value: The value to examine\n[out] is_promise: Flag indicating whether promise is a native promise object (that is, a promise object created by the underlying engine).\nScript execution#\nNode-API provides an API for executing a string containing JavaScript using the underlying JavaScript engine.\n\nnapi_run_script#\nAdded in: v8.5.0 N-API version: 1\nNAPI_EXTERN napi_status napi_run_script(napi_env env,\n                                        napi_value script,\n                                        napi_value* result);\n[in] env: The environment that the API is invoked under.\n[in] script: A JavaScript string containing the script to execute.\n[out] result: The value resulting from having executed the script.\nThis function executes a string of JavaScript code and returns its result with the following caveats:\n\nUnlike eval, this function does not allow the script to access the current lexical scope, and therefore also does not allow to access the module scope, meaning that pseudo-globals such as require will not be available.\nThe script can access the global scope. Function and var declarations in the script will be added to the global object. Variable declarations made using let and const will be visible globally, but will not be added to the global object.\nThe value of this is global within the script.\nlibuv event loop#\nNode-API provides a function for getting the current event loop associated with a specific napi_env.\n\nnapi_get_uv_event_loop#\nAdded in: v9.3.0, v8.10.0 N-API version: 2\nNAPI_EXTERN napi_status napi_get_uv_event_loop(napi_env env,\n                                               struct uv_loop_s** loop);\n[in] env: The environment that the API is invoked under.\n[out] loop: The current libuv loop instance.\nAsynchronous thread-safe function calls#\nJavaScript functions can normally only be called from a native addon's main thread. If an addon creates additional threads, then Node-API functions that require a napi_env, napi_value, or napi_ref must not be called from those threads.\n\nWhen an addon has additional threads and JavaScript functions need to be invoked based on the processing completed by those threads, those threads must communicate with the addon's main thread so that the main thread can invoke the JavaScript function on their behalf. The thread-safe function APIs provide an easy way to do this.\n\nThese APIs provide the type napi_threadsafe_function as well as APIs to create, destroy, and call objects of this type. napi_create_threadsafe_function() creates a persistent reference to a napi_value that holds a JavaScript function which can be called from multiple threads. The calls happen", "doc_id": "cfcb2c9e-791d-407a-9083-78121295a031", "embedding": null, "doc_hash": "6324995386e77c1d486613308eb1b59f68fcced425d2ef11a1fda87f740c4dc6", "extra_info": null, "node_info": {"start": 542361, "end": 545642}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fd4d54c8-1b64-4b2b-b545-f409ff747077", "3": "0f7d4166-ed18-4659-98a1-7adb90e10e13"}}, "__type__": "1"}, "0f7d4166-ed18-4659-98a1-7adb90e10e13": {"__data__": {"text": "addon's main thread. If an addon creates additional threads, then Node-API functions that require a napi_env, napi_value, or napi_ref must not be called from those threads.\n\nWhen an addon has additional threads and JavaScript functions need to be invoked based on the processing completed by those threads, those threads must communicate with the addon's main thread so that the main thread can invoke the JavaScript function on their behalf. The thread-safe function APIs provide an easy way to do this.\n\nThese APIs provide the type napi_threadsafe_function as well as APIs to create, destroy, and call objects of this type. napi_create_threadsafe_function() creates a persistent reference to a napi_value that holds a JavaScript function which can be called from multiple threads. The calls happen asynchronously. This means that values with which the JavaScript callback is to be called will be placed in a queue, and, for each value in the queue, a call will eventually be made to the JavaScript function.\n\nUpon creation of a napi_threadsafe_function a napi_finalize callback can be provided. This callback will be invoked on the main thread when the thread-safe function is about to be destroyed. It receives the context and the finalize data given during construction, and provides an opportunity for cleaning up after the threads e.g. by calling uv_thread_join(). Aside from the main loop thread, no threads should be using the thread-safe function after the finalize callback completes.\n\nThe context given during the call to napi_create_threadsafe_function() can be retrieved from any thread with a call to napi_get_threadsafe_function_context().\n\nCalling a thread-safe function#\nnapi_call_threadsafe_function() can be used for initiating a call into JavaScript. napi_call_threadsafe_function() accepts a parameter which controls whether the API behaves blockingly. If set to napi_tsfn_nonblocking, the API behaves non-blockingly, returning napi_queue_full if the queue was full, preventing data from being successfully added to the queue. If set to napi_tsfn_blocking, the API blocks until space becomes available in the queue. napi_call_threadsafe_function() never blocks if the thread-safe function was created with a maximum queue size of 0.\n\nnapi_call_threadsafe_function() should not be called with napi_tsfn_blocking from a JavaScript thread, because, if the queue is full, it may cause the JavaScript thread to deadlock.\n\nThe actual call into JavaScript is controlled by the callback given via the call_js_cb parameter. call_js_cb is invoked on the main thread once for each value that was placed into the queue by a successful call to napi_call_threadsafe_function(). If such a callback is not given, a default callback will be used, and the resulting JavaScript call will have no arguments. The call_js_cb callback receives the JavaScript function to call as a napi_value in its parameters, as well as the void* context pointer used when creating the napi_threadsafe_function, and the next data pointer that was created by one of the secondary threads. The callback can then use an API such as napi_call_function() to call into JavaScript.\n\nThe callback may also be invoked with env and call_js_cb both set to NULL to indicate that calls into JavaScript are no longer possible, while items remain in the queue that may need to be freed. This normally occurs when the Node.js process exits while there is a thread-safe function still active.\n\nIt is not necessary to call into JavaScript via napi_make_callback() because Node-API runs call_js_cb in a context appropriate for callbacks.\n\nReference counting of thread-safe functions#\nThreads can be added to and removed from a napi_threadsafe_function object during its existence. Thus, in addition to specifying an initial number of threads upon creation, napi_acquire_threadsafe_function can be called to indicate that a new thread will start making use of the thread-safe function. Similarly, napi_release_threadsafe_function can be called to indicate that an existing thread will stop making use of the thread-safe", "doc_id": "0f7d4166-ed18-4659-98a1-7adb90e10e13", "embedding": null, "doc_hash": "9e6eede21ecfd5661392a62aac3898920a01aaf0411f102741e765f0f5fa4480", "extra_info": null, "node_info": {"start": 545401, "end": 549483}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cfcb2c9e-791d-407a-9083-78121295a031", "3": "d9ece896-f1d7-4571-b397-5eae5396430e"}}, "__type__": "1"}, "d9ece896-f1d7-4571-b397-5eae5396430e": {"__data__": {"text": "into JavaScript are no longer possible, while items remain in the queue that may need to be freed. This normally occurs when the Node.js process exits while there is a thread-safe function still active.\n\nIt is not necessary to call into JavaScript via napi_make_callback() because Node-API runs call_js_cb in a context appropriate for callbacks.\n\nReference counting of thread-safe functions#\nThreads can be added to and removed from a napi_threadsafe_function object during its existence. Thus, in addition to specifying an initial number of threads upon creation, napi_acquire_threadsafe_function can be called to indicate that a new thread will start making use of the thread-safe function. Similarly, napi_release_threadsafe_function can be called to indicate that an existing thread will stop making use of the thread-safe function.\n\nnapi_threadsafe_function objects are destroyed when every thread which uses the object has called napi_release_threadsafe_function() or has received a return status of napi_closing in response to a call to napi_call_threadsafe_function. The queue is emptied before the napi_threadsafe_function is destroyed. napi_release_threadsafe_function() should be the last API call made in conjunction with a given napi_threadsafe_function, because after the call completes, there is no guarantee that the napi_threadsafe_function is still allocated. For the same reason, do not use a thread-safe function after receiving a return value of napi_closing in response to a call to napi_call_threadsafe_function. Data associated with the napi_threadsafe_function can be freed in its napi_finalize callback which was passed to napi_create_threadsafe_function(). The parameter initial_thread_count of napi_create_threadsafe_function marks the initial number of acquisitions of the thread-safe functions, instead of calling napi_acquire_threadsafe_function multiple times at creation.\n\nOnce the number of threads making use of a napi_threadsafe_function reaches zero, no further threads can start making use of it by calling napi_acquire_threadsafe_function(). In fact, all subsequent API calls associated with it, except napi_release_threadsafe_function(), will return an error value of napi_closing.\n\nThe thread-safe function can be \"aborted\" by giving a value of napi_tsfn_abort to napi_release_threadsafe_function(). This will cause all subsequent APIs associated with the thread-safe function except napi_release_threadsafe_function() to return napi_closing even before its reference count reaches zero. In particular, napi_call_threadsafe_function() will return napi_closing, thus informing the threads that it is no longer possible to make asynchronous calls to the thread-safe function. This can be used as a criterion for terminating the thread. Upon receiving a return value of napi_closing from napi_call_threadsafe_function() a thread must not use the thread-safe function anymore because it is no longer guaranteed to be allocated.\n\nDeciding whether to keep the process running#\nSimilarly to libuv handles, thread-safe functions can be \"referenced\" and \"unreferenced\". A \"referenced\" thread-safe function will cause the event loop on the thread on which it is created to remain alive until the thread-safe function is destroyed. In contrast, an \"unreferenced\" thread-safe function will not prevent the event loop from exiting. The APIs napi_ref_threadsafe_function and napi_unref_threadsafe_function exist for this purpose.\n\nNeither does napi_unref_threadsafe_function mark the thread-safe functions as able to be destroyed nor does napi_ref_threadsafe_function prevent it from being destroyed.\n\nnapi_create_threadsafe_function#\nHistory\nN-API version: 4\nNAPI_EXTERN napi_status\nnapi_create_threadsafe_function(napi_env env,\n                                napi_value func,\n               ", "doc_id": "d9ece896-f1d7-4571-b397-5eae5396430e", "embedding": null, "doc_hash": "04867a264858569cb1f5797816d72cc0278e2400be44747155d5c2b46f1f8d9f", "extra_info": null, "node_info": {"start": 549455, "end": 553276}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0f7d4166-ed18-4659-98a1-7adb90e10e13", "3": "1aa78ba9-2832-448b-93ba-98eeac71d48e"}}, "__type__": "1"}, "1aa78ba9-2832-448b-93ba-98eeac71d48e": {"__data__": {"text": "an \"unreferenced\" thread-safe function will not prevent the event loop from exiting. The APIs napi_ref_threadsafe_function and napi_unref_threadsafe_function exist for this purpose.\n\nNeither does napi_unref_threadsafe_function mark the thread-safe functions as able to be destroyed nor does napi_ref_threadsafe_function prevent it from being destroyed.\n\nnapi_create_threadsafe_function#\nHistory\nN-API version: 4\nNAPI_EXTERN napi_status\nnapi_create_threadsafe_function(napi_env env,\n                                napi_value func,\n                                napi_value async_resource,\n                                napi_value async_resource_name,\n                                size_t max_queue_size,\n                                size_t initial_thread_count,\n                                void* thread_finalize_data,\n                                napi_finalize thread_finalize_cb,\n                                void* context,\n                                napi_threadsafe_function_call_js call_js_cb,\n                                napi_threadsafe_function* result);\n[in] env: The environment that the API is invoked under.\n[in] func: An optional JavaScript function to call from another thread. It must be provided if NULL is passed to call_js_cb.\n[in] async_resource: An optional object associated with the async work that will be passed to possible async_hooks init hooks.\n[in] async_resource_name: A JavaScript string to provide an identifier for the kind of resource that is being provided for diagnostic information exposed by the async_hooks API.\n[in] max_queue_size: Maximum size of the queue. 0 for no limit.\n[in] initial_thread_count: The initial number of acquisitions, i.e. the initial number of threads, including the main thread, which will be making use of this function.\n[in] thread_finalize_data: Optional data to be passed to thread_finalize_cb.\n[in] thread_finalize_cb: Optional function to call when the napi_threadsafe_function is being destroyed.\n[in] context: Optional data to attach to the resulting napi_threadsafe_function.\n[in] call_js_cb: Optional callback which calls the JavaScript function in response to a call on a different thread. This callback will be called on the main thread. If not given, the JavaScript function will be called with no parameters and with undefined as its this value. napi_threadsafe_function_call_js provides more details.\n[out] result: The asynchronous thread-safe JavaScript function.\nnapi_get_threadsafe_function_context#\nAdded in: v10.6.0 N-API version: 4\nNAPI_EXTERN napi_status\nnapi_get_threadsafe_function_context(napi_threadsafe_function func,\n                                     void**", "doc_id": "1aa78ba9-2832-448b-93ba-98eeac71d48e", "embedding": null, "doc_hash": "49117ea1565f00a44132a3cc9e18c21989a6e2bbe55b2ce96903cd8d254d7db4", "extra_info": null, "node_info": {"start": 553531, "end": 556204}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d9ece896-f1d7-4571-b397-5eae5396430e", "3": "c754eb51-6dd4-46ef-a082-401cf0130f44"}}, "__type__": "1"}, "c754eb51-6dd4-46ef-a082-401cf0130f44": {"__data__": {"text": "call_js_cb: Optional callback which calls the JavaScript function in response to a call on a different thread. This callback will be called on the main thread. If not given, the JavaScript function will be called with no parameters and with undefined as its this value. napi_threadsafe_function_call_js provides more details.\n[out] result: The asynchronous thread-safe JavaScript function.\nnapi_get_threadsafe_function_context#\nAdded in: v10.6.0 N-API version: 4\nNAPI_EXTERN napi_status\nnapi_get_threadsafe_function_context(napi_threadsafe_function func,\n                                     void** result);\n[in] func: The thread-safe function for which to retrieve the context.\n[out] result: The location where to store the context.\nThis API may be called from any thread which makes use of func.\n\nnapi_call_threadsafe_function#\nHistory\nN-API version: 4\nNAPI_EXTERN napi_status\nnapi_call_threadsafe_function(napi_threadsafe_function func,\n                              void* data,\n                              napi_threadsafe_function_call_mode is_blocking);\n[in] func: The asynchronous thread-safe JavaScript function to invoke.\n[in] data: Data to send into JavaScript via the callback call_js_cb provided during the creation of the thread-safe JavaScript function.\n[in] is_blocking: Flag whose value can be either napi_tsfn_blocking to indicate that the call should block if the queue is full or napi_tsfn_nonblocking to indicate that the call should return immediately with a status of napi_queue_full whenever the queue is full.\nThis API should not be called with napi_tsfn_blocking from a JavaScript thread, because, if the queue is full, it may cause the JavaScript thread to deadlock.\n\nThis API will return napi_closing if napi_release_threadsafe_function() was called with abort set to napi_tsfn_abort from any thread. The value is only added to the queue if the API returns napi_ok.\n\nThis API may be called from any thread which makes use of func.\n\nnapi_acquire_threadsafe_function#\nAdded in: v10.6.0 N-API version: 4\nNAPI_EXTERN napi_status\nnapi_acquire_threadsafe_function(napi_threadsafe_function func);\n[in] func: The asynchronous thread-safe JavaScript function to start making use of.\nA thread should call this API before passing func to any other thread-safe function APIs to indicate that it will be making use of func. This prevents func from being destroyed when all other threads have stopped making use of it.\n\nThis API may be called from any thread which will start making use of func.\n\nnapi_release_threadsafe_function#\nAdded in: v10.6.0 N-API version: 4\nNAPI_EXTERN napi_status\nnapi_release_threadsafe_function(napi_threadsafe_function func,\n                                 napi_threadsafe_function_release_mode mode);\n[in] func: The asynchronous thread-safe JavaScript function whose reference count to decrement.\n[in] mode: Flag whose value can be either napi_tsfn_release to indicate that the current thread will make no further calls to the thread-safe function, or napi_tsfn_abort to indicate that in addition to the current thread, no other thread should make any further calls to the thread-safe function. If set to napi_tsfn_abort, further calls to napi_call_threadsafe_function() will return napi_closing, and no further values will be placed in the queue.\nA thread should call this API when it stops making use", "doc_id": "c754eb51-6dd4-46ef-a082-401cf0130f44", "embedding": null, "doc_hash": "31d31384e5ceef2602bde63d160e38601436777839b9f3ad05c062e652f9b739", "extra_info": null, "node_info": {"start": 556160, "end": 559507}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1aa78ba9-2832-448b-93ba-98eeac71d48e", "3": "5cd466d8-861b-4177-908c-7cf5c36e50a1"}}, "__type__": "1"}, "5cd466d8-861b-4177-908c-7cf5c36e50a1": {"__data__": {"text": "                          napi_threadsafe_function_release_mode mode);\n[in] func: The asynchronous thread-safe JavaScript function whose reference count to decrement.\n[in] mode: Flag whose value can be either napi_tsfn_release to indicate that the current thread will make no further calls to the thread-safe function, or napi_tsfn_abort to indicate that in addition to the current thread, no other thread should make any further calls to the thread-safe function. If set to napi_tsfn_abort, further calls to napi_call_threadsafe_function() will return napi_closing, and no further values will be placed in the queue.\nA thread should call this API when it stops making use of func. Passing func to any thread-safe APIs after having called this API has undefined results, as func may have been destroyed.\n\nThis API may be called from any thread which will stop making use of func.\n\nnapi_ref_threadsafe_function#\nAdded in: v10.6.0 N-API version: 4\nNAPI_EXTERN napi_status\nnapi_ref_threadsafe_function(napi_env env, napi_threadsafe_function func);\n[in] env: The environment that the API is invoked under.\n[in] func: The thread-safe function to reference.\nThis API is used to indicate that the event loop running on the main thread should not exit until func has been destroyed. Similar to uv_ref it is also idempotent.\n\nNeither does napi_unref_threadsafe_function mark the thread-safe functions as able to be destroyed nor does napi_ref_threadsafe_function prevent it from being destroyed. napi_acquire_threadsafe_function and napi_release_threadsafe_function are available for that purpose.\n\nThis API may only be called from the main thread.\n\nnapi_unref_threadsafe_function#\nAdded in: v10.6.0 N-API version: 4\nNAPI_EXTERN napi_status\nnapi_unref_threadsafe_function(napi_env env, napi_threadsafe_function func);\n[in] env: The environment that the API is invoked under.\n[in] func: The thread-safe function to unreference.\nThis API is used to indicate that the event loop running on the main thread may exit before func is destroyed. Similar to uv_unref it is also idempotent.\n\nThis API may only be called from the main thread.\n\nMiscellaneous utilities#\nnode_api_get_module_file_name#\nAdded in: v15.9.0, v14.18.0, v12.22.0\nStability: 1 - Experimental\nNAPI_EXTERN napi_status\nnode_api_get_module_file_name(napi_env env, const char** result);\n[in] env: The environment that the API is invoked under.\n[out] result: A URL containing the absolute path of the location from which the add-on was loaded. For a file on the local file system it will start with file://. The string is null-terminated and owned by env and must thus not be modified or freed.\nresult may be an empty string if the add-on loading process fails to establish the add-on's file name during loading.\n\nC++ embedder API#\nNode.js provides a number of C++ APIs that can be used to execute JavaScript in a Node.js environment from other C++ software.\n\nThe documentation for these APIs can be found in src/node.h in the Node.js source tree. In addition to the APIs exposed by Node.js, some required concepts are provided by the V8 embedder API.\n\nBecause using Node.js as an embedded library is different from writing code that is executed by Node.js, breaking changes do not follow typical Node.js deprecation policy and may occur on each semver-major release without prior warning.\n\nExample embedding application#\nThe following sections will provide an overview over how to use these APIs to create an application from scratch that will perform the equivalent of node -e <code>, i.e. that will take a piece of JavaScript and run it in a Node.js-specific", "doc_id": "5cd466d8-861b-4177-908c-7cf5c36e50a1", "embedding": null, "doc_hash": "4dedcd346aadf7839a8b59e094c4bba2f94f4d71386b0b58422a80da93edbd21", "extra_info": null, "node_info": {"start": 559451, "end": 563060}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c754eb51-6dd4-46ef-a082-401cf0130f44", "3": "4a28f738-620b-4073-9c26-9f8b29d91ac9"}}, "__type__": "1"}, "4a28f738-620b-4073-9c26-9f8b29d91ac9": {"__data__": {"text": "APIs that can be used to execute JavaScript in a Node.js environment from other C++ software.\n\nThe documentation for these APIs can be found in src/node.h in the Node.js source tree. In addition to the APIs exposed by Node.js, some required concepts are provided by the V8 embedder API.\n\nBecause using Node.js as an embedded library is different from writing code that is executed by Node.js, breaking changes do not follow typical Node.js deprecation policy and may occur on each semver-major release without prior warning.\n\nExample embedding application#\nThe following sections will provide an overview over how to use these APIs to create an application from scratch that will perform the equivalent of node -e <code>, i.e. that will take a piece of JavaScript and run it in a Node.js-specific environment.\n\nThe full code can be found in the Node.js source tree.\n\nSetting up per-process state#\nNode.js requires some per-process state management in order to run:\n\nArguments parsing for Node.js CLI options,\nV8 per-process requirements, such as a v8::Platform instance.\nThe following example shows how these can be set up. Some class names are from the node and v8 C++ namespaces, respectively.\n\nint main(int argc, char** argv) {\n  argv = uv_setup_args(argc, argv);\n  std::vector<std::string> args(argv, argv + argc);\n  // Parse Node.js CLI options, and print any errors that have occurred while\n  // trying to parse them.\n  std::unique_ptr<node::InitializationResult> result =\n      node::InitializeOncePerProcess(args, {\n        node::ProcessInitializationFlags::kNoInitializeV8,\n        node::ProcessInitializationFlags::kNoInitializeNodeV8Platform\n      });\n\n  for (const std::string& error : result->errors())\n    fprintf(stderr, \"%s: %s\\n\", args[0].c_str(), error.c_str());\n  if (result->early_return() != 0) {\n    return result->exit_code();\n  }\n\n  // Create a v8::Platform instance. `MultiIsolatePlatform::Create()` is a way\n  // to create a v8::Platform instance that Node.js can use when creating\n  // Worker threads. When no `MultiIsolatePlatform` instance is present,\n  // Worker threads are disabled.\n  std::unique_ptr<MultiIsolatePlatform> platform =\n      MultiIsolatePlatform::Create(4);\n  V8::InitializePlatform(platform.get());\n  V8::Initialize();\n\n  // See below for the contents of this function.\n  int ret = RunNodeInstance(\n      platform.get(), result->args(), result->exec_args());\n\n  V8::Dispose();\n  V8::DisposePlatform();\n\n  node::TearDownOncePerProcess();\n  return ret;\n}\nPer-instance state#\nHistory\nNode.js has a concept of a \u201cNode.js instance\u201d, that is commonly being referred to as node::Environment. Each node::Environment is associated with:\n\nExactly one v8::Isolate, i.e. one JS Engine instance,\nExactly one uv_loop_t, i.e. one event loop, and\nA number of v8::Contexts, but exactly one main v8::Context.\nOne node::IsolateData instance that contains information that could be shared by multiple node::Environments that use the same v8::Isolate. Currently, no testing if performed for this scenario.\nIn order to set up a v8::Isolate, an v8::ArrayBuffer::Allocator needs to be provided. One possible choice is the default Node.js allocator, which can be created through node::ArrayBufferAllocator::Create(). Using the Node.js allocator allows minor performance optimizations when addons use the Node.js C++ Buffer API, and is required in order to track ArrayBuffer memory in process.memoryUsage().\n\nAdditionally, each v8::Isolate that is used for a Node.js instance needs to be registered and", "doc_id": "4a28f738-620b-4073-9c26-9f8b29d91ac9", "embedding": null, "doc_hash": "e0a01e9b4213347277b30bd60cdfe57fc8f33b1af5c9e832e6f34541181eae91", "extra_info": null, "node_info": {"start": 562947, "end": 566471}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5cd466d8-861b-4177-908c-7cf5c36e50a1", "3": "c6c0295d-365b-4f33-8b57-10ce961d5233"}}, "__type__": "1"}, "c6c0295d-365b-4f33-8b57-10ce961d5233": {"__data__": {"text": "uv_loop_t, i.e. one event loop, and\nA number of v8::Contexts, but exactly one main v8::Context.\nOne node::IsolateData instance that contains information that could be shared by multiple node::Environments that use the same v8::Isolate. Currently, no testing if performed for this scenario.\nIn order to set up a v8::Isolate, an v8::ArrayBuffer::Allocator needs to be provided. One possible choice is the default Node.js allocator, which can be created through node::ArrayBufferAllocator::Create(). Using the Node.js allocator allows minor performance optimizations when addons use the Node.js C++ Buffer API, and is required in order to track ArrayBuffer memory in process.memoryUsage().\n\nAdditionally, each v8::Isolate that is used for a Node.js instance needs to be registered and unregistered with the MultiIsolatePlatform instance, if one is being used, in order for the platform to know which event loop to use for tasks scheduled by the v8::Isolate.\n\nThe node::NewIsolate() helper function creates a v8::Isolate, sets it up with some Node.js-specific hooks (e.g. the Node.js error handler), and registers it with the platform automatically.\n\nint RunNodeInstance(MultiIsolatePlatform* platform,\n                    const std::vector<std::string>& args,\n                    const std::vector<std::string>& exec_args) {\n  int exit_code = 0;\n\n  // Setup up a libuv event loop, v8::Isolate, and Node.js Environment.\n  std::vector<std::string> errors;\n  std::unique_ptr<CommonEnvironmentSetup> setup =\n      CommonEnvironmentSetup::Create(platform, &errors, args, exec_args);\n  if (!setup) {\n    for (const std::string& err : errors)\n      fprintf(stderr, \"%s: %s\\n\", args[0].c_str(), err.c_str());\n    return 1;\n  }\n\n  Isolate* isolate = setup->isolate();\n  Environment* env = setup->env();\n\n  {\n    Locker locker(isolate);\n    Isolate::Scope isolate_scope(isolate);\n    HandleScope handle_scope(isolate);\n    // The v8::Context needs to be entered when node::CreateEnvironment() and\n    // node::LoadEnvironment() are being called.\n    Context::Scope context_scope(setup->context());\n\n    // Set up the Node.js instance for execution, and run code inside of it.\n    // There is also a variant that takes a callback and provides it with\n    // the `require` and `process` objects, so that it can manually compile\n    // and run scripts as needed.\n    // The `require` function inside this script does *not* access the file\n    // system, and can only load built-in Node.js modules.\n    // `module.createRequire()` is being used to create one that is able to\n    // load files from the disk, and uses the standard CommonJS file loader\n    // instead of the internal-only `require` function.\n    MaybeLocal<Value> loadenv_ret = node::LoadEnvironment(\n        env,\n        \"const publicRequire =\"\n        \"  require('node:module').createRequire(process.cwd() + '/');\"\n        \"globalThis.require = publicRequire;\"\n        \"require('node:vm').runInThisContext(process.argv[1]);\");\n\n    if (loadenv_ret.IsEmpty())  // There has been a JS exception.\n      return 1;\n\n    exit_code = node::SpinEventLoop(env).FromMaybe(1);\n\n    // node::Stop() can be used to explicitly stop the event loop and keep\n    // further", "doc_id": "c6c0295d-365b-4f33-8b57-10ce961d5233", "embedding": null, "doc_hash": "f591f8d983927e8ba80bae7e9b6d627336b2c7f62a8df9fe82521157365090bd", "extra_info": null, "node_info": {"start": 566467, "end": 569673}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4a28f738-620b-4073-9c26-9f8b29d91ac9", "3": "1872616f-d9a0-4d46-93b9-a88abec4fd45"}}, "__type__": "1"}, "1872616f-d9a0-4d46-93b9-a88abec4fd45": {"__data__": {"text": "  MaybeLocal<Value> loadenv_ret = node::LoadEnvironment(\n        env,\n        \"const publicRequire =\"\n        \"  require('node:module').createRequire(process.cwd() + '/');\"\n        \"globalThis.require = publicRequire;\"\n        \"require('node:vm').runInThisContext(process.argv[1]);\");\n\n    if (loadenv_ret.IsEmpty())  // There has been a JS exception.\n      return 1;\n\n    exit_code = node::SpinEventLoop(env).FromMaybe(1);\n\n    // node::Stop() can be used to explicitly stop the event loop and keep\n    // further JavaScript from running. It can be called from any thread,\n    // and will act like worker.terminate() if called from another thread.\n    node::Stop(env);\n  }\n\n  return exit_code;\n}\nChild process#\nStability: 2 - Stable\nSource Code: lib/child_process.js\n\nThe node:child_process module provides the ability to spawn subprocesses in a manner that is similar, but not identical, to popen(3). This capability is primarily provided by the child_process.spawn() function:\n\nconst { spawn } = require('node:child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\nBy default, pipes for stdin, stdout, and stderr are established between the parent Node.js process and the spawned subprocess. These pipes have limited (and platform-specific) capacity. If the subprocess writes to stdout in excess of that limit without the output being captured, the subprocess blocks waiting for the pipe buffer to accept more data. This is identical to the behavior of pipes in the shell. Use the { stdio: 'ignore' } option if the output will not be consumed.\n\nThe command lookup is performed using the options.env.PATH environment variable if env is in the options object. Otherwise, process.env.PATH is used. If options.env is set without PATH, lookup on Unix is performed on a default search path search of /usr/bin:/bin (see your operating system's manual for execvpe/execvp), on Windows the current processes environment variable PATH is used.\n\nOn Windows, environment variables are case-insensitive. Node.js lexicographically sorts the env keys and uses the first one that case-insensitively matches. Only first (in lexicographic order) entry will be passed to the subprocess. This might lead to issues on Windows when passing objects to the env option that have multiple variants of the same key, such as PATH and Path.\n\nThe child_process.spawn() method spawns the child process asynchronously, without blocking the Node.js event loop. The child_process.spawnSync() function provides equivalent functionality in a synchronous manner that blocks the event loop until the spawned process either exits or is terminated.\n\nFor convenience, the node:child_process module provides a handful of synchronous and asynchronous alternatives to child_process.spawn() and child_process.spawnSync(). Each of these alternatives are implemented on top of child_process.spawn() or child_process.spawnSync().\n\nchild_process.exec(): spawns a shell and runs a command within that shell, passing the stdout and stderr to a callback function when complete.\nchild_process.execFile(): similar to child_process.exec() except that it spawns the command directly without first spawning a shell by default.\nchild_process.fork(): spawns a new Node.js process and invokes a specified module with an IPC communication channel established that allows sending messages between parent and child.\nchild_process.execSync(): a synchronous version", "doc_id": "1872616f-d9a0-4d46-93b9-a88abec4fd45", "embedding": null, "doc_hash": "60b658251c04b81ff5b04cd4f4a16ffef08be3f85477ef28b620b1fed921c5cb", "extra_info": null, "node_info": {"start": 569936, "end": 573576}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c6c0295d-365b-4f33-8b57-10ce961d5233", "3": "ac3e85b0-5e0a-4c2a-8933-a28750a61909"}}, "__type__": "1"}, "ac3e85b0-5e0a-4c2a-8933-a28750a61909": {"__data__": {"text": "process either exits or is terminated.\n\nFor convenience, the node:child_process module provides a handful of synchronous and asynchronous alternatives to child_process.spawn() and child_process.spawnSync(). Each of these alternatives are implemented on top of child_process.spawn() or child_process.spawnSync().\n\nchild_process.exec(): spawns a shell and runs a command within that shell, passing the stdout and stderr to a callback function when complete.\nchild_process.execFile(): similar to child_process.exec() except that it spawns the command directly without first spawning a shell by default.\nchild_process.fork(): spawns a new Node.js process and invokes a specified module with an IPC communication channel established that allows sending messages between parent and child.\nchild_process.execSync(): a synchronous version of child_process.exec() that will block the Node.js event loop.\nchild_process.execFileSync(): a synchronous version of child_process.execFile() that will block the Node.js event loop.\nFor certain use cases, such as automating shell scripts, the synchronous counterparts may be more convenient. In many cases, however, the synchronous methods can have significant impact on performance due to stalling the event loop while spawned processes complete.\n\nAsynchronous process creation#\nThe child_process.spawn(), child_process.fork(), child_process.exec(), and child_process.execFile() methods all follow the idiomatic asynchronous programming pattern typical of other Node.js APIs.\n\nEach of the methods returns a ChildProcess instance. These objects implement the Node.js EventEmitter API, allowing the parent process to register listener functions that are called when certain events occur during the life cycle of the child process.\n\nThe child_process.exec() and child_process.execFile() methods additionally allow for an optional callback function to be specified that is invoked when the child process terminates.\n\nSpawning .bat and .cmd files on Windows#\nThe importance of the distinction between child_process.exec() and child_process.execFile() can vary based on platform. On Unix-type operating systems (Unix, Linux, macOS) child_process.execFile() can be more efficient because it does not spawn a shell by default. On Windows, however, .bat and .cmd files are not executable on their own without a terminal, and therefore cannot be launched using child_process.execFile(). When running on Windows, .bat and .cmd files can be invoked using child_process.spawn() with the shell option set, with child_process.exec(), or by spawning cmd.exe and passing the .bat or .cmd file as an argument (which is what the shell option and child_process.exec() do). In any case, if the script filename contains spaces it needs to be quoted.\n\n// On Windows Only...\nconst { spawn } = require('node:child_process');\nconst bat = spawn('cmd.exe', ['/c', 'my.bat']);\n\nbat.stdout.on('data', (data) => {\n  console.log(data.toString());\n});\n\nbat.stderr.on('data', (data) => {\n  console.error(data.toString());\n});\n\nbat.on('exit', (code) => {\n  console.log(`Child exited with code ${code}`);\n});\n// OR...\nconst { exec, spawn } = require('node:child_process');\nexec('my.bat', (err, stdout, stderr) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(stdout);\n});\n\n// Script with spaces in the filename:\nconst bat = spawn('\"my script.cmd\"', ['a', 'b'], { shell: true });\n// or:\nexec('\"my script.cmd\" a b', (err, stdout, stderr) => {\n  // ...\n});\nchild_process.exec(command[, options][, callback])#\nHistory\ncommand <string> The command to run, with space-separated arguments.\noptions <Object>\ncwd <string> | <URL> Current working directory of the child process. Default: process.cwd().\nenv <Object> Environment key-value", "doc_id": "ac3e85b0-5e0a-4c2a-8933-a28750a61909", "embedding": null, "doc_hash": "48adecb0d191ef8d184769e5210cd3043526439509019c58313d4e7d4af47c47", "extra_info": null, "node_info": {"start": 573259, "end": 577007}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1872616f-d9a0-4d46-93b9-a88abec4fd45", "3": "33af6221-e149-40af-b5a3-5c389e552f78"}}, "__type__": "1"}, "33af6221-e149-40af-b5a3-5c389e552f78": {"__data__": {"text": "(err, stdout, stderr) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(stdout);\n});\n\n// Script with spaces in the filename:\nconst bat = spawn('\"my script.cmd\"', ['a', 'b'], { shell: true });\n// or:\nexec('\"my script.cmd\" a b', (err, stdout, stderr) => {\n  // ...\n});\nchild_process.exec(command[, options][, callback])#\nHistory\ncommand <string> The command to run, with space-separated arguments.\noptions <Object>\ncwd <string> | <URL> Current working directory of the child process. Default: process.cwd().\nenv <Object> Environment key-value pairs. Default: process.env.\nencoding <string> Default: 'utf8'\nshell <string> Shell to execute the command with. See Shell requirements and Default Windows shell. Default: '/bin/sh' on Unix, process.env.ComSpec on Windows.\nsignal <AbortSignal> allows aborting the child process using an AbortSignal.\ntimeout <number> Default: 0\nmaxBuffer <number> Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated and any output is truncated. See caveat at maxBuffer and Unicode. Default: 1024 * 1024.\nkillSignal <string> | <integer> Default: 'SIGTERM'\nuid <number> Sets the user identity of the process (see setuid(2)).\ngid <number> Sets the group identity of the process (see setgid(2)).\nwindowsHide <boolean> Hide the subprocess console window that would normally be created on Windows systems. Default: false.\ncallback <Function> called with the output when process terminates.\nerror <Error>\nstdout <string> | <Buffer>\nstderr <string> | <Buffer>\nReturns: <ChildProcess>\nSpawns a shell then executes the command within that shell, buffering any generated output. The command string passed to the exec function is processed directly by the shell and special characters (vary based on shell) need to be dealt with accordingly:\n\nconst { exec } = require('node:child_process');\n\nexec('\"/path/to/test file/test.sh\" arg1 arg2');\n// Double quotes are used so that the space in the path is not interpreted as\n// a delimiter of multiple arguments.\n\nexec('echo \"The \\\\$HOME variable is $HOME\"');\n// The $HOME variable is escaped in the first instance, but not in the second.\nNever pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution.\n\nIf a callback function is provided, it is called with the arguments (error, stdout, stderr). On success, error will be null. On error, error will be an instance of Error. The error.code property will be the exit code of the process. By convention, any exit code other than 0 indicates an error. error.signal will be the signal that terminated the process.\n\nThe stdout and stderr arguments passed to the callback will contain the stdout and stderr output of the child process. By default, Node.js will decode the output as UTF-8 and pass strings to the callback. The encoding option can be used to specify the character encoding used to decode the stdout and stderr output. If encoding is 'buffer', or an unrecognized character encoding, Buffer objects will be passed to the callback instead.\n\nconst { exec } = require('node:child_process');\nexec('cat *.js missing_file | wc -l', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.error(`stderr: ${stderr}`);\n});\nIf timeout is greater than 0, the parent will send the signal identified by the killSignal property (the default is 'SIGTERM') if the child runs longer than timeout", "doc_id": "33af6221-e149-40af-b5a3-5c389e552f78", "embedding": null, "doc_hash": "fb60cb1125b9fdb757c0177c8b98f3c74149e235cbf9b596356c9354c782ea9d", "extra_info": null, "node_info": {"start": 577252, "end": 580793}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ac3e85b0-5e0a-4c2a-8933-a28750a61909", "3": "8c6682b3-7435-43f1-9394-3251d9bbaef4"}}, "__type__": "1"}, "8c6682b3-7435-43f1-9394-3251d9bbaef4": {"__data__": {"text": "used to specify the character encoding used to decode the stdout and stderr output. If encoding is 'buffer', or an unrecognized character encoding, Buffer objects will be passed to the callback instead.\n\nconst { exec } = require('node:child_process');\nexec('cat *.js missing_file | wc -l', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.error(`stderr: ${stderr}`);\n});\nIf timeout is greater than 0, the parent will send the signal identified by the killSignal property (the default is 'SIGTERM') if the child runs longer than timeout milliseconds.\n\nUnlike the exec(3) POSIX system call, child_process.exec() does not replace the existing process and uses a shell to execute the command.\n\nIf this method is invoked as its util.promisify()ed version, it returns a Promise for an Object with stdout and stderr properties. The returned ChildProcess instance is attached to the Promise as a child property. In case of an error (including any error resulting in an exit code other than 0), a rejected promise is returned, with the same error object given in the callback, but with two additional properties stdout and stderr.\n\nconst util = require('node:util');\nconst exec = util.promisify(require('node:child_process').exec);\n\nasync function lsExample() {\n  const { stdout, stderr } = await exec('ls');\n  console.log('stdout:', stdout);\n  console.error('stderr:', stderr);\n}\nlsExample();\nIf the signal option is enabled, calling .abort() on the corresponding AbortController is similar to calling .kill() on the child process except the error passed to the callback will be an AbortError:\n\nconst { exec } = require('node:child_process');\nconst controller = new AbortController();\nconst { signal } = controller;\nconst child = exec('grep ssh', { signal }, (error) => {\n  console.error(error); // an AbortError\n});\ncontroller.abort();\nchild_process.execFile(file[, args][, options][, callback])\nHistory\nfile <string> The name or path of the executable file to run.\nargs <string[]> List of string arguments.\noptions <Object>\ncwd <string> | <URL> Current working directory of the child process.\nenv <Object> Environment key-value pairs. Default: process.env.\nencoding <string> Default: 'utf8'\ntimeout <number> Default: 0\nmaxBuffer <number> Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated and any output is truncated. See caveat at maxBuffer and Unicode. Default: 1024 * 1024.\nkillSignal <string> | <integer> Default: 'SIGTERM'\nuid <number> Sets the user identity of the process (see setuid(2)).\ngid <number> Sets the group identity of the process (see setgid(2)).\nwindowsHide <boolean> Hide the subprocess console window that would normally be created on Windows systems. Default: false.\nwindowsVerbatimArguments <boolean> No quoting or escaping of arguments is done on Windows. Ignored on Unix. Default: false.\nshell <boolean> | <string> If true, runs command inside of a shell. Uses '/bin/sh' on Unix, and process.env.ComSpec on Windows. A different shell can be specified as a string. See Shell requirements and Default Windows shell. Default: false (no shell).\nsignal <AbortSignal> allows aborting the child process using an AbortSignal.\ncallback <Function> Called with the output when process terminates.\nerror <Error>\nstdout <string> | <Buffer>\nstderr <string> | <Buffer>\nReturns: <ChildProcess>\nThe child_process.execFile() function is similar to child_process.exec() except that it does not spawn a shell by default. Rather, the specified", "doc_id": "8c6682b3-7435-43f1-9394-3251d9bbaef4", "embedding": null, "doc_hash": "e0e721e5913f3e4e128ff470985f252900892cc4a7a60e39e33b750549265621", "extra_info": null, "node_info": {"start": 580742, "end": 584338}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "33af6221-e149-40af-b5a3-5c389e552f78", "3": "7a915dde-a03c-43b7-a873-436f2cc3d956"}}, "__type__": "1"}, "7a915dde-a03c-43b7-a873-436f2cc3d956": {"__data__": {"text": "<boolean> No quoting or escaping of arguments is done on Windows. Ignored on Unix. Default: false.\nshell <boolean> | <string> If true, runs command inside of a shell. Uses '/bin/sh' on Unix, and process.env.ComSpec on Windows. A different shell can be specified as a string. See Shell requirements and Default Windows shell. Default: false (no shell).\nsignal <AbortSignal> allows aborting the child process using an AbortSignal.\ncallback <Function> Called with the output when process terminates.\nerror <Error>\nstdout <string> | <Buffer>\nstderr <string> | <Buffer>\nReturns: <ChildProcess>\nThe child_process.execFile() function is similar to child_process.exec() except that it does not spawn a shell by default. Rather, the specified executable file is spawned directly as a new process making it slightly more efficient than child_process.exec().\n\nThe same options as child_process.exec() are supported. Since a shell is not spawned, behaviors such as I/O redirection and file globbing are not supported.\n\nconst { execFile } = require('node:child_process');\nconst child = execFile('node', ['--version'], (error, stdout, stderr) => {\n  if (error) {\n    throw error;\n  }\n  console.log(stdout);\n});\nThe stdout and stderr arguments passed to the callback will contain the stdout and stderr output of the child process. By default, Node.js will decode the output as UTF-8 and pass strings to the callback. The encoding option can be used to specify the character encoding used to decode the stdout and stderr output. If encoding is 'buffer', or an unrecognized character encoding, Buffer objects will be passed to the callback instead.\n\nIf this method is invoked as its util.promisify()ed version, it returns a Promise for an Object with stdout and stderr properties. The returned ChildProcess instance is attached to the Promise as a child property. In case of an error (including any error resulting in an exit code other than 0), a rejected promise is returned, with the same error object given in the callback, but with two additional properties stdout and stderr.\n\nconst util = require('node:util');\nconst execFile = util.promisify(require('node:child_process').execFile);\nasync function getVersion() {\n  const { stdout } = await execFile('node', ['--version']);\n  console.log(stdout);\n}\ngetVersion();\nIf the shell option is enabled, do not pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution.\n\nIf the signal option is enabled, calling .abort() on the corresponding AbortController is similar to calling .kill() on the child process except the error passed to the callback will be an AbortError:\n\nconst { execFile } = require('node:child_process');\nconst controller = new AbortController();\nconst { signal } = controller;\nconst child = execFile('node', ['--version'], { signal }, (error) => {\n  console.error(error); // an AbortError\n});\ncontroller.abort();\nchild_process.fork(modulePath[, args][, options])#\nHistory\nmodulePath <string> | <URL> The module to run in the child.\nargs <string[]> List of string arguments.\noptions <Object>\ncwd <string> | <URL> Current working directory of the child process.\ndetached <boolean> Prepare child to run independently of its parent process. Specific behavior depends on the platform, see options.detached).\nenv <Object> Environment key-value pairs. Default: process.env.\nexecPath <string> Executable used to create the child process.\nexecArgv <string[]> List of string arguments passed to the executable. Default: process.execArgv.\ngid <number> Sets the group identity of the process (see setgid(2)).\nserialization <string> Specify the kind of serialization used for sending messages between processes. Possible values are 'json' and 'advanced'. See Advanced serialization for more details.", "doc_id": "7a915dde-a03c-43b7-a873-436f2cc3d956", "embedding": null, "doc_hash": "3c1cdc75b6440303e4c747c63a13925c6f56e03cf1e158746547e58982823613", "extra_info": null, "node_info": {"start": 584244, "end": 588063}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8c6682b3-7435-43f1-9394-3251d9bbaef4", "3": "85569fd5-724a-4d92-9987-cbe0b5a0e43e"}}, "__type__": "1"}, "85569fd5-724a-4d92-9987-cbe0b5a0e43e": {"__data__": {"text": "in the child.\nargs <string[]> List of string arguments.\noptions <Object>\ncwd <string> | <URL> Current working directory of the child process.\ndetached <boolean> Prepare child to run independently of its parent process. Specific behavior depends on the platform, see options.detached).\nenv <Object> Environment key-value pairs. Default: process.env.\nexecPath <string> Executable used to create the child process.\nexecArgv <string[]> List of string arguments passed to the executable. Default: process.execArgv.\ngid <number> Sets the group identity of the process (see setgid(2)).\nserialization <string> Specify the kind of serialization used for sending messages between processes. Possible values are 'json' and 'advanced'. See Advanced serialization for more details. Default: 'json'.\nsignal <AbortSignal> Allows closing the child process using an AbortSignal.\nkillSignal <string> | <integer> The signal value to be used when the spawned process will be killed by timeout or abort signal. Default: 'SIGTERM'.\nsilent <boolean> If true, stdin, stdout, and stderr of the child will be piped to the parent, otherwise they will be inherited from the parent, see the 'pipe' and 'inherit' options for child_process.spawn()'s stdio for more details. Default: false.\nstdio <Array> | <string> See child_process.spawn()'s stdio. When this option is provided, it overrides silent. If the array variant is used, it must contain exactly one item with value 'ipc' or an error will be thrown. For instance [0, 1, 2, 'ipc'].\nuid <number> Sets the user identity of the process (see setuid(2)).\nwindowsVerbatimArguments <boolean> No quoting or escaping of arguments is done on Windows. Ignored on Unix. Default: false.\ntimeout <number> In milliseconds the maximum amount of time the process is allowed to run. Default: undefined.\nReturns: <ChildProcess>\nThe child_process.fork() method is a special case of child_process.spawn() used specifically to spawn new Node.js processes. Like child_process.spawn(), a ChildProcess object is returned. The returned ChildProcess will have an additional communication channel built-in that allows messages to be passed back and forth between the parent and child. See subprocess.send() for details.\n\nKeep in mind that spawned Node.js child processes are independent of the parent with exception of the IPC communication channel that is established between the two. Each process has its own memory, with their own V8 instances. Because of the additional resource allocations required, spawning a large number of child Node.js processes is not recommended.\n\nBy default, child_process.fork() will spawn new Node.js instances using the process.execPath of the parent process. The execPath property in the options object allows for an alternative execution path to be used.\n\nNode.js processes launched with a custom execPath will communicate with the parent process using the file descriptor (fd) identified using the environment variable NODE_CHANNEL_FD on the child process.\n\nUnlike the fork(2) POSIX system call, child_process.fork() does not clone the current process.\n\nThe shell option available in child_process.spawn() is not supported by child_process.fork() and will be ignored if set.\n\nIf the signal option is enabled, calling .abort() on the corresponding AbortController is similar to calling .kill() on the child process except the error passed to the callback will be an AbortError:\n\nif (process.argv[2] === 'child') {\n  setTimeout(() => {\n    console.log(`Hello from ${process.argv[2]}!`);\n  }, 1_000);\n} else {\n  const { fork } = require('node:child_process');\n  const controller = new AbortController();\n  const { signal } = controller;\n  const child = fork(__filename, ['child'], { signal });\n  child.on('error', (err) => {\n    // This will be called with err being an AbortError if the controller aborts\n", "doc_id": "85569fd5-724a-4d92-9987-cbe0b5a0e43e", "embedding": null, "doc_hash": "0ce05111ef9741155c11e9598101f1445532e0e68521b34757f0279a6c3362fa", "extra_info": null, "node_info": {"start": 588026, "end": 591864}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7a915dde-a03c-43b7-a873-436f2cc3d956", "3": "b8e5a623-c55d-4d6d-bbc6-4b99b625de9d"}}, "__type__": "1"}, "b8e5a623-c55d-4d6d-bbc6-4b99b625de9d": {"__data__": {"text": "be ignored if set.\n\nIf the signal option is enabled, calling .abort() on the corresponding AbortController is similar to calling .kill() on the child process except the error passed to the callback will be an AbortError:\n\nif (process.argv[2] === 'child') {\n  setTimeout(() => {\n    console.log(`Hello from ${process.argv[2]}!`);\n  }, 1_000);\n} else {\n  const { fork } = require('node:child_process');\n  const controller = new AbortController();\n  const { signal } = controller;\n  const child = fork(__filename, ['child'], { signal });\n  child.on('error', (err) => {\n    // This will be called with err being an AbortError if the controller aborts\n  });\n  controller.abort(); // Stops the child process\n}\nchild_process.spawn(command[, args][, options])#\nHistory\ncommand <string> The command to run.\nargs <string[]> List of string arguments.\noptions <Object>\ncwd <string> | <URL> Current working directory of the child process.\nenv <Object> Environment key-value pairs. Default: process.env.\nargv0 <string> Explicitly set the value of argv[0] sent to the child process. This will be set to command if not specified.\nstdio <Array> | <string> Child's stdio configuration (see options.stdio).\ndetached <boolean> Prepare child to run independently of its parent process. Specific behavior depends on the platform, see options.detached).\nuid <number> Sets the user identity of the process (see setuid(2)).\ngid <number> Sets the group identity of the process (see setgid(2)).\nserialization <string> Specify the kind of serialization used for sending messages between processes. Possible values are 'json' and 'advanced'. See Advanced serialization for more details. Default: 'json'.\nshell <boolean> | <string> If true, runs command inside of a shell. Uses '/bin/sh' on Unix, and process.env.ComSpec on Windows. A different shell can be specified as a string. See Shell requirements and Default Windows shell. Default: false (no shell).\nwindowsVerbatimArguments <boolean> No quoting or escaping of arguments is done on Windows. Ignored on Unix. This is set to true automatically when shell is specified and is CMD. Default: false.\nwindowsHide <boolean> Hide the subprocess console window that would normally be created on Windows systems. Default: false.\nsignal <AbortSignal> allows aborting the child process using an AbortSignal.\ntimeout <number> In milliseconds the maximum amount of time the process is allowed to run. Default: undefined.\nkillSignal <string> | <integer> The signal value to be used when the spawned process will be killed by timeout or abort signal. Default: 'SIGTERM'.\nReturns: <ChildProcess>\nThe child_process.spawn() method spawns a new process using the given command, with command-line arguments in args. If omitted, args defaults to an empty array.\n\nIf the shell option is enabled, do not pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution.\n\nA third argument may be used to specify additional options, with these defaults:\n\nconst defaults = {\n  cwd: undefined,\n  env: process.env,\n};\nUse cwd to specify the working directory from which the process is spawned. If not given, the default is to inherit the current working directory. If given, but the path does not exist, the child process emits an ENOENT error and exits immediately. ENOENT is also emitted when the command does not exist.\n\nUse env to specify environment variables that will be visible to the new process, the default is process.env.\n\nundefined values in env will be ignored.\n\nExample of running ls -lh /usr, capturing stdout, stderr, and the exit code:\n\nconst { spawn } = require('node:child_process');\nconst ls = spawn('ls', ['-lh',", "doc_id": "b8e5a623-c55d-4d6d-bbc6-4b99b625de9d", "embedding": null, "doc_hash": "70a77b144520a92f7f84592623a3cb261e20fdd779ce85db79e47507b09db724", "extra_info": null, "node_info": {"start": 591995, "end": 595701}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "85569fd5-724a-4d92-9987-cbe0b5a0e43e", "3": "aca8d836-1667-4a6b-85d8-e3af2b75e371"}}, "__type__": "1"}, "aca8d836-1667-4a6b-85d8-e3af2b75e371": {"__data__": {"text": "additional options, with these defaults:\n\nconst defaults = {\n  cwd: undefined,\n  env: process.env,\n};\nUse cwd to specify the working directory from which the process is spawned. If not given, the default is to inherit the current working directory. If given, but the path does not exist, the child process emits an ENOENT error and exits immediately. ENOENT is also emitted when the command does not exist.\n\nUse env to specify environment variables that will be visible to the new process, the default is process.env.\n\nundefined values in env will be ignored.\n\nExample of running ls -lh /usr, capturing stdout, stderr, and the exit code:\n\nconst { spawn } = require('node:child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\nExample: A very elaborate way to run ps ax | grep ssh\n\nconst { spawn } = require('node:child_process');\nconst ps = spawn('ps', ['ax']);\nconst grep = spawn('grep', ['ssh']);\n\nps.stdout.on('data', (data) => {\n  grep.stdin.write(data);\n});\n\nps.stderr.on('data', (data) => {\n  console.error(`ps stderr: ${data}`);\n});\n\nps.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`ps process exited with code ${code}`);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on('data', (data) => {\n  console.log(data.toString());\n});\n\ngrep.stderr.on('data', (data) => {\n  console.error(`grep stderr: ${data}`);\n});\n\ngrep.on('close', (code) => {\n  if (code !== 0) {\n    console.log(`grep process exited with code ${code}`);\n  }\n});\nExample of checking for failed spawn:\n\nconst { spawn } = require('node:child_process');\nconst subprocess = spawn('bad_command');\n\nsubprocess.on('error', (err) => {\n  console.error('Failed to start subprocess.');\n});\nCertain platforms (macOS, Linux) will use the value of argv[0] for the process title while others (Windows, SunOS) will use command.\n\nNode.js overwrites argv[0] with process.execPath on startup, so process.argv[0] in a Node.js child process will not match the argv0 parameter passed to spawn from the parent. Retrieve it with the process.argv0 property instead.\n\nIf the signal option is enabled, calling .abort() on the corresponding AbortController is similar to calling .kill() on the child process except the error passed to the callback will be an AbortError:\n\nconst { spawn } = require('node:child_process');\nconst controller = new AbortController();\nconst { signal } = controller;\nconst grep = spawn('grep', ['ssh'], { signal });\ngrep.on('error', (err) => {\n  // This will be called with err being an AbortError if the controller aborts\n});\ncontroller.abort(); // Stops the child process\noptions.detached#\nAdded in: v0.7.10\nOn Windows, setting options.detached to true makes it possible for the child process to continue running after the parent exits. The child will have its own console window. Once enabled for a child process, it cannot be disabled.\n\nOn non-Windows platforms, if options.detached is set to true, the child process will be made the leader of a new process group and session. Child processes may", "doc_id": "aca8d836-1667-4a6b-85d8-e3af2b75e371", "embedding": null, "doc_hash": "da1cd7c2b4330dbd2345153bd0b3dd67c7ac9f4b64efd0fcbe6fa4dbe42dce89", "extra_info": null, "node_info": {"start": 595636, "end": 598851}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b8e5a623-c55d-4d6d-bbc6-4b99b625de9d", "3": "e99d50af-ad49-4480-83e6-0b04044446db"}}, "__type__": "1"}, "e99d50af-ad49-4480-83e6-0b04044446db": {"__data__": {"text": "{ spawn } = require('node:child_process');\nconst controller = new AbortController();\nconst { signal } = controller;\nconst grep = spawn('grep', ['ssh'], { signal });\ngrep.on('error', (err) => {\n  // This will be called with err being an AbortError if the controller aborts\n});\ncontroller.abort(); // Stops the child process\noptions.detached#\nAdded in: v0.7.10\nOn Windows, setting options.detached to true makes it possible for the child process to continue running after the parent exits. The child will have its own console window. Once enabled for a child process, it cannot be disabled.\n\nOn non-Windows platforms, if options.detached is set to true, the child process will be made the leader of a new process group and session. Child processes may continue running after the parent exits regardless of whether they are detached or not. See setsid(2) for more information.\n\nBy default, the parent will wait for the detached child to exit. To prevent the parent from waiting for a given subprocess to exit, use the subprocess.unref() method. Doing so will cause the parent's event loop to not include the child in its reference count, allowing the parent to exit independently of the child, unless there is an established IPC channel between the child and the parent.\n\nWhen using the detached option to start a long-running process, the process will not stay running in the background after the parent exits unless it is provided with a stdio configuration that is not connected to the parent. If the parent's stdio is inherited, the child will remain attached to the controlling terminal.\n\nExample of a long-running process, by detaching and also ignoring its parent stdio file descriptors, in order to ignore the parent's termination:\n\nconst { spawn } = require('node:child_process');\n\nconst subprocess = spawn(process.argv[0], ['child_program.js'], {\n  detached: true,\n  stdio: 'ignore',\n});\n\nsubprocess.unref();\nAlternatively one can redirect the child process' output into files:\n\nconst fs = require('node:fs');\nconst { spawn } = require('node:child_process');\nconst out = fs.openSync('./out.log', 'a');\nconst err = fs.openSync('./out.log', 'a');\n\nconst subprocess = spawn('prg', [], {\n  detached: true,\n  stdio: [ 'ignore', out, err ],\n});\n\nsubprocess.unref();\noptions.stdio#\nHistory\nThe options.stdio option is used to configure the pipes that are established between the parent and child process. By default, the child's stdin, stdout, and stderr are redirected to corresponding subprocess.stdin, subprocess.stdout, and subprocess.stderr streams on the ChildProcess object. This is equivalent to setting the options.stdio equal to ['pipe', 'pipe', 'pipe'].\n\nFor convenience, options.stdio may be one of the following strings:\n\n'pipe': equivalent to ['pipe', 'pipe', 'pipe'] (the default)\n'overlapped': equivalent to ['overlapped', 'overlapped', 'overlapped']\n'ignore': equivalent to ['ignore', 'ignore', 'ignore']\n'inherit': equivalent to ['inherit', 'inherit', 'inherit'] or [0, 1, 2]\nOtherwise, the value of options.stdio is an array where each index corresponds to an fd in the child. The fds 0, 1, and 2 correspond to stdin, stdout, and stderr, respectively. Additional fds can be specified to create additional pipes between the parent and child. The value is one of the following:\n\n'pipe': Create a pipe between the child process and the parent process. The parent end of the pipe is exposed to the parent as a property on the child_process object as subprocess.stdio[fd]. Pipes created for fds 0, 1, and 2 are also available as subprocess.stdin, subprocess.stdout and subprocess.stderr, respectively. These are not actual Unix pipes and therefore the child process can not use them by their descriptor files, e.g.", "doc_id": "e99d50af-ad49-4480-83e6-0b04044446db", "embedding": null, "doc_hash": "6eb1d3b8d7ad901ada26f1be0c4c639ed85d14530b7383cfb83394fe5fafc572", "extra_info": null, "node_info": {"start": 598820, "end": 602548}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "aca8d836-1667-4a6b-85d8-e3af2b75e371", "3": "cca3bfbe-1bc8-42c5-8927-10a751f3327a"}}, "__type__": "1"}, "cca3bfbe-1bc8-42c5-8927-10a751f3327a": {"__data__": {"text": "or [0, 1, 2]\nOtherwise, the value of options.stdio is an array where each index corresponds to an fd in the child. The fds 0, 1, and 2 correspond to stdin, stdout, and stderr, respectively. Additional fds can be specified to create additional pipes between the parent and child. The value is one of the following:\n\n'pipe': Create a pipe between the child process and the parent process. The parent end of the pipe is exposed to the parent as a property on the child_process object as subprocess.stdio[fd]. Pipes created for fds 0, 1, and 2 are also available as subprocess.stdin, subprocess.stdout and subprocess.stderr, respectively. These are not actual Unix pipes and therefore the child process can not use them by their descriptor files, e.g. /dev/fd/2 or /dev/stdout.\n\n'overlapped': Same as 'pipe' except that the FILE_FLAG_OVERLAPPED flag is set on the handle. This is necessary for overlapped I/O on the child process's stdio handles. See the docs for more details. This is exactly the same as 'pipe' on non-Windows systems.\n\n'ipc': Create an IPC channel for passing messages/file descriptors between parent and child. A ChildProcess may have at most one IPC stdio file descriptor. Setting this option enables the subprocess.send() method. If the child is a Node.js process, the presence of an IPC channel will enable process.send() and process.disconnect() methods, as well as 'disconnect' and 'message' events within the child.\n\nAccessing the IPC channel fd in any way other than process.send() or using the IPC channel with a child process that is not a Node.js instance is not supported.\n\n'ignore': Instructs Node.js to ignore the fd in the child. While Node.js will always open fds 0, 1, and 2 for the processes it spawns, setting the fd to 'ignore' will cause Node.js to open /dev/null and attach it to the child's fd.\n\n'inherit': Pass through the corresponding stdio stream to/from the parent process. In the first three positions, this is equivalent to process.stdin, process.stdout, and process.stderr, respectively. In any other position, equivalent to 'ignore'.\n\n<Stream> object: Share a readable or writable stream that refers to a tty, file, socket, or a pipe with the child process. The stream's underlying file descriptor is duplicated in the child process to the fd that corresponds to the index in the stdio array. The stream must have an underlying descriptor (file streams do not until the 'open' event has occurred).\n\nPositive integer: The integer value is interpreted as a file descriptor that is open in the parent process. It is shared with the child process, similar to how <Stream> objects can be shared. Passing sockets is not supported on Windows.\n\nnull, undefined: Use default value. For stdio fds 0, 1, and 2 (in other words, stdin, stdout, and stderr) a pipe is created. For fd 3 and up, the default is 'ignore'.\n\nconst { spawn } = require('node:child_process');\n\n// Child will use parent's stdios.\nspawn('prg', [], { stdio: 'inherit' });\n\n// Spawn child sharing only stderr.\nspawn('prg', [], { stdio: ['pipe', 'pipe', process.stderr] });\n\n// Open an extra fd=4, to interact with programs presenting a\n// startd-style interface.\nspawn('prg', [], { stdio: ['pipe', null, null, null, 'pipe'] });\nIt is worth noting that when an IPC channel is established between the parent and child processes, and the child is a Node.js process, the child is launched with the IPC channel unreferenced (using unref()) until the child registers an event handler for the 'disconnect' event or the 'message' event. This allows the child to exit normally without the process being held open by the open IPC channel.\n\nOn Unix-like operating systems, the child_process.spawn() method performs memory operations synchronously before", "doc_id": "cca3bfbe-1bc8-42c5-8927-10a751f3327a", "embedding": null, "doc_hash": "c9a0c462e1dbca6ba488bafb57c74c0bdee90b5d0c501347dffefa01440a2761", "extra_info": null, "node_info": {"start": 602565, "end": 606311}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e99d50af-ad49-4480-83e6-0b04044446db", "3": "0d1a3e7f-e6ff-4b59-930e-3847f969fba9"}}, "__type__": "1"}, "0d1a3e7f-e6ff-4b59-930e-3847f969fba9": {"__data__": {"text": "[], { stdio: ['pipe', 'pipe', process.stderr] });\n\n// Open an extra fd=4, to interact with programs presenting a\n// startd-style interface.\nspawn('prg', [], { stdio: ['pipe', null, null, null, 'pipe'] });\nIt is worth noting that when an IPC channel is established between the parent and child processes, and the child is a Node.js process, the child is launched with the IPC channel unreferenced (using unref()) until the child registers an event handler for the 'disconnect' event or the 'message' event. This allows the child to exit normally without the process being held open by the open IPC channel.\n\nOn Unix-like operating systems, the child_process.spawn() method performs memory operations synchronously before decoupling the event loop from the child. Applications with a large memory footprint may find frequent child_process.spawn() calls to be a bottleneck. For more information, see V8 issue 7381.\n\nSee also: child_process.exec() and child_process.fork().\n\nSynchronous process creation#\nThe child_process.spawnSync(), child_process.execSync(), and child_process.execFileSync() methods are synchronous and will block the Node.js event loop, pausing execution of any additional code until the spawned process exits.\n\nBlocking calls like these are mostly useful for simplifying general-purpose scripting tasks and for simplifying the loading/processing of application configuration at startup.\n\nchild_process.execFileSync(file[, args][, options])#\nHistory\nfile <string> The name or path of the executable file to run.\nargs <string[]> List of string arguments.\noptions <Object>\ncwd <string> | <URL> Current working directory of the child process.\ninput <string> | <Buffer> | <TypedArray> | <DataView> The value which will be passed as stdin to the spawned process. Supplying this value will override stdio[0].\nstdio <string> | <Array> Child's stdio configuration. stderr by default will be output to the parent process' stderr unless stdio is specified. Default: 'pipe'.\nenv <Object> Environment key-value pairs. Default: process.env.\nuid <number> Sets the user identity of the process (see setuid(2)).\ngid <number> Sets the group identity of the process (see setgid(2)).\ntimeout <number> In milliseconds the maximum amount of time the process is allowed to run. Default: undefined.\nkillSignal <string> | <integer> The signal value to be used when the spawned process will be killed. Default: 'SIGTERM'.\nmaxBuffer <number> Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated. See caveat at maxBuffer and Unicode. Default: 1024 * 1024.\nencoding <string> The encoding used for all stdio inputs and outputs. Default: 'buffer'.\nwindowsHide <boolean> Hide the subprocess console window that would normally be created on Windows systems. Default: false.\nshell <boolean> | <string> If true, runs command inside of a shell. Uses '/bin/sh' on Unix, and process.env.ComSpec on Windows. A different shell can be specified as a string. See Shell requirements and Default Windows shell. Default: false (no shell).\nReturns: <Buffer> | <string> The stdout from the command.\nThe child_process.execFileSync() method is generally identical to child_process.execFile() with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and killSignal is sent, the method won't return until the process has completely exited.\n\nIf the child process intercepts and handles the SIGTERM signal and does not exit, the parent process will still wait until the child process has exited.\n\nIf the process times out or has a non-zero exit code, this method will throw an Error that will include the full result of the underlying child_process.spawnSync().\n\nIf the shell option is enabled, do not pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command", "doc_id": "0d1a3e7f-e6ff-4b59-930e-3847f969fba9", "embedding": null, "doc_hash": "594c155673ca31b1143d56e7c76eb8f58076cc996a27f3c199b9c3239a81ac3e", "extra_info": null, "node_info": {"start": 606323, "end": 610243}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cca3bfbe-1bc8-42c5-8927-10a751f3327a", "3": "24094651-f782-49e2-9ecf-d11439a98fed"}}, "__type__": "1"}, "24094651-f782-49e2-9ecf-d11439a98fed": {"__data__": {"text": "<Buffer> | <string> The stdout from the command.\nThe child_process.execFileSync() method is generally identical to child_process.execFile() with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and killSignal is sent, the method won't return until the process has completely exited.\n\nIf the child process intercepts and handles the SIGTERM signal and does not exit, the parent process will still wait until the child process has exited.\n\nIf the process times out or has a non-zero exit code, this method will throw an Error that will include the full result of the underlying child_process.spawnSync().\n\nIf the shell option is enabled, do not pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution.\n\nchild_process.execSync(command[, options])#\nHistory\ncommand <string> The command to run.\noptions <Object>\ncwd <string> | <URL> Current working directory of the child process.\ninput <string> | <Buffer> | <TypedArray> | <DataView> The value which will be passed as stdin to the spawned process. Supplying this value will override stdio[0].\nstdio <string> | <Array> Child's stdio configuration. stderr by default will be output to the parent process' stderr unless stdio is specified. Default: 'pipe'.\nenv <Object> Environment key-value pairs. Default: process.env.\nshell <string> Shell to execute the command with. See Shell requirements and Default Windows shell. Default: '/bin/sh' on Unix, process.env.ComSpec on Windows.\nuid <number> Sets the user identity of the process. (See setuid(2)).\ngid <number> Sets the group identity of the process. (See setgid(2)).\ntimeout <number> In milliseconds the maximum amount of time the process is allowed to run. Default: undefined.\nkillSignal <string> | <integer> The signal value to be used when the spawned process will be killed. Default: 'SIGTERM'.\nmaxBuffer <number> Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated and any output is truncated. See caveat at maxBuffer and Unicode. Default: 1024 * 1024.\nencoding <string> The encoding used for all stdio inputs and outputs. Default: 'buffer'.\nwindowsHide <boolean> Hide the subprocess console window that would normally be created on Windows systems. Default: false.\nReturns: <Buffer> | <string> The stdout from the command.\nThe child_process.execSync() method is generally identical to child_process.exec() with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and killSignal is sent, the method won't return until the process has completely exited. If the child process intercepts and handles the SIGTERM signal and doesn't exit, the parent process will wait until the child process has exited.\n\nIf the process times out or has a non-zero exit code, this method will throw. The Error object will contain the entire result from child_process.spawnSync().\n\nNever pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution.\n\nchild_process.spawnSync(command[, args][, options])#\nHistory\ncommand <string> The command to run.\nargs <string[]> List of string arguments.\noptions <Object>\ncwd <string> | <URL> Current working directory of the child process.\ninput <string> | <Buffer> | <TypedArray> | <DataView> The value which will be passed as stdin to the spawned process. Supplying this value will override stdio[0].\nargv0 <string> Explicitly set the value of argv[0] sent to the child process. This will be set to command if not specified.\nstdio <string> | <Array> Child's stdio configuration.\nenv <Object> Environment key-value pairs. Default: process.env.\nuid <number> Sets the user identity of the process (see setuid(2)).\ngid <number>", "doc_id": "24094651-f782-49e2-9ecf-d11439a98fed", "embedding": null, "doc_hash": "4df5b4557036c2937b907694de32f9afc99c7d51aa66f37fd4b6d03549209775", "extra_info": null, "node_info": {"start": 610139, "end": 614041}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0d1a3e7f-e6ff-4b59-930e-3847f969fba9", "3": "3198fd45-d87a-4d41-ac50-5b61a1cbbeef"}}, "__type__": "1"}, "3198fd45-d87a-4d41-ac50-5b61a1cbbeef": {"__data__": {"text": "args][, options])#\nHistory\ncommand <string> The command to run.\nargs <string[]> List of string arguments.\noptions <Object>\ncwd <string> | <URL> Current working directory of the child process.\ninput <string> | <Buffer> | <TypedArray> | <DataView> The value which will be passed as stdin to the spawned process. Supplying this value will override stdio[0].\nargv0 <string> Explicitly set the value of argv[0] sent to the child process. This will be set to command if not specified.\nstdio <string> | <Array> Child's stdio configuration.\nenv <Object> Environment key-value pairs. Default: process.env.\nuid <number> Sets the user identity of the process (see setuid(2)).\ngid <number> Sets the group identity of the process (see setgid(2)).\ntimeout <number> In milliseconds the maximum amount of time the process is allowed to run. Default: undefined.\nkillSignal <string> | <integer> The signal value to be used when the spawned process will be killed. Default: 'SIGTERM'.\nmaxBuffer <number> Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated and any output is truncated. See caveat at maxBuffer and Unicode. Default: 1024 * 1024.\nencoding <string> The encoding used for all stdio inputs and outputs. Default: 'buffer'.\nshell <boolean> | <string> If true, runs command inside of a shell. Uses '/bin/sh' on Unix, and process.env.ComSpec on Windows. A different shell can be specified as a string. See Shell requirements and Default Windows shell. Default: false (no shell).\nwindowsVerbatimArguments <boolean> No quoting or escaping of arguments is done on Windows. Ignored on Unix. This is set to true automatically when shell is specified and is CMD. Default: false.\nwindowsHide <boolean> Hide the subprocess console window that would normally be created on Windows systems. Default: false.\nReturns: <Object>\npid <number> Pid of the child process.\noutput <Array> Array of results from stdio output.\nstdout <Buffer> | <string> The contents of output[1].\nstderr <Buffer> | <string> The contents of output[2].\nstatus <number> | <null> The exit code of the subprocess, or null if the subprocess terminated due to a signal.\nsignal <string> | <null> The signal used to kill the subprocess, or null if the subprocess did not terminate due to a signal.\nerror <Error> The error object if the child process failed or timed out.\nThe child_process.spawnSync() method is generally identical to child_process.spawn() with the exception that the function will not return until the child process has fully closed. When a timeout has been encountered and killSignal is sent, the method won't return until the process has completely exited. If the process intercepts and handles the SIGTERM signal and doesn't exit, the parent process will wait until the child process has exited.\n\nIf the shell option is enabled, do not pass unsanitized user input to this function. Any input containing shell metacharacters may be used to trigger arbitrary command execution.\n\nClass: ChildProcess#\nAdded in: v2.2.0\nExtends: <EventEmitter>\nInstances of the ChildProcess represent spawned child processes.\n\nInstances of ChildProcess are not intended to be created directly. Rather, use the child_process.spawn(), child_process.exec(), child_process.execFile(), or child_process.fork() methods to create instances of ChildProcess.\n\nEvent: 'close'#\nAdded in: v0.7.7\ncode <number> The exit code if the child exited on its own.\nsignal <string> The signal by which the child process was terminated.\nThe 'close' event is emitted after a process has ended and the stdio streams of a child process have been closed. This is distinct from the 'exit' event, since multiple processes might share the same stdio streams. The 'close' event will always emit after 'exit' was already emitted, or", "doc_id": "3198fd45-d87a-4d41-ac50-5b61a1cbbeef", "embedding": null, "doc_hash": "3f3953008a6f531f7e11f16250c0820a5c10d144691079a328ba1f2974f97795", "extra_info": null, "node_info": {"start": 614175, "end": 617968}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "24094651-f782-49e2-9ecf-d11439a98fed", "3": "fbaeb9a2-98de-4ab8-9418-36a83cf16eb2"}}, "__type__": "1"}, "fbaeb9a2-98de-4ab8-9418-36a83cf16eb2": {"__data__": {"text": "of the ChildProcess represent spawned child processes.\n\nInstances of ChildProcess are not intended to be created directly. Rather, use the child_process.spawn(), child_process.exec(), child_process.execFile(), or child_process.fork() methods to create instances of ChildProcess.\n\nEvent: 'close'#\nAdded in: v0.7.7\ncode <number> The exit code if the child exited on its own.\nsignal <string> The signal by which the child process was terminated.\nThe 'close' event is emitted after a process has ended and the stdio streams of a child process have been closed. This is distinct from the 'exit' event, since multiple processes might share the same stdio streams. The 'close' event will always emit after 'exit' was already emitted, or 'error' if the child failed to spawn.\n\nconst { spawn } = require('node:child_process');\nconst ls = spawn('ls', ['-lh', '/usr']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process close all stdio with code ${code}`);\n});\n\nls.on('exit', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\nEvent: 'disconnect'#\nAdded in: v0.7.2\nThe 'disconnect' event is emitted after calling the subprocess.disconnect() method in parent process or process.disconnect() in child process. After disconnecting it is no longer possible to send or receive messages, and the subprocess.connected property is false.\n\nEvent: 'error'#\nerr <Error> The error.\nThe 'error' event is emitted whenever:\n\nThe process could not be spawned.\nThe process could not be killed.\nSending a message to the child process failed.\nThe child process was aborted via the signal option.\nThe 'exit' event may or may not fire after an error has occurred. When listening to both the 'exit' and 'error' events, guard against accidentally invoking handler functions multiple times.\n\nSee also subprocess.kill() and subprocess.send().\n\nEvent: 'exit'#\nAdded in: v0.1.90\ncode <number> The exit code if the child exited on its own.\nsignal <string> The signal by which the child process was terminated.\nThe 'exit' event is emitted after the child process ends. If the process exited, code is the final exit code of the process, otherwise null. If the process terminated due to receipt of a signal, signal is the string name of the signal, otherwise null. One of the two will always be non-null.\n\nWhen the 'exit' event is triggered, child process stdio streams might still be open.\n\nNode.js establishes signal handlers for SIGINT and SIGTERM and Node.js processes will not terminate immediately due to receipt of those signals. Rather, Node.js will perform a sequence of cleanup actions and then will re-raise the handled signal.\n\nSee waitpid(2).\n\nEvent: 'message'#\nAdded in: v0.5.9\nmessage <Object> A parsed JSON object or primitive value.\nsendHandle <Handle> A net.Socket or net.Server object, or undefined.\nThe 'message' event is triggered when a child process uses process.send() to send messages.\n\nThe message goes through serialization and parsing. The resulting message might not be the same as what is originally sent.\n\nIf the serialization option was set to 'advanced' used when spawning the child process, the message argument can contain data that JSON is not able to represent. See Advanced serialization for more details.\n\nEvent: 'spawn'#\nAdded in: v15.1.0, v14.17.0\nThe 'spawn' event is emitted once the child process has spawned successfully. If the child process does not spawn successfully, the 'spawn' event is not emitted and the 'error' event is emitted instead.\n\nIf emitted, the 'spawn' event comes before all other events and before any data", "doc_id": "fbaeb9a2-98de-4ab8-9418-36a83cf16eb2", "embedding": null, "doc_hash": "b249e726aa7da1e890e2aab67871472a742f955cf7ee053724a8abcf44876618", "extra_info": null, "node_info": {"start": 617927, "end": 621558}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3198fd45-d87a-4d41-ac50-5b61a1cbbeef", "3": "5d8b8642-ad40-4d76-9790-ae77a06f033d"}}, "__type__": "1"}, "5d8b8642-ad40-4d76-9790-ae77a06f033d": {"__data__": {"text": "or undefined.\nThe 'message' event is triggered when a child process uses process.send() to send messages.\n\nThe message goes through serialization and parsing. The resulting message might not be the same as what is originally sent.\n\nIf the serialization option was set to 'advanced' used when spawning the child process, the message argument can contain data that JSON is not able to represent. See Advanced serialization for more details.\n\nEvent: 'spawn'#\nAdded in: v15.1.0, v14.17.0\nThe 'spawn' event is emitted once the child process has spawned successfully. If the child process does not spawn successfully, the 'spawn' event is not emitted and the 'error' event is emitted instead.\n\nIf emitted, the 'spawn' event comes before all other events and before any data is received via stdout or stderr.\n\nThe 'spawn' event will fire regardless of whether an error occurs within the spawned process. For example, if bash some-command spawns successfully, the 'spawn' event will fire, though bash may fail to spawn some-command. This caveat also applies when using { shell: true }.\n\nsubprocess.channel#\nHistory\n<Object> A pipe representing the IPC channel to the child process.\nThe subprocess.channel property is a reference to the child's IPC channel. If no IPC channel exists, this property is undefined.\n\nsubprocess.channel.ref()#\nAdded in: v7.1.0\nThis method makes the IPC channel keep the event loop of the parent process running if .unref() has been called before.\n\nsubprocess.channel.unref()#\nAdded in: v7.1.0\nThis method makes the IPC channel not keep the event loop of the parent process running, and lets it finish even while the channel is open.\n\nsubprocess.connected#\nAdded in: v0.7.2\n<boolean> Set to false after subprocess.disconnect() is called.\nThe subprocess.connected property indicates whether it is still possible to send and receive messages from a child process. When subprocess.connected is false, it is no longer possible to send or receive messages.\n\nsubprocess.disconnect()#\nAdded in: v0.7.2\nCloses the IPC channel between parent and child, allowing the child to exit gracefully once there are no other connections keeping it alive. After calling this method the subprocess.connected and process.connected properties in both the parent and child (respectively) will be set to false, and it will be no longer possible to pass messages between the processes.\n\nThe 'disconnect' event will be emitted when there are no messages in the process of being received. This will most often be triggered immediately after calling subprocess.disconnect().\n\nWhen the child process is a Node.js instance (e.g. spawned using child_process.fork()), the process.disconnect() method can be invoked within the child process to close the IPC channel as well.\n\nsubprocess.exitCode#\n<integer>\nThe subprocess.exitCode property indicates the exit code of the child process. If the child process is still running, the field will be null.\n\nsubprocess.kill([signal])#\nAdded in: v0.1.90\nsignal <number> | <string>\nReturns: <boolean>\nThe subprocess.kill() method sends a signal to the child process. If no argument is given, the process will be sent the 'SIGTERM' signal. See signal(7) for a list of available signals. This function returns true if kill(2) succeeds, and false otherwise.\n\nconst { spawn } = require('node:child_process');\nconst grep = spawn('grep', ['ssh']);\n\ngrep.on('close', (code, signal) => {\n  console.log(\n    `child process terminated due to receipt of signal ${signal}`);\n});\n\n// Send SIGHUP to process.\ngrep.kill('SIGHUP');\nThe ChildProcess object may emit an 'error' event if the signal cannot be delivered. Sending a signal to a child process that has already exited is not an error but may have unforeseen consequences. Specifically, if the process identifier", "doc_id": "5d8b8642-ad40-4d76-9790-ae77a06f033d", "embedding": null, "doc_hash": "798ed5fb90fccb499d6f912e599114f06bbd7926739ad6cc1a75ae45a0a82c6e", "extra_info": null, "node_info": {"start": 621534, "end": 625313}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fbaeb9a2-98de-4ab8-9418-36a83cf16eb2", "3": "252fb6a8-ee16-456a-999a-3800aaaa8533"}}, "__type__": "1"}, "252fb6a8-ee16-456a-999a-3800aaaa8533": {"__data__": {"text": "sent the 'SIGTERM' signal. See signal(7) for a list of available signals. This function returns true if kill(2) succeeds, and false otherwise.\n\nconst { spawn } = require('node:child_process');\nconst grep = spawn('grep', ['ssh']);\n\ngrep.on('close', (code, signal) => {\n  console.log(\n    `child process terminated due to receipt of signal ${signal}`);\n});\n\n// Send SIGHUP to process.\ngrep.kill('SIGHUP');\nThe ChildProcess object may emit an 'error' event if the signal cannot be delivered. Sending a signal to a child process that has already exited is not an error but may have unforeseen consequences. Specifically, if the process identifier (PID) has been reassigned to another process, the signal will be delivered to that process instead which can have unexpected results.\n\nWhile the function is called kill, the signal delivered to the child process may not actually terminate the process.\n\nSee kill(2) for reference.\n\nOn Windows, where POSIX signals do not exist, the signal argument will be ignored, and the process will be killed forcefully and abruptly (similar to 'SIGKILL'). See Signal Events for more details.\n\nOn Linux, child processes of child processes will not be terminated when attempting to kill their parent. This is likely to happen when running a new process in a shell or with the use of the shell option of ChildProcess:\n\n'use strict';\nconst { spawn } = require('node:child_process');\n\nconst subprocess = spawn(\n  'sh',\n  [\n    '-c',\n    `node -e \"setInterval(() => {\n      console.log(process.pid, 'is alive')\n    }, 500);\"`,\n  ], {\n    stdio: ['inherit', 'inherit', 'inherit'],\n  },\n);\n\nsetTimeout(() => {\n  subprocess.kill(); // Does not terminate the Node.js process in the shell.\n}, 2000);\nsubprocess.killed#\nAdded in: v0.5.10\n<boolean> Set to true after subprocess.kill() is used to successfully send a signal to the child process.\nThe subprocess.killed property indicates whether the child process successfully received a signal from subprocess.kill(). The killed property does not indicate that the child process has been terminated.\n\nsubprocess.pid#\nAdded in: v0.1.90\n<integer> | <undefined>\nReturns the process identifier (PID) of the child process. If the child process fails to spawn due to errors, then the value is undefined and error is emitted.\n\nconst { spawn } = require('node:child_process');\nconst grep = spawn('grep', ['ssh']);\n\nconsole.log(`Spawned child pid: ${grep.pid}`);\ngrep.stdin.end();\nsubprocess.ref()#\nAdded in: v0.7.10\nCalling subprocess.ref() after making a call to subprocess.unref() will restore the removed reference count for the child process, forcing the parent to wait for the child to exit before exiting itself.\n\nconst { spawn } = require('node:child_process');\n\nconst subprocess = spawn(process.argv[0], ['child_program.js'], {\n  detached: true,\n  stdio: 'ignore',\n});\n\nsubprocess.unref();\nsubprocess.ref();\nsubprocess.send(message[, sendHandle[, options]][, callback])#\nHistory\nmessage <Object>\nsendHandle <Handle>\noptions <Object> The options argument, if present, is an object used to parameterize the sending of certain types of handles. options supports the following properties:\nkeepOpen <boolean> A value that can be used when passing instances of net.Socket. When true, the socket is kept open in the sending process. Default: false.\ncallback <Function>\nReturns: <boolean>\nWhen an IPC channel has been established between the parent and child ( i.e. when using child_process.fork()), the subprocess.send() method", "doc_id": "252fb6a8-ee16-456a-999a-3800aaaa8533", "embedding": null, "doc_hash": "acc964fd3b906fa43cd5654dacb3b1a8be97dbc393dfaf611c1a74ebec56f04f", "extra_info": null, "node_info": {"start": 625415, "end": 628901}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5d8b8642-ad40-4d76-9790-ae77a06f033d", "3": "483a8f9a-56b8-4b42-ae83-acec80864087"}}, "__type__": "1"}, "483a8f9a-56b8-4b42-ae83-acec80864087": {"__data__": {"text": "['child_program.js'], {\n  detached: true,\n  stdio: 'ignore',\n});\n\nsubprocess.unref();\nsubprocess.ref();\nsubprocess.send(message[, sendHandle[, options]][, callback])#\nHistory\nmessage <Object>\nsendHandle <Handle>\noptions <Object> The options argument, if present, is an object used to parameterize the sending of certain types of handles. options supports the following properties:\nkeepOpen <boolean> A value that can be used when passing instances of net.Socket. When true, the socket is kept open in the sending process. Default: false.\ncallback <Function>\nReturns: <boolean>\nWhen an IPC channel has been established between the parent and child ( i.e. when using child_process.fork()), the subprocess.send() method can be used to send messages to the child process. When the child process is a Node.js instance, these messages can be received via the 'message' event.\n\nThe message goes through serialization and parsing. The resulting message might not be the same as what is originally sent.\n\nFor example, in the parent script:\n\nconst cp = require('node:child_process');\nconst n = cp.fork(`${__dirname}/sub.js`);\n\nn.on('message', (m) => {\n  console.log('PARENT got message:', m);\n});\n\n// Causes the child to print: CHILD got message: { hello: 'world' }\nn.send({ hello: 'world' });\nAnd then the child script, 'sub.js' might look like this:\n\nprocess.on('message', (m) => {\n  console.log('CHILD got message:', m);\n});\n\n// Causes the parent to print: PARENT got message: { foo: 'bar', baz: null }\nprocess.send({ foo: 'bar', baz: NaN });\nChild Node.js processes will have a process.send() method of their own that allows the child to send messages back to the parent.\n\nThere is a special case when sending a {cmd: 'NODE_foo'} message. Messages containing a NODE_ prefix in the cmd property are reserved for use within Node.js core and will not be emitted in the child's 'message' event. Rather, such messages are emitted using the 'internalMessage' event and are consumed internally by Node.js. Applications should avoid using such messages or listening for 'internalMessage' events as it is subject to change without notice.\n\nThe optional sendHandle argument that may be passed to subprocess.send() is for passing a TCP server or socket object to the child process. The child will receive the object as the second argument passed to the callback function registered on the 'message' event. Any data that is received and buffered in the socket will not be sent to the child.\n\nThe optional callback is a function that is invoked after the message is sent but before the child may have received it. The function is called with a single argument: null on success, or an Error object on failure.\n\nIf no callback function is provided and the message cannot be sent, an 'error' event will be emitted by the ChildProcess object. This can happen, for instance, when the child process has already exited.\n\nsubprocess.send() will return false if the channel has closed or when the backlog of unsent messages exceeds a threshold that makes it unwise to send more. Otherwise, the method returns true. The callback function can be used to implement flow control.\n\nExample: sending a server object#\nThe sendHandle argument can be used, for instance, to pass the handle of a TCP server object to the child process as illustrated in the example below:\n\nconst subprocess = require('node:child_process').fork('subprocess.js');\n\n// Open up the server object and send the handle.\nconst server = require('node:net').createServer();\nserver.on('connection', (socket) => {\n  socket.end('handled by parent');\n});\nserver.listen(1337, () => {\n  subprocess.send('server', server);\n});\nThe child would then receive the server object as:\n\nprocess.on('message', (m, server) => {\n  if (m === 'server') {\n    server.on('connection',", "doc_id": "483a8f9a-56b8-4b42-ae83-acec80864087", "embedding": null, "doc_hash": "b263530206a2aa50614869d11bcd6a346e8938726fe201f8d033a865d70ba9e0", "extra_info": null, "node_info": {"start": 628820, "end": 632617}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "252fb6a8-ee16-456a-999a-3800aaaa8533", "3": "0a51b6df-2fbf-4bdb-b90d-11199140a48e"}}, "__type__": "1"}, "0a51b6df-2fbf-4bdb-b90d-11199140a48e": {"__data__": {"text": "The callback function can be used to implement flow control.\n\nExample: sending a server object#\nThe sendHandle argument can be used, for instance, to pass the handle of a TCP server object to the child process as illustrated in the example below:\n\nconst subprocess = require('node:child_process').fork('subprocess.js');\n\n// Open up the server object and send the handle.\nconst server = require('node:net').createServer();\nserver.on('connection', (socket) => {\n  socket.end('handled by parent');\n});\nserver.listen(1337, () => {\n  subprocess.send('server', server);\n});\nThe child would then receive the server object as:\n\nprocess.on('message', (m, server) => {\n  if (m === 'server') {\n    server.on('connection', (socket) => {\n      socket.end('handled by child');\n    });\n  }\n});\nOnce the server is now shared between the parent and child, some connections can be handled by the parent and some by the child.\n\nWhile the example above uses a server created using the node:net module, node:dgram module servers use exactly the same workflow with the exceptions of listening on a 'message' event instead of 'connection' and using server.bind() instead of server.listen(). This is, however, only supported on Unix platforms.\n\nExample: sending a socket object#\nSimilarly, the sendHandler argument can be used to pass the handle of a socket to the child process. The example below spawns two children that each handle connections with \"normal\" or \"special\" priority:\n\nconst { fork } = require('node:child_process');\nconst normal = fork('subprocess.js', ['normal']);\nconst special = fork('subprocess.js', ['special']);\n\n// Open up the server and send sockets to child. Use pauseOnConnect to prevent\n// the sockets from being read before they are sent to the child process.\nconst server = require('node:net').createServer({ pauseOnConnect: true });\nserver.on('connection', (socket) => {\n\n  // If this is special priority...\n  if (socket.remoteAddress === '74.125.127.100') {\n    special.send('socket', socket);\n    return;\n  }\n  // This is normal priority.\n  normal.send('socket', socket);\n});\nserver.listen(1337);\nThe subprocess.js would receive the socket handle as the second argument passed to the event callback function:\n\nprocess.on('message', (m, socket) => {\n  if (m === 'socket') {\n    if (socket) {\n      // Check that the client socket exists.\n      // It is possible for the socket to be closed between the time it is\n      // sent and the time it is received in the child process.\n      socket.end(`Request handled with ${process.argv[2]} priority`);\n    }\n  }\n});\nDo not use .maxConnections on a socket that has been passed to a subprocess. The parent cannot track when the socket is destroyed.\n\nAny 'message' handlers in the subprocess should verify that socket exists, as the connection may have been closed during the time it takes to send the connection to the child.\n\nsubprocess.signalCode#\n<string> | <null>\nThe subprocess.signalCode property indicates the signal received by the child process if any, else null.\n\nsubprocess.spawnargs#\n<Array>\nThe subprocess.spawnargs property represents the full list of command-line arguments the child process was launched with.\n\nsubprocess.spawnfile#\n<string>\nThe subprocess.spawnfile property indicates the executable file name of the child process that is launched.\n\nFor child_process.fork(), its value will be equal to process.execPath. For child_process.spawn(), its value will be the name of the executable file. For child_process.exec(), its value will be the name of the shell in which the child process is launched.\n\nsubprocess.stderr#\nAdded in: v0.1.90\n<stream.Readable> | <null> | <undefined>\nA Readable Stream that", "doc_id": "0a51b6df-2fbf-4bdb-b90d-11199140a48e", "embedding": null, "doc_hash": "b070de8fe7f268637238f4f9b4f63fd9a359a773d4403fcbb503309dfd10ceba", "extra_info": null, "node_info": {"start": 632631, "end": 636305}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "483a8f9a-56b8-4b42-ae83-acec80864087", "3": "c275f33a-52a3-4927-b012-416bc6a5bf96"}}, "__type__": "1"}, "c275f33a-52a3-4927-b012-416bc6a5bf96": {"__data__": {"text": "property indicates the signal received by the child process if any, else null.\n\nsubprocess.spawnargs#\n<Array>\nThe subprocess.spawnargs property represents the full list of command-line arguments the child process was launched with.\n\nsubprocess.spawnfile#\n<string>\nThe subprocess.spawnfile property indicates the executable file name of the child process that is launched.\n\nFor child_process.fork(), its value will be equal to process.execPath. For child_process.spawn(), its value will be the name of the executable file. For child_process.exec(), its value will be the name of the shell in which the child process is launched.\n\nsubprocess.stderr#\nAdded in: v0.1.90\n<stream.Readable> | <null> | <undefined>\nA Readable Stream that represents the child process's stderr.\n\nIf the child was spawned with stdio[2] set to anything other than 'pipe', then this will be null.\n\nsubprocess.stderr is an alias for subprocess.stdio[2]. Both properties will refer to the same value.\n\nThe subprocess.stderr property can be null or undefined if the child process could not be successfully spawned.\n\nsubprocess.stdin#\nAdded in: v0.1.90\n<stream.Writable> | <null> | <undefined>\nA Writable Stream that represents the child process's stdin.\n\nIf a child process waits to read all of its input, the child will not continue until this stream has been closed via end().\n\nIf the child was spawned with stdio[0] set to anything other than 'pipe', then this will be null.\n\nsubprocess.stdin is an alias for subprocess.stdio[0]. Both properties will refer to the same value.\n\nThe subprocess.stdin property can be null or undefined if the child process could not be successfully spawned.\n\nsubprocess.stdio#\nAdded in: v0.7.10\n<Array>\nA sparse array of pipes to the child process, corresponding with positions in the stdio option passed to child_process.spawn() that have been set to the value 'pipe'. subprocess.stdio[0], subprocess.stdio[1], and subprocess.stdio[2] are also available as subprocess.stdin, subprocess.stdout, and subprocess.stderr, respectively.\n\nIn the following example, only the child's fd 1 (stdout) is configured as a pipe, so only the parent's subprocess.stdio[1] is a stream, all other values in the array are null.\n\nconst assert = require('node:assert');\nconst fs = require('node:fs');\nconst child_process = require('node:child_process');\n\nconst subprocess = child_process.spawn('ls', {\n  stdio: [\n    0, // Use parent's stdin for child.\n    'pipe', // Pipe child's stdout to parent.\n    fs.openSync('err.out', 'w'), // Direct child's stderr to a file.\n  ],\n});\n\nassert.strictEqual(subprocess.stdio[0], null);\nassert.strictEqual(subprocess.stdio[0], subprocess.stdin);\n\nassert(subprocess.stdout);\nassert.strictEqual(subprocess.stdio[1], subprocess.stdout);\n\nassert.strictEqual(subprocess.stdio[2], null);\nassert.strictEqual(subprocess.stdio[2], subprocess.stderr);\nThe subprocess.stdio property can be undefined if the child process could not be successfully spawned.\n\nsubprocess.stdout#\nAdded in: v0.1.90\n<stream.Readable> | <null> | <undefined>\nA Readable Stream that represents the child process's stdout.\n\nIf the child was spawned with stdio[1] set to anything other than 'pipe', then this will be null.\n\nsubprocess.stdout is an alias for subprocess.stdio[1]. Both properties will refer to the same value.\n\nconst { spawn } = require('node:child_process');\n\nconst subprocess = spawn('ls');\n\nsubprocess.stdout.on('data',", "doc_id": "c275f33a-52a3-4927-b012-416bc6a5bf96", "embedding": null, "doc_hash": "ed275683cda40b4589799363a6b28b9ca93213de16e3557a53a01c77645ae7a5", "extra_info": null, "node_info": {"start": 636286, "end": 639703}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0a51b6df-2fbf-4bdb-b90d-11199140a48e", "3": "89746e5a-3a91-4313-95d7-345f2e959790"}}, "__type__": "1"}, "89746e5a-3a91-4313-95d7-345f2e959790": {"__data__": {"text": "null);\nassert.strictEqual(subprocess.stdio[2], subprocess.stderr);\nThe subprocess.stdio property can be undefined if the child process could not be successfully spawned.\n\nsubprocess.stdout#\nAdded in: v0.1.90\n<stream.Readable> | <null> | <undefined>\nA Readable Stream that represents the child process's stdout.\n\nIf the child was spawned with stdio[1] set to anything other than 'pipe', then this will be null.\n\nsubprocess.stdout is an alias for subprocess.stdio[1]. Both properties will refer to the same value.\n\nconst { spawn } = require('node:child_process');\n\nconst subprocess = spawn('ls');\n\nsubprocess.stdout.on('data', (data) => {\n  console.log(`Received chunk ${data}`);\n});\nThe subprocess.stdout property can be null or undefined if the child process could not be successfully spawned.\n\nsubprocess.unref()#\nAdded in: v0.7.10\nBy default, the parent will wait for the detached child to exit. To prevent the parent from waiting for a given subprocess to exit, use the subprocess.unref() method. Doing so will cause the parent's event loop to not include the child in its reference count, allowing the parent to exit independently of the child, unless there is an established IPC channel between the child and the parent.\n\nconst { spawn } = require('node:child_process');\n\nconst subprocess = spawn(process.argv[0], ['child_program.js'], {\n  detached: true,\n  stdio: 'ignore',\n});\n\nsubprocess.unref();\nmaxBuffer and Unicode#\nThe maxBuffer option specifies the largest number of bytes allowed on stdout or stderr. If this value is exceeded, then the child process is terminated. This impacts output that includes multibyte character encodings such as UTF-8 or UTF-16. For instance, console.log('\u4e2d\u6587\u6d4b\u8bd5') will send 13 UTF-8 encoded bytes to stdout although there are only 4 characters.\n\nShell requirements#\nThe shell should understand the -c switch. If the shell is 'cmd.exe', it should understand the /d /s /c switches and command-line parsing should be compatible.\n\nDefault Windows shell#\nAlthough Microsoft specifies %COMSPEC% must contain the path to 'cmd.exe' in the root environment, child processes are not always subject to the same requirement. Thus, in child_process functions where a shell can be spawned, 'cmd.exe' is used as a fallback if process.env.ComSpec is unavailable.\n\nAdvanced serialization#\nAdded in: v13.2.0, v12.16.0\nChild processes support a serialization mechanism for IPC that is based on the serialization API of the node:v8 module, based on the HTML structured clone algorithm. This is generally more powerful and supports more built-in JavaScript object types, such as BigInt, Map and Set, ArrayBuffer and TypedArray, Buffer, Error, RegExp etc.\n\nHowever, this format is not a full superset of JSON, and e.g. properties set on objects of such built-in types will not be passed on through the serialization step. Additionally, performance may not be equivalent to that of JSON, depending on the structure of the passed data. Therefore, this feature requires opting in by setting the serialization option to 'advanced' when calling child_process.spawn() or child_process.fork().\n\nCluster#\nStability: 2 - Stable\nSource Code: lib/cluster.js\n\nClusters of Node.js processes can be used to run multiple instances of Node.js that can distribute workloads among their application threads. When process isolation is not needed, use the worker_threads module instead, which allows running multiple application threads within a single Node.js instance.\n\nThe cluster module allows easy creation of child processes that all share server ports.\n\nimport cluster from 'node:cluster';\nimport http from 'node:http';\nimport { availableParallelism } from 'node:os';\nimport process from 'node:process';\n\nconst numCPUs = availableParallelism();\n\nif", "doc_id": "89746e5a-3a91-4313-95d7-345f2e959790", "embedding": null, "doc_hash": "f1111a4e6c1569f835eb4ef469731e52f6e04d9c6ab6186c31fc1a623e9b5627", "extra_info": null, "node_info": {"start": 639788, "end": 643541}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c275f33a-52a3-4927-b012-416bc6a5bf96", "3": "4adad584-cb0a-43f6-a76f-e11e73a22da9"}}, "__type__": "1"}, "4adad584-cb0a-43f6-a76f-e11e73a22da9": {"__data__": {"text": "this feature requires opting in by setting the serialization option to 'advanced' when calling child_process.spawn() or child_process.fork().\n\nCluster#\nStability: 2 - Stable\nSource Code: lib/cluster.js\n\nClusters of Node.js processes can be used to run multiple instances of Node.js that can distribute workloads among their application threads. When process isolation is not needed, use the worker_threads module instead, which allows running multiple application threads within a single Node.js instance.\n\nThe cluster module allows easy creation of child processes that all share server ports.\n\nimport cluster from 'node:cluster';\nimport http from 'node:http';\nimport { availableParallelism } from 'node:os';\nimport process from 'node:process';\n\nconst numCPUs = availableParallelism();\n\nif (cluster.isPrimary) {\n  console.log(`Primary ${process.pid} is running`);\n\n  // Fork workers.\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('hello world\\n');\n  }).listen(8000);\n\n  console.log(`Worker ${process.pid} started`);\n}\nRunning Node.js will now share port 8000 between the workers:\n\n$ node server.js\nPrimary 3596 is running\nWorker 4324 started\nWorker 4520 started\nWorker 6056 started\nWorker 5644 started\nOn Windows, it is not yet possible to set up a named pipe server in a worker.\n\nHow it works#\nThe worker processes are spawned using the child_process.fork() method, so that they can communicate with the parent via IPC and pass server handles back and forth.\n\nThe cluster module supports two methods of distributing incoming connections.\n\nThe first one (and the default one on all platforms except Windows) is the round-robin approach, where the primary process listens on a port, accepts new connections and distributes them across the workers in a round-robin fashion, with some built-in smarts to avoid overloading a worker process.\n\nThe second approach is where the primary process creates the listen socket and sends it to interested workers. The workers then accept incoming connections directly.\n\nThe second approach should, in theory, give the best performance. In practice however, distribution tends to be very unbalanced due to operating system scheduler vagaries. Loads have been observed where over 70% of all connections ended up in just two processes, out of a total of eight.\n\nBecause server.listen() hands off most of the work to the primary process, there are three cases where the behavior between a normal Node.js process and a cluster worker differs:\n\nserver.listen({fd: 7}) Because the message is passed to the primary, file descriptor 7 in the parent will be listened on, and the handle passed to the worker, rather than listening to the worker's idea of what the number 7 file descriptor references.\nserver.listen(handle) Listening on handles explicitly will cause the worker to use the supplied handle, rather than talk to the primary process.\nserver.listen(0) Normally, this will cause servers to listen on a random port. However, in a cluster, each worker will receive the same \"random\" port each time they do listen(0). In essence, the port is random the first time, but predictable thereafter. To listen on a unique port, generate a port number based on the cluster worker ID.\nNode.js does not provide routing logic. It is therefore important to design an application such that it does not rely too heavily on in-memory data objects for things like sessions and login.\n\nBecause workers are all separate processes, they can be killed or re-spawned depending on a program's needs, without affecting other workers. As", "doc_id": "4adad584-cb0a-43f6-a76f-e11e73a22da9", "embedding": null, "doc_hash": "137e3a79100ed21cbd14d67d273502b395ddbadfa19f6c355ff5bafa50437b41", "extra_info": null, "node_info": {"start": 643402, "end": 647235}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "89746e5a-3a91-4313-95d7-345f2e959790", "3": "2ff08561-57a3-4a39-ae73-784acff631f0"}}, "__type__": "1"}, "2ff08561-57a3-4a39-ae73-784acff631f0": {"__data__": {"text": "Listening on handles explicitly will cause the worker to use the supplied handle, rather than talk to the primary process.\nserver.listen(0) Normally, this will cause servers to listen on a random port. However, in a cluster, each worker will receive the same \"random\" port each time they do listen(0). In essence, the port is random the first time, but predictable thereafter. To listen on a unique port, generate a port number based on the cluster worker ID.\nNode.js does not provide routing logic. It is therefore important to design an application such that it does not rely too heavily on in-memory data objects for things like sessions and login.\n\nBecause workers are all separate processes, they can be killed or re-spawned depending on a program's needs, without affecting other workers. As long as there are some workers still alive, the server will continue to accept connections. If no workers are alive, existing connections will be dropped and new connections will be refused. Node.js does not automatically manage the number of workers, however. It is the application's responsibility to manage the worker pool based on its own needs.\n\nAlthough a primary use case for the node:cluster module is networking, it can also be used for other use cases requiring worker processes.\n\nClass: Worker#\nAdded in: v0.7.0\nExtends: <EventEmitter>\nA Worker object contains all public information and method about a worker. In the primary it can be obtained using cluster.workers. In a worker it can be obtained using cluster.worker.\n\nEvent: 'disconnect'#\nAdded in: v0.7.7\nSimilar to the cluster.on('disconnect') event, but specific to this worker.\n\ncluster.fork().on('disconnect', () => {\n  // Worker has disconnected\n});\nEvent: 'error'#\nAdded in: v0.7.3\nThis event is the same as the one provided by child_process.fork().\n\nWithin a worker, process.on('error') may also be used.\n\nEvent: 'exit'#\nAdded in: v0.11.2\ncode <number> The exit code, if it exited normally.\nsignal <string> The name of the signal (e.g. 'SIGHUP') that caused the process to be killed.\nSimilar to the cluster.on('exit') event, but specific to this worker.\n\nimport cluster from 'node:cluster';\n\nif (cluster.isPrimary) {\n  const worker = cluster.fork();\n  worker.on('exit', (code, signal) => {\n    if (signal) {\n      console.log(`worker was killed by signal: ${signal}`);\n    } else if (code !== 0) {\n      console.log(`worker exited with error code: ${code}`);\n    } else {\n      console.log('worker success!');\n    }\n  });\n}\nEvent: 'listening'#\nAdded in: v0.7.0\naddress <Object>\nSimilar to the cluster.on('listening') event, but specific to this worker.\n\ncluster.fork().on('listening', (address) => {\n  // Worker is listening\n});\nIt is not emitted in the worker.\n\nEvent: 'message'#\nAdded in: v0.7.0\nmessage <Object>\nhandle <undefined> | <Object>\nSimilar to the 'message' event of cluster, but specific to this worker.\n\nWithin a worker, process.on('message') may also be used.\n\nSee process event: 'message'.\n\nHere is an example using the message system. It keeps a count in the primary process of the number of HTTP requests received by the workers:\n\nimport cluster from 'node:cluster';\nimport http from 'node:http';\nimport { availableParallelism } from 'node:os';\nimport process from 'node:process';\n\nif (cluster.isPrimary) {\n\n  // Keep track of http requests\n  let numReqs = 0;\n  setInterval(() => {\n    console.log(`numReqs = ${numReqs}`);\n  },", "doc_id": "2ff08561-57a3-4a39-ae73-784acff631f0", "embedding": null, "doc_hash": "3495d14c5e179c462e09219456598a13affac637f112408e9744dd8fbf61015f", "extra_info": null, "node_info": {"start": 647263, "end": 650679}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4adad584-cb0a-43f6-a76f-e11e73a22da9", "3": "9d077f12-0fc7-4f31-8a16-dc315058765c"}}, "__type__": "1"}, "9d077f12-0fc7-4f31-8a16-dc315058765c": {"__data__": {"text": "<Object>\nhandle <undefined> | <Object>\nSimilar to the 'message' event of cluster, but specific to this worker.\n\nWithin a worker, process.on('message') may also be used.\n\nSee process event: 'message'.\n\nHere is an example using the message system. It keeps a count in the primary process of the number of HTTP requests received by the workers:\n\nimport cluster from 'node:cluster';\nimport http from 'node:http';\nimport { availableParallelism } from 'node:os';\nimport process from 'node:process';\n\nif (cluster.isPrimary) {\n\n  // Keep track of http requests\n  let numReqs = 0;\n  setInterval(() => {\n    console.log(`numReqs = ${numReqs}`);\n  }, 1000);\n\n  // Count requests\n  function messageHandler(msg) {\n    if (msg.cmd && msg.cmd === 'notifyRequest') {\n      numReqs += 1;\n    }\n  }\n\n  // Start workers and listen for messages containing notifyRequest\n  const numCPUs = availableParallelism();\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  for (const id in cluster.workers) {\n    cluster.workers[id].on('message', messageHandler);\n  }\n\n} else {\n\n  // Worker processes have a http server.\n  http.Server((req, res) => {\n    res.writeHead(200);\n    res.end('hello world\\n');\n\n    // Notify primary about the request\n    process.send({ cmd: 'notifyRequest' });\n  }).listen(8000);\n}\nEvent: 'online'#\nAdded in: v0.7.0\nSimilar to the cluster.on('online') event, but specific to this worker.\n\ncluster.fork().on('online', () => {\n  // Worker is online\n});\nIt is not emitted in the worker.\n\nworker.disconnect()#\nHistory\nReturns: <cluster.Worker> A reference to worker.\nIn a worker, this function will close all servers, wait for the 'close' event on those servers, and then disconnect the IPC channel.\n\nIn the primary, an internal message is sent to the worker causing it to call .disconnect() on itself.\n\nCauses .exitedAfterDisconnect to be set.\n\nAfter a server is closed, it will no longer accept new connections, but connections may be accepted by any other listening worker. Existing connections will be allowed to close as usual. When no more connections exist, see server.close(), the IPC channel to the worker will close allowing it to die gracefully.\n\nThe above applies only to server connections, client connections are not automatically closed by workers, and disconnect does not wait for them to close before exiting.\n\nIn a worker, process.disconnect exists, but it is not this function; it is disconnect().\n\nBecause long living server connections may block workers from disconnecting, it may be useful to send a message, so application specific actions may be taken to close them. It also may be useful to implement a timeout, killing a worker if the 'disconnect' event has not been emitted after some time.\n\nif (cluster.isPrimary) {\n  const worker = cluster.fork();\n  let timeout;\n\n  worker.on('listening', (address) => {\n    worker.send('shutdown');\n    worker.disconnect();\n    timeout = setTimeout(() => {\n      worker.kill();\n    }, 2000);\n  });\n\n  worker.on('disconnect', () => {\n    clearTimeout(timeout);\n  });\n\n} else if (cluster.isWorker) {\n  const net = require('node:net');\n  const server = net.createServer((socket) => {\n    // Connections never end\n  });\n\n  server.listen(8000);\n\n  process.on('message', (msg) => {\n    if (msg === 'shutdown') {\n      // Initiate graceful", "doc_id": "9d077f12-0fc7-4f31-8a16-dc315058765c", "embedding": null, "doc_hash": "c6e2af02cac6f5b7b169eb881e2948500303745a3456df5769ebc59df33e5588", "extra_info": null, "node_info": {"start": 650800, "end": 654104}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2ff08561-57a3-4a39-ae73-784acff631f0", "3": "b4ae6c3d-2865-4f0a-81d1-474d20a612a9"}}, "__type__": "1"}, "b4ae6c3d-2865-4f0a-81d1-474d20a612a9": {"__data__": {"text": "cluster.fork();\n  let timeout;\n\n  worker.on('listening', (address) => {\n    worker.send('shutdown');\n    worker.disconnect();\n    timeout = setTimeout(() => {\n      worker.kill();\n    }, 2000);\n  });\n\n  worker.on('disconnect', () => {\n    clearTimeout(timeout);\n  });\n\n} else if (cluster.isWorker) {\n  const net = require('node:net');\n  const server = net.createServer((socket) => {\n    // Connections never end\n  });\n\n  server.listen(8000);\n\n  process.on('message', (msg) => {\n    if (msg === 'shutdown') {\n      // Initiate graceful close of any connections to server\n    }\n  });\n}\nworker.exitedAfterDisconnect#\nAdded in: v6.0.0\n<boolean>\nThis property is true if the worker exited due to .disconnect(). If the worker exited any other way, it is false. If the worker has not exited, it is undefined.\n\nThe boolean worker.exitedAfterDisconnect allows distinguishing between voluntary and accidental exit, the primary may choose not to respawn a worker based on this value.\n\ncluster.on('exit', (worker, code, signal) => {\n  if (worker.exitedAfterDisconnect === true) {\n    console.log('Oh, it was just voluntary \u2013 no need to worry');\n  }\n});\n\n// kill worker\nworker.kill();\nworker.id#\nAdded in: v0.8.0\n<integer>\nEach new worker is given its own unique id, this id is stored in the id.\n\nWhile a worker is alive, this is the key that indexes it in cluster.workers.\n\nworker.isConnected()#\nAdded in: v0.11.14\nThis function returns true if the worker is connected to its primary via its IPC channel, false otherwise. A worker is connected to its primary after it has been created. It is disconnected after the 'disconnect' event is emitted.\n\nworker.isDead()#\nAdded in: v0.11.14\nThis function returns true if the worker's process has terminated (either because of exiting or being signaled). Otherwise, it returns false.\n\nimport cluster from 'node:cluster';\nimport http from 'node:http';\nimport { availableParallelism } from 'node:os';\nimport process from 'node:process';\n\nconst numCPUs = availableParallelism();\n\nif (cluster.isPrimary) {\n  console.log(`Primary ${process.pid} is running`);\n\n  // Fork workers.\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('fork', (worker) => {\n    console.log('worker is dead:', worker.isDead());\n  });\n\n  cluster.on('exit', (worker, code, signal) => {\n    console.log('worker is dead:', worker.isDead());\n  });\n} else {\n  // Workers can share any TCP connection. In this case, it is an HTTP server.\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end(`Current process\\n ${process.pid}`);\n    process.kill(process.pid);\n  }).listen(8000);\n}\nworker.kill([signal])#\nAdded in: v0.9.12\nsignal <string> Name of the kill signal to send to the worker process. Default: 'SIGTERM'\nThis function will kill the worker. In the primary worker, it does this by disconnecting the worker.process, and once disconnected, killing with signal. In the worker, it does it by killing the process with signal.\n\nThe kill() function kills the worker process without waiting for a graceful disconnect, it has the same behavior as worker.process.kill().\n\nThis method is aliased as worker.destroy() for backwards compatibility.\n\nIn a worker, process.kill()", "doc_id": "b4ae6c3d-2865-4f0a-81d1-474d20a612a9", "embedding": null, "doc_hash": "eff9178b2130cca5d0d05fa9bc4c5914ae14d1bc6f07dd0a821f70dff0ba6f4a", "extra_info": null, "node_info": {"start": 654217, "end": 657422}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9d077f12-0fc7-4f31-8a16-dc315058765c", "3": "a1621dd7-5c2d-440e-92ae-2b5ecafc3106"}}, "__type__": "1"}, "a1621dd7-5c2d-440e-92ae-2b5ecafc3106": {"__data__": {"text": "   res.end(`Current process\\n ${process.pid}`);\n    process.kill(process.pid);\n  }).listen(8000);\n}\nworker.kill([signal])#\nAdded in: v0.9.12\nsignal <string> Name of the kill signal to send to the worker process. Default: 'SIGTERM'\nThis function will kill the worker. In the primary worker, it does this by disconnecting the worker.process, and once disconnected, killing with signal. In the worker, it does it by killing the process with signal.\n\nThe kill() function kills the worker process without waiting for a graceful disconnect, it has the same behavior as worker.process.kill().\n\nThis method is aliased as worker.destroy() for backwards compatibility.\n\nIn a worker, process.kill() exists, but it is not this function; it is kill().\n\nworker.process#\nAdded in: v0.7.0\n<ChildProcess>\nAll workers are created using child_process.fork(), the returned object from this function is stored as .process. In a worker, the global process is stored.\n\nSee: Child Process module.\n\nWorkers will call process.exit(0) if the 'disconnect' event occurs on process and .exitedAfterDisconnect is not true. This protects against accidental disconnection.\n\nworker.send(message[, sendHandle[, options]][, callback])#\nHistory\nmessage <Object>\nsendHandle <Handle>\noptions <Object> The options argument, if present, is an object used to parameterize the sending of certain types of handles. options supports the following properties:\nkeepOpen <boolean> A value that can be used when passing instances of net.Socket. When true, the socket is kept open in the sending process. Default: false.\ncallback <Function>\nReturns: <boolean>\nSend a message to a worker or primary, optionally with a handle.\n\nIn the primary, this sends a message to a specific worker. It is identical to ChildProcess.send().\n\nIn a worker, this sends a message to the primary. It is identical to process.send().\n\nThis example will echo back all messages from the primary:\n\nif (cluster.isPrimary) {\n  const worker = cluster.fork();\n  worker.send('hi there');\n\n} else if (cluster.isWorker) {\n  process.on('message', (msg) => {\n    process.send(msg);\n  });\n}\nEvent: 'disconnect'#\nAdded in: v0.7.9\nworker <cluster.Worker>\nEmitted after the worker IPC channel has disconnected. This can occur when a worker exits gracefully, is killed, or is disconnected manually (such as with worker.disconnect()).\n\nThere may be a delay between the 'disconnect' and 'exit' events. These events can be used to detect if the process is stuck in a cleanup or if there are long-living connections.\n\ncluster.on('disconnect', (worker) => {\n  console.log(`The worker #${worker.id} has disconnected`);\n});\nEvent: 'exit'#\nAdded in: v0.7.9\nworker <cluster.Worker>\ncode <number> The exit code, if it exited normally.\nsignal <string> The name of the signal (e.g. 'SIGHUP') that caused the process to be killed.\nWhen any of the workers die the cluster module will emit the 'exit' event.\n\nThis can be used to restart the worker by calling .fork() again.\n\ncluster.on('exit', (worker, code, signal) => {\n  console.log('worker %d died (%s). restarting...',\n              worker.process.pid, signal || code);\n  cluster.fork();\n});\nSee child_process event: 'exit'.\n\nEvent: 'fork'#\nAdded in: v0.7.0\nworker <cluster.Worker>\nWhen a new worker is forked the cluster module will emit a 'fork' event. This can be used to log worker activity, and create a custom timeout.\n\nconst timeouts = [];\nfunction", "doc_id": "a1621dd7-5c2d-440e-92ae-2b5ecafc3106", "embedding": null, "doc_hash": "8a0523c930aae96605e799a902e96d7b394f303ac421af671a1ec2c6e75d51c0", "extra_info": null, "node_info": {"start": 657265, "end": 660670}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b4ae6c3d-2865-4f0a-81d1-474d20a612a9", "3": "16d7e77c-c9fb-465d-818c-dd52b1060d4a"}}, "__type__": "1"}, "16d7e77c-c9fb-465d-818c-dd52b1060d4a": {"__data__": {"text": "the process to be killed.\nWhen any of the workers die the cluster module will emit the 'exit' event.\n\nThis can be used to restart the worker by calling .fork() again.\n\ncluster.on('exit', (worker, code, signal) => {\n  console.log('worker %d died (%s). restarting...',\n              worker.process.pid, signal || code);\n  cluster.fork();\n});\nSee child_process event: 'exit'.\n\nEvent: 'fork'#\nAdded in: v0.7.0\nworker <cluster.Worker>\nWhen a new worker is forked the cluster module will emit a 'fork' event. This can be used to log worker activity, and create a custom timeout.\n\nconst timeouts = [];\nfunction errorMsg() {\n  console.error('Something must be wrong with the connection ...');\n}\n\ncluster.on('fork', (worker) => {\n  timeouts[worker.id] = setTimeout(errorMsg, 2000);\n});\ncluster.on('listening', (worker, address) => {\n  clearTimeout(timeouts[worker.id]);\n});\ncluster.on('exit', (worker, code, signal) => {\n  clearTimeout(timeouts[worker.id]);\n  errorMsg();\n});\nEvent: 'listening'#\nAdded in: v0.7.0\nworker <cluster.Worker>\naddress <Object>\nAfter calling listen() from a worker, when the 'listening' event is emitted on the server, a 'listening' event will also be emitted on cluster in the primary.\n\nThe event handler is executed with two arguments, the worker contains the worker object and the address object contains the following connection properties: address, port, and addressType. This is very useful if the worker is listening on more than one address.\n\ncluster.on('listening', (worker, address) => {\n  console.log(\n    `A worker is now connected to ${address.address}:${address.port}`);\n});\nThe addressType is one of:\n\n4 (TCPv4)\n6 (TCPv6)\n-1 (Unix domain socket)\n'udp4' or 'udp6' (UDPv4 or UDPv6)\nEvent: 'message'#\nHistory\nworker <cluster.Worker>\nmessage <Object>\nhandle <undefined> | <Object>\nEmitted when the cluster primary receives a message from any worker.\n\nSee child_process event: 'message'.\n\nEvent: 'online'#\nAdded in: v0.7.0\nworker <cluster.Worker>\nAfter forking a new worker, the worker should respond with an online message. When the primary receives an online message it will emit this event. The difference between 'fork' and 'online' is that fork is emitted when the primary forks a worker, and 'online' is emitted when the worker is running.\n\ncluster.on('online', (worker) => {\n  console.log('Yay, the worker responded after it was forked');\n});\nEvent: 'setup'#\nAdded in: v0.7.1\nsettings <Object>\nEmitted every time .setupPrimary() is called.\n\nThe settings object is the cluster.settings object at the time .setupPrimary() was called and is advisory only, since multiple calls to .setupPrimary() can be made in a single tick.\n\nIf accuracy is important, use cluster.settings.\n\ncluster.disconnect([callback])#\nAdded in: v0.7.7\ncallback <Function> Called when all workers are disconnected and handles are closed.\nCalls .disconnect() on each worker in cluster.workers.\n\nWhen they are disconnected all internal handles will be closed, allowing the primary process to die gracefully if no other event is waiting.\n\nThe method takes an optional callback argument which will be called when finished.\n\nThis can only be called from the primary process.\n\ncluster.fork([env])#\nAdded in: v0.6.0\nenv <Object> Key/value pairs to add to worker process environment.\nReturns: <cluster.Worker>\nSpawn a new worker process.\n\nThis can only be called from", "doc_id": "16d7e77c-c9fb-465d-818c-dd52b1060d4a", "embedding": null, "doc_hash": "123f2e9af84431316112e3a7cf9abce6d62e93bafd8166261f071cba01037948", "extra_info": null, "node_info": {"start": 660758, "end": 664120}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a1621dd7-5c2d-440e-92ae-2b5ecafc3106", "3": "b98a0517-0ba6-4e74-86c3-8ca35628adfb"}}, "__type__": "1"}, "b98a0517-0ba6-4e74-86c3-8ca35628adfb": {"__data__": {"text": "made in a single tick.\n\nIf accuracy is important, use cluster.settings.\n\ncluster.disconnect([callback])#\nAdded in: v0.7.7\ncallback <Function> Called when all workers are disconnected and handles are closed.\nCalls .disconnect() on each worker in cluster.workers.\n\nWhen they are disconnected all internal handles will be closed, allowing the primary process to die gracefully if no other event is waiting.\n\nThe method takes an optional callback argument which will be called when finished.\n\nThis can only be called from the primary process.\n\ncluster.fork([env])#\nAdded in: v0.6.0\nenv <Object> Key/value pairs to add to worker process environment.\nReturns: <cluster.Worker>\nSpawn a new worker process.\n\nThis can only be called from the primary process.\n\ncluster.isMaster#\nAdded in: v0.8.1Deprecated since: v16.0.0\nDeprecated alias for cluster.isPrimary.\n\ncluster.isPrimary#\nAdded in: v16.0.0\n<boolean>\nTrue if the process is a primary. This is determined by the process.env.NODE_UNIQUE_ID. If process.env.NODE_UNIQUE_ID is undefined, then isPrimary is true.\n\ncluster.isWorker#\nAdded in: v0.6.0\n<boolean>\nTrue if the process is not a primary (it is the negation of cluster.isPrimary).\n\ncluster.schedulingPolicy#\nAdded in: v0.11.2\nThe scheduling policy, either cluster.SCHED_RR for round-robin or cluster.SCHED_NONE to leave it to the operating system. This is a global setting and effectively frozen once either the first worker is spawned, or .setupPrimary() is called, whichever comes first.\n\nSCHED_RR is the default on all operating systems except Windows. Windows will change to SCHED_RR once libuv is able to effectively distribute IOCP handles without incurring a large performance hit.\n\ncluster.schedulingPolicy can also be set through the NODE_CLUSTER_SCHED_POLICY environment variable. Valid values are 'rr' and 'none'.\n\ncluster.settings#\nHistory\n<Object>\nexecArgv <string[]> List of string arguments passed to the Node.js executable. Default: process.execArgv.\nexec <string> File path to worker file. Default: process.argv[1].\nargs <string[]> String arguments passed to worker. Default: process.argv.slice(2).\ncwd <string> Current working directory of the worker process. Default: undefined (inherits from parent process).\nserialization <string> Specify the kind of serialization used for sending messages between processes. Possible values are 'json' and 'advanced'. See Advanced serialization for child_process for more details. Default: false.\nsilent <boolean> Whether or not to send output to parent's stdio. Default: false.\nstdio <Array> Configures the stdio of forked processes. Because the cluster module relies on IPC to function, this configuration must contain an 'ipc' entry. When this option is provided, it overrides silent.\nuid <number> Sets the user identity of the process. (See setuid(2).)\ngid <number> Sets the group identity of the process. (See setgid(2).)\ninspectPort <number> | <Function> Sets inspector port of worker. This can be a number, or a function that takes no arguments and returns a number. By default each worker gets its own port, incremented from the primary's process.debugPort.\nwindowsHide <boolean> Hide the forked processes console window that would normally be created on Windows systems. Default: false.\nAfter calling .setupPrimary() (or .fork()) this settings object will contain the settings, including the default values.\n\nThis object is not intended to be changed or set manually.\n\ncluster.setupMaster([settings])#\nHistory\nDeprecated alias for .setupPrimary().\n\ncluster.setupPrimary([settings])#\nAdded in: v16.0.0\nsettings <Object> See", "doc_id": "b98a0517-0ba6-4e74-86c3-8ca35628adfb", "embedding": null, "doc_hash": "d4fd58d111e0abea8fb4079eda550c6dcdc710eb1b6ef6495dabdb6d5f7c27cf", "extra_info": null, "node_info": {"start": 663993, "end": 667580}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "16d7e77c-c9fb-465d-818c-dd52b1060d4a", "3": "e88c6bc0-505e-4aa2-8a58-5c2c6a68a9a8"}}, "__type__": "1"}, "e88c6bc0-505e-4aa2-8a58-5c2c6a68a9a8": {"__data__": {"text": "the group identity of the process. (See setgid(2).)\ninspectPort <number> | <Function> Sets inspector port of worker. This can be a number, or a function that takes no arguments and returns a number. By default each worker gets its own port, incremented from the primary's process.debugPort.\nwindowsHide <boolean> Hide the forked processes console window that would normally be created on Windows systems. Default: false.\nAfter calling .setupPrimary() (or .fork()) this settings object will contain the settings, including the default values.\n\nThis object is not intended to be changed or set manually.\n\ncluster.setupMaster([settings])#\nHistory\nDeprecated alias for .setupPrimary().\n\ncluster.setupPrimary([settings])#\nAdded in: v16.0.0\nsettings <Object> See cluster.settings.\nsetupPrimary is used to change the default 'fork' behavior. Once called, the settings will be present in cluster.settings.\n\nAny settings changes only affect future calls to .fork() and have no effect on workers that are already running.\n\nThe only attribute of a worker that cannot be set via .setupPrimary() is the env passed to .fork().\n\nThe defaults above apply to the first call only; the defaults for later calls are the current values at the time of cluster.setupPrimary() is called.\n\nimport cluster from 'node:cluster';\n\ncluster.setupPrimary({\n  exec: 'worker.js',\n  args: ['--use', 'https'],\n  silent: true,\n});\ncluster.fork(); // https worker\ncluster.setupPrimary({\n  exec: 'worker.js',\n  args: ['--use', 'http'],\n});\ncluster.fork(); // http worker\nThis can only be called from the primary process.\n\ncluster.worker#\nAdded in: v0.7.0\n<Object>\nA reference to the current worker object. Not available in the primary process.\n\nimport cluster from 'node:cluster';\n\nif (cluster.isPrimary) {\n  console.log('I am primary');\n  cluster.fork();\n  cluster.fork();\n} else if (cluster.isWorker) {\n  console.log(`I am worker #${cluster.worker.id}`);\n}\ncluster.workers#\nAdded in: v0.7.0\n<Object>\nA hash that stores the active worker objects, keyed by id field. This makes it easy to loop through all the workers. It is only available in the primary process.\n\nA worker is removed from cluster.workers after the worker has disconnected and exited. The order between these two events cannot be determined in advance. However, it is guaranteed that the removal from the cluster.workers list happens before the last 'disconnect' or 'exit' event is emitted.\n\nimport cluster from 'node:cluster';\n\nfor (const worker of Object.values(cluster.workers)) {\n  worker.send('big announcement to all workers');\n}\nCommand-line API#\nNode.js comes with a variety of CLI options. These options expose built-in debugging, multiple ways to execute scripts, and other helpful runtime options.\n\nTo view this documentation as a manual page in a terminal, run man node.\n\nSynopsis#\nnode [options] [V8 options] [<program-entry-point> | -e \"script\" | -] [--] [arguments]\n\nnode inspect [<program-entry-point> | -e \"script\" | <host>:<port>] \u2026\n\nnode --v8-options\n\nExecute without arguments to start the REPL.\n\nFor more info about node inspect, see the debugger documentation.\n\nProgram entry point#\nThe program entry point is a specifier-like string. If the string is not an absolute path, it's resolved as a relative path from the current working directory. That path is then resolved by CommonJS module loader. If no corresponding file is found, an error is thrown.\n\nIf a file is found, its path will be passed to the ECMAScript module loader under any of the following conditions:\n\nThe program was started with a command-line flag that forces the entry point to be loaded with ECMAScript module loader.\nThe file has", "doc_id": "e88c6bc0-505e-4aa2-8a58-5c2c6a68a9a8", "embedding": null, "doc_hash": "cb254d0d448f0cf7d62e99c4e4b8897f567aa6c0073668c69eed4af5fbacf456", "extra_info": null, "node_info": {"start": 667555, "end": 671207}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b98a0517-0ba6-4e74-86c3-8ca35628adfb", "3": "1081ce51-d2a9-4f7b-add9-d19fcb45fee8"}}, "__type__": "1"}, "1081ce51-d2a9-4f7b-add9-d19fcb45fee8": {"__data__": {"text": "[arguments]\n\nnode inspect [<program-entry-point> | -e \"script\" | <host>:<port>] \u2026\n\nnode --v8-options\n\nExecute without arguments to start the REPL.\n\nFor more info about node inspect, see the debugger documentation.\n\nProgram entry point#\nThe program entry point is a specifier-like string. If the string is not an absolute path, it's resolved as a relative path from the current working directory. That path is then resolved by CommonJS module loader. If no corresponding file is found, an error is thrown.\n\nIf a file is found, its path will be passed to the ECMAScript module loader under any of the following conditions:\n\nThe program was started with a command-line flag that forces the entry point to be loaded with ECMAScript module loader.\nThe file has an .mjs extension.\nThe file does not have a .cjs extension, and the nearest parent package.json file contains a top-level \"type\" field with a value of \"module\".\nOtherwise, the file is loaded using the CommonJS module loader. See Modules loaders for more details.\n\nECMAScript modules loader entry point caveat#\nWhen loading ECMAScript module loader loads the program entry point, the node command will only accept as input only files with .js, .mjs, or .cjs extensions; and with .wasm extensions when --experimental-wasm-modules is enabled.\n\nOptions#\nHistory\nAll options, including V8 options, allow words to be separated by both dashes (-) or underscores (_). For example, --pending-deprecation is equivalent to --pending_deprecation.\n\nIf an option that takes a single value (such as --max-http-header-size) is passed more than once, then the last passed value is used. Options from the command line take precedence over options passed through the NODE_OPTIONS environment variable.\n\n-#\nAdded in: v8.0.0\nAlias for stdin. Analogous to the use of - in other command-line utilities, meaning that the script is read from stdin, and the rest of the options are passed to that script.\n\n--#\nAdded in: v6.11.0\nIndicate the end of node options. Pass the rest of the arguments to the script. If no script filename or eval/print script is supplied prior to this, then the next argument is used as a script filename.\n\n--abort-on-uncaught-exception#\nAdded in: v0.10.8\nAborting instead of exiting causes a core file to be generated for post-mortem analysis using a debugger (such as lldb, gdb, and mdb).\n\nIf this flag is passed, the behavior can still be set to not abort through process.setUncaughtExceptionCaptureCallback() (and through usage of the node:domain module that uses it).\n\n--build-snapshot#\nAdded in: v18.8.0\nStability: 1 - Experimental\nGenerates a snapshot blob when the process exits and writes it to disk, which can be loaded later with --snapshot-blob.\n\nWhen building the snapshot, if --snapshot-blob is not specified, the generated blob will be written, by default, to snapshot.blob in the current working directory. Otherwise it will be written to the path specified by --snapshot-blob.\n\n$ echo \"globalThis.foo = 'I am from the snapshot'\" > snapshot.js\n\n# Run snapshot.js to intialize the application and snapshot the\n# state of it into snapshot.blob.\n$ node --snapshot-blob snapshot.blob --build-snapshot snapshot.js\n\n$ echo \"console.log(globalThis.foo)\" > index.js\n\n# Load the generated snapshot and start the application from index.js.\n$ node --snapshot-blob snapshot.blob index.js\nI am from the snapshot\nThe v8.startupSnapshot API can be used to specify an entry point at snapshot building time, thus avoiding the need of an additional entry script at deserialization time:\n\n$ echo \"require('v8').startupSnapshot.setDeserializeMainFunction(() => console.log('I am from the snapshot'))\" > snapshot.js\n$ node", "doc_id": "1081ce51-d2a9-4f7b-add9-d19fcb45fee8", "embedding": null, "doc_hash": "44e9b802c389c996f367731f7637bddca49e4fb7a14023947e2263090bc317d7", "extra_info": null, "node_info": {"start": 671228, "end": 674900}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e88c6bc0-505e-4aa2-8a58-5c2c6a68a9a8", "3": "a4a22028-6cce-4e2e-83f8-334fe8aa12f1"}}, "__type__": "1"}, "a4a22028-6cce-4e2e-83f8-334fe8aa12f1": {"__data__": {"text": "Run snapshot.js to intialize the application and snapshot the\n# state of it into snapshot.blob.\n$ node --snapshot-blob snapshot.blob --build-snapshot snapshot.js\n\n$ echo \"console.log(globalThis.foo)\" > index.js\n\n# Load the generated snapshot and start the application from index.js.\n$ node --snapshot-blob snapshot.blob index.js\nI am from the snapshot\nThe v8.startupSnapshot API can be used to specify an entry point at snapshot building time, thus avoiding the need of an additional entry script at deserialization time:\n\n$ echo \"require('v8').startupSnapshot.setDeserializeMainFunction(() => console.log('I am from the snapshot'))\" > snapshot.js\n$ node --snapshot-blob snapshot.blob --build-snapshot snapshot.js\n$ node --snapshot-blob snapshot.blob\nI am from the snapshot\nFor more information, check out the v8.startupSnapshot API documentation.\n\nCurrently the support for run-time snapshot is experimental in that:\n\nUser-land modules are not yet supported in the snapshot, so only one single file can be snapshotted. Users can bundle their applications into a single script with their bundler of choice before building a snapshot, however.\nOnly a subset of the built-in modules work in the snapshot, though the Node.js core test suite checks that a few fairly complex applications can be snapshotted. Support for more modules are being added. If any crashes or buggy behaviors occur when building a snapshot, please file a report in the Node.js issue tracker and link to it in the tracking issue for user-land snapshots.\n--completion-bash#\nAdded in: v10.12.0\nPrint source-able bash completion script for Node.js.\n\n$ node --completion-bash > node_bash_completion\n$ source node_bash_completion\n-C condition, --conditions=condition#\nAdded in: v14.9.0, v12.19.0\nStability: 1 - Experimental\nEnable experimental support for custom conditional exports resolution conditions.\n\nAny number of custom string condition names are permitted.\n\nThe default Node.js conditions of \"node\", \"default\", \"import\", and \"require\" will always apply as defined.\n\nFor example, to run a module with \"development\" resolutions:\n\n$ node -C development app.js\n--cpu-prof#\nAdded in: v12.0.0\nStability: 1 - Experimental\nStarts the V8 CPU profiler on start up, and writes the CPU profile to disk before exit.\n\nIf --cpu-prof-dir is not specified, the generated profile is placed in the current working directory.\n\nIf --cpu-prof-name is not specified, the generated profile is named CPU.${yyyymmdd}.${hhmmss}.${pid}.${tid}.${seq}.cpuprofile.\n\n$ node --cpu-prof index.js\n$ ls *.cpuprofile\nCPU.20190409.202950.15293.0.0.cpuprofile\n--cpu-prof-dir#\nAdded in: v12.0.0\nStability: 1 - Experimental\nSpecify the directory where the CPU profiles generated by --cpu-prof will be placed.\n\nThe default value is controlled by the --diagnostic-dir command-line option.\n\n--cpu-prof-interval#\nAdded in: v12.2.0\nStability: 1 - Experimental\nSpecify the sampling interval in microseconds for the CPU profiles generated by --cpu-prof. The default is 1000 microseconds.\n\n--cpu-prof-name#\nAdded in: v12.0.0\nStability: 1 - Experimental\nSpecify the file name of the CPU profile generated by --cpu-prof.\n\n--diagnostic-dir=directory#\nSet the directory to which all diagnostic output files are written. Defaults to current working directory.\n\nAffects the default output directory of:\n\n--cpu-prof-dir\n--heap-prof-dir\n--redirect-warnings\n--disable-proto=mode#\nAdded in: v13.12.0, v12.17.0\nDisable the", "doc_id": "a4a22028-6cce-4e2e-83f8-334fe8aa12f1", "embedding": null, "doc_hash": "507cf4b04ade5746f8a28123aaa6b84d0e3c092c89a60d423f0602ba1788b6a5", "extra_info": null, "node_info": {"start": 674967, "end": 678403}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1081ce51-d2a9-4f7b-add9-d19fcb45fee8", "3": "23521401-4668-4020-a333-127e28ce9a38"}}, "__type__": "1"}, "23521401-4668-4020-a333-127e28ce9a38": {"__data__": {"text": "option.\n\n--cpu-prof-interval#\nAdded in: v12.2.0\nStability: 1 - Experimental\nSpecify the sampling interval in microseconds for the CPU profiles generated by --cpu-prof. The default is 1000 microseconds.\n\n--cpu-prof-name#\nAdded in: v12.0.0\nStability: 1 - Experimental\nSpecify the file name of the CPU profile generated by --cpu-prof.\n\n--diagnostic-dir=directory#\nSet the directory to which all diagnostic output files are written. Defaults to current working directory.\n\nAffects the default output directory of:\n\n--cpu-prof-dir\n--heap-prof-dir\n--redirect-warnings\n--disable-proto=mode#\nAdded in: v13.12.0, v12.17.0\nDisable the Object.prototype.__proto__ property. If mode is delete, the property is removed entirely. If mode is throw, accesses to the property throw an exception with the code ERR_PROTO_ACCESS.\n\n--disallow-code-generation-from-strings#\nAdded in: v9.8.0\nMake built-in language features like eval and new Function that generate code from strings throw an exception instead. This does not affect the Node.js node:vm module.\n\n--dns-result-order=order#\nHistory\nSet the default value of verbatim in dns.lookup() and dnsPromises.lookup(). The value could be:\n\nipv4first: sets default verbatim false.\nverbatim: sets default verbatim true.\nThe default is verbatim and dns.setDefaultResultOrder() have higher priority than --dns-result-order.\n\n--enable-fips#\nAdded in: v6.0.0\nEnable FIPS-compliant crypto at startup. (Requires Node.js to be built against FIPS-compatible OpenSSL.)\n\n--enable-source-maps#\nHistory\nEnable Source Map v3 support for stack traces.\n\nWhen using a transpiler, such as TypeScript, stack traces thrown by an application reference the transpiled code, not the original source position. --enable-source-maps enables caching of Source Maps and makes a best effort to report stack traces relative to the original source file.\n\nOverriding Error.prepareStackTrace prevents --enable-source-maps from modifying the stack trace.\n\nNote, enabling source maps can introduce latency to your application when Error.stack is accessed. If you access Error.stack frequently in your application, take into account the performance implications of --enable-source-maps.\n\n--experimental-global-customevent#\nAdded in: v18.7.0\nExpose the CustomEvent Web API on the global scope.\n\n--experimental-global-webcrypto#\nAdded in: v17.6.0\nExpose the Web Crypto API on the global scope.\n\n--experimental-import-meta-resolve#\nAdded in: v13.9.0, v12.16.2\nEnable experimental import.meta.resolve() support.\n\n--experimental-loader=module#\nHistory\nSpecify the module of a custom experimental ECMAScript module loader. module may be any string accepted as an import specifier.\n\n--experimental-network-imports#\nAdded in: v17.6.0\nStability: 1 - Experimental\nEnable experimental support for the https: protocol in import specifiers.\n\n--experimental-policy#\nAdded in: v11.8.0\nUse the specified file as a security policy.\n\n--no-experimental-fetch#\nAdded in: v18.0.0\nDisable experimental support for the Fetch API.\n\n--no-experimental-repl-await#\nAdded in: v16.6.0\nUse this flag to disable top-level await in REPL.\n\n--experimental-shadow-realm#\nAdded in: v18.13.0\nUse this flag to enable ShadowRealm support.\n\n--experimental-specifier-resolution=mode#\nAdded in: v13.4.0, v12.16.0\nSets the resolution algorithm for resolving ES module specifiers. Valid options are explicit and node.\n\nThe default is explicit, which requires providing the full path to a module.", "doc_id": "23521401-4668-4020-a333-127e28ce9a38", "embedding": null, "doc_hash": "8a6440b4143c4ec9103335e878caf5f446636839796919df210853faa0e74c89", "extra_info": null, "node_info": {"start": 678418, "end": 681860}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a4a22028-6cce-4e2e-83f8-334fe8aa12f1", "3": "c27b36ca-2355-4fef-80d3-5f26540aa3ee"}}, "__type__": "1"}, "c27b36ca-2355-4fef-80d3-5f26540aa3ee": {"__data__": {"text": "in: v11.8.0\nUse the specified file as a security policy.\n\n--no-experimental-fetch#\nAdded in: v18.0.0\nDisable experimental support for the Fetch API.\n\n--no-experimental-repl-await#\nAdded in: v16.6.0\nUse this flag to disable top-level await in REPL.\n\n--experimental-shadow-realm#\nAdded in: v18.13.0\nUse this flag to enable ShadowRealm support.\n\n--experimental-specifier-resolution=mode#\nAdded in: v13.4.0, v12.16.0\nSets the resolution algorithm for resolving ES module specifiers. Valid options are explicit and node.\n\nThe default is explicit, which requires providing the full path to a module. The node mode enables support for optional file extensions and the ability to import a directory that has an index file.\n\nSee customizing ESM specifier resolution for example usage.\n\n--experimental-test-coverage#\nAdded in: v18.15.0\nWhen used in conjunction with the node:test module, a code coverage report is generated as part of the test runner output. If no tests are run, a coverage report is not generated. See the documentation on collecting code coverage from tests for more details.\n\n--experimental-vm-modules#\nAdded in: v9.6.0\nEnable experimental ES Module support in the node:vm module.\n\n--experimental-wasi-unstable-preview1#\nHistory\nEnable experimental WebAssembly System Interface (WASI) support.\n\n--experimental-wasm-modules#\nAdded in: v12.3.0\nEnable experimental WebAssembly module support.\n\n--force-context-aware#\nAdded in: v12.12.0\nDisable loading native addons that are not context-aware.\n\n--force-fips#\nAdded in: v6.0.0\nForce FIPS-compliant crypto on startup. (Cannot be disabled from script code.) (Same requirements as --enable-fips.)\n\n--frozen-intrinsics#\nAdded in: v11.12.0\nStability: 1 - Experimental\nEnable experimental frozen intrinsics like Array and Object.\n\nOnly the root context is supported. There is no guarantee that globalThis.Array is indeed the default intrinsic reference. Code may break under this flag.\n\nTo allow polyfills to be added, --require runs before freezing intrinsics.\n\n--force-node-api-uncaught-exceptions-policy#\nAdded in: v18.3.0\nEnforces uncaughtException event on Node-API asynchronous callbacks.\n\nTo prevent from an existing add-on from crashing the process, this flag is not enabled by default. In the future, this flag will be enabled by default to enforce the correct behavior.\n\n--heapsnapshot-near-heap-limit=max_count#\nAdded in: v15.1.0, v14.18.0\nStability: 1 - Experimental\nWrites a V8 heap snapshot to disk when the V8 heap usage is approaching the heap limit. count should be a non-negative integer (in which case Node.js will write no more than max_count snapshots to disk).\n\nWhen generating snapshots, garbage collection may be triggered and bring the heap usage down. Therefore multiple snapshots may be written to disk before the Node.js instance finally runs out of memory. These heap snapshots can be compared to determine what objects are being allocated during the time consecutive snapshots are taken. It's not guaranteed that Node.js will write exactly max_count snapshots to disk, but it will try its best to generate at least one and up to max_count snapshots before the Node.js instance runs out of memory when max_count is greater than 0.\n\nGenerating V8 snapshots takes time and memory (both memory managed by the V8 heap and native memory outside the V8 heap). The bigger the heap is, the more resources it needs. Node.js will adjust the V8 heap to accommodate the additional V8 heap memory overhead, and try its best to avoid using up all the memory available to the process. When the process uses more memory than the system deems appropriate, the process may", "doc_id": "c27b36ca-2355-4fef-80d3-5f26540aa3ee", "embedding": null, "doc_hash": "15b37e37c578da92e991f31cbec7137943657060a00e53b562438c8a1b7375bd", "extra_info": null, "node_info": {"start": 681894, "end": 685527}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "23521401-4668-4020-a333-127e28ce9a38", "3": "26caba95-903d-49d1-9a36-468af8648ee9"}}, "__type__": "1"}, "26caba95-903d-49d1-9a36-468af8648ee9": {"__data__": {"text": "These heap snapshots can be compared to determine what objects are being allocated during the time consecutive snapshots are taken. It's not guaranteed that Node.js will write exactly max_count snapshots to disk, but it will try its best to generate at least one and up to max_count snapshots before the Node.js instance runs out of memory when max_count is greater than 0.\n\nGenerating V8 snapshots takes time and memory (both memory managed by the V8 heap and native memory outside the V8 heap). The bigger the heap is, the more resources it needs. Node.js will adjust the V8 heap to accommodate the additional V8 heap memory overhead, and try its best to avoid using up all the memory available to the process. When the process uses more memory than the system deems appropriate, the process may be terminated abruptly by the system, depending on the system configuration.\n\n$ node --max-old-space-size=100 --heapsnapshot-near-heap-limit=3 index.js\nWrote snapshot to Heap.20200430.100036.49580.0.001.heapsnapshot\nWrote snapshot to Heap.20200430.100037.49580.0.002.heapsnapshot\nWrote snapshot to Heap.20200430.100038.49580.0.003.heapsnapshot\n\n<--- Last few GCs --->\n\n[49580:0x110000000]     4826 ms: Mark-sweep 130.6 (147.8) -> 130.5 (147.8) MB, 27.4 / 0.0 ms  (average mu = 0.126, current mu = 0.034) allocation failure scavenge might not succeed\n[49580:0x110000000]     4845 ms: Mark-sweep 130.6 (147.8) -> 130.6 (147.8) MB, 18.8 / 0.0 ms  (average mu = 0.088, current mu = 0.031) allocation failure scavenge might not succeed\n\n\n<--- JS stacktrace --->\n\nFATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory\n....\n--heapsnapshot-signal=signal#\nAdded in: v12.0.0\nEnables a signal handler that causes the Node.js process to write a heap dump when the specified signal is received. signal must be a valid signal name. Disabled by default.\n\n$ node --heapsnapshot-signal=SIGUSR2 index.js &\n$ ps aux\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nnode         1  5.5  6.1 787252 247004 ?       Ssl  16:43   0:02 node --heapsnapshot-signal=SIGUSR2 index.js\n$ kill -USR2 1\n$ ls\nHeap.20190718.133405.15554.0.001.heapsnapshot\n--heap-prof#\nAdded in: v12.4.0\nStability: 1 - Experimental\nStarts the V8 heap profiler on start up, and writes the heap profile to disk before exit.\n\nIf --heap-prof-dir is not specified, the generated profile is placed in the current working directory.\n\nIf --heap-prof-name is not specified, the generated profile is named Heap.${yyyymmdd}.${hhmmss}.${pid}.${tid}.${seq}.heapprofile.\n\n$ node --heap-prof index.js\n$ ls *.heapprofile\nHeap.20190409.202950.15293.0.001.heapprofile\n--heap-prof-dir#\nAdded in: v12.4.0\nStability: 1 - Experimental\nSpecify the directory where the heap profiles generated by --heap-prof will be placed.\n\nThe default value is controlled by the --diagnostic-dir command-line option.\n\n--heap-prof-interval#\nAdded in:", "doc_id": "26caba95-903d-49d1-9a36-468af8648ee9", "embedding": null, "doc_hash": "5023500610ae81b2d812638c1d43399ddf96caa4c304f988d3b848f116a612e4", "extra_info": null, "node_info": {"start": 685395, "end": 688326}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c27b36ca-2355-4fef-80d3-5f26540aa3ee", "3": "a021d97f-fda3-4029-b77d-433bcc0f690f"}}, "__type__": "1"}, "a021d97f-fda3-4029-b77d-433bcc0f690f": {"__data__": {"text": "disk before exit.\n\nIf --heap-prof-dir is not specified, the generated profile is placed in the current working directory.\n\nIf --heap-prof-name is not specified, the generated profile is named Heap.${yyyymmdd}.${hhmmss}.${pid}.${tid}.${seq}.heapprofile.\n\n$ node --heap-prof index.js\n$ ls *.heapprofile\nHeap.20190409.202950.15293.0.001.heapprofile\n--heap-prof-dir#\nAdded in: v12.4.0\nStability: 1 - Experimental\nSpecify the directory where the heap profiles generated by --heap-prof will be placed.\n\nThe default value is controlled by the --diagnostic-dir command-line option.\n\n--heap-prof-interval#\nAdded in: v12.4.0\nStability: 1 - Experimental\nSpecify the average sampling interval in bytes for the heap profiles generated by --heap-prof. The default is 512 * 1024 bytes.\n\n--heap-prof-name#\nAdded in: v12.4.0\nStability: 1 - Experimental\nSpecify the file name of the heap profile generated by --heap-prof.\n\n--icu-data-dir=file#\nAdded in: v0.11.15\nSpecify ICU data load path. (Overrides NODE_ICU_DATA.)\n\n--input-type=type#\nAdded in: v12.0.0\nThis configures Node.js to interpret string input as CommonJS or as an ES module. String input is input via --eval, --print, or STDIN.\n\nValid values are \"commonjs\" and \"module\". The default is \"commonjs\".\n\nThe REPL does not support this option.\n\n--inspect-brk[=[host:]port]#\nAdded in: v7.6.0\nActivate inspector on host:port and break at start of user script. Default host:port is 127.0.0.1:9229.\n\n--inspect-port=[host:]port#\nAdded in: v7.6.0\nSet the host:port to be used when the inspector is activated. Useful when activating the inspector by sending the SIGUSR1 signal.\n\nDefault host is 127.0.0.1.\n\nSee the security warning below regarding the host parameter usage.\n\n--inspect[=[host:]port]#\nAdded in: v6.3.0\nActivate inspector on host:port. Default is 127.0.0.1:9229.\n\nV8 inspector integration allows tools such as Chrome DevTools and IDEs to debug and profile Node.js instances. The tools attach to Node.js instances via a tcp port and communicate using the Chrome DevTools Protocol.\n\n\nWarning: binding inspector to a public IP:port combination is insecure#\nBinding the inspector to a public IP (including 0.0.0.0) with an open port is insecure, as it allows external hosts to connect to the inspector and perform a remote code execution attack.\n\nIf specifying a host, make sure that either:\n\nThe host is not accessible from public networks.\nA firewall disallows unwanted connections on the port.\nMore specifically, --inspect=0.0.0.0 is insecure if the port (9229 by default) is not firewall-protected.\n\nSee the debugging security implications section for more information.\n\n--inspect-publish-uid=stderr,http#\nSpecify ways of the inspector web socket url exposure.\n\nBy default inspector websocket url is available in stderr and under /json/list endpoint on http://host:port/json/list.\n\n--insecure-http-parser#\nAdded in: v13.4.0, v12.15.0, v10.19.0\nUse an insecure HTTP parser that accepts invalid HTTP headers. This may allow interoperability with non-conformant HTTP implementations. It may also allow request smuggling and other HTTP attacks that rely on invalid headers being accepted. Avoid using this option.\n\n--jitless#\nAdded in: v12.0.0\nDisable runtime allocation of executable memory. This may be required on", "doc_id": "a021d97f-fda3-4029-b77d-433bcc0f690f", "embedding": null, "doc_hash": "85b67f935641528c42a56fae7be4aa2bd0521431f0505981614a7e102322d3a0", "extra_info": null, "node_info": {"start": 688442, "end": 691700}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "26caba95-903d-49d1-9a36-468af8648ee9", "3": "200e62cd-fe1d-4924-a49c-d6b99c259476"}}, "__type__": "1"}, "200e62cd-fe1d-4924-a49c-d6b99c259476": {"__data__": {"text": "security implications section for more information.\n\n--inspect-publish-uid=stderr,http#\nSpecify ways of the inspector web socket url exposure.\n\nBy default inspector websocket url is available in stderr and under /json/list endpoint on http://host:port/json/list.\n\n--insecure-http-parser#\nAdded in: v13.4.0, v12.15.0, v10.19.0\nUse an insecure HTTP parser that accepts invalid HTTP headers. This may allow interoperability with non-conformant HTTP implementations. It may also allow request smuggling and other HTTP attacks that rely on invalid headers being accepted. Avoid using this option.\n\n--jitless#\nAdded in: v12.0.0\nDisable runtime allocation of executable memory. This may be required on some platforms for security reasons. It can also reduce attack surface on other platforms, but the performance impact may be severe.\n\nThis flag is inherited from V8 and is subject to change upstream. It may disappear in a non-semver-major release.\n\n--max-http-header-size=size#\nHistory\nSpecify the maximum size, in bytes, of HTTP headers. Defaults to 16 KiB.\n\n--napi-modules#\nAdded in: v7.10.0\nThis option is a no-op. It is kept for compatibility.\n\n--no-addons#\nAdded in: v16.10.0, v14.19.0\nDisable the node-addons exports condition as well as disable loading native addons. When --no-addons is specified, calling process.dlopen or requiring a native C++ addon will fail and throw an exception.\n\n--no-deprecation#\nAdded in: v0.8.0\nSilence deprecation warnings.\n\n--no-extra-info-on-fatal-exception#\nAdded in: v17.0.0\nHide extra information on fatal exception that causes exit.\n\n--no-force-async-hooks-checks#\nAdded in: v9.0.0\nDisables runtime checks for async_hooks. These will still be enabled dynamically when async_hooks is enabled.\n\n--no-global-search-paths#\nAdded in: v16.10.0\nDo not search modules from global paths like $HOME/.node_modules and $NODE_PATH.\n\n--no-warnings#\nAdded in: v6.0.0\nSilence all process warnings (including deprecations).\n\n--node-memory-debug#\nAdded in: v15.0.0, v14.18.0\nEnable extra debug checks for memory leaks in Node.js internals. This is usually only useful for developers debugging Node.js itself.\n\n--openssl-config=file#\nAdded in: v6.9.0\nLoad an OpenSSL configuration file on startup. Among other uses, this can be used to enable FIPS-compliant crypto if Node.js is built against FIPS-enabled OpenSSL.\n\n--openssl-shared-config#\nAdded in: v18.5.0\nEnable OpenSSL default configuration section, openssl_conf to be read from the OpenSSL configuration file. The default configuration file is named openssl.cnf but this can be changed using the environment variable OPENSSL_CONF, or by using the command line option --openssl-config. The location of the default OpenSSL configuration file depends on how OpenSSL is being linked to Node.js. Sharing the OpenSSL configuration may have unwanted implications and it is recommended to use a configuration section specific to Node.js which is nodejs_conf and is default when this option is not used.\n\n--openssl-legacy-provider#\nAdded in: v17.0.0\nEnable OpenSSL 3.0 legacy provider. For more information please see OSSL_PROVIDER-legacy.\n\n--pending-deprecation#\nAdded in: v8.0.0\nEmit pending deprecation warnings.\n\nPending deprecations are generally identical to a runtime deprecation with the notable exception that they are turned off by default and will not be emitted unless either the --pending-deprecation command-line flag, or the NODE_PENDING_DEPRECATION=1", "doc_id": "200e62cd-fe1d-4924-a49c-d6b99c259476", "embedding": null, "doc_hash": "41845863c83c54feef59a3d8110ff6eb825fde7ceae333d8e7809233f87eb5ea", "extra_info": null, "node_info": {"start": 691636, "end": 695068}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a021d97f-fda3-4029-b77d-433bcc0f690f", "3": "b2786f23-cb63-4104-8f1c-0192f5fb6f80"}}, "__type__": "1"}, "b2786f23-cb63-4104-8f1c-0192f5fb6f80": {"__data__": {"text": "is being linked to Node.js. Sharing the OpenSSL configuration may have unwanted implications and it is recommended to use a configuration section specific to Node.js which is nodejs_conf and is default when this option is not used.\n\n--openssl-legacy-provider#\nAdded in: v17.0.0\nEnable OpenSSL 3.0 legacy provider. For more information please see OSSL_PROVIDER-legacy.\n\n--pending-deprecation#\nAdded in: v8.0.0\nEmit pending deprecation warnings.\n\nPending deprecations are generally identical to a runtime deprecation with the notable exception that they are turned off by default and will not be emitted unless either the --pending-deprecation command-line flag, or the NODE_PENDING_DEPRECATION=1 environment variable, is set. Pending deprecations are used to provide a kind of selective \"early warning\" mechanism that developers may leverage to detect deprecated API usage.\n\n--policy-integrity=sri#\nAdded in: v12.7.0\nStability: 1 - Experimental\nInstructs Node.js to error prior to running any code if the policy does not have the specified integrity. It expects a Subresource Integrity string as a parameter.\n\n--preserve-symlinks#\nAdded in: v6.3.0\nInstructs the module loader to preserve symbolic links when resolving and caching modules.\n\nBy default, when Node.js loads a module from a path that is symbolically linked to a different on-disk location, Node.js will dereference the link and use the actual on-disk \"real path\" of the module as both an identifier and as a root path to locate other dependency modules. In most cases, this default behavior is acceptable. However, when using symbolically linked peer dependencies, as illustrated in the example below, the default behavior causes an exception to be thrown if moduleA attempts to require moduleB as a peer dependency:\n\n{appDir}\n \u251c\u2500\u2500 app\n \u2502   \u251c\u2500\u2500 index.js\n \u2502   \u2514\u2500\u2500 node_modules\n \u2502       \u251c\u2500\u2500 moduleA -> {appDir}/moduleA\n \u2502       \u2514\u2500\u2500 moduleB\n \u2502           \u251c\u2500\u2500 index.js\n \u2502           \u2514\u2500\u2500 package.json\n \u2514\u2500\u2500 moduleA\n     \u251c\u2500\u2500 index.js\n     \u2514\u2500\u2500 package.json\nThe --preserve-symlinks command-line flag instructs Node.js to use the symlink path for modules as opposed to the real path, allowing symbolically linked peer dependencies to be found.\n\nNote, however, that using --preserve-symlinks can have other side effects. Specifically, symbolically linked native modules can fail to load if those are linked from more than one location in the dependency tree (Node.js would see those as two separate modules and would attempt to load the module multiple times, causing an exception to be thrown).\n\nThe --preserve-symlinks flag does not apply to the main module, which allows node --preserve-symlinks node_module/.bin/<foo> to work. To apply the same behavior for the main module, also use --preserve-symlinks-main.\n\n--preserve-symlinks-main#\nAdded in: v10.2.0\nInstructs the module loader to preserve symbolic links when resolving and caching the main module (require.main).\n\nThis flag exists so that the main module can be opted-in to the same behavior that --preserve-symlinks gives to all other imports; they are separate flags, however, for backward compatibility with older Node.js versions.\n\n--preserve-symlinks-main does not imply --preserve-symlinks; use --preserve-symlinks-main in addition to --preserve-symlinks when it is not desirable to follow symlinks before resolving relative paths.\n\nSee --preserve-symlinks for more information.\n\n--prof#\nAdded in: v2.0.0\nGenerate V8 profiler output.\n\n--prof-process#\nAdded in: v5.2.0\nProcess V8 profiler output generated", "doc_id": "b2786f23-cb63-4104-8f1c-0192f5fb6f80", "embedding": null, "doc_hash": "83d5ffab1422ad1256df5a2e8c85da039eec73fd2e9037f63eb3a6189abc7b2b", "extra_info": null, "node_info": {"start": 695074, "end": 698593}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "200e62cd-fe1d-4924-a49c-d6b99c259476", "3": "98f884d5-9291-4c02-ba14-fbba8f6a30d9"}}, "__type__": "1"}, "98f884d5-9291-4c02-ba14-fbba8f6a30d9": {"__data__": {"text": "the module loader to preserve symbolic links when resolving and caching the main module (require.main).\n\nThis flag exists so that the main module can be opted-in to the same behavior that --preserve-symlinks gives to all other imports; they are separate flags, however, for backward compatibility with older Node.js versions.\n\n--preserve-symlinks-main does not imply --preserve-symlinks; use --preserve-symlinks-main in addition to --preserve-symlinks when it is not desirable to follow symlinks before resolving relative paths.\n\nSee --preserve-symlinks for more information.\n\n--prof#\nAdded in: v2.0.0\nGenerate V8 profiler output.\n\n--prof-process#\nAdded in: v5.2.0\nProcess V8 profiler output generated using the V8 option --prof.\n\n--redirect-warnings=file#\nAdded in: v8.0.0\nWrite process warnings to the given file instead of printing to stderr. The file will be created if it does not exist, and will be appended to if it does. If an error occurs while attempting to write the warning to the file, the warning will be written to stderr instead.\n\nThe file name may be an absolute path. If it is not, the default directory it will be written to is controlled by the --diagnostic-dir command-line option.\n\n--report-compact#\nAdded in: v13.12.0, v12.17.0\nWrite reports in a compact format, single-line JSON, more easily consumable by log processing systems than the default multi-line format designed for human consumption.\n\n--report-dir=directory, report-directory=directory#\nHistory\nLocation at which the report will be generated.\n\n--report-filename=filename#\nHistory\nName of the file to which the report will be written.\n\nIf the filename is set to 'stdout' or 'stderr', the report is written to the stdout or stderr of the process respectively.\n\n--report-on-fatalerror#\nHistory\nEnables the report to be triggered on fatal errors (internal errors within the Node.js runtime such as out of memory) that lead to termination of the application. Useful to inspect various diagnostic data elements such as heap, stack, event loop state, resource consumption etc. to reason about the fatal error.\n\n--report-on-signal#\nHistory\nEnables report to be generated upon receiving the specified (or predefined) signal to the running Node.js process. The signal to trigger the report is specified through --report-signal.\n\n--report-signal=signal#\nHistory\nSets or resets the signal for report generation (not supported on Windows). Default signal is SIGUSR2.\n\n--report-uncaught-exception#\nHistory\nEnables report to be generated when the process exits due to an uncaught exception. Useful when inspecting the JavaScript stack in conjunction with native stack and other runtime environment data.\n\n--secure-heap=n#\nAdded in: v15.6.0\nInitializes an OpenSSL secure heap of n bytes. When initialized, the secure heap is used for selected types of allocations within OpenSSL during key generation and other operations. This is useful, for instance, to prevent sensitive information from leaking due to pointer overruns or underruns.\n\nThe secure heap is a fixed size and cannot be resized at runtime so, if used, it is important to select a large enough heap to cover all application uses.\n\nThe heap size given must be a power of two. Any value less than 2 will disable the secure heap.\n\nThe secure heap is disabled by default.\n\nThe secure heap is not available on Windows.\n\nSee CRYPTO_secure_malloc_init for more details.\n\n--secure-heap-min=n#\nAdded in: v15.6.0\nWhen using --secure-heap, the --secure-heap-min flag specifies the minimum allocation from the secure heap. The minimum value is 2. The maximum value is the lesser of --secure-heap or 2147483647. The value given must be a power of two.\n\n--snapshot-blob=path#\nAdded in: v18.8.0\nStability: 1", "doc_id": "98f884d5-9291-4c02-ba14-fbba8f6a30d9", "embedding": null, "doc_hash": "5bcdcc1cd50cd5c516301373033d28c7bd1741ab5858cc4d09d4742addfe72f8", "extra_info": null, "node_info": {"start": 698585, "end": 702310}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b2786f23-cb63-4104-8f1c-0192f5fb6f80", "3": "11fcfefb-edc5-4a08-96dd-e8c5fe0b6b98"}}, "__type__": "1"}, "11fcfefb-edc5-4a08-96dd-e8c5fe0b6b98": {"__data__": {"text": "if used, it is important to select a large enough heap to cover all application uses.\n\nThe heap size given must be a power of two. Any value less than 2 will disable the secure heap.\n\nThe secure heap is disabled by default.\n\nThe secure heap is not available on Windows.\n\nSee CRYPTO_secure_malloc_init for more details.\n\n--secure-heap-min=n#\nAdded in: v15.6.0\nWhen using --secure-heap, the --secure-heap-min flag specifies the minimum allocation from the secure heap. The minimum value is 2. The maximum value is the lesser of --secure-heap or 2147483647. The value given must be a power of two.\n\n--snapshot-blob=path#\nAdded in: v18.8.0\nStability: 1 - Experimental\nWhen used with --build-snapshot, --snapshot-blob specifies the path where the generated snapshot blob is written to. If not specified, the generated blob is written to snapshot.blob in the current working directory.\n\nWhen used without --build-snapshot, --snapshot-blob specifies the path to the blob that is used to restore the application state.\n\nWhen loading a snapshot, Node.js checks that:\n\nThe version, architecture and platform of the running Node.js binary are exactly the same as that of the binary that generates the snapshot.\nThe V8 flags and CPU features are compatible with that of the binary that generates the snapshot.\nIf they don't match, Node.js refuses to load the snapshot and exits with status code 1.\n\n--test#\nHistory\nStarts the Node.js command line test runner. This flag cannot be combined with --watch-path, --check, --eval, --interactive, or the inspector. See the documentation on running tests from the command line for more details.\n\n--test-name-pattern#\nAdded in: v18.11.0\nA regular expression that configures the test runner to only execute tests whose name matches the provided pattern. See the documentation on filtering tests by name for more details.\n\n--test-reporter#\nAdded in: v18.15.0\nA test reporter to use when running tests. See the documentation on test reporters for more details.\n\n--test-reporter-destination#\nAdded in: v18.15.0\nThe destination for the corresponding test reporter. See the documentation on test reporters for more details.\n\n--test-only#\nAdded in: v18.0.0\nConfigures the test runner to only execute top level tests that have the only option set.\n\n--throw-deprecation#\nAdded in: v0.11.14\nThrow errors for deprecations.\n\n--title=title#\nAdded in: v10.7.0\nSet process.title on startup.\n\n--tls-cipher-list=list#\nAdded in: v4.0.0\nSpecify an alternative default TLS cipher list. Requires Node.js to be built with crypto support (default).\n\n--tls-keylog=file#\nAdded in: v13.2.0, v12.16.0\nLog TLS key material to a file. The key material is in NSS SSLKEYLOGFILE format and can be used by software (such as Wireshark) to decrypt the TLS traffic.\n\n--tls-max-v1.2#\nAdded in: v12.0.0, v10.20.0\nSet tls.DEFAULT_MAX_VERSION to 'TLSv1.2'. Use to disable support for TLSv1.3.\n\n--tls-max-v1.3#\nAdded in: v12.0.0\nSet default tls.DEFAULT_MAX_VERSION to 'TLSv1.3'. Use to enable support for TLSv1.3.\n\n--tls-min-v1.0#\nAdded in: v12.0.0, v10.20.0\nSet default tls.DEFAULT_MIN_VERSION to 'TLSv1'. Use for compatibility with old TLS clients or servers.\n\n--tls-min-v1.1#\nAdded in: v12.0.0, v10.20.0\nSet default", "doc_id": "11fcfefb-edc5-4a08-96dd-e8c5fe0b6b98", "embedding": null, "doc_hash": "1967cc7f389eab387ea49a9363e0ef692f5dfad5562f5090dae01b176e370959", "extra_info": null, "node_info": {"start": 702373, "end": 705579}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "98f884d5-9291-4c02-ba14-fbba8f6a30d9", "3": "28c042a5-6c1c-42d6-ab92-89065f87ac2a"}}, "__type__": "1"}, "28c042a5-6c1c-42d6-ab92-89065f87ac2a": {"__data__": {"text": "in: v12.0.0, v10.20.0\nSet tls.DEFAULT_MAX_VERSION to 'TLSv1.2'. Use to disable support for TLSv1.3.\n\n--tls-max-v1.3#\nAdded in: v12.0.0\nSet default tls.DEFAULT_MAX_VERSION to 'TLSv1.3'. Use to enable support for TLSv1.3.\n\n--tls-min-v1.0#\nAdded in: v12.0.0, v10.20.0\nSet default tls.DEFAULT_MIN_VERSION to 'TLSv1'. Use for compatibility with old TLS clients or servers.\n\n--tls-min-v1.1#\nAdded in: v12.0.0, v10.20.0\nSet default tls.DEFAULT_MIN_VERSION to 'TLSv1.1'. Use for compatibility with old TLS clients or servers.\n\n--tls-min-v1.2#\nAdded in: v12.2.0, v10.20.0\nSet default tls.DEFAULT_MIN_VERSION to 'TLSv1.2'. This is the default for 12.x and later, but the option is supported for compatibility with older Node.js versions.\n\n--tls-min-v1.3#\nAdded in: v12.0.0\nSet default tls.DEFAULT_MIN_VERSION to 'TLSv1.3'. Use to disable support for TLSv1.2, which is not as secure as TLSv1.3.\n\n--trace-atomics-wait#\nAdded in: v14.3.0Deprecated since: v18.8.0\nStability: 0 - Deprecated\nPrint short summaries of calls to Atomics.wait() to stderr. The output could look like this:\n\n(node:15701) [Thread 0] Atomics.wait(&lt;address> + 0, 1, inf) started\n(node:15701) [Thread 0] Atomics.wait(&lt;address> + 0, 1, inf) did not wait because the values mismatched\n(node:15701) [Thread 0] Atomics.wait(&lt;address> + 0, 0, 10) started\n(node:15701) [Thread 0] Atomics.wait(&lt;address> + 0, 0, 10) timed out\n(node:15701) [Thread 0] Atomics.wait(&lt;address> + 4, 0, inf) started\n(node:15701) [Thread 1] Atomics.wait(&lt;address> + 4, -1, inf) started\n(node:15701) [Thread 0] Atomics.wait(&lt;address> + 4, 0, inf) was woken up by another thread\n(node:15701) [Thread 1] Atomics.wait(&lt;address> + 4, -1, inf) was woken up by another thread\nThe fields here correspond to:\n\nThe thread id as given by worker_threads.threadId\nThe base address of the SharedArrayBuffer in question, as well as the byte offset corresponding to the index passed to Atomics.wait()\nThe expected value that was passed to Atomics.wait()\nThe timeout passed to Atomics.wait\n--trace-deprecation#\nAdded in: v0.8.0\nPrint stack traces for deprecations.\n\n--trace-event-categories#\nAdded in: v7.7.0\nA comma separated list of categories that should be traced when trace event tracing is enabled using --trace-events-enabled.\n\n--trace-event-file-pattern#\nAdded in: v9.8.0\nTemplate string specifying the filepath for the trace event data, it supports ${rotation} and ${pid}.\n\n--trace-events-enabled#\nAdded in: v7.7.0\nEnables the collection of trace event tracing information.\n\n--trace-exit#\nAdded in: v13.5.0, v12.16.0\nPrints a stack trace whenever an environment is exited proactively, i.e. invoking process.exit().\n\n--trace-sigint#\nAdded in: v13.9.0, v12.17.0\nPrints a stack trace on SIGINT.\n\n--trace-sync-io#\nAdded", "doc_id": "28c042a5-6c1c-42d6-ab92-89065f87ac2a", "embedding": null, "doc_hash": "70d6a85d31fc049beac23ff1ba3f76cd9df5c58e71f65a7ec9307e8a8d0289de", "extra_info": null, "node_info": {"start": 705754, "end": 708513}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "11fcfefb-edc5-4a08-96dd-e8c5fe0b6b98", "3": "d087411f-2980-45fa-bd8a-597f43ba2e76"}}, "__type__": "1"}, "d087411f-2980-45fa-bd8a-597f43ba2e76": {"__data__": {"text": "list of categories that should be traced when trace event tracing is enabled using --trace-events-enabled.\n\n--trace-event-file-pattern#\nAdded in: v9.8.0\nTemplate string specifying the filepath for the trace event data, it supports ${rotation} and ${pid}.\n\n--trace-events-enabled#\nAdded in: v7.7.0\nEnables the collection of trace event tracing information.\n\n--trace-exit#\nAdded in: v13.5.0, v12.16.0\nPrints a stack trace whenever an environment is exited proactively, i.e. invoking process.exit().\n\n--trace-sigint#\nAdded in: v13.9.0, v12.17.0\nPrints a stack trace on SIGINT.\n\n--trace-sync-io#\nAdded in: v2.1.0\nPrints a stack trace whenever synchronous I/O is detected after the first turn of the event loop.\n\n--trace-tls#\nAdded in: v12.2.0\nPrints TLS packet trace information to stderr. This can be used to debug TLS connection problems.\n\n--trace-uncaught#\nAdded in: v13.1.0\nPrint stack traces for uncaught exceptions; usually, the stack trace associated with the creation of an Error is printed, whereas this makes Node.js also print the stack trace associated with throwing the value (which does not need to be an Error instance).\n\nEnabling this option may affect garbage collection behavior negatively.\n\n--trace-warnings#\nAdded in: v6.0.0\nPrint stack traces for process warnings (including deprecations).\n\n--track-heap-objects#\nAdded in: v2.4.0\nTrack heap object allocations for heap snapshots.\n\n--unhandled-rejections=mode#\nHistory\nUsing this flag allows to change what should happen when an unhandled rejection occurs. One of the following modes can be chosen:\n\nthrow: Emit unhandledRejection. If this hook is not set, raise the unhandled rejection as an uncaught exception. This is the default.\nstrict: Raise the unhandled rejection as an uncaught exception. If the exception is handled, unhandledRejection is emitted.\nwarn: Always trigger a warning, no matter if the unhandledRejection hook is set or not but do not print the deprecation warning.\nwarn-with-error-code: Emit unhandledRejection. If this hook is not set, trigger a warning, and set the process exit code to 1.\nnone: Silence all warnings.\nIf a rejection happens during the command line entry point's ES module static loading phase, it will always raise it as an uncaught exception.\n\n--use-bundled-ca, --use-openssl-ca#\nAdded in: v6.11.0\nUse bundled Mozilla CA store as supplied by current Node.js version or use OpenSSL's default CA store. The default store is selectable at build-time.\n\nThe bundled CA store, as supplied by Node.js, is a snapshot of Mozilla CA store that is fixed at release time. It is identical on all supported platforms.\n\nUsing OpenSSL store allows for external modifications of the store. For most Linux and BSD distributions, this store is maintained by the distribution maintainers and system administrators. OpenSSL CA store location is dependent on configuration of the OpenSSL library but this can be altered at runtime using environment variables.\n\nSee SSL_CERT_DIR and SSL_CERT_FILE.\n\n--use-largepages=mode#\nAdded in: v13.6.0, v12.17.0\nRe-map the Node.js static code to large memory pages at startup. If supported on the target system, this will cause the Node.js static code to be moved onto 2 MiB pages instead of 4 KiB pages.\n\nThe following values are valid for mode:\n\noff: No mapping will be attempted. This is the default.\non: If supported by the OS, mapping will be attempted. Failure to map will be ignored and a message will be printed to standard error.\nsilent: If supported by the OS, mapping will be attempted. Failure to map will be ignored and will", "doc_id": "d087411f-2980-45fa-bd8a-597f43ba2e76", "embedding": null, "doc_hash": "2bbe5df39056e2f33a65350b884d7f13f0ff9f31ee58d151d376927272e0056a", "extra_info": null, "node_info": {"start": 708360, "end": 711920}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "28c042a5-6c1c-42d6-ab92-89065f87ac2a", "3": "73958485-16a2-4390-9ad3-4c1d895dc248"}}, "__type__": "1"}, "73958485-16a2-4390-9ad3-4c1d895dc248": {"__data__": {"text": "library but this can be altered at runtime using environment variables.\n\nSee SSL_CERT_DIR and SSL_CERT_FILE.\n\n--use-largepages=mode#\nAdded in: v13.6.0, v12.17.0\nRe-map the Node.js static code to large memory pages at startup. If supported on the target system, this will cause the Node.js static code to be moved onto 2 MiB pages instead of 4 KiB pages.\n\nThe following values are valid for mode:\n\noff: No mapping will be attempted. This is the default.\non: If supported by the OS, mapping will be attempted. Failure to map will be ignored and a message will be printed to standard error.\nsilent: If supported by the OS, mapping will be attempted. Failure to map will be ignored and will not be reported.\n--v8-options#\nAdded in: v0.1.3\nPrint V8 command-line options.\n\n--v8-pool-size=num#\nAdded in: v5.10.0\nSet V8's thread pool size which will be used to allocate background jobs.\n\nIf set to 0 then Node.js will choose an appropriate size of the thread pool based on an estimate of the amount of parallelism.\n\nThe amount of parallelism refers to the number of computations that can be carried out simultaneously in a given machine. In general, it's the same as the amount of CPUs, but it may diverge in environments such as VMs or containers.\n\n--watch#\nHistory\nStability: 1 - Experimental\nStarts Node.js in watch mode. When in watch mode, changes in the watched files cause the Node.js process to restart. By default, watch mode will watch the entry point and any required or imported module. Use --watch-path to specify what paths to watch.\n\nThis flag cannot be combined with --check, --eval, --interactive, or the REPL.\n\n$ node --watch index.js\n--watch-path#\nAdded in: v18.11.0\nStability: 1 - Experimental\nStarts Node.js in watch mode and specifies what paths to watch. When in watch mode, changes in the watched paths cause the Node.js process to restart. This will turn off watching of required or imported modules, even when used in combination with --watch.\n\nThis flag cannot be combined with --check, --eval, --interactive, --test, or the REPL.\n\n$ node --watch-path=./src --watch-path=./tests index.js\nThis option is only supported on macOS and Windows. An ERR_FEATURE_UNAVAILABLE_ON_PLATFORM exception will be thrown when the option is used on a platform that does not support it.\n\n--watch-preserve-output#\nDisable the clearing of the console when watch mode restarts the process.\n\n$ node --watch --watch-preserve-output test.js\n--zero-fill-buffers#\nAdded in: v6.0.0\nAutomatically zero-fills all newly allocated Buffer and SlowBuffer instances.\n\n-c, --check#\nHistory\nSyntax check the script without executing.\n\n-e, --eval \"script\"#\nHistory\nEvaluate the following argument as JavaScript. The modules which are predefined in the REPL can also be used in script.\n\nOn Windows, using cmd.exe a single quote will not work correctly because it only recognizes double \" for quoting. In Powershell or Git bash, both ' and \" are usable.\n\n-h, --help#\nAdded in: v0.1.3\nPrint node command-line options. The output of this option is less detailed than this document.\n\n-i, --interactive#\nAdded in: v0.7.7\nOpens the REPL even if stdin does not appear to be a terminal.\n\n-p, --print \"script\"#\nHistory\nIdentical to -e but prints the result.\n\n-r, --require module#\nAdded in: v1.6.0\nPreload the specified module at startup.\n\nFollows require()'s module resolution rules. module may be either a path to a file, or a node module name.\n\nOnly CommonJS modules are supported. Attempting to preload a ES6 Module", "doc_id": "73958485-16a2-4390-9ad3-4c1d895dc248", "embedding": null, "doc_hash": "611167120f8cb9578a473ae80c67e024d37c5cae4f2669168d655fc2135ef72a", "extra_info": null, "node_info": {"start": 711877, "end": 715367}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d087411f-2980-45fa-bd8a-597f43ba2e76", "3": "81d835b1-8828-4e98-81f5-c3d0deb3a7ee"}}, "__type__": "1"}, "81d835b1-8828-4e98-81f5-c3d0deb3a7ee": {"__data__": {"text": "double \" for quoting. In Powershell or Git bash, both ' and \" are usable.\n\n-h, --help#\nAdded in: v0.1.3\nPrint node command-line options. The output of this option is less detailed than this document.\n\n-i, --interactive#\nAdded in: v0.7.7\nOpens the REPL even if stdin does not appear to be a terminal.\n\n-p, --print \"script\"#\nHistory\nIdentical to -e but prints the result.\n\n-r, --require module#\nAdded in: v1.6.0\nPreload the specified module at startup.\n\nFollows require()'s module resolution rules. module may be either a path to a file, or a node module name.\n\nOnly CommonJS modules are supported. Attempting to preload a ES6 Module using --require will fail with an error.\n\n-v, --version#\nAdded in: v0.1.3\nPrint node's version.\n\nEnvironment variables#\nFORCE_COLOR=[1, 2, 3]#\nThe FORCE_COLOR environment variable is used to enable ANSI colorized output. The value may be:\n\n1, true, or the empty string '' indicate 16-color support,\n2 to indicate 256-color support, or\n3 to indicate 16 million-color support.\nWhen FORCE_COLOR is used and set to a supported value, both the NO_COLOR, and NODE_DISABLE_COLORS environment variables are ignored.\n\nAny other value will result in colorized output being disabled.\n\nNODE_DEBUG=module[,\u2026]#\nAdded in: v0.1.32\n','-separated list of core modules that should print debug information.\n\nNODE_DEBUG_NATIVE=module[,\u2026]#\n','-separated list of core C++ modules that should print debug information.\n\nNODE_DISABLE_COLORS=1#\nAdded in: v0.3.0\nWhen set, colors will not be used in the REPL.\n\nNODE_EXTRA_CA_CERTS=file#\nAdded in: v7.3.0\nWhen set, the well known \"root\" CAs (like VeriSign) will be extended with the extra certificates in file. The file should consist of one or more trusted certificates in PEM format. A message will be emitted (once) with process.emitWarning() if the file is missing or malformed, but any errors are otherwise ignored.\n\nNeither the well known nor extra certificates are used when the ca options property is explicitly specified for a TLS or HTTPS client or server.\n\nThis environment variable is ignored when node runs as setuid root or has Linux file capabilities set.\n\nThe NODE_EXTRA_CA_CERTS environment variable is only read when the Node.js process is first launched. Changing the value at runtime using process.env.NODE_EXTRA_CA_CERTS has no effect on the current process.\n\nNODE_ICU_DATA=file#\nAdded in: v0.11.15\nData path for ICU (Intl object) data. Will extend linked-in data when compiled with small-icu support.\n\nNODE_NO_WARNINGS=1#\nAdded in: v6.11.0\nWhen set to 1, process warnings are silenced.\n\nNODE_OPTIONS=options...#\nAdded in: v8.0.0\nA space-separated list of command-line options. options... are interpreted before command-line options, so command-line options will override or compound after anything in options.... Node.js will exit with an error if an option that is not allowed in the environment is used, such as -p or a script file.\n\nIf an option value contains a space, it can be escaped using double quotes:\n\nNODE_OPTIONS='--require \"./my path/file.js\"'\nA singleton flag passed as a command-line option will override the same flag passed into NODE_OPTIONS:\n\n# The inspector will be available on port 5555\nNODE_OPTIONS='--inspect=localhost:4444' node --inspect=localhost:5555\nA flag that can be passed multiple times will be treated as if its NODE_OPTIONS instances were passed first, and then its command-line instances", "doc_id": "81d835b1-8828-4e98-81f5-c3d0deb3a7ee", "embedding": null, "doc_hash": "fcb022033d4a7a1e76590a2b0aa50d4526b87517666025827a4dc64b3b3426f9", "extra_info": null, "node_info": {"start": 715407, "end": 718805}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "73958485-16a2-4390-9ad3-4c1d895dc248", "3": "406155a1-7cd6-41fa-8c30-3904f998c906"}}, "__type__": "1"}, "406155a1-7cd6-41fa-8c30-3904f998c906": {"__data__": {"text": "before command-line options, so command-line options will override or compound after anything in options.... Node.js will exit with an error if an option that is not allowed in the environment is used, such as -p or a script file.\n\nIf an option value contains a space, it can be escaped using double quotes:\n\nNODE_OPTIONS='--require \"./my path/file.js\"'\nA singleton flag passed as a command-line option will override the same flag passed into NODE_OPTIONS:\n\n# The inspector will be available on port 5555\nNODE_OPTIONS='--inspect=localhost:4444' node --inspect=localhost:5555\nA flag that can be passed multiple times will be treated as if its NODE_OPTIONS instances were passed first, and then its command-line instances afterwards:\n\nNODE_OPTIONS='--require \"./a.js\"' node --require \"./b.js\"\n# is equivalent to:\nnode --require \"./a.js\" --require \"./b.js\"\nNode.js options that are allowed are:\n\n--conditions, -C\n--diagnostic-dir\n--disable-proto\n--dns-result-order\n--enable-fips\n--enable-source-maps\n--experimental-abortcontroller\n--experimental-global-customevent\n--experimental-global-webcrypto\n--experimental-import-meta-resolve\n--experimental-json-modules\n--experimental-loader\n--experimental-modules\n--experimental-network-imports\n--experimental-policy\n--experimental-shadow-realm\n--experimental-specifier-resolution\n--experimental-top-level-await\n--experimental-vm-modules\n--experimental-wasi-unstable-preview1\n--experimental-wasm-modules\n--force-context-aware\n--force-fips\n--force-node-api-uncaught-exceptions-policy\n--frozen-intrinsics\n--heapsnapshot-near-heap-limit\n--heapsnapshot-signal\n--http-parser\n--icu-data-dir\n--input-type\n--insecure-http-parser\n--inspect-brk\n--inspect-port, --debug-port\n--inspect-publish-uid\n--inspect\n--max-http-header-size\n--napi-modules\n--no-addons\n--no-deprecation\n--no-experimental-fetch\n--no-experimental-repl-await\n--no-extra-info-on-fatal-exception\n--no-force-async-hooks-checks\n--no-global-search-paths\n--no-warnings\n--node-memory-debug\n--openssl-config\n--openssl-legacy-provider\n--openssl-shared-config\n--pending-deprecation\n--policy-integrity\n--preserve-symlinks-main\n--preserve-symlinks\n--prof-process\n--redirect-warnings\n--report-compact\n--report-dir, --report-directory\n--report-filename\n--report-on-fatalerror\n--report-on-signal\n--report-signal\n--report-uncaught-exception\n--require,", "doc_id": "406155a1-7cd6-41fa-8c30-3904f998c906", "embedding": null, "doc_hash": "18e77a94a9b3fafe75190ec5efec7efb8370f822464f4d00cf5a89ffa82f5737", "extra_info": null, "node_info": {"start": 718728, "end": 721058}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "81d835b1-8828-4e98-81f5-c3d0deb3a7ee", "3": "38faf526-9356-4187-abec-0344ba4458dd"}}, "__type__": "1"}, "38faf526-9356-4187-abec-0344ba4458dd": {"__data__": {"text": "--report-directory\n--report-filename\n--report-on-fatalerror\n--report-on-signal\n--report-signal\n--report-uncaught-exception\n--require, -r\n--secure-heap-min\n--secure-heap\n--snapshot-blob\n--test-only\n--throw-deprecation\n--title\n--tls-cipher-list\n--tls-keylog\n--tls-max-v1.2\n--tls-max-v1.3\n--tls-min-v1.0\n--tls-min-v1.1\n--tls-min-v1.2\n--tls-min-v1.3\n--trace-atomics-wait\n--trace-deprecation\n--trace-event-categories\n--trace-event-file-pattern\n--trace-events-enabled\n--trace-exit\n--trace-sigint\n--trace-sync-io\n--trace-tls\n--trace-uncaught\n--trace-warnings\n--track-heap-objects\n--unhandled-rejections\n--use-bundled-ca\n--use-largepages\n--use-openssl-ca\n--v8-pool-size\n--watch-path\n--watch-preserve-output\n--watch\n--zero-fill-buffers\nV8 options that are allowed are:\n\n--abort-on-uncaught-exception\n--disallow-code-generation-from-strings\n--enable-etw-stack-walking\n--huge-max-old-generation-size\n--interpreted-frames-native-stack\n--jitless\n--max-old-space-size\n--max-semi-space-size\n--perf-basic-prof-only-functions\n--perf-basic-prof\n--perf-prof-unwinding-info\n--perf-prof\n--stack-trace-limit\n--perf-basic-prof-only-functions, --perf-basic-prof, --perf-prof-unwinding-info, and --perf-prof are only available on Linux.\n\n--enable-etw-stack-walking is only available on Windows.\n\nNODE_PATH=path[:\u2026]#\nAdded in: v0.1.32\n':'-separated list of directories prefixed to the module search path.\n\nOn Windows, this is a ';'-separated list instead.\n\nNODE_PENDING_DEPRECATION=1#\nAdded in: v8.0.0\nWhen set to 1, emit pending deprecation warnings.\n\nPending deprecations are generally identical to a runtime deprecation with the notable exception that they are turned off by default and will not be emitted unless either the --pending-deprecation command-line flag, or the NODE_PENDING_DEPRECATION=1 environment variable, is set. Pending deprecations are used to provide a kind of selective \"early warning\" mechanism that developers may leverage to detect deprecated API usage.\n\nNODE_PENDING_PIPE_INSTANCES=instances#\nSet the number of pending pipe instance handles when the pipe server is waiting for connections. This setting applies to Windows only.\n\nNODE_PRESERVE_SYMLINKS=1#\nAdded in: v7.1.0\nWhen set to 1, instructs the module loader to preserve symbolic links when resolving and caching modules.\n\nNODE_REDIRECT_WARNINGS=file#\nAdded in: v8.0.0\nWhen set, process warnings will be emitted to the given file instead of printing to stderr. The file will be created if it does not exist, and will be appended to if it does. If an error occurs while attempting to write the warning to the file, the warning will be written to stderr instead. This is equivalent to using the --redirect-warnings=file command-line flag.\n\nNODE_REPL_HISTORY=file#\nAdded in: v3.0.0\nPath to the file used to store the persistent REPL history. The default path is ~/.node_repl_history, which is overridden by this variable. Setting the value to an empty string ('' or ' ') disables persistent REPL", "doc_id": "38faf526-9356-4187-abec-0344ba4458dd", "embedding": null, "doc_hash": "63ae01a6fbb5fa2f1a620f12ea5e75deb1980828ab7883d4331cdd7c1a1c46ef", "extra_info": null, "node_info": {"start": 721544, "end": 724494}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "406155a1-7cd6-41fa-8c30-3904f998c906", "3": "c489dac2-2587-4ab5-ab12-5a0e906ec594"}}, "__type__": "1"}, "c489dac2-2587-4ab5-ab12-5a0e906ec594": {"__data__": {"text": "resolving and caching modules.\n\nNODE_REDIRECT_WARNINGS=file#\nAdded in: v8.0.0\nWhen set, process warnings will be emitted to the given file instead of printing to stderr. The file will be created if it does not exist, and will be appended to if it does. If an error occurs while attempting to write the warning to the file, the warning will be written to stderr instead. This is equivalent to using the --redirect-warnings=file command-line flag.\n\nNODE_REPL_HISTORY=file#\nAdded in: v3.0.0\nPath to the file used to store the persistent REPL history. The default path is ~/.node_repl_history, which is overridden by this variable. Setting the value to an empty string ('' or ' ') disables persistent REPL history.\n\nNODE_REPL_EXTERNAL_MODULE=file#\nAdded in: v13.0.0, v12.16.0\nPath to a Node.js module which will be loaded in place of the built-in REPL. Overriding this value to an empty string ('') will use the built-in REPL.\n\nNODE_SKIP_PLATFORM_CHECK=value#\nAdded in: v14.5.0\nIf value equals '1', the check for a supported platform is skipped during Node.js startup. Node.js might not execute correctly. Any issues encountered on unsupported platforms will not be fixed.\n\nNODE_TLS_REJECT_UNAUTHORIZED=value#\nIf value equals '0', certificate validation is disabled for TLS connections. This makes TLS, and HTTPS by extension, insecure. The use of this environment variable is strongly discouraged.\n\nNODE_V8_COVERAGE=dir#\nWhen set, Node.js will begin outputting V8 JavaScript code coverage and Source Map data to the directory provided as an argument (coverage information is written as JSON to files with a coverage prefix).\n\nNODE_V8_COVERAGE will automatically propagate to subprocesses, making it easier to instrument applications that call the child_process.spawn() family of functions. NODE_V8_COVERAGE can be set to an empty string, to prevent propagation.\n\nCoverage output#\nCoverage is output as an array of ScriptCoverage objects on the top-level key result:\n\n{\n  \"result\": [\n    {\n      \"scriptId\": \"67\",\n      \"url\": \"internal/tty.js\",\n      \"functions\": []\n    }\n  ]\n}\nSource map cache#\nStability: 1 - Experimental\nIf found, source map data is appended to the top-level key source-map-cache on the JSON coverage object.\n\nsource-map-cache is an object with keys representing the files source maps were extracted from, and values which include the raw source-map URL (in the key url), the parsed Source Map v3 information (in the key data), and the line lengths of the source file (in the key lineLengths).\n\n{\n  \"result\": [\n    {\n      \"scriptId\": \"68\",\n      \"url\": \"file:///absolute/path/to/source.js\",\n      \"functions\": []\n    }\n  ],\n  \"source-map-cache\": {\n    \"file:///absolute/path/to/source.js\": {\n      \"url\": \"./path-to-map.json\",\n      \"data\": {\n        \"version\": 3,\n        \"sources\": [\n          \"file:///absolute/path/to/original.js\"\n        ],\n        \"names\": [\n          \"Foo\",\n          \"console\",\n          \"info\"\n        ],\n        \"mappings\":", "doc_id": "c489dac2-2587-4ab5-ab12-5a0e906ec594", "embedding": null, "doc_hash": "1aa9678c591e30a846c22f8efbc21696adc3ace384852f3bfda52964c618de13", "extra_info": null, "node_info": {"start": 724032, "end": 727001}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "38faf526-9356-4187-abec-0344ba4458dd", "3": "0a176912-1a1b-4363-a881-03d966a4dd08"}}, "__type__": "1"}, "0a176912-1a1b-4363-a881-03d966a4dd08": {"__data__": {"text": "[]\n    }\n  ],\n  \"source-map-cache\": {\n    \"file:///absolute/path/to/source.js\": {\n      \"url\": \"./path-to-map.json\",\n      \"data\": {\n        \"version\": 3,\n        \"sources\": [\n          \"file:///absolute/path/to/original.js\"\n        ],\n        \"names\": [\n          \"Foo\",\n          \"console\",\n          \"info\"\n        ],\n        \"mappings\": \"MAAMA,IACJC,YAAaC\",\n        \"sourceRoot\": \"./\"\n      },\n      \"lineLengths\": [\n        13,\n        62,\n        38,\n        27\n      ]\n    }\n  }\n}\nNO_COLOR=<any>#\nNO_COLOR is an alias for NODE_DISABLE_COLORS. The value of the environment variable is arbitrary.\n\nOPENSSL_CONF=file#\nAdded in: v6.11.0\nLoad an OpenSSL configuration file on startup. Among other uses, this can be used to enable FIPS-compliant crypto if Node.js is built with ./configure --openssl-fips.\n\nIf the --openssl-config command-line option is used, the environment variable is ignored.\n\nSSL_CERT_DIR=dir#\nAdded in: v7.7.0\nIf --use-openssl-ca is enabled, this overrides and sets OpenSSL's directory containing trusted certificates.\n\nBe aware that unless the child environment is explicitly set, this environment variable will be inherited by any child processes, and if they use OpenSSL, it may cause them to trust the same CAs as node.\n\nSSL_CERT_FILE=file#\nAdded in: v7.7.0\nIf --use-openssl-ca is enabled, this overrides and sets OpenSSL's file containing trusted certificates.\n\nBe aware that unless the child environment is explicitly set, this environment variable will be inherited by any child processes, and if they use OpenSSL, it may cause them to trust the same CAs as node.\n\nTZ#\nHistory\nThe TZ environment variable is used to specify the timezone configuration.\n\nWhile Node.js does not support all of the various ways that TZ is handled in other environments, it does support basic timezone IDs (such as 'Etc/UTC', 'Europe/Paris', or 'America/New_York'). It may support a few other abbreviations or aliases, but these are strongly discouraged and not guaranteed.\n\n$ TZ=Europe/Dublin node -pe \"new Date().toString()\"\nWed May 12 2021 20:30:48 GMT+0100 (Irish Standard Time)\nUV_THREADPOOL_SIZE=size#\nSet the number of threads used in libuv's threadpool to size threads.\n\nAsynchronous system APIs are used by Node.js whenever possible, but where they do not exist, libuv's threadpool is used to create asynchronous node APIs based on synchronous system APIs. Node.js APIs that use the threadpool are:\n\nall fs APIs, other than the file watcher APIs and those that are explicitly synchronous\nasynchronous crypto APIs such as crypto.pbkdf2(), crypto.scrypt(), crypto.randomBytes(), crypto.randomFill(), crypto.generateKeyPair()\ndns.lookup()\nall zlib APIs, other than those that are explicitly synchronous\nBecause libuv's threadpool has a fixed size, it means that if for whatever reason any of these APIs takes a long time, other (seemingly unrelated) APIs that run in libuv's threadpool will experience degraded performance. In order to mitigate this issue, one", "doc_id": "0a176912-1a1b-4363-a881-03d966a4dd08", "embedding": null, "doc_hash": "46b14c67acb5b4f361824feb5a3d7dd43c36de6d3cbb581097c62f7ddca71517", "extra_info": null, "node_info": {"start": 727377, "end": 730353}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c489dac2-2587-4ab5-ab12-5a0e906ec594", "3": "7819609c-c858-4a9b-8e0a-72de2eda0a97"}}, "__type__": "1"}, "7819609c-c858-4a9b-8e0a-72de2eda0a97": {"__data__": {"text": "they do not exist, libuv's threadpool is used to create asynchronous node APIs based on synchronous system APIs. Node.js APIs that use the threadpool are:\n\nall fs APIs, other than the file watcher APIs and those that are explicitly synchronous\nasynchronous crypto APIs such as crypto.pbkdf2(), crypto.scrypt(), crypto.randomBytes(), crypto.randomFill(), crypto.generateKeyPair()\ndns.lookup()\nall zlib APIs, other than those that are explicitly synchronous\nBecause libuv's threadpool has a fixed size, it means that if for whatever reason any of these APIs takes a long time, other (seemingly unrelated) APIs that run in libuv's threadpool will experience degraded performance. In order to mitigate this issue, one potential solution is to increase the size of libuv's threadpool by setting the 'UV_THREADPOOL_SIZE' environment variable to a value greater than 4 (its current default value). For more information, see the libuv threadpool documentation.\n\nUseful V8 options#\nV8 has its own set of CLI options. Any V8 CLI option that is provided to node will be passed on to V8 to handle. V8's options have no stability guarantee. The V8 team themselves don't consider them to be part of their formal API, and reserve the right to change them at any time. Likewise, they are not covered by the Node.js stability guarantees. Many of the V8 options are of interest only to V8 developers. Despite this, there is a small set of V8 options that are widely applicable to Node.js, and they are documented here:\n\n--max-old-space-size=SIZE (in megabytes)#\nSets the max memory size of V8's old memory section. As memory consumption approaches the limit, V8 will spend more time on garbage collection in an effort to free unused memory.\n\nOn a machine with 2 GiB of memory, consider setting this to 1536 (1.5 GiB) to leave some memory for other uses and avoid swapping.\n\n$ node --max-old-space-size=1536 index.js\n--max-semi-space-size=SIZE (in megabytes)#\nSets the maximum semi-space size for V8's scavenge garbage collector in MiB (megabytes). Increasing the max size of a semi-space may improve throughput for Node.js at the cost of more memory consumption.\n\nSince the young generation size of the V8 heap is three times (see YoungGenerationSizeFromSemiSpaceSize in V8) the size of the semi-space, an increase of 1 MiB to semi-space applies to each of the three individual semi-spaces and causes the heap size to increase by 3 MiB. The throughput improvement depends on your workload (see #42511).\n\nThe default value is 16 MiB for 64-bit systems and 8 MiB for 32-bit systems. To get the best configuration for your application, you should try different max-semi-space-size values when running benchmarks for your application.\n\nFor example, benchmark on a 64-bit systems:\n\nfor MiB in 16 32 64 128; do\n    node --max-semi-space-size=$MiB index.js\ndone\nConsole#\nStability: 2 - Stable\nSource Code: lib/console.js\n\nThe node:console module provides a simple debugging console that is similar to the JavaScript console mechanism provided by web browsers.\n\nThe module exports two specific components:\n\nA Console class with methods such as console.log(), console.error(), and console.warn() that can be used to write to any Node.js stream.\nA global console instance configured to write to process.stdout and process.stderr. The global console can be used without calling require('node:console').\nWarning: The global console object's methods are neither consistently synchronous like the browser APIs they resemble, nor are they consistently asynchronous like all other Node.js streams. See the note on process I/O for more information.\n\nExample using the global console:\n\nconsole.log('hello world');\n// Prints: hello world, to", "doc_id": "7819609c-c858-4a9b-8e0a-72de2eda0a97", "embedding": null, "doc_hash": "2780cbb9c2e1e1d8cbee166a9c1aa5194718910105cd17bf71328c44387b501b", "extra_info": null, "node_info": {"start": 729959, "end": 733663}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0a176912-1a1b-4363-a881-03d966a4dd08", "3": "234182a4-1380-4609-9f42-28746c01d1fa"}}, "__type__": "1"}, "234182a4-1380-4609-9f42-28746c01d1fa": {"__data__": {"text": "node:console module provides a simple debugging console that is similar to the JavaScript console mechanism provided by web browsers.\n\nThe module exports two specific components:\n\nA Console class with methods such as console.log(), console.error(), and console.warn() that can be used to write to any Node.js stream.\nA global console instance configured to write to process.stdout and process.stderr. The global console can be used without calling require('node:console').\nWarning: The global console object's methods are neither consistently synchronous like the browser APIs they resemble, nor are they consistently asynchronous like all other Node.js streams. See the note on process I/O for more information.\n\nExample using the global console:\n\nconsole.log('hello world');\n// Prints: hello world, to stdout\nconsole.log('hello %s', 'world');\n// Prints: hello world, to stdout\nconsole.error(new Error('Whoops, something bad happened'));\n// Prints error message and stack trace to stderr:\n//   Error: Whoops, something bad happened\n//     at [eval]:5:15\n//     at Script.runInThisContext (node:vm:132:18)\n//     at Object.runInThisContext (node:vm:309:38)\n//     at node:internal/process/execution:77:19\n//     at [eval]-wrapper:6:22\n//     at evalScript (node:internal/process/execution:76:60)\n//     at node:internal/main/eval_string:23:3\n\nconst name = 'Will Robinson';\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderr\nExample using the Console class:\n\nconst out = getStreamSomehow();\nconst err = getStreamSomehow();\nconst myConsole = new console.Console(out, err);\n\nmyConsole.log('hello world');\n// Prints: hello world, to out\nmyConsole.log('hello %s', 'world');\n// Prints: hello world, to out\nmyConsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to err\n\nconst name = 'Will Robinson';\nmyConsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to err\nClass: Console#\nHistory\nThe Console class can be used to create a simple logger with configurable output streams and can be accessed using either require('node:console').Console or console.Console (or their destructured counterparts):\n\nconst { Console } = require('node:console');\nconst { Console } = console;\nnew Console(stdout[, stderr][, ignoreErrors])#\nnew Console(options)#\nHistory\noptions <Object>\nstdout <stream.Writable>\nstderr <stream.Writable>\nignoreErrors <boolean> Ignore errors when writing to the underlying streams. Default: true.\ncolorMode <boolean> | <string> Set color support for this Console instance. Setting to true enables coloring while inspecting values. Setting to false disables coloring while inspecting values. Setting to 'auto' makes color support depend on the value of the isTTY property and the value returned by getColorDepth() on the respective stream. This option can not be used, if inspectOptions.colors is set as well. Default: 'auto'.\ninspectOptions <Object> Specifies options that are passed along to util.inspect().\ngroupIndentation <number> Set group indentation. Default: 2.\nCreates a new Console with one or two writable stream instances. stdout is a writable stream to print log or info output. stderr is used for warning or error output. If stderr is not provided, stdout is used for stderr.\n\nconst output = fs.createWriteStream('./stdout.log');\nconst errorOutput = fs.createWriteStream('./stderr.log');\n// Custom simple logger\nconst logger = new Console({ stdout: output, stderr: errorOutput });\n// use it like", "doc_id": "234182a4-1380-4609-9f42-28746c01d1fa", "embedding": null, "doc_hash": "91c531a7475520e3fe623416f5601e7c418f862dcd184c7b90f17dda95117013", "extra_info": null, "node_info": {"start": 733582, "end": 737126}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7819609c-c858-4a9b-8e0a-72de2eda0a97", "3": "b75c2ab4-1118-4c37-8fdc-6bd770e64f6a"}}, "__type__": "1"}, "b75c2ab4-1118-4c37-8fdc-6bd770e64f6a": {"__data__": {"text": "by getColorDepth() on the respective stream. This option can not be used, if inspectOptions.colors is set as well. Default: 'auto'.\ninspectOptions <Object> Specifies options that are passed along to util.inspect().\ngroupIndentation <number> Set group indentation. Default: 2.\nCreates a new Console with one or two writable stream instances. stdout is a writable stream to print log or info output. stderr is used for warning or error output. If stderr is not provided, stdout is used for stderr.\n\nconst output = fs.createWriteStream('./stdout.log');\nconst errorOutput = fs.createWriteStream('./stderr.log');\n// Custom simple logger\nconst logger = new Console({ stdout: output, stderr: errorOutput });\n// use it like console\nconst count = 5;\nlogger.log('count: %d', count);\n// In stdout.log: count 5\nThe global console is a special Console whose output is sent to process.stdout and process.stderr. It is equivalent to calling:\n\nnew Console({ stdout: process.stdout, stderr: process.stderr });\nconsole.assert(value[, ...message])#\nHistory\nvalue <any> The value tested for being truthy.\n...message <any> All arguments besides value are used as error message.\nconsole.assert() writes a message if value is falsy or omitted. It only writes a message and does not otherwise affect execution. The output always starts with \"Assertion failed\". If provided, message is formatted using util.format().\n\nIf value is truthy, nothing happens.\n\nconsole.assert(true, 'does nothing');\n\nconsole.assert(false, 'Whoops %s work', 'didn\\'t');\n// Assertion failed: Whoops didn't work\n\nconsole.assert();\n// Assertion failed\nconsole.clear()#\nAdded in: v8.3.0\nWhen stdout is a TTY, calling console.clear() will attempt to clear the TTY. When stdout is not a TTY, this method does nothing.\n\nThe specific operation of console.clear() can vary across operating systems and terminal types. For most Linux operating systems, console.clear() operates similarly to the clear shell command. On Windows, console.clear() will clear only the output in the current terminal viewport for the Node.js binary.\n\nconsole.count([label])#\nAdded in: v8.3.0\nlabel <string> The display label for the counter. Default: 'default'.\nMaintains an internal counter specific to label and outputs to stdout the number of times console.count() has been called with the given label.\n\n> console.count()\ndefault: 1\nundefined\n> console.count('default')\ndefault: 2\nundefined\n> console.count('abc')\nabc: 1\nundefined\n> console.count('xyz')\nxyz: 1\nundefined\n> console.count('abc')\nabc: 2\nundefined\n> console.count()\ndefault: 3\nundefined\n>\nconsole.countReset([label])#\nAdded in: v8.3.0\nlabel <string> The display label for the counter. Default: 'default'.\nResets the internal counter specific to label.\n\n> console.count('abc');\nabc: 1\nundefined\n> console.countReset('abc');\nundefined\n> console.count('abc');\nabc: 1\nundefined\n>\nconsole.debug(data[, ...args])#\nHistory\ndata <any>\n...args <any>\nThe console.debug() function is an alias for console.log().\n\nconsole.dir(obj[, options])#\nAdded in: v0.1.101\nobj <any>\noptions <Object>\nshowHidden <boolean> If true then the object's non-enumerable and symbol properties will be shown too. Default: false.\ndepth <number> Tells util.inspect() how many times to recurse while formatting the object. This is useful for inspecting large complicated objects. To make it recurse indefinitely, pass null. Default: 2.\ncolors <boolean> If true, then the output will be styled with ANSI color codes. Colors are customizable; see customizing", "doc_id": "b75c2ab4-1118-4c37-8fdc-6bd770e64f6a", "embedding": null, "doc_hash": "b366f8ab892e5e83e95366cad6a4859dfd58d69e933d1674a140bf5b57b8c82f", "extra_info": null, "node_info": {"start": 737204, "end": 740710}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "234182a4-1380-4609-9f42-28746c01d1fa", "3": "ed472733-bef2-4c3e-9916-2a30b1fa173e"}}, "__type__": "1"}, "ed472733-bef2-4c3e-9916-2a30b1fa173e": {"__data__": {"text": "1\nundefined\n>\nconsole.debug(data[, ...args])#\nHistory\ndata <any>\n...args <any>\nThe console.debug() function is an alias for console.log().\n\nconsole.dir(obj[, options])#\nAdded in: v0.1.101\nobj <any>\noptions <Object>\nshowHidden <boolean> If true then the object's non-enumerable and symbol properties will be shown too. Default: false.\ndepth <number> Tells util.inspect() how many times to recurse while formatting the object. This is useful for inspecting large complicated objects. To make it recurse indefinitely, pass null. Default: 2.\ncolors <boolean> If true, then the output will be styled with ANSI color codes. Colors are customizable; see customizing util.inspect() colors. Default: false.\nUses util.inspect() on obj and prints the resulting string to stdout. This function bypasses any custom inspect() function defined on obj.\n\nconsole.dirxml(...data)#\nHistory\n...data <any>\nThis method calls console.log() passing it the arguments received. This method does not produce any XML formatting.\n\nconsole.error([data][, ...args])#\nAdded in: v0.1.100\ndata <any>\n...args <any>\nPrints to stderr with newline. Multiple arguments can be passed, with the first used as the primary message and all additional used as substitution values similar to printf(3) (the arguments are all passed to util.format()).\n\nconst code = 5;\nconsole.error('error #%d', code);\n// Prints: error #5, to stderr\nconsole.error('error', code);\n// Prints: error 5, to stderr\nIf formatting elements (e.g. %d) are not found in the first string then util.inspect() is called on each argument and the resulting string values are concatenated. See util.format() for more information.\n\nconsole.group([...label])#\nAdded in: v8.5.0\n...label <any>\nIncreases indentation of subsequent lines by spaces for groupIndentation length.\n\nIf one or more labels are provided, those are printed first without the additional indentation.\n\nconsole.groupCollapsed()#\nAdded in: v8.5.0\nAn alias for console.group().\n\nconsole.groupEnd()#\nAdded in: v8.5.0\nDecreases indentation of subsequent lines by spaces for groupIndentation length.\n\nconsole.info([data][, ...args])#\nAdded in: v0.1.100\ndata <any>\n...args <any>\nThe console.info() function is an alias for console.log().\n\nconsole.log([data][, ...args])#\nAdded in: v0.1.100\ndata <any>\n...args <any>\nPrints to stdout with newline. Multiple arguments can be passed, with the first used as the primary message and all additional used as substitution values similar to printf(3) (the arguments are all passed to util.format()).\n\nconst count = 5;\nconsole.log('count: %d', count);\n// Prints: count: 5, to stdout\nconsole.log('count:', count);\n// Prints: count: 5, to stdout\nSee util.format() for more information.\n\nconsole.table(tabularData[, properties])#\nAdded in: v10.0.0\ntabularData <any>\nproperties <string[]> Alternate properties for constructing the table.\nTry to construct a table with the columns of the properties of tabularData (or use properties) and rows of tabularData and log it. Falls back to just logging the argument if it can't be parsed as tabular.\n\n// These can't be parsed as tabular data\nconsole.table(Symbol());\n// Symbol()\n\nconsole.table(undefined);\n// undefined\n\nconsole.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }]);\n// \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n// \u2502 (index) \u2502  a  \u2502  b  \u2502\n//", "doc_id": "ed472733-bef2-4c3e-9916-2a30b1fa173e", "embedding": null, "doc_hash": "4d1cd9b32a12c7d81b4d5596286a03e08e1f047868718426626fb96ec5248ea5", "extra_info": null, "node_info": {"start": 740752, "end": 744040}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b75c2ab4-1118-4c37-8fdc-6bd770e64f6a", "3": "5a7cc356-f7b8-4ad3-8515-8a6e38053e87"}}, "__type__": "1"}, "5a7cc356-f7b8-4ad3-8515-8a6e38053e87": {"__data__": {"text": "properties])#\nAdded in: v10.0.0\ntabularData <any>\nproperties <string[]> Alternate properties for constructing the table.\nTry to construct a table with the columns of the properties of tabularData (or use properties) and rows of tabularData and log it. Falls back to just logging the argument if it can't be parsed as tabular.\n\n// These can't be parsed as tabular data\nconsole.table(Symbol());\n// Symbol()\n\nconsole.table(undefined);\n// undefined\n\nconsole.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }]);\n// \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n// \u2502 (index) \u2502  a  \u2502  b  \u2502\n// \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n// \u2502    0    \u2502  1  \u2502 'Y' \u2502\n// \u2502    1    \u2502 'Z' \u2502  2  \u2502\n// \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\nconsole.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }], ['a']);\n// \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n// \u2502 (index) \u2502  a  \u2502\n// \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2524\n// \u2502    0    \u2502  1  \u2502\n// \u2502    1    \u2502 'Z' \u2502\n// \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\nconsole.time([label])#\nAdded in: v0.1.104\nlabel <string> Default: 'default'\nStarts a timer that can be used to compute the duration of an operation. Timers are identified by a unique label. Use the same label when calling console.timeEnd() to stop the timer and output the elapsed time in suitable time units to stdout. For example, if the elapsed time is 3869ms, console.timeEnd() displays \"3.869s\".\n\nconsole.timeEnd([label])#\nHistory\nlabel <string> Default: 'default'\nStops a timer that was previously started by calling console.time() and prints the result to stdout:\n\nconsole.time('bunch-of-stuff');\n// Do a bunch of stuff.\nconsole.timeEnd('bunch-of-stuff');\n// Prints: bunch-of-stuff: 225.438ms\nconsole.timeLog([label][, ...data])#\nAdded in: v10.7.0\nlabel <string> Default: 'default'\n...data <any>\nFor a timer that was previously started by calling console.time(), prints the elapsed time and other data arguments to stdout:\n\nconsole.time('process');\nconst value = expensiveProcess1(); // Returns 42\nconsole.timeLog('process', value);\n// Prints \"process: 365.227ms 42\".\ndoExpensiveProcess2(value);\nconsole.timeEnd('process');\nconsole.trace([message][, ...args])\nAdded in: v0.1.104\nmessage <any>\n...args <any>\nPrints to stderr the string 'Trace: ', followed by the util.format() formatted message and stack trace to the current position in the code.\n\nconsole.trace('Show me');\n// Prints: (stack trace will vary based on where trace is called)\n//  Trace: Show me\n//    at repl:2:9\n//    at REPLServer.defaultEval (repl.js:248:27)\n//    at bound (domain.js:287:14)\n//    at REPLServer.runBound [as eval] (domain.js:300:12)\n//    at REPLServer.<anonymous> (repl.js:412:12)\n//    at emitOne (events.js:82:20)\n//    at REPLServer.emit (events.js:169:7)\n//    at REPLServer.Interface._onLine (readline.js:210:10)\n//    at REPLServer.Interface._line (readline.js:549:8)\n//    at", "doc_id": "5a7cc356-f7b8-4ad3-8515-8a6e38053e87", "embedding": null, "doc_hash": "3ff6328778f27170aa34e979068075a4ce936110df8504e6405874077f585aca", "extra_info": null, "node_info": {"start": 744144, "end": 746867}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ed472733-bef2-4c3e-9916-2a30b1fa173e", "3": "3243d57a-f855-425f-a8da-03789678317c"}}, "__type__": "1"}, "3243d57a-f855-425f-a8da-03789678317c": {"__data__": {"text": "trace is called)\n//  Trace: Show me\n//    at repl:2:9\n//    at REPLServer.defaultEval (repl.js:248:27)\n//    at bound (domain.js:287:14)\n//    at REPLServer.runBound [as eval] (domain.js:300:12)\n//    at REPLServer.<anonymous> (repl.js:412:12)\n//    at emitOne (events.js:82:20)\n//    at REPLServer.emit (events.js:169:7)\n//    at REPLServer.Interface._onLine (readline.js:210:10)\n//    at REPLServer.Interface._line (readline.js:549:8)\n//    at REPLServer.Interface._ttyWrite (readline.js:826:14)\nconsole.warn([data][, ...args])#\nAdded in: v0.1.100\ndata <any>\n...args <any>\nThe console.warn() function is an alias for console.error().\n\nInspector only methods#\nThe following methods are exposed by the V8 engine in the general API but do not display anything unless used in conjunction with the inspector (--inspect flag).\n\nconsole.profile([label])#\nAdded in: v8.0.0\nlabel <string>\nThis method does not display anything unless used in the inspector. The console.profile() method starts a JavaScript CPU profile with an optional label until console.profileEnd() is called. The profile is then added to the Profile panel of the inspector.\n\nconsole.profile('MyLabel');\n// Some code\nconsole.profileEnd('MyLabel');\n// Adds the profile 'MyLabel' to the Profiles panel of the inspector.\nconsole.profileEnd([label])#\nAdded in: v8.0.0\nlabel <string>\nThis method does not display anything unless used in the inspector. Stops the current JavaScript CPU profiling session if one has been started and prints the report to the Profiles panel of the inspector. See console.profile() for an example.\n\nIf this method is called without a label, the most recently started profile is stopped.\n\nconsole.timeStamp([label])#\nAdded in: v8.0.0\nlabel <string>\nThis method does not display anything unless used in the inspector. The console.timeStamp() method adds an event with the label 'label' to the Timeline panel of the inspector.\n\nCorepack#\nAdded in: v16.9.0, v14.19.0\nStability: 1 - Experimental\nCorepack is an experimental tool to help with managing versions of your package managers. It exposes binary proxies for each supported package manager that, when called, will identify whatever package manager is configured for the current project, transparently install it if needed, and finally run it without requiring explicit user interactions.\n\nThis feature simplifies two core workflows:\n\nIt eases new contributor onboarding, since they won't have to follow system-specific installation processes anymore just to have the package manager you want them to.\n\nIt allows you to ensure that everyone in your team will use exactly the package manager version you intend them to, without them having to manually synchronize it each time you need to make an update.\n\nWorkflows#\nEnabling the feature#\nDue to its experimental status, Corepack currently needs to be explicitly enabled to have any effect. To do that, run corepack enable, which will set up the symlinks in your environment next to the node binary (and overwrite the existing symlinks if necessary).\n\nFrom this point forward, any call to the supported binaries will work without further setup. Should you experience a problem, run corepack disable to remove the proxies from your system (and consider opening an issue on the Corepack repository to let us know).\n\nConfiguring a package#\nThe Corepack proxies will find the closest package.json file in your current directory hierarchy to extract its \"packageManager\" property.\n\nIf the value corresponds to a supported package manager, Corepack will make sure that all calls to the relevant binaries are run against the requested version, downloading it on demand if needed, and aborting if it", "doc_id": "3243d57a-f855-425f-a8da-03789678317c", "embedding": null, "doc_hash": "18be835943e82a4b1b74975ca2120ecebf1f300a9829d39dc4fb519ca25b858b", "extra_info": null, "node_info": {"start": 746965, "end": 750642}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5a7cc356-f7b8-4ad3-8515-8a6e38053e87", "3": "be40454d-e87d-4256-bf99-109a4fcf9c30"}}, "__type__": "1"}, "be40454d-e87d-4256-bf99-109a4fcf9c30": {"__data__": {"text": "Corepack currently needs to be explicitly enabled to have any effect. To do that, run corepack enable, which will set up the symlinks in your environment next to the node binary (and overwrite the existing symlinks if necessary).\n\nFrom this point forward, any call to the supported binaries will work without further setup. Should you experience a problem, run corepack disable to remove the proxies from your system (and consider opening an issue on the Corepack repository to let us know).\n\nConfiguring a package#\nThe Corepack proxies will find the closest package.json file in your current directory hierarchy to extract its \"packageManager\" property.\n\nIf the value corresponds to a supported package manager, Corepack will make sure that all calls to the relevant binaries are run against the requested version, downloading it on demand if needed, and aborting if it cannot be successfully retrieved.\n\nUpgrading the global versions#\nWhen running outside of an existing project (for example when running yarn init), Corepack will by default use predefined versions roughly corresponding to the latest stable releases from each tool. Those versions can be overridden by running the corepack prepare command along with the package manager version you wish to set:\n\ncorepack prepare yarn@x.y.z --activate\nAlternately, a tag or range may be used:\n\ncorepack prepare pnpm@latest --activate\ncorepack prepare yarn@stable --activate\nOffline workflow#\nMany production environments don't have network access. Since Corepack usually downloads the package manager releases straight from their registries, it can conflict with such environments. To avoid that happening, call the corepack prepare command while you still have network access (typically at the same time you're preparing your deploy image). This will ensure that the required package managers are available even without network access.\n\nThe prepare command has various flags. Consult the detailed Corepack documentation for more information.\n\nSupported package managers#\nThe following binaries are provided through Corepack:\n\nPackage manager\tBinary names\nYarn\tyarn, yarnpkg\npnpm\tpnpm, pnpx\nCommon questions#\nHow does Corepack interact with npm?#\nWhile Corepack could support npm like any other package manager, its shims aren't enabled by default. This has a few consequences:\n\nIt's always possible to run a npm command within a project configured to be used with another package manager, since Corepack cannot intercept it.\n\nWhile npm is a valid option in the \"packageManager\" property, the lack of shim will cause the global npm to be used.\n\nRunning npm install -g yarn doesn't work#\nnpm prevents accidentally overriding the Corepack binaries when doing a global install. To avoid this problem, consider one of the following options:\n\nDon't run this command; Corepack will provide the package manager binaries anyway and will ensure that the requested versions are always available, so installing the package managers explicitly isn't needed.\n\nAdd the --force flag to npm install; this will tell npm that it's fine to override binaries, but you'll erase the Corepack ones in the process. (Run corepack enable to add them back.)\n\nCrypto#\nStability: 2 - Stable\nSource Code: lib/crypto.js\n\nThe node:crypto module provides cryptographic functionality that includes a set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions.\n\nconst { createHmac } = await import('node:crypto');\n\nconst secret = 'abcdefg';\nconst hash = createHmac('sha256', secret)\n               .update('I love cupcakes')\n               .digest('hex');\nconsole.log(hash);\n// Prints:\n//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\nDetermining if crypto support is unavailable#\nIt is possible for Node.js to be built without including support for the node:crypto module. In such cases, attempting to import from crypto or calling require('node:crypto') will result in an", "doc_id": "be40454d-e87d-4256-bf99-109a4fcf9c30", "embedding": null, "doc_hash": "372ccc53b09e352ab50fb4e347830e3c04bd9c3025f6ce9990ee9361a1e264ce", "extra_info": null, "node_info": {"start": 750287, "end": 754227}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3243d57a-f855-425f-a8da-03789678317c", "3": "dee5f16b-a098-46eb-8de9-af659764b1bb"}}, "__type__": "1"}, "dee5f16b-a098-46eb-8de9-af659764b1bb": {"__data__": {"text": "{ createHmac } = await import('node:crypto');\n\nconst secret = 'abcdefg';\nconst hash = createHmac('sha256', secret)\n               .update('I love cupcakes')\n               .digest('hex');\nconsole.log(hash);\n// Prints:\n//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\nDetermining if crypto support is unavailable#\nIt is possible for Node.js to be built without including support for the node:crypto module. In such cases, attempting to import from crypto or calling require('node:crypto') will result in an error being thrown.\n\nWhen using CommonJS, the error thrown can be caught using try/catch:\n\nlet crypto;\ntry {\n  crypto = require('node:crypto');\n} catch (err) {\n  console.error('crypto support is disabled!');\n}\nWhen using the lexical ESM import keyword, the error can only be caught if a handler for process.on('uncaughtException') is registered before any attempt to load the module is made (using, for instance, a preload module).\n\nWhen using ESM, if there is a chance that the code may be run on a build of Node.js where crypto support is not enabled, consider using the import() function instead of the lexical import keyword:\n\nlet crypto;\ntry {\n  crypto = await import('node:crypto');\n} catch (err) {\n  console.error('crypto support is disabled!');\n}\nClass: Certificate#\nAdded in: v0.11.8\nSPKAC is a Certificate Signing Request mechanism originally implemented by Netscape and was specified formally as part of HTML5's keygen element.\n\n<keygen> is deprecated since HTML 5.2 and new projects should not use this element anymore.\n\nThe node:crypto module provides the Certificate class for working with SPKAC data. The most common usage is handling output generated by the HTML5 <keygen> element. Node.js uses OpenSSL's SPKAC implementation internally.\n\nStatic method: Certificate.exportChallenge(spkac[, encoding])#\nHistory\nspkac <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nencoding <string> The encoding of the spkac string.\nReturns: <Buffer> The challenge component of the spkac data structure, which includes a public key and a challenge.\nconst { Certificate } = await import('node:crypto');\nconst spkac = getSpkacSomehow();\nconst challenge = Certificate.exportChallenge(spkac);\nconsole.log(challenge.toString('utf8'));\n// Prints: the challenge as a UTF8 string\nStatic method: Certificate.exportPublicKey(spkac[, encoding])#\nHistory\nspkac <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nencoding <string> The encoding of the spkac string.\nReturns: <Buffer> The public key component of the spkac data structure, which includes a public key and a challenge.\nconst { Certificate } = await import('node:crypto');\nconst spkac = getSpkacSomehow();\nconst publicKey = Certificate.exportPublicKey(spkac);\nconsole.log(publicKey);\n// Prints: the public key as <Buffer ...>\nStatic method: Certificate.verifySpkac(spkac[, encoding])#\nHistory\nspkac <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nencoding <string> The encoding of the spkac string.\nReturns: <boolean> true if the given spkac data structure is valid, false otherwise.\nimport { Buffer } from 'node:buffer';\nconst { Certificate } = await import('node:crypto');\n\nconst spkac =", "doc_id": "dee5f16b-a098-46eb-8de9-af659764b1bb", "embedding": null, "doc_hash": "1120229b877539868bd0dbb4f1e51adc1d827651a5b6309974b96be98877210c", "extra_info": null, "node_info": {"start": 754520, "end": 757729}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "be40454d-e87d-4256-bf99-109a4fcf9c30", "3": "198413d9-72fc-4128-9775-8234ac12097f"}}, "__type__": "1"}, "198413d9-72fc-4128-9775-8234ac12097f": {"__data__": {"text": "includes a public key and a challenge.\nconst { Certificate } = await import('node:crypto');\nconst spkac = getSpkacSomehow();\nconst publicKey = Certificate.exportPublicKey(spkac);\nconsole.log(publicKey);\n// Prints: the public key as <Buffer ...>\nStatic method: Certificate.verifySpkac(spkac[, encoding])#\nHistory\nspkac <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nencoding <string> The encoding of the spkac string.\nReturns: <boolean> true if the given spkac data structure is valid, false otherwise.\nimport { Buffer } from 'node:buffer';\nconst { Certificate } = await import('node:crypto');\n\nconst spkac = getSpkacSomehow();\nconsole.log(Certificate.verifySpkac(Buffer.from(spkac)));\n// Prints: true or false\nLegacy API#\nStability: 0 - Deprecated\nAs a legacy interface, it is possible to create new instances of the crypto.Certificate class as illustrated in the examples below.\n\nnew crypto.Certificate()#\nInstances of the Certificate class can be created using the new keyword or by calling crypto.Certificate() as a function:\n\nconst { Certificate } = await import('node:crypto');\n\nconst cert1 = new Certificate();\nconst cert2 = Certificate();\ncertificate.exportChallenge(spkac[, encoding])#\nAdded in: v0.11.8\nspkac <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nencoding <string> The encoding of the spkac string.\nReturns: <Buffer> The challenge component of the spkac data structure, which includes a public key and a challenge.\nconst { Certificate } = await import('node:crypto');\nconst cert = Certificate();\nconst spkac = getSpkacSomehow();\nconst challenge = cert.exportChallenge(spkac);\nconsole.log(challenge.toString('utf8'));\n// Prints: the challenge as a UTF8 string\ncertificate.exportPublicKey(spkac[, encoding])#\nAdded in: v0.11.8\nspkac <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nencoding <string> The encoding of the spkac string.\nReturns: <Buffer> The public key component of the spkac data structure, which includes a public key and a challenge.\nconst { Certificate } = await import('node:crypto');\nconst cert = Certificate();\nconst spkac = getSpkacSomehow();\nconst publicKey = cert.exportPublicKey(spkac);\nconsole.log(publicKey);\n// Prints: the public key as <Buffer ...>\ncertificate.verifySpkac(spkac[, encoding])#\nAdded in: v0.11.8\nspkac <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nencoding <string> The encoding of the spkac string.\nReturns: <boolean> true if the given spkac data structure is valid, false otherwise.\nimport { Buffer } from 'node:buffer';\nconst { Certificate } = await import('node:crypto');\n\nconst cert = Certificate();\nconst spkac = getSpkacSomehow();\nconsole.log(cert.verifySpkac(Buffer.from(spkac)));\n// Prints: true or false\nClass: Cipher#\nAdded in: v0.1.94\nExtends: <stream.Transform>\nInstances of the Cipher class are used to encrypt data. The class can be used in one of two ways:\n\nAs a stream that is both readable and writable, where plain unencrypted data is written to produce encrypted data on the readable side, or\nUsing the cipher.update() and cipher.final() methods to produce the encrypted data.\nThe crypto.createCipher() or crypto.createCipheriv() methods are used to create Cipher instances. Cipher objects are not to be created", "doc_id": "198413d9-72fc-4128-9775-8234ac12097f", "embedding": null, "doc_hash": "c1dc6073e4ee5a7138b58cbd0994bac071b9f5af81499fe213b67dca66337a2d", "extra_info": null, "node_info": {"start": 757619, "end": 760877}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dee5f16b-a098-46eb-8de9-af659764b1bb", "3": "485c7f3d-29ab-4437-9d73-01ac1b76ca3e"}}, "__type__": "1"}, "485c7f3d-29ab-4437-9d73-01ac1b76ca3e": {"__data__": {"text": "import('node:crypto');\n\nconst cert = Certificate();\nconst spkac = getSpkacSomehow();\nconsole.log(cert.verifySpkac(Buffer.from(spkac)));\n// Prints: true or false\nClass: Cipher#\nAdded in: v0.1.94\nExtends: <stream.Transform>\nInstances of the Cipher class are used to encrypt data. The class can be used in one of two ways:\n\nAs a stream that is both readable and writable, where plain unencrypted data is written to produce encrypted data on the readable side, or\nUsing the cipher.update() and cipher.final() methods to produce the encrypted data.\nThe crypto.createCipher() or crypto.createCipheriv() methods are used to create Cipher instances. Cipher objects are not to be created directly using the new keyword.\n\nExample: Using Cipher objects as streams:\n\nconst {\n  scrypt,\n  randomFill,\n  createCipheriv,\n} = await import('node:crypto');\n\nconst algorithm = 'aes-192-cbc';\nconst password = 'Password used to generate key';\n\n// First, we'll generate the key. The key length is dependent on the algorithm.\n// In this case for aes192, it is 24 bytes (192 bits).\nscrypt(password, 'salt', 24, (err, key) => {\n  if (err) throw err;\n  // Then, we'll generate a random initialization vector\n  randomFill(new Uint8Array(16), (err, iv) => {\n    if (err) throw err;\n\n    // Once we have the key and iv, we can create and use the cipher...\n    const cipher = createCipheriv(algorithm, key, iv);\n\n    let encrypted = '';\n    cipher.setEncoding('hex');\n\n    cipher.on('data', (chunk) => encrypted += chunk);\n    cipher.on('end', () => console.log(encrypted));\n\n    cipher.write('some clear text data');\n    cipher.end();\n  });\n});\nExample: Using Cipher and piped streams:\n\nimport {\n  createReadStream,\n  createWriteStream,\n} from 'node:fs';\n\nimport {\n  pipeline,\n} from 'node:stream';\n\nconst {\n  scrypt,\n  randomFill,\n  createCipheriv,\n} = await import('node:crypto');\n\nconst algorithm = 'aes-192-cbc';\nconst password = 'Password used to generate key';\n\n// First, we'll generate the key. The key length is dependent on the algorithm.\n// In this case for aes192, it is 24 bytes (192 bits).\nscrypt(password, 'salt', 24, (err, key) => {\n  if (err) throw err;\n  // Then, we'll generate a random initialization vector\n  randomFill(new Uint8Array(16), (err, iv) => {\n    if (err) throw err;\n\n    const cipher = createCipheriv(algorithm, key, iv);\n\n    const input = createReadStream('test.js');\n    const output = createWriteStream('test.enc');\n\n    pipeline(input, cipher, output, (err) => {\n      if (err) throw err;\n    });\n  });\n});\nExample: Using the cipher.update() and cipher.final() methods:\n\nconst {\n  scrypt,\n  randomFill,\n  createCipheriv,\n} = await import('node:crypto');\n\nconst algorithm = 'aes-192-cbc';\nconst password = 'Password used to generate key';\n\n// First, we'll generate the key. The key length is dependent on the algorithm.\n// In this case for aes192, it is 24 bytes (192 bits).\nscrypt(password, 'salt', 24, (err, key) => {\n  if (err) throw err;\n  // Then, we'll generate a random initialization vector\n  randomFill(new Uint8Array(16), (err, iv) => {\n ", "doc_id": "485c7f3d-29ab-4437-9d73-01ac1b76ca3e", "embedding": null, "doc_hash": "a22d7491d017ddc225849c998c9c45c052c1a3e18507547b20a58d8705343482", "extra_info": null, "node_info": {"start": 760838, "end": 763894}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "198413d9-72fc-4128-9775-8234ac12097f", "3": "1d3e1a41-a93a-484c-ad54-f1fbfc48999c"}}, "__type__": "1"}, "1d3e1a41-a93a-484c-ad54-f1fbfc48999c": {"__data__": {"text": " if (err) throw err;\n    });\n  });\n});\nExample: Using the cipher.update() and cipher.final() methods:\n\nconst {\n  scrypt,\n  randomFill,\n  createCipheriv,\n} = await import('node:crypto');\n\nconst algorithm = 'aes-192-cbc';\nconst password = 'Password used to generate key';\n\n// First, we'll generate the key. The key length is dependent on the algorithm.\n// In this case for aes192, it is 24 bytes (192 bits).\nscrypt(password, 'salt', 24, (err, key) => {\n  if (err) throw err;\n  // Then, we'll generate a random initialization vector\n  randomFill(new Uint8Array(16), (err, iv) => {\n    if (err) throw err;\n\n    const cipher = createCipheriv(algorithm, key, iv);\n\n    let encrypted = cipher.update('some clear text data', 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    console.log(encrypted);\n  });\n});\ncipher.final([outputEncoding])#\nAdded in: v0.1.94\noutputEncoding <string> The encoding of the return value.\nReturns: <Buffer> | <string> Any remaining enciphered contents. If outputEncoding is specified, a string is returned. If an outputEncoding is not provided, a Buffer is returned.\nOnce the cipher.final() method has been called, the Cipher object can no longer be used to encrypt data. Attempts to call cipher.final() more than once will result in an error being thrown.\n\ncipher.getAuthTag()#\nAdded in: v1.0.0\nReturns: <Buffer> When using an authenticated encryption mode (GCM, CCM, OCB, and chacha20-poly1305 are currently supported), the cipher.getAuthTag() method returns a Buffer containing the authentication tag that has been computed from the given data.\nThe cipher.getAuthTag() method should only be called after encryption has been completed using the cipher.final() method.\n\nIf the authTagLength option was set during the cipher instance's creation, this function will return exactly authTagLength bytes.\n\ncipher.setAAD(buffer[, options])#\nAdded in: v1.0.0\nbuffer <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\noptions <Object> stream.transform options\nplaintextLength <number>\nencoding <string> The string encoding to use when buffer is a string.\nReturns: <Cipher> for method chaining.\nWhen using an authenticated encryption mode (GCM, CCM, OCB, and chacha20-poly1305 are currently supported), the cipher.setAAD() method sets the value used for the additional authenticated data (AAD) input parameter.\n\nThe plaintextLength option is optional for GCM and OCB. When using CCM, the plaintextLength option must be specified and its value must match the length of the plaintext in bytes. See CCM mode.\n\nThe cipher.setAAD() method must be called before cipher.update().\n\ncipher.setAutoPadding([autoPadding])#\nAdded in: v0.7.1\nautoPadding <boolean> Default: true\nReturns: <Cipher> for method chaining.\nWhen using block encryption algorithms, the Cipher class will automatically add padding to the input data to the appropriate block size. To disable the default padding call cipher.setAutoPadding(false).\n\nWhen autoPadding is false, the length of the entire input data must be a multiple of the cipher's block size or cipher.final() will throw an error. Disabling automatic padding is useful for non-standard padding, for instance using 0x0 instead of PKCS padding.\n\nThe cipher.setAutoPadding() method must be called before cipher.final().\n\ncipher.update(data[, inputEncoding][, outputEncoding])#\nHistory\ndata <string> | <Buffer> | <TypedArray> | <DataView>\ninputEncoding <string> The encoding of the data.\noutputEncoding <string> The encoding of", "doc_id": "1d3e1a41-a93a-484c-ad54-f1fbfc48999c", "embedding": null, "doc_hash": "85fa2055ccd6db1c3ef5fcc7b1f6bc70c95c623d30af0913c71ba9a3b5f163f9", "extra_info": null, "node_info": {"start": 763999, "end": 767480}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "485c7f3d-29ab-4437-9d73-01ac1b76ca3e", "3": "33b3b55a-6551-44e5-98c5-d152be55691d"}}, "__type__": "1"}, "33b3b55a-6551-44e5-98c5-d152be55691d": {"__data__": {"text": "using block encryption algorithms, the Cipher class will automatically add padding to the input data to the appropriate block size. To disable the default padding call cipher.setAutoPadding(false).\n\nWhen autoPadding is false, the length of the entire input data must be a multiple of the cipher's block size or cipher.final() will throw an error. Disabling automatic padding is useful for non-standard padding, for instance using 0x0 instead of PKCS padding.\n\nThe cipher.setAutoPadding() method must be called before cipher.final().\n\ncipher.update(data[, inputEncoding][, outputEncoding])#\nHistory\ndata <string> | <Buffer> | <TypedArray> | <DataView>\ninputEncoding <string> The encoding of the data.\noutputEncoding <string> The encoding of the return value.\nReturns: <Buffer> | <string>\nUpdates the cipher with data. If the inputEncoding argument is given, the data argument is a string using the specified encoding. If the inputEncoding argument is not given, data must be a Buffer, TypedArray, or DataView. If data is a Buffer, TypedArray, or DataView, then inputEncoding is ignored.\n\nThe outputEncoding specifies the output format of the enciphered data. If the outputEncoding is specified, a string using the specified encoding is returned. If no outputEncoding is provided, a Buffer is returned.\n\nThe cipher.update() method can be called multiple times with new data until cipher.final() is called. Calling cipher.update() after cipher.final() will result in an error being thrown.\n\nClass: Decipher#\nAdded in: v0.1.94\nExtends: <stream.Transform>\nInstances of the Decipher class are used to decrypt data. The class can be used in one of two ways:\n\nAs a stream that is both readable and writable, where plain encrypted data is written to produce unencrypted data on the readable side, or\nUsing the decipher.update() and decipher.final() methods to produce the unencrypted data.\nThe crypto.createDecipher() or crypto.createDecipheriv() methods are used to create Decipher instances. Decipher objects are not to be created directly using the new keyword.\n\nExample: Using Decipher objects as streams:\n\nimport { Buffer } from 'node:buffer';\nconst {\n  scryptSync,\n  createDecipheriv,\n} = await import('node:crypto');\n\nconst algorithm = 'aes-192-cbc';\nconst password = 'Password used to generate key';\n// Key length is dependent on the algorithm. In this case for aes192, it is\n// 24 bytes (192 bits).\n// Use the async `crypto.scrypt()` instead.\nconst key = scryptSync(password, 'salt', 24);\n// The IV is usually passed along with the ciphertext.\nconst iv = Buffer.alloc(16, 0); // Initialization vector.\n\nconst decipher = createDecipheriv(algorithm, key, iv);\n\nlet decrypted = '';\ndecipher.on('readable', () => {\n  let chunk;\n  while (null !== (chunk = decipher.read())) {\n    decrypted += chunk.toString('utf8');\n  }\n});\ndecipher.on('end', () => {\n  console.log(decrypted);\n  // Prints: some clear text data\n});\n\n// Encrypted with same algorithm, key and iv.\nconst encrypted =\n  'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa';\ndecipher.write(encrypted, 'hex');\ndecipher.end();\nExample: Using Decipher and piped streams:\n\nimport {\n  createReadStream,\n  createWriteStream,\n} from 'node:fs';\nimport { Buffer } from 'node:buffer';\nconst {\n  scryptSync,\n  createDecipheriv,\n} = await import('node:crypto');\n\nconst algorithm = 'aes-192-cbc';\nconst password = 'Password used to generate key';\n// Use the async `crypto.scrypt()` instead.\nconst key =", "doc_id": "33b3b55a-6551-44e5-98c5-d152be55691d", "embedding": null, "doc_hash": "a17efb63f423d1fc312287e4b04980680ba551fedc3dd38d33c9611633e75de5", "extra_info": null, "node_info": {"start": 767326, "end": 770786}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1d3e1a41-a93a-484c-ad54-f1fbfc48999c", "3": "2f9ca93b-0466-47e7-aa5b-cd02ca652978"}}, "__type__": "1"}, "2f9ca93b-0466-47e7-aa5b-cd02ca652978": {"__data__": {"text": "Encrypted with same algorithm, key and iv.\nconst encrypted =\n  'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa';\ndecipher.write(encrypted, 'hex');\ndecipher.end();\nExample: Using Decipher and piped streams:\n\nimport {\n  createReadStream,\n  createWriteStream,\n} from 'node:fs';\nimport { Buffer } from 'node:buffer';\nconst {\n  scryptSync,\n  createDecipheriv,\n} = await import('node:crypto');\n\nconst algorithm = 'aes-192-cbc';\nconst password = 'Password used to generate key';\n// Use the async `crypto.scrypt()` instead.\nconst key = scryptSync(password, 'salt', 24);\n// The IV is usually passed along with the ciphertext.\nconst iv = Buffer.alloc(16, 0); // Initialization vector.\n\nconst decipher = createDecipheriv(algorithm, key, iv);\n\nconst input = createReadStream('test.enc');\nconst output = createWriteStream('test.js');\n\ninput.pipe(decipher).pipe(output);\nExample: Using the decipher.update() and decipher.final() methods:\n\nimport { Buffer } from 'node:buffer';\nconst {\n  scryptSync,\n  createDecipheriv,\n} = await import('node:crypto');\n\nconst algorithm = 'aes-192-cbc';\nconst password = 'Password used to generate key';\n// Use the async `crypto.scrypt()` instead.\nconst key = scryptSync(password, 'salt', 24);\n// The IV is usually passed along with the ciphertext.\nconst iv = Buffer.alloc(16, 0); // Initialization vector.\n\nconst decipher = createDecipheriv(algorithm, key, iv);\n\n// Encrypted using same algorithm, key and iv.\nconst encrypted =\n  'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa';\nlet decrypted = decipher.update(encrypted, 'hex', 'utf8');\ndecrypted += decipher.final('utf8');\nconsole.log(decrypted);\n// Prints: some clear text data\ndecipher.final([outputEncoding])#\nAdded in: v0.1.94\noutputEncoding <string> The encoding of the return value.\nReturns: <Buffer> | <string> Any remaining deciphered contents. If outputEncoding is specified, a string is returned. If an outputEncoding is not provided, a Buffer is returned.\nOnce the decipher.final() method has been called, the Decipher object can no longer be used to decrypt data. Attempts to call decipher.final() more than once will result in an error being thrown.\n\ndecipher.setAAD(buffer[, options])#\nHistory\nbuffer <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\noptions <Object> stream.transform options\nplaintextLength <number>\nencoding <string> String encoding to use when buffer is a string.\nReturns: <Decipher> for method chaining.\nWhen using an authenticated encryption mode (GCM, CCM, OCB, and chacha20-poly1305 are currently supported), the decipher.setAAD() method sets the value used for the additional authenticated data (AAD) input parameter.\n\nThe options argument is optional for GCM. When using CCM, the plaintextLength option must be specified and its value must match the length of the ciphertext in bytes. See CCM mode.\n\nThe decipher.setAAD() method must be called before decipher.update().\n\nWhen passing a string as the buffer, please consider caveats when using strings as inputs to cryptographic APIs.\n\ndecipher.setAuthTag(buffer[, encoding])#\nHistory\nbuffer <string> | <Buffer> | <ArrayBuffer> | <TypedArray> | <DataView>\nencoding <string> String encoding to use when buffer is a string.\nReturns: <Decipher> for method chaining.\nWhen using an", "doc_id": "2f9ca93b-0466-47e7-aa5b-cd02ca652978", "embedding": null, "doc_hash": "1c4e6a006393b0c2d1ba119ca6caf1b28215fd9ff3d3ca136629f87666701238", "extra_info": null, "node_info": {"start": 770941, "end": 774228}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "33b3b55a-6551-44e5-98c5-d152be55691d", "3": "d59a5400-45c9-4b97-8126-e4879d2cd3c6"}}, "__type__": "1"}, "d59a5400-45c9-4b97-8126-e4879d2cd3c6": {"__data__": {"text": "are currently supported), the decipher.setAAD() method sets the value used for the additional authenticated data (AAD) input parameter.\n\nThe options argument is optional for GCM. When using CCM, the plaintextLength option must be specified and its value must match the length of the ciphertext in bytes. See CCM mode.\n\nThe decipher.setAAD() method must be called before decipher.update().\n\nWhen passing a string as the buffer, please consider caveats when using strings as inputs to cryptographic APIs.\n\ndecipher.setAuthTag(buffer[, encoding])#\nHistory\nbuffer <string> | <Buffer> | <ArrayBuffer> | <TypedArray> | <DataView>\nencoding <string> String encoding to use when buffer is a string.\nReturns: <Decipher> for method chaining.\nWhen using an authenticated encryption mode (GCM, CCM, OCB, and chacha20-poly1305 are currently supported), the decipher.setAuthTag() method is used to pass in the received authentication tag. If no tag is provided, or if the cipher text has been tampered with, decipher.final() will throw, indicating that the cipher text should be discarded due to failed authentication. If the tag length is invalid according to NIST SP 800-38D or does not match the value of the authTagLength option, decipher.setAuthTag() will throw an error.\n\nThe decipher.setAuthTag() method must be called before decipher.update() for CCM mode or before decipher.final() for GCM and OCB modes and chacha20-poly1305. decipher.setAuthTag() can only be called once.\n\nWhen passing a string as the authentication tag, please consider caveats when using strings as inputs to cryptographic APIs.\n\ndecipher.setAutoPadding([autoPadding])#\nAdded in: v0.7.1\nautoPadding <boolean> Default: true\nReturns: <Decipher> for method chaining.\nWhen data has been encrypted without standard block padding, calling decipher.setAutoPadding(false) will disable automatic padding to prevent decipher.final() from checking for and removing padding.\n\nTurning auto padding off will only work if the input data's length is a multiple of the ciphers block size.\n\nThe decipher.setAutoPadding() method must be called before decipher.final().\n\ndecipher.update(data[, inputEncoding][, outputEncoding])#\nHistory\ndata <string> | <Buffer> | <TypedArray> | <DataView>\ninputEncoding <string> The encoding of the data string.\noutputEncoding <string> The encoding of the return value.\nReturns: <Buffer> | <string>\nUpdates the decipher with data. If the inputEncoding argument is given, the data argument is a string using the specified encoding. If the inputEncoding argument is not given, data must be a Buffer. If data is a Buffer then inputEncoding is ignored.\n\nThe outputEncoding specifies the output format of the enciphered data. If the outputEncoding is specified, a string using the specified encoding is returned. If no outputEncoding is provided, a Buffer is returned.\n\nThe decipher.update() method can be called multiple times with new data until decipher.final() is called. Calling decipher.update() after decipher.final() will result in an error being thrown.\n\nClass: DiffieHellman#\nAdded in: v0.5.0\nThe DiffieHellman class is a utility for creating Diffie-Hellman key exchanges.\n\nInstances of the DiffieHellman class can be created using the crypto.createDiffieHellman() function.\n\nimport assert from 'node:assert';\n\nconst {\n  createDiffieHellman,\n} = await import('node:crypto');\n\n// Generate Alice's keys...\nconst alice = createDiffieHellman(2048);\nconst aliceKey = alice.generateKeys();\n\n// Generate Bob's keys...\nconst bob = createDiffieHellman(alice.getPrime(), alice.getGenerator());\nconst bobKey = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst aliceSecret = alice.computeSecret(bobKey);\nconst bobSecret =", "doc_id": "d59a5400-45c9-4b97-8126-e4879d2cd3c6", "embedding": null, "doc_hash": "8e81506d557b774b05eb35c25ecc9bb19486a5dea6fdb6fc9303da94b4ba386c", "extra_info": null, "node_info": {"start": 774074, "end": 777783}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2f9ca93b-0466-47e7-aa5b-cd02ca652978", "3": "cae88f64-e179-4194-a4f4-91efc6d6f531"}}, "__type__": "1"}, "cae88f64-e179-4194-a4f4-91efc6d6f531": {"__data__": {"text": "DiffieHellman class is a utility for creating Diffie-Hellman key exchanges.\n\nInstances of the DiffieHellman class can be created using the crypto.createDiffieHellman() function.\n\nimport assert from 'node:assert';\n\nconst {\n  createDiffieHellman,\n} = await import('node:crypto');\n\n// Generate Alice's keys...\nconst alice = createDiffieHellman(2048);\nconst aliceKey = alice.generateKeys();\n\n// Generate Bob's keys...\nconst bob = createDiffieHellman(alice.getPrime(), alice.getGenerator());\nconst bobKey = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst aliceSecret = alice.computeSecret(bobKey);\nconst bobSecret = bob.computeSecret(aliceKey);\n\n// OK\nassert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));\ndiffieHellman.computeSecret(otherPublicKey[, inputEncoding][, outputEncoding])#\nAdded in: v0.5.0\notherPublicKey <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\ninputEncoding <string> The encoding of an otherPublicKey string.\noutputEncoding <string> The encoding of the return value.\nReturns: <Buffer> | <string>\nComputes the shared secret using otherPublicKey as the other party's public key and returns the computed shared secret. The supplied key is interpreted using the specified inputEncoding, and secret is encoded using specified outputEncoding. If the inputEncoding is not provided, otherPublicKey is expected to be a Buffer, TypedArray, or DataView.\n\nIf outputEncoding is given a string is returned; otherwise, a Buffer is returned.\n\ndiffieHellman.generateKeys([encoding])#\nAdded in: v0.5.0\nencoding <string> The encoding of the return value.\nReturns: <Buffer> | <string>\nGenerates private and public Diffie-Hellman key values, and returns the public key in the specified encoding. This key should be transferred to the other party. If encoding is provided a string is returned; otherwise a Buffer is returned.\n\ndiffieHellman.getGenerator([encoding])#\nAdded in: v0.5.0\nencoding <string> The encoding of the return value.\nReturns: <Buffer> | <string>\nReturns the Diffie-Hellman generator in the specified encoding. If encoding is provided a string is returned; otherwise a Buffer is returned.\n\ndiffieHellman.getPrime([encoding])#\nAdded in: v0.5.0\nencoding <string> The encoding of the return value.\nReturns: <Buffer> | <string>\nReturns the Diffie-Hellman prime in the specified encoding. If encoding is provided a string is returned; otherwise a Buffer is returned.\n\ndiffieHellman.getPrivateKey([encoding])#\nAdded in: v0.5.0\nencoding <string> The encoding of the return value.\nReturns: <Buffer> | <string>\nReturns the Diffie-Hellman private key in the specified encoding. If encoding is provided a string is returned; otherwise a Buffer is returned.\n\ndiffieHellman.getPublicKey([encoding])#\nAdded in: v0.5.0\nencoding <string> The encoding of the return value.\nReturns: <Buffer> | <string>\nReturns the Diffie-Hellman public key in the specified encoding. If encoding is provided a string is returned; otherwise a Buffer is returned.\n\ndiffieHellman.setPrivateKey(privateKey[, encoding])#\nAdded in: v0.5.0\nprivateKey <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nencoding <string> The encoding of the privateKey string.\nSets the Diffie-Hellman private key. If the encoding argument is provided, privateKey is expected to be a string. If no encoding is provided, privateKey is expected to be a Buffer, TypedArray, or DataView.\n\ndiffieHellman.setPublicKey(publicKey[,", "doc_id": "cae88f64-e179-4194-a4f4-91efc6d6f531", "embedding": null, "doc_hash": "1cf8b4908debfb76d59fc267d3db4ff129a2c3d682c31636c6fd2d0e44def569", "extra_info": null, "node_info": {"start": 777861, "end": 781306}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d59a5400-45c9-4b97-8126-e4879d2cd3c6", "3": "b2456f59-8915-4f48-8397-74e4584aec92"}}, "__type__": "1"}, "b2456f59-8915-4f48-8397-74e4584aec92": {"__data__": {"text": "<string> The encoding of the return value.\nReturns: <Buffer> | <string>\nReturns the Diffie-Hellman public key in the specified encoding. If encoding is provided a string is returned; otherwise a Buffer is returned.\n\ndiffieHellman.setPrivateKey(privateKey[, encoding])#\nAdded in: v0.5.0\nprivateKey <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nencoding <string> The encoding of the privateKey string.\nSets the Diffie-Hellman private key. If the encoding argument is provided, privateKey is expected to be a string. If no encoding is provided, privateKey is expected to be a Buffer, TypedArray, or DataView.\n\ndiffieHellman.setPublicKey(publicKey[, encoding])#\nAdded in: v0.5.0\npublicKey <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nencoding <string> The encoding of the publicKey string.\nSets the Diffie-Hellman public key. If the encoding argument is provided, publicKey is expected to be a string. If no encoding is provided, publicKey is expected to be a Buffer, TypedArray, or DataView.\n\ndiffieHellman.verifyError#\nAdded in: v0.11.12\nA bit field containing any warnings and/or errors resulting from a check performed during initialization of the DiffieHellman object.\n\nThe following values are valid for this property (as defined in node:constants module):\n\nDH_CHECK_P_NOT_SAFE_PRIME\nDH_CHECK_P_NOT_PRIME\nDH_UNABLE_TO_CHECK_GENERATOR\nDH_NOT_SUITABLE_GENERATOR\nClass: DiffieHellmanGroup#\nAdded in: v0.7.5\nThe DiffieHellmanGroup class takes a well-known modp group as its argument. It works the same as DiffieHellman, except that it does not allow changing its keys after creation. In other words, it does not implement setPublicKey() or setPrivateKey() methods.\n\nconst { createDiffieHellmanGroup } = await import('node:crypto');\nconst dh = createDiffieHellmanGroup('modp16');\nThe following groups are supported:\n\n'modp14' (2048 bits, RFC 3526 Section 3)\n'modp15' (3072 bits, RFC 3526 Section 4)\n'modp16' (4096 bits, RFC 3526 Section 5)\n'modp17' (6144 bits, RFC 3526 Section 6)\n'modp18' (8192 bits, RFC 3526 Section 7)\nThe following groups are still supported but deprecated (see Caveats):\n\n'modp1' (768 bits, RFC 2409 Section 6.1) \n'modp2' (1024 bits, RFC 2409 Section 6.2) \n'modp5' (1536 bits, RFC 3526 Section 2) \nThese deprecated groups might be removed in future versions of Node.js.\n\nClass: ECDH#\nAdded in: v0.11.14\nThe ECDH class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH) key exchanges.\n\nInstances of the ECDH class can be created using the crypto.createECDH() function.\n\nimport assert from 'node:assert';\n\nconst {\n  createECDH,\n} = await import('node:crypto');\n\n// Generate Alice's keys...\nconst alice = createECDH('secp521r1');\nconst aliceKey = alice.generateKeys();\n\n// Generate Bob's keys...\nconst bob = createECDH('secp521r1');\nconst bobKey = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst aliceSecret = alice.computeSecret(bobKey);\nconst bobSecret = bob.computeSecret(aliceKey);\n\nassert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));\n// OK\nStatic method: ECDH.convertKey(key, curve[, inputEncoding[, outputEncoding[, format]]])#\nAdded in: v10.0.0\nkey", "doc_id": "b2456f59-8915-4f48-8397-74e4584aec92", "embedding": null, "doc_hash": "0fd2da4bb29be12521317a7e94b4e2115b3888ba20f0a04b2976cdad745dad59", "extra_info": null, "node_info": {"start": 781295, "end": 784457}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cae88f64-e179-4194-a4f4-91efc6d6f531", "3": "0c325a46-39ef-4be8-b8fa-fd2497bdcac2"}}, "__type__": "1"}, "0c325a46-39ef-4be8-b8fa-fd2497bdcac2": {"__data__": {"text": "Generate Alice's keys...\nconst alice = createECDH('secp521r1');\nconst aliceKey = alice.generateKeys();\n\n// Generate Bob's keys...\nconst bob = createECDH('secp521r1');\nconst bobKey = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst aliceSecret = alice.computeSecret(bobKey);\nconst bobSecret = bob.computeSecret(aliceKey);\n\nassert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));\n// OK\nStatic method: ECDH.convertKey(key, curve[, inputEncoding[, outputEncoding[, format]]])#\nAdded in: v10.0.0\nkey <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\ncurve <string>\ninputEncoding <string> The encoding of the key string.\noutputEncoding <string> The encoding of the return value.\nformat <string> Default: 'uncompressed'\nReturns: <Buffer> | <string>\nConverts the EC Diffie-Hellman public key specified by key and curve to the format specified by format. The format argument specifies point encoding and can be 'compressed', 'uncompressed' or 'hybrid'. The supplied key is interpreted using the specified inputEncoding, and the returned key is encoded using the specified outputEncoding.\n\nUse crypto.getCurves() to obtain a list of available curve names. On recent OpenSSL releases, openssl ecparam -list_curves will also display the name and description of each available elliptic curve.\n\nIf format is not specified the point will be returned in 'uncompressed' format.\n\nIf the inputEncoding is not provided, key is expected to be a Buffer, TypedArray, or DataView.\n\nExample (uncompressing a key):\n\nconst {\n  createECDH,\n  ECDH,\n} = await import('node:crypto');\n\nconst ecdh = createECDH('secp256k1');\necdh.generateKeys();\n\nconst compressedKey = ecdh.getPublicKey('hex', 'compressed');\n\nconst uncompressedKey = ECDH.convertKey(compressedKey,\n                                        'secp256k1',\n                                        'hex',\n                                        'hex',\n                                        'uncompressed');\n\n// The converted key and the uncompressed public key should be the same\nconsole.log(uncompressedKey === ecdh.getPublicKey('hex'));\necdh.computeSecret(otherPublicKey[, inputEncoding][, outputEncoding])#\nHistory\notherPublicKey <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\ninputEncoding <string> The encoding of the otherPublicKey string.\noutputEncoding <string> The encoding of the return value.\nReturns: <Buffer> | <string>\nComputes the shared secret using otherPublicKey as the other party's public key and returns the computed shared secret. The supplied key is interpreted using specified inputEncoding, and the returned secret is encoded using the specified outputEncoding. If the inputEncoding is not provided, otherPublicKey is expected to be a Buffer, TypedArray, or DataView.\n\nIf outputEncoding is given a string will be returned; otherwise a Buffer is returned.\n\necdh.computeSecret will throw an ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY error when otherPublicKey lies outside of the elliptic curve. Since otherPublicKey is usually supplied from a remote user over", "doc_id": "0c325a46-39ef-4be8-b8fa-fd2497bdcac2", "embedding": null, "doc_hash": "ac3bb9f16d8ed4491fb27565846f11a38d4b358232d79f87f81ddb83102e714d", "extra_info": null, "node_info": {"start": 784547, "end": 787619}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b2456f59-8915-4f48-8397-74e4584aec92", "3": "fdda242e-c890-42e5-a799-8856f550fe96"}}, "__type__": "1"}, "fdda242e-c890-42e5-a799-8856f550fe96": {"__data__": {"text": "<string> The encoding of the otherPublicKey string.\noutputEncoding <string> The encoding of the return value.\nReturns: <Buffer> | <string>\nComputes the shared secret using otherPublicKey as the other party's public key and returns the computed shared secret. The supplied key is interpreted using specified inputEncoding, and the returned secret is encoded using the specified outputEncoding. If the inputEncoding is not provided, otherPublicKey is expected to be a Buffer, TypedArray, or DataView.\n\nIf outputEncoding is given a string will be returned; otherwise a Buffer is returned.\n\necdh.computeSecret will throw an ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY error when otherPublicKey lies outside of the elliptic curve. Since otherPublicKey is usually supplied from a remote user over an insecure network, be sure to handle this exception accordingly.\n\necdh.generateKeys([encoding[, format]])#\nAdded in: v0.11.14\nencoding <string> The encoding of the return value.\nformat <string> Default: 'uncompressed'\nReturns: <Buffer> | <string>\nGenerates private and public EC Diffie-Hellman key values, and returns the public key in the specified format and encoding. This key should be transferred to the other party.\n\nThe format argument specifies point encoding and can be 'compressed' or 'uncompressed'. If format is not specified, the point will be returned in 'uncompressed' format.\n\nIf encoding is provided a string is returned; otherwise a Buffer is returned.\n\necdh.getPrivateKey([encoding])#\nAdded in: v0.11.14\nencoding <string> The encoding of the return value.\nReturns: <Buffer> | <string> The EC Diffie-Hellman in the specified encoding.\nIf encoding is specified, a string is returned; otherwise a Buffer is returned.\n\necdh.getPublicKey([encoding][, format])#\nAdded in: v0.11.14\nencoding <string> The encoding of the return value.\nformat <string> Default: 'uncompressed'\nReturns: <Buffer> | <string> The EC Diffie-Hellman public key in the specified encoding and format.\nThe format argument specifies point encoding and can be 'compressed' or 'uncompressed'. If format is not specified the point will be returned in 'uncompressed' format.\n\nIf encoding is specified, a string is returned; otherwise a Buffer is returned.\n\necdh.setPrivateKey(privateKey[, encoding])#\nAdded in: v0.11.14\nprivateKey <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nencoding <string> The encoding of the privateKey string.\nSets the EC Diffie-Hellman private key. If encoding is provided, privateKey is expected to be a string; otherwise privateKey is expected to be a Buffer, TypedArray, or DataView.\n\nIf privateKey is not valid for the curve specified when the ECDH object was created, an error is thrown. Upon setting the private key, the associated public point (key) is also generated and set in the ECDH object.\n\necdh.setPublicKey(publicKey[, encoding])#\nAdded in: v0.11.14Deprecated since: v5.2.0\nStability: 0 - Deprecated\npublicKey <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nencoding <string> The encoding of the publicKey string.\nSets the EC Diffie-Hellman public key. If encoding is provided publicKey is expected to be a string; otherwise a Buffer, TypedArray, or DataView is expected.\n\nThere is not normally a reason to call this method because ECDH only requires a private key and the other party's public key to compute the shared secret. Typically either ecdh.generateKeys() or ecdh.setPrivateKey() will be called. The ecdh.setPrivateKey() method attempts to generate the public point/key associated with the private key being set.\n\nExample (obtaining a shared secret):\n\nconst {\n  createECDH,\n  createHash,\n} = await import('node:crypto');\n\nconst alice", "doc_id": "fdda242e-c890-42e5-a799-8856f550fe96", "embedding": null, "doc_hash": "b8ba4772cfe532c4b759484854cbeaedd91c9309611417184c523a807a015635", "extra_info": null, "node_info": {"start": 787435, "end": 791114}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0c325a46-39ef-4be8-b8fa-fd2497bdcac2", "3": "60f03787-a46c-470b-b581-d3a7c1cb395d"}}, "__type__": "1"}, "60f03787-a46c-470b-b581-d3a7c1cb395d": {"__data__": {"text": "| <Buffer> | <TypedArray> | <DataView>\nencoding <string> The encoding of the publicKey string.\nSets the EC Diffie-Hellman public key. If encoding is provided publicKey is expected to be a string; otherwise a Buffer, TypedArray, or DataView is expected.\n\nThere is not normally a reason to call this method because ECDH only requires a private key and the other party's public key to compute the shared secret. Typically either ecdh.generateKeys() or ecdh.setPrivateKey() will be called. The ecdh.setPrivateKey() method attempts to generate the public point/key associated with the private key being set.\n\nExample (obtaining a shared secret):\n\nconst {\n  createECDH,\n  createHash,\n} = await import('node:crypto');\n\nconst alice = createECDH('secp256k1');\nconst bob = createECDH('secp256k1');\n\n// This is a shortcut way of specifying one of Alice's previous private\n// keys. It would be unwise to use such a predictable private key in a real\n// application.\nalice.setPrivateKey(\n  createHash('sha256').update('alice', 'utf8').digest(),\n);\n\n// Bob uses a newly generated cryptographically strong\n// pseudorandom key pair\nbob.generateKeys();\n\nconst aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');\nconst bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');\n\n// aliceSecret and bobSecret should be the same shared secret value\nconsole.log(aliceSecret === bobSecret);\nClass: Hash#\nAdded in: v0.1.92\nExtends: <stream.Transform>\nThe Hash class is a utility for creating hash digests of data. It can be used in one of two ways:\n\nAs a stream that is both readable and writable, where data is written to produce a computed hash digest on the readable side, or\nUsing the hash.update() and hash.digest() methods to produce the computed hash.\nThe crypto.createHash() method is used to create Hash instances. Hash objects are not to be created directly using the new keyword.\n\nExample: Using Hash objects as streams:\n\nconst {\n  createHash,\n} = await import('node:crypto');\n\nconst hash = createHash('sha256');\n\nhash.on('readable', () => {\n  // Only one element is going to be produced by the\n  // hash stream.\n  const data = hash.read();\n  if (data) {\n    console.log(data.toString('hex'));\n    // Prints:\n    //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n  }\n});\n\nhash.write('some data to hash');\nhash.end();\nExample: Using Hash and piped streams:\n\nimport { createReadStream } from 'node:fs';\nimport { stdout } from 'node:process';\nconst { createHash } = await import('node:crypto');\n\nconst hash = createHash('sha256');\n\nconst input = createReadStream('test.js');\ninput.pipe(hash).setEncoding('hex').pipe(stdout);\nExample: Using the hash.update() and hash.digest() methods:\n\nconst {\n  createHash,\n} = await import('node:crypto');\n\nconst hash = createHash('sha256');\n\nhash.update('some data to hash');\nconsole.log(hash.digest('hex'));\n// Prints:\n//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\nhash.copy([options])#\nAdded in: v13.1.0\noptions <Object> stream.transform options\nReturns: <Hash>\nCreates a new Hash object that contains a deep copy of the internal state of the current Hash object.\n\nThe optional options argument controls stream behavior. For XOF hash functions such as 'shake256', the outputLength option", "doc_id": "60f03787-a46c-470b-b581-d3a7c1cb395d", "embedding": null, "doc_hash": "3df0d1fe9fd7c4d5d1f9596b6a86bdd58f3ad21ee6b3bcf9c5a8432f4e961d15", "extra_info": null, "node_info": {"start": 791170, "end": 794446}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fdda242e-c890-42e5-a799-8856f550fe96", "3": "21a696ca-c469-421c-8e21-94cdfe54a8fa"}}, "__type__": "1"}, "21a696ca-c469-421c-8e21-94cdfe54a8fa": {"__data__": {"text": "hash.update() and hash.digest() methods:\n\nconst {\n  createHash,\n} = await import('node:crypto');\n\nconst hash = createHash('sha256');\n\nhash.update('some data to hash');\nconsole.log(hash.digest('hex'));\n// Prints:\n//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\nhash.copy([options])#\nAdded in: v13.1.0\noptions <Object> stream.transform options\nReturns: <Hash>\nCreates a new Hash object that contains a deep copy of the internal state of the current Hash object.\n\nThe optional options argument controls stream behavior. For XOF hash functions such as 'shake256', the outputLength option can be used to specify the desired output length in bytes.\n\nAn error is thrown when an attempt is made to copy the Hash object after its hash.digest() method has been called.\n\n// Calculate a rolling hash.\nconst {\n  createHash,\n} = await import('node:crypto');\n\nconst hash = createHash('sha256');\n\nhash.update('one');\nconsole.log(hash.copy().digest('hex'));\n\nhash.update('two');\nconsole.log(hash.copy().digest('hex'));\n\nhash.update('three');\nconsole.log(hash.copy().digest('hex'));\n\n// Etc.\nhash.digest([encoding])#\nAdded in: v0.1.92\nencoding <string> The encoding of the return value.\nReturns: <Buffer> | <string>\nCalculates the digest of all of the data passed to be hashed (using the hash.update() method). If encoding is provided a string will be returned; otherwise a Buffer is returned.\n\nThe Hash object can not be used again after hash.digest() method has been called. Multiple calls will cause an error to be thrown.\n\nhash.update(data[, inputEncoding])#\nHistory\ndata <string> | <Buffer> | <TypedArray> | <DataView>\ninputEncoding <string> The encoding of the data string.\nUpdates the hash content with the given data, the encoding of which is given in inputEncoding. If encoding is not provided, and the data is a string, an encoding of 'utf8' is enforced. If data is a Buffer, TypedArray, or DataView, then inputEncoding is ignored.\n\nThis can be called many times with new data as it is streamed.\n\nClass: Hmac#\nAdded in: v0.1.94\nExtends: <stream.Transform>\nThe Hmac class is a utility for creating cryptographic HMAC digests. It can be used in one of two ways:\n\nAs a stream that is both readable and writable, where data is written to produce a computed HMAC digest on the readable side, or\nUsing the hmac.update() and hmac.digest() methods to produce the computed HMAC digest.\nThe crypto.createHmac() method is used to create Hmac instances. Hmac objects are not to be created directly using the new keyword.\n\nExample: Using Hmac objects as streams:\n\nconst {\n  createHmac,\n} = await import('node:crypto');\n\nconst hmac = createHmac('sha256', 'a secret');\n\nhmac.on('readable', () => {\n  // Only one element is going to be produced by the\n  // hash stream.\n  const data = hmac.read();\n  if (data) {\n    console.log(data.toString('hex'));\n    // Prints:\n    //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n  }\n});\n\nhmac.write('some data to hash');\nhmac.end();\nExample: Using Hmac and piped streams:\n\nimport { createReadStream } from 'node:fs';\nimport { stdout } from 'node:process';\nconst {\n  createHmac,\n} = await", "doc_id": "21a696ca-c469-421c-8e21-94cdfe54a8fa", "embedding": null, "doc_hash": "ef3bcb2e7fe3645b9d9f5be5207deb25f36c421968ebb4cafe3a5c353986d8a5", "extra_info": null, "node_info": {"start": 794524, "end": 797670}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "60f03787-a46c-470b-b581-d3a7c1cb395d", "3": "01d3a7a0-0397-4e11-b67a-b12f96e67cf3"}}, "__type__": "1"}, "01d3a7a0-0397-4e11-b67a-b12f96e67cf3": {"__data__": {"text": "'a secret');\n\nhmac.on('readable', () => {\n  // Only one element is going to be produced by the\n  // hash stream.\n  const data = hmac.read();\n  if (data) {\n    console.log(data.toString('hex'));\n    // Prints:\n    //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n  }\n});\n\nhmac.write('some data to hash');\nhmac.end();\nExample: Using Hmac and piped streams:\n\nimport { createReadStream } from 'node:fs';\nimport { stdout } from 'node:process';\nconst {\n  createHmac,\n} = await import('node:crypto');\n\nconst hmac = createHmac('sha256', 'a secret');\n\nconst input = createReadStream('test.js');\ninput.pipe(hmac).pipe(stdout);\nExample: Using the hmac.update() and hmac.digest() methods:\n\nconst {\n  createHmac,\n} = await import('node:crypto');\n\nconst hmac = createHmac('sha256', 'a secret');\n\nhmac.update('some data to hash');\nconsole.log(hmac.digest('hex'));\n// Prints:\n//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\nhmac.digest([encoding])#\nAdded in: v0.1.94\nencoding <string> The encoding of the return value.\nReturns: <Buffer> | <string>\nCalculates the HMAC digest of all of the data passed using hmac.update(). If encoding is provided a string is returned; otherwise a Buffer is returned;\n\nThe Hmac object can not be used again after hmac.digest() has been called. Multiple calls to hmac.digest() will result in an error being thrown.\n\nhmac.update(data[, inputEncoding])#\nHistory\ndata <string> | <Buffer> | <TypedArray> | <DataView>\ninputEncoding <string> The encoding of the data string.\nUpdates the Hmac content with the given data, the encoding of which is given in inputEncoding. If encoding is not provided, and the data is a string, an encoding of 'utf8' is enforced. If data is a Buffer, TypedArray, or DataView, then inputEncoding is ignored.\n\nThis can be called many times with new data as it is streamed.\n\nClass: KeyObject#\nHistory\nNode.js uses a KeyObject class to represent a symmetric or asymmetric key, and each kind of key exposes different functions. The crypto.createSecretKey(), crypto.createPublicKey() and crypto.createPrivateKey() methods are used to create KeyObject instances. KeyObject objects are not to be created directly using the new keyword.\n\nMost applications should consider using the new KeyObject API instead of passing keys as strings or Buffers due to improved security features.\n\nKeyObject instances can be passed to other threads via postMessage(). The receiver obtains a cloned KeyObject, and the KeyObject does not need to be listed in the transferList argument.\n\nStatic method: KeyObject.from(key)#\nAdded in: v15.0.0\nkey <CryptoKey>\nReturns: <KeyObject>\nExample: Converting a CryptoKey instance to a KeyObject:\n\nconst { webcrypto, KeyObject } = await import('node:crypto');\nconst { subtle } = webcrypto;\n\nconst key = await subtle.generateKey({\n  name: 'HMAC',\n  hash: 'SHA-256',\n  length: 256,\n}, true, ['sign', 'verify']);\n\nconst keyObject = KeyObject.from(key);\nconsole.log(keyObject.symmetricKeySize);\n// Prints: 32 (symmetric key size in bytes)\nkeyObject.asymmetricKeyDetails#\nHistory\n<Object>\nmodulusLength: <number> Key size in bits (RSA,", "doc_id": "01d3a7a0-0397-4e11-b67a-b12f96e67cf3", "embedding": null, "doc_hash": "9f4509d6852a937e3e9568cdaacd07140e3b9bb164eb8565fce4eb30d3e77bd0", "extra_info": null, "node_info": {"start": 797796, "end": 800919}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "21a696ca-c469-421c-8e21-94cdfe54a8fa", "3": "c2ff7abd-3c8e-4461-9fc0-b4c644f57ff0"}}, "__type__": "1"}, "c2ff7abd-3c8e-4461-9fc0-b4c644f57ff0": {"__data__": {"text": "in: v15.0.0\nkey <CryptoKey>\nReturns: <KeyObject>\nExample: Converting a CryptoKey instance to a KeyObject:\n\nconst { webcrypto, KeyObject } = await import('node:crypto');\nconst { subtle } = webcrypto;\n\nconst key = await subtle.generateKey({\n  name: 'HMAC',\n  hash: 'SHA-256',\n  length: 256,\n}, true, ['sign', 'verify']);\n\nconst keyObject = KeyObject.from(key);\nconsole.log(keyObject.symmetricKeySize);\n// Prints: 32 (symmetric key size in bytes)\nkeyObject.asymmetricKeyDetails#\nHistory\n<Object>\nmodulusLength: <number> Key size in bits (RSA, DSA).\npublicExponent: <bigint> Public exponent (RSA).\nhashAlgorithm: <string> Name of the message digest (RSA-PSS).\nmgf1HashAlgorithm: <string> Name of the message digest used by MGF1 (RSA-PSS).\nsaltLength: <number> Minimal salt length in bytes (RSA-PSS).\ndivisorLength: <number> Size of q in bits (DSA).\nnamedCurve: <string> Name of the curve (EC).\nThis property exists only on asymmetric keys. Depending on the type of the key, this object contains information about the key. None of the information obtained through this property can be used to uniquely identify a key or to compromise the security of the key.\n\nFor RSA-PSS keys, if the key material contains a RSASSA-PSS-params sequence, the hashAlgorithm, mgf1HashAlgorithm, and saltLength properties will be set.\n\nOther key details might be exposed via this API using additional attributes.\n\nkeyObject.asymmetricKeyType#\nHistory\n<string>\nFor asymmetric keys, this property represents the type of the key. Supported key types are:\n\n'rsa' (OID 1.2.840.113549.1.1.1)\n'rsa-pss' (OID 1.2.840.113549.1.1.10)\n'dsa' (OID 1.2.840.10040.4.1)\n'ec' (OID 1.2.840.10045.2.1)\n'x25519' (OID 1.3.101.110)\n'x448' (OID 1.3.101.111)\n'ed25519' (OID 1.3.101.112)\n'ed448' (OID 1.3.101.113)\n'dh' (OID 1.2.840.113549.1.3.1)\nThis property is undefined for unrecognized KeyObject types and symmetric keys.\n\nkeyObject.export([options])#\nHistory\noptions: <Object>\nReturns: <string> | <Buffer> | <Object>\nFor symmetric keys, the following encoding options can be used:\n\nformat: <string> Must be 'buffer' (default) or 'jwk'.\nFor public keys, the following encoding options can be used:\n\ntype: <string> Must be one of 'pkcs1' (RSA only) or 'spki'.\nformat: <string> Must be 'pem', 'der', or 'jwk'.\nFor private keys, the following encoding options can be used:\n\ntype: <string> Must be one of 'pkcs1' (RSA only), 'pkcs8' or 'sec1' (EC only).\nformat: <string> Must be 'pem', 'der', or 'jwk'.\ncipher: <string> If specified, the private key will be encrypted with the given cipher and passphrase using PKCS#5 v2.0 password based encryption.\npassphrase: <string> | <Buffer> The passphrase to use for encryption, see cipher.\nThe result type depends on the selected encoding format, when PEM the result is a string, when DER it will be a buffer containing the data encoded as DER, when JWK it will be an object.\n\nWhen JWK encoding format was selected, all other encoding options are ignored.\n\nPKCS#1, SEC1,", "doc_id": "c2ff7abd-3c8e-4461-9fc0-b4c644f57ff0", "embedding": null, "doc_hash": "33714128b7247e0b9a03d84bc988da0f9c97df448ec4b26ab0835076cc53c1f0", "extra_info": null, "node_info": {"start": 800856, "end": 803817}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "01d3a7a0-0397-4e11-b67a-b12f96e67cf3", "3": "41fe4dd6-aee2-423f-b766-73418c1a52a3"}}, "__type__": "1"}, "41fe4dd6-aee2-423f-b766-73418c1a52a3": {"__data__": {"text": "be used:\n\ntype: <string> Must be one of 'pkcs1' (RSA only), 'pkcs8' or 'sec1' (EC only).\nformat: <string> Must be 'pem', 'der', or 'jwk'.\ncipher: <string> If specified, the private key will be encrypted with the given cipher and passphrase using PKCS#5 v2.0 password based encryption.\npassphrase: <string> | <Buffer> The passphrase to use for encryption, see cipher.\nThe result type depends on the selected encoding format, when PEM the result is a string, when DER it will be a buffer containing the data encoded as DER, when JWK it will be an object.\n\nWhen JWK encoding format was selected, all other encoding options are ignored.\n\nPKCS#1, SEC1, and PKCS#8 type keys can be encrypted by using a combination of the cipher and format options. The PKCS#8 type can be used with any format to encrypt any key algorithm (RSA, EC, or DH) by specifying a cipher. PKCS#1 and SEC1 can only be encrypted by specifying a cipher when the PEM format is used. For maximum compatibility, use PKCS#8 for encrypted private keys. Since PKCS#8 defines its own encryption mechanism, PEM-level encryption is not supported when encrypting a PKCS#8 key. See RFC 5208 for PKCS#8 encryption and RFC 1421 for PKCS#1 and SEC1 encryption.\n\nkeyObject.equals(otherKeyObject)#\nAdded in: v17.7.0\notherKeyObject: <KeyObject> A KeyObject with which to compare keyObject.\nReturns: <boolean>\nReturns true or false depending on whether the keys have exactly the same type, value, and parameters. This method is not constant time.\n\nkeyObject.symmetricKeySize#\nAdded in: v11.6.0\n<number>\nFor secret keys, this property represents the size of the key in bytes. This property is undefined for asymmetric keys.\n\nkeyObject.type#\nAdded in: v11.6.0\n<string>\nDepending on the type of this KeyObject, this property is either 'secret' for secret (symmetric) keys, 'public' for public (asymmetric) keys or 'private' for private (asymmetric) keys.\n\nClass: Sign#\nAdded in: v0.1.92\nExtends: <stream.Writable>\nThe Sign class is a utility for generating signatures. It can be used in one of two ways:\n\nAs a writable stream, where data to be signed is written and the sign.sign() method is used to generate and return the signature, or\nUsing the sign.update() and sign.sign() methods to produce the signature.\nThe crypto.createSign() method is used to create Sign instances. The argument is the string name of the hash function to use. Sign objects are not to be created directly using the new keyword.\n\nExample: Using Sign and Verify objects as streams:\n\nconst {\n  generateKeyPairSync,\n  createSign,\n  createVerify,\n} = await import('node:crypto');\n\nconst { privateKey, publicKey } = generateKeyPairSync('ec', {\n  namedCurve: 'sect239k1',\n});\n\nconst sign = createSign('SHA256');\nsign.write('some data to sign');\nsign.end();\nconst signature = sign.sign(privateKey, 'hex');\n\nconst verify = createVerify('SHA256');\nverify.write('some data to sign');\nverify.end();\nconsole.log(verify.verify(publicKey, signature, 'hex'));\n// Prints: true\nExample: Using the sign.update() and verify.update() methods:\n\nconst {\n  generateKeyPairSync,\n  createSign,\n  createVerify,\n} = await import('node:crypto');\n\nconst { privateKey, publicKey } = generateKeyPairSync('rsa', {\n  modulusLength: 2048,\n});\n\nconst sign = createSign('SHA256');\nsign.update('some data to sign');\nsign.end();\nconst signature =", "doc_id": "41fe4dd6-aee2-423f-b766-73418c1a52a3", "embedding": null, "doc_hash": "add94e950ecf5866b3b78f094851d451c90b50f626e178dce0c6752942ca481a", "extra_info": null, "node_info": {"start": 803756, "end": 807084}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c2ff7abd-3c8e-4461-9fc0-b4c644f57ff0", "3": "dba49b44-a7b4-442a-ac9a-26d2647d0db7"}}, "__type__": "1"}, "dba49b44-a7b4-442a-ac9a-26d2647d0db7": {"__data__": {"text": "data to sign');\nsign.end();\nconst signature = sign.sign(privateKey, 'hex');\n\nconst verify = createVerify('SHA256');\nverify.write('some data to sign');\nverify.end();\nconsole.log(verify.verify(publicKey, signature, 'hex'));\n// Prints: true\nExample: Using the sign.update() and verify.update() methods:\n\nconst {\n  generateKeyPairSync,\n  createSign,\n  createVerify,\n} = await import('node:crypto');\n\nconst { privateKey, publicKey } = generateKeyPairSync('rsa', {\n  modulusLength: 2048,\n});\n\nconst sign = createSign('SHA256');\nsign.update('some data to sign');\nsign.end();\nconst signature = sign.sign(privateKey);\n\nconst verify = createVerify('SHA256');\nverify.update('some data to sign');\nverify.end();\nconsole.log(verify.verify(publicKey, signature));\n// Prints: true\nsign.sign(privateKey[, outputEncoding])#\nHistory\nprivateKey <Object> | <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey>\ndsaEncoding <string>\npadding <integer>\nsaltLength <integer>\noutputEncoding <string> The encoding of the return value.\nReturns: <Buffer> | <string>\nCalculates the signature on all the data passed through using either sign.update() or sign.write().\n\nIf privateKey is not a KeyObject, this function behaves as if privateKey had been passed to crypto.createPrivateKey(). If it is an object, the following additional properties can be passed:\n\ndsaEncoding <string> For DSA and ECDSA, this option specifies the format of the generated signature. It can be one of the following:\n\n'der' (default): DER-encoded ASN.1 signature structure encoding (r, s).\n'ieee-p1363': Signature format r || s as proposed in IEEE-P1363.\npadding <integer> Optional padding value for RSA, one of the following:\n\ncrypto.constants.RSA_PKCS1_PADDING (default)\ncrypto.constants.RSA_PKCS1_PSS_PADDING\nRSA_PKCS1_PSS_PADDING will use MGF1 with the same hash function used to sign the message as specified in section 3.1 of RFC 4055, unless an MGF1 hash function has been specified as part of the key in compliance with section 3.3 of RFC 4055.\n\nsaltLength <integer> Salt length for when padding is RSA_PKCS1_PSS_PADDING. The special value crypto.constants.RSA_PSS_SALTLEN_DIGEST sets the salt length to the digest size, crypto.constants.RSA_PSS_SALTLEN_MAX_SIGN (default) sets it to the maximum permissible value.\n\nIf outputEncoding is provided a string is returned; otherwise a Buffer is returned.\n\nThe Sign object can not be again used after sign.sign() method has been called. Multiple calls to sign.sign() will result in an error being thrown.\n\nsign.update(data[, inputEncoding])#\nHistory\ndata <string> | <Buffer> | <TypedArray> | <DataView>\ninputEncoding <string> The encoding of the data string.\nUpdates the Sign content with the given data, the encoding of which is given in inputEncoding. If encoding is not provided, and the data is a string, an encoding of 'utf8' is enforced. If data is a Buffer, TypedArray, or DataView, then inputEncoding is ignored.\n\nThis can be called many times with new data as it is streamed.\n\nClass: Verify#\nAdded in: v0.1.92\nExtends: <stream.Writable>\nThe Verify class is a utility for verifying signatures. It can be used in one of two ways:\n\nAs a writable stream where written data is used to validate against the supplied signature, or\nUsing the", "doc_id": "dba49b44-a7b4-442a-ac9a-26d2647d0db7", "embedding": null, "doc_hash": "adbacb5042f3a58a01028d478093fdf81af3e91d1fb0f9849561f215f78154ec", "extra_info": null, "node_info": {"start": 807097, "end": 810374}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "41fe4dd6-aee2-423f-b766-73418c1a52a3", "3": "8aa59587-f8f9-4ca8-994d-69c4269d182f"}}, "__type__": "1"}, "8aa59587-f8f9-4ca8-994d-69c4269d182f": {"__data__": {"text": "<string> | <Buffer> | <TypedArray> | <DataView>\ninputEncoding <string> The encoding of the data string.\nUpdates the Sign content with the given data, the encoding of which is given in inputEncoding. If encoding is not provided, and the data is a string, an encoding of 'utf8' is enforced. If data is a Buffer, TypedArray, or DataView, then inputEncoding is ignored.\n\nThis can be called many times with new data as it is streamed.\n\nClass: Verify#\nAdded in: v0.1.92\nExtends: <stream.Writable>\nThe Verify class is a utility for verifying signatures. It can be used in one of two ways:\n\nAs a writable stream where written data is used to validate against the supplied signature, or\nUsing the verify.update() and verify.verify() methods to verify the signature.\nThe crypto.createVerify() method is used to create Verify instances. Verify objects are not to be created directly using the new keyword.\n\nSee Sign for examples.\n\nverify.update(data[, inputEncoding])#\nHistory\ndata <string> | <Buffer> | <TypedArray> | <DataView>\ninputEncoding <string> The encoding of the data string.\nUpdates the Verify content with the given data, the encoding of which is given in inputEncoding. If inputEncoding is not provided, and the data is a string, an encoding of 'utf8' is enforced. If data is a Buffer, TypedArray, or DataView, then inputEncoding is ignored.\n\nThis can be called many times with new data as it is streamed.\n\nverify.verify(object, signature[, signatureEncoding])#\nHistory\nobject <Object> | <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey>\ndsaEncoding <string>\npadding <integer>\nsaltLength <integer>\nsignature <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nsignatureEncoding <string> The encoding of the signature string.\nReturns: <boolean> true or false depending on the validity of the signature for the data and public key.\nVerifies the provided data using the given object and signature.\n\nIf object is not a KeyObject, this function behaves as if object had been passed to crypto.createPublicKey(). If it is an object, the following additional properties can be passed:\n\ndsaEncoding <string> For DSA and ECDSA, this option specifies the format of the signature. It can be one of the following:\n\n'der' (default): DER-encoded ASN.1 signature structure encoding (r, s).\n'ieee-p1363': Signature format r || s as proposed in IEEE-P1363.\npadding <integer> Optional padding value for RSA, one of the following:\n\ncrypto.constants.RSA_PKCS1_PADDING (default)\ncrypto.constants.RSA_PKCS1_PSS_PADDING\nRSA_PKCS1_PSS_PADDING will use MGF1 with the same hash function used to verify the message as specified in section 3.1 of RFC 4055, unless an MGF1 hash function has been specified as part of the key in compliance with section 3.3 of RFC 4055.\n\nsaltLength <integer> Salt length for when padding is RSA_PKCS1_PSS_PADDING. The special value crypto.constants.RSA_PSS_SALTLEN_DIGEST sets the salt length to the digest size, crypto.constants.RSA_PSS_SALTLEN_AUTO (default) causes it to be determined automatically.\n\nThe signature argument is the previously calculated signature for the data, in the signatureEncoding. If a signatureEncoding is specified, the signature is expected to be a string; otherwise signature is expected to be a Buffer, TypedArray, or DataView.\n\nThe verify object can not be used again after verify.verify() has been called. Multiple calls to verify.verify() will", "doc_id": "8aa59587-f8f9-4ca8-994d-69c4269d182f", "embedding": null, "doc_hash": "9f4d50f627bfd99af6c4845485f32842a5c0d8f955c623aec908d1ad26f399a5", "extra_info": null, "node_info": {"start": 810329, "end": 813763}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dba49b44-a7b4-442a-ac9a-26d2647d0db7", "3": "3e0d3e6b-2ff8-45b2-a962-1dc28b626b41"}}, "__type__": "1"}, "3e0d3e6b-2ff8-45b2-a962-1dc28b626b41": {"__data__": {"text": "section 3.3 of RFC 4055.\n\nsaltLength <integer> Salt length for when padding is RSA_PKCS1_PSS_PADDING. The special value crypto.constants.RSA_PSS_SALTLEN_DIGEST sets the salt length to the digest size, crypto.constants.RSA_PSS_SALTLEN_AUTO (default) causes it to be determined automatically.\n\nThe signature argument is the previously calculated signature for the data, in the signatureEncoding. If a signatureEncoding is specified, the signature is expected to be a string; otherwise signature is expected to be a Buffer, TypedArray, or DataView.\n\nThe verify object can not be used again after verify.verify() has been called. Multiple calls to verify.verify() will result in an error being thrown.\n\nBecause public keys can be derived from private keys, a private key may be passed instead of a public key.\n\nClass: X509Certificate#\nAdded in: v15.6.0\nEncapsulates an X509 certificate and provides read-only access to its information.\n\nconst { X509Certificate } = await import('node:crypto');\n\nconst x509 = new X509Certificate('{... pem encoded cert ...}');\n\nconsole.log(x509.subject);\nnew X509Certificate(buffer)#\nAdded in: v15.6.0\nbuffer <string> | <TypedArray> | <Buffer> | <DataView> A PEM or DER encoded X509 Certificate.\nx509.ca#\nAdded in: v15.6.0\nType: <boolean> Will be true if this is a Certificate Authority (CA) certificate.\nx509.checkEmail(email[, options])#\nHistory\nemail <string>\noptions <Object>\nsubject <string> 'default', 'always', or 'never'. Default: 'default'.\nReturns: <string> | <undefined> Returns email if the certificate matches, undefined if it does not.\nChecks whether the certificate matches the given email address.\n\nIf the 'subject' option is undefined or set to 'default', the certificate subject is only considered if the subject alternative name extension either does not exist or does not contain any email addresses.\n\nIf the 'subject' option is set to 'always' and if the subject alternative name extension either does not exist or does not contain a matching email address, the certificate subject is considered.\n\nIf the 'subject' option is set to 'never', the certificate subject is never considered, even if the certificate contains no subject alternative names.\n\nx509.checkHost(name[, options])#\nHistory\nname <string>\noptions <Object>\nsubject <string> 'default', 'always', or 'never'. Default: 'default'.\nwildcards <boolean> Default: true.\npartialWildcards <boolean> Default: true.\nmultiLabelWildcards <boolean> Default: false.\nsingleLabelSubdomains <boolean> Default: false.\nReturns: <string> | <undefined> Returns a subject name that matches name, or undefined if no subject name matches name.\nChecks whether the certificate matches the given host name.\n\nIf the certificate matches the given host name, the matching subject name is returned. The returned name might be an exact match (e.g., foo.example.com) or it might contain wildcards (e.g., *.example.com). Because host name comparisons are case-insensitive, the returned subject name might also differ from the given name in capitalization.\n\nIf the 'subject' option is undefined or set to 'default', the certificate subject is only considered if the subject alternative name extension either does not exist or does not contain any DNS names. This behavior is consistent with RFC 2818 (\"HTTP Over TLS\").\n\nIf the 'subject' option is set to 'always' and if the subject alternative name extension either does not exist or does not contain a matching DNS name, the certificate subject is considered.\n\nIf the 'subject' option is set to 'never', the certificate subject is never considered, even if the certificate contains no subject alternative", "doc_id": "3e0d3e6b-2ff8-45b2-a962-1dc28b626b41", "embedding": null, "doc_hash": "2853926c8c9f38cf934bc6fe8b0193bb543221440448a829fc5f15727d5c6983", "extra_info": null, "node_info": {"start": 813767, "end": 817399}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8aa59587-f8f9-4ca8-994d-69c4269d182f", "3": "ac670d2f-c041-422a-bd1b-9801efe09ded"}}, "__type__": "1"}, "ac670d2f-c041-422a-bd1b-9801efe09ded": {"__data__": {"text": "foo.example.com) or it might contain wildcards (e.g., *.example.com). Because host name comparisons are case-insensitive, the returned subject name might also differ from the given name in capitalization.\n\nIf the 'subject' option is undefined or set to 'default', the certificate subject is only considered if the subject alternative name extension either does not exist or does not contain any DNS names. This behavior is consistent with RFC 2818 (\"HTTP Over TLS\").\n\nIf the 'subject' option is set to 'always' and if the subject alternative name extension either does not exist or does not contain a matching DNS name, the certificate subject is considered.\n\nIf the 'subject' option is set to 'never', the certificate subject is never considered, even if the certificate contains no subject alternative names.\n\nx509.checkIP(ip)#\nHistory\nip <string>\nReturns: <string> | <undefined> Returns ip if the certificate matches, undefined if it does not.\nChecks whether the certificate matches the given IP address (IPv4 or IPv6).\n\nOnly RFC 5280 iPAddress subject alternative names are considered, and they must match the given ip address exactly. Other subject alternative names as well as the subject field of the certificate are ignored.\n\nx509.checkIssued(otherCert)#\nAdded in: v15.6.0\notherCert <X509Certificate>\nReturns: <boolean>\nChecks whether this certificate was issued by the given otherCert.\n\nx509.checkPrivateKey(privateKey)#\nAdded in: v15.6.0\nprivateKey <KeyObject> A private key.\nReturns: <boolean>\nChecks whether the public key for this certificate is consistent with the given private key.\n\nx509.fingerprint#\nAdded in: v15.6.0\nType: <string>\nThe SHA-1 fingerprint of this certificate.\n\nBecause SHA-1 is cryptographically broken and because the security of SHA-1 is significantly worse than that of algorithms that are commonly used to sign certificates, consider using x509.fingerprint256 instead.\n\nx509.fingerprint256#\nAdded in: v15.6.0\nType: <string>\nThe SHA-256 fingerprint of this certificate.\n\nx509.fingerprint512#\nAdded in: v17.2.0, v16.14.0\nType: <string>\nThe SHA-512 fingerprint of this certificate.\n\nBecause computing the SHA-256 fingerprint is usually faster and because it is only half the size of the SHA-512 fingerprint, x509.fingerprint256 may be a better choice. While SHA-512 presumably provides a higher level of security in general, the security of SHA-256 matches that of most algorithms that are commonly used to sign certificates.\n\nx509.infoAccess#\nHistory\nType: <string>\nA textual representation of the certificate's authority information access extension.\n\nThis is a line feed separated list of access descriptions. Each line begins with the access method and the kind of the access location, followed by a colon and the value associated with the access location.\n\nAfter the prefix denoting the access method and the kind of the access location, the remainder of each line might be enclosed in quotes to indicate that the value is a JSON string literal. For backward compatibility, Node.js only uses JSON string literals within this property when necessary to avoid ambiguity. Third-party code should be prepared to handle both possible entry formats.\n\nx509.issuer#\nAdded in: v15.6.0\nType: <string>\nThe issuer identification included in this certificate.\n\nx509.issuerCertificate#\nAdded in: v15.9.0\nType: <X509Certificate>\nThe issuer certificate or undefined if the issuer certificate is not available.\n\nx509.keyUsage#\nAdded in: v15.6.0\nType: <string[]>\nAn array detailing the key usages for this certificate.\n\nx509.publicKey#\nAdded in: v15.6.0\nType: <KeyObject>\nThe public key <KeyObject> for this certificate.\n\nx509.raw#\nAdded in:", "doc_id": "ac670d2f-c041-422a-bd1b-9801efe09ded", "embedding": null, "doc_hash": "eabf355ca18dbf9e51f9f1b5703dee69f03c39399fe1d056d003e23a80f96f02", "extra_info": null, "node_info": {"start": 817295, "end": 820957}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3e0d3e6b-2ff8-45b2-a962-1dc28b626b41", "3": "fa612658-1ca2-4c59-afc0-a76745b2e4ab"}}, "__type__": "1"}, "fa612658-1ca2-4c59-afc0-a76745b2e4ab": {"__data__": {"text": "this property when necessary to avoid ambiguity. Third-party code should be prepared to handle both possible entry formats.\n\nx509.issuer#\nAdded in: v15.6.0\nType: <string>\nThe issuer identification included in this certificate.\n\nx509.issuerCertificate#\nAdded in: v15.9.0\nType: <X509Certificate>\nThe issuer certificate or undefined if the issuer certificate is not available.\n\nx509.keyUsage#\nAdded in: v15.6.0\nType: <string[]>\nAn array detailing the key usages for this certificate.\n\nx509.publicKey#\nAdded in: v15.6.0\nType: <KeyObject>\nThe public key <KeyObject> for this certificate.\n\nx509.raw#\nAdded in: v15.6.0\nType: <Buffer>\nA Buffer containing the DER encoding of this certificate.\n\nx509.serialNumber#\nAdded in: v15.6.0\nType: <string>\nThe serial number of this certificate.\n\nSerial numbers are assigned by certificate authorities and do not uniquely identify certificates. Consider using x509.fingerprint256 as a unique identifier instead.\n\nx509.subject#\nAdded in: v15.6.0\nType: <string>\nThe complete subject of this certificate.\n\nx509.subjectAltName#\nHistory\nType: <string>\nThe subject alternative name specified for this certificate.\n\nThis is a comma-separated list of subject alternative names. Each entry begins with a string identifying the kind of the subject alternative name followed by a colon and the value associated with the entry.\n\nEarlier versions of Node.js incorrectly assumed that it is safe to split this property at the two-character sequence ', ' (see CVE-2021-44532). However, both malicious and legitimate certificates can contain subject alternative names that include this sequence when represented as a string.\n\nAfter the prefix denoting the type of the entry, the remainder of each entry might be enclosed in quotes to indicate that the value is a JSON string literal. For backward compatibility, Node.js only uses JSON string literals within this property when necessary to avoid ambiguity. Third-party code should be prepared to handle both possible entry formats.\n\nx509.toJSON()#\nAdded in: v15.6.0\nType: <string>\nThere is no standard JSON encoding for X509 certificates. The toJSON() method returns a string containing the PEM encoded certificate.\n\nx509.toLegacyObject()#\nAdded in: v15.6.0\nType: <Object>\nReturns information about this certificate using the legacy certificate object encoding.\n\nx509.toString()#\nAdded in: v15.6.0\nType: <string>\nReturns the PEM-encoded certificate.\n\nx509.validFrom#\nAdded in: v15.6.0\nType: <string>\nThe date/time from which this certificate is considered valid.\n\nx509.validTo#\nAdded in: v15.6.0\nType: <string>\nThe date/time until which this certificate is considered valid.\n\nx509.verify(publicKey)#\nAdded in: v15.6.0\npublicKey <KeyObject> A public key.\nReturns: <boolean>\nVerifies that this certificate was signed by the given public key. Does not perform any other validation checks on the certificate.\n\nnode:crypto module methods and properties#\ncrypto.constants#\nAdded in: v6.3.0\n<Object>\nAn object containing commonly used constants for crypto and security related operations. The specific constants currently defined are described in Crypto constants.\n\ncrypto.DEFAULT_ENCODING#\nAdded in: v0.9.3Deprecated since: v10.0.0\nStability: 0 - Deprecated\nThe default encoding to use for functions that can take either strings or buffers. The default value is 'buffer', which makes methods default to Buffer objects.\n\nThe crypto.DEFAULT_ENCODING mechanism is provided for backward compatibility with legacy programs that expect 'latin1' to be the default", "doc_id": "fa612658-1ca2-4c59-afc0-a76745b2e4ab", "embedding": null, "doc_hash": "28bcc4d05c770c29cbb815d65c2c150cba6346fea25432bd452f8b0ce4cdc5d4", "extra_info": null, "node_info": {"start": 821099, "end": 824613}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ac670d2f-c041-422a-bd1b-9801efe09ded", "3": "f04a6beb-9470-4016-8cca-a072e3a64056"}}, "__type__": "1"}, "f04a6beb-9470-4016-8cca-a072e3a64056": {"__data__": {"text": "signed by the given public key. Does not perform any other validation checks on the certificate.\n\nnode:crypto module methods and properties#\ncrypto.constants#\nAdded in: v6.3.0\n<Object>\nAn object containing commonly used constants for crypto and security related operations. The specific constants currently defined are described in Crypto constants.\n\ncrypto.DEFAULT_ENCODING#\nAdded in: v0.9.3Deprecated since: v10.0.0\nStability: 0 - Deprecated\nThe default encoding to use for functions that can take either strings or buffers. The default value is 'buffer', which makes methods default to Buffer objects.\n\nThe crypto.DEFAULT_ENCODING mechanism is provided for backward compatibility with legacy programs that expect 'latin1' to be the default encoding.\n\nNew applications should expect the default to be 'buffer'.\n\nThis property is deprecated.\n\ncrypto.fips#\nAdded in: v6.0.0Deprecated since: v10.0.0\nStability: 0 - Deprecated\nProperty for checking and controlling whether a FIPS compliant crypto provider is currently in use. Setting to true requires a FIPS build of Node.js.\n\nThis property is deprecated. Please use crypto.setFips() and crypto.getFips() instead.\n\ncrypto.checkPrime(candidate[, options], callback)#\nHistory\ncandidate <ArrayBuffer> | <SharedArrayBuffer> | <TypedArray> | <Buffer> | <DataView> | <bigint> A possible prime encoded as a sequence of big endian octets of arbitrary length.\noptions <Object>\nchecks <number> The number of Miller-Rabin probabilistic primality iterations to perform. When the value is 0 (zero), a number of checks is used that yields a false positive rate of at most 2-64 for random input. Care must be used when selecting a number of checks. Refer to the OpenSSL documentation for the BN_is_prime_ex function nchecks options for more details. Default: 0\ncallback <Function>\nerr <Error> Set to an <Error> object if an error occurred during check.\nresult <boolean> true if the candidate is a prime with an error probability less than 0.25 ** options.checks.\nChecks the primality of the candidate.\n\ncrypto.checkPrimeSync(candidate[, options])#\nAdded in: v15.8.0\ncandidate <ArrayBuffer> | <SharedArrayBuffer> | <TypedArray> | <Buffer> | <DataView> | <bigint> A possible prime encoded as a sequence of big endian octets of arbitrary length.\noptions <Object>\nchecks <number> The number of Miller-Rabin probabilistic primality iterations to perform. When the value is 0 (zero), a number of checks is used that yields a false positive rate of at most 2-64 for random input. Care must be used when selecting a number of checks. Refer to the OpenSSL documentation for the BN_is_prime_ex function nchecks options for more details. Default: 0\nReturns: <boolean> true if the candidate is a prime with an error probability less than 0.25 ** options.checks.\nChecks the primality of the candidate.\n\ncrypto.createCipher(algorithm, password[, options])#\nHistory\nStability: 0 - Deprecated: Use crypto.createCipheriv() instead.\nalgorithm <string>\npassword <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\noptions <Object> stream.transform options\nReturns: <Cipher>\nCreates and returns a Cipher object that uses the given algorithm and password.\n\nThe options argument controls stream behavior and is optional except when a cipher in CCM or OCB mode (e.g. 'aes-128-ccm') is used. In that case, the authTagLength option is required and specifies the length of the authentication tag in bytes, see CCM mode. In GCM mode, the authTagLength option is not required but can be used to set the length of the authentication tag that will be returned by getAuthTag() and defaults to 16 bytes. For chacha20-poly1305, the authTagLength option defaults to", "doc_id": "f04a6beb-9470-4016-8cca-a072e3a64056", "embedding": null, "doc_hash": "b0f9f527ea1bb2e00dae54c7fc967fdeca80fb6a69ed6d107b3ff585420b4a49", "extra_info": null, "node_info": {"start": 824505, "end": 828182}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fa612658-1ca2-4c59-afc0-a76745b2e4ab", "3": "a30587c5-1ef0-452f-9164-600419d966e5"}}, "__type__": "1"}, "a30587c5-1ef0-452f-9164-600419d966e5": {"__data__": {"text": "instead.\nalgorithm <string>\npassword <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\noptions <Object> stream.transform options\nReturns: <Cipher>\nCreates and returns a Cipher object that uses the given algorithm and password.\n\nThe options argument controls stream behavior and is optional except when a cipher in CCM or OCB mode (e.g. 'aes-128-ccm') is used. In that case, the authTagLength option is required and specifies the length of the authentication tag in bytes, see CCM mode. In GCM mode, the authTagLength option is not required but can be used to set the length of the authentication tag that will be returned by getAuthTag() and defaults to 16 bytes. For chacha20-poly1305, the authTagLength option defaults to 16 bytes.\n\nThe algorithm is dependent on OpenSSL, examples are 'aes192', etc. On recent OpenSSL releases, openssl list -cipher-algorithms will display the available cipher algorithms.\n\nThe password is used to derive the cipher key and initialization vector (IV). The value must be either a 'latin1' encoded string, a Buffer, a TypedArray, or a DataView.\n\nThis function is semantically insecure for all supported ciphers and fatally flawed for ciphers in counter mode (such as CTR, GCM, or CCM).\n\nThe implementation of crypto.createCipher() derives keys using the OpenSSL function EVP_BytesToKey with the digest algorithm set to MD5, one iteration, and no salt. The lack of salt allows dictionary attacks as the same password always creates the same key. The low iteration count and non-cryptographically secure hash algorithm allow passwords to be tested very rapidly.\n\nIn line with OpenSSL's recommendation to use a more modern algorithm instead of EVP_BytesToKey it is recommended that developers derive a key and IV on their own using crypto.scrypt() and to use crypto.createCipheriv() to create the Cipher object. Users should not use ciphers with counter mode (e.g. CTR, GCM, or CCM) in crypto.createCipher(). A warning is emitted when they are used in order to avoid the risk of IV reuse that causes vulnerabilities. For the case when IV is reused in GCM, see Nonce-Disrespecting Adversaries for details.\n\ncrypto.createCipheriv(algorithm, key, iv[, options])#\nHistory\nalgorithm <string>\nkey <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey>\niv <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <null>\noptions <Object> stream.transform options\nReturns: <Cipher>\nCreates and returns a Cipher object, with the given algorithm, key and initialization vector (iv).\n\nThe options argument controls stream behavior and is optional except when a cipher in CCM or OCB mode (e.g. 'aes-128-ccm') is used. In that case, the authTagLength option is required and specifies the length of the authentication tag in bytes, see CCM mode. In GCM mode, the authTagLength option is not required but can be used to set the length of the authentication tag that will be returned by getAuthTag() and defaults to 16 bytes. For chacha20-poly1305, the authTagLength option defaults to 16 bytes.\n\nThe algorithm is dependent on OpenSSL, examples are 'aes192', etc. On recent OpenSSL releases, openssl list -cipher-algorithms will display the available cipher algorithms.\n\nThe key is the raw key used by the algorithm and iv is an initialization vector. Both arguments must be 'utf8' encoded strings, Buffers, TypedArray, or DataViews. The key may optionally be a KeyObject of type secret. If the cipher does not need an initialization vector, iv may be null.\n\nWhen passing strings for key or iv, please consider caveats when using strings as inputs to cryptographic APIs.\n\nInitialization vectors should be unpredictable and unique; ideally, they will be cryptographically", "doc_id": "a30587c5-1ef0-452f-9164-600419d966e5", "embedding": null, "doc_hash": "8b3dfa9537697b56f0e3fb1ca5e91033231d46138bdc06bb62b1914fdf43c81e", "extra_info": null, "node_info": {"start": 828204, "end": 831947}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f04a6beb-9470-4016-8cca-a072e3a64056", "3": "87232bc3-7c44-4b95-a461-7eba96828ef5"}}, "__type__": "1"}, "87232bc3-7c44-4b95-a461-7eba96828ef5": {"__data__": {"text": "to 16 bytes. For chacha20-poly1305, the authTagLength option defaults to 16 bytes.\n\nThe algorithm is dependent on OpenSSL, examples are 'aes192', etc. On recent OpenSSL releases, openssl list -cipher-algorithms will display the available cipher algorithms.\n\nThe key is the raw key used by the algorithm and iv is an initialization vector. Both arguments must be 'utf8' encoded strings, Buffers, TypedArray, or DataViews. The key may optionally be a KeyObject of type secret. If the cipher does not need an initialization vector, iv may be null.\n\nWhen passing strings for key or iv, please consider caveats when using strings as inputs to cryptographic APIs.\n\nInitialization vectors should be unpredictable and unique; ideally, they will be cryptographically random. They do not have to be secret: IVs are typically just added to ciphertext messages unencrypted. It may sound contradictory that something has to be unpredictable and unique, but does not have to be secret; remember that an attacker must not be able to predict ahead of time what a given IV will be.\n\ncrypto.createDecipher(algorithm, password[, options])#\nHistory\nStability: 0 - Deprecated: Use crypto.createDecipheriv() instead.\nalgorithm <string>\npassword <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\noptions <Object> stream.transform options\nReturns: <Decipher>\nCreates and returns a Decipher object that uses the given algorithm and password (key).\n\nThe options argument controls stream behavior and is optional except when a cipher in CCM or OCB mode (e.g. 'aes-128-ccm') is used. In that case, the authTagLength option is required and specifies the length of the authentication tag in bytes, see CCM mode. For chacha20-poly1305, the authTagLength option defaults to 16 bytes.\n\nThis function is semantically insecure for all supported ciphers and fatally flawed for ciphers in counter mode (such as CTR, GCM, or CCM).\n\nThe implementation of crypto.createDecipher() derives keys using the OpenSSL function EVP_BytesToKey with the digest algorithm set to MD5, one iteration, and no salt. The lack of salt allows dictionary attacks as the same password always creates the same key. The low iteration count and non-cryptographically secure hash algorithm allow passwords to be tested very rapidly.\n\nIn line with OpenSSL's recommendation to use a more modern algorithm instead of EVP_BytesToKey it is recommended that developers derive a key and IV on their own using crypto.scrypt() and to use crypto.createDecipheriv() to create the Decipher object.\n\ncrypto.createDecipheriv(algorithm, key, iv[, options])#\nHistory\nalgorithm <string>\nkey <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey>\niv <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <null>\noptions <Object> stream.transform options\nReturns: <Decipher>\nCreates and returns a Decipher object that uses the given algorithm, key and initialization vector (iv).\n\nThe options argument controls stream behavior and is optional except when a cipher in CCM or OCB mode (e.g. 'aes-128-ccm') is used. In that case, the authTagLength option is required and specifies the length of the authentication tag in bytes, see CCM mode. In GCM mode, the authTagLength option is not required but can be used to restrict accepted authentication tags to those with the specified length. For chacha20-poly1305, the authTagLength option defaults to 16 bytes.\n\nThe algorithm is dependent on OpenSSL, examples are 'aes192', etc. On recent OpenSSL releases, openssl list -cipher-algorithms will display the available cipher algorithms.\n\nThe key is the raw key used by the algorithm and iv is an initialization vector. Both arguments must be 'utf8' encoded strings, Buffers, TypedArray, or DataViews. The key", "doc_id": "87232bc3-7c44-4b95-a461-7eba96828ef5", "embedding": null, "doc_hash": "2e9336cbf44da3e3bd00f31a36e8be06a83e083a9cff86570513791836f10458", "extra_info": null, "node_info": {"start": 831931, "end": 835711}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a30587c5-1ef0-452f-9164-600419d966e5", "3": "1d6fdef4-b589-40e5-a9b2-b31062438ca6"}}, "__type__": "1"}, "1d6fdef4-b589-40e5-a9b2-b31062438ca6": {"__data__": {"text": "CCM or OCB mode (e.g. 'aes-128-ccm') is used. In that case, the authTagLength option is required and specifies the length of the authentication tag in bytes, see CCM mode. In GCM mode, the authTagLength option is not required but can be used to restrict accepted authentication tags to those with the specified length. For chacha20-poly1305, the authTagLength option defaults to 16 bytes.\n\nThe algorithm is dependent on OpenSSL, examples are 'aes192', etc. On recent OpenSSL releases, openssl list -cipher-algorithms will display the available cipher algorithms.\n\nThe key is the raw key used by the algorithm and iv is an initialization vector. Both arguments must be 'utf8' encoded strings, Buffers, TypedArray, or DataViews. The key may optionally be a KeyObject of type secret. If the cipher does not need an initialization vector, iv may be null.\n\nWhen passing strings for key or iv, please consider caveats when using strings as inputs to cryptographic APIs.\n\nInitialization vectors should be unpredictable and unique; ideally, they will be cryptographically random. They do not have to be secret: IVs are typically just added to ciphertext messages unencrypted. It may sound contradictory that something has to be unpredictable and unique, but does not have to be secret; remember that an attacker must not be able to predict ahead of time what a given IV will be.\n\ncrypto.createDiffieHellman(prime[, primeEncoding][, generator][, generatorEncoding])#\nHistory\nprime <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nprimeEncoding <string> The encoding of the prime string.\ngenerator <number> | <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> Default: 2\ngeneratorEncoding <string> The encoding of the generator string.\nReturns: <DiffieHellman>\nCreates a DiffieHellman key exchange object using the supplied prime and an optional specific generator.\n\nThe generator argument can be a number, string, or Buffer. If generator is not specified, the value 2 is used.\n\nIf primeEncoding is specified, prime is expected to be a string; otherwise a Buffer, TypedArray, or DataView is expected.\n\nIf generatorEncoding is specified, generator is expected to be a string; otherwise a number, Buffer, TypedArray, or DataView is expected.\n\ncrypto.createDiffieHellman(primeLength[, generator])#\nAdded in: v0.5.0\nprimeLength <number>\ngenerator <number> Default: 2\nReturns: <DiffieHellman>\nCreates a DiffieHellman key exchange object and generates a prime of primeLength bits using an optional specific numeric generator. If generator is not specified, the value 2 is used.\n\ncrypto.createDiffieHellmanGroup(name)#\nAdded in: v0.9.3\nname <string>\nReturns: <DiffieHellmanGroup>\nAn alias for crypto.getDiffieHellman()\n\ncrypto.createECDH(curveName)#\nAdded in: v0.11.14\ncurveName <string>\nReturns: <ECDH>\nCreates an Elliptic Curve Diffie-Hellman (ECDH) key exchange object using a predefined curve specified by the curveName string. Use crypto.getCurves() to obtain a list of available curve names. On recent OpenSSL releases, openssl ecparam -list_curves will also display the name and description of each available elliptic curve.\n\ncrypto.createHash(algorithm[, options])#\nHistory\nalgorithm <string>\noptions <Object> stream.transform options\nReturns: <Hash>\nCreates and returns a Hash object that can be used to generate hash digests using the given algorithm. Optional options argument controls stream behavior. For XOF hash functions such as 'shake256', the outputLength option can be used to specify the desired output length in bytes.\n\nThe algorithm is dependent on the available algorithms supported by the version of OpenSSL on the platform. Examples are 'sha256', 'sha512', etc. On recent releases of OpenSSL,", "doc_id": "1d6fdef4-b589-40e5-a9b2-b31062438ca6", "embedding": null, "doc_hash": "6456f433c1d3b4610b0487baf3142ece07888dbf99913d5d51c0ffcb30ec3a71", "extra_info": null, "node_info": {"start": 835736, "end": 839464}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "87232bc3-7c44-4b95-a461-7eba96828ef5", "3": "d0b3cf29-3256-4267-b72a-a1c9ec9b612c"}}, "__type__": "1"}, "d0b3cf29-3256-4267-b72a-a1c9ec9b612c": {"__data__": {"text": "string. Use crypto.getCurves() to obtain a list of available curve names. On recent OpenSSL releases, openssl ecparam -list_curves will also display the name and description of each available elliptic curve.\n\ncrypto.createHash(algorithm[, options])#\nHistory\nalgorithm <string>\noptions <Object> stream.transform options\nReturns: <Hash>\nCreates and returns a Hash object that can be used to generate hash digests using the given algorithm. Optional options argument controls stream behavior. For XOF hash functions such as 'shake256', the outputLength option can be used to specify the desired output length in bytes.\n\nThe algorithm is dependent on the available algorithms supported by the version of OpenSSL on the platform. Examples are 'sha256', 'sha512', etc. On recent releases of OpenSSL, openssl list -digest-algorithms will display the available digest algorithms.\n\nExample: generating the sha256 sum of a file\n\nimport {\n  createReadStream,\n} from 'node:fs';\nimport { argv } from 'node:process';\nconst {\n  createHash,\n} = await import('node:crypto');\n\nconst filename = argv[2];\n\nconst hash = createHash('sha256');\n\nconst input = createReadStream(filename);\ninput.on('readable', () => {\n  // Only one element is going to be produced by the\n  // hash stream.\n  const data = input.read();\n  if (data)\n    hash.update(data);\n  else {\n    console.log(`${hash.digest('hex')} ${filename}`);\n  }\n});\ncrypto.createHmac(algorithm, key[, options])#\nHistory\nalgorithm <string>\nkey <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey>\noptions <Object> stream.transform options\nencoding <string> The string encoding to use when key is a string.\nReturns: <Hmac>\nCreates and returns an Hmac object that uses the given algorithm and key. Optional options argument controls stream behavior.\n\nThe algorithm is dependent on the available algorithms supported by the version of OpenSSL on the platform. Examples are 'sha256', 'sha512', etc. On recent releases of OpenSSL, openssl list -digest-algorithms will display the available digest algorithms.\n\nThe key is the HMAC key used to generate the cryptographic HMAC hash. If it is a KeyObject, its type must be secret.\n\nExample: generating the sha256 HMAC of a file\n\nimport {\n  createReadStream,\n} from 'node:fs';\nimport { argv } from 'node:process';\nconst {\n  createHmac,\n} = await import('node:crypto');\n\nconst filename = argv[2];\n\nconst hmac = createHmac('sha256', 'a secret');\n\nconst input = createReadStream(filename);\ninput.on('readable', () => {\n  // Only one element is going to be produced by the\n  // hash stream.\n  const data = input.read();\n  if (data)\n    hmac.update(data);\n  else {\n    console.log(`${hmac.digest('hex')} ${filename}`);\n  }\n});\ncrypto.createPrivateKey(key)#\nHistory\nkey <Object> | <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nkey: <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <Object> The key material, either in PEM, DER, or JWK format.\nformat: <string> Must be 'pem', 'der', or ''jwk'. Default: 'pem'.\ntype: <string> Must be 'pkcs1', 'pkcs8' or 'sec1'. This option is required only if the format is 'der' and ignored otherwise.\npassphrase: <string> | <Buffer> The passphrase to use for decryption.\nencoding: <string> The string encoding to use when key is a string.\nReturns: <KeyObject>\nCreates and returns a new key object", "doc_id": "d0b3cf29-3256-4267-b72a-a1c9ec9b612c", "embedding": null, "doc_hash": "6de418ea2a74eeb3c0acfeaec150cccb549df1ef37b1374166d00ea5cea4dfd2", "extra_info": null, "node_info": {"start": 839400, "end": 842770}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1d6fdef4-b589-40e5-a9b2-b31062438ca6", "3": "9ab5c4bd-8a21-4e63-814e-8a08c6ecd5e6"}}, "__type__": "1"}, "9ab5c4bd-8a21-4e63-814e-8a08c6ecd5e6": {"__data__": {"text": "<Object> | <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nkey: <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <Object> The key material, either in PEM, DER, or JWK format.\nformat: <string> Must be 'pem', 'der', or ''jwk'. Default: 'pem'.\ntype: <string> Must be 'pkcs1', 'pkcs8' or 'sec1'. This option is required only if the format is 'der' and ignored otherwise.\npassphrase: <string> | <Buffer> The passphrase to use for decryption.\nencoding: <string> The string encoding to use when key is a string.\nReturns: <KeyObject>\nCreates and returns a new key object containing a private key. If key is a string or Buffer, format is assumed to be 'pem'; otherwise, key must be an object with the properties described above.\n\nIf the private key is encrypted, a passphrase must be specified. The length of the passphrase is limited to 1024 bytes.\n\ncrypto.createPublicKey(key)#\nHistory\nkey <Object> | <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nkey: <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <Object> The key material, either in PEM, DER, or JWK format.\nformat: <string> Must be 'pem', 'der', or 'jwk'. Default: 'pem'.\ntype: <string> Must be 'pkcs1' or 'spki'. This option is required only if the format is 'der' and ignored otherwise.\nencoding <string> The string encoding to use when key is a string.\nReturns: <KeyObject>\nCreates and returns a new key object containing a public key. If key is a string or Buffer, format is assumed to be 'pem'; if key is a KeyObject with type 'private', the public key is derived from the given private key; otherwise, key must be an object with the properties described above.\n\nIf the format is 'pem', the 'key' may also be an X.509 certificate.\n\nBecause public keys can be derived from private keys, a private key may be passed instead of a public key. In that case, this function behaves as if crypto.createPrivateKey() had been called, except that the type of the returned KeyObject will be 'public' and that the private key cannot be extracted from the returned KeyObject. Similarly, if a KeyObject with type 'private' is given, a new KeyObject with type 'public' will be returned and it will be impossible to extract the private key from the returned object.\n\ncrypto.createSecretKey(key[, encoding])#\nHistory\nkey <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nencoding <string> The string encoding when key is a string.\nReturns: <KeyObject>\nCreates and returns a new key object containing a secret key for symmetric encryption or Hmac.\n\ncrypto.createSign(algorithm[, options])#\nAdded in: v0.1.92\nalgorithm <string>\noptions <Object> stream.Writable options\nReturns: <Sign>\nCreates and returns a Sign object that uses the given algorithm. Use crypto.getHashes() to obtain the names of the available digest algorithms. Optional options argument controls the stream.Writable behavior.\n\nIn some cases, a Sign instance can be created using the name of a signature algorithm, such as 'RSA-SHA256', instead of a digest algorithm. This will use the corresponding digest algorithm. This does not work for all signature algorithms, such as 'ecdsa-with-SHA256', so it is best to always use digest algorithm names.\n\ncrypto.createVerify(algorithm[, options])#\nAdded in: v0.1.92\nalgorithm <string>\noptions <Object> stream.Writable options\nReturns: <Verify>\nCreates and returns a Verify object that uses the given algorithm. Use crypto.getHashes() to obtain an array of names of the available signing algorithms. Optional", "doc_id": "9ab5c4bd-8a21-4e63-814e-8a08c6ecd5e6", "embedding": null, "doc_hash": "1ceed7610b23618932aa443589e12923c1e7865f8a8ba1212271bce93f5ff0e2", "extra_info": null, "node_info": {"start": 842951, "end": 846485}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d0b3cf29-3256-4267-b72a-a1c9ec9b612c", "3": "be89f1a2-4e67-45f6-baf6-1e031cc9bf0f"}}, "__type__": "1"}, "be89f1a2-4e67-45f6-baf6-1e031cc9bf0f": {"__data__": {"text": "of the available digest algorithms. Optional options argument controls the stream.Writable behavior.\n\nIn some cases, a Sign instance can be created using the name of a signature algorithm, such as 'RSA-SHA256', instead of a digest algorithm. This will use the corresponding digest algorithm. This does not work for all signature algorithms, such as 'ecdsa-with-SHA256', so it is best to always use digest algorithm names.\n\ncrypto.createVerify(algorithm[, options])#\nAdded in: v0.1.92\nalgorithm <string>\noptions <Object> stream.Writable options\nReturns: <Verify>\nCreates and returns a Verify object that uses the given algorithm. Use crypto.getHashes() to obtain an array of names of the available signing algorithms. Optional options argument controls the stream.Writable behavior.\n\nIn some cases, a Verify instance can be created using the name of a signature algorithm, such as 'RSA-SHA256', instead of a digest algorithm. This will use the corresponding digest algorithm. This does not work for all signature algorithms, such as 'ecdsa-with-SHA256', so it is best to always use digest algorithm names.\n\ncrypto.diffieHellman(options)#\nAdded in: v13.9.0, v12.17.0\noptions: <Object>\nprivateKey: <KeyObject>\npublicKey: <KeyObject>\nReturns: <Buffer>\nComputes the Diffie-Hellman secret based on a privateKey and a publicKey. Both keys must have the same asymmetricKeyType, which must be one of 'dh' (for Diffie-Hellman), 'ec' (for ECDH), 'x448', or 'x25519' (for ECDH-ES).\n\ncrypto.generateKey(type, options, callback)#\nHistory\ntype: <string> The intended use of the generated secret key. Currently accepted values are 'hmac' and 'aes'.\noptions: <Object>\nlength: <number> The bit length of the key to generate. This must be a value greater than 0.\nIf type is 'hmac', the minimum is 8, and the maximum length is 231-1. If the value is not a multiple of 8, the generated key will be truncated to Math.floor(length / 8).\nIf type is 'aes', the length must be one of 128, 192, or 256.\ncallback: <Function>\nerr: <Error>\nkey: <KeyObject>\nAsynchronously generates a new random secret key of the given length. The type will determine which validations will be performed on the length.\n\nconst {\n  generateKey,\n} = await import('node:crypto');\n\ngenerateKey('hmac', { length: 64 }, (err, key) => {\n  if (err) throw err;\n  console.log(key.export().toString('hex'));  // 46e..........620\n});\ncrypto.generateKeyPair(type, options, callback)#\nHistory\ntype: <string> Must be 'rsa', 'rsa-pss', 'dsa', 'ec', 'ed25519', 'ed448', 'x25519', 'x448', or 'dh'.\noptions: <Object>\nmodulusLength: <number> Key size in bits (RSA, DSA).\npublicExponent: <number> Public exponent (RSA). Default: 0x10001.\nhashAlgorithm: <string> Name of the message digest (RSA-PSS).\nmgf1HashAlgorithm: <string> Name of the message digest used by MGF1 (RSA-PSS).\nsaltLength: <number> Minimal salt length in bytes (RSA-PSS).\ndivisorLength: <number> Size of q in bits (DSA).\nnamedCurve: <string> Name of the curve to use (EC).\nprime: <Buffer> The prime parameter (DH).\nprimeLength: <number> Prime length in bits (DH).\ngenerator: <number> Custom generator (DH). Default: 2.\ngroupName: <string> Diffie-Hellman group name (DH). See crypto.getDiffieHellman().\nparamEncoding: <string> Must be 'named' or 'explicit' (EC).", "doc_id": "be89f1a2-4e67-45f6-baf6-1e031cc9bf0f", "embedding": null, "doc_hash": "35c1d916935d4a2582d2f1bd68eae0fc0e9b3919b55b0c5525f99bea8ad52e53", "extra_info": null, "node_info": {"start": 846363, "end": 849623}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9ab5c4bd-8a21-4e63-814e-8a08c6ecd5e6", "3": "c2295cc0-eb19-4602-8cb7-ea33eabaa7eb"}}, "__type__": "1"}, "c2295cc0-eb19-4602-8cb7-ea33eabaa7eb": {"__data__": {"text": "<string> Name of the message digest (RSA-PSS).\nmgf1HashAlgorithm: <string> Name of the message digest used by MGF1 (RSA-PSS).\nsaltLength: <number> Minimal salt length in bytes (RSA-PSS).\ndivisorLength: <number> Size of q in bits (DSA).\nnamedCurve: <string> Name of the curve to use (EC).\nprime: <Buffer> The prime parameter (DH).\nprimeLength: <number> Prime length in bits (DH).\ngenerator: <number> Custom generator (DH). Default: 2.\ngroupName: <string> Diffie-Hellman group name (DH). See crypto.getDiffieHellman().\nparamEncoding: <string> Must be 'named' or 'explicit' (EC). Default: 'named'.\npublicKeyEncoding: <Object> See keyObject.export().\nprivateKeyEncoding: <Object> See keyObject.export().\ncallback: <Function>\nerr: <Error>\npublicKey: <string> | <Buffer> | <KeyObject>\nprivateKey: <string> | <Buffer> | <KeyObject>\nGenerates a new asymmetric key pair of the given type. RSA, RSA-PSS, DSA, EC, Ed25519, Ed448, X25519, X448, and DH are currently supported.\n\nIf a publicKeyEncoding or privateKeyEncoding was specified, this function behaves as if keyObject.export() had been called on its result. Otherwise, the respective part of the key is returned as a KeyObject.\n\nIt is recommended to encode public keys as 'spki' and private keys as 'pkcs8' with encryption for long-term storage:\n\nconst {\n  generateKeyPair,\n} = await import('node:crypto');\n\ngenerateKeyPair('rsa', {\n  modulusLength: 4096,\n  publicKeyEncoding: {\n    type: 'spki',\n    format: 'pem',\n  },\n  privateKeyEncoding: {\n    type: 'pkcs8',\n    format: 'pem',\n    cipher: 'aes-256-cbc',\n    passphrase: 'top secret',\n  },\n}, (err, publicKey, privateKey) => {\n  // Handle errors and use the generated key pair.\n});\nOn completion, callback will be called with err set to undefined and publicKey / privateKey representing the generated key pair.\n\nIf this method is invoked as its util.promisify()ed version, it returns a Promise for an Object with publicKey and privateKey properties.\n\ncrypto.generateKeyPairSync(type, options)#\nHistory\ntype: <string> Must be 'rsa', 'rsa-pss', 'dsa', 'ec', 'ed25519', 'ed448', 'x25519', 'x448', or 'dh'.\noptions: <Object>\nmodulusLength: <number> Key size in bits (RSA, DSA).\npublicExponent: <number> Public exponent (RSA). Default: 0x10001.\nhashAlgorithm: <string> Name of the message digest (RSA-PSS).\nmgf1HashAlgorithm: <string> Name of the message digest used by MGF1 (RSA-PSS).\nsaltLength: <number> Minimal salt length in bytes (RSA-PSS).\ndivisorLength: <number> Size of q in bits (DSA).\nnamedCurve: <string> Name of the curve to use (EC).\nprime: <Buffer> The prime parameter (DH).\nprimeLength: <number> Prime length in bits (DH).\ngenerator: <number> Custom generator (DH). Default: 2.\ngroupName: <string> Diffie-Hellman group name (DH). See crypto.getDiffieHellman().\nparamEncoding: <string> Must be 'named' or 'explicit' (EC). Default: 'named'.\npublicKeyEncoding: <Object> See keyObject.export().\nprivateKeyEncoding: <Object> See keyObject.export().\nReturns: <Object>\npublicKey: <string> | <Buffer> | <KeyObject>\nprivateKey: <string> | <Buffer> | <KeyObject>\nGenerates", "doc_id": "c2295cc0-eb19-4602-8cb7-ea33eabaa7eb", "embedding": null, "doc_hash": "08cf5edf36678d2c5f2d1ced9f03cd72c06f940b04a01abef530b7c8b662dae1", "extra_info": null, "node_info": {"start": 849748, "end": 852822}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "be89f1a2-4e67-45f6-baf6-1e031cc9bf0f", "3": "f2bf2121-5d38-404f-8c32-cd68a0513bee"}}, "__type__": "1"}, "f2bf2121-5d38-404f-8c32-cd68a0513bee": {"__data__": {"text": "<number> Size of q in bits (DSA).\nnamedCurve: <string> Name of the curve to use (EC).\nprime: <Buffer> The prime parameter (DH).\nprimeLength: <number> Prime length in bits (DH).\ngenerator: <number> Custom generator (DH). Default: 2.\ngroupName: <string> Diffie-Hellman group name (DH). See crypto.getDiffieHellman().\nparamEncoding: <string> Must be 'named' or 'explicit' (EC). Default: 'named'.\npublicKeyEncoding: <Object> See keyObject.export().\nprivateKeyEncoding: <Object> See keyObject.export().\nReturns: <Object>\npublicKey: <string> | <Buffer> | <KeyObject>\nprivateKey: <string> | <Buffer> | <KeyObject>\nGenerates a new asymmetric key pair of the given type. RSA, RSA-PSS, DSA, EC, Ed25519, Ed448, X25519, X448, and DH are currently supported.\n\nIf a publicKeyEncoding or privateKeyEncoding was specified, this function behaves as if keyObject.export() had been called on its result. Otherwise, the respective part of the key is returned as a KeyObject.\n\nWhen encoding public keys, it is recommended to use 'spki'. When encoding private keys, it is recommended to use 'pkcs8' with a strong passphrase, and to keep the passphrase confidential.\n\nconst {\n  generateKeyPairSync,\n} = await import('node:crypto');\n\nconst {\n  publicKey,\n  privateKey,\n} = generateKeyPairSync('rsa', {\n  modulusLength: 4096,\n  publicKeyEncoding: {\n    type: 'spki',\n    format: 'pem',\n  },\n  privateKeyEncoding: {\n    type: 'pkcs8',\n    format: 'pem',\n    cipher: 'aes-256-cbc',\n    passphrase: 'top secret',\n  },\n});\nThe return value { publicKey, privateKey } represents the generated key pair. When PEM encoding was selected, the respective key will be a string, otherwise it will be a buffer containing the data encoded as DER.\n\ncrypto.generateKeySync(type, options)#\nAdded in: v15.0.0\ntype: <string> The intended use of the generated secret key. Currently accepted values are 'hmac' and 'aes'.\noptions: <Object>\nlength: <number> The bit length of the key to generate.\nIf type is 'hmac', the minimum is 8, and the maximum length is 231-1. If the value is not a multiple of 8, the generated key will be truncated to Math.floor(length / 8).\nIf type is 'aes', the length must be one of 128, 192, or 256.\nReturns: <KeyObject>\nSynchronously generates a new random secret key of the given length. The type will determine which validations will be performed on the length.\n\nconst {\n  generateKeySync,\n} = await import('node:crypto');\n\nconst key = generateKeySync('hmac', { length: 64 });\nconsole.log(key.export().toString('hex'));  // e89..........41e\ncrypto.generatePrime(size[, options[, callback]])#\nHistory\nsize <number> The size (in bits) of the prime to generate.\noptions <Object>\nadd <ArrayBuffer> | <SharedArrayBuffer> | <TypedArray> | <Buffer> | <DataView> | <bigint>\nrem <ArrayBuffer> | <SharedArrayBuffer> | <TypedArray> | <Buffer> | <DataView> | <bigint>\nsafe <boolean> Default: false.\nbigint <boolean> When true, the generated prime is returned as a bigint.\ncallback <Function>\nerr <Error>\nprime <ArrayBuffer> | <bigint>\nGenerates a pseudorandom prime of size bits.\n\nIf options.safe is true, the prime will be a safe prime -- that is, (prime - 1) / 2 will also be a prime.\n\nThe options.add and options.rem parameters can be used to", "doc_id": "f2bf2121-5d38-404f-8c32-cd68a0513bee", "embedding": null, "doc_hash": "5032123ff94039c109b18e6bfd750756370b40da6cf2c5f1a8b8aadb591a76a7", "extra_info": null, "node_info": {"start": 852778, "end": 855995}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c2295cc0-eb19-4602-8cb7-ea33eabaa7eb", "3": "abe72290-05b3-4ad9-a7a5-a79aa3594c7f"}}, "__type__": "1"}, "abe72290-05b3-4ad9-a7a5-a79aa3594c7f": {"__data__": {"text": "The size (in bits) of the prime to generate.\noptions <Object>\nadd <ArrayBuffer> | <SharedArrayBuffer> | <TypedArray> | <Buffer> | <DataView> | <bigint>\nrem <ArrayBuffer> | <SharedArrayBuffer> | <TypedArray> | <Buffer> | <DataView> | <bigint>\nsafe <boolean> Default: false.\nbigint <boolean> When true, the generated prime is returned as a bigint.\ncallback <Function>\nerr <Error>\nprime <ArrayBuffer> | <bigint>\nGenerates a pseudorandom prime of size bits.\n\nIf options.safe is true, the prime will be a safe prime -- that is, (prime - 1) / 2 will also be a prime.\n\nThe options.add and options.rem parameters can be used to enforce additional requirements, e.g., for Diffie-Hellman:\n\nIf options.add and options.rem are both set, the prime will satisfy the condition that prime % add = rem.\nIf only options.add is set and options.safe is not true, the prime will satisfy the condition that prime % add = 1.\nIf only options.add is set and options.safe is set to true, the prime will instead satisfy the condition that prime % add = 3. This is necessary because prime % add = 1 for options.add > 2 would contradict the condition enforced by options.safe.\noptions.rem is ignored if options.add is not given.\nBoth options.add and options.rem must be encoded as big-endian sequences if given as an ArrayBuffer, SharedArrayBuffer, TypedArray, Buffer, or DataView.\n\nBy default, the prime is encoded as a big-endian sequence of octets in an <ArrayBuffer>. If the bigint option is true, then a <bigint> is provided.\n\ncrypto.generatePrimeSync(size[, options])#\nAdded in: v15.8.0\nsize <number> The size (in bits) of the prime to generate.\noptions <Object>\nadd <ArrayBuffer> | <SharedArrayBuffer> | <TypedArray> | <Buffer> | <DataView> | <bigint>\nrem <ArrayBuffer> | <SharedArrayBuffer> | <TypedArray> | <Buffer> | <DataView> | <bigint>\nsafe <boolean> Default: false.\nbigint <boolean> When true, the generated prime is returned as a bigint.\nReturns: <ArrayBuffer> | <bigint>\nGenerates a pseudorandom prime of size bits.\n\nIf options.safe is true, the prime will be a safe prime -- that is, (prime - 1) / 2 will also be a prime.\n\nThe options.add and options.rem parameters can be used to enforce additional requirements, e.g., for Diffie-Hellman:\n\nIf options.add and options.rem are both set, the prime will satisfy the condition that prime % add = rem.\nIf only options.add is set and options.safe is not true, the prime will satisfy the condition that prime % add = 1.\nIf only options.add is set and options.safe is set to true, the prime will instead satisfy the condition that prime % add = 3. This is necessary because prime % add = 1 for options.add > 2 would contradict the condition enforced by options.safe.\noptions.rem is ignored if options.add is not given.\nBoth options.add and options.rem must be encoded as big-endian sequences if given as an ArrayBuffer, SharedArrayBuffer, TypedArray, Buffer, or DataView.\n\nBy default, the prime is encoded as a big-endian sequence of octets in an <ArrayBuffer>. If the bigint option is true, then a <bigint> is provided.\n\ncrypto.getCipherInfo(nameOrNid[, options])#\nAdded in: v15.0.0\nnameOrNid: <string> | <number> The name or nid of the cipher to query.\noptions: <Object>\nkeyLength: <number> A test key length.\nivLength: <number> A test IV length.\nReturns: <Object>\nname <string> The name of the cipher\nnid <number> The nid of the cipher\nblockSize <number> The block size of the cipher in", "doc_id": "abe72290-05b3-4ad9-a7a5-a79aa3594c7f", "embedding": null, "doc_hash": "89ad0a853d7584153edabbdf5b4a10f9f98a02e460f4b6f8ab744df6f1585c79", "extra_info": null, "node_info": {"start": 856016, "end": 859435}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f2bf2121-5d38-404f-8c32-cd68a0513bee", "3": "5ff733bd-158c-4752-86ed-992ca81a5b90"}}, "__type__": "1"}, "5ff733bd-158c-4752-86ed-992ca81a5b90": {"__data__": {"text": "as big-endian sequences if given as an ArrayBuffer, SharedArrayBuffer, TypedArray, Buffer, or DataView.\n\nBy default, the prime is encoded as a big-endian sequence of octets in an <ArrayBuffer>. If the bigint option is true, then a <bigint> is provided.\n\ncrypto.getCipherInfo(nameOrNid[, options])#\nAdded in: v15.0.0\nnameOrNid: <string> | <number> The name or nid of the cipher to query.\noptions: <Object>\nkeyLength: <number> A test key length.\nivLength: <number> A test IV length.\nReturns: <Object>\nname <string> The name of the cipher\nnid <number> The nid of the cipher\nblockSize <number> The block size of the cipher in bytes. This property is omitted when mode is 'stream'.\nivLength <number> The expected or default initialization vector length in bytes. This property is omitted if the cipher does not use an initialization vector.\nkeyLength <number> The expected or default key length in bytes.\nmode <string> The cipher mode. One of 'cbc', 'ccm', 'cfb', 'ctr', 'ecb', 'gcm', 'ocb', 'ofb', 'stream', 'wrap', 'xts'.\nReturns information about a given cipher.\n\nSome ciphers accept variable length keys and initialization vectors. By default, the crypto.getCipherInfo() method will return the default values for these ciphers. To test if a given key length or iv length is acceptable for given cipher, use the keyLength and ivLength options. If the given values are unacceptable, undefined will be returned.\n\ncrypto.getCiphers()#\nAdded in: v0.9.3\nReturns: <string[]> An array with the names of the supported cipher algorithms.\nconst {\n  getCiphers,\n} = await import('node:crypto');\n\nconsole.log(getCiphers()); // ['aes-128-cbc', 'aes-128-ccm', ...]\ncrypto.getCurves()#\nAdded in: v2.3.0\nReturns: <string[]> An array with the names of the supported elliptic curves.\nconst {\n  getCurves,\n} = await import('node:crypto');\n\nconsole.log(getCurves()); // ['Oakley-EC2N-3', 'Oakley-EC2N-4', ...]\ncrypto.getDiffieHellman(groupName)#\nAdded in: v0.7.5\ngroupName <string>\nReturns: <DiffieHellmanGroup>\nCreates a predefined DiffieHellmanGroup key exchange object. The supported groups are listed in the documentation for DiffieHellmanGroup.\n\nThe returned object mimics the interface of objects created by crypto.createDiffieHellman(), but will not allow changing the keys (with diffieHellman.setPublicKey(), for example). The advantage of using this method is that the parties do not have to generate nor exchange a group modulus beforehand, saving both processor and communication time.\n\nExample (obtaining a shared secret):\n\nconst {\n  getDiffieHellman,\n} = await import('node:crypto');\nconst alice = getDiffieHellman('modp14');\nconst bob = getDiffieHellman('modp14');\n\nalice.generateKeys();\nbob.generateKeys();\n\nconst aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');\nconst bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');\n\n/* aliceSecret and bobSecret should be the same */\nconsole.log(aliceSecret === bobSecret);\ncrypto.getFips()#\nAdded in: v10.0.0\nReturns: <number> 1 if and only if a FIPS compliant crypto provider is currently in use, 0 otherwise. A future semver-major release may change the return type of this API to a <boolean>.\ncrypto.getHashes()#\nAdded in: v0.9.3\nReturns: <string[]> An array of the names of the supported hash algorithms, such as 'RSA-SHA256'.", "doc_id": "5ff733bd-158c-4752-86ed-992ca81a5b90", "embedding": null, "doc_hash": "d2bfe495a155e1c60bfa65aed7c470d0996ef67b8f13cba1d9c0b48e96b6f25e", "extra_info": null, "node_info": {"start": 859431, "end": 862727}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "abe72290-05b3-4ad9-a7a5-a79aa3594c7f", "3": "fd041624-647f-4cbb-945f-fb875b6edf57"}}, "__type__": "1"}, "fd041624-647f-4cbb-945f-fb875b6edf57": {"__data__": {"text": "aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');\nconst bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');\n\n/* aliceSecret and bobSecret should be the same */\nconsole.log(aliceSecret === bobSecret);\ncrypto.getFips()#\nAdded in: v10.0.0\nReturns: <number> 1 if and only if a FIPS compliant crypto provider is currently in use, 0 otherwise. A future semver-major release may change the return type of this API to a <boolean>.\ncrypto.getHashes()#\nAdded in: v0.9.3\nReturns: <string[]> An array of the names of the supported hash algorithms, such as 'RSA-SHA256'. Hash algorithms are also called \"digest\" algorithms.\nconst {\n  getHashes,\n} = await import('node:crypto');\n\nconsole.log(getHashes()); // ['DSA', 'DSA-SHA', 'DSA-SHA1', ...]\ncrypto.getRandomValues(typedArray)#\nAdded in: v17.4.0\ntypedArray <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer>\nReturns: <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> Returns typedArray.\nA convenient alias for crypto.webcrypto.getRandomValues(). This implementation is not compliant with the Web Crypto spec, to write web-compatible code use crypto.webcrypto.getRandomValues() instead.\n\ncrypto.hkdf(digest, ikm, salt, info, keylen, callback)#\nHistory\ndigest <string> The digest algorithm to use.\nikm <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> The input keying material. Must be provided but can be zero-length.\nsalt <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> The salt value. Must be provided but can be zero-length.\ninfo <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> Additional info value. Must be provided but can be zero-length, and cannot be more than 1024 bytes.\nkeylen <number> The length of the key to generate. Must be greater than 0. The maximum allowable value is 255 times the number of bytes produced by the selected digest function (e.g. sha512 generates 64-byte hashes, making the maximum HKDF output 16320 bytes).\ncallback <Function>\nerr <Error>\nderivedKey <ArrayBuffer>\nHKDF is a simple key derivation function defined in RFC 5869. The given ikm, salt and info are used with the digest to derive a key of keylen bytes.\n\nThe supplied callback function is called with two arguments: err and derivedKey. If an errors occurs while deriving the key, err will be set; otherwise err will be null. The successfully generated derivedKey will be passed to the callback as an <ArrayBuffer>. An error will be thrown if any of the input arguments specify invalid values or types.\n\nimport { Buffer } from 'node:buffer';\nconst {\n  hkdf,\n} = await import('node:crypto');\n\nhkdf('sha512', 'key', 'salt', 'info', 64, (err, derivedKey) => {\n  if (err) throw err;\n  console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'\n});\ncrypto.hkdfSync(digest, ikm, salt, info, keylen)#\nHistory\ndigest <string> The digest algorithm to use.\nikm <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> The input keying material. Must be provided but can be zero-length.\nsalt <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> The salt value. Must be provided but can be zero-length.\ninfo <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> Additional info", "doc_id": "fd041624-647f-4cbb-945f-fb875b6edf57", "embedding": null, "doc_hash": "030f6d80105283266ff1aeede20c269ad328321981a1b4d038f89b53be22bff7", "extra_info": null, "node_info": {"start": 862745, "end": 866000}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5ff733bd-158c-4752-86ed-992ca81a5b90", "3": "dadc9299-d93f-4b58-a62a-6bdb3a5a4c42"}}, "__type__": "1"}, "dadc9299-d93f-4b58-a62a-6bdb3a5a4c42": {"__data__": {"text": "=> {\n  if (err) throw err;\n  console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'\n});\ncrypto.hkdfSync(digest, ikm, salt, info, keylen)#\nHistory\ndigest <string> The digest algorithm to use.\nikm <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> The input keying material. Must be provided but can be zero-length.\nsalt <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> The salt value. Must be provided but can be zero-length.\ninfo <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> Additional info value. Must be provided but can be zero-length, and cannot be more than 1024 bytes.\nkeylen <number> The length of the key to generate. Must be greater than 0. The maximum allowable value is 255 times the number of bytes produced by the selected digest function (e.g. sha512 generates 64-byte hashes, making the maximum HKDF output 16320 bytes).\nReturns: <ArrayBuffer>\nProvides a synchronous HKDF key derivation function as defined in RFC 5869. The given ikm, salt and info are used with the digest to derive a key of keylen bytes.\n\nThe successfully generated derivedKey will be returned as an <ArrayBuffer>.\n\nAn error will be thrown if any of the input arguments specify invalid values or types, or if the derived key cannot be generated.\n\nimport { Buffer } from 'node:buffer';\nconst {\n  hkdfSync,\n} = await import('node:crypto');\n\nconst derivedKey = hkdfSync('sha512', 'key', 'salt', 'info', 64);\nconsole.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'\ncrypto.pbkdf2(password, salt, iterations, keylen, digest, callback)#\nHistory\npassword <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nsalt <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\niterations <number>\nkeylen <number>\ndigest <string>\ncallback <Function>\nerr <Error>\nderivedKey <Buffer>\nProvides an asynchronous Password-Based Key Derivation Function 2 (PBKDF2) implementation. A selected HMAC digest algorithm specified by digest is applied to derive a key of the requested byte length (keylen) from the password, salt and iterations.\n\nThe supplied callback function is called with two arguments: err and derivedKey. If an error occurs while deriving the key, err will be set; otherwise err will be null. By default, the successfully generated derivedKey will be passed to the callback as a Buffer. An error will be thrown if any of the input arguments specify invalid values or types.\n\nThe iterations argument must be a number set as high as possible. The higher the number of iterations, the more secure the derived key will be, but will take a longer amount of time to complete.\n\nThe salt should be as unique as possible. It is recommended that a salt is random and at least 16 bytes long. See NIST SP 800-132 for details.\n\nWhen passing strings for password or salt, please consider caveats when using strings as inputs to cryptographic APIs.\n\nconst {\n  pbkdf2,\n} = await import('node:crypto');\n\npbkdf2('secret', 'salt', 100000, 64, 'sha512', (err, derivedKey) => {\n  if (err) throw err;\n  console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'\n});\nThe crypto.DEFAULT_ENCODING property can be used to change the way the derivedKey is passed to the callback. This property, however, has been deprecated and use should be avoided.\n\nimport crypto from 'node:crypto';\ncrypto.DEFAULT_ENCODING =", "doc_id": "dadc9299-d93f-4b58-a62a-6bdb3a5a4c42", "embedding": null, "doc_hash": "f81da317ec65d6c14df7ab9d6dfe97dd15fc6e21fd0eb0b690f2e8a98ca6eb32", "extra_info": null, "node_info": {"start": 866020, "end": 869410}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fd041624-647f-4cbb-945f-fb875b6edf57", "3": "2d0c821f-8dff-4d59-8420-53dda4141f28"}}, "__type__": "1"}, "2d0c821f-8dff-4d59-8420-53dda4141f28": {"__data__": {"text": "See NIST SP 800-132 for details.\n\nWhen passing strings for password or salt, please consider caveats when using strings as inputs to cryptographic APIs.\n\nconst {\n  pbkdf2,\n} = await import('node:crypto');\n\npbkdf2('secret', 'salt', 100000, 64, 'sha512', (err, derivedKey) => {\n  if (err) throw err;\n  console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'\n});\nThe crypto.DEFAULT_ENCODING property can be used to change the way the derivedKey is passed to the callback. This property, however, has been deprecated and use should be avoided.\n\nimport crypto from 'node:crypto';\ncrypto.DEFAULT_ENCODING = 'hex';\ncrypto.pbkdf2('secret', 'salt', 100000, 512, 'sha512', (err, derivedKey) => {\n  if (err) throw err;\n  console.log(derivedKey);  // '3745e48...aa39b34'\n});\nAn array of supported digest functions can be retrieved using crypto.getHashes().\n\nThis API uses libuv's threadpool, which can have surprising and negative performance implications for some applications; see the UV_THREADPOOL_SIZE documentation for more information.\n\ncrypto.pbkdf2Sync(password, salt, iterations, keylen, digest)#\nHistory\npassword <string> | <Buffer> | <TypedArray> | <DataView>\nsalt <string> | <Buffer> | <TypedArray> | <DataView>\niterations <number>\nkeylen <number>\ndigest <string>\nReturns: <Buffer>\nProvides a synchronous Password-Based Key Derivation Function 2 (PBKDF2) implementation. A selected HMAC digest algorithm specified by digest is applied to derive a key of the requested byte length (keylen) from the password, salt and iterations.\n\nIf an error occurs an Error will be thrown, otherwise the derived key will be returned as a Buffer.\n\nThe iterations argument must be a number set as high as possible. The higher the number of iterations, the more secure the derived key will be, but will take a longer amount of time to complete.\n\nThe salt should be as unique as possible. It is recommended that a salt is random and at least 16 bytes long. See NIST SP 800-132 for details.\n\nWhen passing strings for password or salt, please consider caveats when using strings as inputs to cryptographic APIs.\n\nconst {\n  pbkdf2Sync,\n} = await import('node:crypto');\n\nconst key = pbkdf2Sync('secret', 'salt', 100000, 64, 'sha512');\nconsole.log(key.toString('hex'));  // '3745e48...08d59ae'\nThe crypto.DEFAULT_ENCODING property may be used to change the way the derivedKey is returned. This property, however, is deprecated and use should be avoided.\n\nimport crypto from 'node:crypto';\ncrypto.DEFAULT_ENCODING = 'hex';\nconst key = crypto.pbkdf2Sync('secret', 'salt', 100000, 512, 'sha512');\nconsole.log(key);  // '3745e48...aa39b34'\nAn array of supported digest functions can be retrieved using crypto.getHashes().\n\ncrypto.privateDecrypt(privateKey, buffer)#\nHistory\nprivateKey <Object> | <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey>\noaepHash <string> The hash function to use for OAEP padding and MGF1. Default: 'sha1'\noaepLabel <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> The label to use for OAEP padding. If not specified, no label is used.\npadding <crypto.constants> An optional padding value defined in crypto.constants, which may be: crypto.constants.RSA_NO_PADDING,", "doc_id": "2d0c821f-8dff-4d59-8420-53dda4141f28", "embedding": null, "doc_hash": "c429d38b6909ec02869e2bfab2dab8f8a397b3432b3a2a43c9ed853b7f5bfb06", "extra_info": null, "node_info": {"start": 869380, "end": 872607}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dadc9299-d93f-4b58-a62a-6bdb3a5a4c42", "3": "c80a5404-eaee-41cd-b58c-8ba41e42d1d9"}}, "__type__": "1"}, "c80a5404-eaee-41cd-b58c-8ba41e42d1d9": {"__data__": {"text": "array of supported digest functions can be retrieved using crypto.getHashes().\n\ncrypto.privateDecrypt(privateKey, buffer)#\nHistory\nprivateKey <Object> | <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey>\noaepHash <string> The hash function to use for OAEP padding and MGF1. Default: 'sha1'\noaepLabel <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> The label to use for OAEP padding. If not specified, no label is used.\npadding <crypto.constants> An optional padding value defined in crypto.constants, which may be: crypto.constants.RSA_NO_PADDING, crypto.constants.RSA_PKCS1_PADDING, or crypto.constants.RSA_PKCS1_OAEP_PADDING.\nbuffer <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nReturns: <Buffer> A new Buffer with the decrypted content.\nDecrypts buffer with privateKey. buffer was previously encrypted using the corresponding public key, for example using crypto.publicEncrypt().\n\nIf privateKey is not a KeyObject, this function behaves as if privateKey had been passed to crypto.createPrivateKey(). If it is an object, the padding property can be passed. Otherwise, this function uses RSA_PKCS1_OAEP_PADDING.\n\ncrypto.privateEncrypt(privateKey, buffer)#\nHistory\nprivateKey <Object> | <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey>\nkey <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey> A PEM encoded private key.\npassphrase <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> An optional passphrase for the private key.\npadding <crypto.constants> An optional padding value defined in crypto.constants, which may be: crypto.constants.RSA_NO_PADDING or crypto.constants.RSA_PKCS1_PADDING.\nencoding <string> The string encoding to use when buffer, key, or passphrase are strings.\nbuffer <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nReturns: <Buffer> A new Buffer with the encrypted content.\nEncrypts buffer with privateKey. The returned data can be decrypted using the corresponding public key, for example using crypto.publicDecrypt().\n\nIf privateKey is not a KeyObject, this function behaves as if privateKey had been passed to crypto.createPrivateKey(). If it is an object, the padding property can be passed. Otherwise, this function uses RSA_PKCS1_PADDING.\n\ncrypto.publicDecrypt(key, buffer)#\nHistory\nkey <Object> | <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey>\npassphrase <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> An optional passphrase for the private key.\npadding <crypto.constants> An optional padding value defined in crypto.constants, which may be: crypto.constants.RSA_NO_PADDING or crypto.constants.RSA_PKCS1_PADDING.\nencoding <string> The string encoding to use when buffer, key, or passphrase are strings.\nbuffer <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nReturns: <Buffer> A new Buffer with the decrypted content.\nDecrypts buffer with key.buffer was previously encrypted using the corresponding private key, for example using crypto.privateEncrypt().\n\nIf key is not a KeyObject, this function behaves as if key had been passed to crypto.createPublicKey(). If it is an object, the padding property can be passed. Otherwise, this function uses RSA_PKCS1_PADDING.\n\nBecause RSA public keys can", "doc_id": "c80a5404-eaee-41cd-b58c-8ba41e42d1d9", "embedding": null, "doc_hash": "ef5fb625e0615663fff6f4ef300fa7e5fa59ce2d07fd8660866ada536239d7e3", "extra_info": null, "node_info": {"start": 872609, "end": 875995}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2d0c821f-8dff-4d59-8420-53dda4141f28", "3": "752fc47b-0923-423e-b016-bc72e3f6f3c6"}}, "__type__": "1"}, "752fc47b-0923-423e-b016-bc72e3f6f3c6": {"__data__": {"text": "which may be: crypto.constants.RSA_NO_PADDING or crypto.constants.RSA_PKCS1_PADDING.\nencoding <string> The string encoding to use when buffer, key, or passphrase are strings.\nbuffer <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nReturns: <Buffer> A new Buffer with the decrypted content.\nDecrypts buffer with key.buffer was previously encrypted using the corresponding private key, for example using crypto.privateEncrypt().\n\nIf key is not a KeyObject, this function behaves as if key had been passed to crypto.createPublicKey(). If it is an object, the padding property can be passed. Otherwise, this function uses RSA_PKCS1_PADDING.\n\nBecause RSA public keys can be derived from private keys, a private key may be passed instead of a public key.\n\ncrypto.publicEncrypt(key, buffer)#\nHistory\nkey <Object> | <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey>\nkey <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey> A PEM encoded public or private key, <KeyObject>, or <CryptoKey>.\noaepHash <string> The hash function to use for OAEP padding and MGF1. Default: 'sha1'\noaepLabel <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> The label to use for OAEP padding. If not specified, no label is used.\npassphrase <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> An optional passphrase for the private key.\npadding <crypto.constants> An optional padding value defined in crypto.constants, which may be: crypto.constants.RSA_NO_PADDING, crypto.constants.RSA_PKCS1_PADDING, or crypto.constants.RSA_PKCS1_OAEP_PADDING.\nencoding <string> The string encoding to use when buffer, key, oaepLabel, or passphrase are strings.\nbuffer <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nReturns: <Buffer> A new Buffer with the encrypted content.\nEncrypts the content of buffer with key and returns a new Buffer with encrypted content. The returned data can be decrypted using the corresponding private key, for example using crypto.privateDecrypt().\n\nIf key is not a KeyObject, this function behaves as if key had been passed to crypto.createPublicKey(). If it is an object, the padding property can be passed. Otherwise, this function uses RSA_PKCS1_OAEP_PADDING.\n\nBecause RSA public keys can be derived from private keys, a private key may be passed instead of a public key.\n\ncrypto.randomBytes(size[, callback])#\nHistory\nsize <number> The number of bytes to generate. The size must not be larger than 2**31 - 1.\ncallback <Function>\nerr <Error>\nbuf <Buffer>\nReturns: <Buffer> if the callback function is not provided.\nGenerates cryptographically strong pseudorandom data. The size argument is a number indicating the number of bytes to generate.\n\nIf a callback function is provided, the bytes are generated asynchronously and the callback function is invoked with two arguments: err and buf. If an error occurs, err will be an Error object; otherwise it is null. The buf argument is a Buffer containing the generated bytes.\n\n// Asynchronous\nconst {\n  randomBytes,\n} = await import('node:crypto');\n\nrandomBytes(256, (err, buf) => {\n  if (err) throw err;\n  console.log(`${buf.length} bytes of random data: ${buf.toString('hex')}`);\n});\nIf the callback function is not provided, the random bytes are generated synchronously and returned as a Buffer. An error will be thrown if there is a problem generating the bytes.\n\n// Synchronous\nconst {\n  randomBytes,\n} = await import('node:crypto');\n\nconst buf =", "doc_id": "752fc47b-0923-423e-b016-bc72e3f6f3c6", "embedding": null, "doc_hash": "c175168f31e8c41f277f678f06b9ef4eb3a1b86861ae362f3cb5f03abd345dae", "extra_info": null, "node_info": {"start": 875933, "end": 879455}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c80a5404-eaee-41cd-b58c-8ba41e42d1d9", "3": "57030195-7c66-4857-a2d1-4b6d485b2c76"}}, "__type__": "1"}, "57030195-7c66-4857-a2d1-4b6d485b2c76": {"__data__": {"text": "bytes are generated asynchronously and the callback function is invoked with two arguments: err and buf. If an error occurs, err will be an Error object; otherwise it is null. The buf argument is a Buffer containing the generated bytes.\n\n// Asynchronous\nconst {\n  randomBytes,\n} = await import('node:crypto');\n\nrandomBytes(256, (err, buf) => {\n  if (err) throw err;\n  console.log(`${buf.length} bytes of random data: ${buf.toString('hex')}`);\n});\nIf the callback function is not provided, the random bytes are generated synchronously and returned as a Buffer. An error will be thrown if there is a problem generating the bytes.\n\n// Synchronous\nconst {\n  randomBytes,\n} = await import('node:crypto');\n\nconst buf = randomBytes(256);\nconsole.log(\n  `${buf.length} bytes of random data: ${buf.toString('hex')}`);\nThe crypto.randomBytes() method will not complete until there is sufficient entropy available. This should normally never take longer than a few milliseconds. The only time when generating the random bytes may conceivably block for a longer period of time is right after boot, when the whole system is still low on entropy.\n\nThis API uses libuv's threadpool, which can have surprising and negative performance implications for some applications; see the UV_THREADPOOL_SIZE documentation for more information.\n\nThe asynchronous version of crypto.randomBytes() is carried out in a single threadpool request. To minimize threadpool task length variation, partition large randomBytes requests when doing so as part of fulfilling a client request.\n\ncrypto.randomFillSync(buffer[, offset][, size])#\nHistory\nbuffer <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> Must be supplied. The size of the provided buffer must not be larger than 2**31 - 1.\noffset <number> Default: 0\nsize <number> Default: buffer.length - offset. The size must not be larger than 2**31 - 1.\nReturns: <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> The object passed as buffer argument.\nSynchronous version of crypto.randomFill().\n\nimport { Buffer } from 'node:buffer';\nconst { randomFillSync } = await import('node:crypto');\n\nconst buf = Buffer.alloc(10);\nconsole.log(randomFillSync(buf).toString('hex'));\n\nrandomFillSync(buf, 5);\nconsole.log(buf.toString('hex'));\n\n// The above is equivalent to the following:\nrandomFillSync(buf, 5, 5);\nconsole.log(buf.toString('hex'));\nAny ArrayBuffer, TypedArray or DataView instance may be passed as buffer.\n\nimport { Buffer } from 'node:buffer';\nconst { randomFillSync } = await import('node:crypto');\n\nconst a = new Uint32Array(10);\nconsole.log(Buffer.from(randomFillSync(a).buffer,\n                        a.byteOffset, a.byteLength).toString('hex'));\n\nconst b = new DataView(new ArrayBuffer(10));\nconsole.log(Buffer.from(randomFillSync(b).buffer,\n                        b.byteOffset, b.byteLength).toString('hex'));\n\nconst c = new ArrayBuffer(10);\nconsole.log(Buffer.from(randomFillSync(c)).toString('hex'));\ncrypto.randomFill(buffer[, offset][, size], callback)#\nHistory\nbuffer <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> Must be supplied. The size of the provided buffer must not be larger than 2**31 - 1.\noffset <number> Default: 0\nsize <number> Default: buffer.length - offset. The size must not be larger than 2**31 - 1.\ncallback <Function> function(err, buf) {}.\nThis function is similar to crypto.randomBytes() but requires the first argument to be a Buffer that will be filled. It also requires", "doc_id": "57030195-7c66-4857-a2d1-4b6d485b2c76", "embedding": null, "doc_hash": "6e22378189b4712e5164456b3501ff4d0845a56d939835af3d10e032ee0da470", "extra_info": null, "node_info": {"start": 879439, "end": 882880}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "752fc47b-0923-423e-b016-bc72e3f6f3c6", "3": "65911d61-52e2-4a25-84b6-dc019ecae9fb"}}, "__type__": "1"}, "65911d61-52e2-4a25-84b6-dc019ecae9fb": {"__data__": {"text": "           b.byteOffset, b.byteLength).toString('hex'));\n\nconst c = new ArrayBuffer(10);\nconsole.log(Buffer.from(randomFillSync(c)).toString('hex'));\ncrypto.randomFill(buffer[, offset][, size], callback)#\nHistory\nbuffer <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> Must be supplied. The size of the provided buffer must not be larger than 2**31 - 1.\noffset <number> Default: 0\nsize <number> Default: buffer.length - offset. The size must not be larger than 2**31 - 1.\ncallback <Function> function(err, buf) {}.\nThis function is similar to crypto.randomBytes() but requires the first argument to be a Buffer that will be filled. It also requires that a callback is passed in.\n\nIf the callback function is not provided, an error will be thrown.\n\nimport { Buffer } from 'node:buffer';\nconst { randomFill } = await import('node:crypto');\n\nconst buf = Buffer.alloc(10);\nrandomFill(buf, (err, buf) => {\n  if (err) throw err;\n  console.log(buf.toString('hex'));\n});\n\nrandomFill(buf, 5, (err, buf) => {\n  if (err) throw err;\n  console.log(buf.toString('hex'));\n});\n\n// The above is equivalent to the following:\nrandomFill(buf, 5, 5, (err, buf) => {\n  if (err) throw err;\n  console.log(buf.toString('hex'));\n});\nAny ArrayBuffer, TypedArray, or DataView instance may be passed as buffer.\n\nWhile this includes instances of Float32Array and Float64Array, this function should not be used to generate random floating-point numbers. The result may contain +Infinity, -Infinity, and NaN, and even if the array contains finite numbers only, they are not drawn from a uniform random distribution and have no meaningful lower or upper bounds.\n\nimport { Buffer } from 'node:buffer';\nconst { randomFill } = await import('node:crypto');\n\nconst a = new Uint32Array(10);\nrandomFill(a, (err, buf) => {\n  if (err) throw err;\n  console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)\n    .toString('hex'));\n});\n\nconst b = new DataView(new ArrayBuffer(10));\nrandomFill(b, (err, buf) => {\n  if (err) throw err;\n  console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)\n    .toString('hex'));\n});\n\nconst c = new ArrayBuffer(10);\nrandomFill(c, (err, buf) => {\n  if (err) throw err;\n  console.log(Buffer.from(buf).toString('hex'));\n});\nThis API uses libuv's threadpool, which can have surprising and negative performance implications for some applications; see the UV_THREADPOOL_SIZE documentation for more information.\n\nThe asynchronous version of crypto.randomFill() is carried out in a single threadpool request. To minimize threadpool task length variation, partition large randomFill requests when doing so as part of fulfilling a client request.\n\ncrypto.randomInt([min, ]max[, callback])#\nHistory\nmin <integer> Start of random range (inclusive). Default: 0.\nmax <integer> End of random range (exclusive).\ncallback <Function> function(err, n) {}.\nReturn a random integer n such that min <= n < max. This implementation avoids modulo bias.\n\nThe range (max - min) must be less than 248. min and max must be safe integers.\n\nIf the callback function is not provided, the random integer is generated synchronously.\n\n// Asynchronous\nconst {\n  randomInt,\n} = await import('node:crypto');\n\nrandomInt(3, (err, n) => {\n  if (err) throw err;\n  console.log(`Random number chosen from (0, 1, 2):", "doc_id": "65911d61-52e2-4a25-84b6-dc019ecae9fb", "embedding": null, "doc_hash": "53a07bcc29794db4f50c98f63a64fd932515fe5c162af63ea480d105336fdaf5", "extra_info": null, "node_info": {"start": 882926, "end": 886214}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "57030195-7c66-4857-a2d1-4b6d485b2c76", "3": "d064d297-5790-4e45-86f2-93d1f472f453"}}, "__type__": "1"}, "d064d297-5790-4e45-86f2-93d1f472f453": {"__data__": {"text": "a client request.\n\ncrypto.randomInt([min, ]max[, callback])#\nHistory\nmin <integer> Start of random range (inclusive). Default: 0.\nmax <integer> End of random range (exclusive).\ncallback <Function> function(err, n) {}.\nReturn a random integer n such that min <= n < max. This implementation avoids modulo bias.\n\nThe range (max - min) must be less than 248. min and max must be safe integers.\n\nIf the callback function is not provided, the random integer is generated synchronously.\n\n// Asynchronous\nconst {\n  randomInt,\n} = await import('node:crypto');\n\nrandomInt(3, (err, n) => {\n  if (err) throw err;\n  console.log(`Random number chosen from (0, 1, 2): ${n}`);\n});\n// Synchronous\nconst {\n  randomInt,\n} = await import('node:crypto');\n\nconst n = randomInt(3);\nconsole.log(`Random number chosen from (0, 1, 2): ${n}`);\n// With `min` argument\nconst {\n  randomInt,\n} = await import('node:crypto');\n\nconst n = randomInt(1, 7);\nconsole.log(`The dice rolled: ${n}`);\ncrypto.randomUUID([options])#\nAdded in: v15.6.0, v14.17.0\noptions <Object>\ndisableEntropyCache <boolean> By default, to improve performance, Node.js generates and caches enough random data to generate up to 128 random UUIDs. To generate a UUID without using the cache, set disableEntropyCache to true. Default: false.\nReturns: <string>\nGenerates a random RFC 4122 version 4 UUID. The UUID is generated using a cryptographic pseudorandom number generator.\n\ncrypto.scrypt(password, salt, keylen[, options], callback)#\nHistory\npassword <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nsalt <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nkeylen <number>\noptions <Object>\ncost <number> CPU/memory cost parameter. Must be a power of two greater than one. Default: 16384.\nblockSize <number> Block size parameter. Default: 8.\nparallelization <number> Parallelization parameter. Default: 1.\nN <number> Alias for cost. Only one of both may be specified.\nr <number> Alias for blockSize. Only one of both may be specified.\np <number> Alias for parallelization. Only one of both may be specified.\nmaxmem <number> Memory upper bound. It is an error when (approximately) 128 * N * r > maxmem. Default: 32 * 1024 * 1024.\ncallback <Function>\nerr <Error>\nderivedKey <Buffer>\nProvides an asynchronous scrypt implementation. Scrypt is a password-based key derivation function that is designed to be expensive computationally and memory-wise in order to make brute-force attacks unrewarding.\n\nThe salt should be as unique as possible. It is recommended that a salt is random and at least 16 bytes long. See NIST SP 800-132 for details.\n\nWhen passing strings for password or salt, please consider caveats when using strings as inputs to cryptographic APIs.\n\nThe callback function is called with two arguments: err and derivedKey. err is an exception object when key derivation fails, otherwise err is null. derivedKey is passed to the callback as a Buffer.\n\nAn exception is thrown when any of the input arguments specify invalid values or types.\n\nconst {\n  scrypt,\n} = await import('node:crypto');\n\n// Using the factory defaults.\nscrypt('password', 'salt', 64, (err, derivedKey) => {\n  if (err) throw err;\n  console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'\n});\n// Using a custom N parameter. Must be a power of two.\nscrypt('password', 'salt', 64, { N: 1024 }, (err, derivedKey) => {\n  if", "doc_id": "d064d297-5790-4e45-86f2-93d1f472f453", "embedding": null, "doc_hash": "f238c4563fbfcef122a86646767615d148e4852bed38d84a1b8e68ce4893101d", "extra_info": null, "node_info": {"start": 886218, "end": 889592}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "65911d61-52e2-4a25-84b6-dc019ecae9fb", "3": "1aa1363d-88f8-410f-941f-68d9e2d4cfd7"}}, "__type__": "1"}, "1aa1363d-88f8-410f-941f-68d9e2d4cfd7": {"__data__": {"text": "callback function is called with two arguments: err and derivedKey. err is an exception object when key derivation fails, otherwise err is null. derivedKey is passed to the callback as a Buffer.\n\nAn exception is thrown when any of the input arguments specify invalid values or types.\n\nconst {\n  scrypt,\n} = await import('node:crypto');\n\n// Using the factory defaults.\nscrypt('password', 'salt', 64, (err, derivedKey) => {\n  if (err) throw err;\n  console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'\n});\n// Using a custom N parameter. Must be a power of two.\nscrypt('password', 'salt', 64, { N: 1024 }, (err, derivedKey) => {\n  if (err) throw err;\n  console.log(derivedKey.toString('hex'));  // '3745e48...aa39b34'\n});\ncrypto.scryptSync(password, salt, keylen[, options])#\nHistory\npassword <string> | <Buffer> | <TypedArray> | <DataView>\nsalt <string> | <Buffer> | <TypedArray> | <DataView>\nkeylen <number>\noptions <Object>\ncost <number> CPU/memory cost parameter. Must be a power of two greater than one. Default: 16384.\nblockSize <number> Block size parameter. Default: 8.\nparallelization <number> Parallelization parameter. Default: 1.\nN <number> Alias for cost. Only one of both may be specified.\nr <number> Alias for blockSize. Only one of both may be specified.\np <number> Alias for parallelization. Only one of both may be specified.\nmaxmem <number> Memory upper bound. It is an error when (approximately) 128 * N * r > maxmem. Default: 32 * 1024 * 1024.\nReturns: <Buffer>\nProvides a synchronous scrypt implementation. Scrypt is a password-based key derivation function that is designed to be expensive computationally and memory-wise in order to make brute-force attacks unrewarding.\n\nThe salt should be as unique as possible. It is recommended that a salt is random and at least 16 bytes long. See NIST SP 800-132 for details.\n\nWhen passing strings for password or salt, please consider caveats when using strings as inputs to cryptographic APIs.\n\nAn exception is thrown when key derivation fails, otherwise the derived key is returned as a Buffer.\n\nAn exception is thrown when any of the input arguments specify invalid values or types.\n\nconst {\n  scryptSync,\n} = await import('node:crypto');\n// Using the factory defaults.\n\nconst key1 = scryptSync('password', 'salt', 64);\nconsole.log(key1.toString('hex'));  // '3745e48...08d59ae'\n// Using a custom N parameter. Must be a power of two.\nconst key2 = scryptSync('password', 'salt', 64, { N: 1024 });\nconsole.log(key2.toString('hex'));  // '3745e48...aa39b34'\ncrypto.secureHeapUsed()#\nAdded in: v15.6.0\nReturns: <Object>\ntotal <number> The total allocated secure heap size as specified using the --secure-heap=n command-line flag.\nmin <number> The minimum allocation from the secure heap as specified using the --secure-heap-min command-line flag.\nused <number> The total number of bytes currently allocated from the secure heap.\nutilization <number> The calculated ratio of used to total allocated bytes.\ncrypto.setEngine(engine[, flags])#\nAdded in: v0.11.11\nengine <string>\nflags <crypto.constants> Default: crypto.constants.ENGINE_METHOD_ALL\nLoad and set the engine for some or all OpenSSL functions (selected by flags).\n\nengine could be either an id or a path to the engine's shared library.\n\nThe optional flags argument uses ENGINE_METHOD_ALL by default. The flags is a bit field taking one of or a mix of the following flags (defined in", "doc_id": "1aa1363d-88f8-410f-941f-68d9e2d4cfd7", "embedding": null, "doc_hash": "bbf217192736f6f4e6e72c2060953271d07ec3ec8f9efd2da3b3930e69ec55f8", "extra_info": null, "node_info": {"start": 889609, "end": 893021}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d064d297-5790-4e45-86f2-93d1f472f453", "3": "0d06cad7-65c5-42e2-afc7-fa0cf6186048"}}, "__type__": "1"}, "0d06cad7-65c5-42e2-afc7-fa0cf6186048": {"__data__": {"text": "command-line flag.\nmin <number> The minimum allocation from the secure heap as specified using the --secure-heap-min command-line flag.\nused <number> The total number of bytes currently allocated from the secure heap.\nutilization <number> The calculated ratio of used to total allocated bytes.\ncrypto.setEngine(engine[, flags])#\nAdded in: v0.11.11\nengine <string>\nflags <crypto.constants> Default: crypto.constants.ENGINE_METHOD_ALL\nLoad and set the engine for some or all OpenSSL functions (selected by flags).\n\nengine could be either an id or a path to the engine's shared library.\n\nThe optional flags argument uses ENGINE_METHOD_ALL by default. The flags is a bit field taking one of or a mix of the following flags (defined in crypto.constants):\n\ncrypto.constants.ENGINE_METHOD_RSA\ncrypto.constants.ENGINE_METHOD_DSA\ncrypto.constants.ENGINE_METHOD_DH\ncrypto.constants.ENGINE_METHOD_RAND\ncrypto.constants.ENGINE_METHOD_EC\ncrypto.constants.ENGINE_METHOD_CIPHERS\ncrypto.constants.ENGINE_METHOD_DIGESTS\ncrypto.constants.ENGINE_METHOD_PKEY_METHS\ncrypto.constants.ENGINE_METHOD_PKEY_ASN1_METHS\ncrypto.constants.ENGINE_METHOD_ALL\ncrypto.constants.ENGINE_METHOD_NONE\ncrypto.setFips(bool)#\nAdded in: v10.0.0\nbool <boolean> true to enable FIPS mode.\nEnables the FIPS compliant crypto provider in a FIPS-enabled Node.js build. Throws an error if FIPS mode is not available.\n\ncrypto.sign(algorithm, data, key[, callback])#\nHistory\nalgorithm <string> | <null> | <undefined>\ndata <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nkey <Object> | <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey>\ncallback <Function>\nerr <Error>\nsignature <Buffer>\nReturns: <Buffer> if the callback function is not provided.\nCalculates and returns the signature for data using the given private key and algorithm. If algorithm is null or undefined, then the algorithm is dependent upon the key type (especially Ed25519 and Ed448).\n\nIf key is not a KeyObject, this function behaves as if key had been passed to crypto.createPrivateKey(). If it is an object, the following additional properties can be passed:\n\ndsaEncoding <string> For DSA and ECDSA, this option specifies the format of the generated signature. It can be one of the following:\n\n'der' (default): DER-encoded ASN.1 signature structure encoding (r, s).\n'ieee-p1363': Signature format r || s as proposed in IEEE-P1363.\npadding <integer> Optional padding value for RSA, one of the following:\n\ncrypto.constants.RSA_PKCS1_PADDING (default)\ncrypto.constants.RSA_PKCS1_PSS_PADDING\nRSA_PKCS1_PSS_PADDING will use MGF1 with the same hash function used to sign the message as specified in section 3.1 of RFC 4055.\n\nsaltLength <integer> Salt length for when padding is RSA_PKCS1_PSS_PADDING. The special value crypto.constants.RSA_PSS_SALTLEN_DIGEST sets the salt length to the digest size, crypto.constants.RSA_PSS_SALTLEN_MAX_SIGN (default) sets it to the maximum permissible value.\n\nIf the callback function is provided this function uses libuv's threadpool.\n\ncrypto.subtle#\nAdded in: v17.4.0\nType: <SubtleCrypto>\nA convenient alias for crypto.webcrypto.subtle.\n\ncrypto.timingSafeEqual(a, b)#\nHistory\na", "doc_id": "0d06cad7-65c5-42e2-afc7-fa0cf6186048", "embedding": null, "doc_hash": "5f081c7a036f96e2ee0fa426eefc82a0466aef4c982ffecd5735fa5f09d17a54", "extra_info": null, "node_info": {"start": 892935, "end": 896108}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1aa1363d-88f8-410f-941f-68d9e2d4cfd7", "3": "3924f031-e68a-4a2c-9f41-eb974857a79c"}}, "__type__": "1"}, "3924f031-e68a-4a2c-9f41-eb974857a79c": {"__data__": {"text": "use MGF1 with the same hash function used to sign the message as specified in section 3.1 of RFC 4055.\n\nsaltLength <integer> Salt length for when padding is RSA_PKCS1_PSS_PADDING. The special value crypto.constants.RSA_PSS_SALTLEN_DIGEST sets the salt length to the digest size, crypto.constants.RSA_PSS_SALTLEN_MAX_SIGN (default) sets it to the maximum permissible value.\n\nIf the callback function is provided this function uses libuv's threadpool.\n\ncrypto.subtle#\nAdded in: v17.4.0\nType: <SubtleCrypto>\nA convenient alias for crypto.webcrypto.subtle.\n\ncrypto.timingSafeEqual(a, b)#\nHistory\na <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nb <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nReturns: <boolean>\nThis function compares the underlying bytes that represent the given ArrayBuffer, TypedArray, or DataView instances using a constant-time algorithm.\n\nThis function does not leak timing information that would allow an attacker to guess one of the values. This is suitable for comparing HMAC digests or secret values like authentication cookies or capability urls.\n\na and b must both be Buffers, TypedArrays, or DataViews, and they must have the same byte length. An error is thrown if a and b have different byte lengths.\n\nIf at least one of a and b is a TypedArray with more than one byte per entry, such as Uint16Array, the result will be computed using the platform byte order.\n\nWhen both of the inputs are Float32Arrays or Float64Arrays, this function might return unexpected results due to IEEE 754 encoding of floating-point numbers. In particular, neither x === y nor Object.is(x, y) implies that the byte representations of two floating-point numbers x and y are equal.\n\nUse of crypto.timingSafeEqual does not guarantee that the surrounding code is timing-safe. Care should be taken to ensure that the surrounding code does not introduce timing vulnerabilities.\n\ncrypto.verify(algorithm, data, key, signature[, callback])#\nHistory\nalgorithm <string> | <null> | <undefined>\ndata <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\nkey <Object> | <string> | <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView> | <KeyObject> | <CryptoKey>\nsignature <ArrayBuffer> | <Buffer> | <TypedArray> | <DataView>\ncallback <Function>\nerr <Error>\nresult <boolean>\nReturns: <boolean> true or false depending on the validity of the signature for the data and public key if the callback function is not provided.\nVerifies the given signature for data using the given key and algorithm. If algorithm is null or undefined, then the algorithm is dependent upon the key type (especially Ed25519 and Ed448).\n\nIf key is not a KeyObject, this function behaves as if key had been passed to crypto.createPublicKey(). If it is an object, the following additional properties can be passed:\n\ndsaEncoding <string> For DSA and ECDSA, this option specifies the format of the signature. It can be one of the following:\n\n'der' (default): DER-encoded ASN.1 signature structure encoding (r, s).\n'ieee-p1363': Signature format r || s as proposed in IEEE-P1363.\npadding <integer> Optional padding value for RSA, one of the following:\n\ncrypto.constants.RSA_PKCS1_PADDING (default)\ncrypto.constants.RSA_PKCS1_PSS_PADDING\nRSA_PKCS1_PSS_PADDING will use MGF1 with the same hash function used to sign the message as specified in section 3.1 of RFC 4055.\n\nsaltLength <integer> Salt length for when padding is", "doc_id": "3924f031-e68a-4a2c-9f41-eb974857a79c", "embedding": null, "doc_hash": "c8b7bc8010232568f95c14e2efcffdea108da448505a1b505e7cb249559cfdc4", "extra_info": null, "node_info": {"start": 896216, "end": 899608}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0d06cad7-65c5-42e2-afc7-fa0cf6186048", "3": "24779009-debb-4ec8-a04a-1647275e0540"}}, "__type__": "1"}, "24779009-debb-4ec8-a04a-1647275e0540": {"__data__": {"text": "<string> For DSA and ECDSA, this option specifies the format of the signature. It can be one of the following:\n\n'der' (default): DER-encoded ASN.1 signature structure encoding (r, s).\n'ieee-p1363': Signature format r || s as proposed in IEEE-P1363.\npadding <integer> Optional padding value for RSA, one of the following:\n\ncrypto.constants.RSA_PKCS1_PADDING (default)\ncrypto.constants.RSA_PKCS1_PSS_PADDING\nRSA_PKCS1_PSS_PADDING will use MGF1 with the same hash function used to sign the message as specified in section 3.1 of RFC 4055.\n\nsaltLength <integer> Salt length for when padding is RSA_PKCS1_PSS_PADDING. The special value crypto.constants.RSA_PSS_SALTLEN_DIGEST sets the salt length to the digest size, crypto.constants.RSA_PSS_SALTLEN_MAX_SIGN (default) sets it to the maximum permissible value.\n\nThe signature argument is the previously calculated signature for the data.\n\nBecause public keys can be derived from private keys, a private key or a public key may be passed for key.\n\nIf the callback function is provided this function uses libuv's threadpool.\n\ncrypto.webcrypto#\nAdded in: v15.0.0\nType: <Crypto> An implementation of the Web Crypto API standard.\n\nSee the Web Crypto API documentation for details.\n\nNotes#\nUsing strings as inputs to cryptographic APIs#\nFor historical reasons, many cryptographic APIs provided by Node.js accept strings as inputs where the underlying cryptographic algorithm works on byte sequences. These instances include plaintexts, ciphertexts, symmetric keys, initialization vectors, passphrases, salts, authentication tags, and additional authenticated data.\n\nWhen passing strings to cryptographic APIs, consider the following factors.\n\nNot all byte sequences are valid UTF-8 strings. Therefore, when a byte sequence of length n is derived from a string, its entropy is generally lower than the entropy of a random or pseudorandom n byte sequence. For example, no UTF-8 string will result in the byte sequence c0 af. Secret keys should almost exclusively be random or pseudorandom byte sequences.\n\nSimilarly, when converting random or pseudorandom byte sequences to UTF-8 strings, subsequences that do not represent valid code points may be replaced by the Unicode replacement character (U+FFFD). The byte representation of the resulting Unicode string may, therefore, not be equal to the byte sequence that the string was created from.\n\nconst original = [0xc0, 0xaf];\nconst bytesAsString = Buffer.from(original).toString('utf8');\nconst stringAsBytes = Buffer.from(bytesAsString, 'utf8');\nconsole.log(stringAsBytes);\n// Prints '<Buffer ef bf bd ef bf bd>'.\nThe outputs of ciphers, hash functions, signature algorithms, and key derivation functions are pseudorandom byte sequences and should not be used as Unicode strings.\n\nWhen strings are obtained from user input, some Unicode characters can be represented in multiple equivalent ways that result in different byte sequences. For example, when passing a user passphrase to a key derivation function, such as PBKDF2 or scrypt, the result of the key derivation function depends on whether the string uses composed or decomposed characters. Node.js does not normalize character representations. Developers should consider using String.prototype.normalize() on user inputs before passing them to cryptographic APIs.\n\nLegacy streams API (prior to Node.js 0.10)#\nThe Crypto module was added to Node.js before there was the concept of a unified Stream API, and before there were Buffer objects for handling binary data. As such, the many of the crypto defined classes have methods not typically found on other Node.js classes that implement the streams API (e.g. update(), final(), or digest()). Also, many methods accepted and returned 'latin1' encoded strings", "doc_id": "24779009-debb-4ec8-a04a-1647275e0540", "embedding": null, "doc_hash": "667bd3ee7667eadd655ab654a7afa70911f17b61983f3a545c5acc535281114e", "extra_info": null, "node_info": {"start": 899622, "end": 903374}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3924f031-e68a-4a2c-9f41-eb974857a79c", "3": "4cb50226-55bd-437d-b846-9c54ccd65582"}}, "__type__": "1"}, "4cb50226-55bd-437d-b846-9c54ccd65582": {"__data__": {"text": "passing a user passphrase to a key derivation function, such as PBKDF2 or scrypt, the result of the key derivation function depends on whether the string uses composed or decomposed characters. Node.js does not normalize character representations. Developers should consider using String.prototype.normalize() on user inputs before passing them to cryptographic APIs.\n\nLegacy streams API (prior to Node.js 0.10)#\nThe Crypto module was added to Node.js before there was the concept of a unified Stream API, and before there were Buffer objects for handling binary data. As such, the many of the crypto defined classes have methods not typically found on other Node.js classes that implement the streams API (e.g. update(), final(), or digest()). Also, many methods accepted and returned 'latin1' encoded strings by default rather than Buffers. This default was changed after Node.js v0.8 to use Buffer objects by default instead.\n\nSupport for weak or compromised algorithms#\nThe node:crypto module still supports some algorithms which are already compromised and are not currently recommended for use. The API also allows the use of ciphers and hashes with a small key size that are too weak for safe use.\n\nUsers should take full responsibility for selecting the crypto algorithm and key size according to their security requirements.\n\nBased on the recommendations of NIST SP 800-131A:\n\nMD5 and SHA-1 are no longer acceptable where collision resistance is required such as digital signatures.\nThe key used with RSA, DSA, and DH algorithms is recommended to have at least 2048 bits and that of the curve of ECDSA and ECDH at least 224 bits, to be safe to use for several years.\nThe DH groups of modp1, modp2 and modp5 have a key size smaller than 2048 bits and are not recommended.\nSee the reference for other recommendations and details.\n\nSome algorithms that have known weaknesses and are of little relevance in practice are only available through the legacy provider, which is not enabled by default.\n\nCCM mode#\nCCM is one of the supported AEAD algorithms. Applications which use this mode must adhere to certain restrictions when using the cipher API:\n\nThe authentication tag length must be specified during cipher creation by setting the authTagLength option and must be one of 4, 6, 8, 10, 12, 14 or 16 bytes.\nThe length of the initialization vector (nonce) N must be between 7 and 13 bytes (7 \u2264 N \u2264 13).\nThe length of the plaintext is limited to 2 ** (8 * (15 - N)) bytes.\nWhen decrypting, the authentication tag must be set via setAuthTag() before calling update(). Otherwise, decryption will fail and final() will throw an error in compliance with section 2.6 of RFC 3610.\nUsing stream methods such as write(data), end(data) or pipe() in CCM mode might fail as CCM cannot handle more than one chunk of data per instance.\nWhen passing additional authenticated data (AAD), the length of the actual message in bytes must be passed to setAAD() via the plaintextLength option. Many crypto libraries include the authentication tag in the ciphertext, which means that they produce ciphertexts of the length plaintextLength + authTagLength. Node.js does not include the authentication tag, so the ciphertext length is always plaintextLength. This is not necessary if no AAD is used.\nAs CCM processes the whole message at once, update() must be called exactly once.\nEven though calling update() is sufficient to encrypt/decrypt the message, applications must call final() to compute or verify the authentication tag.\nimport { Buffer } from 'node:buffer';\nconst {\n  createCipheriv,\n  createDecipheriv,\n  randomBytes,\n} = await import('node:crypto');\n\nconst key = 'keykeykeykeykeykeykeykey';\nconst nonce = randomBytes(12);\n\nconst aad = Buffer.from('0123456789', 'hex');\n\nconst cipher = createCipheriv('aes-192-ccm', key, nonce, {\n  authTagLength: 16,\n});\nconst plaintext = 'Hello", "doc_id": "4cb50226-55bd-437d-b846-9c54ccd65582", "embedding": null, "doc_hash": "c32f3a468a732cf298213a7ecef11b8e448b90003c03bb57b1338890a47710dd", "extra_info": null, "node_info": {"start": 903198, "end": 907073}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "24779009-debb-4ec8-a04a-1647275e0540", "3": "0bb3bcb0-6119-41fb-b2ab-c4ee52b6dc8e"}}, "__type__": "1"}, "0bb3bcb0-6119-41fb-b2ab-c4ee52b6dc8e": {"__data__": {"text": "This is not necessary if no AAD is used.\nAs CCM processes the whole message at once, update() must be called exactly once.\nEven though calling update() is sufficient to encrypt/decrypt the message, applications must call final() to compute or verify the authentication tag.\nimport { Buffer } from 'node:buffer';\nconst {\n  createCipheriv,\n  createDecipheriv,\n  randomBytes,\n} = await import('node:crypto');\n\nconst key = 'keykeykeykeykeykeykeykey';\nconst nonce = randomBytes(12);\n\nconst aad = Buffer.from('0123456789', 'hex');\n\nconst cipher = createCipheriv('aes-192-ccm', key, nonce, {\n  authTagLength: 16,\n});\nconst plaintext = 'Hello world';\ncipher.setAAD(aad, {\n  plaintextLength: Buffer.byteLength(plaintext),\n});\nconst ciphertext = cipher.update(plaintext, 'utf8');\ncipher.final();\nconst tag = cipher.getAuthTag();\n\n// Now transmit { ciphertext, nonce, tag }.\n\nconst decipher = createDecipheriv('aes-192-ccm', key, nonce, {\n  authTagLength: 16,\n});\ndecipher.setAuthTag(tag);\ndecipher.setAAD(aad, {\n  plaintextLength: ciphertext.length,\n});\nconst receivedPlaintext = decipher.update(ciphertext, null, 'utf8');\n\ntry {\n  decipher.final();\n} catch (err) {\n  throw new Error('Authentication failed!', { cause: err });\n}\n\nconsole.log(receivedPlaintext);\nCrypto constants#\nThe following constants exported by crypto.constants apply to various uses of the node:crypto, node:tls, and node:https modules and are generally specific to OpenSSL.\n\nOpenSSL options#\nSee the list of SSL OP Flags for details.\n\nConstant\tDescription\nSSL_OP_ALL\tApplies multiple bug workarounds within OpenSSL. See https://www.openssl.org/docs/man3.0/man3/SSL_CTX_set_options.html for detail.\nSSL_OP_ALLOW_NO_DHE_KEX\tInstructs OpenSSL to allow a non-[EC]DHE-based key exchange mode for TLS v1.3\nSSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION\tAllows legacy insecure renegotiation between OpenSSL and unpatched clients or servers. See https://www.openssl.org/docs/man3.0/man3/SSL_CTX_set_options.html.\nSSL_OP_CIPHER_SERVER_PREFERENCE\tAttempts to use the server's preferences instead of the client's when selecting a cipher. Behavior depends on protocol version. See https://www.openssl.org/docs/man3.0/man3/SSL_CTX_set_options.html.\nSSL_OP_CISCO_ANYCONNECT\tInstructs OpenSSL to use Cisco's \"speshul\" version of DTLS_BAD_VER.\nSSL_OP_COOKIE_EXCHANGE\tInstructs OpenSSL to turn on cookie exchange.\nSSL_OP_CRYPTOPRO_TLSEXT_BUG\tInstructs OpenSSL to add server-hello extension from an early version of the cryptopro draft.\nSSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\tInstructs OpenSSL to disable a SSL 3.0/TLS 1.0 vulnerability workaround added in OpenSSL 0.9.6d.\nSSL_OP_LEGACY_SERVER_CONNECT\tAllows initial connection to servers that do not support RI.\nSSL_OP_NO_COMPRESSION\tInstructs OpenSSL to disable support for SSL/TLS compression.\nSSL_OP_NO_ENCRYPT_THEN_MAC\tInstructs OpenSSL to disable encrypt-then-MAC.\nSSL_OP_NO_QUERY_MTU\t\nSSL_OP_NO_RENEGOTIATION\tInstructs OpenSSL to disable", "doc_id": "0bb3bcb0-6119-41fb-b2ab-c4ee52b6dc8e", "embedding": null, "doc_hash": "08f66ae09547eb35f43419e97afc4f8a82422c53a6d3df3028b5985b78b39785", "extra_info": null, "node_info": {"start": 907209, "end": 910138}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4cb50226-55bd-437d-b846-9c54ccd65582", "3": "868e48e7-1bf2-4384-a569-380a8a6dc23d"}}, "__type__": "1"}, "868e48e7-1bf2-4384-a569-380a8a6dc23d": {"__data__": {"text": "OpenSSL to add server-hello extension from an early version of the cryptopro draft.\nSSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\tInstructs OpenSSL to disable a SSL 3.0/TLS 1.0 vulnerability workaround added in OpenSSL 0.9.6d.\nSSL_OP_LEGACY_SERVER_CONNECT\tAllows initial connection to servers that do not support RI.\nSSL_OP_NO_COMPRESSION\tInstructs OpenSSL to disable support for SSL/TLS compression.\nSSL_OP_NO_ENCRYPT_THEN_MAC\tInstructs OpenSSL to disable encrypt-then-MAC.\nSSL_OP_NO_QUERY_MTU\t\nSSL_OP_NO_RENEGOTIATION\tInstructs OpenSSL to disable renegotiation.\nSSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION\tInstructs OpenSSL to always start a new session when performing renegotiation.\nSSL_OP_NO_SSLv2\tInstructs OpenSSL to turn off SSL v2\nSSL_OP_NO_SSLv3\tInstructs OpenSSL to turn off SSL v3\nSSL_OP_NO_TICKET\tInstructs OpenSSL to disable use of RFC4507bis tickets.\nSSL_OP_NO_TLSv1\tInstructs OpenSSL to turn off TLS v1\nSSL_OP_NO_TLSv1_1\tInstructs OpenSSL to turn off TLS v1.1\nSSL_OP_NO_TLSv1_2\tInstructs OpenSSL to turn off TLS v1.2\nSSL_OP_NO_TLSv1_3\tInstructs OpenSSL to turn off TLS v1.3\nSSL_OP_PRIORITIZE_CHACHA\tInstructs OpenSSL server to prioritize ChaCha20-Poly1305 when the client does. This option has no effect if SSL_OP_CIPHER_SERVER_PREFERENCE is not enabled.\nSSL_OP_TLS_ROLLBACK_BUG\tInstructs OpenSSL to disable version rollback attack detection.\nOpenSSL engine constants#\nConstant\tDescription\nENGINE_METHOD_RSA\tLimit engine usage to RSA\nENGINE_METHOD_DSA\tLimit engine usage to DSA\nENGINE_METHOD_DH\tLimit engine usage to DH\nENGINE_METHOD_RAND\tLimit engine usage to RAND\nENGINE_METHOD_EC\tLimit engine usage to EC\nENGINE_METHOD_CIPHERS\tLimit engine usage to CIPHERS\nENGINE_METHOD_DIGESTS\tLimit engine usage to DIGESTS\nENGINE_METHOD_PKEY_METHS\tLimit engine usage to PKEY_METHDS\nENGINE_METHOD_PKEY_ASN1_METHS\tLimit engine usage to PKEY_ASN1_METHS\nENGINE_METHOD_ALL\t\nENGINE_METHOD_NONE\t\nOther OpenSSL constants#\nConstant\tDescription\nDH_CHECK_P_NOT_SAFE_PRIME\t\nDH_CHECK_P_NOT_PRIME\t\nDH_UNABLE_TO_CHECK_GENERATOR\t\nDH_NOT_SUITABLE_GENERATOR\t\nALPN_ENABLED\t\nRSA_PKCS1_PADDING\t\nRSA_SSLV23_PADDING\t\nRSA_NO_PADDING\t\nRSA_PKCS1_OAEP_PADDING\t\nRSA_X931_PADDING\t\nRSA_PKCS1_PSS_PADDING\t\nRSA_PSS_SALTLEN_DIGEST\tSets the salt length for RSA_PKCS1_PSS_PADDING to the digest size when signing or verifying.\nRSA_PSS_SALTLEN_MAX_SIGN\tSets the salt length for RSA_PKCS1_PSS_PADDING to the maximum permissible value when signing data.\nRSA_PSS_SALTLEN_AUTO\tCauses the salt length for RSA_PKCS1_PSS_PADDING to be determined automatically when verifying a signature.\nPOINT_CONVERSION_COMPRESSED\t\nPOINT_CONVERSION_UNCOMPRESSED\t\nPOINT_CONVERSION_HYBRID\t\nNode.js crypto", "doc_id": "868e48e7-1bf2-4384-a569-380a8a6dc23d", "embedding": null, "doc_hash": "681daab2f95b638014edbab0223564df2cb1cc721c4e72ac771e564c23cad132", "extra_info": null, "node_info": {"start": 910206, "end": 912845}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0bb3bcb0-6119-41fb-b2ab-c4ee52b6dc8e", "3": "585549a2-c5eb-49ea-8719-32f277da79d6"}}, "__type__": "1"}, "585549a2-c5eb-49ea-8719-32f277da79d6": {"__data__": {"text": "the salt length for RSA_PKCS1_PSS_PADDING to the digest size when signing or verifying.\nRSA_PSS_SALTLEN_MAX_SIGN\tSets the salt length for RSA_PKCS1_PSS_PADDING to the maximum permissible value when signing data.\nRSA_PSS_SALTLEN_AUTO\tCauses the salt length for RSA_PKCS1_PSS_PADDING to be determined automatically when verifying a signature.\nPOINT_CONVERSION_COMPRESSED\t\nPOINT_CONVERSION_UNCOMPRESSED\t\nPOINT_CONVERSION_HYBRID\t\nNode.js crypto constants#\nConstant\tDescription\ndefaultCoreCipherList\tSpecifies the built-in default cipher list used by Node.js.\ndefaultCipherList\tSpecifies the active default cipher list used by the current Node.js process.\nDebugger#\nStability: 2 - Stable\nNode.js includes a command-line debugging utility. The Node.js debugger client is not a full-featured debugger, but simple stepping and inspection are possible.\n\nTo use it, start Node.js with the inspect argument followed by the path to the script to debug.\n\n$ node inspect myscript.js\n< Debugger listening on ws://127.0.0.1:9229/621111f9-ffcb-4e82-b718-48a145fa5db8\n< For help, see: https://nodejs.org/en/docs/inspector\n<\nconnecting to 127.0.0.1:9229 ... ok\n< Debugger attached.\n<\n ok\nBreak on start in myscript.js:2\n  1 // myscript.js\n> 2 global.x = 5;\n  3 setTimeout(() => {\n  4   debugger;\ndebug>\nThe debugger automatically breaks on the first executable line. To instead run until the first breakpoint (specified by a debugger statement), set the NODE_INSPECT_RESUME_ON_START environment variable to 1.\n\n$ cat myscript.js\n// myscript.js\nglobal.x = 5;\nsetTimeout(() => {\n  debugger;\n  console.log('world');\n}, 1000);\nconsole.log('hello');\n$ NODE_INSPECT_RESUME_ON_START=1 node inspect myscript.js\n< Debugger listening on ws://127.0.0.1:9229/f1ed133e-7876-495b-83ae-c32c6fc319c2\n< For help, see: https://nodejs.org/en/docs/inspector\n<\nconnecting to 127.0.0.1:9229 ... ok\n< Debugger attached.\n<\n< hello\n<\nbreak in myscript.js:4\n  2 global.x = 5;\n  3 setTimeout(() => {\n> 4   debugger;\n  5   console.log('world');\n  6 }, 1000);\ndebug> next\nbreak in myscript.js:5\n  3 setTimeout(() => {\n  4   debugger;\n> 5   console.log('world');\n  6 }, 1000);\n  7 console.log('hello');\ndebug> repl\nPress Ctrl+C to leave debug repl\n> x\n5\n> 2 + 2\n4\ndebug> next\n< world\n<\nbreak in myscript.js:6\n  4   debugger;\n  5   console.log('world');\n> 6 }, 1000);\n  7 console.log('hello');\n  8\ndebug> .exit\n$\nThe repl command allows code to be evaluated remotely. The next command steps to the next line. Type help to see what other commands are available.\n\nPressing enter without typing a command will repeat the previous debugger command.\n\nWatchers#\nIt is possible to watch expression and variable values while debugging. On every breakpoint, each expression from the watchers list will be evaluated in the current context and displayed immediately before the breakpoint's source code listing.\n\nTo begin watching an expression, type watch('my_expression'). The command watchers will print the active watchers. To remove a watcher, type unwatch('my_expression').\n\nCommand", "doc_id": "585549a2-c5eb-49ea-8719-32f277da79d6", "embedding": null, "doc_hash": "edeb6209deb8e3f2eb0f4c3e4dbf7168d82230aa218f91000baece0cbedd75c1", "extra_info": null, "node_info": {"start": 912934, "end": 915960}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "868e48e7-1bf2-4384-a569-380a8a6dc23d", "3": "b6577ba2-9638-4ab9-a8e6-05dfb760f9a5"}}, "__type__": "1"}, "b6577ba2-9638-4ab9-a8e6-05dfb760f9a5": {"__data__": {"text": " 4   debugger;\n  5   console.log('world');\n> 6 }, 1000);\n  7 console.log('hello');\n  8\ndebug> .exit\n$\nThe repl command allows code to be evaluated remotely. The next command steps to the next line. Type help to see what other commands are available.\n\nPressing enter without typing a command will repeat the previous debugger command.\n\nWatchers#\nIt is possible to watch expression and variable values while debugging. On every breakpoint, each expression from the watchers list will be evaluated in the current context and displayed immediately before the breakpoint's source code listing.\n\nTo begin watching an expression, type watch('my_expression'). The command watchers will print the active watchers. To remove a watcher, type unwatch('my_expression').\n\nCommand reference#\nStepping#\ncont, c: Continue execution\nnext, n: Step next\nstep, s: Step in\nout, o: Step out\npause: Pause running code (like pause button in Developer Tools)\nBreakpoints#\nsetBreakpoint(), sb(): Set breakpoint on current line\nsetBreakpoint(line), sb(line): Set breakpoint on specific line\nsetBreakpoint('fn()'), sb(...): Set breakpoint on a first statement in function's body\nsetBreakpoint('script.js', 1), sb(...): Set breakpoint on first line of script.js\nsetBreakpoint('script.js', 1, 'num < 4'), sb(...): Set conditional breakpoint on first line of script.js that only breaks when num < 4 evaluates to true\nclearBreakpoint('script.js', 1), cb(...): Clear breakpoint in script.js on line 1\nIt is also possible to set a breakpoint in a file (module) that is not loaded yet:\n\n$ node inspect main.js\n< Debugger listening on ws://127.0.0.1:9229/48a5b28a-550c-471b-b5e1-d13dd7165df9\n< For help, see: https://nodejs.org/en/docs/inspector\n<\nconnecting to 127.0.0.1:9229 ... ok\n< Debugger attached.\n<\nBreak on start in main.js:1\n> 1 const mod = require('./mod.js');\n  2 mod.hello();\n  3 mod.hello();\ndebug> setBreakpoint('mod.js', 22)\nWarning: script 'mod.js' was not loaded yet.\ndebug> c\nbreak in mod.js:22\n 20 // USE OR OTHER DEALINGS IN THE SOFTWARE.\n 21\n>22 exports.hello = function() {\n 23   return 'hello from module';\n 24 };\ndebug>\nIt is also possible to set a conditional breakpoint that only breaks when a given expression evaluates to true:\n\n$ node inspect main.js\n< Debugger listening on ws://127.0.0.1:9229/ce24daa8-3816-44d4-b8ab-8273c8a66d35\n< For help, see: https://nodejs.org/en/docs/inspector\n<\nconnecting to 127.0.0.1:9229 ... ok\n< Debugger attached.\nBreak on start in main.js:7\n  5 }\n  6\n> 7 addOne(10);\n  8 addOne(-1);\n  9\ndebug> setBreakpoint('main.js', 4, 'num < 0')\n  1 'use strict';\n  2\n  3 function addOne(num) {\n> 4   return num + 1;\n  5 }\n  6\n  7 addOne(10);\n  8 addOne(-1);\n  9\ndebug> cont\nbreak in main.js:4\n  2\n  3 function addOne(num) {\n> 4   return num + 1;\n  5 }\n  6\ndebug> exec('num')\n-1\ndebug>\n\nInformation#\nbacktrace, bt: Print backtrace of current execution frame\nlist(5): List scripts source code with 5 line context (5 lines before and after)\nwatch(expr): Add expression to watch list\nunwatch(expr): Remove expression from watch list\nunwatch(index): Remove expression at specific index from watch list\nwatchers: List all watchers and their values (automatically listed on each", "doc_id": "b6577ba2-9638-4ab9-a8e6-05dfb760f9a5", "embedding": null, "doc_hash": "2a5e3a484d7e545c9df2d4732b163e905fd3d4d652f4002eae385eec38bf4c70", "extra_info": null, "node_info": {"start": 915706, "end": 918890}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "585549a2-c5eb-49ea-8719-32f277da79d6", "3": "ec8415e9-d302-4fb8-a348-507bce801f2a"}}, "__type__": "1"}, "ec8415e9-d302-4fb8-a348-507bce801f2a": {"__data__": {"text": "'use strict';\n  2\n  3 function addOne(num) {\n> 4   return num + 1;\n  5 }\n  6\n  7 addOne(10);\n  8 addOne(-1);\n  9\ndebug> cont\nbreak in main.js:4\n  2\n  3 function addOne(num) {\n> 4   return num + 1;\n  5 }\n  6\ndebug> exec('num')\n-1\ndebug>\n\nInformation#\nbacktrace, bt: Print backtrace of current execution frame\nlist(5): List scripts source code with 5 line context (5 lines before and after)\nwatch(expr): Add expression to watch list\nunwatch(expr): Remove expression from watch list\nunwatch(index): Remove expression at specific index from watch list\nwatchers: List all watchers and their values (automatically listed on each breakpoint)\nrepl: Open debugger's repl for evaluation in debugging script's context\nexec expr, p expr: Execute an expression in debugging script's context and print its value\nprofile: Start CPU profiling session\nprofileEnd: Stop current CPU profiling session\nprofiles: List all completed CPU profiling sessions\nprofiles[n].save(filepath = 'node.cpuprofile'): Save CPU profiling session to disk as JSON\ntakeHeapSnapshot(filepath = 'node.heapsnapshot'): Take a heap snapshot and save to disk as JSON\nExecution control#\nrun: Run script (automatically runs on debugger's start)\nrestart: Restart script\nkill: Kill script\nVarious#\nscripts: List all loaded scripts\nversion: Display V8's version\nAdvanced usage#\nV8 inspector integration for Node.js#\nV8 Inspector integration allows attaching Chrome DevTools to Node.js instances for debugging and profiling. It uses the Chrome DevTools Protocol.\n\nV8 Inspector can be enabled by passing the --inspect flag when starting a Node.js application. It is also possible to supply a custom port with that flag, e.g. --inspect=9222 will accept DevTools connections on port 9222.\n\nTo break on the first line of the application code, pass the --inspect-brk flag instead of --inspect.\n\n$ node --inspect index.js\nDebugger listening on ws://127.0.0.1:9229/dc9010dd-f8b8-4ac5-a510-c1a114ec7d29\nFor help, see: https://nodejs.org/en/docs/inspector\n(In the example above, the UUID dc9010dd-f8b8-4ac5-a510-c1a114ec7d29 at the end of the URL is generated on the fly, it varies in different debugging sessions.)\n\nIf the Chrome browser is older than 66.0.3345.0, use inspector.html instead of js_app.html in the above URL.\n\nChrome DevTools doesn't support debugging worker threads yet. ndb can be used to debug them.\n\nDeprecated APIs#\nNode.js APIs might be deprecated for any of the following reasons:\n\nUse of the API is unsafe.\nAn improved alternative API is available.\nBreaking changes to the API are expected in a future major release.\nNode.js uses three kinds of Deprecations:\n\nDocumentation-only\nRuntime\nEnd-of-Life\nA Documentation-only deprecation is one that is expressed only within the Node.js API docs. These generate no side-effects while running Node.js. Some Documentation-only deprecations trigger a runtime warning when launched with --pending-deprecation flag (or its alternative, NODE_PENDING_DEPRECATION=1 environment variable), similarly to Runtime deprecations below. Documentation-only deprecations that support that flag are explicitly labeled as such in the list of Deprecated APIs.\n\nA Runtime deprecation will, by default, generate a process warning that will be printed to stderr the first time the deprecated API is used. When the --throw-deprecation command-line flag is used, a Runtime deprecation will cause an error to be thrown.\n\nAn End-of-Life deprecation is used when functionality is or will soon be removed from Node.js.\n\nRevoking", "doc_id": "ec8415e9-d302-4fb8-a348-507bce801f2a", "embedding": null, "doc_hash": "6c919282e1dc6864fcbfb8e4a89d86673e47045554709e9a9f33b57d75adf652", "extra_info": null, "node_info": {"start": 919024, "end": 922531}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b6577ba2-9638-4ab9-a8e6-05dfb760f9a5", "3": "f6d61d12-249d-415f-bdb5-38265f3941d7"}}, "__type__": "1"}, "f6d61d12-249d-415f-bdb5-38265f3941d7": {"__data__": {"text": "only within the Node.js API docs. These generate no side-effects while running Node.js. Some Documentation-only deprecations trigger a runtime warning when launched with --pending-deprecation flag (or its alternative, NODE_PENDING_DEPRECATION=1 environment variable), similarly to Runtime deprecations below. Documentation-only deprecations that support that flag are explicitly labeled as such in the list of Deprecated APIs.\n\nA Runtime deprecation will, by default, generate a process warning that will be printed to stderr the first time the deprecated API is used. When the --throw-deprecation command-line flag is used, a Runtime deprecation will cause an error to be thrown.\n\nAn End-of-Life deprecation is used when functionality is or will soon be removed from Node.js.\n\nRevoking deprecations#\nOccasionally, the deprecation of an API might be reversed. In such situations, this document will be updated with information relevant to the decision. However, the deprecation identifier will not be modified.\n\nList of deprecated APIs#\nDEP0001: http.OutgoingMessage.prototype.flush\nHistory\nType: End-of-Life\n\nOutgoingMessage.prototype.flush() has been removed. Use OutgoingMessage.prototype.flushHeaders() instead.\nDEP0002: require('_linklist')#\nHistory\nType: End-of-Life\n\nThe _linklist module is deprecated. Please use a userland alternative.\n\nDEP0003: _writableState.buffer#\nHistory\nType: End-of-Life\n\nThe _writableState.buffer has been removed. Use _writableState.getBuffer() instead.\n\nDEP0004: CryptoStream.prototype.readyState#\nHistory\nType: End-of-Life\n\nThe CryptoStream.prototype.readyState property was removed.\n\nDEP0005: Buffer() constructor#\nHistory\nType: Runtime (supports --pending-deprecation)\n\nThe Buffer() function and new Buffer() constructor are deprecated due to API usability issues that can lead to accidental security issues.\n\nAs an alternative, use one of the following methods of constructing Buffer objects:\n\nBuffer.alloc(size[, fill[, encoding]]): Create a Buffer with initialized memory.\nBuffer.allocUnsafe(size): Create a Buffer with uninitialized memory.\nBuffer.allocUnsafeSlow(size): Create a Buffer with uninitialized memory.\nBuffer.from(array): Create a Buffer with a copy of array\nBuffer.from(arrayBuffer[, byteOffset[, length]]) - Create a Buffer that wraps the given arrayBuffer.\nBuffer.from(buffer): Create a Buffer that copies buffer.\nBuffer.from(string[, encoding]): Create a Buffer that copies string.\nWithout --pending-deprecation, runtime warnings occur only for code not in node_modules. This means there will not be deprecation warnings for Buffer() usage in dependencies. With --pending-deprecation, a runtime warning results no matter where the Buffer() usage occurs.\n\nDEP0006: child_process options.customFds#\nHistory\nType: End-of-Life\n\nWithin the child_process module's spawn(), fork(), and exec() methods, the options.customFds option is deprecated. The options.stdio option should be used instead.\n\nDEP0007: Replace cluster worker.suicide with worker.exitedAfterDisconnect#\nHistory\nType: End-of-Life\n\nIn an earlier version of the Node.js cluster, a boolean property with the name suicide was added to the Worker object. The intent of this property was to provide an indication of how and why the Worker instance exited. In Node.js 6.0.0, the old property was deprecated and replaced with a new worker.exitedAfterDisconnect property. The old property name did not precisely describe the actual semantics and was unnecessarily emotion-laden.\n\nDEP0008: require('node:constants')#\nHistory\nType: Documentation-only\n\nThe node:constants module is deprecated. When requiring access to constants relevant to specific Node.js builtin modules, developers should instead refer to the constants property exposed by the relevant module. For instance, require('node:fs').constants and", "doc_id": "f6d61d12-249d-415f-bdb5-38265f3941d7", "embedding": null, "doc_hash": "74201ec519d7d566eec5a7dcee962ce00bf585cf6de1bad92e0a2bec7bb0dcea", "extra_info": null, "node_info": {"start": 922375, "end": 926193}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ec8415e9-d302-4fb8-a348-507bce801f2a", "3": "702498ac-2af4-4d1f-ada5-1dae5e81406e"}}, "__type__": "1"}, "702498ac-2af4-4d1f-ada5-1dae5e81406e": {"__data__": {"text": "End-of-Life\n\nIn an earlier version of the Node.js cluster, a boolean property with the name suicide was added to the Worker object. The intent of this property was to provide an indication of how and why the Worker instance exited. In Node.js 6.0.0, the old property was deprecated and replaced with a new worker.exitedAfterDisconnect property. The old property name did not precisely describe the actual semantics and was unnecessarily emotion-laden.\n\nDEP0008: require('node:constants')#\nHistory\nType: Documentation-only\n\nThe node:constants module is deprecated. When requiring access to constants relevant to specific Node.js builtin modules, developers should instead refer to the constants property exposed by the relevant module. For instance, require('node:fs').constants and require('node:os').constants.\n\nDEP0009: crypto.pbkdf2 without digest#\nHistory\nType: End-of-Life\n\nUse of the crypto.pbkdf2() API without specifying a digest was deprecated in Node.js 6.0 because the method defaulted to using the non-recommended 'SHA1' digest. Previously, a deprecation warning was printed. Starting in Node.js 8.0.0, calling crypto.pbkdf2() or crypto.pbkdf2Sync() with digest set to undefined will throw a TypeError.\n\nBeginning in Node.js v11.0.0, calling these functions with digest set to null would print a deprecation warning to align with the behavior when digest is undefined.\n\nNow, however, passing either undefined or null will throw a TypeError.\n\nDEP0010: crypto.createCredentials#\nHistory\nType: End-of-Life\n\nThe crypto.createCredentials() API was removed. Please use tls.createSecureContext() instead.\n\nDEP0011: crypto.Credentials#\nHistory\nType: End-of-Life\n\nThe crypto.Credentials class was removed. Please use tls.SecureContext instead.\n\nDEP0012: Domain.dispose#\nHistory\nType: End-of-Life\n\nDomain.dispose() has been removed. Recover from failed I/O actions explicitly via error event handlers set on the domain instead.\n\nDEP0013: fs asynchronous function without callback#\nHistory\nType: End-of-Life\n\nCalling an asynchronous function without a callback throws a TypeError in Node.js 10.0.0 onwards. See https://github.com/nodejs/node/pull/12562.\n\nDEP0014: fs.read legacy String interface#\nHistory\nType: End-of-Life\n\nThe fs.read() legacy String interface is deprecated. Use the Buffer API as mentioned in the documentation instead.\n\nDEP0015: fs.readSync legacy String interface#\nHistory\nType: End-of-Life\n\nThe fs.readSync() legacy String interface is deprecated. Use the Buffer API as mentioned in the documentation instead.\n\nDEP0016: GLOBAL/root#\nHistory\nType: End-of-Life\n\nThe GLOBAL and root aliases for the global property were deprecated in Node.js 6.0.0 and have since been removed.\n\nDEP0017: Intl.v8BreakIterator#\nHistory\nType: End-of-Life\n\nIntl.v8BreakIterator was a non-standard extension and has been removed. See Intl.Segmenter.\n\nDEP0018: Unhandled promise rejections#\nHistory\nType: End-of-Life\n\nUnhandled promise rejections are deprecated. By default, promise rejections that are not handled terminate the Node.js process with a non-zero exit code. To change the way Node.js treats unhandled rejections, use the --unhandled-rejections command-line option.\n\nDEP0019: require('.') resolved outside directory#\nHistory\nType: End-of-Life\n\nIn certain cases, require('.') could resolve outside the package directory. This behavior has been removed.\n\nDEP0020: Server.connections#\nHistory\nType: End-of-Life\n\nThe Server.connections property was deprecated in Node.js v0.9.7 and has been removed. Please use", "doc_id": "702498ac-2af4-4d1f-ada5-1dae5e81406e", "embedding": null, "doc_hash": "f2c085cc42af500e5fcd3c91b147c9f354e7518cf3b758aeb4ca996318acfca2", "extra_info": null, "node_info": {"start": 926195, "end": 929711}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f6d61d12-249d-415f-bdb5-38265f3941d7", "3": "6fb86d8b-6caf-4c8f-ac4b-716bdb564d65"}}, "__type__": "1"}, "6fb86d8b-6caf-4c8f-ac4b-716bdb564d65": {"__data__": {"text": "Unhandled promise rejections#\nHistory\nType: End-of-Life\n\nUnhandled promise rejections are deprecated. By default, promise rejections that are not handled terminate the Node.js process with a non-zero exit code. To change the way Node.js treats unhandled rejections, use the --unhandled-rejections command-line option.\n\nDEP0019: require('.') resolved outside directory#\nHistory\nType: End-of-Life\n\nIn certain cases, require('.') could resolve outside the package directory. This behavior has been removed.\n\nDEP0020: Server.connections#\nHistory\nType: End-of-Life\n\nThe Server.connections property was deprecated in Node.js v0.9.7 and has been removed. Please use the Server.getConnections() method instead.\n\nDEP0021: Server.listenFD#\nHistory\nType: End-of-Life\n\nThe Server.listenFD() method was deprecated and removed. Please use Server.listen({fd: <number>}) instead.\n\nDEP0022: os.tmpDir()#\nHistory\nType: End-of-Life\n\nThe os.tmpDir() API was deprecated in Node.js 7.0.0 and has since been removed. Please use os.tmpdir() instead.\n\nDEP0023: os.getNetworkInterfaces()#\nHistory\nType: End-of-Life\n\nThe os.getNetworkInterfaces() method is deprecated. Please use the os.networkInterfaces() method instead.\n\nDEP0024: REPLServer.prototype.convertToContext()#\nHistory\nType: End-of-Life\n\nThe REPLServer.prototype.convertToContext() API has been removed.\n\nDEP0025: require('node:sys')#\nHistory\nType: Runtime\n\nThe node:sys module is deprecated. Please use the util module instead.\n\nDEP0026: util.print()#\nHistory\nType: End-of-Life\n\nutil.print() has been removed. Please use console.log() instead.\n\nDEP0027: util.puts()#\nHistory\nType: End-of-Life\n\nutil.puts() has been removed. Please use console.log() instead.\n\nDEP0028: util.debug()#\nHistory\nType: End-of-Life\n\nutil.debug() has been removed. Please use console.error() instead.\n\nDEP0029: util.error()#\nHistory\nType: End-of-Life\n\nutil.error() has been removed. Please use console.error() instead.\n\nDEP0030: SlowBuffer#\nHistory\nType: Documentation-only\n\nThe SlowBuffer class is deprecated. Please use Buffer.allocUnsafeSlow(size) instead.\n\nDEP0031: ecdh.setPublicKey()#\nHistory\nType: Documentation-only\n\nThe ecdh.setPublicKey() method is now deprecated as its inclusion in the API is not useful.\n\nDEP0032: node:domain module#\nHistory\nType: Documentation-only\n\nThe domain module is deprecated and should not be used.\n\nDEP0033: EventEmitter.listenerCount()#\nHistory\nType: Documentation-only\n\nThe events.listenerCount(emitter, eventName) API is deprecated. Please use emitter.listenerCount(eventName) instead.\n\nDEP0034: fs.exists(path, callback)#\nHistory\nType: Documentation-only\n\nThe fs.exists(path, callback) API is deprecated. Please use fs.stat() or fs.access() instead.\n\nDEP0035: fs.lchmod(path, mode, callback)#\nHistory\nType: Documentation-only\n\nThe fs.lchmod(path, mode, callback) API is deprecated.\n\nDEP0036: fs.lchmodSync(path, mode)#\nHistory\nType: Documentation-only\n\nThe fs.lchmodSync(path, mode) API is deprecated.\n\nDEP0037: fs.lchown(path, uid, gid, callback)#\nHistory\nType: Deprecation revoked\n\nThe fs.lchown(path, uid, gid, callback) API was deprecated. The deprecation was revoked because the requisite supporting APIs were added in libuv.\n\nDEP0038:", "doc_id": "6fb86d8b-6caf-4c8f-ac4b-716bdb564d65", "embedding": null, "doc_hash": "95d3bf33906de070dc293943c329b88031dfbeb0f9a2d65f380fa0970d49003b", "extra_info": null, "node_info": {"start": 929804, "end": 932999}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "702498ac-2af4-4d1f-ada5-1dae5e81406e", "3": "f15b9cfa-d093-48a9-a389-93f9d427056a"}}, "__type__": "1"}, "f15b9cfa-d093-48a9-a389-93f9d427056a": {"__data__": {"text": "callback) API is deprecated. Please use fs.stat() or fs.access() instead.\n\nDEP0035: fs.lchmod(path, mode, callback)#\nHistory\nType: Documentation-only\n\nThe fs.lchmod(path, mode, callback) API is deprecated.\n\nDEP0036: fs.lchmodSync(path, mode)#\nHistory\nType: Documentation-only\n\nThe fs.lchmodSync(path, mode) API is deprecated.\n\nDEP0037: fs.lchown(path, uid, gid, callback)#\nHistory\nType: Deprecation revoked\n\nThe fs.lchown(path, uid, gid, callback) API was deprecated. The deprecation was revoked because the requisite supporting APIs were added in libuv.\n\nDEP0038: fs.lchownSync(path, uid, gid)#\nHistory\nType: Deprecation revoked\n\nThe fs.lchownSync(path, uid, gid) API was deprecated. The deprecation was revoked because the requisite supporting APIs were added in libuv.\n\nDEP0039: require.extensions#\nHistory\nType: Documentation-only\n\nThe require.extensions property is deprecated.\n\nDEP0040: node:punycode module#\nHistory\nType: Documentation-only (supports --pending-deprecation)\n\nThe punycode module is deprecated. Please use a userland alternative instead.\n\nDEP0041: NODE_REPL_HISTORY_FILE environment variable#\nHistory\nType: End-of-Life\n\nThe NODE_REPL_HISTORY_FILE environment variable was removed. Please use NODE_REPL_HISTORY instead.\n\nDEP0042: tls.CryptoStream#\nHistory\nType: End-of-Life\n\nThe tls.CryptoStream class was removed. Please use tls.TLSSocket instead.\n\nDEP0043: tls.SecurePair#\nHistory\nType: Documentation-only\n\nThe tls.SecurePair class is deprecated. Please use tls.TLSSocket instead.\n\nDEP0044: util.isArray()#\nHistory\nType: Documentation-only\n\nThe util.isArray() API is deprecated. Please use Array.isArray() instead.\n\nDEP0045: util.isBoolean()#\nHistory\nType: Documentation-only\n\nThe util.isBoolean() API is deprecated.\n\nDEP0046: util.isBuffer()#\nHistory\nType: Documentation-only\n\nThe util.isBuffer() API is deprecated. Please use Buffer.isBuffer() instead.\n\nDEP0047: util.isDate()#\nHistory\nType: Documentation-only\n\nThe util.isDate() API is deprecated.\n\nDEP0048: util.isError()#\nHistory\nType: Documentation-only\n\nThe util.isError() API is deprecated.\n\nDEP0049: util.isFunction()#\nHistory\nType: Documentation-only\n\nThe util.isFunction() API is deprecated.\n\nDEP0050: util.isNull()#\nHistory\nType: Documentation-only\n\nThe util.isNull() API is deprecated.\n\nDEP0051: util.isNullOrUndefined()#\nHistory\nType: Documentation-only\n\nThe util.isNullOrUndefined() API is deprecated.\n\nDEP0052: util.isNumber()#\nHistory\nType: Documentation-only\n\nThe util.isNumber() API is deprecated.\n\nDEP0053: util.isObject()#\nHistory\nType: Documentation-only\n\nThe util.isObject() API is deprecated.\n\nDEP0054: util.isPrimitive()#\nHistory\nType: Documentation-only\n\nThe util.isPrimitive() API is deprecated.\n\nDEP0055: util.isRegExp()#\nHistory\nType: Documentation-only\n\nThe util.isRegExp() API is deprecated.\n\nDEP0056: util.isString()#\nHistory\nType: Documentation-only\n\nThe util.isString() API is deprecated.\n\nDEP0057: util.isSymbol()#\nHistory\nType: Documentation-only\n\nThe util.isSymbol() API is deprecated.\n\nDEP0058:", "doc_id": "f15b9cfa-d093-48a9-a389-93f9d427056a", "embedding": null, "doc_hash": "6657543a9afca495106a640c7fee299a1cc327354f22b1d73189905185d9387c", "extra_info": null, "node_info": {"start": 933076, "end": 936081}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6fb86d8b-6caf-4c8f-ac4b-716bdb564d65", "3": "d640a1b1-73f6-46f4-bcce-d0805f347826"}}, "__type__": "1"}, "d640a1b1-73f6-46f4-bcce-d0805f347826": {"__data__": {"text": "Documentation-only\n\nThe util.isNumber() API is deprecated.\n\nDEP0053: util.isObject()#\nHistory\nType: Documentation-only\n\nThe util.isObject() API is deprecated.\n\nDEP0054: util.isPrimitive()#\nHistory\nType: Documentation-only\n\nThe util.isPrimitive() API is deprecated.\n\nDEP0055: util.isRegExp()#\nHistory\nType: Documentation-only\n\nThe util.isRegExp() API is deprecated.\n\nDEP0056: util.isString()#\nHistory\nType: Documentation-only\n\nThe util.isString() API is deprecated.\n\nDEP0057: util.isSymbol()#\nHistory\nType: Documentation-only\n\nThe util.isSymbol() API is deprecated.\n\nDEP0058: util.isUndefined()#\nHistory\nType: Documentation-only\n\nThe util.isUndefined() API is deprecated.\n\nDEP0059: util.log()#\nHistory\nType: Documentation-only\n\nThe util.log() API is deprecated.\n\nDEP0060: util._extend()#\nHistory\nType: Documentation-only\n\nThe util._extend() API is deprecated.\n\nDEP0061: fs.SyncWriteStream#\nHistory\nType: End-of-Life\n\nThe fs.SyncWriteStream class was never intended to be a publicly accessible API and has been removed. No alternative API is available. Please use a userland alternative.\n\nDEP0062: node --debug#\nHistory\nType: End-of-Life\n\n--debug activates the legacy V8 debugger interface, which was removed as of V8 5.8. It is replaced by Inspector which is activated with --inspect instead.\n\nDEP0063: ServerResponse.prototype.writeHeader()#\nHistory\nType: Documentation-only\n\nThe node:http module ServerResponse.prototype.writeHeader() API is deprecated. Please use ServerResponse.prototype.writeHead() instead.\n\nThe ServerResponse.prototype.writeHeader() method was never documented as an officially supported API.\n\nDEP0064: tls.createSecurePair()#\nHistory\nType: Runtime\n\nThe tls.createSecurePair() API was deprecated in documentation in Node.js 0.11.3. Users should use tls.Socket instead.\n\nDEP0065: repl.REPL_MODE_MAGIC and NODE_REPL_MODE=magic#\nHistory\nType: End-of-Life\n\nThe node:repl module's REPL_MODE_MAGIC constant, used for replMode option, has been removed. Its behavior has been functionally identical to that of REPL_MODE_SLOPPY since Node.js 6.0.0, when V8 5.0 was imported. Please use REPL_MODE_SLOPPY instead.\n\nThe NODE_REPL_MODE environment variable is used to set the underlying replMode of an interactive node session. Its value, magic, is also removed. Please use sloppy instead.\n\nDEP0066: OutgoingMessage.prototype._headers, OutgoingMessage.prototype._headerNames#\nHistory\nType: Runtime\n\nThe node:http module OutgoingMessage.prototype._headers and OutgoingMessage.prototype._headerNames properties are deprecated. Use one of the public methods (e.g. OutgoingMessage.prototype.getHeader(), OutgoingMessage.prototype.getHeaders(), OutgoingMessage.prototype.getHeaderNames(), OutgoingMessage.prototype.getRawHeaderNames(), OutgoingMessage.prototype.hasHeader(), OutgoingMessage.prototype.removeHeader(), OutgoingMessage.prototype.setHeader()) for working with outgoing headers.\n\nThe OutgoingMessage.prototype._headers and OutgoingMessage.prototype._headerNames properties were never documented as officially supported properties.\n\nDEP0067: OutgoingMessage.prototype._renderHeaders#\nHistory\nType: Documentation-only\n\nThe node:http module OutgoingMessage.prototype._renderHeaders() API is deprecated.\n\nThe OutgoingMessage.prototype._renderHeaders property was never documented as an officially supported API.\n\nDEP0068: node debug#\nHistory\nType: End-of-Life\n\nnode debug corresponds to the legacy CLI debugger which has been replaced with a V8-inspector based CLI debugger available through node", "doc_id": "d640a1b1-73f6-46f4-bcce-d0805f347826", "embedding": null, "doc_hash": "6f25317a3ae121df49ed08d20207a7947ab91db78433305ea525ec2f0bc0888e", "extra_info": null, "node_info": {"start": 936053, "end": 939562}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f15b9cfa-d093-48a9-a389-93f9d427056a", "3": "cd8fb35d-232b-4bc8-ac0c-2e785318af3f"}}, "__type__": "1"}, "cd8fb35d-232b-4bc8-ac0c-2e785318af3f": {"__data__": {"text": "OutgoingMessage.prototype.getRawHeaderNames(), OutgoingMessage.prototype.hasHeader(), OutgoingMessage.prototype.removeHeader(), OutgoingMessage.prototype.setHeader()) for working with outgoing headers.\n\nThe OutgoingMessage.prototype._headers and OutgoingMessage.prototype._headerNames properties were never documented as officially supported properties.\n\nDEP0067: OutgoingMessage.prototype._renderHeaders#\nHistory\nType: Documentation-only\n\nThe node:http module OutgoingMessage.prototype._renderHeaders() API is deprecated.\n\nThe OutgoingMessage.prototype._renderHeaders property was never documented as an officially supported API.\n\nDEP0068: node debug#\nHistory\nType: End-of-Life\n\nnode debug corresponds to the legacy CLI debugger which has been replaced with a V8-inspector based CLI debugger available through node inspect.\n\nDEP0069: vm.runInDebugContext(string)#\nHistory\nType: End-of-Life\n\nDebugContext has been removed in V8 and is not available in Node.js 10+.\n\nDebugContext was an experimental API.\n\nDEP0070: async_hooks.currentId()#\nHistory\nType: End-of-Life\n\nasync_hooks.currentId() was renamed to async_hooks.executionAsyncId() for clarity.\n\nThis change was made while async_hooks was an experimental API.\n\nDEP0071: async_hooks.triggerId()#\nHistory\nType: End-of-Life\n\nasync_hooks.triggerId() was renamed to async_hooks.triggerAsyncId() for clarity.\n\nThis change was made while async_hooks was an experimental API.\n\nDEP0072: async_hooks.AsyncResource.triggerId()#\nHistory\nType: End-of-Life\n\nasync_hooks.AsyncResource.triggerId() was renamed to async_hooks.AsyncResource.triggerAsyncId() for clarity.\n\nThis change was made while async_hooks was an experimental API.\n\nDEP0073: Several internal properties of net.Server#\nHistory\nType: End-of-Life\n\nAccessing several internal, undocumented properties of net.Server instances with inappropriate names is deprecated.\n\nAs the original API was undocumented and not generally useful for non-internal code, no replacement API is provided.\n\nDEP0074: REPLServer.bufferedCommand#\nHistory\nType: End-of-Life\n\nThe REPLServer.bufferedCommand property was deprecated in favor of REPLServer.clearBufferedCommand().\n\nDEP0075: REPLServer.parseREPLKeyword()#\nHistory\nType: End-of-Life\n\nREPLServer.parseREPLKeyword() was removed from userland visibility.\n\nDEP0076: tls.parseCertString()#\nHistory\nType: End-of-Life\n\ntls.parseCertString() was a trivial parsing helper that was made public by mistake. While it was supposed to parse certificate subject and issuer strings, it never handled multi-value Relative Distinguished Names correctly.\n\nEarlier versions of this document suggested using querystring.parse() as an alternative to tls.parseCertString(). However, querystring.parse() also does not handle all certificate subjects correctly and should not be used.\n\nDEP0077: Module._debug()#\nHistory\nType: Runtime\n\nModule._debug() is deprecated.\n\nThe Module._debug() function was never documented as an officially supported API.\n\nDEP0078: REPLServer.turnOffEditorMode()#\nHistory\nType: End-of-Life\n\nREPLServer.turnOffEditorMode() was removed from userland visibility.\n\nDEP0079: Custom inspection function on objects via .inspect()#\nHistory\nType: End-of-Life\n\nUsing a property named inspect on an object to specify a custom inspection function for util.inspect() is deprecated. Use util.inspect.custom instead. For backward compatibility with Node.js prior to version 6.4.0, both can be specified.\n\nDEP0080: path._makeLong()#\nHistory\nType: Documentation-only\n\nThe internal path._makeLong() was not intended for public use. However, userland modules have found it", "doc_id": "cd8fb35d-232b-4bc8-ac0c-2e785318af3f", "embedding": null, "doc_hash": "1c3c20b4f643853e29db4b9a67cabee6e2b0b63557ab0c070cdcaa21cf6ca6a9", "extra_info": null, "node_info": {"start": 939348, "end": 942940}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d640a1b1-73f6-46f4-bcce-d0805f347826", "3": "63598b81-90f8-4136-8917-ec457c6c2c8d"}}, "__type__": "1"}, "63598b81-90f8-4136-8917-ec457c6c2c8d": {"__data__": {"text": "Module._debug() function was never documented as an officially supported API.\n\nDEP0078: REPLServer.turnOffEditorMode()#\nHistory\nType: End-of-Life\n\nREPLServer.turnOffEditorMode() was removed from userland visibility.\n\nDEP0079: Custom inspection function on objects via .inspect()#\nHistory\nType: End-of-Life\n\nUsing a property named inspect on an object to specify a custom inspection function for util.inspect() is deprecated. Use util.inspect.custom instead. For backward compatibility with Node.js prior to version 6.4.0, both can be specified.\n\nDEP0080: path._makeLong()#\nHistory\nType: Documentation-only\n\nThe internal path._makeLong() was not intended for public use. However, userland modules have found it useful. The internal API is deprecated and replaced with an identical, public path.toNamespacedPath() method.\n\nDEP0081: fs.truncate() using a file descriptor#\nHistory\nType: Runtime\n\nfs.truncate() fs.truncateSync() usage with a file descriptor is deprecated. Please use fs.ftruncate() or fs.ftruncateSync() to work with file descriptors.\n\nDEP0082: REPLServer.prototype.memory()#\nHistory\nType: End-of-Life\n\nREPLServer.prototype.memory() is only necessary for the internal mechanics of the REPLServer itself. Do not use this function.\n\nDEP0083: Disabling ECDH by setting ecdhCurve to false#\nHistory\nType: End-of-Life.\n\nThe ecdhCurve option to tls.createSecureContext() and tls.TLSSocket could be set to false to disable ECDH entirely on the server only. This mode was deprecated in preparation for migrating to OpenSSL 1.1.0 and consistency with the client and is now unsupported. Use the ciphers parameter instead.\n\nDEP0084: requiring bundled internal dependencies#\nHistory\nType: End-of-Life\n\nSince Node.js versions 4.4.0 and 5.2.0, several modules only intended for internal usage were mistakenly exposed to user code through require(). These modules were:\n\nv8/tools/codemap\nv8/tools/consarray\nv8/tools/csvparser\nv8/tools/logreader\nv8/tools/profile_view\nv8/tools/profile\nv8/tools/SourceMap\nv8/tools/splaytree\nv8/tools/tickprocessor-driver\nv8/tools/tickprocessor\nnode-inspect/lib/_inspect (from 7.6.0)\nnode-inspect/lib/internal/inspect_client (from 7.6.0)\nnode-inspect/lib/internal/inspect_repl (from 7.6.0)\nThe v8/* modules do not have any exports, and if not imported in a specific order would in fact throw errors. As such there are virtually no legitimate use cases for importing them through require().\n\nOn the other hand, node-inspect can be installed locally through a package manager, as it is published on the npm registry under the same name. No source code modification is necessary if that is done.\n\nDEP0085: AsyncHooks sensitive API#\nHistory\nType: End-of-Life\n\nThe AsyncHooks sensitive API was never documented and had various minor issues. Use the AsyncResource API instead. See https://github.com/nodejs/node/issues/15572.\n\nDEP0086: Remove runInAsyncIdScope#\nHistory\nType: End-of-Life\n\nrunInAsyncIdScope doesn't emit the 'before' or 'after' event and can thus cause a lot of issues. See https://github.com/nodejs/node/issues/14328.\n\nDEP0089: require('node:assert')#\nHistory\nType: Deprecation revoked\n\nImporting assert directly was not recommended as the exposed functions use loose equality checks. The deprecation was revoked because use of the node:assert module is not discouraged, and the deprecation caused developer confusion.\n\nDEP0090: Invalid GCM authentication tag lengths#\nHistory\nType:", "doc_id": "63598b81-90f8-4136-8917-ec457c6c2c8d", "embedding": null, "doc_hash": "88ef00276e9ef6791b50183dadfd7fe109542cc582123323408975cc41193854", "extra_info": null, "node_info": {"start": 943060, "end": 946479}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cd8fb35d-232b-4bc8-ac0c-2e785318af3f", "3": "4d9cf0e1-43fe-46d3-a47a-65480392e6ca"}}, "__type__": "1"}, "4d9cf0e1-43fe-46d3-a47a-65480392e6ca": {"__data__": {"text": "and had various minor issues. Use the AsyncResource API instead. See https://github.com/nodejs/node/issues/15572.\n\nDEP0086: Remove runInAsyncIdScope#\nHistory\nType: End-of-Life\n\nrunInAsyncIdScope doesn't emit the 'before' or 'after' event and can thus cause a lot of issues. See https://github.com/nodejs/node/issues/14328.\n\nDEP0089: require('node:assert')#\nHistory\nType: Deprecation revoked\n\nImporting assert directly was not recommended as the exposed functions use loose equality checks. The deprecation was revoked because use of the node:assert module is not discouraged, and the deprecation caused developer confusion.\n\nDEP0090: Invalid GCM authentication tag lengths#\nHistory\nType: End-of-Life\n\nNode.js used to support all GCM authentication tag lengths which are accepted by OpenSSL when calling decipher.setAuthTag(). Beginning with Node.js v11.0.0, only authentication tag lengths of 128, 120, 112, 104, 96, 64, and 32 bits are allowed. Authentication tags of other lengths are invalid per NIST SP 800-38D.\n\nDEP0091: crypto.DEFAULT_ENCODING#\nHistory\nType: Runtime\n\nThe crypto.DEFAULT_ENCODING property is deprecated.\n\nDEP0092: Top-level this bound to module.exports#\nHistory\nType: Documentation-only\n\nAssigning properties to the top-level this as an alternative to module.exports is deprecated. Developers should use exports or module.exports instead.\n\nDEP0093: crypto.fips is deprecated and replaced#\nHistory\nType: Documentation-only\n\nThe crypto.fips property is deprecated. Please use crypto.setFips() and crypto.getFips() instead.\n\nDEP0094: Using assert.fail() with more than one argument#\nHistory\nType: Runtime\n\nUsing assert.fail() with more than one argument is deprecated. Use assert.fail() with only one argument or use a different node:assert module method.\n\nDEP0095: timers.enroll()#\nHistory\nType: Runtime\n\ntimers.enroll() is deprecated. Please use the publicly documented setTimeout() or setInterval() instead.\n\nDEP0096: timers.unenroll()#\nHistory\nType: Runtime\n\ntimers.unenroll() is deprecated. Please use the publicly documented clearTimeout() or clearInterval() instead.\n\nDEP0097: MakeCallback with domain property#\nHistory\nType: Runtime\n\nUsers of MakeCallback that add the domain property to carry context, should start using the async_context variant of MakeCallback or CallbackScope, or the high-level AsyncResource class.\n\nDEP0098: AsyncHooks embedder AsyncResource.emitBefore and AsyncResource.emitAfter APIs#\nHistory\nType: End-of-Life\n\nThe embedded API provided by AsyncHooks exposes .emitBefore() and .emitAfter() methods which are very easy to use incorrectly which can lead to unrecoverable errors.\n\nUse asyncResource.runInAsyncScope() API instead which provides a much safer, and more convenient, alternative. See https://github.com/nodejs/node/pull/18513.\n\nDEP0099: Async context-unaware node::MakeCallback C++ APIs#\nHistory\nType: Compile-time\n\nCertain versions of node::MakeCallback APIs available to native addons are deprecated. Please use the versions of the API that accept an async_context parameter.\n\nDEP0100: process.assert()#\nHistory\nType: Runtime\n\nprocess.assert() is deprecated. Please use the assert module instead.\n\nThis was never a documented feature.\n\nDEP0101: --with-lttng#\nHistory\nType: End-of-Life\n\nThe --with-lttng compile-time option has been removed.\n\nDEP0102: Using noAssert in Buffer#(read|write) operations#\nHistory\nType: End-of-Life\n\nUsing the noAssert argument has no functionality anymore. All input is verified regardless of the value of noAssert. Skipping the verification could lead to hard-to-find errors and", "doc_id": "4d9cf0e1-43fe-46d3-a47a-65480392e6ca", "embedding": null, "doc_hash": "f428dc83396f7a744783413e477a98ee53977ed9b11a16972dfbb9de8030c286", "extra_info": null, "node_info": {"start": 946500, "end": 950072}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "63598b81-90f8-4136-8917-ec457c6c2c8d", "3": "0ce3c2d5-8df6-49d1-a4c0-17d0b2837e49"}}, "__type__": "1"}, "0ce3c2d5-8df6-49d1-a4c0-17d0b2837e49": {"__data__": {"text": "Compile-time\n\nCertain versions of node::MakeCallback APIs available to native addons are deprecated. Please use the versions of the API that accept an async_context parameter.\n\nDEP0100: process.assert()#\nHistory\nType: Runtime\n\nprocess.assert() is deprecated. Please use the assert module instead.\n\nThis was never a documented feature.\n\nDEP0101: --with-lttng#\nHistory\nType: End-of-Life\n\nThe --with-lttng compile-time option has been removed.\n\nDEP0102: Using noAssert in Buffer#(read|write) operations#\nHistory\nType: End-of-Life\n\nUsing the noAssert argument has no functionality anymore. All input is verified regardless of the value of noAssert. Skipping the verification could lead to hard-to-find errors and crashes.\n\nDEP0103: process.binding('util').is[...] typechecks#\nHistory\nType: Documentation-only (supports --pending-deprecation)\n\nUsing process.binding() in general should be avoided. The type checking methods in particular can be replaced by using util.types.\n\nThis deprecation has been superseded by the deprecation of the process.binding() API (DEP0111).\n\nDEP0104: process.env string coercion#\nHistory\nType: Documentation-only (supports --pending-deprecation)\n\nWhen assigning a non-string property to process.env, the assigned value is implicitly converted to a string. This behavior is deprecated if the assigned value is not a string, boolean, or number. In the future, such assignment might result in a thrown error. Please convert the property to a string before assigning it to process.env.\n\nDEP0105: decipher.finaltol#\nHistory\nType: End-of-Life\n\ndecipher.finaltol() has never been documented and was an alias for decipher.final(). This API has been removed, and it is recommended to use decipher.final() instead.\n\nDEP0106: crypto.createCipher and crypto.createDecipher#\nHistory\nType: Runtime\n\nUsing crypto.createCipher() and crypto.createDecipher() must be avoided as they use a weak key derivation function (MD5 with no salt) and static initialization vectors. It is recommended to derive a key using crypto.pbkdf2() or crypto.scrypt() with random salts and to use crypto.createCipheriv() and crypto.createDecipheriv() to obtain the Cipher and Decipher objects respectively.\n\nDEP0107: tls.convertNPNProtocols()#\nHistory\nType: End-of-Life\n\nThis was an undocumented helper function not intended for use outside Node.js core and obsoleted by the removal of NPN (Next Protocol Negotiation) support.\n\nDEP0108: zlib.bytesRead#\nHistory\nType: Runtime\n\nDeprecated alias for zlib.bytesWritten. This original name was chosen because it also made sense to interpret the value as the number of bytes read by the engine, but is inconsistent with other streams in Node.js that expose values under these names.\n\nDEP0109: http, https, and tls support for invalid URLs#\nHistory\nType: End-of-Life\n\nSome previously supported (but strictly invalid) URLs were accepted through the http.request(), http.get(), https.request(), https.get(), and tls.checkServerIdentity() APIs because those were accepted by the legacy url.parse() API. The mentioned APIs now use the WHATWG URL parser that requires strictly valid URLs. Passing an invalid URL is deprecated and support will be removed in the future.\n\nDEP0110: vm.Script cached data#\nHistory\nType: Documentation-only\n\nThe produceCachedData option is deprecated. Use script.createCachedData() instead.\n\nDEP0111: process.binding()#\nHistory\nType: Documentation-only (supports --pending-deprecation)\n\nprocess.binding() is for use by Node.js internal code only.\n\nDEP0112: dgram private APIs#\nHistory\nType: Runtime\n\nThe node:dgram module previously contained several APIs that were never", "doc_id": "0ce3c2d5-8df6-49d1-a4c0-17d0b2837e49", "embedding": null, "doc_hash": "f32ce2c543ed24ee4e6d22438b7142492c9f16bc6f2693e592ea373858f13bb3", "extra_info": null, "node_info": {"start": 950058, "end": 953682}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4d9cf0e1-43fe-46d3-a47a-65480392e6ca", "3": "b586837c-cf4a-4884-8727-1db0e8466c19"}}, "__type__": "1"}, "b586837c-cf4a-4884-8727-1db0e8466c19": {"__data__": {"text": "https.get(), and tls.checkServerIdentity() APIs because those were accepted by the legacy url.parse() API. The mentioned APIs now use the WHATWG URL parser that requires strictly valid URLs. Passing an invalid URL is deprecated and support will be removed in the future.\n\nDEP0110: vm.Script cached data#\nHistory\nType: Documentation-only\n\nThe produceCachedData option is deprecated. Use script.createCachedData() instead.\n\nDEP0111: process.binding()#\nHistory\nType: Documentation-only (supports --pending-deprecation)\n\nprocess.binding() is for use by Node.js internal code only.\n\nDEP0112: dgram private APIs#\nHistory\nType: Runtime\n\nThe node:dgram module previously contained several APIs that were never meant to accessed outside of Node.js core: Socket.prototype._handle, Socket.prototype._receiving, Socket.prototype._bindState, Socket.prototype._queue, Socket.prototype._reuseAddr, Socket.prototype._healthCheck(), Socket.prototype._stopReceiving(), and dgram._createSocketHandle().\n\nDEP0113: Cipher.setAuthTag(), Decipher.getAuthTag()#\nHistory\nType: End-of-Life\n\nCipher.setAuthTag() and Decipher.getAuthTag() are no longer available. They were never documented and would throw when called.\n\nDEP0114: crypto._toBuf()#\nHistory\nType: End-of-Life\n\nThe crypto._toBuf() function was not designed to be used by modules outside of Node.js core and was removed.\n\nDEP0115: crypto.prng(), crypto.pseudoRandomBytes(), crypto.rng()#\nHistory\nType: Documentation-only (supports --pending-deprecation)\n\nIn recent versions of Node.js, there is no difference between crypto.randomBytes() and crypto.pseudoRandomBytes(). The latter is deprecated along with the undocumented aliases crypto.prng() and crypto.rng() in favor of crypto.randomBytes() and might be removed in a future release.\n\nDEP0116: Legacy URL API#\nHistory\nType: Deprecation revoked\n\nThe legacy URL API is deprecated. This includes url.format(), url.parse(), url.resolve(), and the legacy urlObject. Please use the WHATWG URL API instead.\n\nDEP0117: Native crypto handles#\nHistory\nType: End-of-Life\n\nPrevious versions of Node.js exposed handles to internal native objects through the _handle property of the Cipher, Decipher, DiffieHellman, DiffieHellmanGroup, ECDH, Hash, Hmac, Sign, and Verify classes. The _handle property has been removed because improper use of the native object can lead to crashing the application.\n\nDEP0118: dns.lookup() support for a falsy host name#\nHistory\nType: Runtime\n\nPrevious versions of Node.js supported dns.lookup() with a falsy host name like dns.lookup(false) due to backward compatibility. This behavior is undocumented and is thought to be unused in real world apps. It will become an error in future versions of Node.js.\n\nDEP0119: process.binding('uv').errname() private API#\nHistory\nType: Documentation-only (supports --pending-deprecation)\n\nprocess.binding('uv').errname() is deprecated. Please use util.getSystemErrorName() instead.\n\nDEP0120: Windows Performance Counter support#\nHistory\nType: End-of-Life\n\nWindows Performance Counter support has been removed from Node.js. The undocumented COUNTER_NET_SERVER_CONNECTION(), COUNTER_NET_SERVER_CONNECTION_CLOSE(), COUNTER_HTTP_SERVER_REQUEST(), COUNTER_HTTP_SERVER_RESPONSE(), COUNTER_HTTP_CLIENT_REQUEST(), and COUNTER_HTTP_CLIENT_RESPONSE() functions have been deprecated.\n\nDEP0121: net._setSimultaneousAccepts()#\nHistory\nType: Runtime\n\nThe undocumented net._setSimultaneousAccepts() function was originally intended for debugging and performance tuning when using the node:child_process and", "doc_id": "b586837c-cf4a-4884-8727-1db0e8466c19", "embedding": null, "doc_hash": "8aa5dc7747c0452e7f3e15c3169b44687ce6334d9b30948ceecda65c7e181c74", "extra_info": null, "node_info": {"start": 953689, "end": 957222}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0ce3c2d5-8df6-49d1-a4c0-17d0b2837e49", "3": "df6251a8-3af9-436f-b592-e3d4efb67e97"}}, "__type__": "1"}, "df6251a8-3af9-436f-b592-e3d4efb67e97": {"__data__": {"text": "is deprecated. Please use util.getSystemErrorName() instead.\n\nDEP0120: Windows Performance Counter support#\nHistory\nType: End-of-Life\n\nWindows Performance Counter support has been removed from Node.js. The undocumented COUNTER_NET_SERVER_CONNECTION(), COUNTER_NET_SERVER_CONNECTION_CLOSE(), COUNTER_HTTP_SERVER_REQUEST(), COUNTER_HTTP_SERVER_RESPONSE(), COUNTER_HTTP_CLIENT_REQUEST(), and COUNTER_HTTP_CLIENT_RESPONSE() functions have been deprecated.\n\nDEP0121: net._setSimultaneousAccepts()#\nHistory\nType: Runtime\n\nThe undocumented net._setSimultaneousAccepts() function was originally intended for debugging and performance tuning when using the node:child_process and node:cluster modules on Windows. The function is not generally useful and is being removed. See discussion here: https://github.com/nodejs/node/issues/18391\n\nDEP0122: tls Server.prototype.setOptions()#\nHistory\nType: Runtime\n\nPlease use Server.prototype.setSecureContext() instead.\n\nDEP0123: setting the TLS ServerName to an IP address#\nHistory\nType: Runtime\n\nSetting the TLS ServerName to an IP address is not permitted by RFC 6066. This will be ignored in a future version.\n\nDEP0124: using REPLServer.rli#\nHistory\nType: End-of-Life\n\nThis property is a reference to the instance itself.\n\nDEP0125: require('node:_stream_wrap')#\nHistory\nType: Runtime\n\nThe node:_stream_wrap module is deprecated.\n\nDEP0126: timers.active()#\nHistory\nType: Runtime\n\nThe previously undocumented timers.active() is deprecated. Please use the publicly documented timeout.refresh() instead. If re-referencing the timeout is necessary, timeout.ref() can be used with no performance impact since Node.js 10.\n\nDEP0127: timers._unrefActive()#\nHistory\nType: Runtime\n\nThe previously undocumented and \"private\" timers._unrefActive() is deprecated. Please use the publicly documented timeout.refresh() instead. If unreferencing the timeout is necessary, timeout.unref() can be used with no performance impact since Node.js 10.\n\nDEP0128: modules with an invalid main entry and an index.js file#\nHistory\nType: Runtime\n\nModules that have an invalid main entry (e.g., ./does-not-exist.js) and also have an index.js file in the top level directory will resolve the index.js file. That is deprecated and is going to throw an error in future Node.js versions.\n\nDEP0129: ChildProcess._channel#\nHistory\nType: Runtime\n\nThe _channel property of child process objects returned by spawn() and similar functions is not intended for public use. Use ChildProcess.channel instead.\n\nDEP0130: Module.createRequireFromPath()#\nHistory\nType: End-of-Life\n\nUse module.createRequire() instead.\n\nDEP0131: Legacy HTTP parser#\nHistory\nType: End-of-Life\n\nThe legacy HTTP parser, used by default in versions of Node.js prior to 12.0.0, is deprecated and has been removed in v13.0.0. Prior to v13.0.0, the --http-parser=legacy command-line flag could be used to revert to using the legacy parser.\n\nDEP0132: worker.terminate() with callback#\nHistory\nType: Runtime\n\nPassing a callback to worker.terminate() is deprecated. Use the returned Promise instead, or a listener to the worker's 'exit' event.\n\nDEP0133: http connection#\nHistory\nType: Documentation-only\n\nPrefer response.socket over response.connection and request.socket over request.connection.\n\nDEP0134: process._tickCallback#\nHistory\nType: Documentation-only (supports --pending-deprecation)\n\nThe process._tickCallback property was never documented as an officially supported API.\n\nDEP0135: WriteStream.open() and ReadStream.open() are internal#\nHistory\nType: Runtime\n\nWriteStream.open() and ReadStream.open() are undocumented", "doc_id": "df6251a8-3af9-436f-b592-e3d4efb67e97", "embedding": null, "doc_hash": "39d840afa5132ba32eb9c5739e73cd66961a85a2a81a4084ef181df152ac82ad", "extra_info": null, "node_info": {"start": 957227, "end": 960817}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b586837c-cf4a-4884-8727-1db0e8466c19", "3": "e0809066-1458-4da2-98ab-514c043598e0"}}, "__type__": "1"}, "e0809066-1458-4da2-98ab-514c043598e0": {"__data__": {"text": "flag could be used to revert to using the legacy parser.\n\nDEP0132: worker.terminate() with callback#\nHistory\nType: Runtime\n\nPassing a callback to worker.terminate() is deprecated. Use the returned Promise instead, or a listener to the worker's 'exit' event.\n\nDEP0133: http connection#\nHistory\nType: Documentation-only\n\nPrefer response.socket over response.connection and request.socket over request.connection.\n\nDEP0134: process._tickCallback#\nHistory\nType: Documentation-only (supports --pending-deprecation)\n\nThe process._tickCallback property was never documented as an officially supported API.\n\nDEP0135: WriteStream.open() and ReadStream.open() are internal#\nHistory\nType: Runtime\n\nWriteStream.open() and ReadStream.open() are undocumented internal APIs that do not make sense to use in userland. File streams should always be opened through their corresponding factory methods fs.createWriteStream() and fs.createReadStream()) or by passing a file descriptor in options.\n\nDEP0136: http finished#\nHistory\nType: Documentation-only\n\nresponse.finished indicates whether response.end() has been called, not whether 'finish' has been emitted and the underlying data is flushed.\n\nUse response.writableFinished or response.writableEnded accordingly instead to avoid the ambiguity.\n\nTo maintain existing behavior response.finished should be replaced with response.writableEnded.\n\nDEP0137: Closing fs.FileHandle on garbage collection#\nHistory\nType: Runtime\n\nAllowing a fs.FileHandle object to be closed on garbage collection is deprecated. In the future, doing so might result in a thrown error that will terminate the process.\n\nPlease ensure that all fs.FileHandle objects are explicitly closed using FileHandle.prototype.close() when the fs.FileHandle is no longer needed:\n\nconst fsPromises = require('node:fs').promises;\nasync function openAndClose() {\n  let filehandle;\n  try {\n    filehandle = await fsPromises.open('thefile.txt', 'r');\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}\nDEP0138: process.mainModule#\nHistory\nType: Documentation-only\n\nprocess.mainModule is a CommonJS-only feature while process global object is shared with non-CommonJS environment. Its use within ECMAScript modules is unsupported.\n\nIt is deprecated in favor of require.main, because it serves the same purpose and is only available on CommonJS environment.\n\nDEP0139: process.umask() with no arguments#\nHistory\nType: Documentation-only\n\nCalling process.umask() with no argument causes the process-wide umask to be written twice. This introduces a race condition between threads, and is a potential security vulnerability. There is no safe, cross-platform alternative API.\n\nDEP0140: Use request.destroy() instead of request.abort()#\nHistory\nType: Documentation-only\n\nUse request.destroy() instead of request.abort().\n\nDEP0141: repl.inputStream and repl.outputStream#\nHistory\nType: Documentation-only (supports --pending-deprecation)\n\nThe node:repl module exported the input and output stream twice. Use .input instead of .inputStream and .output instead of .outputStream.\n\nDEP0142: repl._builtinLibs#\nHistory\nType: Documentation-only\n\nThe node:repl module exports a _builtinLibs property that contains an array of built-in modules. It was incomplete so far and instead it's better to rely upon require('node:module').builtinModules.\n\nDEP0143: Transform._transformState#\nHistory\nType: Runtime Transform._transformState will be removed in future versions where it is no longer required due to simplification of the implementation.\n\nDEP0144: module.parent#\nHistory\nType: Documentation-only (supports --pending-deprecation)\n\nA CommonJS module can access the first module that required it using module.parent. This feature is deprecated because it does not work consistently in the presence of ECMAScript modules and because it", "doc_id": "e0809066-1458-4da2-98ab-514c043598e0", "embedding": null, "doc_hash": "c11fc62bc73d4197fad569eca6c1be76f2431256496e1c75e02d910c593f1232", "extra_info": null, "node_info": {"start": 960762, "end": 964603}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "df6251a8-3af9-436f-b592-e3d4efb67e97", "3": "feb691a8-4e81-4e53-ab2f-bee99042aa45"}}, "__type__": "1"}, "feb691a8-4e81-4e53-ab2f-bee99042aa45": {"__data__": {"text": "instead of .outputStream.\n\nDEP0142: repl._builtinLibs#\nHistory\nType: Documentation-only\n\nThe node:repl module exports a _builtinLibs property that contains an array of built-in modules. It was incomplete so far and instead it's better to rely upon require('node:module').builtinModules.\n\nDEP0143: Transform._transformState#\nHistory\nType: Runtime Transform._transformState will be removed in future versions where it is no longer required due to simplification of the implementation.\n\nDEP0144: module.parent#\nHistory\nType: Documentation-only (supports --pending-deprecation)\n\nA CommonJS module can access the first module that required it using module.parent. This feature is deprecated because it does not work consistently in the presence of ECMAScript modules and because it gives an inaccurate representation of the CommonJS module graph.\n\nSome modules use it to check if they are the entry point of the current process. Instead, it is recommended to compare require.main and module:\n\nif (require.main === module) {\n  // Code section that will run only if current file is the entry point.\n}\nWhen looking for the CommonJS modules that have required the current one, require.cache and module.children can be used:\n\nconst moduleParents = Object.values(require.cache)\n  .filter((m) => m.children.includes(module));\nDEP0145: socket.bufferSize#\nHistory\nType: Documentation-only\n\nsocket.bufferSize is just an alias for writable.writableLength.\n\nDEP0146: new crypto.Certificate()#\nHistory\nType: Documentation-only\n\nThe crypto.Certificate() constructor is deprecated. Use static methods of crypto.Certificate() instead.\n\nDEP0147: fs.rmdir(path, { recursive: true })#\nHistory\nType: Runtime\n\nIn future versions of Node.js, recursive option will be ignored for fs.rmdir, fs.rmdirSync, and fs.promises.rmdir.\n\nUse fs.rm(path, { recursive: true, force: true }), fs.rmSync(path, { recursive: true, force: true }) or fs.promises.rm(path, { recursive: true, force: true }) instead.\n\nDEP0148: Folder mappings in \"exports\" (trailing \"/\")#\nHistory\nType: Runtime\n\nUsing a trailing \"/\" to define subpath folder mappings in the subpath exports or subpath imports fields is deprecated. Use subpath patterns instead.\n\nDEP0149: http.IncomingMessage#connection#\nHistory\nType: Documentation-only.\n\nPrefer message.socket over message.connection.\n\nDEP0150: Changing the value of process.config#\nHistory\nType: End-of-Life\n\nThe process.config property provides access to Node.js compile-time settings. However, the property is mutable and therefore subject to tampering. The ability to change the value will be removed in a future version of Node.js.\n\nDEP0151: Main index lookup and extension searching#\nHistory\nType: Runtime\n\nPreviously, index.js and extension searching lookups would apply to import 'pkg' main entry point resolution, even when resolving ES modules.\n\nWith this deprecation, all ES module main entry point resolutions require an explicit \"exports\" or \"main\" entry with the exact file extension.\n\nDEP0152: Extension PerformanceEntry properties#\nHistory\nType: Runtime\n\nThe 'gc', 'http2', and 'http' <PerformanceEntry> object types have additional properties assigned to them that provide additional information. These properties are now available within the standard detail property of the PerformanceEntry object. The existing accessors have been deprecated and should no longer be used.\n\nDEP0153: dns.lookup and dnsPromises.lookup options type coercion#\nHistory\nType: End-of-Life\n\nUsing a non-nullish non-integer value for family option, a non-nullish non-number value for hints option, a non-nullish non-boolean value for all option, or a non-nullish non-boolean value for verbatim option in dns.lookup() and dnsPromises.lookup() throws an", "doc_id": "feb691a8-4e81-4e53-ab2f-bee99042aa45", "embedding": null, "doc_hash": "c76a22d407415b6910a9e643b767a361297c9e802a943a4cea667e0f675cb3f0", "extra_info": null, "node_info": {"start": 964591, "end": 968320}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e0809066-1458-4da2-98ab-514c043598e0", "3": "96d76070-0ca9-49ba-8b58-7120b8e8bc00"}}, "__type__": "1"}, "96d76070-0ca9-49ba-8b58-7120b8e8bc00": {"__data__": {"text": "Extension PerformanceEntry properties#\nHistory\nType: Runtime\n\nThe 'gc', 'http2', and 'http' <PerformanceEntry> object types have additional properties assigned to them that provide additional information. These properties are now available within the standard detail property of the PerformanceEntry object. The existing accessors have been deprecated and should no longer be used.\n\nDEP0153: dns.lookup and dnsPromises.lookup options type coercion#\nHistory\nType: End-of-Life\n\nUsing a non-nullish non-integer value for family option, a non-nullish non-number value for hints option, a non-nullish non-boolean value for all option, or a non-nullish non-boolean value for verbatim option in dns.lookup() and dnsPromises.lookup() throws an ERR_INVALID_ARG_TYPE error.\n\nDEP0154: RSA-PSS generate key pair options#\nHistory\nType: Documentation-only (supports --pending-deprecation)\n\nThe 'hash' and 'mgf1Hash' options are replaced with 'hashAlgorithm' and 'mgf1HashAlgorithm'.\n\nDEP0155: Trailing slashes in pattern specifier resolutions#\nHistory\nType: Runtime\n\nThe remapping of specifiers ending in \"/\" like import 'pkg/x/' is deprecated for package \"exports\" and \"imports\" pattern resolutions.\n\nDEP0156: .aborted property and 'abort', 'aborted' event in http#\nHistory\nType: Documentation-only\n\nMove to <Stream> API instead, as the http.ClientRequest, http.ServerResponse, and http.IncomingMessage are all stream-based. Check stream.destroyed instead of the .aborted property, and listen for 'close' instead of 'abort', 'aborted' event.\n\nThe .aborted property and 'abort' event are only useful for detecting .abort() calls. For closing a request early, use the Stream .destroy([error]) then check the .destroyed property and 'close' event should have the same effect. The receiving end should also check the readable.readableEnded value on http.IncomingMessage to get whether it was an aborted or graceful destroy.\n\nDEP0157: Thenable support in streams#\nHistory\nType: End-of-Life\n\nAn undocumented feature of Node.js streams was to support thenables in implementation methods. This is now deprecated, use callbacks instead and avoid use of async function for streams implementation methods.\n\nThis feature caused users to encounter unexpected problems where the user implements the function in callback style but uses e.g. an async method which would cause an error since mixing promise and callback semantics is not valid.\n\nconst w = new Writable({\n  async final(callback) {\n    await someOp();\n    callback();\n  },\n});\nDEP0158: buffer.slice(start, end)#\nHistory\nType: Documentation-only\n\nThis method was deprecated because it is not compatible with Uint8Array.prototype.slice(), which is a superclass of Buffer.\n\nUse buffer.subarray which does the same thing instead.\n\nDEP0159: ERR_INVALID_CALLBACK#\nHistory\nType: End-of-Life\n\nThis error code was removed due to adding more confusion to the errors used for value type validation.\n\nDEP0160: process.on('multipleResolves', handler)#\nHistory\nType: Runtime.\n\nThis event was deprecated because it did not work with V8 promise combinators which diminished its usefulness.\n\nDEP0161: process._getActiveRequests() and process._getActiveHandles()#\nHistory\nType: Documentation-only\n\nThe process._getActiveHandles() and process._getActiveRequests() functions are not intended for public use and can be removed in future releases.\n\nUse process.getActiveResourcesInfo() to get a list of types of active resources and not the actual references.\n\nDEP0162: fs.write(), fs.writeFileSync() coercion to string#\nHistory\nType: End-of-Life\n\nImplicit coercion of objects with own toString property, passed as second parameter in fs.write(), fs.writeFile(), fs.appendFile(),", "doc_id": "96d76070-0ca9-49ba-8b58-7120b8e8bc00", "embedding": null, "doc_hash": "05f002dd8ab5c4a5216b43ced907b3f6f5a8c7eebfbe7e17375274fda3e8c7e9", "extra_info": null, "node_info": {"start": 968364, "end": 972055}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "feb691a8-4e81-4e53-ab2f-bee99042aa45", "3": "421f1326-e58b-4472-9101-53daf8b4fa8e"}}, "__type__": "1"}, "421f1326-e58b-4472-9101-53daf8b4fa8e": {"__data__": {"text": "handler)#\nHistory\nType: Runtime.\n\nThis event was deprecated because it did not work with V8 promise combinators which diminished its usefulness.\n\nDEP0161: process._getActiveRequests() and process._getActiveHandles()#\nHistory\nType: Documentation-only\n\nThe process._getActiveHandles() and process._getActiveRequests() functions are not intended for public use and can be removed in future releases.\n\nUse process.getActiveResourcesInfo() to get a list of types of active resources and not the actual references.\n\nDEP0162: fs.write(), fs.writeFileSync() coercion to string#\nHistory\nType: End-of-Life\n\nImplicit coercion of objects with own toString property, passed as second parameter in fs.write(), fs.writeFile(), fs.appendFile(), fs.writeFileSync(), and fs.appendFileSync() is deprecated. Convert them to primitive strings.\n\nDEP0163: channel.subscribe(onMessage), channel.unsubscribe(onMessage)#\nHistory\nType: Documentation-only\n\nThese methods were deprecated because they can be used in a way which does not hold the channel reference alive long enough to receive the events.\n\nUse diagnostics_channel.subscribe(name, onMessage) or diagnostics_channel.unsubscribe(name, onMessage) which does the same thing instead.\n\nDEP0164: process.exit(code), process.exitCode coercion to integer#\nHistory\nType: Documentation-only\n\nValues other than undefined, null, integer numbers, and integer strings (e.g., '1') are deprecated as value for the code parameter in process.exit() and as value to assign to process.exitCode.\n\nDEP0165: --trace-atomics-wait#\nHistory\nType: Documentation-only\n\nThe --trace-atomics-wait flag is deprecated.\n\nDEP0166: Double slashes in imports and exports targets#\nHistory\nType: Runtime\n\nPackage imports and exports targets mapping into paths including a double slash (of \"/\" or \"\\\") are deprecated and will fail with a resolution validation error in a future release. This same deprecation also applies to pattern matches starting or ending in a slash.\n\nDEP0167: Weak DiffieHellmanGroup instances (modp1, modp2, modp5)#\nHistory\nType: Documentation-only\n\nThe well-known MODP groups modp1, modp2, and modp5 are deprecated because they are not secure against practical attacks. See RFC 8247 Section 2.4 for details.\n\nThese groups might be removed in future versions of Node.js. Applications that rely on these groups should evaluate using stronger MODP groups instead.\n\nDEP0168: Unhandled exception in Node-API callbacks#\nHistory\nType: Runtime\n\nThe implicit suppression of uncaught exceptions in Node-API callbacks is now deprecated.\n\nSet the flag --force-node-api-uncaught-exceptions-policy to force Node.js to emit an 'uncaughtException' event if the exception is not handled in Node-API callbacks.\n\nDEP0169: Insecure url.parse()#\nHistory\nType: Documentation-only\n\nurl.parse() behavior is not standardized and prone to errors that have security implications. Use the WHATWG URL API instead. CVEs are not issued for url.parse() vulnerabilities.\n\nDEP0170: Invalid port when using url.parse()#\nHistory\nType: Documentation-only\n\nurl.parse() accepts URLs with ports that are not numbers. This behavior might result in host name spoofing with unexpected input. These URLs will throw an error in future versions of Node.js, as the WHATWG URL API does already.\n\nDEP0171: Setters for http.IncomingMessage headers and trailers#\nHistory\nType: Documentation-only\n\nIn a future version of Node.js, message.headers, message.headersDistinct, message.trailers, and message.trailersDistinct will be read-only.\n\nDiagnostics Channel#\nHistory\nStability: 2 - Stable\nSource Code: lib/diagnostics_channel.js\n\nThe node:diagnostics_channel module provides an API to create named channels to report arbitrary message data for diagnostics", "doc_id": "421f1326-e58b-4472-9101-53daf8b4fa8e", "embedding": null, "doc_hash": "20adba820ea01d618365ddce71b4999fae650c7dc80cd87505ac62e73fd6cc77", "extra_info": null, "node_info": {"start": 972049, "end": 975772}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "96d76070-0ca9-49ba-8b58-7120b8e8bc00", "3": "f9319a42-af48-41c3-8359-279d5074f719"}}, "__type__": "1"}, "f9319a42-af48-41c3-8359-279d5074f719": {"__data__": {"text": "when using url.parse()#\nHistory\nType: Documentation-only\n\nurl.parse() accepts URLs with ports that are not numbers. This behavior might result in host name spoofing with unexpected input. These URLs will throw an error in future versions of Node.js, as the WHATWG URL API does already.\n\nDEP0171: Setters for http.IncomingMessage headers and trailers#\nHistory\nType: Documentation-only\n\nIn a future version of Node.js, message.headers, message.headersDistinct, message.trailers, and message.trailersDistinct will be read-only.\n\nDiagnostics Channel#\nHistory\nStability: 2 - Stable\nSource Code: lib/diagnostics_channel.js\n\nThe node:diagnostics_channel module provides an API to create named channels to report arbitrary message data for diagnostics purposes.\n\nIt can be accessed using:\n\nimport diagnostics_channel from 'node:diagnostics_channel';\nIt is intended that a module writer wanting to report diagnostics messages will create one or many top-level channels to report messages through. Channels may also be acquired at runtime but it is not encouraged due to the additional overhead of doing so. Channels may be exported for convenience, but as long as the name is known it can be acquired anywhere.\n\nIf you intend for your module to produce diagnostics data for others to consume it is recommended that you include documentation of what named channels are used along with the shape of the message data. Channel names should generally include the module name to avoid collisions with data from other modules.\n\nPublic API#\nOverview#\nFollowing is a simple overview of the public API.\n\nimport diagnostics_channel from 'node:diagnostics_channel';\n\n// Get a reusable channel object\nconst channel = diagnostics_channel.channel('my-channel');\n\nfunction onMessage(message, name) {\n  // Received data\n}\n\n// Subscribe to the channel\ndiagnostics_channel.subscribe('my-channel', onMessage);\n\n// Check if the channel has an active subscriber\nif (channel.hasSubscribers) {\n  // Publish data to the channel\n  channel.publish({\n    some: 'data',\n  });\n}\n\n// Unsubscribe from the channel\ndiagnostics_channel.unsubscribe('my-channel', onMessage);\ndiagnostics_channel.hasSubscribers(name)#\nAdded in: v15.1.0, v14.17.0\nname <string> | <symbol> The channel name\nReturns: <boolean> If there are active subscribers\nCheck if there are active subscribers to the named channel. This is helpful if the message you want to send might be expensive to prepare.\n\nThis API is optional but helpful when trying to publish messages from very performance-sensitive code.\n\nimport diagnostics_channel from 'node:diagnostics_channel';\n\nif (diagnostics_channel.hasSubscribers('my-channel')) {\n  // There are subscribers, prepare and publish message\n}\ndiagnostics_channel.channel(name)#\nAdded in: v15.1.0, v14.17.0\nname <string> | <symbol> The channel name\nReturns: <Channel> The named channel object\nThis is the primary entry-point for anyone wanting to publish to a named channel. It produces a channel object which is optimized to reduce overhead at publish time as much as possible.\n\nimport diagnostics_channel from 'node:diagnostics_channel';\n\nconst channel = diagnostics_channel.channel('my-channel');\ndiagnostics_channel.subscribe(name, onMessage)#\nAdded in: v18.7.0\nname <string> | <symbol> The channel name\nonMessage <Function> The handler to receive channel messages\nmessage <any> The message data\nname <string> | <symbol> The name of the channel\nRegister a message handler to subscribe to this channel. This message handler will be run synchronously whenever a message is published to the channel. Any errors thrown in the message handler will trigger an 'uncaughtException'.\n\nimport diagnostics_channel from 'node:diagnostics_channel';\n\ndiagnostics_channel.subscribe('my-channel', (message, name) => {\n  // Received", "doc_id": "f9319a42-af48-41c3-8359-279d5074f719", "embedding": null, "doc_hash": "d30458a88cdf162f515492fa1c16d3c473bb0db2703aad4816fe573125ae61d6", "extra_info": null, "node_info": {"start": 975766, "end": 979554}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "421f1326-e58b-4472-9101-53daf8b4fa8e", "3": "5a9a38e4-d1cf-4977-925e-4a2dcb106b58"}}, "__type__": "1"}, "5a9a38e4-d1cf-4977-925e-4a2dcb106b58": {"__data__": {"text": "as possible.\n\nimport diagnostics_channel from 'node:diagnostics_channel';\n\nconst channel = diagnostics_channel.channel('my-channel');\ndiagnostics_channel.subscribe(name, onMessage)#\nAdded in: v18.7.0\nname <string> | <symbol> The channel name\nonMessage <Function> The handler to receive channel messages\nmessage <any> The message data\nname <string> | <symbol> The name of the channel\nRegister a message handler to subscribe to this channel. This message handler will be run synchronously whenever a message is published to the channel. Any errors thrown in the message handler will trigger an 'uncaughtException'.\n\nimport diagnostics_channel from 'node:diagnostics_channel';\n\ndiagnostics_channel.subscribe('my-channel', (message, name) => {\n  // Received data\n});\ndiagnostics_channel.unsubscribe(name, onMessage)#\nAdded in: v18.7.0\nname <string> | <symbol> The channel name\nonMessage <Function> The previous subscribed handler to remove\nReturns: <boolean> true if the handler was found, false otherwise.\nRemove a message handler previously registered to this channel with diagnostics_channel.subscribe(name, onMessage).\n\nimport diagnostics_channel from 'node:diagnostics_channel';\n\nfunction onMessage(message, name) {\n  // Received data\n}\n\ndiagnostics_channel.subscribe('my-channel', onMessage);\n\ndiagnostics_channel.unsubscribe('my-channel', onMessage);\nClass: Channel#\nAdded in: v15.1.0, v14.17.0\nThe class Channel represents an individual named channel within the data pipeline. It is used to track subscribers and to publish messages when there are subscribers present. It exists as a separate object to avoid channel lookups at publish time, enabling very fast publish speeds and allowing for heavy use while incurring very minimal cost. Channels are created with diagnostics_channel.channel(name), constructing a channel directly with new Channel(name) is not supported.\n\nchannel.hasSubscribers#\nAdded in: v15.1.0, v14.17.0\nReturns: <boolean> If there are active subscribers\nCheck if there are active subscribers to this channel. This is helpful if the message you want to send might be expensive to prepare.\n\nThis API is optional but helpful when trying to publish messages from very performance-sensitive code.\n\nimport diagnostics_channel from 'node:diagnostics_channel';\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nif (channel.hasSubscribers) {\n  // There are subscribers, prepare and publish message\n}\nchannel.publish(message)#\nAdded in: v15.1.0, v14.17.0\nmessage <any> The message to send to the channel subscribers\nPublish a message to any subscribers to the channel. This will trigger message handlers synchronously so they will execute within the same context.\n\nimport diagnostics_channel from 'node:diagnostics_channel';\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nchannel.publish({\n  some: 'message',\n});\nchannel.subscribe(onMessage)#\nAdded in: v15.1.0, v14.17.0Deprecated since: v18.7.0\nStability: 0 - Deprecated: Use diagnostics_channel.subscribe(name, onMessage)\nonMessage <Function> The handler to receive channel messages\nmessage <any> The message data\nname <string> | <symbol> The name of the channel\nRegister a message handler to subscribe to this channel. This message handler will be run synchronously whenever a message is published to the channel. Any errors thrown in the message handler will trigger an 'uncaughtException'.\n\nimport diagnostics_channel from 'node:diagnostics_channel';\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nchannel.subscribe((message, name) => {\n  // Received data\n});\nchannel.unsubscribe(onMessage)#\nHistory\nStability: 0 - Deprecated: Use diagnostics_channel.unsubscribe(name, onMessage)\nonMessage <Function> The previous subscribed handler to", "doc_id": "5a9a38e4-d1cf-4977-925e-4a2dcb106b58", "embedding": null, "doc_hash": "2dcbab54093e19e8c909a07c93b0e1ef413d976a1955f617d4f0d7747026c5a8", "extra_info": null, "node_info": {"start": 979542, "end": 983287}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f9319a42-af48-41c3-8359-279d5074f719", "3": "de34ef7f-ce9c-40ee-90b1-1f84de834ae0"}}, "__type__": "1"}, "de34ef7f-ce9c-40ee-90b1-1f84de834ae0": {"__data__": {"text": "diagnostics_channel.subscribe(name, onMessage)\nonMessage <Function> The handler to receive channel messages\nmessage <any> The message data\nname <string> | <symbol> The name of the channel\nRegister a message handler to subscribe to this channel. This message handler will be run synchronously whenever a message is published to the channel. Any errors thrown in the message handler will trigger an 'uncaughtException'.\n\nimport diagnostics_channel from 'node:diagnostics_channel';\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nchannel.subscribe((message, name) => {\n  // Received data\n});\nchannel.unsubscribe(onMessage)#\nHistory\nStability: 0 - Deprecated: Use diagnostics_channel.unsubscribe(name, onMessage)\nonMessage <Function> The previous subscribed handler to remove\nReturns: <boolean> true if the handler was found, false otherwise.\nRemove a message handler previously registered to this channel with channel.subscribe(onMessage).\n\nimport diagnostics_channel from 'node:diagnostics_channel';\n\nconst channel = diagnostics_channel.channel('my-channel');\n\nfunction onMessage(message, name) {\n  // Received data\n}\n\nchannel.subscribe(onMessage);\n\nchannel.unsubscribe(onMessage);\nBuilt-in Channels#\nStability: 1 - Experimental\nWhile the diagnostics_channel API is now considered stable, the built-in channels currently available are not. Each channel must be declared stable independently.\n\nHTTP#\nhttp.client.request.start\n\nrequest <http.ClientRequest>\nEmitted when client starts a request.\n\nhttp.client.response.finish\n\nrequest <http.ClientRequest>\nresponse <http.IncomingMessage>\nEmitted when client receives a response.\n\nhttp.server.request.start\n\nrequest <http.IncomingMessage>\nresponse <http.ServerResponse>\nsocket <net.Socket>\nserver <http.Server>\nEmitted when server receives a request.\n\nhttp.server.response.finish\n\nrequest <http.IncomingMessage>\nresponse <http.ServerResponse>\nsocket <net.Socket>\nserver <http.Server>\nEmitted when server sends a response.\n\nnet.client.socket\n\nsocket <net.Socket>\nEmitted when a new TCP or pipe client socket is created.\n\nnet.server.socket\n\nsocket <net.Socket>\nEmitted when a new TCP or pipe connection is received.\n\nudp.socket\n\nsocket <dgram.Socket>\nEmitted when a new UDP socket is created.\n\nDNS#\nStability: 2 - Stable\nSource Code: lib/dns.js\n\nThe node:dns module enables name resolution. For example, use it to look up IP addresses of host names.\n\nAlthough named for the Domain Name System (DNS), it does not always use the DNS protocol for lookups. dns.lookup() uses the operating system facilities to perform name resolution. It may not need to perform any network communication. To perform name resolution the way other applications on the same system do, use dns.lookup().\n\nconst dns = require('node:dns');\n\ndns.lookup('example.org', (err, address, family) => {\n  console.log('address: %j family: IPv%s', address, family);\n});\n// address: \"93.184.216.34\" family: IPv4\nAll other functions in the node:dns module connect to an actual DNS server to perform name resolution. They will always use the network to perform DNS queries. These functions do not use the same set of configuration files used by dns.lookup() (e.g. /etc/hosts). Use these functions to always perform DNS queries, bypassing other name-resolution facilities.\n\nconst dns = require('node:dns');\n\ndns.resolve4('archive.org', (err, addresses) => {\n  if (err) throw err;\n\n  console.log(`addresses: ${JSON.stringify(addresses)}`);\n\n  addresses.forEach((a) => {\n    dns.reverse(a, (err, hostnames) => {\n     ", "doc_id": "de34ef7f-ce9c-40ee-90b1-1f84de834ae0", "embedding": null, "doc_hash": "b7e4cec7a2d35c15d2275f74c01cb68756630e80ee63f0a466faf9fdb491ee44", "extra_info": null, "node_info": {"start": 983264, "end": 986793}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5a9a38e4-d1cf-4977-925e-4a2dcb106b58", "3": "f72d1e74-26c7-4cad-8913-64c92ab32c2e"}}, "__type__": "1"}, "f72d1e74-26c7-4cad-8913-64c92ab32c2e": {"__data__": {"text": "family: IPv4\nAll other functions in the node:dns module connect to an actual DNS server to perform name resolution. They will always use the network to perform DNS queries. These functions do not use the same set of configuration files used by dns.lookup() (e.g. /etc/hosts). Use these functions to always perform DNS queries, bypassing other name-resolution facilities.\n\nconst dns = require('node:dns');\n\ndns.resolve4('archive.org', (err, addresses) => {\n  if (err) throw err;\n\n  console.log(`addresses: ${JSON.stringify(addresses)}`);\n\n  addresses.forEach((a) => {\n    dns.reverse(a, (err, hostnames) => {\n      if (err) {\n        throw err;\n      }\n      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);\n    });\n  });\n});\nSee the Implementation considerations section for more information.\n\nClass: dns.Resolver#\nAdded in: v8.3.0\nAn independent resolver for DNS requests.\n\nCreating a new resolver uses the default server settings. Setting the servers used for a resolver using resolver.setServers() does not affect other resolvers:\n\nconst { Resolver } = require('node:dns');\nconst resolver = new Resolver();\nresolver.setServers(['4.4.4.4']);\n\n// This request will use the server at 4.4.4.4, independent of global settings.\nresolver.resolve4('example.org', (err, addresses) => {\n  // ...\n});\nThe following methods from the node:dns module are available:\n\nresolver.getServers()\nresolver.resolve()\nresolver.resolve4()\nresolver.resolve6()\nresolver.resolveAny()\nresolver.resolveCaa()\nresolver.resolveCname()\nresolver.resolveMx()\nresolver.resolveNaptr()\nresolver.resolveNs()\nresolver.resolvePtr()\nresolver.resolveSoa()\nresolver.resolveSrv()\nresolver.resolveTxt()\nresolver.reverse()\nresolver.setServers()\nResolver([options])#\nHistory\nCreate a new resolver.\n\noptions <Object>\ntimeout <integer> Query timeout in milliseconds, or -1 to use the default timeout.\ntries <integer> The number of tries the resolver will try contacting each name server before giving up. Default: 4\nresolver.cancel()#\nAdded in: v8.3.0\nCancel all outstanding DNS queries made by this resolver. The corresponding callbacks will be called with an error with code ECANCELLED.\n\nresolver.setLocalAddress([ipv4][, ipv6])#\nAdded in: v15.1.0, v14.17.0\nipv4 <string> A string representation of an IPv4 address. Default: '0.0.0.0'\nipv6 <string> A string representation of an IPv6 address. Default: '::0'\nThe resolver instance will send its requests from the specified IP address. This allows programs to specify outbound interfaces when used on multi-homed systems.\n\nIf a v4 or v6 address is not specified, it is set to the default and the operating system will choose a local address automatically.\n\nThe resolver will use the v4 local address when making requests to IPv4 DNS servers, and the v6 local address when making requests to IPv6 DNS servers. The rrtype of resolution requests has no impact on the local address used.\n\ndns.getServers()#\nAdded in: v0.11.3\nReturns: <string[]>\nReturns an array of IP address strings, formatted according to RFC 5952, that are currently configured for DNS resolution. A string will include a port section if a custom port is used.\n\n[\n  '4.4.4.4',\n ", "doc_id": "f72d1e74-26c7-4cad-8913-64c92ab32c2e", "embedding": null, "doc_hash": "c508e107db676f8278ffee92f48704f6aebefda3a63bc44921c8ec43d2e59805", "extra_info": null, "node_info": {"start": 986966, "end": 990126}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "de34ef7f-ce9c-40ee-90b1-1f84de834ae0", "3": "11962aaf-17a3-49ea-a158-0c087e78a305"}}, "__type__": "1"}, "11962aaf-17a3-49ea-a158-0c087e78a305": {"__data__": {"text": "This allows programs to specify outbound interfaces when used on multi-homed systems.\n\nIf a v4 or v6 address is not specified, it is set to the default and the operating system will choose a local address automatically.\n\nThe resolver will use the v4 local address when making requests to IPv4 DNS servers, and the v6 local address when making requests to IPv6 DNS servers. The rrtype of resolution requests has no impact on the local address used.\n\ndns.getServers()#\nAdded in: v0.11.3\nReturns: <string[]>\nReturns an array of IP address strings, formatted according to RFC 5952, that are currently configured for DNS resolution. A string will include a port section if a custom port is used.\n\n[\n  '4.4.4.4',\n  '2001:4860:4860::8888',\n  '4.4.4.4:1053',\n  '[2001:4860:4860::8888]:1053',\n]\ndns.lookup(hostname[, options], callback)#\nHistory\nhostname <string>\noptions <integer> | <Object>\nfamily <integer> | <string> The record family. Must be 4, 6, or 0. For backward compatibility reasons,'IPv4' and 'IPv6' are interpreted as 4 and 6 respectively. The value 0 indicates that IPv4 and IPv6 addresses are both returned. Default: 0.\nhints <number> One or more supported getaddrinfo flags. Multiple flags may be passed by bitwise ORing their values.\nall <boolean> When true, the callback returns all resolved addresses in an array. Otherwise, returns a single address. Default: false.\nverbatim <boolean> When true, the callback receives IPv4 and IPv6 addresses in the order the DNS resolver returned them. When false, IPv4 addresses are placed before IPv6 addresses. Default: true (addresses are not reordered). Default value is configurable using dns.setDefaultResultOrder() or --dns-result-order.\ncallback <Function>\nerr <Error>\naddress <string> A string representation of an IPv4 or IPv6 address.\nfamily <integer> 4 or 6, denoting the family of address, or 0 if the address is not an IPv4 or IPv6 address. 0 is a likely indicator of a bug in the name resolution service used by the operating system.\nResolves a host name (e.g. 'nodejs.org') into the first found A (IPv4) or AAAA (IPv6) record. All option properties are optional. If options is an integer, then it must be 4 or 6 \u2013 if options is 0 or not provided, then IPv4 and IPv6 addresses are both returned if found.\n\nWith the all option set to true, the arguments for callback change to (err, addresses), with addresses being an array of objects with the properties address and family.\n\nOn error, err is an Error object, where err.code is the error code. Keep in mind that err.code will be set to 'ENOTFOUND' not only when the host name does not exist but also when the lookup fails in other ways such as no available file descriptors.\n\ndns.lookup() does not necessarily have anything to do with the DNS protocol. The implementation uses an operating system facility that can associate names with addresses and vice versa. This implementation can have subtle but important consequences on the behavior of any Node.js program. Please take some time to consult the Implementation considerations section before using dns.lookup().\n\nExample usage:\n\nconst dns = require('node:dns');\nconst options = {\n  family: 6,\n  hints: dns.ADDRCONFIG | dns.V4MAPPED,\n};\ndns.lookup('example.com', options, (err, address, family) =>\n  console.log('address: %j family: IPv%s', address, family));\n// address: \"2606:2800:220:1:248:1893:25c8:1946\" family: IPv6\n\n// When options.all is true, the result will be an Array.\noptions.all = true;\ndns.lookup('example.com',", "doc_id": "11962aaf-17a3-49ea-a158-0c087e78a305", "embedding": null, "doc_hash": "a3ba20202bfa5e11f5604bbfb8d2e07123293831d1546edf83fd1fd521f2526d", "extra_info": null, "node_info": {"start": 990056, "end": 993548}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f72d1e74-26c7-4cad-8913-64c92ab32c2e", "3": "a54dac0e-5085-40e2-a28f-6563468d2786"}}, "__type__": "1"}, "a54dac0e-5085-40e2-a28f-6563468d2786": {"__data__": {"text": "subtle but important consequences on the behavior of any Node.js program. Please take some time to consult the Implementation considerations section before using dns.lookup().\n\nExample usage:\n\nconst dns = require('node:dns');\nconst options = {\n  family: 6,\n  hints: dns.ADDRCONFIG | dns.V4MAPPED,\n};\ndns.lookup('example.com', options, (err, address, family) =>\n  console.log('address: %j family: IPv%s', address, family));\n// address: \"2606:2800:220:1:248:1893:25c8:1946\" family: IPv6\n\n// When options.all is true, the result will be an Array.\noptions.all = true;\ndns.lookup('example.com', options, (err, addresses) =>\n  console.log('addresses: %j', addresses));\n// addresses: [{\"address\":\"2606:2800:220:1:248:1893:25c8:1946\",\"family\":6}]\nIf this method is invoked as its util.promisify()ed version, and all is not set to true, it returns a Promise for an Object with address and family properties.\n\nSupported getaddrinfo flags#\nHistory\nThe following flags can be passed as hints to dns.lookup().\n\ndns.ADDRCONFIG: Limits returned address types to the types of non-loopback addresses configured on the system. For example, IPv4 addresses are only returned if the current system has at least one IPv4 address configured.\ndns.V4MAPPED: If the IPv6 family was specified, but no IPv6 addresses were found, then return IPv4 mapped IPv6 addresses. It is not supported on some operating systems (e.g. FreeBSD 10.1).\ndns.ALL: If dns.V4MAPPED is specified, return resolved IPv6 addresses as well as IPv4 mapped IPv6 addresses.\ndns.lookupService(address, port, callback)#\nHistory\naddress <string>\nport <number>\ncallback <Function>\nerr <Error>\nhostname <string> e.g. example.com\nservice <string> e.g. http\nResolves the given address and port into a host name and service using the operating system's underlying getnameinfo implementation.\n\nIf address is not a valid IP address, a TypeError will be thrown. The port will be coerced to a number. If it is not a legal port, a TypeError will be thrown.\n\nOn an error, err is an Error object, where err.code is the error code.\n\nconst dns = require('node:dns');\ndns.lookupService('127.0.0.1', 22, (err, hostname, service) => {\n  console.log(hostname, service);\n  // Prints: localhost ssh\n});\nIf this method is invoked as its util.promisify()ed version, it returns a Promise for an Object with hostname and service properties.\n\ndns.resolve(hostname[, rrtype], callback)#\nHistory\nhostname <string> Host name to resolve.\nrrtype <string> Resource record type. Default: 'A'.\ncallback <Function>\nerr <Error>\nrecords <string[]> | <Object[]> | <Object>\nUses the DNS protocol to resolve a host name (e.g. 'nodejs.org') into an array of the resource records. The callback function has arguments (err, records). When successful, records will be an array of resource records. The type and structure of individual results varies based on rrtype:\n\nrrtype\trecords contains\tResult type\tShorthand method\n'A'\tIPv4 addresses (default)\t<string>\tdns.resolve4()\n'AAAA'\tIPv6 addresses\t<string>\tdns.resolve6()\n'ANY'\tany records\t<Object>\tdns.resolveAny()\n'CAA'\tCA authorization records\t<Object>\tdns.resolveCaa()\n'CNAME'\tcanonical name", "doc_id": "a54dac0e-5085-40e2-a28f-6563468d2786", "embedding": null, "doc_hash": "b9df5f2ce7ab6984caa372f833d1836b83ae446f7bd240590283078db43fa408", "extra_info": null, "node_info": {"start": 993623, "end": 996763}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "11962aaf-17a3-49ea-a158-0c087e78a305", "3": "d3f74bee-dd4e-4538-b98f-007ec595353b"}}, "__type__": "1"}, "d3f74bee-dd4e-4538-b98f-007ec595353b": {"__data__": {"text": "<Object[]> | <Object>\nUses the DNS protocol to resolve a host name (e.g. 'nodejs.org') into an array of the resource records. The callback function has arguments (err, records). When successful, records will be an array of resource records. The type and structure of individual results varies based on rrtype:\n\nrrtype\trecords contains\tResult type\tShorthand method\n'A'\tIPv4 addresses (default)\t<string>\tdns.resolve4()\n'AAAA'\tIPv6 addresses\t<string>\tdns.resolve6()\n'ANY'\tany records\t<Object>\tdns.resolveAny()\n'CAA'\tCA authorization records\t<Object>\tdns.resolveCaa()\n'CNAME'\tcanonical name records\t<string>\tdns.resolveCname()\n'MX'\tmail exchange records\t<Object>\tdns.resolveMx()\n'NAPTR'\tname authority pointer records\t<Object>\tdns.resolveNaptr()\n'NS'\tname server records\t<string>\tdns.resolveNs()\n'PTR'\tpointer records\t<string>\tdns.resolvePtr()\n'SOA'\tstart of authority records\t<Object>\tdns.resolveSoa()\n'SRV'\tservice records\t<Object>\tdns.resolveSrv()\n'TXT'\ttext records\t<string[]>\tdns.resolveTxt()\nOn error, err is an Error object, where err.code is one of the DNS error codes.\n\ndns.resolve4(hostname[, options], callback)#\nHistory\nhostname <string> Host name to resolve.\noptions <Object>\nttl <boolean> Retrieves the Time-To-Live value (TTL) of each record. When true, the callback receives an array of { address: '1.2.3.4', ttl: 60 } objects rather than an array of strings, with the TTL expressed in seconds.\ncallback <Function>\nerr <Error>\naddresses <string[]> | <Object[]>\nUses the DNS protocol to resolve a IPv4 addresses (A records) for the hostname. The addresses argument passed to the callback function will contain an array of IPv4 addresses (e.g. ['74.125.79.104', '74.125.79.105', '74.125.79.106']).\n\ndns.resolve6(hostname[, options], callback)#\nHistory\nhostname <string> Host name to resolve.\noptions <Object>\nttl <boolean> Retrieve the Time-To-Live value (TTL) of each record. When true, the callback receives an array of { address: '0:1:2:3:4:5:6:7', ttl: 60 } objects rather than an array of strings, with the TTL expressed in seconds.\ncallback <Function>\nerr <Error>\naddresses <string[]> | <Object[]>\nUses the DNS protocol to resolve IPv6 addresses (AAAA records) for the hostname. The addresses argument passed to the callback function will contain an array of IPv6 addresses.\n\ndns.resolveAny(hostname, callback)#\nHistory\nhostname <string>\ncallback <Function>\nerr <Error>\nret <Object[]>\nUses the DNS protocol to resolve all records (also known as ANY or * query). The ret argument passed to the callback function will be an array containing various types of records. Each object has a property type that indicates the type of the current record. And depending on the type, additional properties will be present on the object:\n\nType\tProperties\n'A'\taddress/ttl\n'AAAA'\taddress/ttl\n'CNAME'\tvalue\n'MX'\tRefer to dns.resolveMx()\n'NAPTR'\tRefer to dns.resolveNaptr()\n'NS'\tvalue\n'PTR'\tvalue\n'SOA'\tRefer to dns.resolveSoa()\n'SRV'\tRefer to", "doc_id": "d3f74bee-dd4e-4538-b98f-007ec595353b", "embedding": null, "doc_hash": "27cc2edfba4b13379abcee1dcc863ca7571c24d0a0f9ee043149ecb831c34980", "extra_info": null, "node_info": {"start": 996758, "end": 999699}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a54dac0e-5085-40e2-a28f-6563468d2786", "3": "91331157-f852-4d62-a71d-91642e5a48ef"}}, "__type__": "1"}, "91331157-f852-4d62-a71d-91642e5a48ef": {"__data__": {"text": "<string>\ncallback <Function>\nerr <Error>\nret <Object[]>\nUses the DNS protocol to resolve all records (also known as ANY or * query). The ret argument passed to the callback function will be an array containing various types of records. Each object has a property type that indicates the type of the current record. And depending on the type, additional properties will be present on the object:\n\nType\tProperties\n'A'\taddress/ttl\n'AAAA'\taddress/ttl\n'CNAME'\tvalue\n'MX'\tRefer to dns.resolveMx()\n'NAPTR'\tRefer to dns.resolveNaptr()\n'NS'\tvalue\n'PTR'\tvalue\n'SOA'\tRefer to dns.resolveSoa()\n'SRV'\tRefer to dns.resolveSrv()\n'TXT'\tThis type of record contains an array property called entries which refers to dns.resolveTxt(), e.g. { entries: ['...'], type: 'TXT' }\nHere is an example of the ret object passed to the callback:\n\n[ { type: 'A', address: '127.0.0.1', ttl: 299 },\n  { type: 'CNAME', value: 'example.com' },\n  { type: 'MX', exchange: 'alt4.aspmx.l.example.com', priority: 50 },\n  { type: 'NS', value: 'ns1.example.com' },\n  { type: 'TXT', entries: [ 'v=spf1 include:_spf.example.com ~all' ] },\n  { type: 'SOA',\n    nsname: 'ns1.example.com',\n    hostmaster: 'admin.example.com',\n    serial: 156696742,\n    refresh: 900,\n    retry: 900,\n    expire: 1800,\n    minttl: 60 } ]\nDNS server operators may choose not to respond to ANY queries. It may be better to call individual methods like dns.resolve4(), dns.resolveMx(), and so on. For more details, see RFC 8482.\n\ndns.resolveCname(hostname, callback)#\nHistory\nhostname <string>\ncallback <Function>\nerr <Error>\naddresses <string[]>\nUses the DNS protocol to resolve CNAME records for the hostname. The addresses argument passed to the callback function will contain an array of canonical name records available for the hostname (e.g. ['bar.example.com']).\n\ndns.resolveCaa(hostname, callback)#\nHistory\nhostname <string>\ncallback <Function>\nerr <Error>\nrecords <Object[]>\nUses the DNS protocol to resolve CAA records for the hostname. The addresses argument passed to the callback function will contain an array of certification authority authorization records available for the hostname (e.g. [{critical: 0, iodef: 'mailto:pki@example.com'}, {critical: 128, issue: 'pki.example.com'}]).\n\ndns.resolveMx(hostname, callback)#\nHistory\nhostname <string>\ncallback <Function>\nerr <Error>\naddresses <Object[]>\nUses the DNS protocol to resolve mail exchange records (MX records) for the hostname. The addresses argument passed to the callback function will contain an array of objects containing both a priority and exchange property (e.g. [{priority: 10, exchange: 'mx.example.com'}, ...]).\n\ndns.resolveNaptr(hostname, callback)#\nHistory\nhostname <string>\ncallback <Function>\nerr <Error>\naddresses <Object[]>\nUses the DNS protocol to resolve regular expression-based records (NAPTR records) for the hostname. The addresses argument passed to the callback function will contain an array of objects with the following properties:\n\nflags\nservice\nregexp\nreplacement\norder\npreference\n{\n  flags: 's',\n  service: 'SIP+D2U',\n  regexp: '',\n ", "doc_id": "91331157-f852-4d62-a71d-91642e5a48ef", "embedding": null, "doc_hash": "4b3329000f62edebdc55fa4a81a1976ca7d044e81c3f1dff18382122e88fec8d", "extra_info": null, "node_info": {"start": 999701, "end": 1002771}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d3f74bee-dd4e-4538-b98f-007ec595353b", "3": "fa58c07d-481f-4c09-91bd-659e8b76d138"}}, "__type__": "1"}, "fa58c07d-481f-4c09-91bd-659e8b76d138": {"__data__": {"text": "(MX records) for the hostname. The addresses argument passed to the callback function will contain an array of objects containing both a priority and exchange property (e.g. [{priority: 10, exchange: 'mx.example.com'}, ...]).\n\ndns.resolveNaptr(hostname, callback)#\nHistory\nhostname <string>\ncallback <Function>\nerr <Error>\naddresses <Object[]>\nUses the DNS protocol to resolve regular expression-based records (NAPTR records) for the hostname. The addresses argument passed to the callback function will contain an array of objects with the following properties:\n\nflags\nservice\nregexp\nreplacement\norder\npreference\n{\n  flags: 's',\n  service: 'SIP+D2U',\n  regexp: '',\n  replacement: '_sip._udp.example.com',\n  order: 30,\n  preference: 100\n}\ndns.resolveNs(hostname, callback)#\nHistory\nhostname <string>\ncallback <Function>\nerr <Error>\naddresses <string[]>\nUses the DNS protocol to resolve name server records (NS records) for the hostname. The addresses argument passed to the callback function will contain an array of name server records available for hostname (e.g. ['ns1.example.com', 'ns2.example.com']).\n\ndns.resolvePtr(hostname, callback)#\nHistory\nhostname <string>\ncallback <Function>\nerr <Error>\naddresses <string[]>\nUses the DNS protocol to resolve pointer records (PTR records) for the hostname. The addresses argument passed to the callback function will be an array of strings containing the reply records.\n\ndns.resolveSoa(hostname, callback)#\nHistory\nhostname <string>\ncallback <Function>\nerr <Error>\naddress <Object>\nUses the DNS protocol to resolve a start of authority record (SOA record) for the hostname. The address argument passed to the callback function will be an object with the following properties:\n\nnsname\nhostmaster\nserial\nrefresh\nretry\nexpire\nminttl\n{\n  nsname: 'ns.example.com',\n  hostmaster: 'root.example.com',\n  serial: 2013101809,\n  refresh: 10000,\n  retry: 2400,\n  expire: 604800,\n  minttl: 3600\n}\ndns.resolveSrv(hostname, callback)#\nHistory\nhostname <string>\ncallback <Function>\nerr <Error>\naddresses <Object[]>\nUses the DNS protocol to resolve service records (SRV records) for the hostname. The addresses argument passed to the callback function will be an array of objects with the following properties:\n\npriority\nweight\nport\nname\n{\n  priority: 10,\n  weight: 5,\n  port: 21223,\n  name: 'service.example.com'\n}\ndns.resolveTxt(hostname, callback)#\nHistory\nhostname <string>\ncallback <Function>\nerr <Error>\nrecords <string[][]>\nUses the DNS protocol to resolve text queries (TXT records) for the hostname. The records argument passed to the callback function is a two-dimensional array of the text records available for hostname (e.g. [ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]). Each sub-array contains TXT chunks of one record. Depending on the use case, these could be either joined together or treated separately.\n\ndns.reverse(ip, callback)#\nAdded in: v0.1.16\nip <string>\ncallback <Function>\nerr <Error>\nhostnames <string[]>\nPerforms a reverse DNS query that resolves an IPv4 or IPv6 address to an array of host names.\n\nOn error, err is an Error object, where err.code is one of the DNS error codes.\n\ndns.setDefaultResultOrder(order)#\nHistory\norder <string> must be 'ipv4first' or 'verbatim'.\nSet the default value of verbatim in", "doc_id": "fa58c07d-481f-4c09-91bd-659e8b76d138", "embedding": null, "doc_hash": "4fe28f9750ca0e64fc94af6f50ae763a75611ecdec278ecd9f706475318dc1e4", "extra_info": null, "node_info": {"start": 1002710, "end": 1005970}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "91331157-f852-4d62-a71d-91642e5a48ef", "3": "1dd29e2a-55c5-4424-8648-4421bc1be5c6"}}, "__type__": "1"}, "1dd29e2a-55c5-4424-8648-4421bc1be5c6": {"__data__": {"text": "(e.g. [ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]). Each sub-array contains TXT chunks of one record. Depending on the use case, these could be either joined together or treated separately.\n\ndns.reverse(ip, callback)#\nAdded in: v0.1.16\nip <string>\ncallback <Function>\nerr <Error>\nhostnames <string[]>\nPerforms a reverse DNS query that resolves an IPv4 or IPv6 address to an array of host names.\n\nOn error, err is an Error object, where err.code is one of the DNS error codes.\n\ndns.setDefaultResultOrder(order)#\nHistory\norder <string> must be 'ipv4first' or 'verbatim'.\nSet the default value of verbatim in dns.lookup() and dnsPromises.lookup(). The value could be:\n\nipv4first: sets default verbatim false.\nverbatim: sets default verbatim true.\nThe default is verbatim and dns.setDefaultResultOrder() have higher priority than --dns-result-order. When using worker threads, dns.setDefaultResultOrder() from the main thread won't affect the default dns orders in workers.\n\ndns.setServers(servers)#\nAdded in: v0.11.3\nservers <string[]> array of RFC 5952 formatted addresses\nSets the IP address and port of servers to be used when performing DNS resolution. The servers argument is an array of RFC 5952 formatted addresses. If the port is the IANA default DNS port (53) it can be omitted.\n\ndns.setServers([\n  '4.4.4.4',\n  '[2001:4860:4860::8888]',\n  '4.4.4.4:1053',\n  '[2001:4860:4860::8888]:1053',\n]);\nAn error will be thrown if an invalid address is provided.\n\nThe dns.setServers() method must not be called while a DNS query is in progress.\n\nThe dns.setServers() method affects only dns.resolve(), dns.resolve*() and dns.reverse() (and specifically not dns.lookup()).\n\nThis method works much like resolve.conf. That is, if attempting to resolve with the first server provided results in a NOTFOUND error, the resolve() method will not attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.\n\nDNS promises API#\nHistory\nThe dns.promises API provides an alternative set of asynchronous DNS methods that return Promise objects rather than using callbacks. The API is accessible via require('node:dns').promises or require('node:dns/promises').\n\nClass: dnsPromises.Resolver#\nAdded in: v10.6.0\nAn independent resolver for DNS requests.\n\nCreating a new resolver uses the default server settings. Setting the servers used for a resolver using resolver.setServers() does not affect other resolvers:\n\nconst { Resolver } = require('node:dns').promises;\nconst resolver = new Resolver();\nresolver.setServers(['4.4.4.4']);\n\n// This request will use the server at 4.4.4.4, independent of global settings.\nresolver.resolve4('example.org').then((addresses) => {\n  // ...\n});\n\n// Alternatively, the same code can be written using async-await style.\n(async function() {\n  const addresses = await resolver.resolve4('example.org');\n})();\nThe following methods from the dnsPromises API are", "doc_id": "1dd29e2a-55c5-4424-8648-4421bc1be5c6", "embedding": null, "doc_hash": "64bbcdb1f589192940d470ccdf60eaab9549c106204ceb0a60f9b54c8da190c6", "extra_info": null, "node_info": {"start": 1006043, "end": 1008998}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fa58c07d-481f-4c09-91bd-659e8b76d138", "3": "3cd9bf1b-c7eb-4df1-81a6-2ecab24c0172"}}, "__type__": "1"}, "3cd9bf1b-c7eb-4df1-81a6-2ecab24c0172": {"__data__": {"text": "DNS requests.\n\nCreating a new resolver uses the default server settings. Setting the servers used for a resolver using resolver.setServers() does not affect other resolvers:\n\nconst { Resolver } = require('node:dns').promises;\nconst resolver = new Resolver();\nresolver.setServers(['4.4.4.4']);\n\n// This request will use the server at 4.4.4.4, independent of global settings.\nresolver.resolve4('example.org').then((addresses) => {\n  // ...\n});\n\n// Alternatively, the same code can be written using async-await style.\n(async function() {\n  const addresses = await resolver.resolve4('example.org');\n})();\nThe following methods from the dnsPromises API are available:\n\nresolver.getServers()\nresolver.resolve()\nresolver.resolve4()\nresolver.resolve6()\nresolver.resolveAny()\nresolver.resolveCaa()\nresolver.resolveCname()\nresolver.resolveMx()\nresolver.resolveNaptr()\nresolver.resolveNs()\nresolver.resolvePtr()\nresolver.resolveSoa()\nresolver.resolveSrv()\nresolver.resolveTxt()\nresolver.reverse()\nresolver.setServers()\nresolver.cancel()#\nAdded in: v15.3.0, v14.17.0\nCancel all outstanding DNS queries made by this resolver. The corresponding promises will be rejected with an error with the code ECANCELLED.\n\ndnsPromises.getServers()#\nAdded in: v10.6.0\nReturns: <string[]>\nReturns an array of IP address strings, formatted according to RFC 5952, that are currently configured for DNS resolution. A string will include a port section if a custom port is used.\n\n[\n  '4.4.4.4',\n  '2001:4860:4860::8888',\n  '4.4.4.4:1053',\n  '[2001:4860:4860::8888]:1053',\n]\ndnsPromises.lookup(hostname[, options])#\nAdded in: v10.6.0\nhostname <string>\noptions <integer> | <Object>\nfamily <integer> The record family. Must be 4, 6, or 0. The value 0 indicates that IPv4 and IPv6 addresses are both returned. Default: 0.\nhints <number> One or more supported getaddrinfo flags. Multiple flags may be passed by bitwise ORing their values.\nall <boolean> When true, the Promise is resolved with all addresses in an array. Otherwise, returns a single address. Default: false.\nverbatim <boolean> When true, the Promise is resolved with IPv4 and IPv6 addresses in the order the DNS resolver returned them. When false, IPv4 addresses are placed before IPv6 addresses. Default: currently false (addresses are reordered) but this is expected to change in the not too distant future. Default value is configurable using dns.setDefaultResultOrder() or --dns-result-order. New code should use { verbatim: true }.\nResolves a host name (e.g. 'nodejs.org') into the first found A (IPv4) or AAAA (IPv6) record. All option properties are optional. If options is an integer, then it must be 4 or 6 \u2013 if options is not provided, then IPv4 and IPv6 addresses are both returned if found.\n\nWith the all option set to true, the Promise is resolved with addresses being an array of objects with the properties address and family.\n\nOn error, the Promise is rejected with an Error object, where err.code is the error code. Keep in mind that err.code will be set to 'ENOTFOUND' not only when the host name does not exist but also when the lookup fails in other ways such as no available file descriptors.\n\ndnsPromises.lookup() does not necessarily have anything to do with the DNS protocol. The implementation uses an operating system facility that can associate names with addresses and vice versa. This", "doc_id": "3cd9bf1b-c7eb-4df1-81a6-2ecab24c0172", "embedding": null, "doc_hash": "025269cbf4a9bf53724daa247da0df312b9f58776fc90835c45c6765a672e075", "extra_info": null, "node_info": {"start": 1008940, "end": 1012282}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1dd29e2a-55c5-4424-8648-4421bc1be5c6", "3": "c7f4920e-0fd0-4e44-b0c2-e6b6f3a14772"}}, "__type__": "1"}, "c7f4920e-0fd0-4e44-b0c2-e6b6f3a14772": {"__data__": {"text": "record. All option properties are optional. If options is an integer, then it must be 4 or 6 \u2013 if options is not provided, then IPv4 and IPv6 addresses are both returned if found.\n\nWith the all option set to true, the Promise is resolved with addresses being an array of objects with the properties address and family.\n\nOn error, the Promise is rejected with an Error object, where err.code is the error code. Keep in mind that err.code will be set to 'ENOTFOUND' not only when the host name does not exist but also when the lookup fails in other ways such as no available file descriptors.\n\ndnsPromises.lookup() does not necessarily have anything to do with the DNS protocol. The implementation uses an operating system facility that can associate names with addresses and vice versa. This implementation can have subtle but important consequences on the behavior of any Node.js program. Please take some time to consult the Implementation considerations section before using dnsPromises.lookup().\n\nExample usage:\n\nconst dns = require('node:dns');\nconst dnsPromises = dns.promises;\nconst options = {\n  family: 6,\n  hints: dns.ADDRCONFIG | dns.V4MAPPED,\n};\n\ndnsPromises.lookup('example.com', options).then((result) => {\n  console.log('address: %j family: IPv%s', result.address, result.family);\n  // address: \"2606:2800:220:1:248:1893:25c8:1946\" family: IPv6\n});\n\n// When options.all is true, the result will be an Array.\noptions.all = true;\ndnsPromises.lookup('example.com', options).then((result) => {\n  console.log('addresses: %j', result);\n  // addresses: [{\"address\":\"2606:2800:220:1:248:1893:25c8:1946\",\"family\":6}]\n});\ndnsPromises.lookupService(address, port)#\nAdded in: v10.6.0\naddress <string>\nport <number>\nResolves the given address and port into a host name and service using the operating system's underlying getnameinfo implementation.\n\nIf address is not a valid IP address, a TypeError will be thrown. The port will be coerced to a number. If it is not a legal port, a TypeError will be thrown.\n\nOn error, the Promise is rejected with an Error object, where err.code is the error code.\n\nconst dnsPromises = require('node:dns').promises;\ndnsPromises.lookupService('127.0.0.1', 22).then((result) => {\n  console.log(result.hostname, result.service);\n  // Prints: localhost ssh\n});\ndnsPromises.resolve(hostname[, rrtype])#\nAdded in: v10.6.0\nhostname <string> Host name to resolve.\nrrtype <string> Resource record type. Default: 'A'.\nUses the DNS protocol to resolve a host name (e.g. 'nodejs.org') into an array of the resource records. When successful, the Promise is resolved with an array of resource records. The type and structure of individual results vary based on rrtype:\n\nrrtype\trecords contains\tResult type\tShorthand method\n'A'\tIPv4 addresses (default)\t<string>\tdnsPromises.resolve4()\n'AAAA'\tIPv6 addresses\t<string>\tdnsPromises.resolve6()\n'ANY'\tany records\t<Object>\tdnsPromises.resolveAny()\n'CAA'\tCA authorization records\t<Object>\tdnsPromises.resolveCaa()\n'CNAME'\tcanonical name records\t<string>\tdnsPromises.resolveCname()\n'MX'\tmail exchange records\t<Object>\tdnsPromises.resolveMx()\n'NAPTR'\tname authority pointer records\t<Object>\tdnsPromises.resolveNaptr()\n'NS'\tname server", "doc_id": "c7f4920e-0fd0-4e44-b0c2-e6b6f3a14772", "embedding": null, "doc_hash": "c032dc15a93904a9a17f00b7b23b29f5bf4dd48d3825ed62fb4126129818f3ad", "extra_info": null, "node_info": {"start": 1012203, "end": 1015398}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3cd9bf1b-c7eb-4df1-81a6-2ecab24c0172", "3": "307f3874-e32c-4f58-b1bc-dd78b89eee3f"}}, "__type__": "1"}, "307f3874-e32c-4f58-b1bc-dd78b89eee3f": {"__data__": {"text": "contains\tResult type\tShorthand method\n'A'\tIPv4 addresses (default)\t<string>\tdnsPromises.resolve4()\n'AAAA'\tIPv6 addresses\t<string>\tdnsPromises.resolve6()\n'ANY'\tany records\t<Object>\tdnsPromises.resolveAny()\n'CAA'\tCA authorization records\t<Object>\tdnsPromises.resolveCaa()\n'CNAME'\tcanonical name records\t<string>\tdnsPromises.resolveCname()\n'MX'\tmail exchange records\t<Object>\tdnsPromises.resolveMx()\n'NAPTR'\tname authority pointer records\t<Object>\tdnsPromises.resolveNaptr()\n'NS'\tname server records\t<string>\tdnsPromises.resolveNs()\n'PTR'\tpointer records\t<string>\tdnsPromises.resolvePtr()\n'SOA'\tstart of authority records\t<Object>\tdnsPromises.resolveSoa()\n'SRV'\tservice records\t<Object>\tdnsPromises.resolveSrv()\n'TXT'\ttext records\t<string[]>\tdnsPromises.resolveTxt()\nOn error, the Promise is rejected with an Error object, where err.code is one of the DNS error codes.\n\ndnsPromises.resolve4(hostname[, options])#\nAdded in: v10.6.0\nhostname <string> Host name to resolve.\noptions <Object>\nttl <boolean> Retrieve the Time-To-Live value (TTL) of each record. When true, the Promise is resolved with an array of { address: '1.2.3.4', ttl: 60 } objects rather than an array of strings, with the TTL expressed in seconds.\nUses the DNS protocol to resolve IPv4 addresses (A records) for the hostname. On success, the Promise is resolved with an array of IPv4 addresses (e.g. ['74.125.79.104', '74.125.79.105', '74.125.79.106']).\n\ndnsPromises.resolve6(hostname[, options])#\nAdded in: v10.6.0\nhostname <string> Host name to resolve.\noptions <Object>\nttl <boolean> Retrieve the Time-To-Live value (TTL) of each record. When true, the Promise is resolved with an array of { address: '0:1:2:3:4:5:6:7', ttl: 60 } objects rather than an array of strings, with the TTL expressed in seconds.\nUses the DNS protocol to resolve IPv6 addresses (AAAA records) for the hostname. On success, the Promise is resolved with an array of IPv6 addresses.\n\ndnsPromises.resolveAny(hostname)#\nAdded in: v10.6.0\nhostname <string>\nUses the DNS protocol to resolve all records (also known as ANY or * query). On success, the Promise is resolved with an array containing various types of records. Each object has a property type that indicates the type of the current record. And depending on the type, additional properties will be present on the object:\n\nType\tProperties\n'A'\taddress/ttl\n'AAAA'\taddress/ttl\n'CNAME'\tvalue\n'MX'\tRefer to dnsPromises.resolveMx()\n'NAPTR'\tRefer to dnsPromises.resolveNaptr()\n'NS'\tvalue\n'PTR'\tvalue\n'SOA'\tRefer to dnsPromises.resolveSoa()\n'SRV'\tRefer to dnsPromises.resolveSrv()\n'TXT'\tThis type of record contains an array property called entries which refers to dnsPromises.resolveTxt(), e.g. { entries: ['...'], type: 'TXT' }\nHere is an example of the result object:\n\n[ { type: 'A', address: '127.0.0.1', ttl: 299 },\n  { type: 'CNAME', value:", "doc_id": "307f3874-e32c-4f58-b1bc-dd78b89eee3f", "embedding": null, "doc_hash": "8b7d425d893b3621c8e7ad3c85482101a37062b9452850e13075d583f266a9e8", "extra_info": null, "node_info": {"start": 1015584, "end": 1018418}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c7f4920e-0fd0-4e44-b0c2-e6b6f3a14772", "3": "2fa1c4f8-1995-4bb2-abdd-2fccd8eb0a10"}}, "__type__": "1"}, "2fa1c4f8-1995-4bb2-abdd-2fccd8eb0a10": {"__data__": {"text": "to dnsPromises.resolveMx()\n'NAPTR'\tRefer to dnsPromises.resolveNaptr()\n'NS'\tvalue\n'PTR'\tvalue\n'SOA'\tRefer to dnsPromises.resolveSoa()\n'SRV'\tRefer to dnsPromises.resolveSrv()\n'TXT'\tThis type of record contains an array property called entries which refers to dnsPromises.resolveTxt(), e.g. { entries: ['...'], type: 'TXT' }\nHere is an example of the result object:\n\n[ { type: 'A', address: '127.0.0.1', ttl: 299 },\n  { type: 'CNAME', value: 'example.com' },\n  { type: 'MX', exchange: 'alt4.aspmx.l.example.com', priority: 50 },\n  { type: 'NS', value: 'ns1.example.com' },\n  { type: 'TXT', entries: [ 'v=spf1 include:_spf.example.com ~all' ] },\n  { type: 'SOA',\n    nsname: 'ns1.example.com',\n    hostmaster: 'admin.example.com',\n    serial: 156696742,\n    refresh: 900,\n    retry: 900,\n    expire: 1800,\n    minttl: 60 } ]\ndnsPromises.resolveCaa(hostname)#\nAdded in: v15.0.0, v14.17.0\nhostname <string>\nUses the DNS protocol to resolve CAA records for the hostname. On success, the Promise is resolved with an array of objects containing available certification authority authorization records available for the hostname (e.g. [{critical: 0, iodef: 'mailto:pki@example.com'},{critical: 128, issue: 'pki.example.com'}]).\n\ndnsPromises.resolveCname(hostname)#\nAdded in: v10.6.0\nhostname <string>\nUses the DNS protocol to resolve CNAME records for the hostname. On success, the Promise is resolved with an array of canonical name records available for the hostname (e.g. ['bar.example.com']).\n\ndnsPromises.resolveMx(hostname)#\nAdded in: v10.6.0\nhostname <string>\nUses the DNS protocol to resolve mail exchange records (MX records) for the hostname. On success, the Promise is resolved with an array of objects containing both a priority and exchange property (e.g. [{priority: 10, exchange: 'mx.example.com'}, ...]).\n\ndnsPromises.resolveNaptr(hostname)#\nAdded in: v10.6.0\nhostname <string>\nUses the DNS protocol to resolve regular expression-based records (NAPTR records) for the hostname. On success, the Promise is resolved with an array of objects with the following properties:\n\nflags\nservice\nregexp\nreplacement\norder\npreference\n{\n  flags: 's',\n  service: 'SIP+D2U',\n  regexp: '',\n  replacement: '_sip._udp.example.com',\n  order: 30,\n  preference: 100\n}\ndnsPromises.resolveNs(hostname)#\nAdded in: v10.6.0\nhostname <string>\nUses the DNS protocol to resolve name server records (NS records) for the hostname. On success, the Promise is resolved with an array of name server records available for hostname (e.g. ['ns1.example.com', 'ns2.example.com']).\n\ndnsPromises.resolvePtr(hostname)#\nAdded in: v10.6.0\nhostname <string>\nUses the DNS protocol to resolve pointer records (PTR records) for the hostname. On success, the Promise is resolved with an array of strings containing the reply records.\n\ndnsPromises.resolveSoa(hostname)#\nAdded", "doc_id": "2fa1c4f8-1995-4bb2-abdd-2fccd8eb0a10", "embedding": null, "doc_hash": "def3c02704a3ce1ae41571bfafee58a1985481d4fc238b1b1562967bf69f608b", "extra_info": null, "node_info": {"start": 1018499, "end": 1021331}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "307f3874-e32c-4f58-b1bc-dd78b89eee3f", "3": "5e7e3090-8d38-4e9f-8251-e2de542e4ca0"}}, "__type__": "1"}, "5e7e3090-8d38-4e9f-8251-e2de542e4ca0": {"__data__": {"text": " preference: 100\n}\ndnsPromises.resolveNs(hostname)#\nAdded in: v10.6.0\nhostname <string>\nUses the DNS protocol to resolve name server records (NS records) for the hostname. On success, the Promise is resolved with an array of name server records available for hostname (e.g. ['ns1.example.com', 'ns2.example.com']).\n\ndnsPromises.resolvePtr(hostname)#\nAdded in: v10.6.0\nhostname <string>\nUses the DNS protocol to resolve pointer records (PTR records) for the hostname. On success, the Promise is resolved with an array of strings containing the reply records.\n\ndnsPromises.resolveSoa(hostname)#\nAdded in: v10.6.0\nhostname <string>\nUses the DNS protocol to resolve a start of authority record (SOA record) for the hostname. On success, the Promise is resolved with an object with the following properties:\n\nnsname\nhostmaster\nserial\nrefresh\nretry\nexpire\nminttl\n{\n  nsname: 'ns.example.com',\n  hostmaster: 'root.example.com',\n  serial: 2013101809,\n  refresh: 10000,\n  retry: 2400,\n  expire: 604800,\n  minttl: 3600\n}\ndnsPromises.resolveSrv(hostname)#\nAdded in: v10.6.0\nhostname <string>\nUses the DNS protocol to resolve service records (SRV records) for the hostname. On success, the Promise is resolved with an array of objects with the following properties:\n\npriority\nweight\nport\nname\n{\n  priority: 10,\n  weight: 5,\n  port: 21223,\n  name: 'service.example.com'\n}\ndnsPromises.resolveTxt(hostname)#\nAdded in: v10.6.0\nhostname <string>\nUses the DNS protocol to resolve text queries (TXT records) for the hostname. On success, the Promise is resolved with a two-dimensional array of the text records available for hostname (e.g. [ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]). Each sub-array contains TXT chunks of one record. Depending on the use case, these could be either joined together or treated separately.\n\ndnsPromises.reverse(ip)#\nAdded in: v10.6.0\nip <string>\nPerforms a reverse DNS query that resolves an IPv4 or IPv6 address to an array of host names.\n\nOn error, the Promise is rejected with an Error object, where err.code is one of the DNS error codes.\n\ndnsPromises.setDefaultResultOrder(order)#\nHistory\norder <string> must be 'ipv4first' or 'verbatim'.\nSet the default value of verbatim in dns.lookup() and dnsPromises.lookup(). The value could be:\n\nipv4first: sets default verbatim false.\nverbatim: sets default verbatim true.\nThe default is verbatim and dnsPromises.setDefaultResultOrder() have higher priority than --dns-result-order. When using worker threads, dnsPromises.setDefaultResultOrder() from the main thread won't affect the default dns orders in workers.\n\ndnsPromises.setServers(servers)#\nAdded in: v10.6.0\nservers <string[]> array of RFC 5952 formatted addresses\nSets the IP address and port of servers to be used when performing DNS resolution. The servers argument is an array of RFC 5952 formatted addresses. If the port is the IANA default DNS port (53) it can be omitted.\n\ndnsPromises.setServers([\n  '4.4.4.4',\n  '[2001:4860:4860::8888]',\n  '4.4.4.4:1053',\n  '[2001:4860:4860::8888]:1053',\n]);\nAn error will be thrown if an", "doc_id": "5e7e3090-8d38-4e9f-8251-e2de542e4ca0", "embedding": null, "doc_hash": "e2dfe6c5ce6f4b0a6f9196e24c83f6aac4799a89a2f2c6903b5b337ad00f41fb", "extra_info": null, "node_info": {"start": 1021193, "end": 1024236}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2fa1c4f8-1995-4bb2-abdd-2fccd8eb0a10", "3": "983fdbb7-bb27-4b07-a108-fe147b4e75e9"}}, "__type__": "1"}, "983fdbb7-bb27-4b07-a108-fe147b4e75e9": {"__data__": {"text": "from the main thread won't affect the default dns orders in workers.\n\ndnsPromises.setServers(servers)#\nAdded in: v10.6.0\nservers <string[]> array of RFC 5952 formatted addresses\nSets the IP address and port of servers to be used when performing DNS resolution. The servers argument is an array of RFC 5952 formatted addresses. If the port is the IANA default DNS port (53) it can be omitted.\n\ndnsPromises.setServers([\n  '4.4.4.4',\n  '[2001:4860:4860::8888]',\n  '4.4.4.4:1053',\n  '[2001:4860:4860::8888]:1053',\n]);\nAn error will be thrown if an invalid address is provided.\n\nThe dnsPromises.setServers() method must not be called while a DNS query is in progress.\n\nThis method works much like resolve.conf. That is, if attempting to resolve with the first server provided results in a NOTFOUND error, the resolve() method will not attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.\n\nError codes#\nEach DNS query can return one of the following error codes:\n\ndns.NODATA: DNS server returned an answer with no data.\ndns.FORMERR: DNS server claims query was misformatted.\ndns.SERVFAIL: DNS server returned general failure.\ndns.NOTFOUND: Domain name not found.\ndns.NOTIMP: DNS server does not implement the requested operation.\ndns.REFUSED: DNS server refused query.\ndns.BADQUERY: Misformatted DNS query.\ndns.BADNAME: Misformatted host name.\ndns.BADFAMILY: Unsupported address family.\ndns.BADRESP: Misformatted DNS reply.\ndns.CONNREFUSED: Could not contact DNS servers.\ndns.TIMEOUT: Timeout while contacting DNS servers.\ndns.EOF: End of file.\ndns.FILE: Error reading file.\ndns.NOMEM: Out of memory.\ndns.DESTRUCTION: Channel is being destroyed.\ndns.BADSTR: Misformatted string.\ndns.BADFLAGS: Illegal flags specified.\ndns.NONAME: Given host name is not numeric.\ndns.BADHINTS: Illegal hints flags specified.\ndns.NOTINITIALIZED: c-ares library initialization not yet performed.\ndns.LOADIPHLPAPI: Error loading iphlpapi.dll.\ndns.ADDRGETNETWORKPARAMS: Could not find GetNetworkParams function.\ndns.CANCELLED: DNS query cancelled.\nThe dnsPromises API also exports the above error codes, e.g., dnsPromises.NODATA.\n\nImplementation considerations#\nAlthough dns.lookup() and the various dns.resolve*()/dns.reverse() functions have the same goal of associating a network name with a network address (or vice versa), their behavior is quite different. These differences can have subtle but significant consequences on the behavior of Node.js programs.\n\ndns.lookup()#\nUnder the hood, dns.lookup() uses the same operating system facilities as most other programs. For instance, dns.lookup() will almost always resolve a given name the same way as the ping command. On most POSIX-like operating systems, the behavior of the dns.lookup() function can be modified by changing settings in nsswitch.conf(5) and/or resolv.conf(5), but changing these files will change the behavior of all other programs running on the same operating system.\n\nThough the call to dns.lookup() will be asynchronous from JavaScript's perspective, it is implemented as a synchronous call to getaddrinfo(3) that runs on libuv's threadpool. This can have surprising negative performance implications for some applications, see the UV_THREADPOOL_SIZE", "doc_id": "983fdbb7-bb27-4b07-a108-fe147b4e75e9", "embedding": null, "doc_hash": "93bbd56a8aac9576376536bdc73de3184e705eb7431aefe69251a3ef7ae61925", "extra_info": null, "node_info": {"start": 1024298, "end": 1027597}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5e7e3090-8d38-4e9f-8251-e2de542e4ca0", "3": "6c1715f8-5f6a-42bb-b5d6-bb3fbab8a2a3"}}, "__type__": "1"}, "6c1715f8-5f6a-42bb-b5d6-bb3fbab8a2a3": {"__data__": {"text": "the hood, dns.lookup() uses the same operating system facilities as most other programs. For instance, dns.lookup() will almost always resolve a given name the same way as the ping command. On most POSIX-like operating systems, the behavior of the dns.lookup() function can be modified by changing settings in nsswitch.conf(5) and/or resolv.conf(5), but changing these files will change the behavior of all other programs running on the same operating system.\n\nThough the call to dns.lookup() will be asynchronous from JavaScript's perspective, it is implemented as a synchronous call to getaddrinfo(3) that runs on libuv's threadpool. This can have surprising negative performance implications for some applications, see the UV_THREADPOOL_SIZE documentation for more information.\n\nVarious networking APIs will call dns.lookup() internally to resolve host names. If that is an issue, consider resolving the host name to an address using dns.resolve() and using the address instead of a host name. Also, some networking APIs (such as socket.connect() and dgram.createSocket()) allow the default resolver, dns.lookup(), to be replaced.\n\ndns.resolve(), dns.resolve*(), and dns.reverse()#\nThese functions are implemented quite differently than dns.lookup(). They do not use getaddrinfo(3) and they always perform a DNS query on the network. This network communication is always done asynchronously and does not use libuv's threadpool.\n\nAs a result, these functions cannot have the same negative impact on other processing that happens on libuv's threadpool that dns.lookup() can have.\n\nThey do not use the same set of configuration files that dns.lookup() uses. For instance, they do not use the configuration from /etc/hosts.\n\nDomain#\nHistory\nStability: 0 - Deprecated\nSource Code: lib/domain.js\n\nThis module is pending deprecation. Once a replacement API has been finalized, this module will be fully deprecated. Most developers should not have cause to use this module. Users who absolutely must have the functionality that domains provide may rely on it for the time being but should expect to have to migrate to a different solution in the future.\n\nDomains provide a way to handle multiple different IO operations as a single group. If any of the event emitters or callbacks registered to a domain emit an 'error' event, or throw an error, then the domain object will be notified, rather than losing the context of the error in the process.on('uncaughtException') handler, or causing the program to exit immediately with an error code.\n\nWarning: Don't ignore errors!#\nDomain error handlers are not a substitute for closing down a process when an error occurs.\n\nBy the very nature of how throw works in JavaScript, there is almost never any way to safely \"pick up where it left off\", without leaking references, or creating some other sort of undefined brittle state.\n\nThe safest way to respond to a thrown error is to shut down the process. Of course, in a normal web server, there may be many open connections, and it is not reasonable to abruptly shut those down because an error was triggered by someone else.\n\nThe better approach is to send an error response to the request that triggered the error, while letting the others finish in their normal time, and stop listening for new requests in that worker.\n\nIn this way, domain usage goes hand-in-hand with the cluster module, since the primary process can fork a new worker when a worker encounters an error. For Node.js programs that scale to multiple machines, the terminating proxy or service registry can take note of the failure, and react accordingly.\n\nFor example, this is not a good idea:\n\n// XXX WARNING! BAD IDEA!\n\nconst d = require('node:domain').create();\nd.on('error', (er) => {\n  // The error won't crash the process, but what it does is worse!\n  // Though we've prevented abrupt process restarting, we are leaking\n  // a lot of resources if this ever happens.\n  // This is no better than", "doc_id": "6c1715f8-5f6a-42bb-b5d6-bb3fbab8a2a3", "embedding": null, "doc_hash": "1060829279a7b73447412cb39cbe795ef65aad1d72fe4b6292ae9e6457403b86", "extra_info": null, "node_info": {"start": 1027429, "end": 1031386}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "983fdbb7-bb27-4b07-a108-fe147b4e75e9", "3": "b28a8fdb-49e6-46b0-91f9-a7fae735b3c2"}}, "__type__": "1"}, "b28a8fdb-49e6-46b0-91f9-a7fae735b3c2": {"__data__": {"text": "their normal time, and stop listening for new requests in that worker.\n\nIn this way, domain usage goes hand-in-hand with the cluster module, since the primary process can fork a new worker when a worker encounters an error. For Node.js programs that scale to multiple machines, the terminating proxy or service registry can take note of the failure, and react accordingly.\n\nFor example, this is not a good idea:\n\n// XXX WARNING! BAD IDEA!\n\nconst d = require('node:domain').create();\nd.on('error', (er) => {\n  // The error won't crash the process, but what it does is worse!\n  // Though we've prevented abrupt process restarting, we are leaking\n  // a lot of resources if this ever happens.\n  // This is no better than process.on('uncaughtException')!\n  console.log(`error, but oh well ${er.message}`);\n});\nd.run(() => {\n  require('node:http').createServer((req, res) => {\n    handleRequest(req, res);\n  }).listen(PORT);\n});\nBy using the context of a domain, and the resilience of separating our program into multiple worker processes, we can react more appropriately, and handle errors with much greater safety.\n\n// Much better!\n\nconst cluster = require('node:cluster');\nconst PORT = +process.env.PORT || 1337;\n\nif (cluster.isPrimary) {\n  // A more realistic scenario would have more than 2 workers,\n  // and perhaps not put the primary and worker in the same file.\n  //\n  // It is also possible to get a bit fancier about logging, and\n  // implement whatever custom logic is needed to prevent DoS\n  // attacks and other bad behavior.\n  //\n  // See the options in the cluster documentation.\n  //\n  // The important thing is that the primary does very little,\n  // increasing our resilience to unexpected errors.\n\n  cluster.fork();\n  cluster.fork();\n\n  cluster.on('disconnect', (worker) => {\n    console.error('disconnect!');\n    cluster.fork();\n  });\n\n} else {\n  // the worker\n  //\n  // This is where we put our bugs!\n\n  const domain = require('node:domain');\n\n  // See the cluster documentation for more details about using\n  // worker processes to serve requests. How it works, caveats, etc.\n\n  const server = require('node:http').createServer((req, res) => {\n    const d = domain.create();\n    d.on('error', (er) => {\n      console.error(`error ${er.stack}`);\n\n      // We're in dangerous territory!\n      // By definition, something unexpected occurred,\n      // which we probably didn't want.\n      // Anything can happen now! Be very careful!\n\n      try {\n        // Make sure we close down within 30 seconds\n        const killtimer = setTimeout(() => {\n          process.exit(1);\n        }, 30000);\n        // But don't keep the process open just for that!\n        killtimer.unref();\n\n        // Stop taking new requests.\n        server.close();\n\n        // Let the primary know we're dead. This will trigger a\n        // 'disconnect' in the cluster primary, and then it will fork\n        // a new worker.\n        cluster.worker.disconnect();\n\n        // Try to send an error to the request that triggered the problem\n        res.statusCode = 500;\n        res.setHeader('content-type', 'text/plain');\n        res.end('Oops, there was a", "doc_id": "b28a8fdb-49e6-46b0-91f9-a7fae735b3c2", "embedding": null, "doc_hash": "1ca0fc333b64c380082ef562b99b9235b8a707da2e1e83217d0f08947d0725a7", "extra_info": null, "node_info": {"start": 1031427, "end": 1034569}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6c1715f8-5f6a-42bb-b5d6-bb3fbab8a2a3", "3": "b5bcdebc-2fda-4154-b9bf-f2e1607ba7f9"}}, "__type__": "1"}, "b5bcdebc-2fda-4154-b9bf-f2e1607ba7f9": {"__data__": {"text": "the process open just for that!\n        killtimer.unref();\n\n        // Stop taking new requests.\n        server.close();\n\n        // Let the primary know we're dead. This will trigger a\n        // 'disconnect' in the cluster primary, and then it will fork\n        // a new worker.\n        cluster.worker.disconnect();\n\n        // Try to send an error to the request that triggered the problem\n        res.statusCode = 500;\n        res.setHeader('content-type', 'text/plain');\n        res.end('Oops, there was a problem!\\n');\n      } catch (er2) {\n        // Oh well, not much we can do at this point.\n        console.error(`Error sending 500! ${er2.stack}`);\n      }\n    });\n\n    // Because req and res were created before this domain existed,\n    // we need to explicitly add them.\n    // See the explanation of implicit vs explicit binding below.\n    d.add(req);\n    d.add(res);\n\n    // Now run the handler function in the domain.\n    d.run(() => {\n      handleRequest(req, res);\n    });\n  });\n  server.listen(PORT);\n}\n\n// This part is not important. Just an example routing thing.\n// Put fancy application logic here.\nfunction handleRequest(req, res) {\n  switch (req.url) {\n    case '/error':\n      // We do some async stuff, and then...\n      setTimeout(() => {\n        // Whoops!\n        flerb.bark();\n      }, timeout);\n      break;\n    default:\n      res.end('ok');\n  }\n}\nAdditions to Error objects#\nAny time an Error object is routed through a domain, a few extra fields are added to it.\n\nerror.domain The domain that first handled the error.\nerror.domainEmitter The event emitter that emitted an 'error' event with the error object.\nerror.domainBound The callback function which was bound to the domain, and passed an error as its first argument.\nerror.domainThrown A boolean indicating whether the error was thrown, emitted, or passed to a bound callback function.\nImplicit binding#\nIf domains are in use, then all new EventEmitter objects (including Stream objects, requests, responses, etc.) will be implicitly bound to the active domain at the time of their creation.\n\nAdditionally, callbacks passed to lowlevel event loop requests (such as to fs.open(), or other callback-taking methods) will automatically be bound to the active domain. If they throw, then the domain will catch the error.\n\nIn order to prevent excessive memory usage, Domain objects themselves are not implicitly added as children of the active domain. If they were, then it would be too easy to prevent request and response objects from being properly garbage collected.\n\nTo nest Domain objects as children of a parent Domain they must be explicitly added.\n\nImplicit binding routes thrown errors and 'error' events to the Domain's 'error' event, but does not register the EventEmitter on the Domain. Implicit binding only takes care of thrown errors and 'error' events.\n\nExplicit binding#\nSometimes, the domain in use is not the one that ought to be used for a specific event emitter. Or, the event emitter could have been created in the context of one domain, but ought to instead be bound to some other domain.\n\nFor example, there could be one domain in use for an HTTP server, but perhaps we would like to have a separate domain to use for each request.\n\nThat is possible via explicit binding.\n\n// Create a top-level domain for the server\nconst", "doc_id": "b5bcdebc-2fda-4154-b9bf-f2e1607ba7f9", "embedding": null, "doc_hash": "6c6964abad823e30343462a75e7ff0f09054c65b5d49afa163ff20de6db55280", "extra_info": null, "node_info": {"start": 1034797, "end": 1038127}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b28a8fdb-49e6-46b0-91f9-a7fae735b3c2", "3": "53c36826-9765-40a2-a9f9-f6911011f9ac"}}, "__type__": "1"}, "53c36826-9765-40a2-a9f9-f6911011f9ac": {"__data__": {"text": "being properly garbage collected.\n\nTo nest Domain objects as children of a parent Domain they must be explicitly added.\n\nImplicit binding routes thrown errors and 'error' events to the Domain's 'error' event, but does not register the EventEmitter on the Domain. Implicit binding only takes care of thrown errors and 'error' events.\n\nExplicit binding#\nSometimes, the domain in use is not the one that ought to be used for a specific event emitter. Or, the event emitter could have been created in the context of one domain, but ought to instead be bound to some other domain.\n\nFor example, there could be one domain in use for an HTTP server, but perhaps we would like to have a separate domain to use for each request.\n\nThat is possible via explicit binding.\n\n// Create a top-level domain for the server\nconst domain = require('node:domain');\nconst http = require('node:http');\nconst serverDomain = domain.create();\n\nserverDomain.run(() => {\n  // Server is created in the scope of serverDomain\n  http.createServer((req, res) => {\n    // Req and res are also created in the scope of serverDomain\n    // however, we'd prefer to have a separate domain for each request.\n    // create it first thing, and add req and res to it.\n    const reqd = domain.create();\n    reqd.add(req);\n    reqd.add(res);\n    reqd.on('error', (er) => {\n      console.error('Error', er, req.url);\n      try {\n        res.writeHead(500);\n        res.end('Error occurred, sorry.');\n      } catch (er2) {\n        console.error('Error sending 500', er2, req.url);\n      }\n    });\n  }).listen(1337);\n});\ndomain.create()#\nReturns: <Domain>\nClass: Domain#\nExtends: <EventEmitter>\nThe Domain class encapsulates the functionality of routing errors and uncaught exceptions to the active Domain object.\n\nTo handle the errors that it catches, listen to its 'error' event.\n\ndomain.members#\n<Array>\nAn array of timers and event emitters that have been explicitly added to the domain.\n\ndomain.add(emitter)#\nemitter <EventEmitter> | <Timer> emitter or timer to be added to the domain\nExplicitly adds an emitter to the domain. If any event handlers called by the emitter throw an error, or if the emitter emits an 'error' event, it will be routed to the domain's 'error' event, just like with implicit binding.\n\nThis also works with timers that are returned from setInterval() and setTimeout(). If their callback function throws, it will be caught by the domain 'error' handler.\n\nIf the Timer or EventEmitter was already bound to a domain, it is removed from that one, and bound to this one instead.\n\ndomain.bind(callback)#\ncallback <Function> The callback function\nReturns: <Function> The bound function\nThe returned function will be a wrapper around the supplied callback function. When the returned function is called, any errors that are thrown will be routed to the domain's 'error' event.\n\nconst d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, 'utf8', d.bind((er, data) => {\n    // If this throws, it will also be passed to the domain.\n    return cb(er, data ? JSON.parse(data) : null);\n  }));\n}\n\nd.on('error', (er) => {\n  // An error occurred somewhere. If we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\ndomain.enter()#\nThe enter() method is plumbing used by the run(), bind(), and intercept() methods to set the active domain. It sets domain.active and process.domain to the domain, and implicitly pushes the domain onto the", "doc_id": "53c36826-9765-40a2-a9f9-f6911011f9ac", "embedding": null, "doc_hash": "cd119e446234c8580f923517074777aed0b95317be3846674c2c104b2ffcd8ae", "extra_info": null, "node_info": {"start": 1037821, "end": 1041298}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b5bcdebc-2fda-4154-b9bf-f2e1607ba7f9", "3": "672d8b52-130f-4faf-8f49-171fe5716ef9"}}, "__type__": "1"}, "672d8b52-130f-4faf-8f49-171fe5716ef9": {"__data__": {"text": "event.\n\nconst d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, 'utf8', d.bind((er, data) => {\n    // If this throws, it will also be passed to the domain.\n    return cb(er, data ? JSON.parse(data) : null);\n  }));\n}\n\nd.on('error', (er) => {\n  // An error occurred somewhere. If we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\ndomain.enter()#\nThe enter() method is plumbing used by the run(), bind(), and intercept() methods to set the active domain. It sets domain.active and process.domain to the domain, and implicitly pushes the domain onto the domain stack managed by the domain module (see domain.exit() for details on the domain stack). The call to enter() delimits the beginning of a chain of asynchronous calls and I/O operations bound to a domain.\n\nCalling enter() changes only the active domain, and does not alter the domain itself. enter() and exit() can be called an arbitrary number of times on a single domain.\n\ndomain.exit()#\nThe exit() method exits the current domain, popping it off the domain stack. Any time execution is going to switch to the context of a different chain of asynchronous calls, it's important to ensure that the current domain is exited. The call to exit() delimits either the end of or an interruption to the chain of asynchronous calls and I/O operations bound to a domain.\n\nIf there are multiple, nested domains bound to the current execution context, exit() will exit any domains nested within this domain.\n\nCalling exit() changes only the active domain, and does not alter the domain itself. enter() and exit() can be called an arbitrary number of times on a single domain.\n\ndomain.intercept(callback)#\ncallback <Function> The callback function\nReturns: <Function> The intercepted function\nThis method is almost identical to domain.bind(callback). However, in addition to catching thrown errors, it will also intercept Error objects sent as the first argument to the function.\n\nIn this way, the common if (err) return callback(err); pattern can be replaced with a single error handler in a single place.\n\nconst d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, 'utf8', d.intercept((data) => {\n    // Note, the first argument is never passed to the\n    // callback since it is assumed to be the 'Error' argument\n    // and thus intercepted by the domain.\n\n    // If this throws, it will also be passed to the domain\n    // so the error-handling logic can be moved to the 'error'\n    // event on the domain instead of being repeated throughout\n    // the program.\n    return cb(null, JSON.parse(data));\n  }));\n}\n\nd.on('error', (er) => {\n  // An error occurred somewhere. If we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\ndomain.remove(emitter)#\nemitter <EventEmitter> | <Timer> emitter or timer to be removed from the domain\nThe opposite of domain.add(emitter). Removes domain handling from the specified emitter.\n\ndomain.run(fn[, ...args])#\nfn <Function>\n...args <any>\nRun the supplied function in the context of the domain, implicitly binding all event emitters, timers, and lowlevel requests that are created in that context. Optionally, arguments can be passed to the function.\n\nThis is the most basic way to use a domain.\n\nconst domain = require('node:domain');\nconst fs = require('node:fs');\nconst d = domain.create();\nd.on('error', (er) => {\n  console.error('Caught error!', er);\n});\nd.run(() => {\n  process.nextTick(() => {\n    setTimeout(() => { // Simulating some various async stuff\n  ", "doc_id": "672d8b52-130f-4faf-8f49-171fe5716ef9", "embedding": null, "doc_hash": "3847ab601f9ca210ce5b9952fb4393f8d4f9a4177a6e70dd6c40f503b98ffa0f", "extra_info": null, "node_info": {"start": 1041447, "end": 1045055}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "53c36826-9765-40a2-a9f9-f6911011f9ac", "3": "e3a3af65-bc99-4e5e-90fd-98ddfcc5bc1e"}}, "__type__": "1"}, "e3a3af65-bc99-4e5e-90fd-98ddfcc5bc1e": {"__data__": {"text": "Removes domain handling from the specified emitter.\n\ndomain.run(fn[, ...args])#\nfn <Function>\n...args <any>\nRun the supplied function in the context of the domain, implicitly binding all event emitters, timers, and lowlevel requests that are created in that context. Optionally, arguments can be passed to the function.\n\nThis is the most basic way to use a domain.\n\nconst domain = require('node:domain');\nconst fs = require('node:fs');\nconst d = domain.create();\nd.on('error', (er) => {\n  console.error('Caught error!', er);\n});\nd.run(() => {\n  process.nextTick(() => {\n    setTimeout(() => { // Simulating some various async stuff\n      fs.open('non-existent file', 'r', (er, fd) => {\n        if (er) throw er;\n        // proceed...\n      });\n    }, 100);\n  });\n});\nIn this example, the d.on('error') handler will be triggered, rather than crashing the program.\n\nDomains and promises#\nAs of Node.js 8.0.0, the handlers of promises are run inside the domain in which the call to .then() or .catch() itself was made:\n\nconst d1 = domain.create();\nconst d2 = domain.create();\n\nlet p;\nd1.run(() => {\n  p = Promise.resolve(42);\n});\n\nd2.run(() => {\n  p.then((v) => {\n    // running in d2\n  });\n});\nA callback may be bound to a specific domain using domain.bind(callback):\n\nconst d1 = domain.create();\nconst d2 = domain.create();\n\nlet p;\nd1.run(() => {\n  p = Promise.resolve(42);\n});\n\nd2.run(() => {\n  p.then(p.domain.bind((v) => {\n    // running in d1\n  }));\n});\nDomains will not interfere with the error handling mechanisms for promises. In other words, no 'error' event will be emitted for unhandled Promise rejections.\n\nErrors#\nApplications running in Node.js will generally experience four categories of errors:\n\nStandard JavaScript errors such as <EvalError>, <SyntaxError>, <RangeError>, <ReferenceError>, <TypeError>, and <URIError>.\nSystem errors triggered by underlying operating system constraints such as attempting to open a file that does not exist or attempting to send data over a closed socket.\nUser-specified errors triggered by application code.\nAssertionErrors are a special class of error that can be triggered when Node.js detects an exceptional logic violation that should never occur. These are raised typically by the node:assert module.\nAll JavaScript and system errors raised by Node.js inherit from, or are instances of, the standard JavaScript <Error> class and are guaranteed to provide at least the properties available on that class.\n\nError propagation and interception#\nNode.js supports several mechanisms for propagating and handling errors that occur while an application is running. How these errors are reported and handled depends entirely on the type of Error and the style of the API that is called.\n\nAll JavaScript errors are handled as exceptions that immediately generate and throw an error using the standard JavaScript throw mechanism. These are handled using the try\u2026catch construct provided by the JavaScript language.\n\n// Throws with a ReferenceError because z is not defined.\ntry {\n  const m = 1;\n  const n = m + z;\n} catch (err) {\n  // Handle the error here.\n}\nAny use of the JavaScript throw mechanism will raise an exception that must be handled using try\u2026catch or the Node.js process will exit immediately.\n\nWith few exceptions, Synchronous APIs (any blocking method that does not accept a callback function, such as fs.readFileSync), will use throw to report errors.\n\nErrors that occur within Asynchronous APIs may be reported in", "doc_id": "e3a3af65-bc99-4e5e-90fd-98ddfcc5bc1e", "embedding": null, "doc_hash": "b7e139570cc365300b9bd53f0763b6c62ed6e5e0123afd254f6e28286f1871e1", "extra_info": null, "node_info": {"start": 1045039, "end": 1048515}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "672d8b52-130f-4faf-8f49-171fe5716ef9", "3": "56c52ff9-c4ea-47f3-a44e-959d2952b570"}}, "__type__": "1"}, "56c52ff9-c4ea-47f3-a44e-959d2952b570": {"__data__": {"text": "the type of Error and the style of the API that is called.\n\nAll JavaScript errors are handled as exceptions that immediately generate and throw an error using the standard JavaScript throw mechanism. These are handled using the try\u2026catch construct provided by the JavaScript language.\n\n// Throws with a ReferenceError because z is not defined.\ntry {\n  const m = 1;\n  const n = m + z;\n} catch (err) {\n  // Handle the error here.\n}\nAny use of the JavaScript throw mechanism will raise an exception that must be handled using try\u2026catch or the Node.js process will exit immediately.\n\nWith few exceptions, Synchronous APIs (any blocking method that does not accept a callback function, such as fs.readFileSync), will use throw to report errors.\n\nErrors that occur within Asynchronous APIs may be reported in multiple ways:\n\nMost asynchronous methods that accept a callback function will accept an Error object passed as the first argument to that function. If that first argument is not null and is an instance of Error, then an error occurred that should be handled.\n\nconst fs = require('node:fs');\nfs.readFile('a file that does not exist', (err, data) => {\n  if (err) {\n    console.error('There was an error reading the file!', err);\n    return;\n  }\n  // Otherwise handle the data\n});\nWhen an asynchronous method is called on an object that is an EventEmitter, errors can be routed to that object's 'error' event.\n\nconst net = require('node:net');\nconst connection = net.connect('localhost');\n\n// Adding an 'error' event handler to a stream:\nconnection.on('error', (err) => {\n  // If the connection is reset by the server, or if it can't\n  // connect at all, or on any sort of error encountered by\n  // the connection, the error will be sent here.\n  console.error(err);\n});\n\nconnection.pipe(process.stdout);\nA handful of typically asynchronous methods in the Node.js API may still use the throw mechanism to raise exceptions that must be handled using try\u2026catch. There is no comprehensive list of such methods; please refer to the documentation of each method to determine the appropriate error handling mechanism required.\n\nThe use of the 'error' event mechanism is most common for stream-based and event emitter-based APIs, which themselves represent a series of asynchronous operations over time (as opposed to a single operation that may pass or fail).\n\nFor all EventEmitter objects, if an 'error' event handler is not provided, the error will be thrown, causing the Node.js process to report an uncaught exception and crash unless either: The domain module is used appropriately or a handler has been registered for the 'uncaughtException' event.\n\nconst EventEmitter = require('node:events');\nconst ee = new EventEmitter();\n\nsetImmediate(() => {\n  // This will crash the process because no 'error' event\n  // handler has been added.\n  ee.emit('error', new Error('This will crash'));\n});\nErrors generated in this way cannot be intercepted using try\u2026catch as they are thrown after the calling code has already exited.\n\nDevelopers must refer to the documentation for each method to determine exactly how errors raised by those methods are propagated.\n\nError-first callbacks#\nMost asynchronous methods exposed by the Node.js core API follow an idiomatic pattern referred to as an error-first callback. With this pattern, a callback function is passed to the method as an argument. When the operation either completes or an error is raised, the callback function is called with the Error object (if any) passed as the first argument. If no error was raised, the first argument will be passed as null.\n\nconst fs = require('node:fs');\n\nfunction errorFirstCallback(err, data) {\n  if (err) {\n    console.error('There was an error', err);\n    return;\n  }\n  console.log(data);\n}\n\nfs.readFile('/some/file/that/does-not-exist', errorFirstCallback);\nfs.readFile('/some/file/that/does-exist',", "doc_id": "56c52ff9-c4ea-47f3-a44e-959d2952b570", "embedding": null, "doc_hash": "e0d58c27198d813cb994e17df821093ad87a2ee64608ed7f673413d54281a679", "extra_info": null, "node_info": {"start": 1048391, "end": 1052270}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e3a3af65-bc99-4e5e-90fd-98ddfcc5bc1e", "3": "e22ebdf8-807c-4fa5-97e5-7730faaf67c7"}}, "__type__": "1"}, "e22ebdf8-807c-4fa5-97e5-7730faaf67c7": {"__data__": {"text": "asynchronous methods exposed by the Node.js core API follow an idiomatic pattern referred to as an error-first callback. With this pattern, a callback function is passed to the method as an argument. When the operation either completes or an error is raised, the callback function is called with the Error object (if any) passed as the first argument. If no error was raised, the first argument will be passed as null.\n\nconst fs = require('node:fs');\n\nfunction errorFirstCallback(err, data) {\n  if (err) {\n    console.error('There was an error', err);\n    return;\n  }\n  console.log(data);\n}\n\nfs.readFile('/some/file/that/does-not-exist', errorFirstCallback);\nfs.readFile('/some/file/that/does-exist', errorFirstCallback);\nThe JavaScript try\u2026catch mechanism cannot be used to intercept errors generated by asynchronous APIs. A common mistake for beginners is to try to use throw inside an error-first callback:\n\n// THIS WILL NOT WORK:\nconst fs = require('node:fs');\n\ntry {\n  fs.readFile('/some/file/that/does-not-exist', (err, data) => {\n    // Mistaken assumption: throwing here...\n    if (err) {\n      throw err;\n    }\n  });\n} catch (err) {\n  // This will not catch the throw!\n  console.error(err);\n}\nThis will not work because the callback function passed to fs.readFile() is called asynchronously. By the time the callback has been called, the surrounding code, including the try\u2026catch block, will have already exited. Throwing an error inside the callback can crash the Node.js process in most cases. If domains are enabled, or a handler has been registered with process.on('uncaughtException'), such errors can be intercepted.\n\nClass: Error#\nA generic JavaScript <Error> object that does not denote any specific circumstance of why the error occurred. Error objects capture a \"stack trace\" detailing the point in the code at which the Error was instantiated, and may provide a text description of the error.\n\nAll errors generated by Node.js, including all system and JavaScript errors, will either be instances of, or inherit from, the Error class.\n\nnew Error(message[, options])#\nmessage <string>\noptions <Object>\ncause <any> The error that caused the newly created error.\nCreates a new Error object and sets the error.message property to the provided text message. If an object is passed as message, the text message is generated by calling String(message). If the cause option is provided, it is assigned to the error.cause property. The error.stack property will represent the point in the code at which new Error() was called. Stack traces are dependent on V8's stack trace API. Stack traces extend only to either (a) the beginning of synchronous code execution, or (b) the number of frames given by the property Error.stackTraceLimit, whichever is smaller.\n\nError.captureStackTrace(targetObject[, constructorOpt])#\ntargetObject <Object>\nconstructorOpt <Function>\nCreates a .stack property on targetObject, which when accessed returns a string representing the location in the code at which Error.captureStackTrace() was called.\n\nconst myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // Similar to `new Error().stack`\nThe first line of the trace will be prefixed with ${myObject.name}: ${myObject.message}.\n\nThe optional constructorOpt argument accepts a function. If given, all frames above constructorOpt, including constructorOpt, will be omitted from the generated stack trace.\n\nThe constructorOpt argument is useful for hiding implementation details of error generation from the user. For instance:\n\nfunction MyError() {\n  Error.captureStackTrace(this, MyError);\n}\n\n// Without passing MyError to captureStackTrace, the MyError\n// frame would show up in the .stack property. By passing\n// the constructor, we omit that frame, and retain all frames below it.\nnew", "doc_id": "e22ebdf8-807c-4fa5-97e5-7730faaf67c7", "embedding": null, "doc_hash": "10dd4dcaf2323160e360751b97cc4208cdbdbea8a9fc4f4213abc3ba9201a541", "extra_info": null, "node_info": {"start": 1052341, "end": 1056135}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "56c52ff9-c4ea-47f3-a44e-959d2952b570", "3": "222b3f29-b005-412f-a773-0ebf2f65321f"}}, "__type__": "1"}, "222b3f29-b005-412f-a773-0ebf2f65321f": {"__data__": {"text": "myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // Similar to `new Error().stack`\nThe first line of the trace will be prefixed with ${myObject.name}: ${myObject.message}.\n\nThe optional constructorOpt argument accepts a function. If given, all frames above constructorOpt, including constructorOpt, will be omitted from the generated stack trace.\n\nThe constructorOpt argument is useful for hiding implementation details of error generation from the user. For instance:\n\nfunction MyError() {\n  Error.captureStackTrace(this, MyError);\n}\n\n// Without passing MyError to captureStackTrace, the MyError\n// frame would show up in the .stack property. By passing\n// the constructor, we omit that frame, and retain all frames below it.\nnew MyError().stack;\nError.stackTraceLimit#\n<number>\nThe Error.stackTraceLimit property specifies the number of stack frames collected by a stack trace (whether generated by new Error().stack or Error.captureStackTrace(obj)).\n\nThe default value is 10 but may be set to any valid JavaScript number. Changes will affect any stack trace captured after the value has been changed.\n\nIf set to a non-number value, or set to a negative number, stack traces will not capture any frames.\n\nerror.cause#\nAdded in: v16.9.0\n<any>\nIf present, the error.cause property is the underlying cause of the Error. It is used when catching an error and throwing a new one with a different message or code in order to still have access to the original error.\n\nThe error.cause property is typically set by calling new Error(message, { cause }). It is not set by the constructor if the cause option is not provided.\n\nThis property allows errors to be chained. When serializing Error objects, util.inspect() recursively serializes error.cause if it is set.\n\nconst cause = new Error('The remote HTTP server responded with a 500 status');\nconst symptom = new Error('The message failed to send', { cause });\n\nconsole.log(symptom);\n// Prints:\n//   Error: The message failed to send\n//       at REPL2:1:17\n//       at Script.runInThisContext (node:vm:130:12)\n//       ... 7 lines matching cause stack trace ...\n//       at [_line] [as _line] (node:internal/readline/interface:886:18) {\n//     [cause]: Error: The remote HTTP server responded with a 500 status\n//         at REPL1:1:15\n//         at Script.runInThisContext (node:vm:130:12)\n//         at REPLServer.defaultEval (node:repl:574:29)\n//         at bound (node:domain:426:15)\n//         at REPLServer.runBound [as eval] (node:domain:437:12)\n//         at REPLServer.onLine (node:repl:902:10)\n//         at REPLServer.emit (node:events:549:35)\n//         at REPLServer.emit (node:domain:482:12)\n//         at [_onLine] [as _onLine] (node:internal/readline/interface:425:12)\n//         at [_line] [as _line] (node:internal/readline/interface:886:18)\nerror.code#\n<string>\nThe error.code property is a string label that identifies the kind of error. error.code is the most stable way to identify an error. It will only change between major versions of Node.js. In contrast, error.message strings may change between any versions of Node.js. See Node.js error codes for details about specific codes.\n\nerror.message#\n<string>\nThe error.message property is the string description of the error as set by calling new Error(message). The message passed to the", "doc_id": "222b3f29-b005-412f-a773-0ebf2f65321f", "embedding": null, "doc_hash": "348a3016a5144e98ec3a619a762f8d8d50d0e96ab03f463231127d7c5f54ac95", "extra_info": null, "node_info": {"start": 1056082, "end": 1059404}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e22ebdf8-807c-4fa5-97e5-7730faaf67c7", "3": "206a099f-908d-4d50-b235-e9336f258c85"}}, "__type__": "1"}, "206a099f-908d-4d50-b235-e9336f258c85": {"__data__": {"text": "(node:domain:482:12)\n//         at [_onLine] [as _onLine] (node:internal/readline/interface:425:12)\n//         at [_line] [as _line] (node:internal/readline/interface:886:18)\nerror.code#\n<string>\nThe error.code property is a string label that identifies the kind of error. error.code is the most stable way to identify an error. It will only change between major versions of Node.js. In contrast, error.message strings may change between any versions of Node.js. See Node.js error codes for details about specific codes.\n\nerror.message#\n<string>\nThe error.message property is the string description of the error as set by calling new Error(message). The message passed to the constructor will also appear in the first line of the stack trace of the Error, however changing this property after the Error object is created may not change the first line of the stack trace (for example, when error.stack is read before this property is changed).\n\nconst err = new Error('The message');\nconsole.error(err.message);\n// Prints: The message\nerror.stack#\n<string>\nThe error.stack property is a string describing the point in the code at which the Error was instantiated.\n\nError: Things keep happening!\n   at /home/gbusey/file.js:525:2\n   at Frobnicator.refrobulate (/home/gbusey/business-logic.js:424:21)\n   at Actor.<anonymous> (/home/gbusey/actors.js:400:8)\n   at increaseSynergy (/home/gbusey/actors.js:701:6)\nThe first line is formatted as <error class name>: <error message>, and is followed by a series of stack frames (each line beginning with \"at \"). Each frame describes a call site within the code that lead to the error being generated. V8 attempts to display a name for each function (by variable name, function name, or object method name), but occasionally it will not be able to find a suitable name. If V8 cannot determine a name for the function, only location information will be displayed for that frame. Otherwise, the determined function name will be displayed with location information appended in parentheses.\n\nFrames are only generated for JavaScript functions. If, for example, execution synchronously passes through a C++ addon function called cheetahify which itself calls a JavaScript function, the frame representing the cheetahify call will not be present in the stack traces:\n\nconst cheetahify = require('./native-binding.node');\n\nfunction makeFaster() {\n  // `cheetahify()` *synchronously* calls speedy.\n  cheetahify(function speedy() {\n    throw new Error('oh no!');\n  });\n}\n\nmakeFaster();\n// will throw:\n//   /home/gbusey/file.js:6\n//       throw new Error('oh no!');\n//           ^\n//   Error: oh no!\n//       at speedy (/home/gbusey/file.js:6:11)\n//       at makeFaster (/home/gbusey/file.js:5:3)\n//       at Object.<anonymous> (/home/gbusey/file.js:10:1)\n//       at Module._compile (module.js:456:26)\n//       at Object.Module._extensions..js (module.js:474:10)\n//       at Module.load (module.js:356:32)\n//       at Function.Module._load (module.js:312:12)\n//       at Function.Module.runMain (module.js:497:10)\n//       at startup (node.js:119:16)\n//       at node.js:906:3\nThe location information will be one of:\n\nnative, if the frame represents", "doc_id": "206a099f-908d-4d50-b235-e9336f258c85", "embedding": null, "doc_hash": "b8a3b75d2e8000a781c042d9eaecd9066488234f436b3fd34c4a01e98782b9db", "extra_info": null, "node_info": {"start": 1059484, "end": 1062662}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "222b3f29-b005-412f-a773-0ebf2f65321f", "3": "dc227f45-2363-43fd-b88d-857430a27593"}}, "__type__": "1"}, "dc227f45-2363-43fd-b88d-857430a27593": {"__data__": {"text": "      at Object.<anonymous> (/home/gbusey/file.js:10:1)\n//       at Module._compile (module.js:456:26)\n//       at Object.Module._extensions..js (module.js:474:10)\n//       at Module.load (module.js:356:32)\n//       at Function.Module._load (module.js:312:12)\n//       at Function.Module.runMain (module.js:497:10)\n//       at startup (node.js:119:16)\n//       at node.js:906:3\nThe location information will be one of:\n\nnative, if the frame represents a call internal to V8 (as in [].forEach).\nplain-filename.js:line:column, if the frame represents a call internal to Node.js.\n/absolute/path/to/file.js:line:column, if the frame represents a call in a user program (using CommonJS module system), or its dependencies.\n<transport-protocol>:///url/to/module/file.mjs:line:column, if the frame represents a call in a user program (using ES module system), or its dependencies.\nThe string representing the stack trace is lazily generated when the error.stack property is accessed.\n\nThe number of frames captured by the stack trace is bounded by the smaller of Error.stackTraceLimit or the number of available frames on the current event loop tick.\n\nClass: AssertionError#\nExtends: <errors.Error>\nIndicates the failure of an assertion. For details, see Class: assert.AssertionError.\n\nClass: RangeError#\nExtends: <errors.Error>\nIndicates that a provided argument was not within the set or range of acceptable values for a function; whether that is a numeric range, or outside the set of options for a given function parameter.\n\nrequire('node:net').connect(-1);\n// Throws \"RangeError: \"port\" option should be >= 0 and < 65536: -1\"\nNode.js will generate and throw RangeError instances immediately as a form of argument validation.\n\nClass: ReferenceError#\nExtends: <errors.Error>\nIndicates that an attempt is being made to access a variable that is not defined. Such errors commonly indicate typos in code, or an otherwise broken program.\n\nWhile client code may generate and propagate these errors, in practice, only V8 will do so.\n\ndoesNotExist;\n// Throws ReferenceError, doesNotExist is not a variable in this program.\nUnless an application is dynamically generating and running code, ReferenceError instances indicate a bug in the code or its dependencies.\n\nClass: SyntaxError#\nExtends: <errors.Error>\nIndicates that a program is not valid JavaScript. These errors may only be generated and propagated as a result of code evaluation. Code evaluation may happen as a result of eval, Function, require, or vm. These errors are almost always indicative of a broken program.\n\ntry {\n  require('node:vm').runInThisContext('binary ! isNotOk');\n} catch (err) {\n  // 'err' will be a SyntaxError.\n}\nSyntaxError instances are unrecoverable in the context that created them \u2013 they may only be caught by other contexts.\n\nClass: SystemError#\nExtends: <errors.Error>\nNode.js generates system errors when exceptions occur within its runtime environment. These usually occur when an application violates an operating system constraint. For example, a system error will occur if an application attempts to read a file that does not exist.\n\naddress <string> If present, the address to which a network connection failed\ncode <string> The string error code\ndest <string> If present, the file path destination when reporting a file system error\nerrno <number> The system-provided error number\ninfo <Object> If present, extra details about the error condition\nmessage <string> A system-provided human-readable description of the error\npath <string> If present, the file path when reporting a file system error\nport <number> If present, the network connection port that is", "doc_id": "dc227f45-2363-43fd-b88d-857430a27593", "embedding": null, "doc_hash": "2b5489c085d45d65547869f9df043e99958ae53651db6ef0b93f9162754234d1", "extra_info": null, "node_info": {"start": 1062870, "end": 1066512}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "206a099f-908d-4d50-b235-e9336f258c85", "3": "e4e64e29-ea7b-45bf-825e-a3b7c8613dcd"}}, "__type__": "1"}, "e4e64e29-ea7b-45bf-825e-a3b7c8613dcd": {"__data__": {"text": "caught by other contexts.\n\nClass: SystemError#\nExtends: <errors.Error>\nNode.js generates system errors when exceptions occur within its runtime environment. These usually occur when an application violates an operating system constraint. For example, a system error will occur if an application attempts to read a file that does not exist.\n\naddress <string> If present, the address to which a network connection failed\ncode <string> The string error code\ndest <string> If present, the file path destination when reporting a file system error\nerrno <number> The system-provided error number\ninfo <Object> If present, extra details about the error condition\nmessage <string> A system-provided human-readable description of the error\npath <string> If present, the file path when reporting a file system error\nport <number> If present, the network connection port that is not available\nsyscall <string> The name of the system call that triggered the error\nerror.address#\n<string>\nIf present, error.address is a string describing the address to which a network connection failed.\n\nerror.code#\n<string>\nThe error.code property is a string representing the error code.\n\nerror.dest#\n<string>\nIf present, error.dest is the file path destination when reporting a file system error.\n\nerror.errno#\n<number>\nThe error.errno property is a negative number which corresponds to the error code defined in libuv Error handling.\n\nOn Windows the error number provided by the system will be normalized by libuv.\n\nTo get the string representation of the error code, use util.getSystemErrorName(error.errno).\n\nerror.info#\n<Object>\nIf present, error.info is an object with details about the error condition.\n\nerror.message#\n<string>\nerror.message is a system-provided human-readable description of the error.\n\nerror.path#\n<string>\nIf present, error.path is a string containing a relevant invalid pathname.\n\nerror.port#\n<number>\nIf present, error.port is the network connection port that is not available.\n\nerror.syscall#\n<string>\nThe error.syscall property is a string describing the syscall that failed.\n\nCommon system errors#\nThis is a list of system errors commonly-encountered when writing a Node.js program. For a comprehensive list, see the errno(3) man page.\n\nEACCES (Permission denied): An attempt was made to access a file in a way forbidden by its file access permissions.\n\nEADDRINUSE (Address already in use): An attempt to bind a server (net, http, or https) to a local address failed due to another server on the local system already occupying that address.\n\nECONNREFUSED (Connection refused): No connection could be made because the target machine actively refused it. This usually results from trying to connect to a service that is inactive on the foreign host.\n\nECONNRESET (Connection reset by peer): A connection was forcibly closed by a peer. This normally results from a loss of the connection on the remote socket due to a timeout or reboot. Commonly encountered via the http and net modules.\n\nEEXIST (File exists): An existing file was the target of an operation that required that the target not exist.\n\nEISDIR (Is a directory): An operation expected a file, but the given pathname was a directory.\n\nEMFILE (Too many open files in system): Maximum number of file descriptors allowable on the system has been reached, and requests for another descriptor cannot be fulfilled until at least one has been closed. This is encountered when opening many files at once in parallel, especially on systems (in particular, macOS) where there is a low file descriptor limit for processes. To remedy a low limit, run ulimit -n 2048 in the same shell that will run the Node.js process.\n\nENOENT (No such file or directory): Commonly raised by fs operations to indicate that a component of the specified pathname does not exist. No entity (file or directory) could be found by the given path.\n\nENOTDIR (Not a directory): A component of the given pathname existed, but was not a directory as expected. Commonly raised by fs.readdir.\n\nENOTEMPTY", "doc_id": "e4e64e29-ea7b-45bf-825e-a3b7c8613dcd", "embedding": null, "doc_hash": "edc00748b50eaa0515d083b1e25af8f48b74c8416ad1c2788a2ecfee4e023722", "extra_info": null, "node_info": {"start": 1066134, "end": 1070159}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dc227f45-2363-43fd-b88d-857430a27593", "3": "a01fd3ef-84ef-47a7-ae83-3fe72de8c2db"}}, "__type__": "1"}, "a01fd3ef-84ef-47a7-ae83-3fe72de8c2db": {"__data__": {"text": "number of file descriptors allowable on the system has been reached, and requests for another descriptor cannot be fulfilled until at least one has been closed. This is encountered when opening many files at once in parallel, especially on systems (in particular, macOS) where there is a low file descriptor limit for processes. To remedy a low limit, run ulimit -n 2048 in the same shell that will run the Node.js process.\n\nENOENT (No such file or directory): Commonly raised by fs operations to indicate that a component of the specified pathname does not exist. No entity (file or directory) could be found by the given path.\n\nENOTDIR (Not a directory): A component of the given pathname existed, but was not a directory as expected. Commonly raised by fs.readdir.\n\nENOTEMPTY (Directory not empty): A directory with entries was the target of an operation that requires an empty directory, usually fs.unlink.\n\nENOTFOUND (DNS lookup failed): Indicates a DNS failure of either EAI_NODATA or EAI_NONAME. This is not a standard POSIX error.\n\nEPERM (Operation not permitted): An attempt was made to perform an operation that requires elevated privileges.\n\nEPIPE (Broken pipe): A write on a pipe, socket, or FIFO for which there is no process to read the data. Commonly encountered at the net and http layers, indicative that the remote side of the stream being written to has been closed.\n\nETIMEDOUT (Operation timed out): A connect or send request failed because the connected party did not properly respond after a period of time. Usually encountered by http or net. Often a sign that a socket.end() was not properly called.\n\nClass: TypeError#\nExtends <errors.Error>\nIndicates that a provided argument is not an allowable type. For example, passing a function to a parameter which expects a string would be a TypeError.\n\nrequire('node:url').parse(() => { });\n// Throws TypeError, since it expected a string.\nNode.js will generate and throw TypeError instances immediately as a form of argument validation.\n\nExceptions vs. errors#\nA JavaScript exception is a value that is thrown as a result of an invalid operation or as the target of a throw statement. While it is not required that these values are instances of Error or classes which inherit from Error, all exceptions thrown by Node.js or the JavaScript runtime will be instances of Error.\n\nSome exceptions are unrecoverable at the JavaScript layer. Such exceptions will always cause the Node.js process to crash. Examples include assert() checks or abort() calls in the C++ layer.\n\nOpenSSL errors#\nErrors originating in crypto or tls are of class Error, and in addition to the standard .code and .message properties, may have some additional OpenSSL-specific properties.\n\nerror.opensslErrorStack#\nAn array of errors that can give context to where in the OpenSSL library an error originates from.\n\nerror.function#\nThe OpenSSL function the error originates in.\n\nerror.library#\nThe OpenSSL library the error originates in.\n\nerror.reason#\nA human-readable string describing the reason for the error.\n\n\nNode.js error codes#\n\nABORT_ERR#\nAdded in: v15.0.0\nUsed when an operation has been aborted (typically using an AbortController).\n\nAPIs not using AbortSignals typically do not raise an error with this code.\n\nThis code does not use the regular ERR_* convention Node.js errors use in order to be compatible with the web platform's AbortError.\n\n\nERR_AMBIGUOUS_ARGUMENT#\nA function argument is being used in a way that suggests that the function signature may be misunderstood. This is thrown by the node:assert module when the message parameter in assert.throws(block, message) matches the error message thrown by block because that usage suggests that the user believes message is the expected message rather than the message the AssertionError will display if block does not throw.\n\n\nERR_ARG_NOT_ITERABLE#\nAn iterable argument (i.e. a value that works with for...of loops) was", "doc_id": "a01fd3ef-84ef-47a7-ae83-3fe72de8c2db", "embedding": null, "doc_hash": "8d164dff57af4a9409780f5c4ef07d81a708d7b97e27ede076307c7631d9440b", "extra_info": null, "node_info": {"start": 1070258, "end": 1074184}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e4e64e29-ea7b-45bf-825e-a3b7c8613dcd", "3": "b73157b6-5369-4230-b1de-642a2bcda973"}}, "__type__": "1"}, "b73157b6-5369-4230-b1de-642a2bcda973": {"__data__": {"text": "an AbortController).\n\nAPIs not using AbortSignals typically do not raise an error with this code.\n\nThis code does not use the regular ERR_* convention Node.js errors use in order to be compatible with the web platform's AbortError.\n\n\nERR_AMBIGUOUS_ARGUMENT#\nA function argument is being used in a way that suggests that the function signature may be misunderstood. This is thrown by the node:assert module when the message parameter in assert.throws(block, message) matches the error message thrown by block because that usage suggests that the user believes message is the expected message rather than the message the AssertionError will display if block does not throw.\n\n\nERR_ARG_NOT_ITERABLE#\nAn iterable argument (i.e. a value that works with for...of loops) was required, but not provided to a Node.js API.\n\n\nERR_ASSERTION#\nA special type of error that can be triggered whenever Node.js detects an exceptional logic violation that should never occur. These are raised typically by the node:assert module.\n\n\nERR_ASYNC_CALLBACK#\nAn attempt was made to register something that is not a function as an AsyncHooks callback.\n\n\nERR_ASYNC_TYPE#\nThe type of an asynchronous resource was invalid. Users are also able to define their own types if using the public embedder API.\n\n\nERR_BROTLI_COMPRESSION_FAILED#\nData passed to a Brotli stream was not successfully compressed.\n\n\nERR_BROTLI_INVALID_PARAM#\nAn invalid parameter key was passed during construction of a Brotli stream.\n\n\nERR_BUFFER_CONTEXT_NOT_AVAILABLE#\nAn attempt was made to create a Node.js Buffer instance from addon or embedder code, while in a JS engine Context that is not associated with a Node.js instance. The data passed to the Buffer method will have been released by the time the method returns.\n\nWhen encountering this error, a possible alternative to creating a Buffer instance is to create a normal Uint8Array, which only differs in the prototype of the resulting object. Uint8Arrays are generally accepted in all Node.js core APIs where Buffers are; they are available in all Contexts.\n\n\nERR_BUFFER_OUT_OF_BOUNDS#\nAn operation outside the bounds of a Buffer was attempted.\n\n\nERR_BUFFER_TOO_LARGE#\nAn attempt has been made to create a Buffer larger than the maximum allowed size.\n\n\nERR_CANNOT_WATCH_SIGINT#\nNode.js was unable to watch for the SIGINT signal.\n\n\nERR_CHILD_CLOSED_BEFORE_REPLY#\nA child process was closed before the parent received a reply.\n\n\nERR_CHILD_PROCESS_IPC_REQUIRED#\nUsed when a child process is being forked without specifying an IPC channel.\n\n\nERR_CHILD_PROCESS_STDIO_MAXBUFFER#\nUsed when the main process is trying to read data from the child process's STDERR/STDOUT, and the data's length is longer than the maxBuffer option.\n\n\nERR_CLOSED_MESSAGE_PORT#\nThere was an attempt to use a MessagePort instance in a closed state, usually after .close() has been called.\n\n\nERR_CONSOLE_WRITABLE_STREAM#\nConsole was instantiated without stdout stream, or Console has a non-writable stdout or stderr stream.\n\n\nERR_CONSTRUCT_CALL_INVALID#\nA class constructor was called that is not callable.\n\n\nERR_CONSTRUCT_CALL_REQUIRED#\nA constructor for a class was called without new.\n\n\nERR_CONTEXT_NOT_INITIALIZED#\nThe vm context passed into the API is not yet initialized. This could happen when an error occurs (and is caught) during the creation of the context, for example, when the allocation fails or the maximum call stack size is reached when the context is created.\n\n\nERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED#\nA client certificate engine was requested that is", "doc_id": "b73157b6-5369-4230-b1de-642a2bcda973", "embedding": null, "doc_hash": "85071ac31780e76e8ba07f989fcd64dd2c49c8a15852cf1ad915d5b5974a8059", "extra_info": null, "node_info": {"start": 1074180, "end": 1077719}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a01fd3ef-84ef-47a7-ae83-3fe72de8c2db", "3": "6024ea8c-014e-4fbf-9596-d8c1c23868a4"}}, "__type__": "1"}, "6024ea8c-014e-4fbf-9596-d8c1c23868a4": {"__data__": {"text": "was instantiated without stdout stream, or Console has a non-writable stdout or stderr stream.\n\n\nERR_CONSTRUCT_CALL_INVALID#\nA class constructor was called that is not callable.\n\n\nERR_CONSTRUCT_CALL_REQUIRED#\nA constructor for a class was called without new.\n\n\nERR_CONTEXT_NOT_INITIALIZED#\nThe vm context passed into the API is not yet initialized. This could happen when an error occurs (and is caught) during the creation of the context, for example, when the allocation fails or the maximum call stack size is reached when the context is created.\n\n\nERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED#\nA client certificate engine was requested that is not supported by the version of OpenSSL being used.\n\n\nERR_CRYPTO_ECDH_INVALID_FORMAT#\nAn invalid value for the format argument was passed to the crypto.ECDH() class getPublicKey() method.\n\n\nERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY#\nAn invalid value for the key argument has been passed to the crypto.ECDH() class computeSecret() method. It means that the public key lies outside of the elliptic curve.\n\n\nERR_CRYPTO_ENGINE_UNKNOWN#\nAn invalid crypto engine identifier was passed to require('node:crypto').setEngine().\n\n\nERR_CRYPTO_FIPS_FORCED#\nThe --force-fips command-line argument was used but there was an attempt to enable or disable FIPS mode in the node:crypto module.\n\nERR_CRYPTO_FIPS_UNAVAILABLE#\nAn attempt was made to enable or disable FIPS mode, but FIPS mode was not available.\n\n\nERR_CRYPTO_HASH_FINALIZED#\nhash.digest() was called multiple times. The hash.digest() method must be called no more than one time per instance of a Hash object.\n\n\nERR_CRYPTO_HASH_UPDATE_FAILED#\nhash.update() failed for any reason. This should rarely, if ever, happen.\n\n\nERR_CRYPTO_INCOMPATIBLE_KEY#\nThe given crypto keys are incompatible with the attempted operation.\n\n\nERR_CRYPTO_INCOMPATIBLE_KEY_OPTIONS#\nThe selected public or private key encoding is incompatible with other options.\n\n\nERR_CRYPTO_INITIALIZATION_FAILED#\nAdded in: v15.0.0\nInitialization of the crypto subsystem failed.\n\n\nERR_CRYPTO_INVALID_AUTH_TAG#\nAdded in: v15.0.0\nAn invalid authentication tag was provided.\n\n\nERR_CRYPTO_INVALID_COUNTER#\nAdded in: v15.0.0\nAn invalid counter was provided for a counter-mode cipher.\n\n\nERR_CRYPTO_INVALID_CURVE#\nAdded in: v15.0.0\nAn invalid elliptic-curve was provided.\n\n\nERR_CRYPTO_INVALID_DIGEST#\nAn invalid crypto digest algorithm was specified.\n\n\nERR_CRYPTO_INVALID_IV#\nAdded in: v15.0.0\nAn invalid initialization vector was provided.\n\n\nERR_CRYPTO_INVALID_JWK#\nAdded in: v15.0.0\nAn invalid JSON Web Key was provided.\n\n\nERR_CRYPTO_INVALID_KEY_OBJECT_TYPE#\nThe given crypto key object's type is invalid for the attempted operation.\n\n\nERR_CRYPTO_INVALID_KEYLEN#\nAdded in: v15.0.0\nAn invalid key length was provided.\n\n\nERR_CRYPTO_INVALID_KEYPAIR#\nAdded in: v15.0.0\nAn invalid key pair was provided.\n\n\nERR_CRYPTO_INVALID_KEYTYPE#\nAdded in: v15.0.0\nAn invalid key type was", "doc_id": "6024ea8c-014e-4fbf-9596-d8c1c23868a4", "embedding": null, "doc_hash": "4acb64b55693b897e679541b05343e815d098410546f4be608b341f691c67768", "extra_info": null, "node_info": {"start": 1077817, "end": 1080718}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b73157b6-5369-4230-b1de-642a2bcda973", "3": "c886bd00-86db-4ac3-847d-f9734ece03c0"}}, "__type__": "1"}, "c886bd00-86db-4ac3-847d-f9734ece03c0": {"__data__": {"text": "in: v15.0.0\nAn invalid initialization vector was provided.\n\n\nERR_CRYPTO_INVALID_JWK#\nAdded in: v15.0.0\nAn invalid JSON Web Key was provided.\n\n\nERR_CRYPTO_INVALID_KEY_OBJECT_TYPE#\nThe given crypto key object's type is invalid for the attempted operation.\n\n\nERR_CRYPTO_INVALID_KEYLEN#\nAdded in: v15.0.0\nAn invalid key length was provided.\n\n\nERR_CRYPTO_INVALID_KEYPAIR#\nAdded in: v15.0.0\nAn invalid key pair was provided.\n\n\nERR_CRYPTO_INVALID_KEYTYPE#\nAdded in: v15.0.0\nAn invalid key type was provided.\n\n\nERR_CRYPTO_INVALID_MESSAGELEN#\nAdded in: v15.0.0\nAn invalid message length was provided.\n\n\nERR_CRYPTO_INVALID_SCRYPT_PARAMS#\nAdded in: v15.0.0\nInvalid scrypt algorithm parameters were provided.\n\n\nERR_CRYPTO_INVALID_STATE#\nA crypto method was used on an object that was in an invalid state. For instance, calling cipher.getAuthTag() before calling cipher.final().\n\n\nERR_CRYPTO_INVALID_TAG_LENGTH#\nAdded in: v15.0.0\nAn invalid authentication tag length was provided.\n\n\nERR_CRYPTO_JOB_INIT_FAILED#\nAdded in: v15.0.0\nInitialization of an asynchronous crypto operation failed.\n\n\nERR_CRYPTO_JWK_UNSUPPORTED_CURVE#\nKey's Elliptic Curve is not registered for use in the JSON Web Key Elliptic Curve Registry.\n\n\nERR_CRYPTO_JWK_UNSUPPORTED_KEY_TYPE#\nKey's Asymmetric Key Type is not registered for use in the JSON Web Key Types Registry.\n\n\nERR_CRYPTO_OPERATION_FAILED#\nAdded in: v15.0.0\nA crypto operation failed for an otherwise unspecified reason.\n\n\nERR_CRYPTO_PBKDF2_ERROR#\nThe PBKDF2 algorithm failed for unspecified reasons. OpenSSL does not provide more details and therefore neither does Node.js.\n\n\nERR_CRYPTO_SCRYPT_INVALID_PARAMETER#\nOne or more crypto.scrypt() or crypto.scryptSync() parameters are outside their legal range.\n\n\nERR_CRYPTO_SCRYPT_NOT_SUPPORTED#\nNode.js was compiled without scrypt support. Not possible with the official release binaries but can happen with custom builds, including distro builds.\n\n\nERR_CRYPTO_SIGN_KEY_REQUIRED#\nA signing key was not provided to the sign.sign() method.\n\n\nERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH#\ncrypto.timingSafeEqual() was called with Buffer, TypedArray, or DataView arguments of different lengths.\n\n\nERR_CRYPTO_UNKNOWN_CIPHER#\nAn unknown cipher was specified.\n\n\nERR_CRYPTO_UNKNOWN_DH_GROUP#\nAn unknown Diffie-Hellman group name was given. See crypto.getDiffieHellman() for a list of valid group names.\n\n\nERR_CRYPTO_UNSUPPORTED_OPERATION#\nAdded in: v15.0.0, v14.18.0\nAn attempt to invoke an unsupported crypto operation was made.\n\n\nERR_DEBUGGER_ERROR#\nAdded in: v16.4.0, v14.17.4\nAn error occurred with the debugger.\n\n\nERR_DEBUGGER_STARTUP_ERROR#\nAdded in: v16.4.0, v14.17.4\nThe debugger timed out waiting for the required host/port to be free.\n\n\nERR_DLOPEN_DISABLED#\nAdded in: v16.10.0, v14.19.0\nLoading native addons has", "doc_id": "c886bd00-86db-4ac3-847d-f9734ece03c0", "embedding": null, "doc_hash": "8e548d8d62abd34f8776d60ffb9edb951e5eb25b4d1ff7442ac73d9bce9f5ab2", "extra_info": null, "node_info": {"start": 1080834, "end": 1083607}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6024ea8c-014e-4fbf-9596-d8c1c23868a4", "3": "a6737da1-2132-4605-a002-49314e407d4e"}}, "__type__": "1"}, "a6737da1-2132-4605-a002-49314e407d4e": {"__data__": {"text": "unknown Diffie-Hellman group name was given. See crypto.getDiffieHellman() for a list of valid group names.\n\n\nERR_CRYPTO_UNSUPPORTED_OPERATION#\nAdded in: v15.0.0, v14.18.0\nAn attempt to invoke an unsupported crypto operation was made.\n\n\nERR_DEBUGGER_ERROR#\nAdded in: v16.4.0, v14.17.4\nAn error occurred with the debugger.\n\n\nERR_DEBUGGER_STARTUP_ERROR#\nAdded in: v16.4.0, v14.17.4\nThe debugger timed out waiting for the required host/port to be free.\n\n\nERR_DLOPEN_DISABLED#\nAdded in: v16.10.0, v14.19.0\nLoading native addons has been disabled using --no-addons.\n\n\nERR_DLOPEN_FAILED#\nAdded in: v15.0.0\nA call to process.dlopen() failed.\n\n\nERR_DIR_CLOSED#\nThe fs.Dir was previously closed.\n\n\nERR_DIR_CONCURRENT_OPERATION#\nAdded in: v14.3.0\nA synchronous read or close call was attempted on an fs.Dir which has ongoing asynchronous operations.\n\n\nERR_DNS_SET_SERVERS_FAILED#\nc-ares failed to set the DNS server.\n\n\nERR_DOMAIN_CALLBACK_NOT_AVAILABLE#\nThe node:domain module was not usable since it could not establish the required error handling hooks, because process.setUncaughtExceptionCaptureCallback() had been called at an earlier point in time.\n\n\nERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE#\nprocess.setUncaughtExceptionCaptureCallback() could not be called because the node:domain module has been loaded at an earlier point in time.\n\nThe stack trace is extended to include the point in time at which the node:domain module had been loaded.\n\n\nERR_DUPLICATE_STARTUP_SNAPSHOT_MAIN_FUNCTION#\nv8.startupSnapshot.setDeserializeMainFunction() could not be called because it had already been called before.\n\n\nERR_ENCODING_INVALID_ENCODED_DATA#\nData provided to TextDecoder() API was invalid according to the encoding provided.\n\n\nERR_ENCODING_NOT_SUPPORTED#\nEncoding provided to TextDecoder() API was not one of the WHATWG Supported Encodings.\n\n\nERR_EVAL_ESM_CANNOT_PRINT#\n--print cannot be used with ESM input.\n\n\nERR_EVENT_RECURSION#\nThrown when an attempt is made to recursively dispatch an event on EventTarget.\n\n\nERR_EXECUTION_ENVIRONMENT_NOT_AVAILABLE#\nThe JS execution context is not associated with a Node.js environment. This may occur when Node.js is used as an embedded library and some hooks for the JS engine are not set up properly.\n\n\nERR_FALSY_VALUE_REJECTION#\nA Promise that was callbackified via util.callbackify() was rejected with a falsy value.\n\n\nERR_FEATURE_UNAVAILABLE_ON_PLATFORM#\nAdded in: v14.0.0\nUsed when a feature that is not available to the current platform which is running Node.js is used.\n\n\nERR_FS_CP_DIR_TO_NON_DIR#\nAn attempt was made to copy a directory to a non-directory (file, symlink, etc.) using fs.cp().\n\n\nERR_FS_CP_EEXIST#\nAn attempt was made to copy over a file that already existed with fs.cp(), with the force and errorOnExist set to true.\n\n\nERR_FS_CP_EINVAL#\nWhen using fs.cp(), src or dest pointed to an invalid path.\n\n\nERR_HTTP_CONTENT_LENGTH_MISMATCH#\nResponse body size doesn't match with the specified content-length header value.\n\n\nERR_FS_CP_FIFO_PIPE#\nAn attempt was made to copy", "doc_id": "a6737da1-2132-4605-a002-49314e407d4e", "embedding": null, "doc_hash": "3c1296fd1d88dc60cd6257a1b6b248928974368ccfa7828a7f833de246380970", "extra_info": null, "node_info": {"start": 1083580, "end": 1086609}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c886bd00-86db-4ac3-847d-f9734ece03c0", "3": "a8813743-d3a0-48e4-8bf2-3f35af198440"}}, "__type__": "1"}, "a8813743-d3a0-48e4-8bf2-3f35af198440": {"__data__": {"text": "feature that is not available to the current platform which is running Node.js is used.\n\n\nERR_FS_CP_DIR_TO_NON_DIR#\nAn attempt was made to copy a directory to a non-directory (file, symlink, etc.) using fs.cp().\n\n\nERR_FS_CP_EEXIST#\nAn attempt was made to copy over a file that already existed with fs.cp(), with the force and errorOnExist set to true.\n\n\nERR_FS_CP_EINVAL#\nWhen using fs.cp(), src or dest pointed to an invalid path.\n\n\nERR_HTTP_CONTENT_LENGTH_MISMATCH#\nResponse body size doesn't match with the specified content-length header value.\n\n\nERR_FS_CP_FIFO_PIPE#\nAn attempt was made to copy a named pipe with fs.cp().\n\n\nERR_FS_CP_NON_DIR_TO_DIR#\nAn attempt was made to copy a non-directory (file, symlink, etc.) to a directory using fs.cp().\n\n\nERR_FS_CP_SOCKET#\nAn attempt was made to copy to a socket with fs.cp().\n\n\nERR_FS_CP_SYMLINK_TO_SUBDIRECTORY#\nWhen using fs.cp(), a symlink in dest pointed to a subdirectory of src.\n\n\nERR_FS_CP_UNKNOWN#\nAn attempt was made to copy to an unknown file type with fs.cp().\n\n\nERR_FS_EISDIR#\nPath is a directory.\n\n\nERR_FS_FILE_TOO_LARGE#\nAn attempt has been made to read a file whose size is larger than the maximum allowed size for a Buffer.\n\n\nERR_FS_INVALID_SYMLINK_TYPE#\nAn invalid symlink type was passed to the fs.symlink() or fs.symlinkSync() methods.\n\n\nERR_HTTP_HEADERS_SENT#\nAn attempt was made to add more headers after the headers had already been sent.\n\n\nERR_HTTP_INVALID_HEADER_VALUE#\nAn invalid HTTP header value was specified.\n\n\nERR_HTTP_INVALID_STATUS_CODE#\nStatus code was outside the regular status code range (100-999).\n\n\nERR_HTTP_REQUEST_TIMEOUT#\nThe client has not sent the entire request within the allowed time.\n\n\nERR_HTTP_SOCKET_ENCODING#\nChanging the socket encoding is not allowed per RFC 7230 Section 3.\n\n\nERR_HTTP_TRAILER_INVALID#\nThe Trailer header was set even though the transfer encoding does not support that.\n\n\nERR_HTTP2_ALTSVC_INVALID_ORIGIN#\nHTTP/2 ALTSVC frames require a valid origin.\n\n\nERR_HTTP2_ALTSVC_LENGTH#\nHTTP/2 ALTSVC frames are limited to a maximum of 16,382 payload bytes.\n\n\nERR_HTTP2_CONNECT_AUTHORITY#\nFor HTTP/2 requests using the CONNECT method, the :authority pseudo-header is required.\n\n\nERR_HTTP2_CONNECT_PATH#\nFor HTTP/2 requests using the CONNECT method, the :path pseudo-header is forbidden.\n\n\nERR_HTTP2_CONNECT_SCHEME#\nFor HTTP/2 requests using the CONNECT method, the :scheme pseudo-header is forbidden.\n\n\nERR_HTTP2_ERROR#\nA non-specific HTTP/2 error has occurred.\n\n\nERR_HTTP2_GOAWAY_SESSION#\nNew HTTP/2 Streams may not be opened after the Http2Session has received a GOAWAY frame from the connected peer.\n\n\nERR_HTTP2_HEADER_SINGLE_VALUE#\nMultiple values were provided for an HTTP/2 header field that was required to have only a single value.\n\n\nERR_HTTP2_HEADERS_AFTER_RESPOND#\nAn additional headers was specified after an HTTP/2 response was initiated.\n\n\nERR_HTTP2_HEADERS_SENT#\nAn attempt was made to send multiple response headers.\n\n\nERR_HTTP2_INFO_STATUS_NOT_ALLOWED#\nInformational HTTP status", "doc_id": "a8813743-d3a0-48e4-8bf2-3f35af198440", "embedding": null, "doc_hash": "874bb90d32bcd19f252a97fa1746964906c912b4696691e14694e876a2ae75a4", "extra_info": null, "node_info": {"start": 1086559, "end": 1089561}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a6737da1-2132-4605-a002-49314e407d4e", "3": "c211ea1a-447e-4f01-a874-9162d67bc71f"}}, "__type__": "1"}, "c211ea1a-447e-4f01-a874-9162d67bc71f": {"__data__": {"text": "pseudo-header is forbidden.\n\n\nERR_HTTP2_ERROR#\nA non-specific HTTP/2 error has occurred.\n\n\nERR_HTTP2_GOAWAY_SESSION#\nNew HTTP/2 Streams may not be opened after the Http2Session has received a GOAWAY frame from the connected peer.\n\n\nERR_HTTP2_HEADER_SINGLE_VALUE#\nMultiple values were provided for an HTTP/2 header field that was required to have only a single value.\n\n\nERR_HTTP2_HEADERS_AFTER_RESPOND#\nAn additional headers was specified after an HTTP/2 response was initiated.\n\n\nERR_HTTP2_HEADERS_SENT#\nAn attempt was made to send multiple response headers.\n\n\nERR_HTTP2_INFO_STATUS_NOT_ALLOWED#\nInformational HTTP status codes (1xx) may not be set as the response status code on HTTP/2 responses.\n\n\nERR_HTTP2_INVALID_CONNECTION_HEADERS#\nHTTP/1 connection specific headers are forbidden to be used in HTTP/2 requests and responses.\n\n\nERR_HTTP2_INVALID_HEADER_VALUE#\nAn invalid HTTP/2 header value was specified.\n\n\nERR_HTTP2_INVALID_INFO_STATUS#\nAn invalid HTTP informational status code has been specified. Informational status codes must be an integer between 100 and 199 (inclusive).\n\n\nERR_HTTP2_INVALID_ORIGIN#\nHTTP/2 ORIGIN frames require a valid origin.\n\n\nERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH#\nInput Buffer and Uint8Array instances passed to the http2.getUnpackedSettings() API must have a length that is a multiple of six.\n\n\nERR_HTTP2_INVALID_PSEUDOHEADER#\nOnly valid HTTP/2 pseudoheaders (:status, :path, :authority, :scheme, and :method) may be used.\n\n\nERR_HTTP2_INVALID_SESSION#\nAn action was performed on an Http2Session object that had already been destroyed.\n\n\nERR_HTTP2_INVALID_SETTING_VALUE#\nAn invalid value has been specified for an HTTP/2 setting.\n\n\nERR_HTTP2_INVALID_STREAM#\nAn operation was performed on a stream that had already been destroyed.\n\n\nERR_HTTP2_MAX_PENDING_SETTINGS_ACK#\nWhenever an HTTP/2 SETTINGS frame is sent to a connected peer, the peer is required to send an acknowledgment that it has received and applied the new SETTINGS. By default, a maximum number of unacknowledged SETTINGS frames may be sent at any given time. This error code is used when that limit has been reached.\n\n\nERR_HTTP2_NESTED_PUSH#\nAn attempt was made to initiate a new push stream from within a push stream. Nested push streams are not permitted.\n\n\nERR_HTTP2_NO_MEM#\nOut of memory when using the http2session.setLocalWindowSize(windowSize) API.\n\n\nERR_HTTP2_NO_SOCKET_MANIPULATION#\nAn attempt was made to directly manipulate (read, write, pause, resume, etc.) a socket attached to an Http2Session.\n\n\nERR_HTTP2_ORIGIN_LENGTH#\nHTTP/2 ORIGIN frames are limited to a length of 16382 bytes.\n\n\nERR_HTTP2_OUT_OF_STREAMS#\nThe number of streams created on a single HTTP/2 session reached the maximum limit.\n\n\nERR_HTTP2_PAYLOAD_FORBIDDEN#\nA message payload was specified for an HTTP response code for which a payload is forbidden.\n\n\nERR_HTTP2_PING_CANCEL#\nAn HTTP/2 ping was canceled.\n\n\nERR_HTTP2_PING_LENGTH#\nHTTP/2 ping payloads must be exactly 8 bytes in length.\n\n\nERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED#\nAn HTTP/2 pseudo-header has been used inappropriately. Pseudo-headers are header key names that begin with the :", "doc_id": "c211ea1a-447e-4f01-a874-9162d67bc71f", "embedding": null, "doc_hash": "d052a359177ead691414b632e3ebf2ed3d7a3fa9804c7494f92eb0d1851e28d8", "extra_info": null, "node_info": {"start": 1089527, "end": 1092646}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a8813743-d3a0-48e4-8bf2-3f35af198440", "3": "30362660-0838-43d1-8593-650e5e4a8556"}}, "__type__": "1"}, "30362660-0838-43d1-8593-650e5e4a8556": {"__data__": {"text": "ORIGIN frames are limited to a length of 16382 bytes.\n\n\nERR_HTTP2_OUT_OF_STREAMS#\nThe number of streams created on a single HTTP/2 session reached the maximum limit.\n\n\nERR_HTTP2_PAYLOAD_FORBIDDEN#\nA message payload was specified for an HTTP response code for which a payload is forbidden.\n\n\nERR_HTTP2_PING_CANCEL#\nAn HTTP/2 ping was canceled.\n\n\nERR_HTTP2_PING_LENGTH#\nHTTP/2 ping payloads must be exactly 8 bytes in length.\n\n\nERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED#\nAn HTTP/2 pseudo-header has been used inappropriately. Pseudo-headers are header key names that begin with the : prefix.\n\n\nERR_HTTP2_PUSH_DISABLED#\nAn attempt was made to create a push stream, which had been disabled by the client.\n\n\nERR_HTTP2_SEND_FILE#\nAn attempt was made to use the Http2Stream.prototype.responseWithFile() API to send a directory.\n\n\nERR_HTTP2_SEND_FILE_NOSEEK#\nAn attempt was made to use the Http2Stream.prototype.responseWithFile() API to send something other than a regular file, but offset or length options were provided.\n\n\nERR_HTTP2_SESSION_ERROR#\nThe Http2Session closed with a non-zero error code.\n\n\nERR_HTTP2_SETTINGS_CANCEL#\nThe Http2Session settings canceled.\n\n\nERR_HTTP2_SOCKET_BOUND#\nAn attempt was made to connect a Http2Session object to a net.Socket or tls.TLSSocket that had already been bound to another Http2Session object.\n\n\nERR_HTTP2_SOCKET_UNBOUND#\nAn attempt was made to use the socket property of an Http2Session that has already been closed.\n\n\nERR_HTTP2_STATUS_101#\nUse of the 101 Informational status code is forbidden in HTTP/2.\n\n\nERR_HTTP2_STATUS_INVALID#\nAn invalid HTTP status code has been specified. Status codes must be an integer between 100 and 599 (inclusive).\n\n\nERR_HTTP2_STREAM_CANCEL#\nAn Http2Stream was destroyed before any data was transmitted to the connected peer.\n\n\nERR_HTTP2_STREAM_ERROR#\nA non-zero error code was been specified in an RST_STREAM frame.\n\n\nERR_HTTP2_STREAM_SELF_DEPENDENCY#\nWhen setting the priority for an HTTP/2 stream, the stream may be marked as a dependency for a parent stream. This error code is used when an attempt is made to mark a stream and dependent of itself.\n\n\nERR_HTTP2_TOO_MANY_INVALID_FRAMES#\nThe limit of acceptable invalid HTTP/2 protocol frames sent by the peer, as specified through the maxSessionInvalidFrames option, has been exceeded.\n\n\nERR_HTTP2_TRAILERS_ALREADY_SENT#\nTrailing headers have already been sent on the Http2Stream.\n\n\nERR_HTTP2_TRAILERS_NOT_READY#\nThe http2stream.sendTrailers() method cannot be called until after the 'wantTrailers' event is emitted on an Http2Stream object. The 'wantTrailers' event will only be emitted if the waitForTrailers option is set for the Http2Stream.\n\n\nERR_HTTP2_UNSUPPORTED_PROTOCOL#\nhttp2.connect() was passed a URL that uses any protocol other than http: or https:.\n\n\nERR_ILLEGAL_CONSTRUCTOR#\nAn attempt was made to construct an object using a non-public constructor.\n\n\nERR_IMPORT_ASSERTION_TYPE_FAILED#\nAdded in: v17.1.0, v16.14.0\nAn import assertion has failed, preventing the specified module to be imported.\n\n\nERR_IMPORT_ASSERTION_TYPE_MISSING#\nAdded in: v17.1.0, v16.14.0\nAn import assertion is missing, preventing the specified module to be", "doc_id": "30362660-0838-43d1-8593-650e5e4a8556", "embedding": null, "doc_hash": "1d7ebd4802d9d5135c852716ae1b838b98a2f39055796086f81da06c9cb6e595", "extra_info": null, "node_info": {"start": 1092698, "end": 1095859}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c211ea1a-447e-4f01-a874-9162d67bc71f", "3": "8ef1ccaf-5d62-46cf-8a27-1f209ce94d22"}}, "__type__": "1"}, "8ef1ccaf-5d62-46cf-8a27-1f209ce94d22": {"__data__": {"text": "event will only be emitted if the waitForTrailers option is set for the Http2Stream.\n\n\nERR_HTTP2_UNSUPPORTED_PROTOCOL#\nhttp2.connect() was passed a URL that uses any protocol other than http: or https:.\n\n\nERR_ILLEGAL_CONSTRUCTOR#\nAn attempt was made to construct an object using a non-public constructor.\n\n\nERR_IMPORT_ASSERTION_TYPE_FAILED#\nAdded in: v17.1.0, v16.14.0\nAn import assertion has failed, preventing the specified module to be imported.\n\n\nERR_IMPORT_ASSERTION_TYPE_MISSING#\nAdded in: v17.1.0, v16.14.0\nAn import assertion is missing, preventing the specified module to be imported.\n\n\nERR_IMPORT_ASSERTION_TYPE_UNSUPPORTED#\nAdded in: v17.1.0, v16.14.0\nAn import assertion is not supported by this version of Node.js.\n\n\nERR_INCOMPATIBLE_OPTION_PAIR#\nAn option pair is incompatible with each other and cannot be used at the same time.\n\n\nERR_INPUT_TYPE_NOT_ALLOWED#\nStability: 1 - Experimental\nThe --input-type flag was used to attempt to execute a file. This flag can only be used with input via --eval, --print, or STDIN.\n\n\nERR_INSPECTOR_ALREADY_ACTIVATED#\nWhile using the node:inspector module, an attempt was made to activate the inspector when it already started to listen on a port. Use inspector.close() before activating it on a different address.\n\n\nERR_INSPECTOR_ALREADY_CONNECTED#\nWhile using the node:inspector module, an attempt was made to connect when the inspector was already connected.\n\n\nERR_INSPECTOR_CLOSED#\nWhile using the node:inspector module, an attempt was made to use the inspector after the session had already closed.\n\n\nERR_INSPECTOR_COMMAND#\nAn error occurred while issuing a command via the node:inspector module.\n\n\nERR_INSPECTOR_NOT_ACTIVE#\nThe inspector is not active when inspector.waitForDebugger() is called.\n\n\nERR_INSPECTOR_NOT_AVAILABLE#\nThe node:inspector module is not available for use.\n\n\nERR_INSPECTOR_NOT_CONNECTED#\nWhile using the node:inspector module, an attempt was made to use the inspector before it was connected.\n\n\nERR_INSPECTOR_NOT_WORKER#\nAn API was called on the main thread that can only be used from the worker thread.\n\n\nERR_INTERNAL_ASSERTION#\nThere was a bug in Node.js or incorrect usage of Node.js internals. To fix the error, open an issue at https://github.com/nodejs/node/issues.\n\n\nERR_INVALID_ADDRESS_FAMILY#\nThe provided address family is not understood by the Node.js API.\n\n\nERR_INVALID_ARG_TYPE#\nAn argument of the wrong type was passed to a Node.js API.\n\n\nERR_INVALID_ARG_VALUE#\nAn invalid or unsupported value was passed for a given argument.\n\n\nERR_INVALID_ASYNC_ID#\nAn invalid asyncId or triggerAsyncId was passed using AsyncHooks. An id less than -1 should never happen.\n\n\nERR_INVALID_BUFFER_SIZE#\nA swap was performed on a Buffer but its size was not compatible with the operation.\n\n\nERR_INVALID_CHAR#\nInvalid characters were detected in headers.\n\n\nERR_INVALID_CURSOR_POS#\nA cursor on a given stream cannot be moved to a specified row without a specified column.\n\n\nERR_INVALID_FD#\nA file descriptor ('fd') was not valid (e.g. it was a negative value).\n\n\nERR_INVALID_FD_TYPE#\nA file", "doc_id": "8ef1ccaf-5d62-46cf-8a27-1f209ce94d22", "embedding": null, "doc_hash": "c7a807b764d82cda0d2683f50b35e08d590821c2adccfcec1dc947e734a51f64", "extra_info": null, "node_info": {"start": 1095849, "end": 1098908}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "30362660-0838-43d1-8593-650e5e4a8556", "3": "91977109-b8b3-4f83-95ec-faf49bf216e2"}}, "__type__": "1"}, "91977109-b8b3-4f83-95ec-faf49bf216e2": {"__data__": {"text": "or unsupported value was passed for a given argument.\n\n\nERR_INVALID_ASYNC_ID#\nAn invalid asyncId or triggerAsyncId was passed using AsyncHooks. An id less than -1 should never happen.\n\n\nERR_INVALID_BUFFER_SIZE#\nA swap was performed on a Buffer but its size was not compatible with the operation.\n\n\nERR_INVALID_CHAR#\nInvalid characters were detected in headers.\n\n\nERR_INVALID_CURSOR_POS#\nA cursor on a given stream cannot be moved to a specified row without a specified column.\n\n\nERR_INVALID_FD#\nA file descriptor ('fd') was not valid (e.g. it was a negative value).\n\n\nERR_INVALID_FD_TYPE#\nA file descriptor ('fd') type was not valid.\n\n\nERR_INVALID_FILE_URL_HOST#\nA Node.js API that consumes file: URLs (such as certain functions in the fs module) encountered a file URL with an incompatible host. This situation can only occur on Unix-like systems where only localhost or an empty host is supported.\n\n\nERR_INVALID_FILE_URL_PATH#\nA Node.js API that consumes file: URLs (such as certain functions in the fs module) encountered a file URL with an incompatible path. The exact semantics for determining whether a path can be used is platform-dependent.\n\n\nERR_INVALID_HANDLE_TYPE#\nAn attempt was made to send an unsupported \"handle\" over an IPC communication channel to a child process. See subprocess.send() and process.send() for more information.\n\n\nERR_INVALID_HTTP_TOKEN#\nAn invalid HTTP token was supplied.\n\n\nERR_INVALID_IP_ADDRESS#\nAn IP address is not valid.\n\n\nERR_INVALID_MIME_SYNTAX#\nThe syntax of a MIME is not valid.\n\n\nERR_INVALID_MODULE#\nAdded in: v15.0.0, v14.18.0\nAn attempt was made to load a module that does not exist or was otherwise not valid.\n\n\nERR_INVALID_MODULE_SPECIFIER#\nThe imported module string is an invalid URL, package name, or package subpath specifier.\n\n\nERR_INVALID_OBJECT_DEFINE_PROPERTY#\nAn error occurred while setting an invalid attribute on the property of an object.\n\n\nERR_INVALID_PACKAGE_CONFIG#\nAn invalid package.json file failed parsing.\n\n\nERR_INVALID_PACKAGE_TARGET#\nThe package.json \"exports\" field contains an invalid target mapping value for the attempted module resolution.\n\n\nERR_INVALID_PERFORMANCE_MARK#\nWhile using the Performance Timing API (perf_hooks), a performance mark is invalid.\n\n\nERR_INVALID_PROTOCOL#\nAn invalid options.protocol was passed to http.request().\n\n\nERR_INVALID_REPL_EVAL_CONFIG#\nBoth breakEvalOnSigint and eval options were set in the REPL config, which is not supported.\n\n\nERR_INVALID_REPL_INPUT#\nThe input may not be used in the REPL. The conditions under which this error is used are described in the REPL documentation.\n\n\nERR_INVALID_RETURN_PROPERTY#\nThrown in case a function option does not provide a valid value for one of its returned object properties on execution.\n\n\nERR_INVALID_RETURN_PROPERTY_VALUE#\nThrown in case a function option does not provide an expected value type for one of its returned object properties on execution.\n\n\nERR_INVALID_RETURN_VALUE#\nThrown in case a function option does not return an expected value type on execution, such as when a function is expected to return a promise.\n\n\nERR_INVALID_STATE#\nAdded in: v15.0.0\nIndicates that an operation cannot be completed due to an invalid state. For instance, an object may have", "doc_id": "91977109-b8b3-4f83-95ec-faf49bf216e2", "embedding": null, "doc_hash": "e5e94505da86c9bba5d8bbdfebb1c81f80e3dc30dd837e3ec061e454dcc9bee6", "extra_info": null, "node_info": {"start": 1098906, "end": 1102130}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8ef1ccaf-5d62-46cf-8a27-1f209ce94d22", "3": "26c6628c-ca95-4017-82a8-d52b81f057c8"}}, "__type__": "1"}, "26c6628c-ca95-4017-82a8-d52b81f057c8": {"__data__": {"text": "The conditions under which this error is used are described in the REPL documentation.\n\n\nERR_INVALID_RETURN_PROPERTY#\nThrown in case a function option does not provide a valid value for one of its returned object properties on execution.\n\n\nERR_INVALID_RETURN_PROPERTY_VALUE#\nThrown in case a function option does not provide an expected value type for one of its returned object properties on execution.\n\n\nERR_INVALID_RETURN_VALUE#\nThrown in case a function option does not return an expected value type on execution, such as when a function is expected to return a promise.\n\n\nERR_INVALID_STATE#\nAdded in: v15.0.0\nIndicates that an operation cannot be completed due to an invalid state. For instance, an object may have already been destroyed, or may be performing another operation.\n\n\nERR_INVALID_SYNC_FORK_INPUT#\nA Buffer, TypedArray, DataView, or string was provided as stdio input to an asynchronous fork. See the documentation for the child_process module for more information.\n\n\nERR_INVALID_THIS#\nA Node.js API function was called with an incompatible this value.\n\nconst urlSearchParams = new URLSearchParams('foo=bar&baz=new');\n\nconst buf = Buffer.alloc(1);\nurlSearchParams.has.call(buf, 'foo');\n// Throws a TypeError with code 'ERR_INVALID_THIS'\n\nERR_INVALID_TRANSFER_OBJECT#\nAn invalid transfer object was passed to postMessage().\n\n\nERR_INVALID_TUPLE#\nAn element in the iterable provided to the WHATWG URLSearchParams constructor did not represent a [name, value] tuple \u2013 that is, if an element is not iterable, or does not consist of exactly two elements.\n\n\nERR_INVALID_URI#\nAn invalid URI was passed.\n\n\nERR_INVALID_URL#\nAn invalid URL was passed to the WHATWG URL constructor or the legacy url.parse() to be parsed. The thrown error object typically has an additional property 'input' that contains the URL that failed to parse.\n\n\nERR_INVALID_URL_SCHEME#\nAn attempt was made to use a URL of an incompatible scheme (protocol) for a specific purpose. It is only used in the WHATWG URL API support in the fs module (which only accepts URLs with 'file' scheme), but may be used in other Node.js APIs as well in the future.\n\n\nERR_IPC_CHANNEL_CLOSED#\nAn attempt was made to use an IPC communication channel that was already closed.\n\n\nERR_IPC_DISCONNECTED#\nAn attempt was made to disconnect an IPC communication channel that was already disconnected. See the documentation for the child_process module for more information.\n\n\nERR_IPC_ONE_PIPE#\nAn attempt was made to create a child Node.js process using more than one IPC communication channel. See the documentation for the child_process module for more information.\n\n\nERR_IPC_SYNC_FORK#\nAn attempt was made to open an IPC communication channel with a synchronously forked Node.js process. See the documentation for the child_process module for more information.\n\n\nERR_LOADER_CHAIN_INCOMPLETE#\nAdded in: v18.6.0\nAn ESM loader hook returned without calling next() and without explicitly signaling a short circuit.\n\n\nERR_MANIFEST_ASSERT_INTEGRITY#\nAn attempt was made to load a resource, but the resource did not match the integrity defined by the policy manifest. See the documentation for policy manifests for more information.\n\n\nERR_MANIFEST_DEPENDENCY_MISSING#\nAn attempt was made to load a resource, but the resource was not listed as a dependency from the location that attempted to load it. See the documentation for policy manifests for more information.\n\n\nERR_MANIFEST_INTEGRITY_MISMATCH#\nAn attempt was made to load a policy manifest, but the manifest", "doc_id": "26c6628c-ca95-4017-82a8-d52b81f057c8", "embedding": null, "doc_hash": "146d89303cd6833496b9777d5313e4797bff07741340dacc809f7025cd5af92d", "extra_info": null, "node_info": {"start": 1102032, "end": 1105546}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "91977109-b8b3-4f83-95ec-faf49bf216e2", "3": "9e576fb3-6d03-4d0a-8fc6-5369cdd97ac1"}}, "__type__": "1"}, "9e576fb3-6d03-4d0a-8fc6-5369cdd97ac1": {"__data__": {"text": "in: v18.6.0\nAn ESM loader hook returned without calling next() and without explicitly signaling a short circuit.\n\n\nERR_MANIFEST_ASSERT_INTEGRITY#\nAn attempt was made to load a resource, but the resource did not match the integrity defined by the policy manifest. See the documentation for policy manifests for more information.\n\n\nERR_MANIFEST_DEPENDENCY_MISSING#\nAn attempt was made to load a resource, but the resource was not listed as a dependency from the location that attempted to load it. See the documentation for policy manifests for more information.\n\n\nERR_MANIFEST_INTEGRITY_MISMATCH#\nAn attempt was made to load a policy manifest, but the manifest had multiple entries for a resource which did not match each other. Update the manifest entries to match in order to resolve this error. See the documentation for policy manifests for more information.\n\n\nERR_MANIFEST_INVALID_RESOURCE_FIELD#\nA policy manifest resource had an invalid value for one of its fields. Update the manifest entry to match in order to resolve this error. See the documentation for policy manifests for more information.\n\n\nERR_MANIFEST_INVALID_SPECIFIER#\nA policy manifest resource had an invalid value for one of its dependency mappings. Update the manifest entry to match to resolve this error. See the documentation for policy manifests for more information.\n\n\nERR_MANIFEST_PARSE_POLICY#\nAn attempt was made to load a policy manifest, but the manifest was unable to be parsed. See the documentation for policy manifests for more information.\n\n\nERR_MANIFEST_TDZ#\nAn attempt was made to read from a policy manifest, but the manifest initialization has not yet taken place. This is likely a bug in Node.js.\n\n\nERR_MANIFEST_UNKNOWN_ONERROR#\nA policy manifest was loaded, but had an unknown value for its \"onerror\" behavior. See the documentation for policy manifests for more information.\n\n\nERR_MEMORY_ALLOCATION_FAILED#\nAn attempt was made to allocate memory (usually in the C++ layer) but it failed.\n\n\nERR_MESSAGE_TARGET_CONTEXT_UNAVAILABLE#\nAdded in: v14.5.0, v12.19.0\nA message posted to a MessagePort could not be deserialized in the target vm Context. Not all Node.js objects can be successfully instantiated in any context at this time, and attempting to transfer them using postMessage() can fail on the receiving side in that case.\n\n\nERR_METHOD_NOT_IMPLEMENTED#\nA method is required but not implemented.\n\n\nERR_MISSING_ARGS#\nA required argument of a Node.js API was not passed. This is only used for strict compliance with the API specification (which in some cases may accept func(undefined) but not func()). In most native Node.js APIs, func(undefined) and func() are treated identically, and the ERR_INVALID_ARG_TYPE error code may be used instead.\n\n\nERR_MISSING_OPTION#\nFor APIs that accept options objects, some options might be mandatory. This code is thrown if a required option is missing.\n\n\nERR_MISSING_PASSPHRASE#\nAn attempt was made to read an encrypted key without specifying a passphrase.\n\n\nERR_MISSING_PLATFORM_FOR_WORKER#\nThe V8 platform used by this instance of Node.js does not support creating Workers. This is caused by lack of embedder support for Workers. In particular, this error will not occur with standard builds of Node.js.\n\n\nERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST#\nAdded in: v15.0.0\nAn object that needs to be explicitly listed in the transferList argument is in the object passed to a postMessage() call, but is not provided in the transferList for that call. Usually, this is a MessagePort.\n\nIn Node.js versions prior to v15.0.0, the error code being used here was", "doc_id": "9e576fb3-6d03-4d0a-8fc6-5369cdd97ac1", "embedding": null, "doc_hash": "6c958e8dadcfd9a9769d325e2721a000c3538c38b0b8f39b1292c0360a5ad1ed", "extra_info": null, "node_info": {"start": 1105597, "end": 1109183}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "26c6628c-ca95-4017-82a8-d52b81f057c8", "3": "d8fee4b7-6e3f-4abf-a9c5-8e2b7e46e712"}}, "__type__": "1"}, "d8fee4b7-6e3f-4abf-a9c5-8e2b7e46e712": {"__data__": {"text": "attempt was made to read an encrypted key without specifying a passphrase.\n\n\nERR_MISSING_PLATFORM_FOR_WORKER#\nThe V8 platform used by this instance of Node.js does not support creating Workers. This is caused by lack of embedder support for Workers. In particular, this error will not occur with standard builds of Node.js.\n\n\nERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST#\nAdded in: v15.0.0\nAn object that needs to be explicitly listed in the transferList argument is in the object passed to a postMessage() call, but is not provided in the transferList for that call. Usually, this is a MessagePort.\n\nIn Node.js versions prior to v15.0.0, the error code being used here was ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST. However, the set of transferable object types has been expanded to cover more types than MessagePort.\n\n\nERR_MODULE_NOT_FOUND#\nA module file could not be resolved by the ECMAScript modules loader while attempting an import operation or when loading the program entry point.\n\n\nERR_MULTIPLE_CALLBACK#\nA callback was called more than once.\n\nA callback is almost always meant to only be called once as the query can either be fulfilled or rejected but not both at the same time. The latter would be possible by calling a callback more than once.\n\n\nERR_NAPI_CONS_FUNCTION#\nWhile using Node-API, a constructor passed was not a function.\n\n\nERR_NAPI_INVALID_DATAVIEW_ARGS#\nWhile calling napi_create_dataview(), a given offset was outside the bounds of the dataview or offset + length was larger than a length of given buffer.\n\n\nERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT#\nWhile calling napi_create_typedarray(), the provided offset was not a multiple of the element size.\n\n\nERR_NAPI_INVALID_TYPEDARRAY_LENGTH#\nWhile calling napi_create_typedarray(), (length * size_of_element) + byte_offset was larger than the length of given buffer.\n\n\nERR_NAPI_TSFN_CALL_JS#\nAn error occurred while invoking the JavaScript portion of the thread-safe function.\n\n\nERR_NAPI_TSFN_GET_UNDEFINED#\nAn error occurred while attempting to retrieve the JavaScript undefined value.\n\n\nERR_NAPI_TSFN_START_IDLE_LOOP#\nOn the main thread, values are removed from the queue associated with the thread-safe function in an idle loop. This error indicates that an error has occurred when attempting to start the loop.\n\n\nERR_NAPI_TSFN_STOP_IDLE_LOOP#\nOnce no more items are left in the queue, the idle loop must be suspended. This error indicates that the idle loop has failed to stop.\n\n\nERR_NOT_BUILDING_SNAPSHOT#\nAn attempt was made to use operations that can only be used when building V8 startup snapshot even though Node.js isn't building one.\n\n\nERR_NO_CRYPTO#\nAn attempt was made to use crypto features while Node.js was not compiled with OpenSSL crypto support.\n\n\nERR_NO_ICU#\nAn attempt was made to use features that require ICU, but Node.js was not compiled with ICU support.\n\n\nERR_NON_CONTEXT_AWARE_DISABLED#\nA non-context-aware native addon was loaded in a process that disallows them.\n\n\nERR_OUT_OF_RANGE#\nA given value is out of the accepted range.\n\n\nERR_PACKAGE_IMPORT_NOT_DEFINED#\nThe package.json \"imports\" field does not define the given internal package specifier mapping.\n\n\nERR_PACKAGE_PATH_NOT_EXPORTED#\nThe package.json \"exports\" field does not export the requested subpath. Because exports are encapsulated, private internal modules that are not exported cannot be imported through the package resolution,", "doc_id": "d8fee4b7-6e3f-4abf-a9c5-8e2b7e46e712", "embedding": null, "doc_hash": "2ac068195e258de777e63fdf62d33c7961a6146335f3ff1a3b5cdc0506d89482", "extra_info": null, "node_info": {"start": 1109180, "end": 1112569}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9e576fb3-6d03-4d0a-8fc6-5369cdd97ac1", "3": "6e744871-dd04-4fb8-abf9-bc682380c400"}}, "__type__": "1"}, "6e744871-dd04-4fb8-abf9-bc682380c400": {"__data__": {"text": "attempt was made to use features that require ICU, but Node.js was not compiled with ICU support.\n\n\nERR_NON_CONTEXT_AWARE_DISABLED#\nA non-context-aware native addon was loaded in a process that disallows them.\n\n\nERR_OUT_OF_RANGE#\nA given value is out of the accepted range.\n\n\nERR_PACKAGE_IMPORT_NOT_DEFINED#\nThe package.json \"imports\" field does not define the given internal package specifier mapping.\n\n\nERR_PACKAGE_PATH_NOT_EXPORTED#\nThe package.json \"exports\" field does not export the requested subpath. Because exports are encapsulated, private internal modules that are not exported cannot be imported through the package resolution, unless using an absolute URL.\n\n\nERR_PARSE_ARGS_INVALID_OPTION_VALUE#\nAdded in: v18.3.0\nWhen strict set to true, thrown by util.parseArgs() if a <boolean> value is provided for an option of type <string>, or if a <string> value is provided for an option of type <boolean>.\n\n\nERR_PARSE_ARGS_UNEXPECTED_POSITIONAL#\nAdded in: v18.3.0\nThrown by util.parseArgs(), when a positional argument is provided and allowPositionals is set to false.\n\n\nERR_PARSE_ARGS_UNKNOWN_OPTION#\nAdded in: v18.3.0\nWhen strict set to true, thrown by util.parseArgs() if an argument is not configured in options.\n\n\nERR_PERFORMANCE_INVALID_TIMESTAMP#\nAn invalid timestamp value was provided for a performance mark or measure.\n\n\nERR_PERFORMANCE_MEASURE_INVALID_OPTIONS#\nInvalid options were provided for a performance measure.\n\n\nERR_PROTO_ACCESS#\nAccessing Object.prototype.__proto__ has been forbidden using --disable-proto=throw. Object.getPrototypeOf and Object.setPrototypeOf should be used to get and set the prototype of an object.\n\n\nERR_REQUIRE_ESM#\nStability: 1 - Experimental\nAn attempt was made to require() an ES Module.\n\n\nERR_SCRIPT_EXECUTION_INTERRUPTED#\nScript execution was interrupted by SIGINT (For example, Ctrl+C was pressed.)\n\n\nERR_SCRIPT_EXECUTION_TIMEOUT#\nScript execution timed out, possibly due to bugs in the script being executed.\n\n\nERR_SERVER_ALREADY_LISTEN#\nThe server.listen() method was called while a net.Server was already listening. This applies to all instances of net.Server, including HTTP, HTTPS, and HTTP/2 Server instances.\n\n\nERR_SERVER_NOT_RUNNING#\nThe server.close() method was called when a net.Server was not running. This applies to all instances of net.Server, including HTTP, HTTPS, and HTTP/2 Server instances.\n\n\nERR_SOCKET_ALREADY_BOUND#\nAn attempt was made to bind a socket that has already been bound.\n\n\nERR_SOCKET_BAD_BUFFER_SIZE#\nAn invalid (negative) size was passed for either the recvBufferSize or sendBufferSize options in dgram.createSocket().\n\n\nERR_SOCKET_BAD_PORT#\nAn API function expecting a port >= 0 and < 65536 received an invalid value.\n\n\nERR_SOCKET_BAD_TYPE#\nAn API function expecting a socket type (udp4 or udp6) received an invalid value.\n\n\nERR_SOCKET_BUFFER_SIZE#\nWhile using dgram.createSocket(), the size of the receive or send Buffer could not be determined.\n\n\nERR_SOCKET_CLOSED#\nAn attempt was made to operate on an already closed socket.\n\n\nERR_SOCKET_CLOSED_BEFORE_CONNECTION#\nWhen calling net.Socket.write() on a connecting socket and the socket was closed before the connection was established.\n\n\nERR_SOCKET_DGRAM_IS_CONNECTED#\nA", "doc_id": "6e744871-dd04-4fb8-abf9-bc682380c400", "embedding": null, "doc_hash": "a7ffde0a284f00a691101362693b433f095216383129602476a605fffb4c5a88", "extra_info": null, "node_info": {"start": 1112580, "end": 1115792}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d8fee4b7-6e3f-4abf-a9c5-8e2b7e46e712", "3": "d90e6a65-bbff-457b-b358-ea9fd30e956a"}}, "__type__": "1"}, "d90e6a65-bbff-457b-b358-ea9fd30e956a": {"__data__": {"text": "API function expecting a port >= 0 and < 65536 received an invalid value.\n\n\nERR_SOCKET_BAD_TYPE#\nAn API function expecting a socket type (udp4 or udp6) received an invalid value.\n\n\nERR_SOCKET_BUFFER_SIZE#\nWhile using dgram.createSocket(), the size of the receive or send Buffer could not be determined.\n\n\nERR_SOCKET_CLOSED#\nAn attempt was made to operate on an already closed socket.\n\n\nERR_SOCKET_CLOSED_BEFORE_CONNECTION#\nWhen calling net.Socket.write() on a connecting socket and the socket was closed before the connection was established.\n\n\nERR_SOCKET_DGRAM_IS_CONNECTED#\nA dgram.connect() call was made on an already connected socket.\n\n\nERR_SOCKET_DGRAM_NOT_CONNECTED#\nA dgram.disconnect() or dgram.remoteAddress() call was made on a disconnected socket.\n\n\nERR_SOCKET_DGRAM_NOT_RUNNING#\nA call was made and the UDP subsystem was not running.\n\n\nERR_SRI_PARSE#\nA string was provided for a Subresource Integrity check, but was unable to be parsed. Check the format of integrity attributes by looking at the Subresource Integrity specification.\n\n\nERR_STREAM_ALREADY_FINISHED#\nA stream method was called that cannot complete because the stream was finished.\n\n\nERR_STREAM_CANNOT_PIPE#\nAn attempt was made to call stream.pipe() on a Writable stream.\n\n\nERR_STREAM_DESTROYED#\nA stream method was called that cannot complete because the stream was destroyed using stream.destroy().\n\n\nERR_STREAM_NULL_VALUES#\nAn attempt was made to call stream.write() with a null chunk.\n\n\nERR_STREAM_PREMATURE_CLOSE#\nAn error returned by stream.finished() and stream.pipeline(), when a stream or a pipeline ends non gracefully with no explicit error.\n\n\nERR_STREAM_PUSH_AFTER_EOF#\nAn attempt was made to call stream.push() after a null(EOF) had been pushed to the stream.\n\n\nERR_STREAM_UNSHIFT_AFTER_END_EVENT#\nAn attempt was made to call stream.unshift() after the 'end' event was emitted.\n\n\nERR_STREAM_WRAP#\nPrevents an abort if a string decoder was set on the Socket or if the decoder is in objectMode.\n\nconst Socket = require('node:net').Socket;\nconst instance = new Socket();\n\ninstance.setEncoding('utf8');\n\nERR_STREAM_WRITE_AFTER_END#\nAn attempt was made to call stream.write() after stream.end() has been called.\n\n\nERR_STRING_TOO_LONG#\nAn attempt has been made to create a string longer than the maximum allowed length.\n\n\nERR_SYNTHETIC#\nAn artificial error object used to capture the call stack for diagnostic reports.\n\n\nERR_SYSTEM_ERROR#\nAn unspecified or non-specific system error has occurred within the Node.js process. The error object will have an err.info object property with additional details.\n\n\nERR_TAP_LEXER_ERROR#\nAn error representing a failing lexer state.\n\n\nERR_TAP_PARSER_ERROR#\nAn error representing a failing parser state. Additional information about the token causing the error is available via the cause property.\n\n\nERR_TAP_VALIDATION_ERROR#\nThis error represents a failed TAP validation.\n\n\nERR_TEST_FAILURE#\nThis error represents a failed test. Additional information about the failure is available via the cause property. The failureType property specifies what the test was doing when the failure occurred.\n\n\nERR_TLS_CERT_ALTNAME_FORMAT#\nThis error is thrown by checkServerIdentity if a user-supplied subjectaltname property violates encoding rules. Certificate objects produced by Node.js itself always comply with encoding rules and will never cause this", "doc_id": "d90e6a65-bbff-457b-b358-ea9fd30e956a", "embedding": null, "doc_hash": "6cc337d118f5adad4cf150e7d6b024b6058ce760a2912ca7633c91ee19d9888d", "extra_info": null, "node_info": {"start": 1115847, "end": 1119211}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6e744871-dd04-4fb8-abf9-bc682380c400", "3": "49c1881f-289a-4abd-9ad4-40c39c9e0713"}}, "__type__": "1"}, "49c1881f-289a-4abd-9ad4-40c39c9e0713": {"__data__": {"text": "error representing a failing lexer state.\n\n\nERR_TAP_PARSER_ERROR#\nAn error representing a failing parser state. Additional information about the token causing the error is available via the cause property.\n\n\nERR_TAP_VALIDATION_ERROR#\nThis error represents a failed TAP validation.\n\n\nERR_TEST_FAILURE#\nThis error represents a failed test. Additional information about the failure is available via the cause property. The failureType property specifies what the test was doing when the failure occurred.\n\n\nERR_TLS_CERT_ALTNAME_FORMAT#\nThis error is thrown by checkServerIdentity if a user-supplied subjectaltname property violates encoding rules. Certificate objects produced by Node.js itself always comply with encoding rules and will never cause this error.\n\n\nERR_TLS_CERT_ALTNAME_INVALID#\nWhile using TLS, the host name/IP of the peer did not match any of the subjectAltNames in its certificate.\n\n\nERR_TLS_DH_PARAM_SIZE#\nWhile using TLS, the parameter offered for the Diffie-Hellman (DH) key-agreement protocol is too small. By default, the key length must be greater than or equal to 1024 bits to avoid vulnerabilities, even though it is strongly recommended to use 2048 bits or larger for stronger security.\n\n\nERR_TLS_HANDSHAKE_TIMEOUT#\nA TLS/SSL handshake timed out. In this case, the server must also abort the connection.\n\n\nERR_TLS_INVALID_CONTEXT#\nAdded in: v13.3.0\nThe context must be a SecureContext.\n\n\nERR_TLS_INVALID_PROTOCOL_METHOD#\nThe specified secureProtocol method is invalid. It is either unknown, or disabled because it is insecure.\n\n\nERR_TLS_INVALID_PROTOCOL_VERSION#\nValid TLS protocol versions are 'TLSv1', 'TLSv1.1', or 'TLSv1.2'.\n\n\nERR_TLS_INVALID_STATE#\nAdded in: v13.10.0, v12.17.0\nThe TLS socket must be connected and securely established. Ensure the 'secure' event is emitted before continuing.\n\n\nERR_TLS_PROTOCOL_VERSION_CONFLICT#\nAttempting to set a TLS protocol minVersion or maxVersion conflicts with an attempt to set the secureProtocol explicitly. Use one mechanism or the other.\n\n\nERR_TLS_PSK_SET_IDENTIY_HINT_FAILED#\nFailed to set PSK identity hint. Hint may be too long.\n\n\nERR_TLS_RENEGOTIATION_DISABLED#\nAn attempt was made to renegotiate TLS on a socket instance with renegotiation disabled.\n\n\nERR_TLS_REQUIRED_SERVER_NAME#\nWhile using TLS, the server.addContext() method was called without providing a host name in the first parameter.\n\n\nERR_TLS_SESSION_ATTACK#\nAn excessive amount of TLS renegotiations is detected, which is a potential vector for denial-of-service attacks.\n\n\nERR_TLS_SNI_FROM_SERVER#\nAn attempt was made to issue Server Name Indication from a TLS server-side socket, which is only valid from a client.\n\n\nERR_TRACE_EVENTS_CATEGORY_REQUIRED#\nThe trace_events.createTracing() method requires at least one trace event category.\n\n\nERR_TRACE_EVENTS_UNAVAILABLE#\nThe node:trace_events module could not be loaded because Node.js was compiled with the --without-v8-platform flag.\n\n\nERR_TRANSFORM_ALREADY_TRANSFORMING#\nA Transform stream finished while it was still transforming.\n\n\nERR_TRANSFORM_WITH_LENGTH_0#\nA Transform stream finished with data still in the write buffer.\n\n\nERR_TTY_INIT_FAILED#\nThe initialization of a TTY failed due to a system", "doc_id": "49c1881f-289a-4abd-9ad4-40c39c9e0713", "embedding": null, "doc_hash": "cb5eb930969cd5a98fe38adfad8a625788146e17ac9864664787d254eb9187a2", "extra_info": null, "node_info": {"start": 1119061, "end": 1122259}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d90e6a65-bbff-457b-b358-ea9fd30e956a", "3": "02a45a7c-ff46-428c-bbd0-3165b82aa230"}}, "__type__": "1"}, "02a45a7c-ff46-428c-bbd0-3165b82aa230": {"__data__": {"text": "was made to issue Server Name Indication from a TLS server-side socket, which is only valid from a client.\n\n\nERR_TRACE_EVENTS_CATEGORY_REQUIRED#\nThe trace_events.createTracing() method requires at least one trace event category.\n\n\nERR_TRACE_EVENTS_UNAVAILABLE#\nThe node:trace_events module could not be loaded because Node.js was compiled with the --without-v8-platform flag.\n\n\nERR_TRANSFORM_ALREADY_TRANSFORMING#\nA Transform stream finished while it was still transforming.\n\n\nERR_TRANSFORM_WITH_LENGTH_0#\nA Transform stream finished with data still in the write buffer.\n\n\nERR_TTY_INIT_FAILED#\nThe initialization of a TTY failed due to a system error.\n\n\nERR_UNAVAILABLE_DURING_EXIT#\nFunction was called within a process.on('exit') handler that shouldn't be called within process.on('exit') handler.\n\n\nERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET#\nprocess.setUncaughtExceptionCaptureCallback() was called twice, without first resetting the callback to null.\n\nThis error is designed to prevent accidentally overwriting a callback registered from another module.\n\n\nERR_UNESCAPED_CHARACTERS#\nA string that contained unescaped characters was received.\n\n\nERR_UNHANDLED_ERROR#\nAn unhandled error occurred (for instance, when an 'error' event is emitted by an EventEmitter but an 'error' handler is not registered).\n\n\nERR_UNKNOWN_BUILTIN_MODULE#\nUsed to identify a specific kind of internal Node.js error that should not typically be triggered by user code. Instances of this error point to an internal bug within the Node.js binary itself.\n\n\nERR_UNKNOWN_CREDENTIAL#\nA Unix group or user identifier that does not exist was passed.\n\n\nERR_UNKNOWN_ENCODING#\nAn invalid or unknown encoding option was passed to an API.\n\n\nERR_UNKNOWN_FILE_EXTENSION#\nStability: 1 - Experimental\nAn attempt was made to load a module with an unknown or unsupported file extension.\n\n\nERR_UNKNOWN_MODULE_FORMAT#\nStability: 1 - Experimental\nAn attempt was made to load a module with an unknown or unsupported format.\n\n\nERR_UNKNOWN_SIGNAL#\nAn invalid or unknown process signal was passed to an API expecting a valid signal (such as subprocess.kill()).\n\n\nERR_UNSUPPORTED_DIR_IMPORT#\nimport a directory URL is unsupported. Instead, self-reference a package using its name and define a custom subpath in the \"exports\" field of the package.json file.\n\nimport './'; // unsupported\nimport './index.js'; // supported\nimport 'package-name'; // supported\n\nERR_UNSUPPORTED_ESM_URL_SCHEME#\nimport with URL schemes other than file and data is unsupported.\n\n\nERR_USE_AFTER_CLOSE#\nStability: 1 - Experimental\nAn attempt was made to use something that was already closed.\n\n\nERR_VALID_PERFORMANCE_ENTRY_TYPE#\nWhile using the Performance Timing API (perf_hooks), no valid performance entry types are found.\n\n\nERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING#\nA dynamic import callback was not specified.\n\n\nERR_VM_MODULE_ALREADY_LINKED#\nThe module attempted to be linked is not eligible for linking, because of one of the following reasons:\n\nIt has already been linked (linkingStatus is 'linked')\nIt is being linked (linkingStatus is 'linking')\nLinking has failed for this module (linkingStatus is 'errored')\n\nERR_VM_MODULE_CACHED_DATA_REJECTED#\nThe cachedData option passed to a module constructor is invalid.\n\n\nERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA#\nCached data cannot be created for modules which have already been", "doc_id": "02a45a7c-ff46-428c-bbd0-3165b82aa230", "embedding": null, "doc_hash": "2c914cb795f8c1f7e886965d265ce327c41fba9adbb578da88fd369904902c4d", "extra_info": null, "node_info": {"start": 1122346, "end": 1125699}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "49c1881f-289a-4abd-9ad4-40c39c9e0713", "3": "13eefe3f-fede-48ce-8a51-4b57d3bb62da"}}, "__type__": "1"}, "13eefe3f-fede-48ce-8a51-4b57d3bb62da": {"__data__": {"text": "found.\n\n\nERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING#\nA dynamic import callback was not specified.\n\n\nERR_VM_MODULE_ALREADY_LINKED#\nThe module attempted to be linked is not eligible for linking, because of one of the following reasons:\n\nIt has already been linked (linkingStatus is 'linked')\nIt is being linked (linkingStatus is 'linking')\nLinking has failed for this module (linkingStatus is 'errored')\n\nERR_VM_MODULE_CACHED_DATA_REJECTED#\nThe cachedData option passed to a module constructor is invalid.\n\n\nERR_VM_MODULE_CANNOT_CREATE_CACHED_DATA#\nCached data cannot be created for modules which have already been evaluated.\n\n\nERR_VM_MODULE_DIFFERENT_CONTEXT#\nThe module being returned from the linker function is from a different context than the parent module. Linked modules must share the same context.\n\n\nERR_VM_MODULE_LINK_FAILURE#\nThe module was unable to be linked due to a failure.\n\n\nERR_VM_MODULE_NOT_MODULE#\nThe fulfilled value of a linking promise is not a vm.Module object.\n\n\nERR_VM_MODULE_STATUS#\nThe current module's status does not allow for this operation. The specific meaning of the error depends on the specific function.\n\n\nERR_WASI_ALREADY_STARTED#\nThe WASI instance has already started.\n\n\nERR_WASI_NOT_STARTED#\nThe WASI instance has not been started.\n\n\nERR_WEBASSEMBLY_RESPONSE#\nAdded in: v18.1.0\nThe Response that has been passed to WebAssembly.compileStreaming or to WebAssembly.instantiateStreaming is not a valid WebAssembly response.\n\n\nERR_WORKER_INIT_FAILED#\nThe Worker initialization failed.\n\n\nERR_WORKER_INVALID_EXEC_ARGV#\nThe execArgv option passed to the Worker constructor contains invalid flags.\n\n\nERR_WORKER_NOT_RUNNING#\nAn operation failed because the Worker instance is not currently running.\n\n\nERR_WORKER_OUT_OF_MEMORY#\nThe Worker instance terminated because it reached its memory limit.\n\n\nERR_WORKER_PATH#\nThe path for the main script of a worker is neither an absolute path nor a relative path starting with ./ or ../.\n\n\nERR_WORKER_UNSERIALIZABLE_ERROR#\nAll attempts at serializing an uncaught exception from a worker thread failed.\n\n\nERR_WORKER_UNSUPPORTED_OPERATION#\nThe requested functionality is not supported in worker threads.\n\n\nERR_ZLIB_INITIALIZATION_FAILED#\nCreation of a zlib object failed due to incorrect configuration.\n\n\nHPE_HEADER_OVERFLOW#\nHistory\nToo much HTTP header data was received. In order to protect against malicious or malconfigured clients, if more than 8 KiB of HTTP header data is received then HTTP parsing will abort without a request or response object being created, and an Error with this code will be emitted.\n\n\nHPE_UNEXPECTED_CONTENT_LENGTH#\nServer is sending both a Content-Length header and Transfer-Encoding: chunked.\n\nTransfer-Encoding: chunked allows the server to maintain an HTTP persistent connection for dynamically generated content. In this case, the Content-Length HTTP header cannot be used.\n\nUse Content-Length or Transfer-Encoding: chunked.\n\n\nMODULE_NOT_FOUND#\nHistory\nA module file could not be resolved by the CommonJS modules loader while attempting a require() operation or when loading the program entry point.\n\nLegacy Node.js error codes#\nStability: 0 - Deprecated. These error codes are either inconsistent, or have been removed.\n\nERR_CANNOT_TRANSFER_OBJECT#\nThe value passed to postMessage() contained an object that is not supported for", "doc_id": "13eefe3f-fede-48ce-8a51-4b57d3bb62da", "embedding": null, "doc_hash": "c432229b66859548955e0f47a4276e020332d03a7d8fb5ccb5e71b33b441512c", "extra_info": null, "node_info": {"start": 1125731, "end": 1129060}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "02a45a7c-ff46-428c-bbd0-3165b82aa230", "3": "966e6733-f83d-4ee7-937c-2ffdca0e457f"}}, "__type__": "1"}, "966e6733-f83d-4ee7-937c-2ffdca0e457f": {"__data__": {"text": "is sending both a Content-Length header and Transfer-Encoding: chunked.\n\nTransfer-Encoding: chunked allows the server to maintain an HTTP persistent connection for dynamically generated content. In this case, the Content-Length HTTP header cannot be used.\n\nUse Content-Length or Transfer-Encoding: chunked.\n\n\nMODULE_NOT_FOUND#\nHistory\nA module file could not be resolved by the CommonJS modules loader while attempting a require() operation or when loading the program entry point.\n\nLegacy Node.js error codes#\nStability: 0 - Deprecated. These error codes are either inconsistent, or have been removed.\n\nERR_CANNOT_TRANSFER_OBJECT#\nThe value passed to postMessage() contained an object that is not supported for transferring.\n\n\nERR_CRYPTO_HASH_DIGEST_NO_UTF16#\nAdded in: v9.0.0Removed in: v12.12.0\nThe UTF-16 encoding was used with hash.digest(). While the hash.digest() method does allow an encoding argument to be passed in, causing the method to return a string rather than a Buffer, the UTF-16 encoding (e.g. ucs or utf16le) is not supported.\n\n\nERR_HTTP2_FRAME_ERROR#\nAdded in: v9.0.0Removed in: v10.0.0\nUsed when a failure occurs sending an individual frame on the HTTP/2 session.\n\n\nERR_HTTP2_HEADERS_OBJECT#\nAdded in: v9.0.0Removed in: v10.0.0\nUsed when an HTTP/2 Headers Object is expected.\n\n\nERR_HTTP2_HEADER_REQUIRED#\nAdded in: v9.0.0Removed in: v10.0.0\nUsed when a required header is missing in an HTTP/2 message.\n\n\nERR_HTTP2_INFO_HEADERS_AFTER_RESPOND#\nAdded in: v9.0.0Removed in: v10.0.0\nHTTP/2 informational headers must only be sent prior to calling the Http2Stream.prototype.respond() method.\n\n\nERR_HTTP2_STREAM_CLOSED#\nAdded in: v9.0.0Removed in: v10.0.0\nUsed when an action has been performed on an HTTP/2 Stream that has already been closed.\n\n\nERR_HTTP_INVALID_CHAR#\nAdded in: v9.0.0Removed in: v10.0.0\nUsed when an invalid character is found in an HTTP response status message (reason phrase).\n\n\nERR_INDEX_OUT_OF_RANGE#\nAdded in: v10.0.0Removed in: v11.0.0\nA given index was out of the accepted range (e.g. negative offsets).\n\n\nERR_INVALID_OPT_VALUE#\nAdded in: v8.0.0Removed in: v15.0.0\nAn invalid or unexpected value was passed in an options object.\n\n\nERR_INVALID_OPT_VALUE_ENCODING#\nAdded in: v9.0.0Removed in: v15.0.0\nAn invalid or unknown file encoding was passed.\n\n\nERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST#\nRemoved in: v15.0.0\nThis error code was replaced by ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST in Node.js v15.0.0, because it is no longer accurate as other types of transferable objects also exist now.\n\n\nERR_NAPI_CONS_PROTOTYPE_OBJECT#\nAdded in: v9.0.0Removed in: v10.0.0\nUsed by the Node-API when Constructor.prototype is not an object.\n\n\nERR_NETWORK_IMPORT_BAD_RESPONSE#\nStability: 1 - Experimental\nResponse was received but was invalid when importing a module over the network.\n\n\nERR_NETWORK_IMPORT_DISALLOWED#\nStability: 1 - Experimental\nA network module attempted to load another module that it is not allowed to load. Likely this restriction is for security", "doc_id": "966e6733-f83d-4ee7-937c-2ffdca0e457f", "embedding": null, "doc_hash": "2b8de5261c510a9557ca632d0e13639dbe7bb3d18eb4a1253ab155ddb1fa7a7b", "extra_info": null, "node_info": {"start": 1128982, "end": 1131978}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "13eefe3f-fede-48ce-8a51-4b57d3bb62da", "3": "acaac298-8536-4918-a3b4-a04e74f7ba6a"}}, "__type__": "1"}, "acaac298-8536-4918-a3b4-a04e74f7ba6a": {"__data__": {"text": "ERR_MISSING_TRANSFERABLE_IN_TRANSFER_LIST in Node.js v15.0.0, because it is no longer accurate as other types of transferable objects also exist now.\n\n\nERR_NAPI_CONS_PROTOTYPE_OBJECT#\nAdded in: v9.0.0Removed in: v10.0.0\nUsed by the Node-API when Constructor.prototype is not an object.\n\n\nERR_NETWORK_IMPORT_BAD_RESPONSE#\nStability: 1 - Experimental\nResponse was received but was invalid when importing a module over the network.\n\n\nERR_NETWORK_IMPORT_DISALLOWED#\nStability: 1 - Experimental\nA network module attempted to load another module that it is not allowed to load. Likely this restriction is for security reasons.\n\n\nERR_NO_LONGER_SUPPORTED#\nA Node.js API was called in an unsupported manner, such as Buffer.write(string, encoding, offset[, length]).\n\n\nERR_OPERATION_FAILED#\nAdded in: v15.0.0\nAn operation failed. This is typically used to signal the general failure of an asynchronous operation.\n\n\nERR_OUTOFMEMORY#\nAdded in: v9.0.0Removed in: v10.0.0\nUsed generically to identify that an operation caused an out of memory condition.\n\n\nERR_PARSE_HISTORY_DATA#\nAdded in: v9.0.0Removed in: v10.0.0\nThe node:repl module was unable to parse data from the REPL history file.\n\n\nERR_SOCKET_CANNOT_SEND#\nAdded in: v9.0.0Removed in: v14.0.0\nData could not be sent on a socket.\n\n\nERR_STDERR_CLOSE#\nHistory\nAn attempt was made to close the process.stderr stream. By design, Node.js does not allow stdout or stderr streams to be closed by user code.\n\n\nERR_STDOUT_CLOSE#\nHistory\nAn attempt was made to close the process.stdout stream. By design, Node.js does not allow stdout or stderr streams to be closed by user code.\n\n\nERR_STREAM_READ_NOT_IMPLEMENTED#\nAdded in: v9.0.0Removed in: v10.0.0\nUsed when an attempt is made to use a readable stream that has not implemented readable._read().\n\n\nERR_TLS_RENEGOTIATION_FAILED#\nAdded in: v9.0.0Removed in: v10.0.0\nUsed when a TLS renegotiation request has failed in a non-specific way.\n\n\nERR_TRANSFERRING_EXTERNALIZED_SHAREDARRAYBUFFER#\nAdded in: v10.5.0Removed in: v14.0.0\nA SharedArrayBuffer whose memory is not managed by the JavaScript engine or by Node.js was encountered during serialization. Such a SharedArrayBuffer cannot be serialized.\n\nThis can only happen when native addons create SharedArrayBuffers in \"externalized\" mode, or put existing SharedArrayBuffer into externalized mode.\n\n\nERR_UNKNOWN_STDIN_TYPE#\nAdded in: v8.0.0Removed in: v11.7.0\nAn attempt was made to launch a Node.js process with an unknown stdin file type. This error is usually an indication of a bug within Node.js itself, although it is possible for user code to trigger it.\n\n\nERR_UNKNOWN_STREAM_TYPE#\nAdded in: v8.0.0Removed in: v11.7.0\nAn attempt was made to launch a Node.js process with an unknown stdout or stderr file type. This error is usually an indication of a bug within Node.js itself, although it is possible for user code to trigger it.\n\n\nERR_V8BREAKITERATOR#\nThe V8 BreakIterator API was used but the full ICU data set is not installed.\n\n\nERR_VALUE_OUT_OF_RANGE#\nAdded in: v9.0.0Removed in: v10.0.0\nUsed when a given value is out of the accepted", "doc_id": "acaac298-8536-4918-a3b4-a04e74f7ba6a", "embedding": null, "doc_hash": "e5293878ac6accadee7a69043a9f271969653101a0e96640b9210ea7ee282fb2", "extra_info": null, "node_info": {"start": 1132061, "end": 1135141}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "966e6733-f83d-4ee7-937c-2ffdca0e457f", "3": "3a41fbb6-9d23-4fc9-9354-8dbd1b58e097"}}, "__type__": "1"}, "3a41fbb6-9d23-4fc9-9354-8dbd1b58e097": {"__data__": {"text": "an unknown stdin file type. This error is usually an indication of a bug within Node.js itself, although it is possible for user code to trigger it.\n\n\nERR_UNKNOWN_STREAM_TYPE#\nAdded in: v8.0.0Removed in: v11.7.0\nAn attempt was made to launch a Node.js process with an unknown stdout or stderr file type. This error is usually an indication of a bug within Node.js itself, although it is possible for user code to trigger it.\n\n\nERR_V8BREAKITERATOR#\nThe V8 BreakIterator API was used but the full ICU data set is not installed.\n\n\nERR_VALUE_OUT_OF_RANGE#\nAdded in: v9.0.0Removed in: v10.0.0\nUsed when a given value is out of the accepted range.\n\n\nERR_VM_MODULE_NOT_LINKED#\nThe module must be successfully linked before instantiation.\n\n\nERR_VM_MODULE_LINKING_ERRORED#\nAdded in: v10.0.0Removed in: v18.1.0\nThe linker function returned a module for which linking has failed.\n\n\nERR_WORKER_UNSUPPORTED_EXTENSION#\nAdded in: v11.0.0Removed in: v16.9.0\nThe pathname used for the main script of a worker has an unknown file extension.\n\n\nERR_ZLIB_BINDING_CLOSED#\nAdded in: v9.0.0Removed in: v10.0.0\nUsed when an attempt is made to use a zlib object after it has already been closed.\n\n\nERR_CPU_USAGE#\nRemoved in: v15.0.0\nThe native call from process.cpuUsage could not be processed.\n\nEvents#\nStability: 2 - Stable\nSource Code: lib/events.js\n\nMuch of the Node.js core API is built around an idiomatic asynchronous event-driven architecture in which certain kinds of objects (called \"emitters\") emit named events that cause Function objects (\"listeners\") to be called.\n\nFor instance: a net.Server object emits an event each time a peer connects to it; a fs.ReadStream emits an event when the file is opened; a stream emits an event whenever data is available to be read.\n\nAll objects that emit events are instances of the EventEmitter class. These objects expose an eventEmitter.on() function that allows one or more functions to be attached to named events emitted by the object. Typically, event names are camel-cased strings but any valid JavaScript property key can be used.\n\nWhen the EventEmitter object emits an event, all of the functions attached to that specific event are called synchronously. Any values returned by the called listeners are ignored and discarded.\n\nThe following example shows a simple EventEmitter instance with a single listener. The eventEmitter.on() method is used to register listeners, while the eventEmitter.emit() method is used to trigger the event.\n\nimport { EventEmitter } from 'node:events';\n\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', () => {\n  console.log('an event occurred!');\n});\nmyEmitter.emit('event');\nPassing arguments and this to listeners#\nThe eventEmitter.emit() method allows an arbitrary set of arguments to be passed to the listener functions. Keep in mind that when an ordinary listener function is called, the standard this keyword is intentionally set to reference the EventEmitter instance to which the listener is attached.\n\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', function(a, b) {\n  console.log(a, b, this, this === myEmitter);\n  // Prints:\n  //   a b MyEmitter {\n  //     _events: [Object: null prototype] { event: [Function (anonymous)] },\n  //     _eventsCount: 1,\n  //     _maxListeners: undefined,\n  // ", "doc_id": "3a41fbb6-9d23-4fc9-9354-8dbd1b58e097", "embedding": null, "doc_hash": "a392d55dc5076f813194e62feefc81d5062a60b90f8274213c08eea26909bd47", "extra_info": null, "node_info": {"start": 1135145, "end": 1138553}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "acaac298-8536-4918-a3b4-a04e74f7ba6a", "3": "614c096d-ee8b-42a5-a6d6-6e67f94d1902"}}, "__type__": "1"}, "614c096d-ee8b-42a5-a6d6-6e67f94d1902": {"__data__": {"text": "set of arguments to be passed to the listener functions. Keep in mind that when an ordinary listener function is called, the standard this keyword is intentionally set to reference the EventEmitter instance to which the listener is attached.\n\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', function(a, b) {\n  console.log(a, b, this, this === myEmitter);\n  // Prints:\n  //   a b MyEmitter {\n  //     _events: [Object: null prototype] { event: [Function (anonymous)] },\n  //     _eventsCount: 1,\n  //     _maxListeners: undefined,\n  //     [Symbol(kCapture)]: false\n  //   } true\n});\nmyEmitter.emit('event', 'a', 'b');\nIt is possible to use ES6 Arrow Functions as listeners, however, when doing so, the this keyword will no longer reference the EventEmitter instance:\n\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', (a, b) => {\n  console.log(a, b, this);\n  // Prints: a b {}\n});\nmyEmitter.emit('event', 'a', 'b');\nAsynchronous vs. synchronous#\nThe EventEmitter calls all listeners synchronously in the order in which they were registered. This ensures the proper sequencing of events and helps avoid race conditions and logic errors. When appropriate, listener functions can switch to an asynchronous mode of operation using the setImmediate() or process.nextTick() methods:\n\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', (a, b) => {\n  setImmediate(() => {\n    console.log('this happens asynchronously');\n  });\n});\nmyEmitter.emit('event', 'a', 'b');\nHandling events only once#\nWhen a listener is registered using the eventEmitter.on() method, that listener is invoked every time the named event is emitted.\n\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nlet m = 0;\nmyEmitter.on('event', () => {\n  console.log(++m);\n});\nmyEmitter.emit('event');\n// Prints: 1\nmyEmitter.emit('event');\n// Prints: 2\nUsing the eventEmitter.once() method, it is possible to register a listener that is called at most once for a particular event. Once the event is emitted, the listener is unregistered and then called.\n\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nlet m = 0;\nmyEmitter.once('event', () => {\n  console.log(++m);\n});\nmyEmitter.emit('event');\n// Prints: 1\nmyEmitter.emit('event');\n// Ignored\nError events#\nWhen an error occurs within an EventEmitter instance, the typical action is for an 'error' event to be emitted. These are treated as special cases within Node.js.\n\nIf an EventEmitter does not have at least one listener registered for the 'error' event, and an 'error' event is emitted, the error is thrown, a stack trace is printed, and the Node.js process exits.\n\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nmyEmitter.emit('error', new Error('whoops!'));\n// Throws and crashes Node.js\nTo guard against crashing the Node.js process the domain module can be used. (Note, however, that the", "doc_id": "614c096d-ee8b-42a5-a6d6-6e67f94d1902", "embedding": null, "doc_hash": "516069fab97d06acee30c69c9e286142c54cb993eda9cd9c5fc6aa8ef03972d7", "extra_info": null, "node_info": {"start": 1138571, "end": 1141858}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3a41fbb6-9d23-4fc9-9354-8dbd1b58e097", "3": "96f03475-68eb-42bb-ae51-c1a28e132d39"}}, "__type__": "1"}, "96f03475-68eb-42bb-ae51-c1a28e132d39": {"__data__": {"text": "Ignored\nError events#\nWhen an error occurs within an EventEmitter instance, the typical action is for an 'error' event to be emitted. These are treated as special cases within Node.js.\n\nIf an EventEmitter does not have at least one listener registered for the 'error' event, and an 'error' event is emitted, the error is thrown, a stack trace is printed, and the Node.js process exits.\n\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nmyEmitter.emit('error', new Error('whoops!'));\n// Throws and crashes Node.js\nTo guard against crashing the Node.js process the domain module can be used. (Note, however, that the node:domain module is deprecated.)\n\nAs a best practice, listeners should always be added for the 'error' events.\n\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nmyEmitter.on('error', (err) => {\n  console.error('whoops! there was an error');\n});\nmyEmitter.emit('error', new Error('whoops!'));\n// Prints: whoops! there was an error\nIt is possible to monitor 'error' events without consuming the emitted error by installing a listener using the symbol events.errorMonitor.\n\nimport { EventEmitter, errorMonitor } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on(errorMonitor, (err) => {\n  MyMonitoringTool.log(err);\n});\nmyEmitter.emit('error', new Error('whoops!'));\n// Still throws and crashes Node.js\nCapture rejections of promises#\nUsing async functions with event handlers is problematic, because it can lead to an unhandled rejection in case of a thrown exception:\n\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\nee.on('something', async (value) => {\n  throw new Error('kaboom');\n});\nThe captureRejections option in the EventEmitter constructor or the global setting change this behavior, installing a .then(undefined, handler) handler on the Promise. This handler routes the exception asynchronously to the Symbol.for('nodejs.rejection') method if there is one, or to 'error' event handler if there is none.\n\nimport { EventEmitter } from 'node:events';\nconst ee1 = new EventEmitter({ captureRejections: true });\nee1.on('something', async (value) => {\n  throw new Error('kaboom');\n});\n\nee1.on('error', console.log);\n\nconst ee2 = new EventEmitter({ captureRejections: true });\nee2.on('something', async (value) => {\n  throw new Error('kaboom');\n});\n\nee2[Symbol.for('nodejs.rejection')] = console.log;\nSetting events.captureRejections = true will change the default for all new instances of EventEmitter.\n\nimport { EventEmitter } from 'node:events';\n\nEventEmitter.captureRejections = true;\nconst ee1 = new EventEmitter();\nee1.on('something', async (value) => {\n  throw new Error('kaboom');\n});\n\nee1.on('error', console.log);\nThe 'error' events that are generated by the captureRejections behavior do not have a catch handler to avoid infinite error loops: the recommendation is to not use async functions as 'error' event handlers.\n\nClass: EventEmitter#\nHistory\nThe EventEmitter class is defined and exposed by the node:events module:\n\nimport { EventEmitter } from 'node:events';\nAll EventEmitters emit the event 'newListener' when new listeners are added and 'removeListener' when existing listeners are removed.\n\nIt supports the following option:\n\ncaptureRejections <boolean> It enables automatic capturing of promise rejection. Default: false.\nEvent: 'newListener'#\nAdded", "doc_id": "96f03475-68eb-42bb-ae51-c1a28e132d39", "embedding": null, "doc_hash": "8d9f1d5b49a4586e72ff4ef03744a6a68e0e093f518f508c4cf223b05c49464f", "extra_info": null, "node_info": {"start": 1141793, "end": 1145274}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "614c096d-ee8b-42a5-a6d6-6e67f94d1902", "3": "a146b8b2-1170-4eee-aec1-d1089e2353a4"}}, "__type__": "1"}, "a146b8b2-1170-4eee-aec1-d1089e2353a4": {"__data__": {"text": "=> {\n  throw new Error('kaboom');\n});\n\nee1.on('error', console.log);\nThe 'error' events that are generated by the captureRejections behavior do not have a catch handler to avoid infinite error loops: the recommendation is to not use async functions as 'error' event handlers.\n\nClass: EventEmitter#\nHistory\nThe EventEmitter class is defined and exposed by the node:events module:\n\nimport { EventEmitter } from 'node:events';\nAll EventEmitters emit the event 'newListener' when new listeners are added and 'removeListener' when existing listeners are removed.\n\nIt supports the following option:\n\ncaptureRejections <boolean> It enables automatic capturing of promise rejection. Default: false.\nEvent: 'newListener'#\nAdded in: v0.1.26\neventName <string> | <symbol> The name of the event being listened for\nlistener <Function> The event handler function\nThe EventEmitter instance will emit its own 'newListener' event before a listener is added to its internal array of listeners.\n\nListeners registered for the 'newListener' event are passed the event name and a reference to the listener being added.\n\nThe fact that the event is triggered before adding the listener has a subtle but important side effect: any additional listeners registered to the same name within the 'newListener' callback are inserted before the listener that is in the process of being added.\n\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\n// Only do this once so we don't loop forever\nmyEmitter.once('newListener', (event, listener) => {\n  if (event === 'event') {\n    // Insert a new listener in front\n    myEmitter.on('event', () => {\n      console.log('B');\n    });\n  }\n});\nmyEmitter.on('event', () => {\n  console.log('A');\n});\nmyEmitter.emit('event');\n// Prints:\n//   B\n//   A\nEvent: 'removeListener'#\nHistory\neventName <string> | <symbol> The event name\nlistener <Function> The event handler function\nThe 'removeListener' event is emitted after the listener is removed.\n\nemitter.addListener(eventName, listener)#\nAdded in: v0.1.26\neventName <string> | <symbol>\nlistener <Function>\nAlias for emitter.on(eventName, listener).\n\nemitter.emit(eventName[, ...args])#\nAdded in: v0.1.26\neventName <string> | <symbol>\n...args <any>\nReturns: <boolean>\nSynchronously calls each of the listeners registered for the event named eventName, in the order they were registered, passing the supplied arguments to each.\n\nReturns true if the event had listeners, false otherwise.\n\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third", "doc_id": "a146b8b2-1170-4eee-aec1-d1089e2353a4", "embedding": null, "doc_hash": "762308bbc55f89a74ab1dc216c63c0cb31e58104b9ea40641f2aaab98407d857", "extra_info": null, "node_info": {"start": 1145231, "end": 1148611}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "96f03475-68eb-42bb-ae51-c1a28e132d39", "3": "eff74c63-8c07-4779-84b4-6d0320c20e17"}}, "__type__": "1"}, "eff74c63-8c07-4779-84b4-6d0320c20e17": {"__data__": {"text": " console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\nemitter.eventNames()#\nAdded in: v6.0.0\nReturns: <Array>\nReturns an array listing the events for which the emitter has registered listeners. The values in the array are strings or Symbols.\n\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\nemitter.getMaxListeners()#\nAdded in: v1.0.0\nReturns: <integer>\nReturns the current max listener value for the EventEmitter which is either set by emitter.setMaxListeners(n) or defaults to events.defaultMaxListeners.\n\nemitter.listenerCount(eventName[, listener])#\nHistory\neventName <string> | <symbol> The name of the event being listened for\nlistener <Function> The event handler function\nReturns: <integer>\nReturns the number of listeners listening for the event named eventName. If listener is provided, it will return how many times the listener is found in the list of the listeners of the event.\n\nemitter.listeners(eventName)#\nHistory\neventName <string> | <symbol>\nReturns: <Function[]>\nReturns a copy of the array of listeners for the event named eventName.\n\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\nemitter.off(eventName, listener)#\nAdded in: v10.0.0\neventName <string> | <symbol>\nlistener <Function>\nReturns: <EventEmitter>\nAlias for emitter.removeListener().\n\nemitter.on(eventName, listener)#\nAdded in: v0.1.101\neventName <string> | <symbol> The name of the event.\nlistener <Function> The callback function\nReturns: <EventEmitter>\nAdds the listener function to the end of the listeners array for the event named eventName. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of eventName and listener will result in the listener being added, and called, multiple times.\n\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The emitter.prependListener() method can be used as an alternative to add the event listener to the beginning of the listeners array.\n\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\nemitter.once(eventName, listener)#\nAdded in: v0.3.0\neventName <string> | <symbol> The name of the", "doc_id": "eff74c63-8c07-4779-84b4-6d0320c20e17", "embedding": null, "doc_hash": "93836a720880e8c41dae80639323652844bb867724f074a50f8e68fcb1c8e559", "extra_info": null, "node_info": {"start": 1148718, "end": 1151999}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a146b8b2-1170-4eee-aec1-d1089e2353a4", "3": "139f3598-4977-49ef-aa94-1442cff29fc3"}}, "__type__": "1"}, "139f3598-4977-49ef-aa94-1442cff29fc3": {"__data__": {"text": "connected!');\n});\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The emitter.prependListener() method can be used as an alternative to add the event listener to the beginning of the listeners array.\n\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\nemitter.once(eventName, listener)#\nAdded in: v0.3.0\neventName <string> | <symbol> The name of the event.\nlistener <Function> The callback function\nReturns: <EventEmitter>\nAdds a one-time listener function for the event named eventName. The next time eventName is triggered, this listener is removed and then invoked.\n\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The emitter.prependOnceListener() method can be used as an alternative to add the event listener to the beginning of the listeners array.\n\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\nemitter.prependListener(eventName, listener)#\nAdded in: v6.0.0\neventName <string> | <symbol> The name of the event.\nlistener <Function> The callback function\nReturns: <EventEmitter>\nAdds the listener function to the beginning of the listeners array for the event named eventName. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of eventName and listener will result in the listener being added, and called, multiple times.\n\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nemitter.prependOnceListener(eventName, listener)#\nAdded in: v6.0.0\neventName <string> | <symbol> The name of the event.\nlistener <Function> The callback function\nReturns: <EventEmitter>\nAdds a one-time listener function for the event named eventName to the beginning of the listeners array. The next time eventName is triggered, this listener is removed, and then invoked.\n\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nemitter.removeAllListeners([eventName])#\nAdded in: v0.1.26\neventName <string> | <symbol>\nReturns: <EventEmitter>\nRemoves all listeners, or those of the specified eventName.\n\nIt is bad practice to remove listeners added elsewhere in the code, particularly when the EventEmitter instance was created by some other component or module (e.g. sockets or file streams).\n\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nemitter.removeListener(eventName, listener)#\nAdded in: v0.1.26\neventName <string> | <symbol>\nlistener <Function>\nReturns: <EventEmitter>\nRemoves the specified listener from the listener array for the event named eventName.\n\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\nremoveListener() will remove, at most, one instance of a listener from the", "doc_id": "139f3598-4977-49ef-aa94-1442cff29fc3", "embedding": null, "doc_hash": "6bb1b451196ef644ddf1793e47f8f6a3465e647677ef76dddeb39bf8c4307c27", "extra_info": null, "node_info": {"start": 1151997, "end": 1155507}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "eff74c63-8c07-4779-84b4-6d0320c20e17", "3": "e344776e-9f79-4bf4-99cc-e69be6618399"}}, "__type__": "1"}, "e344776e-9f79-4bf4-99cc-e69be6618399": {"__data__": {"text": "the specified eventName.\n\nIt is bad practice to remove listeners added elsewhere in the code, particularly when the EventEmitter instance was created by some other component or module (e.g. sockets or file streams).\n\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nemitter.removeListener(eventName, listener)#\nAdded in: v0.1.26\neventName <string> | <symbol>\nlistener <Function>\nReturns: <EventEmitter>\nRemoves the specified listener from the listener array for the event named eventName.\n\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\nremoveListener() will remove, at most, one instance of a listener from the listener array. If any single listener has been added multiple times to the listener array for the specified eventName, then removeListener() must be called multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the time of emitting are called in order. This implies that any removeListener() or removeAllListeners() calls after emitting and before the last listener finishes execution will not remove them from emit() in progress. Subsequent events behave as expected.\n\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\nBecause listeners are managed using an internal array, calling this will change the position indices of any listener registered after the listener being removed. This will not impact the order in which listeners are called, but it means that any copies of the listener array as returned by the emitter.listeners() method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single event (as in the example below), removeListener() will remove the most recently added instance. In the example the once('ping') listener is removed:\n\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nemitter.setMaxListeners(n)#\nAdded in: v0.3.5\nn <integer>\nReturns: <EventEmitter>\nBy default EventEmitters will print a warning if more than 10 listeners are added for a particular event. This is a useful default that helps finding memory leaks. The emitter.setMaxListeners() method allows the limit to be modified for this specific EventEmitter instance. The value can be set to Infinity (or 0) to indicate an unlimited number of listeners.\n\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nemitter.rawListeners(eventName)#\nAdded in: v9.4.0\neventName <string> | <symbol>\nReturns: <Function[]>\nReturns a copy of the array of listeners for the event named eventName, including any wrappers (such as those created by .once()).\n\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log", "doc_id": "e344776e-9f79-4bf4-99cc-e69be6618399", "embedding": null, "doc_hash": "1f2758e3dd2688074a1070a107154267cff263658463756e7d2a66ece67c3bce", "extra_info": null, "node_info": {"start": 1155374, "end": 1159024}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "139f3598-4977-49ef-aa94-1442cff29fc3", "3": "2275f63e-d055-408f-b699-89d31d74a22e"}}, "__type__": "1"}, "2275f63e-d055-408f-b699-89d31d74a22e": {"__data__": {"text": "are added for a particular event. This is a useful default that helps finding memory leaks. The emitter.setMaxListeners() method allows the limit to be modified for this specific EventEmitter instance. The value can be set to Infinity (or 0) to indicate an unlimited number of listeners.\n\nReturns a reference to the EventEmitter, so that calls can be chained.\n\nemitter.rawListeners(eventName)#\nAdded in: v9.4.0\neventName <string> | <symbol>\nReturns: <Function[]>\nReturns a copy of the array of listeners for the event named eventName, including any wrappers (such as those created by .once()).\n\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\nemitter[Symbol.for('nodejs.rejection')](err, eventName[, ...args])#\nHistory\nerr Error\neventName <string> | <symbol>\n...args <any>\nThe Symbol.for('nodejs.rejection') method is called in case a promise rejection happens when emitting an event and captureRejections is enabled on the emitter. It is possible to use events.captureRejectionSymbol in place of Symbol.for('nodejs.rejection').\n\nimport { EventEmitter, captureRejectionSymbol } from 'node:events';\n\nclass MyClass extends EventEmitter {\n  constructor() {\n    super({ captureRejections: true });\n  }\n\n  [captureRejectionSymbol](err, event, ...args) {\n    console.log('rejection happened for', event, 'with', err, ...args);\n    this.destroy(err);\n  }\n\n  destroy(err) {\n    // Tear the resource down here.\n  }\n}\nevents.defaultMaxListeners#\nAdded in: v0.11.2\nBy default, a maximum of 10 listeners can be registered for any single event. This limit can be changed for individual EventEmitter instances using the emitter.setMaxListeners(n) method. To change the default for all EventEmitter instances, the events.defaultMaxListeners property can be used. If this value is not a positive number, a RangeError is thrown.\n\nTake caution when setting the events.defaultMaxListeners because the change affects all EventEmitter instances, including those created before the change is made. However, calling emitter.setMaxListeners(n) still has precedence over events.defaultMaxListeners.\n\nThis is not a hard limit. The EventEmitter instance will allow more listeners to be added but will output a trace warning to stderr indicating that a \"possible EventEmitter memory leak\" has been detected. For any single EventEmitter, the emitter.getMaxListeners() and emitter.setMaxListeners() methods can be used to temporarily avoid this warning:\n\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\nThe --trace-warnings command-line flag can be used to display the stack trace for such", "doc_id": "2275f63e-d055-408f-b699-89d31d74a22e", "embedding": null, "doc_hash": "6a0e48f8da42eaae7cc1e86666c1dd47752fec01225ddaae9ed518d070b9468b", "extra_info": null, "node_info": {"start": 1159066, "end": 1162565}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e344776e-9f79-4bf4-99cc-e69be6618399", "3": "b939fcc8-4dec-4b68-a6b0-a8f1355e9bad"}}, "__type__": "1"}, "b939fcc8-4dec-4b68-a6b0-a8f1355e9bad": {"__data__": {"text": "is not a hard limit. The EventEmitter instance will allow more listeners to be added but will output a trace warning to stderr indicating that a \"possible EventEmitter memory leak\" has been detected. For any single EventEmitter, the emitter.getMaxListeners() and emitter.setMaxListeners() methods can be used to temporarily avoid this warning:\n\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\nThe --trace-warnings command-line flag can be used to display the stack trace for such warnings.\n\nThe emitted warning can be inspected with process.on('warning') and will have the additional emitter, type, and count properties, referring to the event emitter instance, the event's name and the number of attached listeners, respectively. Its name property is set to 'MaxListenersExceededWarning'.\n\nevents.errorMonitor#\nAdded in: v13.6.0, v12.17.0\nThis symbol shall be used to install a listener for only monitoring 'error' events. Listeners installed using this symbol are called before the regular 'error' listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an 'error' event is emitted. Therefore, the process will still crash if no regular 'error' listener is installed.\n\nevents.getEventListeners(emitterOrTarget, eventName)#\nAdded in: v15.2.0, v14.17.0\nemitterOrTarget <EventEmitter> | <EventTarget>\neventName <string> | <symbol>\nReturns: <Function[]>\nReturns a copy of the array of listeners for the event named eventName.\n\nFor EventEmitters this behaves exactly the same as calling .listeners on the emitter.\n\nFor EventTargets this is the only way to get the event listeners for the event target. This is useful for debugging and diagnostic purposes.\n\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\nevents.once(emitter, name[, options])#\nHistory\nemitter <EventEmitter>\nname <string>\noptions <Object>\nsignal <AbortSignal> Can be used to cancel waiting for the event.\nReturns: <Promise>\nCreates a Promise that is fulfilled when the EventEmitter emits the given event or that is rejected if the EventEmitter emits 'error' while waiting. The Promise will resolve with an array of all the arguments emitted to the given event.\n\nThis method is intentionally generic and works with the web platform EventTarget interface, which has no special 'error' event semantics and does not listen to the 'error' event.\n\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\nThe special handling of the 'error' event is only used when events.once() is used to wait", "doc_id": "b939fcc8-4dec-4b68-a6b0-a8f1355e9bad", "embedding": null, "doc_hash": "cc695cfcb7fbd486278feb8f32e72d71a92ed556df039b1bdbdf13e04ff04be4", "extra_info": null, "node_info": {"start": 1162587, "end": 1166063}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2275f63e-d055-408f-b699-89d31d74a22e", "3": "461b2e71-e613-4bfb-9686-884e8e8de780"}}, "__type__": "1"}, "461b2e71-e613-4bfb-9686-884e8e8de780": {"__data__": {"text": "no special 'error' event semantics and does not listen to the 'error' event.\n\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\nThe special handling of the 'error' event is only used when events.once() is used to wait for another event. If events.once() is used to wait for the 'error' event itself, then it is treated as any other kind of event without special handling:\n\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\nAn <AbortSignal> can be used to cancel waiting for the event:\n\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\nAwaiting multiple events emitted on process.nextTick()#\nThere is an edge case worth noting when using the events.once() function to await multiple events emitted on in the same batch of process.nextTick() operations, or whenever multiple events are emitted synchronously. Specifically, because the process.nextTick() queue is drained before the Promise microtask queue, and because EventEmitter emits all events synchronously, it is possible for events.once() to miss an event.\n\nimport { EventEmitter, once } from 'node:events';\nimport process from 'node:process';\n\nconst myEE = new EventEmitter();\n\nasync function foo() {\n  await once(myEE, 'bar');\n  console.log('bar');\n\n  // This Promise will never resolve because the 'foo' event will\n  // have already been emitted before the Promise is created.\n  await once(myEE, 'foo');\n  console.log('foo');\n}\n\nprocess.nextTick(() => {\n  myEE.emit('bar');\n  myEE.emit('foo');\n});\n\nfoo().then(() => console.log('done'));\nTo catch both events, create each of the Promises before awaiting either of them, then it becomes possible to use Promise.all(), Promise.race(), or Promise.allSettled():\n\nimport { EventEmitter, once } from 'node:events';\nimport process from 'node:process';\n\nconst myEE = new EventEmitter();\n\nasync function foo() {\n  await Promise.all([once(myEE, 'bar'), once(myEE, 'foo')]);\n  console.log('foo', 'bar');\n}\n\nprocess.nextTick(() => {\n  myEE.emit('bar');\n  myEE.emit('foo');\n});\n\nfoo().then(() =>", "doc_id": "461b2e71-e613-4bfb-9686-884e8e8de780", "embedding": null, "doc_hash": "e9e29324a6cce220c40445b3817be5bd990f9ee78f52f594f697b0a13b74d050", "extra_info": null, "node_info": {"start": 1166149, "end": 1169262}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b939fcc8-4dec-4b68-a6b0-a8f1355e9bad", "3": "7716f1bb-4ada-4f1e-9538-5cef95f89ae3"}}, "__type__": "1"}, "7716f1bb-4ada-4f1e-9538-5cef95f89ae3": {"__data__": {"text": " myEE.emit('foo');\n});\n\nfoo().then(() => console.log('done'));\nTo catch both events, create each of the Promises before awaiting either of them, then it becomes possible to use Promise.all(), Promise.race(), or Promise.allSettled():\n\nimport { EventEmitter, once } from 'node:events';\nimport process from 'node:process';\n\nconst myEE = new EventEmitter();\n\nasync function foo() {\n  await Promise.all([once(myEE, 'bar'), once(myEE, 'foo')]);\n  console.log('foo', 'bar');\n}\n\nprocess.nextTick(() => {\n  myEE.emit('bar');\n  myEE.emit('foo');\n});\n\nfoo().then(() => console.log('done'));\nevents.captureRejections#\nHistory\nValue: <boolean>\n\nChange the default captureRejections option on all new EventEmitter objects.\n\nevents.captureRejectionSymbol#\nHistory\nValue: Symbol.for('nodejs.rejection')\n\nSee how to write a custom rejection handler.\n\nevents.listenerCount(emitter, eventName)#\nAdded in: v0.9.12Deprecated since: v3.2.0\nStability: 0 - Deprecated: Use emitter.listenerCount() instead.\nemitter <EventEmitter> The emitter to query\neventName <string> | <symbol> The event name\nA class method that returns the number of listeners for the given eventName registered on the given emitter.\n\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\nevents.on(emitter, eventName[, options])#\nAdded in: v13.6.0, v12.16.0\nemitter <EventEmitter>\neventName <string> | <symbol> The name of the event being listened for\noptions <Object>\nsignal <AbortSignal> Can be used to cancel awaiting events.\nReturns: <AsyncIterator> that iterates eventName events emitted by the emitter\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\nReturns an AsyncIterator that iterates eventName events. It will throw if the EventEmitter emits 'error'. It removes all listeners when exiting the loop. The value returned by each iteration is an array composed of the emitted event arguments.\n\nAn <AbortSignal> can be used to cancel waiting on events:\n\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable", "doc_id": "7716f1bb-4ada-4f1e-9538-5cef95f89ae3", "embedding": null, "doc_hash": "0f5957960e36c313a7c36ad2d5959f3deacf10df87e52c788a2f4a87bd8c1319", "extra_info": null, "node_info": {"start": 1169280, "end": 1172381}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "461b2e71-e613-4bfb-9686-884e8e8de780", "3": "c57e729b-238c-4491-8e8d-5013581cc40b"}}, "__type__": "1"}, "c57e729b-238c-4491-8e8d-5013581cc40b": {"__data__": {"text": "} from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\nevents.setMaxListeners(n[, ...eventTargets])#\nAdded in: v15.4.0\nn <number> A non-negative number. The maximum number of listeners per EventTarget event.\n...eventsTargets <EventTarget[]> | <EventEmitter[]> Zero or more <EventTarget> or <EventEmitter> instances. If none are specified, n is set as the default max for all newly created <EventTarget> and <EventEmitter> objects.\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\nClass: events.EventEmitterAsyncResource extends EventEmitter#\nAdded in: v17.4.0, v16.14.0\nIntegrates EventEmitter with <AsyncResource> for EventEmitters that require manual async tracking. Specifically, all events emitted by instances of events.EventEmitterAsyncResource will run within its async context.\n\nimport { EventEmitterAsyncResource, EventEmitter } from 'node:events';\nimport { notStrictEqual, strictEqual } from 'node:assert';\nimport { executionAsyncId, triggerAsyncId } from 'node:async_hooks';\n\n// Async tracking tooling will identify this as 'Q'.\nconst ee1 = new EventEmitterAsyncResource({ name: 'Q' });\n\n// 'foo' listeners will run in the EventEmitters async context.\nee1.on('foo', () => {\n  strictEqual(executionAsyncId(), ee1.asyncId);\n  strictEqual(triggerAsyncId(), ee1.triggerAsyncId);\n});\n\nconst ee2 = new EventEmitter();\n\n// 'foo' listeners on ordinary EventEmitters that do not track async\n// context, however, run in the same async context as the emit().\nee2.on('foo', () => {\n  notStrictEqual(executionAsyncId(), ee2.asyncId);\n  notStrictEqual(triggerAsyncId(), ee2.triggerAsyncId);\n});\n\nPromise.resolve().then(() => {\n  ee1.emit('foo');\n  ee2.emit('foo');\n});\nThe EventEmitterAsyncResource class has the same methods and takes the same options as EventEmitter and AsyncResource themselves.\n\nnew events.EventEmitterAsyncResource([options])#\noptions <Object>\ncaptureRejections <boolean> It enables automatic capturing of promise rejection. Default: false.\nname <string> The type of async event. Default:: new.target.name.\ntriggerAsyncId <number> The ID of the execution context that created this async event. Default: executionAsyncId().\nrequireManualDestroy <boolean> If set to true, disables emitDestroy when the object is garbage collected. This usually does not need to be set (even if emitDestroy is called manually), unless the resource's asyncId is retrieved and the sensitive API's emitDestroy is called with it. When set to false, the emitDestroy call on garbage collection will only take place if there is at least one active destroy hook. Default: false.\neventemitterasyncresource.asyncId#\nType: <number> The unique asyncId assigned to the", "doc_id": "c57e729b-238c-4491-8e8d-5013581cc40b", "embedding": null, "doc_hash": "6354dafc4d8f3d4d3d283f59ffdea1fabe73face2af9ae75270f4b4e80f1fcc2", "extra_info": null, "node_info": {"start": 1172429, "end": 1175754}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7716f1bb-4ada-4f1e-9538-5cef95f89ae3", "3": "f39f727d-c0b5-43d5-b629-a48a6332a2c2"}}, "__type__": "1"}, "f39f727d-c0b5-43d5-b629-a48a6332a2c2": {"__data__": {"text": "<boolean> It enables automatic capturing of promise rejection. Default: false.\nname <string> The type of async event. Default:: new.target.name.\ntriggerAsyncId <number> The ID of the execution context that created this async event. Default: executionAsyncId().\nrequireManualDestroy <boolean> If set to true, disables emitDestroy when the object is garbage collected. This usually does not need to be set (even if emitDestroy is called manually), unless the resource's asyncId is retrieved and the sensitive API's emitDestroy is called with it. When set to false, the emitDestroy call on garbage collection will only take place if there is at least one active destroy hook. Default: false.\neventemitterasyncresource.asyncId#\nType: <number> The unique asyncId assigned to the resource.\neventemitterasyncresource.asyncResource#\nType: The underlying <AsyncResource>.\nThe returned AsyncResource object has an additional eventEmitter property that provides a reference to this EventEmitterAsyncResource.\n\neventemitterasyncresource.emitDestroy()#\nCall all destroy hooks. This should only ever be called once. An error will be thrown if it is called more than once. This must be manually called. If the resource is left to be collected by the GC then the destroy hooks will never be called.\n\neventemitterasyncresource.triggerAsyncId#\nType: <number> The same triggerAsyncId that is passed to the AsyncResource constructor.\n\nEventTarget and Event API#\nHistory\nThe EventTarget and Event objects are a Node.js-specific implementation of the EventTarget Web API that are exposed by some Node.js core APIs.\n\nconst target = new EventTarget();\n\ntarget.addEventListener('foo', (event) => {\n  console.log('foo event happened!');\n});\nNode.js EventTarget vs. DOM EventTarget#\nThere are two key differences between the Node.js EventTarget and the EventTarget Web API:\n\nWhereas DOM EventTarget instances may be hierarchical, there is no concept of hierarchy and event propagation in Node.js. That is, an event dispatched to an EventTarget does not propagate through a hierarchy of nested target objects that may each have their own set of handlers for the event.\nIn the Node.js EventTarget, if an event listener is an async function or returns a Promise, and the returned Promise rejects, the rejection is automatically captured and handled the same way as a listener that throws synchronously (see EventTarget error handling for details).\nNodeEventTarget vs. EventEmitter#\nThe NodeEventTarget object implements a modified subset of the EventEmitter API that allows it to closely emulate an EventEmitter in certain situations. A NodeEventTarget is not an instance of EventEmitter and cannot be used in place of an EventEmitter in most cases.\n\nUnlike EventEmitter, any given listener can be registered at most once per event type. Attempts to register a listener multiple times are ignored.\nThe NodeEventTarget does not emulate the full EventEmitter API. Specifically the prependListener(), prependOnceListener(), rawListeners(), and errorMonitor APIs are not emulated. The 'newListener' and 'removeListener' events will also not be emitted.\nThe NodeEventTarget does not implement any special default behavior for events with type 'error'.\nThe NodeEventTarget supports EventListener objects as well as functions as handlers for all event types.\nEvent listener#\nEvent listeners registered for an event type may either be JavaScript functions or objects with a handleEvent property whose value is a function.\n\nIn either case, the handler function is invoked with the event argument passed to the eventTarget.dispatchEvent() function.\n\nAsync functions may be used as event listeners. If an async handler function rejects, the rejection is captured and handled as described in EventTarget error handling.\n\nAn error thrown by one handler function does not prevent the other handlers from being invoked.\n\nThe return value of a handler function is ignored.\n\nHandlers are always invoked in the order they were added.\n\nHandler functions may mutate the event object.\n\nfunction handler1(event) {\n  console.log(event.type);  // Prints 'foo'\n  event.a =", "doc_id": "f39f727d-c0b5-43d5-b629-a48a6332a2c2", "embedding": null, "doc_hash": "1f6f39f0558fccc7cfb9a8695c801ae99c20b55d29b50216a7f540cc48847a17", "extra_info": null, "node_info": {"start": 1175539, "end": 1179656}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c57e729b-238c-4491-8e8d-5013581cc40b", "3": "5fe01758-0676-4c31-bbd4-ff1f6f2e9b7c"}}, "__type__": "1"}, "5fe01758-0676-4c31-bbd4-ff1f6f2e9b7c": {"__data__": {"text": "types.\nEvent listener#\nEvent listeners registered for an event type may either be JavaScript functions or objects with a handleEvent property whose value is a function.\n\nIn either case, the handler function is invoked with the event argument passed to the eventTarget.dispatchEvent() function.\n\nAsync functions may be used as event listeners. If an async handler function rejects, the rejection is captured and handled as described in EventTarget error handling.\n\nAn error thrown by one handler function does not prevent the other handlers from being invoked.\n\nThe return value of a handler function is ignored.\n\nHandlers are always invoked in the order they were added.\n\nHandler functions may mutate the event object.\n\nfunction handler1(event) {\n  console.log(event.type);  // Prints 'foo'\n  event.a = 1;\n}\n\nasync function handler2(event) {\n  console.log(event.type);  // Prints 'foo'\n  console.log(event.a);  // Prints 1\n}\n\nconst handler3 = {\n  handleEvent(event) {\n    console.log(event.type);  // Prints 'foo'\n  },\n};\n\nconst handler4 = {\n  async handleEvent(event) {\n    console.log(event.type);  // Prints 'foo'\n  },\n};\n\nconst target = new EventTarget();\n\ntarget.addEventListener('foo', handler1);\ntarget.addEventListener('foo', handler2);\ntarget.addEventListener('foo', handler3);\ntarget.addEventListener('foo', handler4, { once: true });\nEventTarget error handling#\nWhen a registered event listener throws (or returns a Promise that rejects), by default the error is treated as an uncaught exception on process.nextTick(). This means uncaught exceptions in EventTargets will terminate the Node.js process by default.\n\nThrowing within an event listener will not stop the other registered handlers from being invoked.\n\nThe EventTarget does not implement any special default handling for 'error' type events like EventEmitter.\n\nCurrently errors are first forwarded to the process.on('error') event before reaching process.on('uncaughtException'). This behavior is deprecated and will change in a future release to align EventTarget with other Node.js APIs. Any code relying on the process.on('error') event should be aligned with the new behavior.\n\nClass: Event#\nHistory\nThe Event object is an adaptation of the Event Web API. Instances are created internally by Node.js.\n\nevent.bubbles#\nAdded in: v14.5.0\nType: <boolean> Always returns false.\nThis is not used in Node.js and is provided purely for completeness.\n\nevent.cancelBubble#\nAdded in: v14.5.0\nStability: 3 - Legacy: Use event.stopPropagation() instead.\nType: <boolean>\nAlias for event.stopPropagation() if set to true. This is not used in Node.js and is provided purely for completeness.\n\nevent.cancelable#\nAdded in: v14.5.0\nType: <boolean> True if the event was created with the cancelable option.\nevent.composed#\nAdded in: v14.5.0\nType: <boolean> Always returns false.\nThis is not used in Node.js and is provided purely for completeness.\n\nevent.composedPath()#\nAdded in: v14.5.0\nReturns an array containing the current EventTarget as the only entry or empty if the event is not being dispatched. This is not used in Node.js and is provided purely for completeness.\n\nevent.currentTarget#\nAdded in: v14.5.0\nType: <EventTarget> The EventTarget dispatching the event.\nAlias for event.target.\n\nevent.defaultPrevented#\nAdded in: v14.5.0\nType: <boolean>\nIs true if cancelable is true and event.preventDefault() has been called.\n\nevent.eventPhase#\nAdded in: v14.5.0\nType: <number> Returns 0 while an event is not being dispatched, 2 while it is being dispatched.\nThis is not used in", "doc_id": "5fe01758-0676-4c31-bbd4-ff1f6f2e9b7c", "embedding": null, "doc_hash": "c79169ca0155d41d49e6a95002aef5f92a7aa8497d0670dfdf402361535eb814", "extra_info": null, "node_info": {"start": 1179636, "end": 1183175}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f39f727d-c0b5-43d5-b629-a48a6332a2c2", "3": "c6ee86c8-bb8c-43d1-b62b-0bb8b62dc2a8"}}, "__type__": "1"}, "c6ee86c8-bb8c-43d1-b62b-0bb8b62dc2a8": {"__data__": {"text": "in: v14.5.0\nReturns an array containing the current EventTarget as the only entry or empty if the event is not being dispatched. This is not used in Node.js and is provided purely for completeness.\n\nevent.currentTarget#\nAdded in: v14.5.0\nType: <EventTarget> The EventTarget dispatching the event.\nAlias for event.target.\n\nevent.defaultPrevented#\nAdded in: v14.5.0\nType: <boolean>\nIs true if cancelable is true and event.preventDefault() has been called.\n\nevent.eventPhase#\nAdded in: v14.5.0\nType: <number> Returns 0 while an event is not being dispatched, 2 while it is being dispatched.\nThis is not used in Node.js and is provided purely for completeness.\n\nevent.isTrusted#\nAdded in: v14.5.0\nType: <boolean>\nThe <AbortSignal> \"abort\" event is emitted with isTrusted set to true. The value is false in all other cases.\n\nevent.preventDefault()#\nAdded in: v14.5.0\nSets the defaultPrevented property to true if cancelable is true.\n\nevent.returnValue#\nAdded in: v14.5.0\nStability: 3 - Legacy: Use event.defaultPrevented instead.\nType: <boolean> True if the event has not been canceled.\nThe value of event.returnValue is always the opposite of event.defaultPrevented. This is not used in Node.js and is provided purely for completeness.\n\nevent.srcElement#\nAdded in: v14.5.0\nStability: 3 - Legacy: Use event.target instead.\nType: <EventTarget> The EventTarget dispatching the event.\nAlias for event.target.\n\nevent.stopImmediatePropagation()#\nAdded in: v14.5.0\nStops the invocation of event listeners after the current one completes.\n\nevent.stopPropagation()#\nAdded in: v14.5.0\nThis is not used in Node.js and is provided purely for completeness.\n\nevent.target#\nAdded in: v14.5.0\nType: <EventTarget> The EventTarget dispatching the event.\nevent.timeStamp#\nAdded in: v14.5.0\nType: <number>\nThe millisecond timestamp when the Event object was created.\n\nevent.type#\nAdded in: v14.5.0\nType: <string>\nThe event type identifier.\n\nClass: EventTarget#\nHistory\neventTarget.addEventListener(type, listener[, options])#\nHistory\ntype <string>\nlistener <Function> | <EventListener>\noptions <Object>\nonce <boolean> When true, the listener is automatically removed when it is first invoked. Default: false.\npassive <boolean> When true, serves as a hint that the listener will not call the Event object's preventDefault() method. Default: false.\ncapture <boolean> Not directly used by Node.js. Added for API completeness. Default: false.\nsignal <AbortSignal> The listener will be removed when the given AbortSignal object's abort() method is called.\nAdds a new handler for the type event. Any given listener is added only once per type and per capture option value.\n\nIf the once option is true, the listener is removed after the next time a type event is dispatched.\n\nThe capture option is not used by Node.js in any functional way other than tracking registered event listeners per the EventTarget specification. Specifically, the capture option is used as part of the key when registering a listener. Any individual listener may be added once with capture = false, and once with capture = true.\n\nfunction handler(event) {}\n\nconst target = new EventTarget();\ntarget.addEventListener('foo', handler, { capture: true });  // first\ntarget.addEventListener('foo', handler, { capture: false }); // second\n\n// Removes the second instance of handler\ntarget.removeEventListener('foo', handler);\n\n// Removes the first instance of handler\ntarget.removeEventListener('foo', handler, { capture: true", "doc_id": "c6ee86c8-bb8c-43d1-b62b-0bb8b62dc2a8", "embedding": null, "doc_hash": "c24572973028d465744a62dc928afb949ba41b9a868598c953b0ff79134ab180", "extra_info": null, "node_info": {"start": 1183335, "end": 1186800}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5fe01758-0676-4c31-bbd4-ff1f6f2e9b7c", "3": "e303c308-b8f7-47a2-ae93-cdbcc490215a"}}, "__type__": "1"}, "e303c308-b8f7-47a2-ae93-cdbcc490215a": {"__data__": {"text": "once option is true, the listener is removed after the next time a type event is dispatched.\n\nThe capture option is not used by Node.js in any functional way other than tracking registered event listeners per the EventTarget specification. Specifically, the capture option is used as part of the key when registering a listener. Any individual listener may be added once with capture = false, and once with capture = true.\n\nfunction handler(event) {}\n\nconst target = new EventTarget();\ntarget.addEventListener('foo', handler, { capture: true });  // first\ntarget.addEventListener('foo', handler, { capture: false }); // second\n\n// Removes the second instance of handler\ntarget.removeEventListener('foo', handler);\n\n// Removes the first instance of handler\ntarget.removeEventListener('foo', handler, { capture: true });\neventTarget.dispatchEvent(event)#\nAdded in: v14.5.0\nevent <Event>\nReturns: <boolean> true if either event's cancelable attribute value is false or its preventDefault() method was not invoked, otherwise false.\nDispatches the event to the list of handlers for event.type.\n\nThe registered event listeners is synchronously invoked in the order they were registered.\n\neventTarget.removeEventListener(type, listener[, options])#\nAdded in: v14.5.0\ntype <string>\nlistener <Function> | <EventListener>\noptions <Object>\ncapture <boolean>\nRemoves the listener from the list of handlers for event type.\n\nClass: CustomEvent#\nAdded in: v18.7.0\nStability: 1 - Experimental.\nExtends: <Event>\nThe CustomEvent object is an adaptation of the CustomEvent Web API. Instances are created internally by Node.js.\n\nevent.detail#\nAdded in: v18.7.0\nStability: 1 - Experimental.\nType: <any> Returns custom data passed when initializing.\nRead-only.\n\nClass: NodeEventTarget#\nAdded in: v14.5.0\nExtends: <EventTarget>\nThe NodeEventTarget is a Node.js-specific extension to EventTarget that emulates a subset of the EventEmitter API.\n\nnodeEventTarget.addListener(type, listener)#\nAdded in: v14.5.0\ntype <string>\n\nlistener <Function> | <EventListener>\n\nReturns: <EventTarget> this\n\nNode.js-specific extension to the EventTarget class that emulates the equivalent EventEmitter API. The only difference between addListener() and addEventListener() is that addListener() will return a reference to the EventTarget.\n\nnodeEventTarget.emit(type, arg)#\nAdded in: v15.2.0\ntype <string>\narg <any>\nReturns: <boolean> true if event listeners registered for the type exist, otherwise false.\nNode.js-specific extension to the EventTarget class that dispatches the arg to the list of handlers for type.\n\nnodeEventTarget.eventNames()#\nAdded in: v14.5.0\nReturns: <string[]>\nNode.js-specific extension to the EventTarget class that returns an array of event type names for which event listeners are registered.\n\nnodeEventTarget.listenerCount(type)#\nAdded in: v14.5.0\ntype <string>\n\nReturns: <number>\n\nNode.js-specific extension to the EventTarget class that returns the number of event listeners registered for the type.\n\nnodeEventTarget.setMaxListeners(n)#\nAdded in: v14.5.0\nn <number>\nNode.js-specific extension to the EventTarget class that sets the number of max event listeners as n.\n\nnodeEventTarget.getMaxListeners()#\nAdded in: v14.5.0\nReturns: <number>\nNode.js-specific extension to the EventTarget class that returns the number of max event listeners.\n\nnodeEventTarget.off(type, listener[, options])#\nAdded in: v14.5.0\ntype <string>\n\nlistener <Function> | <EventListener>\n\noptions <Object>\n\ncapture <boolean>\nReturns: <EventTarget> this\n\nNode.js-specific alias for", "doc_id": "e303c308-b8f7-47a2-ae93-cdbcc490215a", "embedding": null, "doc_hash": "9333b774188d1688354574c9b4356ddc360f5ea0062272cca91b06b5a4b5d249", "extra_info": null, "node_info": {"start": 1186624, "end": 1190165}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c6ee86c8-bb8c-43d1-b62b-0bb8b62dc2a8", "3": "055bb1fa-2915-4dbe-9136-0316c4af0f35"}}, "__type__": "1"}, "055bb1fa-2915-4dbe-9136-0316c4af0f35": {"__data__": {"text": "to the EventTarget class that returns the number of event listeners registered for the type.\n\nnodeEventTarget.setMaxListeners(n)#\nAdded in: v14.5.0\nn <number>\nNode.js-specific extension to the EventTarget class that sets the number of max event listeners as n.\n\nnodeEventTarget.getMaxListeners()#\nAdded in: v14.5.0\nReturns: <number>\nNode.js-specific extension to the EventTarget class that returns the number of max event listeners.\n\nnodeEventTarget.off(type, listener[, options])#\nAdded in: v14.5.0\ntype <string>\n\nlistener <Function> | <EventListener>\n\noptions <Object>\n\ncapture <boolean>\nReturns: <EventTarget> this\n\nNode.js-specific alias for eventTarget.removeEventListener().\n\nnodeEventTarget.on(type, listener)#\nAdded in: v14.5.0\ntype <string>\n\nlistener <Function> | <EventListener>\n\nReturns: <EventTarget> this\n\nNode.js-specific alias for eventTarget.addEventListener().\n\nnodeEventTarget.once(type, listener)#\nAdded in: v14.5.0\ntype <string>\n\nlistener <Function> | <EventListener>\n\nReturns: <EventTarget> this\n\nNode.js-specific extension to the EventTarget class that adds a once listener for the given event type. This is equivalent to calling on with the once option set to true.\n\nnodeEventTarget.removeAllListeners([type])#\nAdded in: v14.5.0\ntype <string>\n\nReturns: <EventTarget> this\n\nNode.js-specific extension to the EventTarget class. If type is specified, removes all registered listeners for type, otherwise removes all registered listeners.\n\nnodeEventTarget.removeListener(type, listener[, options])#\nAdded in: v14.5.0\ntype <string>\n\nlistener <Function> | <EventListener>\n\noptions <Object>\n\ncapture <boolean>\nReturns: <EventTarget> this\n\nNode.js-specific extension to the EventTarget class that removes the listener for the given type. The only difference between removeListener() and removeEventListener() is that removeListener() will return a reference to the EventTarget.\n\nFile system#\nStability: 2 - Stable\nSource Code: lib/fs.js\n\nThe node:fs module enables interacting with the file system in a way modeled on standard POSIX functions.\n\nTo use the promise-based APIs:\n\nimport * as fs from 'node:fs/promises';\nTo use the callback and sync APIs:\n\nimport * as fs from 'node:fs';\nAll file system operations have synchronous, callback, and promise-based forms, and are accessible using both CommonJS syntax and ES6 Modules (ESM).\n\nPromise example#\nPromise-based operations return a promise that is fulfilled when the asynchronous operation is complete.\n\nimport { unlink } from 'node:fs/promises';\n\ntry {\n  await unlink('/tmp/hello');\n  console.log('successfully deleted /tmp/hello');\n} catch (error) {\n  console.error('there was an error:', error.message);\n}\nCallback example#\nThe callback form takes a completion callback function as its last argument and invokes the operation asynchronously. The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception. If the operation is completed successfully, then the first argument is null or undefined.\n\nimport { unlink } from 'node:fs';\n\nunlink('/tmp/hello', (err) => {\n  if (err) throw err;\n  console.log('successfully deleted /tmp/hello');\n});\nThe callback-based versions of the node:fs module APIs are preferable over the use of the promise APIs when maximal performance (both in terms of execution time and memory allocation) is required.\n\nSynchronous example#\nThe synchronous APIs block the Node.js event loop and further JavaScript execution until the operation is complete. Exceptions are thrown immediately and can be handled using try\u2026catch, or can be allowed to", "doc_id": "055bb1fa-2915-4dbe-9136-0316c4af0f35", "embedding": null, "doc_hash": "d1f171f9759f398b85e2eab362655d760dd6f72ba397da7c44e35b06ef91130d", "extra_info": null, "node_info": {"start": 1190290, "end": 1193892}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e303c308-b8f7-47a2-ae93-cdbcc490215a", "3": "ceefb54c-b8e7-4674-8f4d-48e3e58edf04"}}, "__type__": "1"}, "ceefb54c-b8e7-4674-8f4d-48e3e58edf04": {"__data__": {"text": "The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception. If the operation is completed successfully, then the first argument is null or undefined.\n\nimport { unlink } from 'node:fs';\n\nunlink('/tmp/hello', (err) => {\n  if (err) throw err;\n  console.log('successfully deleted /tmp/hello');\n});\nThe callback-based versions of the node:fs module APIs are preferable over the use of the promise APIs when maximal performance (both in terms of execution time and memory allocation) is required.\n\nSynchronous example#\nThe synchronous APIs block the Node.js event loop and further JavaScript execution until the operation is complete. Exceptions are thrown immediately and can be handled using try\u2026catch, or can be allowed to bubble up.\n\nimport { unlinkSync } from 'node:fs';\n\ntry {\n  unlinkSync('/tmp/hello');\n  console.log('successfully deleted /tmp/hello');\n} catch (err) {\n  // handle the error\n}\nPromises API#\nHistory\nThe fs/promises API provides asynchronous file system methods that return promises.\n\nThe promise APIs use the underlying Node.js threadpool to perform file system operations off the event loop thread. These operations are not synchronized or threadsafe. Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.\n\nClass: FileHandle#\nAdded in: v10.0.0\nA <FileHandle> object is an object wrapper for a numeric file descriptor.\n\nInstances of the <FileHandle> object are created by the fsPromises.open() method.\n\nAll <FileHandle> objects are <EventEmitter>s.\n\nIf a <FileHandle> is not closed using the filehandle.close() method, it will try to automatically close the file descriptor and emit a process warning, helping to prevent memory leaks. Please do not rely on this behavior because it can be unreliable and the file may not be closed. Instead, always explicitly close <FileHandle>s. Node.js may change this behavior in the future.\n\nEvent: 'close'#\nAdded in: v15.4.0\nThe 'close' event is emitted when the <FileHandle> has been closed and can no longer be used.\n\nfilehandle.appendFile(data[, options])#\nHistory\ndata <string> | <Buffer> | <TypedArray> | <DataView> | <AsyncIterable> | <Iterable> | <Stream>\noptions <Object> | <string>\nencoding <string> | <null> Default: 'utf8'\nReturns: <Promise> Fulfills with undefined upon success.\nAlias of filehandle.writeFile().\n\nWhen operating on file handles, the mode cannot be changed from what it was set to with fsPromises.open(). Therefore, this is equivalent to filehandle.writeFile().\n\nfilehandle.chmod(mode)#\nAdded in: v10.0.0\nmode <integer> the file mode bit mask.\nReturns: <Promise> Fulfills with undefined upon success.\nModifies the permissions on the file. See chmod(2).\n\nfilehandle.chown(uid, gid)#\nAdded in: v10.0.0\nuid <integer> The file's new owner's user id.\ngid <integer> The file's new group's group id.\nReturns: <Promise> Fulfills with undefined upon success.\nChanges the ownership of the file. A wrapper for chown(2).\n\nfilehandle.close()#\nAdded in: v10.0.0\nReturns: <Promise> Fulfills with undefined upon success.\nCloses the file handle after waiting for any pending operation on the handle to complete.\n\nimport { open } from 'node:fs/promises';\n\nlet filehandle;\ntry {\n  filehandle = await open('thefile.txt', 'r');\n} finally {\n  await filehandle?.close();\n}\nfilehandle.createReadStream([options])#\nAdded in: v16.11.0\noptions <Object>\nencoding <string> Default: null\nautoClose <boolean> Default: true\nemitClose", "doc_id": "ceefb54c-b8e7-4674-8f4d-48e3e58edf04", "embedding": null, "doc_hash": "9cb8a1ba97f0f2c15d1142599e26c615b1775fd6e57080541ff9184a4122c280", "extra_info": null, "node_info": {"start": 1193800, "end": 1197316}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "055bb1fa-2915-4dbe-9136-0316c4af0f35", "3": "8367b34e-81e4-4fa3-8df2-e67be3829231"}}, "__type__": "1"}, "8367b34e-81e4-4fa3-8df2-e67be3829231": {"__data__": {"text": "new group's group id.\nReturns: <Promise> Fulfills with undefined upon success.\nChanges the ownership of the file. A wrapper for chown(2).\n\nfilehandle.close()#\nAdded in: v10.0.0\nReturns: <Promise> Fulfills with undefined upon success.\nCloses the file handle after waiting for any pending operation on the handle to complete.\n\nimport { open } from 'node:fs/promises';\n\nlet filehandle;\ntry {\n  filehandle = await open('thefile.txt', 'r');\n} finally {\n  await filehandle?.close();\n}\nfilehandle.createReadStream([options])#\nAdded in: v16.11.0\noptions <Object>\nencoding <string> Default: null\nautoClose <boolean> Default: true\nemitClose <boolean> Default: true\nstart <integer>\nend <integer> Default: Infinity\nhighWaterMark <integer> Default: 64 * 1024\nReturns: <fs.ReadStream>\nUnlike the 16 KiB default highWaterMark for a <stream.Readable>, the stream returned by this method has a default highWaterMark of 64 KiB.\n\noptions can include start and end values to read a range of bytes from the file instead of the entire file. Both start and end are inclusive and start counting at 0, allowed values are in the [0, Number.MAX_SAFE_INTEGER] range. If start is omitted or undefined, filehandle.createReadStream() reads sequentially from the current file position. The encoding can be any one of those accepted by <Buffer>.\n\nIf the FileHandle points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available. This can prevent the process from exiting and the stream from closing naturally.\n\nBy default, the stream will emit a 'close' event after it has been destroyed. Set the emitClose option to false to change this behavior.\n\nimport { open } from 'node:fs/promises';\n\nconst fd = await open('/dev/input/event0');\n// Create a stream from some character device.\nconst stream = fd.createReadStream();\nsetTimeout(() => {\n  stream.close(); // This may not close the stream.\n  // Artificially marking end-of-stream, as if the underlying resource had\n  // indicated end-of-file by itself, allows the stream to close.\n  // This does not cancel pending read operations, and if there is such an\n  // operation, the process may still not be able to exit successfully\n  // until it finishes.\n  stream.push(null);\n  stream.read(0);\n}, 100);\nIf autoClose is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak. If autoClose is set to true (default behavior), on 'error' or 'end' the file descriptor will be closed automatically.\n\nAn example to read the last 10 bytes of a file which is 100 bytes long:\n\nimport { open } from 'node:fs/promises';\n\nconst fd = await open('sample.txt');\nfd.createReadStream({ start: 90, end: 99 });\nfilehandle.createWriteStream([options])#\nAdded in: v16.11.0\noptions <Object>\nencoding <string> Default: 'utf8'\nautoClose <boolean> Default: true\nemitClose <boolean> Default: true\nstart <integer>\nReturns: <fs.WriteStream>\noptions may also include a start option to allow writing data at some position past the beginning of the file, allowed values are in the [0, Number.MAX_SAFE_INTEGER] range. Modifying a file rather than replacing it may require the flags open option to be set to r+ rather than the default r. The encoding can be any one of those accepted by <Buffer>.\n\nIf autoClose is set to true (default behavior) on 'error' or 'finish' the file descriptor will be closed automatically. If autoClose is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file", "doc_id": "8367b34e-81e4-4fa3-8df2-e67be3829231", "embedding": null, "doc_hash": "a267287f5b151abf8986418dca4389eabdb3c2f2807837a756d3d1c855e3f2b1", "extra_info": null, "node_info": {"start": 1197430, "end": 1201104}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ceefb54c-b8e7-4674-8f4d-48e3e58edf04", "3": "5bf36000-054b-4d18-bd1a-9be490774a25"}}, "__type__": "1"}, "5bf36000-054b-4d18-bd1a-9be490774a25": {"__data__": {"text": "'utf8'\nautoClose <boolean> Default: true\nemitClose <boolean> Default: true\nstart <integer>\nReturns: <fs.WriteStream>\noptions may also include a start option to allow writing data at some position past the beginning of the file, allowed values are in the [0, Number.MAX_SAFE_INTEGER] range. Modifying a file rather than replacing it may require the flags open option to be set to r+ rather than the default r. The encoding can be any one of those accepted by <Buffer>.\n\nIf autoClose is set to true (default behavior) on 'error' or 'finish' the file descriptor will be closed automatically. If autoClose is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak.\n\nBy default, the stream will emit a 'close' event after it has been destroyed. Set the emitClose option to false to change this behavior.\n\nfilehandle.datasync()#\nAdded in: v10.0.0\nReturns: <Promise> Fulfills with undefined upon success.\nForces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details.\n\nUnlike filehandle.sync this method does not flush modified metadata.\n\nfilehandle.fd#\nAdded in: v10.0.0\n<number> The numeric file descriptor managed by the <FileHandle> object.\nfilehandle.read(buffer, offset, length, position)#\nAdded in: v10.0.0\nbuffer <Buffer> | <TypedArray> | <DataView> A buffer that will be filled with the file data read.\noffset <integer> The location in the buffer at which to start filling.\nlength <integer> The number of bytes to read.\nposition <integer> | <null> The location where to begin reading data from the file. If null, data will be read from the current file position, and the position will be updated. If position is an integer, the current file position will remain unchanged.\nReturns: <Promise> Fulfills upon success with an object with two properties:\nbytesRead <integer> The number of bytes read\nbuffer <Buffer> | <TypedArray> | <DataView> A reference to the passed in buffer argument.\nReads data from the file and stores that in the given buffer.\n\nIf the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.\n\nfilehandle.read([options])#\nAdded in: v13.11.0, v12.17.0\noptions <Object>\nbuffer <Buffer> | <TypedArray> | <DataView> A buffer that will be filled with the file data read. Default: Buffer.alloc(16384)\noffset <integer> The location in the buffer at which to start filling. Default: 0\nlength <integer> The number of bytes to read. Default: buffer.byteLength - offset\nposition <integer> | <null> The location where to begin reading data from the file. If null, data will be read from the current file position, and the position will be updated. If position is an integer, the current file position will remain unchanged. Default:: null\nReturns: <Promise> Fulfills upon success with an object with two properties:\nbytesRead <integer> The number of bytes read\nbuffer <Buffer> | <TypedArray> | <DataView> A reference to the passed in buffer argument.\nReads data from the file and stores that in the given buffer.\n\nIf the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.\n\nfilehandle.read(buffer[, options])#\nAdded in: v18.2.0\nbuffer <Buffer> | <TypedArray> | <DataView> A buffer that will be filled with the file data read.\noptions <Object>\noffset <integer> The location in the buffer at which to start filling. Default: 0\nlength <integer> The number of bytes to read. Default: buffer.byteLength - offset\nposition <integer> The location where to begin reading data from the file. If null, data will be read from the current file position, and the position will be updated. If position is an integer, the current", "doc_id": "5bf36000-054b-4d18-bd1a-9be490774a25", "embedding": null, "doc_hash": "862141271f68c9f7c8a975cd902b376a4b5f9631d3c8d9c35cb3c71e938bef45", "extra_info": null, "node_info": {"start": 1201025, "end": 1204882}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8367b34e-81e4-4fa3-8df2-e67be3829231", "3": "35bd914c-f1d1-42c6-a872-a6a87bc7e150"}}, "__type__": "1"}, "35bd914c-f1d1-42c6-a872-a6a87bc7e150": {"__data__": {"text": "| <DataView> A reference to the passed in buffer argument.\nReads data from the file and stores that in the given buffer.\n\nIf the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.\n\nfilehandle.read(buffer[, options])#\nAdded in: v18.2.0\nbuffer <Buffer> | <TypedArray> | <DataView> A buffer that will be filled with the file data read.\noptions <Object>\noffset <integer> The location in the buffer at which to start filling. Default: 0\nlength <integer> The number of bytes to read. Default: buffer.byteLength - offset\nposition <integer> The location where to begin reading data from the file. If null, data will be read from the current file position, and the position will be updated. If position is an integer, the current file position will remain unchanged. Default:: null\nReturns: <Promise> Fulfills upon success with an object with two properties:\nbytesRead <integer> The number of bytes read\nbuffer <Buffer> | <TypedArray> | <DataView> A reference to the passed in buffer argument.\nReads data from the file and stores that in the given buffer.\n\nIf the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.\n\nfilehandle.readableWebStream()#\nAdded in: v17.0.0\nStability: 1 - Experimental\nReturns: <ReadableStream>\nReturns a ReadableStream that may be used to read the files data.\n\nAn error will be thrown if this method is called more than once or is called after the FileHandle is closed or closing.\n\nimport {\n  open,\n} from 'node:fs/promises';\n\nconst file = await open('./some/file/to/read');\n\nfor await (const chunk of file.readableWebStream())\n  console.log(chunk);\n\nawait file.close();\nWhile the ReadableStream will read the file to completion, it will not close the FileHandle automatically. User code must still call the fileHandle.close() method.\n\nfilehandle.readFile(options)#\nAdded in: v10.0.0\noptions <Object> | <string>\nencoding <string> | <null> Default: null\nsignal <AbortSignal> allows aborting an in-progress readFile\nReturns: <Promise> Fulfills upon a successful read with the contents of the file. If no encoding is specified (using options.encoding), the data is returned as a <Buffer> object. Otherwise, the data will be a string.\nAsynchronously reads the entire contents of a file.\n\nIf options is a string, then it specifies the encoding.\n\nThe <FileHandle> has to support reading.\n\nIf one or more filehandle.read() calls are made on a file handle and then a filehandle.readFile() call is made, the data will be read from the current position till the end of the file. It doesn't always read from the beginning of the file.\n\nfilehandle.readLines([options])#\nAdded in: v18.11.0\noptions <Object>\nencoding <string> Default: null\nautoClose <boolean> Default: true\nemitClose <boolean> Default: true\nstart <integer>\nend <integer> Default: Infinity\nhighWaterMark <integer> Default: 64 * 1024\nReturns: <readline.InterfaceConstructor>\nConvenience method to create a readline interface and stream over the file. See filehandle.createReadStream() for the options.\n\nimport { open } from 'node:fs/promises';\n\nconst file = await open('./some/file/to/read');\n\nfor await (const line of file.readLines()) {\n  console.log(line);\n}\nfilehandle.readv(buffers[, position])#\nAdded in: v13.13.0, v12.17.0\nbuffers <Buffer[]> | <TypedArray[]> | <DataView[]>\nposition <integer> | <null> The offset from the beginning of the file where the data should be read from. If position is not a number, the data will be read from the current position. Default: null\nReturns: <Promise> Fulfills upon success an object containing two properties:\nbytesRead", "doc_id": "35bd914c-f1d1-42c6-a872-a6a87bc7e150", "embedding": null, "doc_hash": "45c19b385800ecbc49f14bf6c4177718ae2ad46f11c8fdd6b146548376f8b252", "extra_info": null, "node_info": {"start": 1204873, "end": 1208507}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5bf36000-054b-4d18-bd1a-9be490774a25", "3": "09fefd4f-f00e-4d65-b345-cb679948c22f"}}, "__type__": "1"}, "09fefd4f-f00e-4d65-b345-cb679948c22f": {"__data__": {"text": "a readline interface and stream over the file. See filehandle.createReadStream() for the options.\n\nimport { open } from 'node:fs/promises';\n\nconst file = await open('./some/file/to/read');\n\nfor await (const line of file.readLines()) {\n  console.log(line);\n}\nfilehandle.readv(buffers[, position])#\nAdded in: v13.13.0, v12.17.0\nbuffers <Buffer[]> | <TypedArray[]> | <DataView[]>\nposition <integer> | <null> The offset from the beginning of the file where the data should be read from. If position is not a number, the data will be read from the current position. Default: null\nReturns: <Promise> Fulfills upon success an object containing two properties:\nbytesRead <integer> the number of bytes read\nbuffers <Buffer[]> | <TypedArray[]> | <DataView[]> property containing a reference to the buffers input.\nRead from a file and write to an array of <ArrayBufferView>s\n\nfilehandle.stat([options])#\nHistory\noptions <Object>\nbigint <boolean> Whether the numeric values in the returned <fs.Stats> object should be bigint. Default: false.\nReturns: <Promise> Fulfills with an <fs.Stats> for the file.\nfilehandle.sync()#\nAdded in: v10.0.0\nReturns: <Promise> Fulfills with undefined upon success.\nRequest that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail.\n\nfilehandle.truncate(len)#\nAdded in: v10.0.0\nlen <integer> Default: 0\nReturns: <Promise> Fulfills with undefined upon success.\nTruncates the file.\n\nIf the file was larger than len bytes, only the first len bytes will be retained in the file.\n\nThe following example retains only the first four bytes of the file:\n\nimport { open } from 'node:fs/promises';\n\nlet filehandle = null;\ntry {\n  filehandle = await open('temp.txt', 'r+');\n  await filehandle.truncate(4);\n} finally {\n  await filehandle?.close();\n}\nIf the file previously was shorter than len bytes, it is extended, and the extended part is filled with null bytes ('\\0'):\n\nIf len is negative then 0 will be used.\n\nfilehandle.utimes(atime, mtime)#\nAdded in: v10.0.0\natime <number> | <string> | <Date>\nmtime <number> | <string> | <Date>\nReturns: <Promise>\nChange the file system timestamps of the object referenced by the <FileHandle> then resolves the promise with no arguments upon success.\n\nfilehandle.write(buffer, offset[, length[, position]])#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView>\noffset <integer> The start position from within buffer where the data to write begins.\nlength <integer> The number of bytes from buffer to write. Default: buffer.byteLength - offset\nposition <integer> | <null> The offset from the beginning of the file where the data from buffer should be written. If position is not a number, the data will be written at the current position. See the POSIX pwrite(2) documentation for more detail. Default: null\nReturns: <Promise>\nWrite buffer to the file.\n\nThe promise is resolved with an object containing two properties:\n\nbytesWritten <integer> the number of bytes written\nbuffer <Buffer> | <TypedArray> | <DataView> a reference to the buffer written.\nIt is unsafe to use filehandle.write() multiple times on the same file without waiting for the promise to be resolved (or rejected). For this scenario, use filehandle.createWriteStream().\n\nOn Linux, positional writes do not work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.\n\nfilehandle.write(buffer[, options])#\nAdded in:", "doc_id": "09fefd4f-f00e-4d65-b345-cb679948c22f", "embedding": null, "doc_hash": "747e708949b8b308a58c3b2100e52f465676fd8f6dc1574ddb7c9d568aca8fc5", "extra_info": null, "node_info": {"start": 1208581, "end": 1212132}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "35bd914c-f1d1-42c6-a872-a6a87bc7e150", "3": "944ddace-f5fd-455a-afb2-c6bf3ac16459"}}, "__type__": "1"}, "944ddace-f5fd-455a-afb2-c6bf3ac16459": {"__data__": {"text": "a number, the data will be written at the current position. See the POSIX pwrite(2) documentation for more detail. Default: null\nReturns: <Promise>\nWrite buffer to the file.\n\nThe promise is resolved with an object containing two properties:\n\nbytesWritten <integer> the number of bytes written\nbuffer <Buffer> | <TypedArray> | <DataView> a reference to the buffer written.\nIt is unsafe to use filehandle.write() multiple times on the same file without waiting for the promise to be resolved (or rejected). For this scenario, use filehandle.createWriteStream().\n\nOn Linux, positional writes do not work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.\n\nfilehandle.write(buffer[, options])#\nAdded in: v18.3.0\nbuffer <Buffer> | <TypedArray> | <DataView>\noptions <Object>\noffset <integer> Default: 0\nlength <integer> Default: buffer.byteLength - offset\nposition <integer> Default: null\nReturns: <Promise>\nWrite buffer to the file.\n\nSimilar to the above filehandle.write function, this version takes an optional options object. If no options object is specified, it will default with the above values.\n\nfilehandle.write(string[, position[, encoding]])#\nHistory\nstring <string>\nposition <integer> | <null> The offset from the beginning of the file where the data from string should be written. If position is not a number the data will be written at the current position. See the POSIX pwrite(2) documentation for more detail. Default: null\nencoding <string> The expected string encoding. Default: 'utf8'\nReturns: <Promise>\nWrite string to the file. If string is not a string, the promise is rejected with an error.\n\nThe promise is resolved with an object containing two properties:\n\nbytesWritten <integer> the number of bytes written\nbuffer <string> a reference to the string written.\nIt is unsafe to use filehandle.write() multiple times on the same file without waiting for the promise to be resolved (or rejected). For this scenario, use filehandle.createWriteStream().\n\nOn Linux, positional writes do not work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.\n\nfilehandle.writeFile(data, options)\nHistory\ndata <string> | <Buffer> | <TypedArray> | <DataView> | <AsyncIterable> | <Iterable> | <Stream>\noptions <Object> | <string>\nencoding <string> | <null> The expected character encoding when data is a string. Default: 'utf8'\nReturns: <Promise>\nAsynchronously writes data to a file, replacing the file if it already exists. data can be a string, a buffer, an <AsyncIterable>, or an <Iterable> object. The promise is resolved with no arguments upon success.\n\nIf options is a string, then it specifies the encoding.\n\nThe <FileHandle> has to support writing.\n\nIt is unsafe to use filehandle.writeFile() multiple times on the same file without waiting for the promise to be resolved (or rejected).\n\nIf one or more filehandle.write() calls are made on a file handle and then a filehandle.writeFile() call is made, the data will be written from the current position till the end of the file. It doesn't always write from the beginning of the file.\n\nfilehandle.writev(buffers[, position])#\nAdded in: v12.9.0\nbuffers <Buffer[]> | <TypedArray[]> | <DataView[]>\nposition <integer> | <null> The offset from the beginning of the file where the data from buffers should be written. If position is not a number, the data will be written at the current position. Default: null\nReturns: <Promise>\nWrite an array of <ArrayBufferView>s to the file.\n\nThe promise is resolved with an object containing a two properties:\n\nbytesWritten <integer> the number of bytes written\nbuffers <Buffer[]> | <TypedArray[]> | <DataView[]> a reference to the buffers input.\nIt is unsafe to call", "doc_id": "944ddace-f5fd-455a-afb2-c6bf3ac16459", "embedding": null, "doc_hash": "99297b15680cf8201074cf32ec11912cd10942ab6eff4cc57f67c118b75569d6", "extra_info": null, "node_info": {"start": 1212042, "end": 1215864}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "09fefd4f-f00e-4d65-b345-cb679948c22f", "3": "419146ad-b25a-463b-b655-7f8ad2955de9"}}, "__type__": "1"}, "419146ad-b25a-463b-b655-7f8ad2955de9": {"__data__": {"text": "position till the end of the file. It doesn't always write from the beginning of the file.\n\nfilehandle.writev(buffers[, position])#\nAdded in: v12.9.0\nbuffers <Buffer[]> | <TypedArray[]> | <DataView[]>\nposition <integer> | <null> The offset from the beginning of the file where the data from buffers should be written. If position is not a number, the data will be written at the current position. Default: null\nReturns: <Promise>\nWrite an array of <ArrayBufferView>s to the file.\n\nThe promise is resolved with an object containing a two properties:\n\nbytesWritten <integer> the number of bytes written\nbuffers <Buffer[]> | <TypedArray[]> | <DataView[]> a reference to the buffers input.\nIt is unsafe to call writev() multiple times on the same file without waiting for the promise to be resolved (or rejected).\n\nOn Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.\n\nfsPromises.access(path[, mode])#\nAdded in: v10.0.0\npath <string> | <Buffer> | <URL>\nmode <integer> Default: fs.constants.F_OK\nReturns: <Promise> Fulfills with undefined upon success.\nTests a user's permissions for the file or directory specified by path. The mode argument is an optional integer that specifies the accessibility checks to be performed. mode should be either the value fs.constants.F_OK or a mask consisting of the bitwise OR of any of fs.constants.R_OK, fs.constants.W_OK, and fs.constants.X_OK (e.g. fs.constants.W_OK | fs.constants.R_OK). Check File access constants for possible values of mode.\n\nIf the accessibility check is successful, the promise is resolved with no value. If any of the accessibility checks fail, the promise is rejected with an <Error> object. The following example checks if the file /etc/passwd can be read and written by the current process.\n\nimport { access, constants } from 'node:fs/promises';\n\ntry {\n  await access('/etc/passwd', constants.R_OK | constants.W_OK);\n  console.log('can access');\n} catch {\n  console.error('cannot access');\n}\nUsing fsPromises.access() to check for the accessibility of a file before calling fsPromises.open() is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.\n\nfsPromises.appendFile(path, data[, options])#\nAdded in: v10.0.0\npath <string> | <Buffer> | <URL> | <FileHandle> filename or <FileHandle>\ndata <string> | <Buffer>\noptions <Object> | <string>\nencoding <string> | <null> Default: 'utf8'\nmode <integer> Default: 0o666\nflag <string> See support of file system flags. Default: 'a'.\nReturns: <Promise> Fulfills with undefined upon success.\nAsynchronously append data to a file, creating the file if it does not yet exist. data can be a string or a <Buffer>.\n\nIf options is a string, then it specifies the encoding.\n\nThe mode option only affects the newly created file. See fs.open() for more details.\n\nThe path may be specified as a <FileHandle> that has been opened for appending (using fsPromises.open()).\n\nfsPromises.chmod(path, mode)#\nAdded in: v10.0.0\npath <string> | <Buffer> | <URL>\nmode <string> | <integer>\nReturns: <Promise> Fulfills with undefined upon success.\nChanges the permissions of a file.\n\nfsPromises.chown(path, uid, gid)#\nAdded in: v10.0.0\npath <string> | <Buffer> | <URL>\nuid", "doc_id": "419146ad-b25a-463b-b655-7f8ad2955de9", "embedding": null, "doc_hash": "9104aecef805b80a1ef01965cb59c099c776a9e8faec985e19b86792a7e15761", "extra_info": null, "node_info": {"start": 1215929, "end": 1219391}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "944ddace-f5fd-455a-afb2-c6bf3ac16459", "3": "4dba5d65-5930-464a-a590-3b3ceb89205c"}}, "__type__": "1"}, "4dba5d65-5930-464a-a590-3b3ceb89205c": {"__data__": {"text": "file if it does not yet exist. data can be a string or a <Buffer>.\n\nIf options is a string, then it specifies the encoding.\n\nThe mode option only affects the newly created file. See fs.open() for more details.\n\nThe path may be specified as a <FileHandle> that has been opened for appending (using fsPromises.open()).\n\nfsPromises.chmod(path, mode)#\nAdded in: v10.0.0\npath <string> | <Buffer> | <URL>\nmode <string> | <integer>\nReturns: <Promise> Fulfills with undefined upon success.\nChanges the permissions of a file.\n\nfsPromises.chown(path, uid, gid)#\nAdded in: v10.0.0\npath <string> | <Buffer> | <URL>\nuid <integer>\ngid <integer>\nReturns: <Promise> Fulfills with undefined upon success.\nChanges the ownership of a file.\n\nfsPromises.copyFile(src, dest[, mode])#\nHistory\nsrc <string> | <Buffer> | <URL> source filename to copy\ndest <string> | <Buffer> | <URL> destination filename of the copy operation\nmode <integer> Optional modifiers that specify the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE) Default: 0.\nfs.constants.COPYFILE_EXCL: The copy operation will fail if dest already exists.\nfs.constants.COPYFILE_FICLONE: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used.\nfs.constants.COPYFILE_FICLONE_FORCE: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.\nReturns: <Promise> Fulfills with undefined upon success.\nAsynchronously copies src to dest. By default, dest is overwritten if it already exists.\n\nNo guarantees are made about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, an attempt will be made to remove the destination.\n\nimport { copyFile, constants } from 'node:fs/promises';\n\ntry {\n  await copyFile('source.txt', 'destination.txt');\n  console.log('source.txt was copied to destination.txt');\n} catch {\n  console.error('The file could not be copied');\n}\n\n// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\ntry {\n  await copyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL);\n  console.log('source.txt was copied to destination.txt');\n} catch {\n  console.error('The file could not be copied');\n}\nfsPromises.cp(src, dest[, options])#\nHistory\nStability: 1 - Experimental\nsrc <string> | <URL> source path to copy.\ndest <string> | <URL> destination path to copy to.\noptions <Object>\ndereference <boolean> dereference symlinks. Default: false.\nerrorOnExist <boolean> when force is false, and the destination exists, throw an error. Default: false.\nfilter <Function> Function to filter copied files/directories. Return true to copy the item, false to ignore it. Can also return a Promise that resolves to true or false Default: undefined.\nsrc <string> source path to copy.\ndest <string> destination path to copy to.\nReturns: <boolean> | <Promise>\nforce <boolean> overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists. Use the errorOnExist option to change this behavior. Default: true.\npreserveTimestamps <boolean> When true timestamps from src will be preserved. Default: false.\nrecursive", "doc_id": "4dba5d65-5930-464a-a590-3b3ceb89205c", "embedding": null, "doc_hash": "2d0831213783b82a984e6b3a26b3a3d8930b2e7a613a77de028c9539a9330b04", "extra_info": null, "node_info": {"start": 1219475, "end": 1222886}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "419146ad-b25a-463b-b655-7f8ad2955de9", "3": "62df63e2-57ac-4b3e-829b-4c9613097446"}}, "__type__": "1"}, "62df63e2-57ac-4b3e-829b-4c9613097446": {"__data__": {"text": "<boolean> dereference symlinks. Default: false.\nerrorOnExist <boolean> when force is false, and the destination exists, throw an error. Default: false.\nfilter <Function> Function to filter copied files/directories. Return true to copy the item, false to ignore it. Can also return a Promise that resolves to true or false Default: undefined.\nsrc <string> source path to copy.\ndest <string> destination path to copy to.\nReturns: <boolean> | <Promise>\nforce <boolean> overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists. Use the errorOnExist option to change this behavior. Default: true.\npreserveTimestamps <boolean> When true timestamps from src will be preserved. Default: false.\nrecursive <boolean> copy directories recursively Default: false\nverbatimSymlinks <boolean> When true, path resolution for symlinks will be skipped. Default: false\nReturns: <Promise> Fulfills with undefined upon success.\nAsynchronously copies the entire directory structure from src to dest, including subdirectories and files.\n\nWhen copying a directory to another directory, globs are not supported and behavior is similar to cp dir1/ dir2/.\n\nfsPromises.lchmod(path, mode)#\nDeprecated since: v10.0.0\npath <string> | <Buffer> | <URL>\nmode <integer>\nReturns: <Promise> Fulfills with undefined upon success.\nChanges the permissions on a symbolic link.\n\nThis method is only implemented on macOS.\n\nfsPromises.lchown(path, uid, gid)#\nHistory\npath <string> | <Buffer> | <URL>\nuid <integer>\ngid <integer>\nReturns: <Promise> Fulfills with undefined upon success.\nChanges the ownership on a symbolic link.\n\nfsPromises.lutimes(path, atime, mtime)#\nAdded in: v14.5.0, v12.19.0\npath <string> | <Buffer> | <URL>\natime <number> | <string> | <Date>\nmtime <number> | <string> | <Date>\nReturns: <Promise> Fulfills with undefined upon success.\nChanges the access and modification times of a file in the same way as fsPromises.utimes(), with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed.\n\nfsPromises.link(existingPath, newPath)#\nAdded in: v10.0.0\nexistingPath <string> | <Buffer> | <URL>\nnewPath <string> | <Buffer> | <URL>\nReturns: <Promise> Fulfills with undefined upon success.\nCreates a new link from the existingPath to the newPath. See the POSIX link(2) documentation for more detail.\n\nfsPromises.lstat(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nbigint <boolean> Whether the numeric values in the returned <fs.Stats> object should be bigint. Default: false.\nReturns: <Promise> Fulfills with the <fs.Stats> object for the given symbolic link path.\nEquivalent to fsPromises.stat() unless path refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to. Refer to the POSIX lstat(2) document for more detail.\n\nfsPromises.mkdir(path[, options])#\nAdded in: v10.0.0\npath <string> | <Buffer> | <URL>\noptions <Object> | <integer>\nrecursive <boolean> Default: false\nmode <string> | <integer> Not supported on Windows. Default: 0o777.\nReturns: <Promise> Upon success, fulfills with undefined if recursive is false, or the first directory path created if recursive is true.\nAsynchronously creates a directory.\n\nThe optional options argument can be an integer specifying mode (permission and sticky bits), or an object with a mode property and a recursive", "doc_id": "62df63e2-57ac-4b3e-829b-4c9613097446", "embedding": null, "doc_hash": "621e6cc4a318c8f4a5412d5d118f73114fc58e0fc044277b0e6b3d1ee82a127e", "extra_info": null, "node_info": {"start": 1222749, "end": 1226221}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4dba5d65-5930-464a-a590-3b3ceb89205c", "3": "47231615-789c-4320-ab83-040e644a3667"}}, "__type__": "1"}, "47231615-789c-4320-ab83-040e644a3667": {"__data__": {"text": "unless path refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to. Refer to the POSIX lstat(2) document for more detail.\n\nfsPromises.mkdir(path[, options])#\nAdded in: v10.0.0\npath <string> | <Buffer> | <URL>\noptions <Object> | <integer>\nrecursive <boolean> Default: false\nmode <string> | <integer> Not supported on Windows. Default: 0o777.\nReturns: <Promise> Upon success, fulfills with undefined if recursive is false, or the first directory path created if recursive is true.\nAsynchronously creates a directory.\n\nThe optional options argument can be an integer specifying mode (permission and sticky bits), or an object with a mode property and a recursive property indicating whether parent directories should be created. Calling fsPromises.mkdir() when path is a directory that exists results in a rejection only when recursive is false.\n\nimport { mkdir } from 'node:fs/promises';\n\ntry {\n  const projectFolder = new URL('./test/project/', import.meta.url);\n  const createDir = await mkdir(projectFolder, { recursive: true });\n\n  console.log(`created ${createDir}`);\n} catch (err) {\n  console.error(err.message);\n}\nfsPromises.mkdtemp(prefix[, options])#\nHistory\nprefix <string>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\nReturns: <Promise> Fulfills with a string containing the file system path of the newly created temporary directory.\nCreates a unique temporary directory. A unique directory name is generated by appending six random characters to the end of the provided prefix. Due to platform inconsistencies, avoid trailing X characters in prefix. Some platforms, notably the BSDs, can return more than six random characters, and replace trailing X characters in prefix with random characters.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use.\n\nimport { mkdtemp } from 'node:fs/promises';\nimport { join } from 'node:path';\nimport { tmpdir } from 'node:os';\n\ntry {\n  await mkdtemp(join(tmpdir(), 'foo-'));\n} catch (err) {\n  console.error(err);\n}\nThe fsPromises.mkdtemp() method will append the six randomly selected characters directly to the prefix string. For instance, given a directory /tmp, if the intention is to create a temporary directory within /tmp, the prefix must end with a trailing platform-specific path separator (require('node:path').sep).\n\nfsPromises.open(path, flags[, mode])#\nHistory\npath <string> | <Buffer> | <URL>\nflags <string> | <number> See support of file system flags. Default: 'r'.\nmode <string> | <integer> Sets the file mode (permission and sticky bits) if the file is created. Default: 0o666 (readable and writable)\nReturns: <Promise> Fulfills with a <FileHandle> object.\nOpens a <FileHandle>.\n\nRefer to the POSIX open(2) documentation for more detail.\n\nSome characters (< > : \" / \\ | ? *) are reserved under Windows as documented by Naming Files, Paths, and Namespaces. Under NTFS, if the filename contains a colon, Node.js will open a file system stream, as described by this MSDN page.\n\nfsPromises.opendir(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nencoding <string> | <null> Default: 'utf8'\nbufferSize <number> Number of directory entries that are buffered internally when reading from the directory. Higher values lead to better performance but higher memory usage. Default: 32\nReturns: <Promise> Fulfills with an <fs.Dir>.\nAsynchronously open a directory for iterative scanning. See the POSIX opendir(3) documentation for more detail.\n\nCreates an <fs.Dir>, which contains all further functions for reading", "doc_id": "47231615-789c-4320-ab83-040e644a3667", "embedding": null, "doc_hash": "7624ae7ef35c5728f35ee84150809d5790c6572875d89dad21198f8562312de6", "extra_info": null, "node_info": {"start": 1226279, "end": 1229931}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "62df63e2-57ac-4b3e-829b-4c9613097446", "3": "16821b12-e76a-4b5c-881f-a13d94332c92"}}, "__type__": "1"}, "16821b12-e76a-4b5c-881f-a13d94332c92": {"__data__": {"text": "documented by Naming Files, Paths, and Namespaces. Under NTFS, if the filename contains a colon, Node.js will open a file system stream, as described by this MSDN page.\n\nfsPromises.opendir(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nencoding <string> | <null> Default: 'utf8'\nbufferSize <number> Number of directory entries that are buffered internally when reading from the directory. Higher values lead to better performance but higher memory usage. Default: 32\nReturns: <Promise> Fulfills with an <fs.Dir>.\nAsynchronously open a directory for iterative scanning. See the POSIX opendir(3) documentation for more detail.\n\nCreates an <fs.Dir>, which contains all further functions for reading from and cleaning up the directory.\n\nThe encoding option sets the encoding for the path while opening the directory and subsequent read operations.\n\nExample using async iteration:\n\nimport { opendir } from 'node:fs/promises';\n\ntry {\n  const dir = await opendir('./');\n  for await (const dirent of dir)\n    console.log(dirent.name);\n} catch (err) {\n  console.error(err);\n}\nWhen using the async iterator, the <fs.Dir> object will be automatically closed after the iterator exits.\n\nfsPromises.readdir(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\nwithFileTypes <boolean> Default: false\nReturns: <Promise> Fulfills with an array of the names of the files in the directory excluding '.' and '..'.\nReads the contents of a directory.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the filenames. If the encoding is set to 'buffer', the filenames returned will be passed as <Buffer> objects.\n\nIf options.withFileTypes is set to true, the resolved array will contain <fs.Dirent> objects.\n\nimport { readdir } from 'node:fs/promises';\n\ntry {\n  const files = await readdir(path);\n  for (const file of files)\n    console.log(file);\n} catch (err) {\n  console.error(err);\n}\nfsPromises.readFile(path[, options])#\nHistory\npath <string> | <Buffer> | <URL> | <FileHandle> filename or FileHandle\noptions <Object> | <string>\nencoding <string> | <null> Default: null\nflag <string> See support of file system flags. Default: 'r'.\nsignal <AbortSignal> allows aborting an in-progress readFile\nReturns: <Promise> Fulfills with the contents of the file.\nAsynchronously reads the entire contents of a file.\n\nIf no encoding is specified (using options.encoding), the data is returned as a <Buffer> object. Otherwise, the data will be a string.\n\nIf options is a string, then it specifies the encoding.\n\nWhen the path is a directory, the behavior of fsPromises.readFile() is platform-specific. On macOS, Linux, and Windows, the promise will be rejected with an error. On FreeBSD, a representation of the directory's contents will be returned.\n\nAn example of reading a package.json file located in the same directory of the running code:\n\nimport { readFile } from 'node:fs/promises';\ntry {\n  const filePath = new URL('./package.json', import.meta.url);\n  const contents = await readFile(filePath, { encoding: 'utf8' });\n  console.log(contents);\n} catch (err) {\n  console.error(err.message);\n}\nIt is possible to abort an ongoing readFile using an <AbortSignal>. If a request is aborted the promise returned is rejected with an AbortError:\n\nimport { readFile } from 'node:fs/promises';\n\ntry", "doc_id": "16821b12-e76a-4b5c-881f-a13d94332c92", "embedding": null, "doc_hash": "b030e0cbf8abecf65415c3aa7b60bf8e4f0afdca934cd6595234cf45d3ec7b16", "extra_info": null, "node_info": {"start": 1229906, "end": 1233369}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "47231615-789c-4320-ab83-040e644a3667", "3": "faac8b5f-d032-42ef-9e44-a703fc9dc2a9"}}, "__type__": "1"}, "faac8b5f-d032-42ef-9e44-a703fc9dc2a9": {"__data__": {"text": "will be rejected with an error. On FreeBSD, a representation of the directory's contents will be returned.\n\nAn example of reading a package.json file located in the same directory of the running code:\n\nimport { readFile } from 'node:fs/promises';\ntry {\n  const filePath = new URL('./package.json', import.meta.url);\n  const contents = await readFile(filePath, { encoding: 'utf8' });\n  console.log(contents);\n} catch (err) {\n  console.error(err.message);\n}\nIt is possible to abort an ongoing readFile using an <AbortSignal>. If a request is aborted the promise returned is rejected with an AbortError:\n\nimport { readFile } from 'node:fs/promises';\n\ntry {\n  const controller = new AbortController();\n  const { signal } = controller;\n  const promise = readFile(fileName, { signal });\n\n  // Abort the request before the promise settles.\n  controller.abort();\n\n  await promise;\n} catch (err) {\n  // When a request is aborted - err is an AbortError\n  console.error(err);\n}\nAborting an ongoing request does not abort individual operating system requests but rather the internal buffering fs.readFile performs.\n\nAny specified <FileHandle> has to support reading.\n\nfsPromises.readlink(path[, options])#\nAdded in: v10.0.0\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\nReturns: <Promise> Fulfills with the linkString upon success.\nReads the contents of the symbolic link referred to by path. See the POSIX readlink(2) documentation for more detail. The promise is resolved with the linkString upon success.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the link path returned. If the encoding is set to 'buffer', the link path returned will be passed as a <Buffer> object.\n\nfsPromises.realpath(path[, options])#\nAdded in: v10.0.0\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\nReturns: <Promise> Fulfills with the resolved path upon success.\nDetermines the actual location of path using the same semantics as the fs.realpath.native() function.\n\nOnly paths that can be converted to UTF8 strings are supported.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the path. If the encoding is set to 'buffer', the path returned will be passed as a <Buffer> object.\n\nOn Linux, when Node.js is linked against musl libc, the procfs file system must be mounted on /proc in order for this function to work. Glibc does not have this restriction.\n\nfsPromises.rename(oldPath, newPath)#\nAdded in: v10.0.0\noldPath <string> | <Buffer> | <URL>\nnewPath <string> | <Buffer> | <URL>\nReturns: <Promise> Fulfills with undefined upon success.\nRenames oldPath to newPath.\n\nfsPromises.rmdir(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nmaxRetries <integer> If an EBUSY, EMFILE, ENFILE, ENOTEMPTY, or EPERM error is encountered, Node.js retries the operation with a linear backoff wait of retryDelay milliseconds longer on each try. This option represents the number of retries. This option is ignored if the recursive option is not true. Default: 0.\nrecursive <boolean> If true, perform a recursive directory removal. In recursive mode, operations are retried on failure. Default: false. Deprecated.\nretryDelay <integer> The amount of time in milliseconds to wait between retries. This option is ignored", "doc_id": "faac8b5f-d032-42ef-9e44-a703fc9dc2a9", "embedding": null, "doc_hash": "b551972992b51385da755913b9730ac258764236874f0df550c13346cff66efa", "extra_info": null, "node_info": {"start": 1233439, "end": 1236948}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "16821b12-e76a-4b5c-881f-a13d94332c92", "3": "51af332a-3aaf-43bf-bdb1-e2f3669bef26"}}, "__type__": "1"}, "51af332a-3aaf-43bf-bdb1-e2f3669bef26": {"__data__": {"text": "oldPath to newPath.\n\nfsPromises.rmdir(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nmaxRetries <integer> If an EBUSY, EMFILE, ENFILE, ENOTEMPTY, or EPERM error is encountered, Node.js retries the operation with a linear backoff wait of retryDelay milliseconds longer on each try. This option represents the number of retries. This option is ignored if the recursive option is not true. Default: 0.\nrecursive <boolean> If true, perform a recursive directory removal. In recursive mode, operations are retried on failure. Default: false. Deprecated.\nretryDelay <integer> The amount of time in milliseconds to wait between retries. This option is ignored if the recursive option is not true. Default: 100.\nReturns: <Promise> Fulfills with undefined upon success.\nRemoves the directory identified by path.\n\nUsing fsPromises.rmdir() on a file (not a directory) results in the promise being rejected with an ENOENT error on Windows and an ENOTDIR error on POSIX.\n\nTo get a behavior similar to the rm -rf Unix command, use fsPromises.rm() with options { recursive: true, force: true }.\n\nfsPromises.rm(path[, options])#\nAdded in: v14.14.0\npath <string> | <Buffer> | <URL>\noptions <Object>\nforce <boolean> When true, exceptions will be ignored if path does not exist. Default: false.\nmaxRetries <integer> If an EBUSY, EMFILE, ENFILE, ENOTEMPTY, or EPERM error is encountered, Node.js will retry the operation with a linear backoff wait of retryDelay milliseconds longer on each try. This option represents the number of retries. This option is ignored if the recursive option is not true. Default: 0.\nrecursive <boolean> If true, perform a recursive directory removal. In recursive mode operations are retried on failure. Default: false.\nretryDelay <integer> The amount of time in milliseconds to wait between retries. This option is ignored if the recursive option is not true. Default: 100.\nReturns: <Promise> Fulfills with undefined upon success.\nRemoves files and directories (modeled on the standard POSIX rm utility).\n\nfsPromises.stat(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nbigint <boolean> Whether the numeric values in the returned <fs.Stats> object should be bigint. Default: false.\nReturns: <Promise> Fulfills with the <fs.Stats> object for the given path.\nfsPromises.statfs(path[, options])#\nAdded in: v18.15.0\npath <string> | <Buffer> | <URL>\noptions <Object>\nbigint <boolean> Whether the numeric values in the returned <fs.StatFs> object should be bigint. Default: false.\nReturns: <Promise> Fulfills with the <fs.StatFs> object for the given path.\nfsPromises.symlink(target, path[, type])#\nAdded in: v10.0.0\ntarget <string> | <Buffer> | <URL>\npath <string> | <Buffer> | <URL>\ntype <string> Default: 'file'\nReturns: <Promise> Fulfills with undefined upon success.\nCreates a symbolic link.\n\nThe type argument is only used on Windows platforms and can be one of 'dir', 'file', or 'junction'. Windows junction points require the destination path to be absolute. When using 'junction', the target argument will automatically be normalized to absolute path.\n\nfsPromises.truncate(path[, len])#\nAdded in: v10.0.0\npath <string> | <Buffer> | <URL>\nlen <integer> Default: 0\nReturns: <Promise> Fulfills with undefined upon success.\nTruncates (shortens or extends the length) of the content at path to len bytes.\n\nfsPromises.unlink(path)#\nAdded in:", "doc_id": "51af332a-3aaf-43bf-bdb1-e2f3669bef26", "embedding": null, "doc_hash": "910ccb491348c37c6b3c92948f884f08ffc73c5313fcbde9d805375128b86698", "extra_info": null, "node_info": {"start": 1236921, "end": 1240327}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "faac8b5f-d032-42ef-9e44-a703fc9dc2a9", "3": "79028bb8-3db1-4080-bd13-47ef0a5dc083"}}, "__type__": "1"}, "79028bb8-3db1-4080-bd13-47ef0a5dc083": {"__data__": {"text": "<URL>\ntype <string> Default: 'file'\nReturns: <Promise> Fulfills with undefined upon success.\nCreates a symbolic link.\n\nThe type argument is only used on Windows platforms and can be one of 'dir', 'file', or 'junction'. Windows junction points require the destination path to be absolute. When using 'junction', the target argument will automatically be normalized to absolute path.\n\nfsPromises.truncate(path[, len])#\nAdded in: v10.0.0\npath <string> | <Buffer> | <URL>\nlen <integer> Default: 0\nReturns: <Promise> Fulfills with undefined upon success.\nTruncates (shortens or extends the length) of the content at path to len bytes.\n\nfsPromises.unlink(path)#\nAdded in: v10.0.0\npath <string> | <Buffer> | <URL>\nReturns: <Promise> Fulfills with undefined upon success.\nIf path refers to a symbolic link, then the link is removed without affecting the file or directory to which that link refers. If the path refers to a file path that is not a symbolic link, the file is deleted. See the POSIX unlink(2) documentation for more detail.\n\nfsPromises.utimes(path, atime, mtime)#\nAdded in: v10.0.0\npath <string> | <Buffer> | <URL>\natime <number> | <string> | <Date>\nmtime <number> | <string> | <Date>\nReturns: <Promise> Fulfills with undefined upon success.\nChange the file system timestamps of the object referenced by path.\n\nThe atime and mtime arguments follow these rules:\n\nValues can be either numbers representing Unix epoch time, Dates, or a numeric string like '123456789.0'.\nIf the value can not be converted to a number, or is NaN, Infinity, or -Infinity, an Error will be thrown.\nfsPromises.watch(filename[, options])#\nAdded in: v15.9.0, v14.18.0\nfilename <string> | <Buffer> | <URL>\noptions <string> | <Object>\npersistent <boolean> Indicates whether the process should continue to run as long as files are being watched. Default: true.\nrecursive <boolean> Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See caveats). Default: false.\nencoding <string> Specifies the character encoding to be used for the filename passed to the listener. Default: 'utf8'.\nsignal <AbortSignal> An <AbortSignal> used to signal when the watcher should stop.\nReturns: <AsyncIterator> of objects with the properties:\neventType <string> The type of change\nfilename <string> | <Buffer> The name of the file changed.\nReturns an async iterator that watches for changes on filename, where filename is either a file or a directory.\n\nconst { watch } = require('node:fs/promises');\n\nconst ac = new AbortController();\nconst { signal } = ac;\nsetTimeout(() => ac.abort(), 10000);\n\n(async () => {\n  try {\n    const watcher = watch(__filename, { signal });\n    for await (const event of watcher)\n      console.log(event);\n  } catch (err) {\n    if (err.name === 'AbortError')\n      return;\n    throw err;\n  }\n})();\nOn most platforms, 'rename' is emitted whenever a filename appears or disappears in the directory.\n\nAll the caveats for fs.watch() also apply to fsPromises.watch().\n\nfsPromises.writeFile(file, data[, options])#\nHistory\nfile <string> | <Buffer> | <URL> | <FileHandle> filename or FileHandle\ndata <string> | <Buffer> | <TypedArray> | <DataView> | <AsyncIterable> | <Iterable> | <Stream>\noptions <Object> | <string>\nencoding", "doc_id": "79028bb8-3db1-4080-bd13-47ef0a5dc083", "embedding": null, "doc_hash": "18dca650b1bd122b16e0b19495d6278f65be7fa242a81b5d7897e83ba82b19e3", "extra_info": null, "node_info": {"start": 1240336, "end": 1243653}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "51af332a-3aaf-43bf-bdb1-e2f3669bef26", "3": "33b17a8e-d792-4b4f-bf2d-f418d76a0b65"}}, "__type__": "1"}, "33b17a8e-d792-4b4f-bf2d-f418d76a0b65": {"__data__": {"text": "(const event of watcher)\n      console.log(event);\n  } catch (err) {\n    if (err.name === 'AbortError')\n      return;\n    throw err;\n  }\n})();\nOn most platforms, 'rename' is emitted whenever a filename appears or disappears in the directory.\n\nAll the caveats for fs.watch() also apply to fsPromises.watch().\n\nfsPromises.writeFile(file, data[, options])#\nHistory\nfile <string> | <Buffer> | <URL> | <FileHandle> filename or FileHandle\ndata <string> | <Buffer> | <TypedArray> | <DataView> | <AsyncIterable> | <Iterable> | <Stream>\noptions <Object> | <string>\nencoding <string> | <null> Default: 'utf8'\nmode <integer> Default: 0o666\nflag <string> See support of file system flags. Default: 'w'.\nsignal <AbortSignal> allows aborting an in-progress writeFile\nReturns: <Promise> Fulfills with undefined upon success.\nAsynchronously writes data to a file, replacing the file if it already exists. data can be a string, a buffer, an <AsyncIterable>, or an <Iterable> object.\n\nThe encoding option is ignored if data is a buffer.\n\nIf options is a string, then it specifies the encoding.\n\nThe mode option only affects the newly created file. See fs.open() for more details.\n\nAny specified <FileHandle> has to support writing.\n\nIt is unsafe to use fsPromises.writeFile() multiple times on the same file without waiting for the promise to be settled.\n\nSimilarly to fsPromises.readFile - fsPromises.writeFile is a convenience method that performs multiple write calls internally to write the buffer passed to it. For performance sensitive code consider using fs.createWriteStream() or filehandle.createWriteStream().\n\nIt is possible to use an <AbortSignal> to cancel an fsPromises.writeFile(). Cancelation is \"best effort\", and some amount of data is likely still to be written.\n\nimport { writeFile } from 'node:fs/promises';\nimport { Buffer } from 'node:buffer';\n\ntry {\n  const controller = new AbortController();\n  const { signal } = controller;\n  const data = new Uint8Array(Buffer.from('Hello Node.js'));\n  const promise = writeFile('message.txt', data, { signal });\n\n  // Abort the request before the promise settles.\n  controller.abort();\n\n  await promise;\n} catch (err) {\n  // When a request is aborted - err is an AbortError\n  console.error(err);\n}\nAborting an ongoing request does not abort individual operating system requests but rather the internal buffering fs.writeFile performs.\n\nfsPromises.constants#\nAdded in: v18.4.0, v16.17.0\n<Object>\nReturns an object containing commonly used constants for file system operations. The object is the same as fs.constants. See FS constants for more details.\n\nCallback API#\nThe callback APIs perform all operations asynchronously, without blocking the event loop, then invoke a callback function upon completion or error.\n\nThe callback APIs use the underlying Node.js threadpool to perform file system operations off the event loop thread. These operations are not synchronized or threadsafe. Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.\n\nfs.access(path[, mode], callback)#\nHistory\npath <string> | <Buffer> | <URL>\nmode <integer> Default: fs.constants.F_OK\ncallback <Function>\nerr <Error>\nTests a user's permissions for the file or directory specified by path. The mode argument is an optional integer that specifies the accessibility checks to be performed. mode should be either the value fs.constants.F_OK or a mask consisting of the bitwise OR of any of fs.constants.R_OK, fs.constants.W_OK, and fs.constants.X_OK (e.g.", "doc_id": "33b17a8e-d792-4b4f-bf2d-f418d76a0b65", "embedding": null, "doc_hash": "2044fae5969570b429dcbc7669142c0a1a71007da4515e76df0cde9035230541", "extra_info": null, "node_info": {"start": 1243756, "end": 1247286}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "79028bb8-3db1-4080-bd13-47ef0a5dc083", "3": "9b9c5e28-4c54-4762-8c48-358a1a030630"}}, "__type__": "1"}, "9b9c5e28-4c54-4762-8c48-358a1a030630": {"__data__": {"text": "threadpool to perform file system operations off the event loop thread. These operations are not synchronized or threadsafe. Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.\n\nfs.access(path[, mode], callback)#\nHistory\npath <string> | <Buffer> | <URL>\nmode <integer> Default: fs.constants.F_OK\ncallback <Function>\nerr <Error>\nTests a user's permissions for the file or directory specified by path. The mode argument is an optional integer that specifies the accessibility checks to be performed. mode should be either the value fs.constants.F_OK or a mask consisting of the bitwise OR of any of fs.constants.R_OK, fs.constants.W_OK, and fs.constants.X_OK (e.g. fs.constants.W_OK | fs.constants.R_OK). Check File access constants for possible values of mode.\n\nThe final argument, callback, is a callback function that is invoked with a possible error argument. If any of the accessibility checks fail, the error argument will be an Error object. The following examples check if package.json exists, and if it is readable or writable.\n\nimport { access, constants } from 'node:fs';\n\nconst file = 'package.json';\n\n// Check if the file exists in the current directory.\naccess(file, constants.F_OK, (err) => {\n  console.log(`${file} ${err ? 'does not exist' : 'exists'}`);\n});\n\n// Check if the file is readable.\naccess(file, constants.R_OK, (err) => {\n  console.log(`${file} ${err ? 'is not readable' : 'is readable'}`);\n});\n\n// Check if the file is writable.\naccess(file, constants.W_OK, (err) => {\n  console.log(`${file} ${err ? 'is not writable' : 'is writable'}`);\n});\n\n// Check if the file is readable and writable.\naccess(file, constants.R_OK | constants.W_OK, (err) => {\n  console.log(`${file} ${err ? 'is not' : 'is'} readable and writable`);\n});\nDo not use fs.access() to check for the accessibility of a file before calling fs.open(), fs.readFile(), or fs.writeFile(). Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.\n\nwrite (NOT RECOMMENDED)\n\nimport { access, open, close } from 'node:fs';\n\naccess('myfile', (err) => {\n  if (!err) {\n    console.error('myfile already exists');\n    return;\n  }\n\n  open('myfile', 'wx', (err, fd) => {\n    if (err) throw err;\n\n    try {\n      writeMyData(fd);\n    } finally {\n      close(fd, (err) => {\n        if (err) throw err;\n      });\n    }\n  });\n});\nwrite (RECOMMENDED)\n\nimport { open, close } from 'node:fs';\n\nopen('myfile', 'wx', (err, fd) => {\n  if (err) {\n    if (err.code === 'EEXIST') {\n      console.error('myfile already exists');\n      return;\n    }\n\n    throw err;\n  }\n\n  try {\n    writeMyData(fd);\n  } finally {\n    close(fd, (err) => {\n      if (err) throw err;\n    });\n  }\n});\nread (NOT RECOMMENDED)\n\nimport { access, open, close } from 'node:fs';\naccess('myfile', (err) => {\n  if (err) {\n    if (err.code ===", "doc_id": "9b9c5e28-4c54-4762-8c48-358a1a030630", "embedding": null, "doc_hash": "b3d73fea4a690590709409cd921de7035f669b8e92865d9d97e0ee675afca6a1", "extra_info": null, "node_info": {"start": 1247137, "end": 1250148}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "33b17a8e-d792-4b4f-bf2d-f418d76a0b65", "3": "aa3220b8-06dd-4e3f-af5e-05a076cc7b37"}}, "__type__": "1"}, "aa3220b8-06dd-4e3f-af5e-05a076cc7b37": {"__data__": {"text": "{ open, close } from 'node:fs';\n\nopen('myfile', 'wx', (err, fd) => {\n  if (err) {\n    if (err.code === 'EEXIST') {\n      console.error('myfile already exists');\n      return;\n    }\n\n    throw err;\n  }\n\n  try {\n    writeMyData(fd);\n  } finally {\n    close(fd, (err) => {\n      if (err) throw err;\n    });\n  }\n});\nread (NOT RECOMMENDED)\n\nimport { access, open, close } from 'node:fs';\naccess('myfile', (err) => {\n  if (err) {\n    if (err.code === 'ENOENT') {\n      console.error('myfile does not exist');\n      return;\n    }\n\n    throw err;\n  }\n\n  open('myfile', 'r', (err, fd) => {\n    if (err) throw err;\n\n    try {\n      readMyData(fd);\n    } finally {\n      close(fd, (err) => {\n        if (err) throw err;\n      });\n    }\n  });\n});\nread (RECOMMENDED)\n\nimport { open, close } from 'node:fs';\n\nopen('myfile', 'r', (err, fd) => {\n  if (err) {\n    if (err.code === 'ENOENT') {\n      console.error('myfile does not exist');\n      return;\n    }\n\n    throw err;\n  }\n\n  try {\n    readMyData(fd);\n  } finally {\n    close(fd, (err) => {\n      if (err) throw err;\n    });\n  }\n});\nThe \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.\n\nIn general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a signal from another process.\n\nOn Windows, access-control policies (ACLs) on a directory may limit access to a file or directory. The fs.access() function, however, does not check the ACL and therefore may report that a path is accessible even if the ACL restricts the user from reading or writing to it.\n\nfs.appendFile(path, data[, options], callback)#\nHistory\npath <string> | <Buffer> | <URL> | <number> filename or file descriptor\ndata <string> | <Buffer>\noptions <Object> | <string>\nencoding <string> | <null> Default: 'utf8'\nmode <integer> Default: 0o666\nflag <string> See support of file system flags. Default: 'a'.\ncallback <Function>\nerr <Error>\nAsynchronously append data to a file, creating the file if it does not yet exist. data can be a string or a <Buffer>.\n\nThe mode option only affects the newly created file. See fs.open() for more details.\n\nimport { appendFile } from 'node:fs';\n\nappendFile('message.txt', 'data to append', (err) => {\n  if (err) throw err;\n  console.log('The \"data to append\" was appended to file!');\n});\nIf options is a string, then it specifies the encoding:\n\nimport { appendFile } from 'node:fs';\n\nappendFile('message.txt', 'data to append', 'utf8', callback);\nThe path may be specified as a numeric file descriptor that has been opened for appending (using fs.open() or fs.openSync()). The file descriptor will not be closed automatically.\n\nimport { open, close, appendFile } from 'node:fs';\n\nfunction closeFd(fd) {\n  close(fd, (err) => {\n    if", "doc_id": "aa3220b8-06dd-4e3f-af5e-05a076cc7b37", "embedding": null, "doc_hash": "a646161d227f45c32095381b6feb48130105ba1c4a9d1b5285cce457e49a090f", "extra_info": null, "node_info": {"start": 1250437, "end": 1253314}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9b9c5e28-4c54-4762-8c48-358a1a030630", "3": "de82f590-160e-4a99-9696-6d3d93815522"}}, "__type__": "1"}, "de82f590-160e-4a99-9696-6d3d93815522": {"__data__": {"text": "{ appendFile } from 'node:fs';\n\nappendFile('message.txt', 'data to append', (err) => {\n  if (err) throw err;\n  console.log('The \"data to append\" was appended to file!');\n});\nIf options is a string, then it specifies the encoding:\n\nimport { appendFile } from 'node:fs';\n\nappendFile('message.txt', 'data to append', 'utf8', callback);\nThe path may be specified as a numeric file descriptor that has been opened for appending (using fs.open() or fs.openSync()). The file descriptor will not be closed automatically.\n\nimport { open, close, appendFile } from 'node:fs';\n\nfunction closeFd(fd) {\n  close(fd, (err) => {\n    if (err) throw err;\n  });\n}\n\nopen('message.txt', 'a', (err, fd) => {\n  if (err) throw err;\n\n  try {\n    appendFile(fd, 'data to append', 'utf8', (err) => {\n      closeFd(fd);\n      if (err) throw err;\n    });\n  } catch (err) {\n    closeFd(fd);\n    throw err;\n  }\n});\nfs.chmod(path, mode, callback)#\nHistory\npath <string> | <Buffer> | <URL>\nmode <string> | <integer>\ncallback <Function>\nerr <Error>\nAsynchronously changes the permissions of a file. No arguments other than a possible exception are given to the completion callback.\n\nSee the POSIX chmod(2) documentation for more detail.\n\nimport { chmod } from 'node:fs';\n\nchmod('my_file.txt', 0o775, (err) => {\n  if (err) throw err;\n  console.log('The permissions for file \"my_file.txt\" have been changed!');\n});\nFile modes#\nThe mode argument used in both the fs.chmod() and fs.chmodSync() methods is a numeric bitmask created using a logical OR of the following constants:\n\nConstant\tOctal\tDescription\nfs.constants.S_IRUSR\t0o400\tread by owner\nfs.constants.S_IWUSR\t0o200\twrite by owner\nfs.constants.S_IXUSR\t0o100\texecute/search by owner\nfs.constants.S_IRGRP\t0o40\tread by group\nfs.constants.S_IWGRP\t0o20\twrite by group\nfs.constants.S_IXGRP\t0o10\texecute/search by group\nfs.constants.S_IROTH\t0o4\tread by others\nfs.constants.S_IWOTH\t0o2\twrite by others\nfs.constants.S_IXOTH\t0o1\texecute/search by others\nAn easier method of constructing the mode is to use a sequence of three octal digits (e.g. 765). The left-most digit (7 in the example), specifies the permissions for the file owner. The middle digit (6 in the example), specifies permissions for the group. The right-most digit (5 in the example), specifies the permissions for others.\n\nNumber\tDescription\n7\tread, write, and execute\n6\tread and write\n5\tread and execute\n4\tread only\n3\twrite and execute\n2\twrite only\n1\texecute only\n0\tno permission\nFor example, the octal value 0o765 means:\n\nThe owner may read, write, and execute the file.\nThe group may read and write the file.\nOthers may read and execute the file.\nWhen using raw numbers where file modes are expected, any value larger than 0o777 may result in platform-specific behaviors that are not supported to work consistently. Therefore constants like S_ISVTX, S_ISGID, or S_ISUID are not exposed in fs.constants.\n\nCaveats: on Windows only the write permission can be changed, and the distinction among the permissions of group, owner, or others is not implemented.\n\nfs.chown(path,", "doc_id": "de82f590-160e-4a99-9696-6d3d93815522", "embedding": null, "doc_hash": "a40e898350e4b86ee48fb7200aa4695fbdc67571d4c04a75d98510c15a5dcc7a", "extra_info": null, "node_info": {"start": 1253127, "end": 1256177}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "aa3220b8-06dd-4e3f-af5e-05a076cc7b37", "3": "04ab7a5f-bfbc-423d-ad3c-718ab6e752a5"}}, "__type__": "1"}, "04ab7a5f-bfbc-423d-ad3c-718ab6e752a5": {"__data__": {"text": "write\n5\tread and execute\n4\tread only\n3\twrite and execute\n2\twrite only\n1\texecute only\n0\tno permission\nFor example, the octal value 0o765 means:\n\nThe owner may read, write, and execute the file.\nThe group may read and write the file.\nOthers may read and execute the file.\nWhen using raw numbers where file modes are expected, any value larger than 0o777 may result in platform-specific behaviors that are not supported to work consistently. Therefore constants like S_ISVTX, S_ISGID, or S_ISUID are not exposed in fs.constants.\n\nCaveats: on Windows only the write permission can be changed, and the distinction among the permissions of group, owner, or others is not implemented.\n\nfs.chown(path, uid, gid, callback)#\nHistory\npath <string> | <Buffer> | <URL>\nuid <integer>\ngid <integer>\ncallback <Function>\nerr <Error>\nAsynchronously changes owner and group of a file. No arguments other than a possible exception are given to the completion callback.\n\nSee the POSIX chown(2) documentation for more detail.\n\nfs.close(fd[, callback])#\nHistory\nfd <integer>\ncallback <Function>\nerr <Error>\nCloses the file descriptor. No arguments other than a possible exception are given to the completion callback.\n\nCalling fs.close() on any file descriptor (fd) that is currently in use through any other fs operation may lead to undefined behavior.\n\nSee the POSIX close(2) documentation for more detail.\n\nfs.copyFile(src, dest[, mode], callback)#\nHistory\nsrc <string> | <Buffer> | <URL> source filename to copy\ndest <string> | <Buffer> | <URL> destination filename of the copy operation\nmode <integer> modifiers for copy operation. Default: 0.\ncallback <Function>\nAsynchronously copies src to dest. By default, dest is overwritten if it already exists. No arguments other than a possible exception are given to the callback function. Node.js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.js will attempt to remove the destination.\n\nmode is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE).\n\nfs.constants.COPYFILE_EXCL: The copy operation will fail if dest already exists.\nfs.constants.COPYFILE_FICLONE: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used.\nfs.constants.COPYFILE_FICLONE_FORCE: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.\nimport { copyFile, constants } from 'node:fs';\n\nfunction callback(err) {\n  if (err) throw err;\n  console.log('source.txt was copied to destination.txt');\n}\n\n// destination.txt will be created or overwritten by default.\ncopyFile('source.txt', 'destination.txt', callback);\n\n// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\ncopyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL, callback);\nfs.cp(src, dest[, options], callback)#\nHistory\nStability: 1 - Experimental\nsrc <string> | <URL> source path to copy.\ndest <string> | <URL> destination path to copy to.\noptions <Object>\ndereference <boolean> dereference symlinks. Default: false.\nerrorOnExist <boolean> when force is false, and the destination exists, throw an error. Default: false.\nfilter <Function> Function to filter copied", "doc_id": "04ab7a5f-bfbc-423d-ad3c-718ab6e752a5", "embedding": null, "doc_hash": "b87826759bdc86897532c23f48c35e5995cc752684d69136765a0b17056d2159", "extra_info": null, "node_info": {"start": 1256110, "end": 1259621}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "de82f590-160e-4a99-9696-6d3d93815522", "3": "9dbef09f-76b2-4066-979f-6e3381507640"}}, "__type__": "1"}, "9dbef09f-76b2-4066-979f-6e3381507640": {"__data__": {"text": "destination.txt will be created or overwritten by default.\ncopyFile('source.txt', 'destination.txt', callback);\n\n// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\ncopyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL, callback);\nfs.cp(src, dest[, options], callback)#\nHistory\nStability: 1 - Experimental\nsrc <string> | <URL> source path to copy.\ndest <string> | <URL> destination path to copy to.\noptions <Object>\ndereference <boolean> dereference symlinks. Default: false.\nerrorOnExist <boolean> when force is false, and the destination exists, throw an error. Default: false.\nfilter <Function> Function to filter copied files/directories. Return true to copy the item, false to ignore it. Can also return a Promise that resolves to true or false Default: undefined.\nsrc <string> source path to copy.\ndest <string> destination path to copy to.\nReturns: <boolean> | <Promise>\nforce <boolean> overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists. Use the errorOnExist option to change this behavior. Default: true.\npreserveTimestamps <boolean> When true timestamps from src will be preserved. Default: false.\nrecursive <boolean> copy directories recursively Default: false\nverbatimSymlinks <boolean> When true, path resolution for symlinks will be skipped. Default: false\ncallback <Function>\nAsynchronously copies the entire directory structure from src to dest, including subdirectories and files.\n\nWhen copying a directory to another directory, globs are not supported and behavior is similar to cp dir1/ dir2/.\n\nfs.createReadStream(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nflags <string> See support of file system flags. Default: 'r'.\nencoding <string> Default: null\nfd <integer> | <FileHandle> Default: null\nmode <integer> Default: 0o666\nautoClose <boolean> Default: true\nemitClose <boolean> Default: true\nstart <integer>\nend <integer> Default: Infinity\nhighWaterMark <integer> Default: 64 * 1024\nfs <Object> | <null> Default: null\nReturns: <fs.ReadStream>\nUnlike the 16 KiB default highWaterMark for a <stream.Readable>, the stream returned by this method has a default highWaterMark of 64 KiB.\n\noptions can include start and end values to read a range of bytes from the file instead of the entire file. Both start and end are inclusive and start counting at 0, allowed values are in the [0, Number.MAX_SAFE_INTEGER] range. If fd is specified and start is omitted or undefined, fs.createReadStream() reads sequentially from the current file position. The encoding can be any one of those accepted by <Buffer>.\n\nIf fd is specified, ReadStream will ignore the path argument and will use the specified file descriptor. This means that no 'open' event will be emitted. fd should be blocking; non-blocking fds should be passed to <net.Socket>.\n\nIf fd points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available. This can prevent the process from exiting and the stream from closing naturally.\n\nBy default, the stream will emit a 'close' event after it has been destroyed. Set the emitClose option to false to change this behavior.\n\nBy providing the fs option, it is possible to override the corresponding fs implementations for open, read, and close. When providing the fs option, an override for read is required. If no fd is provided, an override for open is also required. If autoClose is true, an override for close is also required.\n\nimport { createReadStream } from 'node:fs';\n\n// Create a stream from some character device.\nconst stream = createReadStream('/dev/input/event0');\nsetTimeout(() => {\n  stream.close(); // This may not close the stream.\n ", "doc_id": "9dbef09f-76b2-4066-979f-6e3381507640", "embedding": null, "doc_hash": "709706f90f7a5e2933f963e9d107601effb7950539327c63fa66ac728dd3229d", "extra_info": null, "node_info": {"start": 1259627, "end": 1263436}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "04ab7a5f-bfbc-423d-ad3c-718ab6e752a5", "3": "2f30cea2-1553-4817-ac1a-86228992a932"}}, "__type__": "1"}, "2f30cea2-1553-4817-ac1a-86228992a932": {"__data__": {"text": "until data is available. This can prevent the process from exiting and the stream from closing naturally.\n\nBy default, the stream will emit a 'close' event after it has been destroyed. Set the emitClose option to false to change this behavior.\n\nBy providing the fs option, it is possible to override the corresponding fs implementations for open, read, and close. When providing the fs option, an override for read is required. If no fd is provided, an override for open is also required. If autoClose is true, an override for close is also required.\n\nimport { createReadStream } from 'node:fs';\n\n// Create a stream from some character device.\nconst stream = createReadStream('/dev/input/event0');\nsetTimeout(() => {\n  stream.close(); // This may not close the stream.\n  // Artificially marking end-of-stream, as if the underlying resource had\n  // indicated end-of-file by itself, allows the stream to close.\n  // This does not cancel pending read operations, and if there is such an\n  // operation, the process may still not be able to exit successfully\n  // until it finishes.\n  stream.push(null);\n  stream.read(0);\n}, 100);\nIf autoClose is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak. If autoClose is set to true (default behavior), on 'error' or 'end' the file descriptor will be closed automatically.\n\nmode sets the file mode (permission and sticky bits), but only if the file was created.\n\nAn example to read the last 10 bytes of a file which is 100 bytes long:\n\nimport { createReadStream } from 'node:fs';\n\ncreateReadStream('sample.txt', { start: 90, end: 99 });\nIf options is a string, then it specifies the encoding.\n\nfs.createWriteStream(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nflags <string> See support of file system flags. Default: 'w'.\nencoding <string> Default: 'utf8'\nfd <integer> | <FileHandle> Default: null\nmode <integer> Default: 0o666\nautoClose <boolean> Default: true\nemitClose <boolean> Default: true\nstart <integer>\nfs <Object> | <null> Default: null\nReturns: <fs.WriteStream>\noptions may also include a start option to allow writing data at some position past the beginning of the file, allowed values are in the [0, Number.MAX_SAFE_INTEGER] range. Modifying a file rather than replacing it may require the flags option to be set to r+ rather than the default w. The encoding can be any one of those accepted by <Buffer>.\n\nIf autoClose is set to true (default behavior) on 'error' or 'finish' the file descriptor will be closed automatically. If autoClose is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak.\n\nBy default, the stream will emit a 'close' event after it has been destroyed. Set the emitClose option to false to change this behavior.\n\nBy providing the fs option it is possible to override the corresponding fs implementations for open, write, writev, and close. Overriding write() without writev() can reduce performance as some optimizations (_writev()) will be disabled. When providing the fs option, overrides for at least one of write and writev are required. If no fd option is supplied, an override for open is also required. If autoClose is true, an override for close is also required.\n\nLike <fs.ReadStream>, if fd is specified, <fs.WriteStream> will ignore the path argument and will use the specified file descriptor. This means that no 'open' event will be emitted. fd should be blocking; non-blocking fds should be passed to <net.Socket>.\n\nIf options is a string, then it specifies the encoding.\n\nfs.exists(path,", "doc_id": "2f30cea2-1553-4817-ac1a-86228992a932", "embedding": null, "doc_hash": "aed796d890787441a35a848f234fdceb582bf4a59da2da1b29035e852f735dfe", "extra_info": null, "node_info": {"start": 1263378, "end": 1267140}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9dbef09f-76b2-4066-979f-6e3381507640", "3": "28164c55-1477-4b59-b9b9-edcaf73406d0"}}, "__type__": "1"}, "28164c55-1477-4b59-b9b9-edcaf73406d0": {"__data__": {"text": "it is possible to override the corresponding fs implementations for open, write, writev, and close. Overriding write() without writev() can reduce performance as some optimizations (_writev()) will be disabled. When providing the fs option, overrides for at least one of write and writev are required. If no fd option is supplied, an override for open is also required. If autoClose is true, an override for close is also required.\n\nLike <fs.ReadStream>, if fd is specified, <fs.WriteStream> will ignore the path argument and will use the specified file descriptor. This means that no 'open' event will be emitted. fd should be blocking; non-blocking fds should be passed to <net.Socket>.\n\nIf options is a string, then it specifies the encoding.\n\nfs.exists(path, callback)#\nHistory\nStability: 0 - Deprecated: Use fs.stat() or fs.access() instead.\npath <string> | <Buffer> | <URL>\ncallback <Function>\nexists <boolean>\nTest whether or not the given path exists by checking with the file system. Then call the callback argument with either true or false:\n\nimport { exists } from 'node:fs';\n\nexists('/etc/passwd', (e) => {\n  console.log(e ? 'it exists' : 'no passwd!');\n});\nThe parameters for this callback are not consistent with other Node.js callbacks. Normally, the first parameter to a Node.js callback is an err parameter, optionally followed by other parameters. The fs.exists() callback has only one boolean parameter. This is one reason fs.access() is recommended instead of fs.exists().\n\nUsing fs.exists() to check for the existence of a file before calling fs.open(), fs.readFile(), or fs.writeFile() is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist.\n\nwrite (NOT RECOMMENDED)\n\nimport { exists, open, close } from 'node:fs';\n\nexists('myfile', (e) => {\n  if (e) {\n    console.error('myfile already exists');\n  } else {\n    open('myfile', 'wx', (err, fd) => {\n      if (err) throw err;\n\n      try {\n        writeMyData(fd);\n      } finally {\n        close(fd, (err) => {\n          if (err) throw err;\n        });\n      }\n    });\n  }\n});\nwrite (RECOMMENDED)\n\nimport { open, close } from 'node:fs';\nopen('myfile', 'wx', (err, fd) => {\n  if (err) {\n    if (err.code === 'EEXIST') {\n      console.error('myfile already exists');\n      return;\n    }\n\n    throw err;\n  }\n\n  try {\n    writeMyData(fd);\n  } finally {\n    close(fd, (err) => {\n      if (err) throw err;\n    });\n  }\n});\nread (NOT RECOMMENDED)\n\nimport { open, close, exists } from 'node:fs';\n\nexists('myfile', (e) => {\n  if (e) {\n    open('myfile', 'r', (err, fd) => {\n      if (err) throw err;\n\n      try {\n        readMyData(fd);\n      } finally {\n        close(fd, (err) => {\n          if (err) throw err;\n        });\n      }\n    });\n  } else {\n   ", "doc_id": "28164c55-1477-4b59-b9b9-edcaf73406d0", "embedding": null, "doc_hash": "65b2194938b3c6e613595475048df81ade0d24a9d7ec4402156e98e0251fc0e9", "extra_info": null, "node_info": {"start": 1267146, "end": 1270053}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2f30cea2-1553-4817-ac1a-86228992a932", "3": "6e40acdd-f6f0-4032-99ce-3f324e260b4e"}}, "__type__": "1"}, "6e40acdd-f6f0-4032-99ce-3f324e260b4e": {"__data__": {"text": "=> {\n      if (err) throw err;\n    });\n  }\n});\nread (NOT RECOMMENDED)\n\nimport { open, close, exists } from 'node:fs';\n\nexists('myfile', (e) => {\n  if (e) {\n    open('myfile', 'r', (err, fd) => {\n      if (err) throw err;\n\n      try {\n        readMyData(fd);\n      } finally {\n        close(fd, (err) => {\n          if (err) throw err;\n        });\n      }\n    });\n  } else {\n    console.error('myfile does not exist');\n  }\n});\nread (RECOMMENDED)\n\nimport { open, close } from 'node:fs';\n\nopen('myfile', 'r', (err, fd) => {\n  if (err) {\n    if (err.code === 'ENOENT') {\n      console.error('myfile does not exist');\n      return;\n    }\n\n    throw err;\n  }\n\n  try {\n    readMyData(fd);\n  } finally {\n    close(fd, (err) => {\n      if (err) throw err;\n    });\n  }\n});\nThe \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.\n\nIn general, check for the existence of a file only if the file won't be used directly, for example when its existence is a signal from another process.\n\nfs.fchmod(fd, mode, callback)#\nHistory\nfd <integer>\nmode <string> | <integer>\ncallback <Function>\nerr <Error>\nSets the permissions on the file. No arguments other than a possible exception are given to the completion callback.\n\nSee the POSIX fchmod(2) documentation for more detail.\n\nfs.fchown(fd, uid, gid, callback)#\nHistory\nfd <integer>\nuid <integer>\ngid <integer>\ncallback <Function>\nerr <Error>\nSets the owner of the file. No arguments other than a possible exception are given to the completion callback.\n\nSee the POSIX fchown(2) documentation for more detail.\n\nfs.fdatasync(fd, callback)#\nHistory\nfd <integer>\ncallback <Function>\nerr <Error>\nForces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details. No arguments other than a possible exception are given to the completion callback.\n\nfs.fstat(fd[, options], callback)#\nHistory\nfd <integer>\noptions <Object>\nbigint <boolean> Whether the numeric values in the returned <fs.Stats> object should be bigint. Default: false.\ncallback <Function>\nerr <Error>\nstats <fs.Stats>\nInvokes the callback with the <fs.Stats> for the file descriptor.\n\nSee the POSIX fstat(2) documentation for more detail.\n\nfs.fsync(fd, callback)#\nHistory\nfd <integer>\ncallback <Function>\nerr <Error>\nRequest that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail. No arguments other than a possible exception are given to the completion callback.\n\nfs.ftruncate(fd[, len], callback)#\nHistory\nfd <integer>\nlen <integer> Default: 0\ncallback <Function>\nerr <Error>\nTruncates the file descriptor. No arguments other than a possible exception are given to the completion callback.\n\nSee the POSIX ftruncate(2) documentation for more detail.\n\nIf", "doc_id": "6e40acdd-f6f0-4032-99ce-3f324e260b4e", "embedding": null, "doc_hash": "915f3d01e6b0b16204211b53ab6ff47083e18342ac4ba0e0e5fff60c67b4b0eb", "extra_info": null, "node_info": {"start": 1270446, "end": 1273486}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "28164c55-1477-4b59-b9b9-edcaf73406d0", "3": "8bc2282f-13bf-4fde-a196-caed39231544"}}, "__type__": "1"}, "8bc2282f-13bf-4fde-a196-caed39231544": {"__data__": {"text": "POSIX fstat(2) documentation for more detail.\n\nfs.fsync(fd, callback)#\nHistory\nfd <integer>\ncallback <Function>\nerr <Error>\nRequest that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail. No arguments other than a possible exception are given to the completion callback.\n\nfs.ftruncate(fd[, len], callback)#\nHistory\nfd <integer>\nlen <integer> Default: 0\ncallback <Function>\nerr <Error>\nTruncates the file descriptor. No arguments other than a possible exception are given to the completion callback.\n\nSee the POSIX ftruncate(2) documentation for more detail.\n\nIf the file referred to by the file descriptor was larger than len bytes, only the first len bytes will be retained in the file.\n\nFor example, the following program retains only the first four bytes of the file:\n\nimport { open, close, ftruncate } from 'node:fs';\n\nfunction closeFd(fd) {\n  close(fd, (err) => {\n    if (err) throw err;\n  });\n}\n\nopen('temp.txt', 'r+', (err, fd) => {\n  if (err) throw err;\n\n  try {\n    ftruncate(fd, 4, (err) => {\n      closeFd(fd);\n      if (err) throw err;\n    });\n  } catch (err) {\n    closeFd(fd);\n    if (err) throw err;\n  }\n});\nIf the file previously was shorter than len bytes, it is extended, and the extended part is filled with null bytes ('\\0'):\n\nIf len is negative then 0 will be used.\n\nfs.futimes(fd, atime, mtime, callback)#\nHistory\nfd <integer>\natime <number> | <string> | <Date>\nmtime <number> | <string> | <Date>\ncallback <Function>\nerr <Error>\nChange the file system timestamps of the object referenced by the supplied file descriptor. See fs.utimes().\n\nfs.lchmod(path, mode, callback)#\nHistory\npath <string> | <Buffer> | <URL>\nmode <integer>\ncallback <Function>\nerr <Error> | <AggregateError>\nChanges the permissions on a symbolic link. No arguments other than a possible exception are given to the completion callback.\n\nThis method is only implemented on macOS.\n\nSee the POSIX lchmod(2) documentation for more detail.\n\nfs.lchown(path, uid, gid, callback)#\nHistory\npath <string> | <Buffer> | <URL>\nuid <integer>\ngid <integer>\ncallback <Function>\nerr <Error>\nSet the owner of the symbolic link. No arguments other than a possible exception are given to the completion callback.\n\nSee the POSIX lchown(2) documentation for more detail.\n\nfs.lutimes(path, atime, mtime, callback)#\nHistory\npath <string> | <Buffer> | <URL>\natime <number> | <string> | <Date>\nmtime <number> | <string> | <Date>\ncallback <Function>\nerr <Error>\nChanges the access and modification times of a file in the same way as fs.utimes(), with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed.\n\nNo arguments other than a possible exception are given to the completion callback.\n\nfs.link(existingPath, newPath, callback)#\nHistory\nexistingPath <string> | <Buffer> | <URL>\nnewPath <string> | <Buffer> | <URL>\ncallback <Function>\nerr <Error>\nCreates a new link from the existingPath to the newPath. See the POSIX link(2) documentation for more detail. No arguments other than a possible exception", "doc_id": "8bc2282f-13bf-4fde-a196-caed39231544", "embedding": null, "doc_hash": "8334c6fd76fa2e7f3d36fadd1b84b2dc6cdbd7e7f77453c6f894000477c311fb", "extra_info": null, "node_info": {"start": 1273117, "end": 1276339}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6e40acdd-f6f0-4032-99ce-3f324e260b4e", "3": "e812b885-2381-4bd0-8c58-49f3615a8488"}}, "__type__": "1"}, "e812b885-2381-4bd0-8c58-49f3615a8488": {"__data__": {"text": "| <string> | <Date>\ncallback <Function>\nerr <Error>\nChanges the access and modification times of a file in the same way as fs.utimes(), with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed.\n\nNo arguments other than a possible exception are given to the completion callback.\n\nfs.link(existingPath, newPath, callback)#\nHistory\nexistingPath <string> | <Buffer> | <URL>\nnewPath <string> | <Buffer> | <URL>\ncallback <Function>\nerr <Error>\nCreates a new link from the existingPath to the newPath. See the POSIX link(2) documentation for more detail. No arguments other than a possible exception are given to the completion callback.\n\nfs.lstat(path[, options], callback)#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nbigint <boolean> Whether the numeric values in the returned <fs.Stats> object should be bigint. Default: false.\ncallback <Function>\nerr <Error>\nstats <fs.Stats>\nRetrieves the <fs.Stats> for the symbolic link referred to by the path. The callback gets two arguments (err, stats) where stats is a <fs.Stats> object. lstat() is identical to stat(), except that if path is a symbolic link, then the link itself is stat-ed, not the file that it refers to.\n\nSee the POSIX lstat(2) documentation for more details.\n\nfs.mkdir(path[, options], callback)#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object> | <integer>\nrecursive <boolean> Default: false\nmode <string> | <integer> Not supported on Windows. Default: 0o777.\ncallback <Function>\nerr <Error>\npath <string> | <undefined> Present only if a directory is created with recursive set to true.\nAsynchronously creates a directory.\n\nThe callback is given a possible exception and, if recursive is true, the first directory path created, (err[, path]). path can still be undefined when recursive is true, if no directory was created.\n\nThe optional options argument can be an integer specifying mode (permission and sticky bits), or an object with a mode property and a recursive property indicating whether parent directories should be created. Calling fs.mkdir() when path is a directory that exists results in an error only when recursive is false.\n\nimport { mkdir } from 'node:fs';\n\n// Creates /tmp/a/apple, regardless of whether `/tmp` and /tmp/a exist.\nmkdir('/tmp/a/apple', { recursive: true }, (err) => {\n  if (err) throw err;\n});\nOn Windows, using fs.mkdir() on the root directory even with recursion will result in an error:\n\nimport { mkdir } from 'node:fs';\n\nmkdir('/', { recursive: true }, (err) => {\n  // => [Error: EPERM: operation not permitted, mkdir 'C:\\']\n});\nSee the POSIX mkdir(2) documentation for more details.\n\nfs.mkdtemp(prefix[, options], callback)#\nHistory\nprefix <string>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\ncallback <Function>\nerr <Error>\ndirectory <string>\nCreates a unique temporary directory.\n\nGenerates six random characters to be appended behind a required prefix to create a unique temporary directory. Due to platform inconsistencies, avoid trailing X characters in prefix. Some platforms, notably the BSDs, can return more than six random characters, and replace trailing X characters in prefix with random characters.\n\nThe created directory path is passed as a string to the callback's second parameter.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use.\n\nimport { mkdtemp } from 'node:fs';\nimport { join } from 'node:path';\nimport { tmpdir } from", "doc_id": "e812b885-2381-4bd0-8c58-49f3615a8488", "embedding": null, "doc_hash": "280a1bd74bfc159dee1c9e2e495e272e1a456561861ba86d00b9b7110059fcd9", "extra_info": null, "node_info": {"start": 1276364, "end": 1279955}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8bc2282f-13bf-4fde-a196-caed39231544", "3": "3743d99d-344e-4152-b48c-986d87b65724"}}, "__type__": "1"}, "3743d99d-344e-4152-b48c-986d87b65724": {"__data__": {"text": "| <Object>\nencoding <string> Default: 'utf8'\ncallback <Function>\nerr <Error>\ndirectory <string>\nCreates a unique temporary directory.\n\nGenerates six random characters to be appended behind a required prefix to create a unique temporary directory. Due to platform inconsistencies, avoid trailing X characters in prefix. Some platforms, notably the BSDs, can return more than six random characters, and replace trailing X characters in prefix with random characters.\n\nThe created directory path is passed as a string to the callback's second parameter.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use.\n\nimport { mkdtemp } from 'node:fs';\nimport { join } from 'node:path';\nimport { tmpdir } from 'node:os';\n\nmkdtemp(join(tmpdir(), 'foo-'), (err, directory) => {\n  if (err) throw err;\n  console.log(directory);\n  // Prints: /tmp/foo-itXde2 or C:\\Users\\...\\AppData\\Local\\Temp\\foo-itXde2\n});\nThe fs.mkdtemp() method will append the six randomly selected characters directly to the prefix string. For instance, given a directory /tmp, if the intention is to create a temporary directory within /tmp, the prefix must end with a trailing platform-specific path separator (require('node:path').sep).\n\nimport { tmpdir } from 'node:os';\nimport { mkdtemp } from 'node:fs';\n\n// The parent directory for the new temporary directory\nconst tmpDir = tmpdir();\n\n// This method is *INCORRECT*:\nmkdtemp(tmpDir, (err, directory) => {\n  if (err) throw err;\n  console.log(directory);\n  // Will print something similar to `/tmpabc123`.\n  // A new temporary directory is created at the file system root\n  // rather than *within* the /tmp directory.\n});\n\n// This method is *CORRECT*:\nimport { sep } from 'node:path';\nmkdtemp(`${tmpDir}${sep}`, (err, directory) => {\n  if (err) throw err;\n  console.log(directory);\n  // Will print something similar to `/tmp/abc123`.\n  // A new temporary directory is created within\n  // the /tmp directory.\n});\nfs.open(path[, flags[, mode]], callback)#\nHistory\npath <string> | <Buffer> | <URL>\nflags <string> | <number> See support of file system flags. Default: 'r'.\nmode <string> | <integer> Default: 0o666 (readable and writable)\ncallback <Function>\nerr <Error>\nfd <integer>\nAsynchronous file open. See the POSIX open(2) documentation for more details.\n\nmode sets the file mode (permission and sticky bits), but only if the file was created. On Windows, only the write permission can be manipulated; see fs.chmod().\n\nThe callback gets two arguments (err, fd).\n\nSome characters (< > : \" / \\ | ? *) are reserved under Windows as documented by Naming Files, Paths, and Namespaces. Under NTFS, if the filename contains a colon, Node.js will open a file system stream, as described by this MSDN page.\n\nFunctions based on fs.open() exhibit this behavior as well: fs.writeFile(), fs.readFile(), etc.\n\nfs.opendir(path[, options], callback)#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nencoding <string> | <null> Default: 'utf8'\nbufferSize <number> Number of directory entries that are buffered internally when reading from the directory. Higher values lead to better performance but higher memory usage. Default: 32\ncallback <Function>\nerr <Error>\ndir <fs.Dir>\nAsynchronously open a directory. See the POSIX opendir(3) documentation for more details.\n\nCreates an <fs.Dir>, which contains all further functions for reading from and cleaning up the directory.\n\nThe encoding option sets the encoding for the path while opening the directory and subsequent read", "doc_id": "3743d99d-344e-4152-b48c-986d87b65724", "embedding": null, "doc_hash": "36ec66b575d913c05a0efb1baa2f77253c5d7d46f7f1785b6750b52e53655cf8", "extra_info": null, "node_info": {"start": 1279871, "end": 1283446}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e812b885-2381-4bd0-8c58-49f3615a8488", "3": "1e807694-1dd5-4180-890f-d5a8c2e9ca5b"}}, "__type__": "1"}, "1e807694-1dd5-4180-890f-d5a8c2e9ca5b": {"__data__": {"text": "exhibit this behavior as well: fs.writeFile(), fs.readFile(), etc.\n\nfs.opendir(path[, options], callback)#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nencoding <string> | <null> Default: 'utf8'\nbufferSize <number> Number of directory entries that are buffered internally when reading from the directory. Higher values lead to better performance but higher memory usage. Default: 32\ncallback <Function>\nerr <Error>\ndir <fs.Dir>\nAsynchronously open a directory. See the POSIX opendir(3) documentation for more details.\n\nCreates an <fs.Dir>, which contains all further functions for reading from and cleaning up the directory.\n\nThe encoding option sets the encoding for the path while opening the directory and subsequent read operations.\n\nfs.read(fd, buffer, offset, length, position, callback)#\nHistory\nfd <integer>\nbuffer <Buffer> | <TypedArray> | <DataView> The buffer that the data will be written to.\noffset <integer> The position in buffer to write the data to.\nlength <integer> The number of bytes to read.\nposition <integer> | <bigint> | <null> Specifies where to begin reading from in the file. If position is null or -1 , data will be read from the current file position, and the file position will be updated. If position is an integer, the file position will be unchanged.\ncallback <Function>\nerr <Error>\nbytesRead <integer>\nbuffer <Buffer>\nRead data from the file specified by fd.\n\nThe callback is given the three arguments, (err, bytesRead, buffer).\n\nIf the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.\n\nIf this method is invoked as its util.promisify()ed version, it returns a promise for an Object with bytesRead and buffer properties.\n\nfs.read(fd[, options], callback)#\nHistory\nfd <integer>\noptions <Object>\nbuffer <Buffer> | <TypedArray> | <DataView> Default: Buffer.alloc(16384)\noffset <integer> Default: 0\nlength <integer> Default: buffer.byteLength - offset\nposition <integer> | <bigint> | <null> Default: null\ncallback <Function>\nerr <Error>\nbytesRead <integer>\nbuffer <Buffer>\nSimilar to the fs.read() function, this version takes an optional options object. If no options object is specified, it will default with the above values.\n\nfs.read(fd, buffer[, options], callback)#\nAdded in: v18.2.0\nfd <integer>\nbuffer <Buffer> | <TypedArray> | <DataView> The buffer that the data will be written to.\noptions <Object>\noffset <integer> Default: 0\nlength <integer> Default: buffer.byteLength - offset\nposition <integer> | <bigint> Default: null\ncallback <Function>\nerr <Error>\nbytesRead <integer>\nbuffer <Buffer>\nSimilar to the fs.read() function, this version takes an optional options object. If no options object is specified, it will default with the above values.\n\nfs.readdir(path[, options], callback)#\nHistory\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\nwithFileTypes <boolean> Default: false\ncallback <Function>\nerr <Error>\nfiles <string[]> | <Buffer[]> | <fs.Dirent[]>\nReads the contents of a directory. The callback gets two arguments (err, files) where files is an array of the names of the files in the directory excluding '.' and '..'.\n\nSee the POSIX readdir(3) documentation for more details.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the filenames passed to the callback. If the encoding is set to 'buffer', the filenames returned will be passed as <Buffer> objects.\n\nIf options.withFileTypes is set to true, the files array will contain <fs.Dirent> objects.\n\nfs.readFile(path[, options], callback)#\nHistory\npath <string>", "doc_id": "1e807694-1dd5-4180-890f-d5a8c2e9ca5b", "embedding": null, "doc_hash": "a7160be8c09304d7d5fce1c62eeb3d11ff14ee954c744058e2dd7b3fd1efc372", "extra_info": null, "node_info": {"start": 1283486, "end": 1287170}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3743d99d-344e-4152-b48c-986d87b65724", "3": "d02f1baa-930f-466c-a8e5-899c0c06cfc9"}}, "__type__": "1"}, "d02f1baa-930f-466c-a8e5-899c0c06cfc9": {"__data__": {"text": "<string[]> | <Buffer[]> | <fs.Dirent[]>\nReads the contents of a directory. The callback gets two arguments (err, files) where files is an array of the names of the files in the directory excluding '.' and '..'.\n\nSee the POSIX readdir(3) documentation for more details.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the filenames passed to the callback. If the encoding is set to 'buffer', the filenames returned will be passed as <Buffer> objects.\n\nIf options.withFileTypes is set to true, the files array will contain <fs.Dirent> objects.\n\nfs.readFile(path[, options], callback)#\nHistory\npath <string> | <Buffer> | <URL> | <integer> filename or file descriptor\noptions <Object> | <string>\nencoding <string> | <null> Default: null\nflag <string> See support of file system flags. Default: 'r'.\nsignal <AbortSignal> allows aborting an in-progress readFile\ncallback <Function>\nerr <Error> | <AggregateError>\ndata <string> | <Buffer>\nAsynchronously reads the entire contents of a file.\n\nimport { readFile } from 'node:fs';\n\nreadFile('/etc/passwd', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\nThe callback is passed two arguments (err, data), where data is the contents of the file.\n\nIf no encoding is specified, then the raw buffer is returned.\n\nIf options is a string, then it specifies the encoding:\n\nimport { readFile } from 'node:fs';\n\nreadFile('/etc/passwd', 'utf8', callback);\nWhen the path is a directory, the behavior of fs.readFile() and fs.readFileSync() is platform-specific. On macOS, Linux, and Windows, an error will be returned. On FreeBSD, a representation of the directory's contents will be returned.\n\nimport { readFile } from 'node:fs';\n\n// macOS, Linux, and Windows\nreadFile('<directory>', (err, data) => {\n  // => [Error: EISDIR: illegal operation on a directory, read <directory>]\n});\n\n//  FreeBSD\nreadFile('<directory>', (err, data) => {\n  // => null, <data>\n});\nIt is possible to abort an ongoing request using an AbortSignal. If a request is aborted the callback is called with an AbortError:\n\nimport { readFile } from 'node:fs';\n\nconst controller = new AbortController();\nconst signal = controller.signal;\nreadFile(fileInfo[0].name, { signal }, (err, buf) => {\n  // ...\n});\n// When you want to abort the request\ncontroller.abort();\nThe fs.readFile() function buffers the entire file. To minimize memory costs, when possible prefer streaming via fs.createReadStream().\n\nAborting an ongoing request does not abort individual operating system requests but rather the internal buffering fs.readFile performs.\n\nFile descriptors#\nAny specified file descriptor has to support reading.\nIf a file descriptor is specified as the path, it will not be closed automatically.\nThe reading will begin at the current position. For example, if the file already had 'Hello World' and six bytes are read with the file descriptor, the call to fs.readFile() with the same file descriptor, would give 'World', rather than 'Hello World'.\nPerformance Considerations#\nThe fs.readFile() method asynchronously reads the contents of a file into memory one chunk at a time, allowing the event loop to turn between each chunk. This allows the read operation to have less impact on other activity that may be using the underlying libuv thread pool but means that it will take longer to read a complete file into memory.\n\nThe additional read overhead can vary broadly on different systems and depends on the type of file being read. If the file type is not a regular file (a pipe for instance) and Node.js is unable to determine an actual", "doc_id": "d02f1baa-930f-466c-a8e5-899c0c06cfc9", "embedding": null, "doc_hash": "42cb9612d604e31af5834a332f09e75cb4fbc037ad697f32112c72964a55d45a", "extra_info": null, "node_info": {"start": 1287209, "end": 1290865}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1e807694-1dd5-4180-890f-d5a8c2e9ca5b", "3": "c4e08ca5-4c1a-4a2b-aeee-533d8cebc18b"}}, "__type__": "1"}, "c4e08ca5-4c1a-4a2b-aeee-533d8cebc18b": {"__data__": {"text": "reading will begin at the current position. For example, if the file already had 'Hello World' and six bytes are read with the file descriptor, the call to fs.readFile() with the same file descriptor, would give 'World', rather than 'Hello World'.\nPerformance Considerations#\nThe fs.readFile() method asynchronously reads the contents of a file into memory one chunk at a time, allowing the event loop to turn between each chunk. This allows the read operation to have less impact on other activity that may be using the underlying libuv thread pool but means that it will take longer to read a complete file into memory.\n\nThe additional read overhead can vary broadly on different systems and depends on the type of file being read. If the file type is not a regular file (a pipe for instance) and Node.js is unable to determine an actual file size, each read operation will load on 64 KiB of data. For regular files, each read will process 512 KiB of data.\n\nFor applications that require as-fast-as-possible reading of file contents, it is better to use fs.read() directly and for application code to manage reading the full contents of the file itself.\n\nThe Node.js GitHub issue #25741 provides more information and a detailed analysis on the performance of fs.readFile() for multiple file sizes in different Node.js versions.\n\nfs.readlink(path[, options], callback)#\nHistory\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\ncallback <Function>\nerr <Error>\nlinkString <string> | <Buffer>\nReads the contents of the symbolic link referred to by path. The callback gets two arguments (err, linkString).\n\nSee the POSIX readlink(2) documentation for more details.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the link path passed to the callback. If the encoding is set to 'buffer', the link path returned will be passed as a <Buffer> object.\n\nfs.readv(fd, buffers[, position], callback)#\nHistory\nfd <integer>\nbuffers <ArrayBufferView[]>\nposition <integer> | <null> Default: null\ncallback <Function>\nerr <Error>\nbytesRead <integer>\nbuffers <ArrayBufferView[]>\nRead from a file specified by fd and write to an array of ArrayBufferViews using readv().\n\nposition is the offset from the beginning of the file from where data should be read. If typeof position !== 'number', the data will be read from the current position.\n\nThe callback will be given three arguments: err, bytesRead, and buffers. bytesRead is how many bytes were read from the file.\n\nIf this method is invoked as its util.promisify()ed version, it returns a promise for an Object with bytesRead and buffers properties.\n\nfs.realpath(path[, options], callback)#\nHistory\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\ncallback <Function>\nerr <Error>\nresolvedPath <string> | <Buffer>\nAsynchronously computes the canonical pathname by resolving ., .., and symbolic links.\n\nA canonical pathname is not necessarily unique. Hard links and bind mounts can expose a file system entity through many pathnames.\n\nThis function behaves like realpath(3), with some exceptions:\n\nNo case conversion is performed on case-insensitive file systems.\n\nThe maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports.\n\nThe callback gets two arguments (err, resolvedPath). May use process.cwd to resolve relative paths.\n\nOnly paths that can be converted to UTF8 strings are supported.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the path passed to the callback. If the encoding is set to 'buffer', the path returned will be passed as a <Buffer> object.\n\nIf path resolves", "doc_id": "c4e08ca5-4c1a-4a2b-aeee-533d8cebc18b", "embedding": null, "doc_hash": "24bbccc9755f8c874f1ac437f41f036ac3ced54dc732bb1f84ff42ee3460b837", "extra_info": null, "node_info": {"start": 1290776, "end": 1294680}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d02f1baa-930f-466c-a8e5-899c0c06cfc9", "3": "cd6d81f0-2483-4928-bc64-3bd0fcff95e7"}}, "__type__": "1"}, "cd6d81f0-2483-4928-bc64-3bd0fcff95e7": {"__data__": {"text": "can expose a file system entity through many pathnames.\n\nThis function behaves like realpath(3), with some exceptions:\n\nNo case conversion is performed on case-insensitive file systems.\n\nThe maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports.\n\nThe callback gets two arguments (err, resolvedPath). May use process.cwd to resolve relative paths.\n\nOnly paths that can be converted to UTF8 strings are supported.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the path passed to the callback. If the encoding is set to 'buffer', the path returned will be passed as a <Buffer> object.\n\nIf path resolves to a socket or a pipe, the function will return a system dependent name for that object.\n\nfs.realpath.native(path[, options], callback)#\nHistory\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\ncallback <Function>\nerr <Error>\nresolvedPath <string> | <Buffer>\nAsynchronous realpath(3).\n\nThe callback gets two arguments (err, resolvedPath).\n\nOnly paths that can be converted to UTF8 strings are supported.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the path passed to the callback. If the encoding is set to 'buffer', the path returned will be passed as a <Buffer> object.\n\nOn Linux, when Node.js is linked against musl libc, the procfs file system must be mounted on /proc in order for this function to work. Glibc does not have this restriction.\n\nfs.rename(oldPath, newPath, callback)#\nHistory\noldPath <string> | <Buffer> | <URL>\nnewPath <string> | <Buffer> | <URL>\ncallback <Function>\nerr <Error>\nAsynchronously rename file at oldPath to the pathname provided as newPath. In the case that newPath already exists, it will be overwritten. If there is a directory at newPath, an error will be raised instead. No arguments other than a possible exception are given to the completion callback.\n\nSee also: rename(2).\n\nimport { rename } from 'node:fs';\n\nrename('oldFile.txt', 'newFile.txt', (err) => {\n  if (err) throw err;\n  console.log('Rename complete!');\n});\nfs.rmdir(path[, options], callback)#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nmaxRetries <integer> If an EBUSY, EMFILE, ENFILE, ENOTEMPTY, or EPERM error is encountered, Node.js retries the operation with a linear backoff wait of retryDelay milliseconds longer on each try. This option represents the number of retries. This option is ignored if the recursive option is not true. Default: 0.\nrecursive <boolean> If true, perform a recursive directory removal. In recursive mode, operations are retried on failure. Default: false. Deprecated.\nretryDelay <integer> The amount of time in milliseconds to wait between retries. This option is ignored if the recursive option is not true. Default: 100.\ncallback <Function>\nerr <Error>\nAsynchronous rmdir(2). No arguments other than a possible exception are given to the completion callback.\n\nUsing fs.rmdir() on a file (not a directory) results in an ENOENT error on Windows and an ENOTDIR error on POSIX.\n\nTo get a behavior similar to the rm -rf Unix command, use fs.rm() with options { recursive: true, force: true }.\n\nfs.rm(path[, options], callback)#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nforce <boolean> When true, exceptions will be ignored if path does not exist. Default: false.\nmaxRetries <integer> If an EBUSY, EMFILE, ENFILE,", "doc_id": "cd6d81f0-2483-4928-bc64-3bd0fcff95e7", "embedding": null, "doc_hash": "2262de537d2da9f65a58ae674ae917f1acc9fcc05ea5aa8e41cd63588f78c9b2", "extra_info": null, "node_info": {"start": 1294697, "end": 1298326}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c4e08ca5-4c1a-4a2b-aeee-533d8cebc18b", "3": "dc2716c7-0ed5-46e3-b8ab-eab0bcbdd0c6"}}, "__type__": "1"}, "dc2716c7-0ed5-46e3-b8ab-eab0bcbdd0c6": {"__data__": {"text": "option is ignored if the recursive option is not true. Default: 100.\ncallback <Function>\nerr <Error>\nAsynchronous rmdir(2). No arguments other than a possible exception are given to the completion callback.\n\nUsing fs.rmdir() on a file (not a directory) results in an ENOENT error on Windows and an ENOTDIR error on POSIX.\n\nTo get a behavior similar to the rm -rf Unix command, use fs.rm() with options { recursive: true, force: true }.\n\nfs.rm(path[, options], callback)#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nforce <boolean> When true, exceptions will be ignored if path does not exist. Default: false.\nmaxRetries <integer> If an EBUSY, EMFILE, ENFILE, ENOTEMPTY, or EPERM error is encountered, Node.js will retry the operation with a linear backoff wait of retryDelay milliseconds longer on each try. This option represents the number of retries. This option is ignored if the recursive option is not true. Default: 0.\nrecursive <boolean> If true, perform a recursive removal. In recursive mode operations are retried on failure. Default: false.\nretryDelay <integer> The amount of time in milliseconds to wait between retries. This option is ignored if the recursive option is not true. Default: 100.\ncallback <Function>\nerr <Error>\nAsynchronously removes files and directories (modeled on the standard POSIX rm utility). No arguments other than a possible exception are given to the completion callback.\n\nfs.stat(path[, options], callback)#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nbigint <boolean> Whether the numeric values in the returned <fs.Stats> object should be bigint. Default: false.\ncallback <Function>\nerr <Error>\nstats <fs.Stats>\nAsynchronous stat(2). The callback gets two arguments (err, stats) where stats is an <fs.Stats> object.\n\nIn case of an error, the err.code will be one of Common System Errors.\n\nUsing fs.stat() to check for the existence of a file before calling fs.open(), fs.readFile(), or fs.writeFile() is not recommended. Instead, user code should open/read/write the file directly and handle the error raised if the file is not available.\n\nTo check if a file exists without manipulating it afterwards, fs.access() is recommended.\n\nFor example, given the following directory structure:\n\n- txtDir\n-- file.txt\n- app.js\nThe next program will check for the stats of the given paths:\n\nimport { stat } from 'node:fs';\n\nconst pathsToCheck = ['./txtDir', './txtDir/file.txt'];\n\nfor (let i = 0; i < pathsToCheck.length; i++) {\n  stat(pathsToCheck[i], (err, stats) => {\n    console.log(stats.isDirectory());\n    console.log(stats);\n  });\n}\nThe resulting output will resemble:\n\ntrue\nStats {\n  dev: 16777220,\n  mode: 16877,\n  nlink: 3,\n  uid: 501,\n  gid: 20,\n  rdev: 0,\n  blksize: 4096,\n  ino: 14214262,\n  size: 96,\n  blocks: 0,\n  atimeMs: 1561174653071.963,\n  mtimeMs: 1561174614583.3518,\n  ctimeMs: 1561174626623.5366,\n  birthtimeMs: 1561174126937.2893,\n  atime: 2019-06-22T03:37:33.072Z,\n  mtime: 2019-06-22T03:36:54.583Z,\n  ctime: 2019-06-22T03:37:06.624Z,\n  birthtime: 2019-06-22T03:28:46.937Z\n}\nfalse\nStats {\n  dev: 16777220,\n  mode: 33188,\n  nlink: 1,\n", "doc_id": "dc2716c7-0ed5-46e3-b8ab-eab0bcbdd0c6", "embedding": null, "doc_hash": "6bf550c667560dce1c0fe9af2b92d790a650288bf95cd2ed1698eb2e801ac02b", "extra_info": null, "node_info": {"start": 1298433, "end": 1301549}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cd6d81f0-2483-4928-bc64-3bd0fcff95e7", "3": "13b7e691-8e3f-4d79-9c1b-0aefce5d45ea"}}, "__type__": "1"}, "13b7e691-8e3f-4d79-9c1b-0aefce5d45ea": {"__data__": {"text": "4096,\n  ino: 14214262,\n  size: 96,\n  blocks: 0,\n  atimeMs: 1561174653071.963,\n  mtimeMs: 1561174614583.3518,\n  ctimeMs: 1561174626623.5366,\n  birthtimeMs: 1561174126937.2893,\n  atime: 2019-06-22T03:37:33.072Z,\n  mtime: 2019-06-22T03:36:54.583Z,\n  ctime: 2019-06-22T03:37:06.624Z,\n  birthtime: 2019-06-22T03:28:46.937Z\n}\nfalse\nStats {\n  dev: 16777220,\n  mode: 33188,\n  nlink: 1,\n  uid: 501,\n  gid: 20,\n  rdev: 0,\n  blksize: 4096,\n  ino: 14214074,\n  size: 8,\n  blocks: 8,\n  atimeMs: 1561174616618.8555,\n  mtimeMs: 1561174614584,\n  ctimeMs: 1561174614583.8145,\n  birthtimeMs: 1561174007710.7478,\n  atime: 2019-06-22T03:36:56.619Z,\n  mtime: 2019-06-22T03:36:54.584Z,\n  ctime: 2019-06-22T03:36:54.584Z,\n  birthtime: 2019-06-22T03:26:47.711Z\n}\nfs.statfs(path[, options], callback)#\nAdded in: v18.15.0\npath <string> | <Buffer> | <URL>\noptions <Object>\nbigint <boolean> Whether the numeric values in the returned <fs.StatFs> object should be bigint. Default: false.\ncallback <Function>\nerr <Error>\nstats <fs.StatFs>\nAsynchronous statfs(2). Returns information about the mounted file system which contains path. The callback gets two arguments (err, stats) where stats is an <fs.StatFs> object.\n\nIn case of an error, the err.code will be one of Common System Errors.\n\nfs.symlink(target, path[, type], callback)#\nHistory\ntarget <string> | <Buffer> | <URL>\npath <string> | <Buffer> | <URL>\ntype <string> | <null> Default: null\ncallback <Function>\nerr <Error>\nCreates the link called path pointing to target. No arguments other than a possible exception are given to the completion callback.\n\nSee the POSIX symlink(2) documentation for more details.\n\nThe type argument is only available on Windows and ignored on other platforms. It can be set to 'dir', 'file', or 'junction'. If the type argument is not a string, Node.js will autodetect target type and use 'file' or 'dir'. If the target does not exist, 'file' will be used. Windows junction points require the destination path to be absolute. When using 'junction', the target argument will automatically be normalized to absolute path.\n\nRelative targets are relative to the link's parent directory.\n\nimport { symlink } from 'node:fs';\n\nsymlink('./mew', './mewtwo', callback);\nThe above example creates a symbolic link mewtwo which points to mew in the same directory:\n\n$ tree .\n.\n\u251c\u2500\u2500 mew\n\u2514\u2500\u2500 mewtwo -> ./mew\nfs.truncate(path[, len], callback)#\nHistory\npath <string> | <Buffer> | <URL>\nlen <integer> Default: 0\ncallback <Function>\nerr <Error> | <AggregateError>\nTruncates the file. No arguments other than a possible exception are given to the completion callback. A file descriptor can also be passed as the first argument. In this case, fs.ftruncate() is called.\n\nimport { truncate } from 'node:fs';\n// Assuming that 'path/file.txt' is a regular file.\ntruncate('path/file.txt', (err) => {\n  if", "doc_id": "13b7e691-8e3f-4d79-9c1b-0aefce5d45ea", "embedding": null, "doc_hash": "0dbdc60350cd6266d90cf5ad962ffa55ef18e3902f9ad64c6adf06e8f556f1af", "extra_info": null, "node_info": {"start": 1301792, "end": 1304628}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dc2716c7-0ed5-46e3-b8ab-eab0bcbdd0c6", "3": "f3dbe722-c33f-495f-9c8c-1fe59afc859c"}}, "__type__": "1"}, "f3dbe722-c33f-495f-9c8c-1fe59afc859c": {"__data__": {"text": "a symbolic link mewtwo which points to mew in the same directory:\n\n$ tree .\n.\n\u251c\u2500\u2500 mew\n\u2514\u2500\u2500 mewtwo -> ./mew\nfs.truncate(path[, len], callback)#\nHistory\npath <string> | <Buffer> | <URL>\nlen <integer> Default: 0\ncallback <Function>\nerr <Error> | <AggregateError>\nTruncates the file. No arguments other than a possible exception are given to the completion callback. A file descriptor can also be passed as the first argument. In this case, fs.ftruncate() is called.\n\nimport { truncate } from 'node:fs';\n// Assuming that 'path/file.txt' is a regular file.\ntruncate('path/file.txt', (err) => {\n  if (err) throw err;\n  console.log('path/file.txt was truncated');\n});\nPassing a file descriptor is deprecated and may result in an error being thrown in the future.\n\nSee the POSIX truncate(2) documentation for more details.\n\nfs.unlink(path, callback)#\nHistory\npath <string> | <Buffer> | <URL>\ncallback <Function>\nerr <Error>\nAsynchronously removes a file or symbolic link. No arguments other than a possible exception are given to the completion callback.\n\nimport { unlink } from 'node:fs';\n// Assuming that 'path/file.txt' is a regular file.\nunlink('path/file.txt', (err) => {\n  if (err) throw err;\n  console.log('path/file.txt was deleted');\n});\nfs.unlink() will not work on a directory, empty or otherwise. To remove a directory, use fs.rmdir().\n\nSee the POSIX unlink(2) documentation for more details.\n\nfs.unwatchFile(filename[, listener])#\nAdded in: v0.1.31\nfilename <string> | <Buffer> | <URL>\nlistener <Function> Optional, a listener previously attached using fs.watchFile()\nStop watching for changes on filename. If listener is specified, only that particular listener is removed. Otherwise, all listeners are removed, effectively stopping watching of filename.\n\nCalling fs.unwatchFile() with a filename that is not being watched is a no-op, not an error.\n\nUsing fs.watch() is more efficient than fs.watchFile() and fs.unwatchFile(). fs.watch() should be used instead of fs.watchFile() and fs.unwatchFile() when possible.\n\nfs.utimes(path, atime, mtime, callback)#\nHistory\npath <string> | <Buffer> | <URL>\natime <number> | <string> | <Date>\nmtime <number> | <string> | <Date>\ncallback <Function>\nerr <Error>\nChange the file system timestamps of the object referenced by path.\n\nThe atime and mtime arguments follow these rules:\n\nValues can be either numbers representing Unix epoch time in seconds, Dates, or a numeric string like '123456789.0'.\nIf the value can not be converted to a number, or is NaN, Infinity, or -Infinity, an Error will be thrown.\nfs.watch(filename[, options][, listener])#\nHistory\nfilename <string> | <Buffer> | <URL>\noptions <string> | <Object>\npersistent <boolean> Indicates whether the process should continue to run as long as files are being watched. Default: true.\nrecursive <boolean> Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See caveats). Default: false.\nencoding <string> Specifies the character encoding to be used for the filename passed to the listener. Default: 'utf8'.\nsignal <AbortSignal> allows closing the watcher with an AbortSignal.\nlistener <Function> | <undefined> Default: undefined\neventType <string>\nfilename <string> | <Buffer>\nReturns: <fs.FSWatcher>\nWatch for changes on filename, where filename is either a file or a", "doc_id": "f3dbe722-c33f-495f-9c8c-1fe59afc859c", "embedding": null, "doc_hash": "07e135d4df74c9ef89b3682bcc6e214a8e4e470ed1cb0224804069e0b9bd8225", "extra_info": null, "node_info": {"start": 1304452, "end": 1307837}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "13b7e691-8e3f-4d79-9c1b-0aefce5d45ea", "3": "f612ff83-94d3-49c3-b874-1669b37bec02"}}, "__type__": "1"}, "f612ff83-94d3-49c3-b874-1669b37bec02": {"__data__": {"text": "| <URL>\noptions <string> | <Object>\npersistent <boolean> Indicates whether the process should continue to run as long as files are being watched. Default: true.\nrecursive <boolean> Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See caveats). Default: false.\nencoding <string> Specifies the character encoding to be used for the filename passed to the listener. Default: 'utf8'.\nsignal <AbortSignal> allows closing the watcher with an AbortSignal.\nlistener <Function> | <undefined> Default: undefined\neventType <string>\nfilename <string> | <Buffer>\nReturns: <fs.FSWatcher>\nWatch for changes on filename, where filename is either a file or a directory.\n\nThe second argument is optional. If options is provided as a string, it specifies the encoding. Otherwise options should be passed as an object.\n\nThe listener callback gets two arguments (eventType, filename). eventType is either 'rename' or 'change', and filename is the name of the file which triggered the event.\n\nOn most platforms, 'rename' is emitted whenever a filename appears or disappears in the directory.\n\nThe listener callback is attached to the 'change' event fired by <fs.FSWatcher>, but it is not the same thing as the 'change' value of eventType.\n\nIf a signal is passed, aborting the corresponding AbortController will close the returned <fs.FSWatcher>.\n\nCaveats#\nThe fs.watch API is not 100% consistent across platforms, and is unavailable in some situations.\n\nThe recursive option is only supported on macOS and Windows. An ERR_FEATURE_UNAVAILABLE_ON_PLATFORM exception will be thrown when the option is used on a platform that does not support it.\n\nOn Windows, no events will be emitted if the watched directory is moved or renamed. An EPERM error is reported when the watched directory is deleted.\n\nAvailability#\nThis feature depends on the underlying operating system providing a way to be notified of file system changes.\n\nOn Linux systems, this uses inotify(7).\nOn BSD systems, this uses kqueue(2).\nOn macOS, this uses kqueue(2) for files and FSEvents for directories.\nOn SunOS systems (including Solaris and SmartOS), this uses event ports.\nOn Windows systems, this feature depends on ReadDirectoryChangesW.\nOn AIX systems, this feature depends on AHAFS, which must be enabled.\nOn IBM i systems, this feature is not supported.\nIf the underlying functionality is not available for some reason, then fs.watch() will not be able to function and may throw an exception. For example, watching files or directories can be unreliable, and in some cases impossible, on network file systems (NFS, SMB, etc) or host file systems when using virtualization software such as Vagrant or Docker.\n\nIt is still possible to use fs.watchFile(), which uses stat polling, but this method is slower and less reliable.\n\nInodes#\nOn Linux and macOS systems, fs.watch() resolves the path to an inode and watches the inode. If the watched path is deleted and recreated, it is assigned a new inode. The watch will emit an event for the delete but will continue watching the original inode. Events for the new inode will not be emitted. This is expected behavior.\n\nAIX files retain the same inode for the lifetime of a file. Saving and closing a watched file on AIX will result in two notifications (one for adding new content, and one for truncation).\n\nFilename argument#\nProviding filename argument in the callback is only supported on Linux, macOS, Windows, and AIX. Even on supported platforms, filename is not always guaranteed to be provided. Therefore, don't assume that filename argument is always provided in the callback, and have some fallback logic if it is null.\n\nimport { watch } from 'node:fs';\nwatch('somedir', (eventType, filename) => {\n  console.log(`event type is:", "doc_id": "f612ff83-94d3-49c3-b874-1669b37bec02", "embedding": null, "doc_hash": "3896719a49d76d9af0df521e4d65183319a63107078a6623f4071017d089521b", "extra_info": null, "node_info": {"start": 1307692, "end": 1311539}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f3dbe722-c33f-495f-9c8c-1fe59afc859c", "3": "268b44ee-a70f-4a4f-a901-4386bdb361ec"}}, "__type__": "1"}, "268b44ee-a70f-4a4f-a901-4386bdb361ec": {"__data__": {"text": "The watch will emit an event for the delete but will continue watching the original inode. Events for the new inode will not be emitted. This is expected behavior.\n\nAIX files retain the same inode for the lifetime of a file. Saving and closing a watched file on AIX will result in two notifications (one for adding new content, and one for truncation).\n\nFilename argument#\nProviding filename argument in the callback is only supported on Linux, macOS, Windows, and AIX. Even on supported platforms, filename is not always guaranteed to be provided. Therefore, don't assume that filename argument is always provided in the callback, and have some fallback logic if it is null.\n\nimport { watch } from 'node:fs';\nwatch('somedir', (eventType, filename) => {\n  console.log(`event type is: ${eventType}`);\n  if (filename) {\n    console.log(`filename provided: ${filename}`);\n  } else {\n    console.log('filename not provided');\n  }\n});\nfs.watchFile(filename[, options], listener)#\nHistory\nfilename <string> | <Buffer> | <URL>\noptions <Object>\nbigint <boolean> Default: false\npersistent <boolean> Default: true\ninterval <integer> Default: 5007\nlistener <Function>\ncurrent <fs.Stats>\nprevious <fs.Stats>\nReturns: <fs.StatWatcher>\nWatch for changes on filename. The callback listener will be called each time the file is accessed.\n\nThe options argument may be omitted. If provided, it should be an object. The options object may contain a boolean named persistent that indicates whether the process should continue to run as long as files are being watched. The options object may specify an interval property indicating how often the target should be polled in milliseconds.\n\nThe listener gets two arguments the current stat object and the previous stat object:\n\nimport { watchFile } from 'node:fs';\n\nwatchFile('message.text', (curr, prev) => {\n  console.log(`the current mtime is: ${curr.mtime}`);\n  console.log(`the previous mtime was: ${prev.mtime}`);\n});\nThese stat objects are instances of fs.Stat. If the bigint option is true, the numeric values in these objects are specified as BigInts.\n\nTo be notified when the file was modified, not just accessed, it is necessary to compare curr.mtimeMs and prev.mtimeMs.\n\nWhen an fs.watchFile operation results in an ENOENT error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch). If the file is created later on, the listener will be called again, with the latest stat objects. This is a change in functionality since v0.10.\n\nUsing fs.watch() is more efficient than fs.watchFile and fs.unwatchFile. fs.watch should be used instead of fs.watchFile and fs.unwatchFile when possible.\n\nWhen a file being watched by fs.watchFile() disappears and reappears, then the contents of previous in the second callback event (the file's reappearance) will be the same as the contents of previous in the first callback event (its disappearance).\n\nThis happens when:\n\nthe file is deleted, followed by a restore\nthe file is renamed and then renamed a second time back to its original name\nfs.write(fd, buffer, offset[, length[, position]], callback)#\nHistory\nfd <integer>\nbuffer <Buffer> | <TypedArray> | <DataView>\noffset <integer> Default: 0\nlength <integer> Default: buffer.byteLength - offset\nposition <integer> | <null> Default: null\ncallback <Function>\nerr <Error>\nbytesWritten <integer>\nbuffer <Buffer> | <TypedArray> | <DataView>\nWrite buffer to the file specified by fd.\n\noffset determines the part of the buffer to be written, and length is an integer specifying the number of bytes to write.\n\nposition refers to the offset from the beginning of the file where this data should be written. If typeof position !== 'number', the data will be written at the current position. See", "doc_id": "268b44ee-a70f-4a4f-a901-4386bdb361ec", "embedding": null, "doc_hash": "f37de836953a25749c066228aec032f92f05ea49d2d79ef0a8cbdf6ed970e117", "extra_info": null, "node_info": {"start": 1311537, "end": 1315289}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f612ff83-94d3-49c3-b874-1669b37bec02", "3": "9614fc88-f8f2-41f0-b09d-f77f493fba02"}}, "__type__": "1"}, "9614fc88-f8f2-41f0-b09d-f77f493fba02": {"__data__": {"text": "renamed a second time back to its original name\nfs.write(fd, buffer, offset[, length[, position]], callback)#\nHistory\nfd <integer>\nbuffer <Buffer> | <TypedArray> | <DataView>\noffset <integer> Default: 0\nlength <integer> Default: buffer.byteLength - offset\nposition <integer> | <null> Default: null\ncallback <Function>\nerr <Error>\nbytesWritten <integer>\nbuffer <Buffer> | <TypedArray> | <DataView>\nWrite buffer to the file specified by fd.\n\noffset determines the part of the buffer to be written, and length is an integer specifying the number of bytes to write.\n\nposition refers to the offset from the beginning of the file where this data should be written. If typeof position !== 'number', the data will be written at the current position. See pwrite(2).\n\nThe callback will be given three arguments (err, bytesWritten, buffer) where bytesWritten specifies how many bytes were written from buffer.\n\nIf this method is invoked as its util.promisify()ed version, it returns a promise for an Object with bytesWritten and buffer properties.\n\nIt is unsafe to use fs.write() multiple times on the same file without waiting for the callback. For this scenario, fs.createWriteStream() is recommended.\n\nOn Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.\n\nfs.write(fd, buffer[, options], callback)#\nAdded in: v18.3.0\nfd <integer>\nbuffer <Buffer> | <TypedArray> | <DataView>\noptions <Object>\noffset <integer> Default: 0\nlength <integer> Default: buffer.byteLength - offset\nposition <integer> Default: null\ncallback <Function>\nerr <Error>\nbytesWritten <integer>\nbuffer <Buffer> | <TypedArray> | <DataView>\nWrite buffer to the file specified by fd.\n\nSimilar to the above fs.write function, this version takes an optional options object. If no options object is specified, it will default with the above values.\n\nfs.write(fd, string[, position[, encoding]], callback)#\nHistory\nfd <integer>\nstring <string> | <Object>\nposition <integer> | <null> Default: null\nencoding <string> Default: 'utf8'\ncallback <Function>\nerr <Error>\nwritten <integer>\nstring <string>\nWrite string to the file specified by fd. If string is not a string, or an object with an own toString function property, then an exception is thrown.\n\nposition refers to the offset from the beginning of the file where this data should be written. If typeof position !== 'number' the data will be written at the current position. See pwrite(2).\n\nencoding is the expected string encoding.\n\nThe callback will receive the arguments (err, written, string) where written specifies how many bytes the passed string required to be written. Bytes written is not necessarily the same as string characters written. See Buffer.byteLength.\n\nIt is unsafe to use fs.write() multiple times on the same file without waiting for the callback. For this scenario, fs.createWriteStream() is recommended.\n\nOn Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.\n\nOn Windows, if the file descriptor is connected to the console (e.g. fd == 1 or stdout) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used. It is possible to configure the console to render UTF-8 properly by changing the active codepage with the chcp 65001 command. See the chcp docs for more details.\n\nfs.writeFile(file, data[, options], callback)#\nHistory\nfile <string> | <Buffer> | <URL> | <integer> filename or file descriptor\ndata <string> | <Buffer> | <TypedArray> | <DataView> | <Object>\noptions <Object> | <string>\nencoding <string> | <null> Default: 'utf8'\nmode <integer> Default: 0o666\nflag <string> See support of", "doc_id": "9614fc88-f8f2-41f0-b09d-f77f493fba02", "embedding": null, "doc_hash": "6e2d8fbc52f03c64475a7c3345c79f72539484aaf23913e52a1c7652cc0299dc", "extra_info": null, "node_info": {"start": 1315305, "end": 1319117}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "268b44ee-a70f-4a4f-a901-4386bdb361ec", "3": "44d15e2f-b35a-4caf-9f92-f9a69bbaae1b"}}, "__type__": "1"}, "44d15e2f-b35a-4caf-9f92-f9a69bbaae1b": {"__data__": {"text": "if the file descriptor is connected to the console (e.g. fd == 1 or stdout) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used. It is possible to configure the console to render UTF-8 properly by changing the active codepage with the chcp 65001 command. See the chcp docs for more details.\n\nfs.writeFile(file, data[, options], callback)#\nHistory\nfile <string> | <Buffer> | <URL> | <integer> filename or file descriptor\ndata <string> | <Buffer> | <TypedArray> | <DataView> | <Object>\noptions <Object> | <string>\nencoding <string> | <null> Default: 'utf8'\nmode <integer> Default: 0o666\nflag <string> See support of file system flags. Default: 'w'.\nsignal <AbortSignal> allows aborting an in-progress writeFile\ncallback <Function>\nerr <Error> | <AggregateError>\nWhen file is a filename, asynchronously writes data to the file, replacing the file if it already exists. data can be a string or a buffer.\n\nWhen file is a file descriptor, the behavior is similar to calling fs.write() directly (which is recommended). See the notes below on using a file descriptor.\n\nThe encoding option is ignored if data is a buffer.\n\nThe mode option only affects the newly created file. See fs.open() for more details.\n\nimport { writeFile } from 'node:fs';\nimport { Buffer } from 'node:buffer';\n\nconst data = new Uint8Array(Buffer.from('Hello Node.js'));\nwriteFile('message.txt', data, (err) => {\n  if (err) throw err;\n  console.log('The file has been saved!');\n});\nIf options is a string, then it specifies the encoding:\n\nimport { writeFile } from 'node:fs';\n\nwriteFile('message.txt', 'Hello Node.js', 'utf8', callback);\nIt is unsafe to use fs.writeFile() multiple times on the same file without waiting for the callback. For this scenario, fs.createWriteStream() is recommended.\n\nSimilarly to fs.readFile - fs.writeFile is a convenience method that performs multiple write calls internally to write the buffer passed to it. For performance sensitive code consider using fs.createWriteStream().\n\nIt is possible to use an <AbortSignal> to cancel an fs.writeFile(). Cancelation is \"best effort\", and some amount of data is likely still to be written.\n\nimport { writeFile } from 'node:fs';\nimport { Buffer } from 'node:buffer';\n\nconst controller = new AbortController();\nconst { signal } = controller;\nconst data = new Uint8Array(Buffer.from('Hello Node.js'));\nwriteFile('message.txt', data, { signal }, (err) => {\n  // When a request is aborted - the callback is called with an AbortError\n});\n// When the request should be aborted\ncontroller.abort();\nAborting an ongoing request does not abort individual operating system requests but rather the internal buffering fs.writeFile performs.\n\nUsing fs.writeFile() with file descriptors#\nWhen file is a file descriptor, the behavior is almost identical to directly calling fs.write() like:\n\nimport { write } from 'node:fs';\nimport { Buffer } from 'node:buffer';\n\nwrite(fd, Buffer.from(data, options.encoding), callback);\nThe difference from directly calling fs.write() is that under some unusual conditions, fs.write() might write only part of the buffer and need to be retried to write the remaining data, whereas fs.writeFile() retries until the data is entirely written (or an error occurs).\n\nThe implications of this are a common source of confusion. In the file descriptor case, the file is not replaced! The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data.\n\nFor example, if fs.writeFile() is called twice in a row, first to write the string 'Hello', then to write the string", "doc_id": "44d15e2f-b35a-4caf-9f92-f9a69bbaae1b", "embedding": null, "doc_hash": "0d853e7924ce9880323e3a7b5e0064510e34b354e38c1e555dd47ce8032afcb5", "extra_info": null, "node_info": {"start": 1319185, "end": 1322849}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9614fc88-f8f2-41f0-b09d-f77f493fba02", "3": "70b1d576-527d-407d-a6e5-7e400fcb36cc"}}, "__type__": "1"}, "70b1d576-527d-407d-a6e5-7e400fcb36cc": {"__data__": {"text": "{ Buffer } from 'node:buffer';\n\nwrite(fd, Buffer.from(data, options.encoding), callback);\nThe difference from directly calling fs.write() is that under some unusual conditions, fs.write() might write only part of the buffer and need to be retried to write the remaining data, whereas fs.writeFile() retries until the data is entirely written (or an error occurs).\n\nThe implications of this are a common source of confusion. In the file descriptor case, the file is not replaced! The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data.\n\nFor example, if fs.writeFile() is called twice in a row, first to write the string 'Hello', then to write the string ', World', the file would contain 'Hello, World', and might contain some of the file's original data (depending on the size of the original file, and the position of the file descriptor). If a file name had been used instead of a descriptor, the file would be guaranteed to contain only ', World'.\n\nfs.writev(fd, buffers[, position], callback)#\nHistory\nfd <integer>\nbuffers <ArrayBufferView[]>\nposition <integer> | <null> Default: null\ncallback <Function>\nerr <Error>\nbytesWritten <integer>\nbuffers <ArrayBufferView[]>\nWrite an array of ArrayBufferViews to the file specified by fd using writev().\n\nposition is the offset from the beginning of the file where this data should be written. If typeof position !== 'number', the data will be written at the current position.\n\nThe callback will be given three arguments: err, bytesWritten, and buffers. bytesWritten is how many bytes were written from buffers.\n\nIf this method is util.promisify()ed, it returns a promise for an Object with bytesWritten and buffers properties.\n\nIt is unsafe to use fs.writev() multiple times on the same file without waiting for the callback. For this scenario, use fs.createWriteStream().\n\nOn Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.\n\nSynchronous API#\nThe synchronous APIs perform all operations synchronously, blocking the event loop until the operation completes or fails.\n\nfs.accessSync(path[, mode])#\nHistory\npath <string> | <Buffer> | <URL>\nmode <integer> Default: fs.constants.F_OK\nSynchronously tests a user's permissions for the file or directory specified by path. The mode argument is an optional integer that specifies the accessibility checks to be performed. mode should be either the value fs.constants.F_OK or a mask consisting of the bitwise OR of any of fs.constants.R_OK, fs.constants.W_OK, and fs.constants.X_OK (e.g. fs.constants.W_OK | fs.constants.R_OK). Check File access constants for possible values of mode.\n\nIf any of the accessibility checks fail, an Error will be thrown. Otherwise, the method will return undefined.\n\nimport { accessSync, constants } from 'node:fs';\n\ntry {\n  accessSync('etc/passwd', constants.R_OK | constants.W_OK);\n  console.log('can read/write');\n} catch (err) {\n  console.error('no access!');\n}\nfs.appendFileSync(path, data[, options])#\nHistory\npath <string> | <Buffer> | <URL> | <number> filename or file descriptor\ndata <string> | <Buffer>\noptions <Object> | <string>\nencoding <string> | <null> Default: 'utf8'\nmode <integer> Default: 0o666\nflag <string> See support of file system flags. Default: 'a'.\nSynchronously append data to a file, creating the file if it does not yet exist. data can be a string or a <Buffer>.\n\nThe mode option only affects the newly created file. See fs.open() for more details.\n\nimport { appendFileSync } from 'node:fs';\n\ntry {\n ", "doc_id": "70b1d576-527d-407d-a6e5-7e400fcb36cc", "embedding": null, "doc_hash": "f8f78b35431e1344f49bd86775116ef9c6a21eecbc02d34c870ff06a50e5b117", "extra_info": null, "node_info": {"start": 1322797, "end": 1326461}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "44d15e2f-b35a-4caf-9f92-f9a69bbaae1b", "3": "44386ce8-53a4-43ec-a215-c6dca675a35d"}}, "__type__": "1"}, "44386ce8-53a4-43ec-a215-c6dca675a35d": {"__data__": {"text": "read/write');\n} catch (err) {\n  console.error('no access!');\n}\nfs.appendFileSync(path, data[, options])#\nHistory\npath <string> | <Buffer> | <URL> | <number> filename or file descriptor\ndata <string> | <Buffer>\noptions <Object> | <string>\nencoding <string> | <null> Default: 'utf8'\nmode <integer> Default: 0o666\nflag <string> See support of file system flags. Default: 'a'.\nSynchronously append data to a file, creating the file if it does not yet exist. data can be a string or a <Buffer>.\n\nThe mode option only affects the newly created file. See fs.open() for more details.\n\nimport { appendFileSync } from 'node:fs';\n\ntry {\n  appendFileSync('message.txt', 'data to append');\n  console.log('The \"data to append\" was appended to file!');\n} catch (err) {\n  /* Handle the error */\n}\nIf options is a string, then it specifies the encoding:\n\nimport { appendFileSync } from 'node:fs';\n\nappendFileSync('message.txt', 'data to append', 'utf8');\nThe path may be specified as a numeric file descriptor that has been opened for appending (using fs.open() or fs.openSync()). The file descriptor will not be closed automatically.\n\nimport { openSync, closeSync, appendFileSync } from 'node:fs';\n\nlet fd;\n\ntry {\n  fd = openSync('message.txt', 'a');\n  appendFileSync(fd, 'data to append', 'utf8');\n} catch (err) {\n  /* Handle the error */\n} finally {\n  if (fd !== undefined)\n    closeSync(fd);\n}\nfs.chmodSync(path, mode)#\nHistory\npath <string> | <Buffer> | <URL>\nmode <string> | <integer>\nFor detailed information, see the documentation of the asynchronous version of this API: fs.chmod().\n\nSee the POSIX chmod(2) documentation for more detail.\n\nfs.chownSync(path, uid, gid)#\nHistory\npath <string> | <Buffer> | <URL>\nuid <integer>\ngid <integer>\nSynchronously changes owner and group of a file. Returns undefined. This is the synchronous version of fs.chown().\n\nSee the POSIX chown(2) documentation for more detail.\n\nfs.closeSync(fd)#\nAdded in: v0.1.21\nfd <integer>\nCloses the file descriptor. Returns undefined.\n\nCalling fs.closeSync() on any file descriptor (fd) that is currently in use through any other fs operation may lead to undefined behavior.\n\nSee the POSIX close(2) documentation for more detail.\n\nfs.copyFileSync(src, dest[, mode])#\nHistory\nsrc <string> | <Buffer> | <URL> source filename to copy\ndest <string> | <Buffer> | <URL> destination filename of the copy operation\nmode <integer> modifiers for copy operation. Default: 0.\nSynchronously copies src to dest. By default, dest is overwritten if it already exists. Returns undefined. Node.js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.js will attempt to remove the destination.\n\nmode is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE).\n\nfs.constants.COPYFILE_EXCL: The copy operation will fail if dest already exists.\nfs.constants.COPYFILE_FICLONE: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used.\nfs.constants.COPYFILE_FICLONE_FORCE: The copy operation will attempt to create a", "doc_id": "44386ce8-53a4-43ec-a215-c6dca675a35d", "embedding": null, "doc_hash": "cdc5090939d5914bf0812b14bbf37e755b1a35ee8bd31dcdd8cb0b24561d3199", "extra_info": null, "node_info": {"start": 1326551, "end": 1329856}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "70b1d576-527d-407d-a6e5-7e400fcb36cc", "3": "91bb3e2e-aec1-4958-b256-c75d0f52f799"}}, "__type__": "1"}, "91bb3e2e-aec1-4958-b256-c75d0f52f799": {"__data__": {"text": "has been opened for writing, Node.js will attempt to remove the destination.\n\nmode is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE).\n\nfs.constants.COPYFILE_EXCL: The copy operation will fail if dest already exists.\nfs.constants.COPYFILE_FICLONE: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used.\nfs.constants.COPYFILE_FICLONE_FORCE: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.\nimport { copyFileSync, constants } from 'node:fs';\n\n// destination.txt will be created or overwritten by default.\ncopyFileSync('source.txt', 'destination.txt');\nconsole.log('source.txt was copied to destination.txt');\n\n// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\ncopyFileSync('source.txt', 'destination.txt', constants.COPYFILE_EXCL);\nfs.cpSync(src, dest[, options])#\nHistory\nStability: 1 - Experimental\nsrc <string> | <URL> source path to copy.\ndest <string> | <URL> destination path to copy to.\noptions <Object>\ndereference <boolean> dereference symlinks. Default: false.\nerrorOnExist <boolean> when force is false, and the destination exists, throw an error. Default: false.\nfilter <Function> Function to filter copied files/directories. Return true to copy the item, false to ignore it. Default: undefined\nsrc <string> source path to copy.\ndest <string> destination path to copy to.\nReturns: <boolean>\nforce <boolean> overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists. Use the errorOnExist option to change this behavior. Default: true.\npreserveTimestamps <boolean> When true timestamps from src will be preserved. Default: false.\nrecursive <boolean> copy directories recursively Default: false\nverbatimSymlinks <boolean> When true, path resolution for symlinks will be skipped. Default: false\nSynchronously copies the entire directory structure from src to dest, including subdirectories and files.\n\nWhen copying a directory to another directory, globs are not supported and behavior is similar to cp dir1/ dir2/.\n\nfs.existsSync(path)#\nHistory\npath <string> | <Buffer> | <URL>\nReturns: <boolean>\nReturns true if the path exists, false otherwise.\n\nFor detailed information, see the documentation of the asynchronous version of this API: fs.exists().\n\nfs.exists() is deprecated, but fs.existsSync() is not. The callback parameter to fs.exists() accepts parameters that are inconsistent with other Node.js callbacks. fs.existsSync() does not use a callback.\n\nimport { existsSync } from 'node:fs';\n\nif (existsSync('/etc/passwd'))\n  console.log('The path exists.');\nfs.fchmodSync(fd, mode)#\nAdded in: v0.4.7\nfd <integer>\nmode <string> | <integer>\nSets the permissions on the file. Returns undefined.\n\nSee the POSIX fchmod(2) documentation for more detail.\n\nfs.fchownSync(fd, uid, gid)#\nAdded in: v0.4.7\nfd <integer>\nuid <integer> The file's new owner's user id.\ngid <integer> The file's new group's group id.\nSets the owner of the file. Returns undefined.\n\nSee the POSIX fchown(2) documentation for more detail.\n\nfs.fdatasyncSync(fd)#\nAdded", "doc_id": "91bb3e2e-aec1-4958-b256-c75d0f52f799", "embedding": null, "doc_hash": "9f0bbbc50d5186c43fb5fb220f437799679d3766035a18a3146b305b41a38356", "extra_info": null, "node_info": {"start": 1329830, "end": 1333239}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "44386ce8-53a4-43ec-a215-c6dca675a35d", "3": "ad6f061f-619e-474d-9811-1758ffb17dec"}}, "__type__": "1"}, "ad6f061f-619e-474d-9811-1758ffb17dec": {"__data__": {"text": "(existsSync('/etc/passwd'))\n  console.log('The path exists.');\nfs.fchmodSync(fd, mode)#\nAdded in: v0.4.7\nfd <integer>\nmode <string> | <integer>\nSets the permissions on the file. Returns undefined.\n\nSee the POSIX fchmod(2) documentation for more detail.\n\nfs.fchownSync(fd, uid, gid)#\nAdded in: v0.4.7\nfd <integer>\nuid <integer> The file's new owner's user id.\ngid <integer> The file's new group's group id.\nSets the owner of the file. Returns undefined.\n\nSee the POSIX fchown(2) documentation for more detail.\n\nfs.fdatasyncSync(fd)#\nAdded in: v0.1.96\nfd <integer>\nForces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details. Returns undefined.\n\nfs.fstatSync(fd[, options])#\nHistory\nfd <integer>\noptions <Object>\nbigint <boolean> Whether the numeric values in the returned <fs.Stats> object should be bigint. Default: false.\nReturns: <fs.Stats>\nRetrieves the <fs.Stats> for the file descriptor.\n\nSee the POSIX fstat(2) documentation for more detail.\n\nfs.fsyncSync(fd)#\nAdded in: v0.1.96\nfd <integer>\nRequest that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail. Returns undefined.\n\nfs.ftruncateSync(fd[, len])#\nAdded in: v0.8.6\nfd <integer>\nlen <integer> Default: 0\nTruncates the file descriptor. Returns undefined.\n\nFor detailed information, see the documentation of the asynchronous version of this API: fs.ftruncate().\n\nfs.futimesSync(fd, atime, mtime)#\nHistory\nfd <integer>\natime <number> | <string> | <Date>\nmtime <number> | <string> | <Date>\nSynchronous version of fs.futimes(). Returns undefined.\n\nfs.lchmodSync(path, mode)#\nDeprecated since: v0.4.7\npath <string> | <Buffer> | <URL>\nmode <integer>\nChanges the permissions on a symbolic link. Returns undefined.\n\nThis method is only implemented on macOS.\n\nSee the POSIX lchmod(2) documentation for more detail.\n\nfs.lchownSync(path, uid, gid)#\nHistory\npath <string> | <Buffer> | <URL>\nuid <integer> The file's new owner's user id.\ngid <integer> The file's new group's group id.\nSet the owner for the path. Returns undefined.\n\nSee the POSIX lchown(2) documentation for more details.\n\nfs.lutimesSync(path, atime, mtime)#\nAdded in: v14.5.0, v12.19.0\npath <string> | <Buffer> | <URL>\natime <number> | <string> | <Date>\nmtime <number> | <string> | <Date>\nChange the file system timestamps of the symbolic link referenced by path. Returns undefined, or throws an exception when parameters are incorrect or the operation fails. This is the synchronous version of fs.lutimes().\n\nfs.linkSync(existingPath, newPath)#\nHistory\nexistingPath <string> | <Buffer> | <URL>\nnewPath <string> | <Buffer> | <URL>\nCreates a new link from the existingPath to the newPath. See the POSIX link(2) documentation for more detail. Returns undefined.\n\nfs.lstatSync(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nbigint <boolean> Whether the", "doc_id": "ad6f061f-619e-474d-9811-1758ffb17dec", "embedding": null, "doc_hash": "b57cf4ebb04c81081b3b2700173b67b456853fa527dfe2f51245cfc9403931f0", "extra_info": null, "node_info": {"start": 1333331, "end": 1336401}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "91bb3e2e-aec1-4958-b256-c75d0f52f799", "3": "dda50a82-fef7-4ed5-b6df-efa5dcc1d565"}}, "__type__": "1"}, "dda50a82-fef7-4ed5-b6df-efa5dcc1d565": {"__data__": {"text": "| <string> | <Date>\nmtime <number> | <string> | <Date>\nChange the file system timestamps of the symbolic link referenced by path. Returns undefined, or throws an exception when parameters are incorrect or the operation fails. This is the synchronous version of fs.lutimes().\n\nfs.linkSync(existingPath, newPath)#\nHistory\nexistingPath <string> | <Buffer> | <URL>\nnewPath <string> | <Buffer> | <URL>\nCreates a new link from the existingPath to the newPath. See the POSIX link(2) documentation for more detail. Returns undefined.\n\nfs.lstatSync(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nbigint <boolean> Whether the numeric values in the returned <fs.Stats> object should be bigint. Default: false.\nthrowIfNoEntry <boolean> Whether an exception will be thrown if no file system entry exists, rather than returning undefined. Default: true.\nReturns: <fs.Stats>\nRetrieves the <fs.Stats> for the symbolic link referred to by path.\n\nSee the POSIX lstat(2) documentation for more details.\n\nfs.mkdirSync(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object> | <integer>\nrecursive <boolean> Default: false\nmode <string> | <integer> Not supported on Windows. Default: 0o777.\nReturns: <string> | <undefined>\nSynchronously creates a directory. Returns undefined, or if recursive is true, the first directory path created. This is the synchronous version of fs.mkdir().\n\nSee the POSIX mkdir(2) documentation for more details.\n\nfs.mkdtempSync(prefix[, options])#\nHistory\nprefix <string>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\nReturns: <string>\nReturns the created directory path.\n\nFor detailed information, see the documentation of the asynchronous version of this API: fs.mkdtemp().\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use.\n\nfs.opendirSync(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nencoding <string> | <null> Default: 'utf8'\nbufferSize <number> Number of directory entries that are buffered internally when reading from the directory. Higher values lead to better performance but higher memory usage. Default: 32\nReturns: <fs.Dir>\nSynchronously open a directory. See opendir(3).\n\nCreates an <fs.Dir>, which contains all further functions for reading from and cleaning up the directory.\n\nThe encoding option sets the encoding for the path while opening the directory and subsequent read operations.\n\nfs.openSync(path[, flags[, mode]])#\nHistory\npath <string> | <Buffer> | <URL>\nflags <string> | <number> Default: 'r'. See support of file system flags.\nmode <string> | <integer> Default: 0o666\nReturns: <number>\nReturns an integer representing the file descriptor.\n\nFor detailed information, see the documentation of the asynchronous version of this API: fs.open().\n\nfs.readdirSync(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\nwithFileTypes <boolean> Default: false\nReturns: <string[]> | <Buffer[]> | <fs.Dirent[]>\nReads the contents of the directory.\n\nSee the POSIX readdir(3) documentation for more details.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the filenames returned. If the encoding is set to 'buffer', the filenames returned will be passed as <Buffer> objects.\n\nIf options.withFileTypes is set to true, the result will contain", "doc_id": "dda50a82-fef7-4ed5-b6df-efa5dcc1d565", "embedding": null, "doc_hash": "37995041de63f33e9489a064035af751bf2b897d34c0ed380a0b877f414397cb", "extra_info": null, "node_info": {"start": 1336317, "end": 1339847}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ad6f061f-619e-474d-9811-1758ffb17dec", "3": "45a210d3-786c-41d3-9371-5a223655054f"}}, "__type__": "1"}, "45a210d3-786c-41d3-9371-5a223655054f": {"__data__": {"text": "this API: fs.open().\n\nfs.readdirSync(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\nwithFileTypes <boolean> Default: false\nReturns: <string[]> | <Buffer[]> | <fs.Dirent[]>\nReads the contents of the directory.\n\nSee the POSIX readdir(3) documentation for more details.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the filenames returned. If the encoding is set to 'buffer', the filenames returned will be passed as <Buffer> objects.\n\nIf options.withFileTypes is set to true, the result will contain <fs.Dirent> objects.\n\nfs.readFileSync(path[, options])#\nHistory\npath <string> | <Buffer> | <URL> | <integer> filename or file descriptor\noptions <Object> | <string>\nencoding <string> | <null> Default: null\nflag <string> See support of file system flags. Default: 'r'.\nReturns: <string> | <Buffer>\nReturns the contents of the path.\n\nFor detailed information, see the documentation of the asynchronous version of this API: fs.readFile().\n\nIf the encoding option is specified then this function returns a string. Otherwise it returns a buffer.\n\nSimilar to fs.readFile(), when the path is a directory, the behavior of fs.readFileSync() is platform-specific.\n\nimport { readFileSync } from 'node:fs';\n\n// macOS, Linux, and Windows\nreadFileSync('<directory>');\n// => [Error: EISDIR: illegal operation on a directory, read <directory>]\n\n//  FreeBSD\nreadFileSync('<directory>'); // => <data>\nfs.readlinkSync(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\nReturns: <string> | <Buffer>\nReturns the symbolic link's string value.\n\nSee the POSIX readlink(2) documentation for more details.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the link path returned. If the encoding is set to 'buffer', the link path returned will be passed as a <Buffer> object.\n\nfs.readSync(fd, buffer, offset, length[, position])#\nHistory\nfd <integer>\nbuffer <Buffer> | <TypedArray> | <DataView>\noffset <integer>\nlength <integer>\nposition <integer> | <bigint> | <null> Default: null\nReturns: <number>\nReturns the number of bytesRead.\n\nFor detailed information, see the documentation of the asynchronous version of this API: fs.read().\n\nfs.readSync(fd, buffer[, options])#\nHistory\nfd <integer>\nbuffer <Buffer> | <TypedArray> | <DataView>\noptions <Object>\noffset <integer> Default: 0\nlength <integer> Default: buffer.byteLength - offset\nposition <integer> | <bigint> | <null> Default: null\nReturns: <number>\nReturns the number of bytesRead.\n\nSimilar to the above fs.readSync function, this version takes an optional options object. If no options object is specified, it will default with the above values.\n\nFor detailed information, see the documentation of the asynchronous version of this API: fs.read().\n\nfs.readvSync(fd, buffers[, position])#\nAdded in: v13.13.0, v12.17.0\nfd <integer>\nbuffers <ArrayBufferView[]>\nposition <integer> | <null> Default: null\nReturns: <number> The number of bytes read.\nFor detailed information, see the documentation of the asynchronous version of this API: fs.readv().\n\nfs.realpathSync(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\nReturns: <string>", "doc_id": "45a210d3-786c-41d3-9371-5a223655054f", "embedding": null, "doc_hash": "0118d0ea91257407dd471830f34ef85583f093e9b98c1fa532f505e08caa18d6", "extra_info": null, "node_info": {"start": 1339818, "end": 1343304}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dda50a82-fef7-4ed5-b6df-efa5dcc1d565", "3": "f3dfe56c-02d7-4645-81af-56db0b8b7418"}}, "__type__": "1"}, "f3dfe56c-02d7-4645-81af-56db0b8b7418": {"__data__": {"text": "this version takes an optional options object. If no options object is specified, it will default with the above values.\n\nFor detailed information, see the documentation of the asynchronous version of this API: fs.read().\n\nfs.readvSync(fd, buffers[, position])#\nAdded in: v13.13.0, v12.17.0\nfd <integer>\nbuffers <ArrayBufferView[]>\nposition <integer> | <null> Default: null\nReturns: <number> The number of bytes read.\nFor detailed information, see the documentation of the asynchronous version of this API: fs.readv().\n\nfs.realpathSync(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\nReturns: <string> | <Buffer>\nReturns the resolved pathname.\n\nFor detailed information, see the documentation of the asynchronous version of this API: fs.realpath().\n\nfs.realpathSync.native(path[, options])#\nAdded in: v9.2.0\npath <string> | <Buffer> | <URL>\noptions <string> | <Object>\nencoding <string> Default: 'utf8'\nReturns: <string> | <Buffer>\nSynchronous realpath(3).\n\nOnly paths that can be converted to UTF8 strings are supported.\n\nThe optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the path returned. If the encoding is set to 'buffer', the path returned will be passed as a <Buffer> object.\n\nOn Linux, when Node.js is linked against musl libc, the procfs file system must be mounted on /proc in order for this function to work. Glibc does not have this restriction.\n\nfs.renameSync(oldPath, newPath)#\nHistory\noldPath <string> | <Buffer> | <URL>\nnewPath <string> | <Buffer> | <URL>\nRenames the file from oldPath to newPath. Returns undefined.\n\nSee the POSIX rename(2) documentation for more details.\n\nfs.rmdirSync(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nmaxRetries <integer> If an EBUSY, EMFILE, ENFILE, ENOTEMPTY, or EPERM error is encountered, Node.js retries the operation with a linear backoff wait of retryDelay milliseconds longer on each try. This option represents the number of retries. This option is ignored if the recursive option is not true. Default: 0.\nrecursive <boolean> If true, perform a recursive directory removal. In recursive mode, operations are retried on failure. Default: false. Deprecated.\nretryDelay <integer> The amount of time in milliseconds to wait between retries. This option is ignored if the recursive option is not true. Default: 100.\nSynchronous rmdir(2). Returns undefined.\n\nUsing fs.rmdirSync() on a file (not a directory) results in an ENOENT error on Windows and an ENOTDIR error on POSIX.\n\nTo get a behavior similar to the rm -rf Unix command, use fs.rmSync() with options { recursive: true, force: true }.\n\nfs.rmSync(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nforce <boolean> When true, exceptions will be ignored if path does not exist. Default: false.\nmaxRetries <integer> If an EBUSY, EMFILE, ENFILE, ENOTEMPTY, or EPERM error is encountered, Node.js will retry the operation with a linear backoff wait of retryDelay milliseconds longer on each try. This option represents the number of retries. This option is ignored if the recursive option is not true. Default: 0.\nrecursive <boolean> If true, perform a recursive directory removal. In recursive mode operations are retried on failure. Default: false.\nretryDelay <integer> The amount of time in milliseconds to wait between retries. This option is ignored if the recursive option is not", "doc_id": "f3dfe56c-02d7-4645-81af-56db0b8b7418", "embedding": null, "doc_hash": "233157acc3c67a961416bb8f8525bdb2d941504817304dfcc76bcedf53747214", "extra_info": null, "node_info": {"start": 1343301, "end": 1346824}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "45a210d3-786c-41d3-9371-5a223655054f", "3": "745a875e-d7b2-4cb0-9ff5-82f38b7a2b0b"}}, "__type__": "1"}, "745a875e-d7b2-4cb0-9ff5-82f38b7a2b0b": {"__data__": {"text": "| <Buffer> | <URL>\noptions <Object>\nforce <boolean> When true, exceptions will be ignored if path does not exist. Default: false.\nmaxRetries <integer> If an EBUSY, EMFILE, ENFILE, ENOTEMPTY, or EPERM error is encountered, Node.js will retry the operation with a linear backoff wait of retryDelay milliseconds longer on each try. This option represents the number of retries. This option is ignored if the recursive option is not true. Default: 0.\nrecursive <boolean> If true, perform a recursive directory removal. In recursive mode operations are retried on failure. Default: false.\nretryDelay <integer> The amount of time in milliseconds to wait between retries. This option is ignored if the recursive option is not true. Default: 100.\nSynchronously removes files and directories (modeled on the standard POSIX rm utility). Returns undefined.\n\nfs.statSync(path[, options])#\nHistory\npath <string> | <Buffer> | <URL>\noptions <Object>\nbigint <boolean> Whether the numeric values in the returned <fs.Stats> object should be bigint. Default: false.\nthrowIfNoEntry <boolean> Whether an exception will be thrown if no file system entry exists, rather than returning undefined. Default: true.\nReturns: <fs.Stats>\nRetrieves the <fs.Stats> for the path.\n\nfs.statfsSync(path[, options])#\nAdded in: v18.15.0\npath <string> | <Buffer> | <URL>\noptions <Object>\nbigint <boolean> Whether the numeric values in the returned <fs.StatFs> object should be bigint. Default: false.\nReturns: <fs.StatFs>\nSynchronous statfs(2). Returns information about the mounted file system which contains path.\n\nIn case of an error, the err.code will be one of Common System Errors.\n\nfs.symlinkSync(target, path[, type])#\nHistory\ntarget <string> | <Buffer> | <URL>\npath <string> | <Buffer> | <URL>\ntype <string> | <null> Default: null\nReturns undefined.\n\nFor detailed information, see the documentation of the asynchronous version of this API: fs.symlink().\n\nfs.truncateSync(path[, len])#\nAdded in: v0.8.6\npath <string> | <Buffer> | <URL>\nlen <integer> Default: 0\nTruncates the file. Returns undefined. A file descriptor can also be passed as the first argument. In this case, fs.ftruncateSync() is called.\n\nPassing a file descriptor is deprecated and may result in an error being thrown in the future.\n\nfs.unlinkSync(path)#\nHistory\npath <string> | <Buffer> | <URL>\nSynchronous unlink(2). Returns undefined.\n\nfs.utimesSync(path, atime, mtime)#\nHistory\npath <string> | <Buffer> | <URL>\natime <number> | <string> | <Date>\nmtime <number> | <string> | <Date>\nReturns undefined.\n\nFor detailed information, see the documentation of the asynchronous version of this API: fs.utimes().\n\nfs.writeFileSync(file, data[, options])#\nHistory\nfile <string> | <Buffer> | <URL> | <integer> filename or file descriptor\ndata <string> | <Buffer> | <TypedArray> | <DataView> | <Object>\noptions <Object> | <string>\nencoding <string> | <null> Default: 'utf8'\nmode <integer> Default: 0o666\nflag <string> See support of file system flags. Default: 'w'.\nReturns undefined.\n\nThe mode option only affects the newly created file. See fs.open() for more details.\n\nFor detailed information, see the documentation of the asynchronous version of this API: fs.writeFile().\n\nfs.writeSync(fd, buffer, offset[, length[, position]])#\nHistory\nfd <integer>\nbuffer <Buffer> | <TypedArray> | <DataView>\noffset <integer>", "doc_id": "745a875e-d7b2-4cb0-9ff5-82f38b7a2b0b", "embedding": null, "doc_hash": "0d8e5aebaf897ef420b6145bc3ef6e925644d46e90a569424cb152cb3f15b19a", "extra_info": null, "node_info": {"start": 1346811, "end": 1350153}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f3dfe56c-02d7-4645-81af-56db0b8b7418", "3": "f4c2e25a-5337-484b-809e-c782a054be61"}}, "__type__": "1"}, "f4c2e25a-5337-484b-809e-c782a054be61": {"__data__": {"text": "<string> | <Buffer> | <URL> | <integer> filename or file descriptor\ndata <string> | <Buffer> | <TypedArray> | <DataView> | <Object>\noptions <Object> | <string>\nencoding <string> | <null> Default: 'utf8'\nmode <integer> Default: 0o666\nflag <string> See support of file system flags. Default: 'w'.\nReturns undefined.\n\nThe mode option only affects the newly created file. See fs.open() for more details.\n\nFor detailed information, see the documentation of the asynchronous version of this API: fs.writeFile().\n\nfs.writeSync(fd, buffer, offset[, length[, position]])#\nHistory\nfd <integer>\nbuffer <Buffer> | <TypedArray> | <DataView>\noffset <integer> Default: 0\nlength <integer> Default: buffer.byteLength - offset\nposition <integer> | <null> Default: null\nReturns: <number> The number of bytes written.\nFor detailed information, see the documentation of the asynchronous version of this API: fs.write(fd, buffer...).\n\nfs.writeSync(fd, buffer[, options])#\nAdded in: v18.3.0\nfd <integer>\nbuffer <Buffer> | <TypedArray> | <DataView>\noptions <Object>\noffset <integer> Default: 0\nlength <integer> Default: buffer.byteLength - offset\nposition <integer> Default: null\nReturns: <number> The number of bytes written.\nFor detailed information, see the documentation of the asynchronous version of this API: fs.write(fd, buffer...).\n\nfs.writeSync(fd, string[, position[, encoding]])#\nHistory\nfd <integer>\nstring <string>\nposition <integer> | <null> Default: null\nencoding <string> Default: 'utf8'\nReturns: <number> The number of bytes written.\nFor detailed information, see the documentation of the asynchronous version of this API: fs.write(fd, string...).\n\nfs.writevSync(fd, buffers[, position])#\nAdded in: v12.9.0\nfd <integer>\nbuffers <ArrayBufferView[]>\nposition <integer> | <null> Default: null\nReturns: <number> The number of bytes written.\nFor detailed information, see the documentation of the asynchronous version of this API: fs.writev().\n\nCommon Objects#\nThe common objects are shared by all of the file system API variants (promise, callback, and synchronous).\n\nClass: fs.Dir#\nAdded in: v12.12.0\nA class representing a directory stream.\n\nCreated by fs.opendir(), fs.opendirSync(), or fsPromises.opendir().\n\nimport { opendir } from 'node:fs/promises';\n\ntry {\n  const dir = await opendir('./');\n  for await (const dirent of dir)\n    console.log(dirent.name);\n} catch (err) {\n  console.error(err);\n}\nWhen using the async iterator, the <fs.Dir> object will be automatically closed after the iterator exits.\n\ndir.close()#\nAdded in: v12.12.0\nReturns: <Promise>\nAsynchronously close the directory's underlying resource handle. Subsequent reads will result in errors.\n\nA promise is returned that will be resolved after the resource has been closed.\n\ndir.close(callback)#\nHistory\ncallback <Function>\nerr <Error>\nAsynchronously close the directory's underlying resource handle. Subsequent reads will result in errors.\n\nThe callback will be called after the resource handle has been closed.\n\ndir.closeSync()#\nAdded in: v12.12.0\nSynchronously close the directory's underlying resource handle. Subsequent reads will result in errors.\n\ndir.path#\nAdded in: v12.12.0\n<string>\nThe read-only path of this directory as was provided to fs.opendir(), fs.opendirSync(), or fsPromises.opendir().\n\ndir.read()#\nAdded in: v12.12.0\nReturns: <Promise> containing <fs.Dirent> | <null>\nAsynchronously read the next directory", "doc_id": "f4c2e25a-5337-484b-809e-c782a054be61", "embedding": null, "doc_hash": "171c9280f37bfba0c44c7e16078aeab66f8cebd837f51cb69bc58da20bf6ce38", "extra_info": null, "node_info": {"start": 1350199, "end": 1353589}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "745a875e-d7b2-4cb0-9ff5-82f38b7a2b0b", "3": "c8151611-2df1-4868-84e7-e8755cce95c8"}}, "__type__": "1"}, "c8151611-2df1-4868-84e7-e8755cce95c8": {"__data__": {"text": "resource has been closed.\n\ndir.close(callback)#\nHistory\ncallback <Function>\nerr <Error>\nAsynchronously close the directory's underlying resource handle. Subsequent reads will result in errors.\n\nThe callback will be called after the resource handle has been closed.\n\ndir.closeSync()#\nAdded in: v12.12.0\nSynchronously close the directory's underlying resource handle. Subsequent reads will result in errors.\n\ndir.path#\nAdded in: v12.12.0\n<string>\nThe read-only path of this directory as was provided to fs.opendir(), fs.opendirSync(), or fsPromises.opendir().\n\ndir.read()#\nAdded in: v12.12.0\nReturns: <Promise> containing <fs.Dirent> | <null>\nAsynchronously read the next directory entry via readdir(3) as an <fs.Dirent>.\n\nA promise is returned that will be resolved with an <fs.Dirent>, or null if there are no more directory entries to read.\n\nDirectory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.\n\ndir.read(callback)#\nAdded in: v12.12.0\ncallback <Function>\nerr <Error>\ndirent <fs.Dirent> | <null>\nAsynchronously read the next directory entry via readdir(3) as an <fs.Dirent>.\n\nAfter the read is completed, the callback will be called with an <fs.Dirent>, or null if there are no more directory entries to read.\n\nDirectory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.\n\ndir.readSync()#\nAdded in: v12.12.0\nReturns: <fs.Dirent> | <null>\nSynchronously read the next directory entry as an <fs.Dirent>. See the POSIX readdir(3) documentation for more detail.\n\nIf there are no more directory entries to read, null will be returned.\n\nDirectory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.\n\ndir[Symbol.asyncIterator]()#\nAdded in: v12.12.0\nReturns: <AsyncIterator> of <fs.Dirent>\nAsynchronously iterates over the directory until all entries have been read. Refer to the POSIX readdir(3) documentation for more detail.\n\nEntries returned by the async iterator are always an <fs.Dirent>. The null case from dir.read() is handled internally.\n\nSee <fs.Dir> for an example.\n\nDirectory entries returned by this iterator are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.\n\nClass: fs.Dirent#\nAdded in: v10.10.0\nA representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an <fs.Dir>. The directory entry is a combination of the file name and file type pairs.\n\nAdditionally, when fs.readdir() or fs.readdirSync() is called with the withFileTypes option set to true, the resulting array is filled with <fs.Dirent> objects, rather than strings or <Buffer>s.\n\ndirent.isBlockDevice()#\nAdded in: v10.10.0\nReturns: <boolean>\nReturns true if the <fs.Dirent> object describes a block device.\n\ndirent.isCharacterDevice()#\nAdded in: v10.10.0\nReturns: <boolean>\nReturns true if the <fs.Dirent> object describes a character device.\n\ndirent.isDirectory()#\nAdded in: v10.10.0\nReturns: <boolean>\nReturns true if the", "doc_id": "c8151611-2df1-4868-84e7-e8755cce95c8", "embedding": null, "doc_hash": "acf8ebb455f69cda8fcc27c6ca0bf0c7906ae2455f8239624c12db9fe1ee08f5", "extra_info": null, "node_info": {"start": 1353546, "end": 1357133}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f4c2e25a-5337-484b-809e-c782a054be61", "3": "2df1b852-6003-4f38-ae65-8f64a0e4e73d"}}, "__type__": "1"}, "2df1b852-6003-4f38-ae65-8f64a0e4e73d": {"__data__": {"text": "The directory entry is a combination of the file name and file type pairs.\n\nAdditionally, when fs.readdir() or fs.readdirSync() is called with the withFileTypes option set to true, the resulting array is filled with <fs.Dirent> objects, rather than strings or <Buffer>s.\n\ndirent.isBlockDevice()#\nAdded in: v10.10.0\nReturns: <boolean>\nReturns true if the <fs.Dirent> object describes a block device.\n\ndirent.isCharacterDevice()#\nAdded in: v10.10.0\nReturns: <boolean>\nReturns true if the <fs.Dirent> object describes a character device.\n\ndirent.isDirectory()#\nAdded in: v10.10.0\nReturns: <boolean>\nReturns true if the <fs.Dirent> object describes a file system directory.\n\ndirent.isFIFO()#\nAdded in: v10.10.0\nReturns: <boolean>\nReturns true if the <fs.Dirent> object describes a first-in-first-out (FIFO) pipe.\n\ndirent.isFile()#\nAdded in: v10.10.0\nReturns: <boolean>\nReturns true if the <fs.Dirent> object describes a regular file.\n\ndirent.isSocket()#\nAdded in: v10.10.0\nReturns: <boolean>\nReturns true if the <fs.Dirent> object describes a socket.\n\ndirent.isSymbolicLink()#\nAdded in: v10.10.0\nReturns: <boolean>\nReturns true if the <fs.Dirent> object describes a symbolic link.\n\ndirent.name#\nAdded in: v10.10.0\n<string> | <Buffer>\nThe file name that this <fs.Dirent> object refers to. The type of this value is determined by the options.encoding passed to fs.readdir() or fs.readdirSync().\n\nClass: fs.FSWatcher#\nAdded in: v0.5.8\nExtends <EventEmitter>\nA successful call to fs.watch() method will return a new <fs.FSWatcher> object.\n\nAll <fs.FSWatcher> objects emit a 'change' event whenever a specific watched file is modified.\n\nEvent: 'change'#\nAdded in: v0.5.8\neventType <string> The type of change event that has occurred\nfilename <string> | <Buffer> The filename that changed (if relevant/available)\nEmitted when something changes in a watched directory or file. See more details in fs.watch().\n\nThe filename argument may not be provided depending on operating system support. If filename is provided, it will be provided as a <Buffer> if fs.watch() is called with its encoding option set to 'buffer', otherwise filename will be a UTF-8 string.\n\nimport { watch } from 'node:fs';\n// Example when handled through fs.watch() listener\nwatch('./tmp', { encoding: 'buffer' }, (eventType, filename) => {\n  if (filename) {\n    console.log(filename);\n    // Prints: <Buffer ...>\n  }\n});\nEvent: 'close'#\nAdded in: v10.0.0\nEmitted when the watcher stops watching for changes. The closed <fs.FSWatcher> object is no longer usable in the event handler.\n\nEvent: 'error'#\nAdded in: v0.5.8\nerror <Error>\nEmitted when an error occurs while watching the file. The errored <fs.FSWatcher> object is no longer usable in the event handler.\n\nwatcher.close()#\nAdded in: v0.5.8\nStop watching for changes on the given <fs.FSWatcher>. Once stopped, the <fs.FSWatcher> object is no longer usable.\n\nwatcher.ref()#\nAdded in: v14.3.0, v12.20.0\nReturns: <fs.FSWatcher>\nWhen called, requests that the Node.js event loop not exit so long as the <fs.FSWatcher> is active. Calling watcher.ref() multiple times will have no effect.\n\nBy default, all", "doc_id": "2df1b852-6003-4f38-ae65-8f64a0e4e73d", "embedding": null, "doc_hash": "d1f672cc049d96efb95f4df2626ac63cd844116c47a02fff24238b4ec5cc7a74", "extra_info": null, "node_info": {"start": 1357199, "end": 1360313}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c8151611-2df1-4868-84e7-e8755cce95c8", "3": "e826400a-c3d2-490f-beea-7d5dc2409bbb"}}, "__type__": "1"}, "e826400a-c3d2-490f-beea-7d5dc2409bbb": {"__data__": {"text": "longer usable in the event handler.\n\nEvent: 'error'#\nAdded in: v0.5.8\nerror <Error>\nEmitted when an error occurs while watching the file. The errored <fs.FSWatcher> object is no longer usable in the event handler.\n\nwatcher.close()#\nAdded in: v0.5.8\nStop watching for changes on the given <fs.FSWatcher>. Once stopped, the <fs.FSWatcher> object is no longer usable.\n\nwatcher.ref()#\nAdded in: v14.3.0, v12.20.0\nReturns: <fs.FSWatcher>\nWhen called, requests that the Node.js event loop not exit so long as the <fs.FSWatcher> is active. Calling watcher.ref() multiple times will have no effect.\n\nBy default, all <fs.FSWatcher> objects are \"ref'ed\", making it normally unnecessary to call watcher.ref() unless watcher.unref() had been called previously.\n\nwatcher.unref()#\nAdded in: v14.3.0, v12.20.0\nReturns: <fs.FSWatcher>\nWhen called, the active <fs.FSWatcher> object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the <fs.FSWatcher> object's callback is invoked. Calling watcher.unref() multiple times will have no effect.\n\nClass: fs.StatWatcher#\nAdded in: v14.3.0, v12.20.0\nExtends <EventEmitter>\nA successful call to fs.watchFile() method will return a new <fs.StatWatcher> object.\n\nwatcher.ref()#\nAdded in: v14.3.0, v12.20.0\nReturns: <fs.StatWatcher>\nWhen called, requests that the Node.js event loop not exit so long as the <fs.StatWatcher> is active. Calling watcher.ref() multiple times will have no effect.\n\nBy default, all <fs.StatWatcher> objects are \"ref'ed\", making it normally unnecessary to call watcher.ref() unless watcher.unref() had been called previously.\n\nwatcher.unref()#\nAdded in: v14.3.0, v12.20.0\nReturns: <fs.StatWatcher>\nWhen called, the active <fs.StatWatcher> object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the <fs.StatWatcher> object's callback is invoked. Calling watcher.unref() multiple times will have no effect.\n\nClass: fs.ReadStream#\nAdded in: v0.1.93\nExtends: <stream.Readable>\nInstances of <fs.ReadStream> are created and returned using the fs.createReadStream() function.\n\nEvent: 'close'#\nAdded in: v0.1.93\nEmitted when the <fs.ReadStream>'s underlying file descriptor has been closed.\n\nEvent: 'open'#\nAdded in: v0.1.93\nfd <integer> Integer file descriptor used by the <fs.ReadStream>.\nEmitted when the <fs.ReadStream>'s file descriptor has been opened.\n\nEvent: 'ready'#\nAdded in: v9.11.0\nEmitted when the <fs.ReadStream> is ready to be used.\n\nFires immediately after 'open'.\n\nreadStream.bytesRead#\nAdded in: v6.4.0\n<number>\nThe number of bytes that have been read so far.\n\nreadStream.path#\nAdded in: v0.1.93\n<string> | <Buffer>\nThe path to the file the stream is reading from as specified in the first argument to fs.createReadStream(). If path is passed as a string, then readStream.path will be a string. If path is passed as a <Buffer>, then readStream.path will be a <Buffer>. If fd is specified, then readStream.path will be undefined.\n\nreadStream.pending#\nAdded in: v11.2.0, v10.16.0\n<boolean>\nThis property is true if the underlying file has not been opened yet,", "doc_id": "e826400a-c3d2-490f-beea-7d5dc2409bbb", "embedding": null, "doc_hash": "a9f049e22aa836d1986fb80a47f3645c6a1227fb7df819506d504e13a05ed858", "extra_info": null, "node_info": {"start": 1360330, "end": 1363544}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2df1b852-6003-4f38-ae65-8f64a0e4e73d", "3": "202a59b9-b5ae-469e-afe9-65cb3c3afc24"}}, "__type__": "1"}, "202a59b9-b5ae-469e-afe9-65cb3c3afc24": {"__data__": {"text": "is ready to be used.\n\nFires immediately after 'open'.\n\nreadStream.bytesRead#\nAdded in: v6.4.0\n<number>\nThe number of bytes that have been read so far.\n\nreadStream.path#\nAdded in: v0.1.93\n<string> | <Buffer>\nThe path to the file the stream is reading from as specified in the first argument to fs.createReadStream(). If path is passed as a string, then readStream.path will be a string. If path is passed as a <Buffer>, then readStream.path will be a <Buffer>. If fd is specified, then readStream.path will be undefined.\n\nreadStream.pending#\nAdded in: v11.2.0, v10.16.0\n<boolean>\nThis property is true if the underlying file has not been opened yet, i.e. before the 'ready' event is emitted.\n\nClass: fs.Stats#\nHistory\nA <fs.Stats> object provides information about a file.\n\nObjects returned from fs.stat(), fs.lstat(), fs.fstat(), and their synchronous counterparts are of this type. If bigint in the options passed to those methods is true, the numeric values will be bigint instead of number, and the object will contain additional nanosecond-precision properties suffixed with Ns.\n\nStats {\n  dev: 2114,\n  ino: 48064969,\n  mode: 33188,\n  nlink: 1,\n  uid: 85,\n  gid: 100,\n  rdev: 0,\n  size: 527,\n  blksize: 4096,\n  blocks: 8,\n  atimeMs: 1318289051000.1,\n  mtimeMs: 1318289051000.1,\n  ctimeMs: 1318289051000.1,\n  birthtimeMs: 1318289051000.1,\n  atime: Mon, 10 Oct 2011 23:24:11 GMT,\n  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n  ctime: Mon, 10 Oct 2011 23:24:11 GMT,\n  birthtime: Mon, 10 Oct 2011 23:24:11 GMT }\nbigint version:\n\nBigIntStats {\n  dev: 2114n,\n  ino: 48064969n,\n  mode: 33188n,\n  nlink: 1n,\n  uid: 85n,\n  gid: 100n,\n  rdev: 0n,\n  size: 527n,\n  blksize: 4096n,\n  blocks: 8n,\n  atimeMs: 1318289051000n,\n  mtimeMs: 1318289051000n,\n  ctimeMs: 1318289051000n,\n  birthtimeMs: 1318289051000n,\n  atimeNs: 1318289051000000000n,\n  mtimeNs: 1318289051000000000n,\n  ctimeNs: 1318289051000000000n,\n  birthtimeNs: 1318289051000000000n,\n  atime: Mon, 10 Oct 2011 23:24:11 GMT,\n  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n  ctime: Mon, 10 Oct 2011 23:24:11 GMT,\n  birthtime: Mon, 10 Oct 2011 23:24:11 GMT }\nstats.isBlockDevice()#\nAdded in: v0.1.10\nReturns: <boolean>\nReturns true if the <fs.Stats> object describes a block device.\n\nstats.isCharacterDevice()#\nAdded in: v0.1.10\nReturns: <boolean>\nReturns true if the <fs.Stats> object describes a character device.\n\nstats.isDirectory()#\nAdded in: v0.1.10\nReturns: <boolean>\nReturns true if the <fs.Stats> object describes a file system directory.\n\nIf the <fs.Stats> object was obtained from fs.lstat(), this method will always return false. This is because fs.lstat() returns information about a symbolic link itself and not the path it resolves to.\n\nstats.isFIFO()#\nAdded in: v0.1.10\nReturns: <boolean>\nReturns true if the <fs.Stats> object describes a first-in-first-out", "doc_id": "202a59b9-b5ae-469e-afe9-65cb3c3afc24", "embedding": null, "doc_hash": "2d245c44b5a0944dd4f959bd2ee8d08f36891002013d21ee54acd3a52ba12249", "extra_info": null, "node_info": {"start": 1363516, "end": 1366325}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e826400a-c3d2-490f-beea-7d5dc2409bbb", "3": "901ba4dc-77dd-4c11-9313-0b6eb245a589"}}, "__type__": "1"}, "901ba4dc-77dd-4c11-9313-0b6eb245a589": {"__data__": {"text": "<fs.Stats> object describes a block device.\n\nstats.isCharacterDevice()#\nAdded in: v0.1.10\nReturns: <boolean>\nReturns true if the <fs.Stats> object describes a character device.\n\nstats.isDirectory()#\nAdded in: v0.1.10\nReturns: <boolean>\nReturns true if the <fs.Stats> object describes a file system directory.\n\nIf the <fs.Stats> object was obtained from fs.lstat(), this method will always return false. This is because fs.lstat() returns information about a symbolic link itself and not the path it resolves to.\n\nstats.isFIFO()#\nAdded in: v0.1.10\nReturns: <boolean>\nReturns true if the <fs.Stats> object describes a first-in-first-out (FIFO) pipe.\n\nstats.isFile()#\nAdded in: v0.1.10\nReturns: <boolean>\nReturns true if the <fs.Stats> object describes a regular file.\n\nstats.isSocket()#\nAdded in: v0.1.10\nReturns: <boolean>\nReturns true if the <fs.Stats> object describes a socket.\n\nstats.isSymbolicLink()#\nAdded in: v0.1.10\nReturns: <boolean>\nReturns true if the <fs.Stats> object describes a symbolic link.\n\nThis method is only valid when using fs.lstat().\n\nstats.dev\n<number> | <bigint>\nThe numeric identifier of the device containing the file.\n\nstats.ino#\n<number> | <bigint>\nThe file system specific \"Inode\" number for the file.\n\nstats.mode#\n<number> | <bigint>\nA bit-field describing the file type and mode.\n\nstats.nlink#\n<number> | <bigint>\nThe number of hard-links that exist for the file.\n\nstats.uid#\n<number> | <bigint>\nThe numeric user identifier of the user that owns the file (POSIX).\n\nstats.gid#\n<number> | <bigint>\nThe numeric group identifier of the group that owns the file (POSIX).\n\nstats.rdev#\n<number> | <bigint>\nA numeric device identifier if the file represents a device.\n\nstats.size#\n<number> | <bigint>\nThe size of the file in bytes.\n\nIf the underlying file system does not support getting the size of the file, this will be 0.\n\nstats.blksize#\n<number> | <bigint>\nThe file system block size for i/o operations.\n\nstats.blocks#\n<number> | <bigint>\nThe number of blocks allocated for this file.\n\nstats.atimeMs#\nAdded in: v8.1.0\n<number> | <bigint>\nThe timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch.\n\nstats.mtimeMs#\nAdded in: v8.1.0\n<number> | <bigint>\nThe timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch.\n\nstats.ctimeMs#\nAdded in: v8.1.0\n<number> | <bigint>\nThe timestamp indicating the last time the file status was changed expressed in milliseconds since the POSIX Epoch.\n\nstats.birthtimeMs#\nAdded in: v8.1.0\n<number> | <bigint>\nThe timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.\n\nstats.atimeNs#\nAdded in: v12.10.0\n<bigint>\nOnly present when bigint: true is passed into the method that generates the object. The timestamp indicating the last time this file was accessed expressed in nanoseconds since the POSIX Epoch.\n\nstats.mtimeNs#\nAdded in: v12.10.0\n<bigint>\nOnly present when bigint: true is passed into the method that generates the object. The timestamp indicating the last time this file was modified expressed in nanoseconds since the POSIX", "doc_id": "901ba4dc-77dd-4c11-9313-0b6eb245a589", "embedding": null, "doc_hash": "c5e792dbed3b33f60533b894e3fef91dc00c66d55f6c05f536c4d745fa81f551", "extra_info": null, "node_info": {"start": 1366323, "end": 1369464}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "202a59b9-b5ae-469e-afe9-65cb3c3afc24", "3": "e4e336c5-7e84-4b6a-b2af-46d6e47b9e26"}}, "__type__": "1"}, "e4e336c5-7e84-4b6a-b2af-46d6e47b9e26": {"__data__": {"text": "in milliseconds since the POSIX Epoch.\n\nstats.birthtimeMs#\nAdded in: v8.1.0\n<number> | <bigint>\nThe timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.\n\nstats.atimeNs#\nAdded in: v12.10.0\n<bigint>\nOnly present when bigint: true is passed into the method that generates the object. The timestamp indicating the last time this file was accessed expressed in nanoseconds since the POSIX Epoch.\n\nstats.mtimeNs#\nAdded in: v12.10.0\n<bigint>\nOnly present when bigint: true is passed into the method that generates the object. The timestamp indicating the last time this file was modified expressed in nanoseconds since the POSIX Epoch.\n\nstats.ctimeNs#\nAdded in: v12.10.0\n<bigint>\nOnly present when bigint: true is passed into the method that generates the object. The timestamp indicating the last time the file status was changed expressed in nanoseconds since the POSIX Epoch.\n\nstats.birthtimeNs#\nAdded in: v12.10.0\n<bigint>\nOnly present when bigint: true is passed into the method that generates the object. The timestamp indicating the creation time of this file expressed in nanoseconds since the POSIX Epoch.\n\nstats.atime#\nAdded in: v0.11.13\n<Date>\nThe timestamp indicating the last time this file was accessed.\n\nstats.mtime#\nAdded in: v0.11.13\n<Date>\nThe timestamp indicating the last time this file was modified.\n\nstats.ctime#\nAdded in: v0.11.13\n<Date>\nThe timestamp indicating the last time the file status was changed.\n\nstats.birthtime#\nAdded in: v0.11.13\n<Date>\nThe timestamp indicating the creation time of this file.\n\nStat time values#\nThe atimeMs, mtimeMs, ctimeMs, birthtimeMs properties are numeric values that hold the corresponding times in milliseconds. Their precision is platform specific. When bigint: true is passed into the method that generates the object, the properties will be bigints, otherwise they will be numbers.\n\nThe atimeNs, mtimeNs, ctimeNs, birthtimeNs properties are bigints that hold the corresponding times in nanoseconds. They are only present when bigint: true is passed into the method that generates the object. Their precision is platform specific.\n\natime, mtime, ctime, and birthtime are Date object alternate representations of the various times. The Date and number values are not connected. Assigning a new number value, or mutating the Date value, will not be reflected in the corresponding alternate representation.\n\nThe times in the stat object have the following semantics:\n\natime \"Access Time\": Time when file data last accessed. Changed by the mknod(2), utimes(2), and read(2) system calls.\nmtime \"Modified Time\": Time when file data last modified. Changed by the mknod(2), utimes(2), and write(2) system calls.\nctime \"Change Time\": Time when file status was last changed (inode data modification). Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls.\nbirthtime \"Birth Time\": Time of file creation. Set once when the file is created. On file systems where birthtime is not available, this field may instead hold either the ctime or 1970-01-01T00:00Z (ie, Unix epoch timestamp 0). This value may be greater than atime or mtime in this case. On Darwin and other FreeBSD variants, also set if the atime is explicitly set to an earlier value than the current birthtime using the utimes(2) system call.\nPrior to Node.js 0.12, the ctime held the birthtime on Windows systems. As of 0.12, ctime is not \"creation time\", and on Unix systems, it never was.\n\nClass:", "doc_id": "e4e336c5-7e84-4b6a-b2af-46d6e47b9e26", "embedding": null, "doc_hash": "e05d46e6b52f6763b9d63b3687fadc6b72d0be5f35aa121d742300c6d1e45146", "extra_info": null, "node_info": {"start": 1369445, "end": 1372965}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "901ba4dc-77dd-4c11-9313-0b6eb245a589", "3": "f60dc197-8ea9-4e74-9c9c-5c19dd4fa6bb"}}, "__type__": "1"}, "f60dc197-8ea9-4e74-9c9c-5c19dd4fa6bb": {"__data__": {"text": "rename(2), unlink(2), utimes(2), read(2), and write(2) system calls.\nbirthtime \"Birth Time\": Time of file creation. Set once when the file is created. On file systems where birthtime is not available, this field may instead hold either the ctime or 1970-01-01T00:00Z (ie, Unix epoch timestamp 0). This value may be greater than atime or mtime in this case. On Darwin and other FreeBSD variants, also set if the atime is explicitly set to an earlier value than the current birthtime using the utimes(2) system call.\nPrior to Node.js 0.12, the ctime held the birthtime on Windows systems. As of 0.12, ctime is not \"creation time\", and on Unix systems, it never was.\n\nClass: fs.StatFs#\nAdded in: v18.15.0\nProvides information about a mounted file system.\n\nObjects returned from fs.statfs() and its synchronous counterpart are of this type. If bigint in the options passed to those methods is true, the numeric values will be bigint instead of number.\n\nStatFs {\n  type: 1397114950,\n  bsize: 4096,\n  blocks: 121938943,\n  bfree: 61058895,\n  bavail: 61058895,\n  files: 999,\n  ffree: 1000000\n}\nbigint version:\n\nStatFs {\n  type: 1397114950n,\n  bsize: 4096n,\n  blocks: 121938943n,\n  bfree: 61058895n,\n  bavail: 61058895n,\n  files: 999n,\n  ffree: 1000000n\n}\nstatfs.bavail#\nAdded in: v18.15.0\n<number> | <bigint>\nFree blocks available to unprivileged users.\n\nstatfs.bfree#\nAdded in: v18.15.0\n<number> | <bigint>\nFree blocks in file system.\n\nstatfs.blocks#\nAdded in: v18.15.0\n<number> | <bigint>\nTotal data blocks in file system.\n\nstatfs.bsize#\nAdded in: v18.15.0\n<number> | <bigint>\nOptimal transfer block size.\n\nstatfs.ffree#\nAdded in: v18.15.0\n<number> | <bigint>\nFree file nodes in file system.\n\nstatfs.files#\nAdded in: v18.15.0\n<number> | <bigint>\nTotal file nodes in file system.\n\nstatfs.type#\nAdded in: v18.15.0\n<number> | <bigint>\nType of file system.\n\nClass: fs.WriteStream#\nAdded in: v0.1.93\nExtends <stream.Writable>\nInstances of <fs.WriteStream> are created and returned using the fs.createWriteStream() function.\n\nEvent: 'close'#\nAdded in: v0.1.93\nEmitted when the <fs.WriteStream>'s underlying file descriptor has been closed.\n\nEvent: 'open'#\nAdded in: v0.1.93\nfd <integer> Integer file descriptor used by the <fs.WriteStream>.\nEmitted when the <fs.WriteStream>'s file is opened.\n\nEvent: 'ready'#\nAdded in: v9.11.0\nEmitted when the <fs.WriteStream> is ready to be used.\n\nFires immediately after 'open'.\n\nwriteStream.bytesWritten#\nAdded in: v0.4.7\nThe number of bytes written so far. Does not include data that is still queued for writing.\n\nwriteStream.close([callback])#\nAdded in: v0.9.4\ncallback <Function>\nerr <Error>\nCloses writeStream. Optionally accepts a callback that will be executed once the writeStream is closed.\n\nwriteStream.path#\nAdded in: v0.1.93\nThe path to the file the stream is writing to as specified in the first argument to fs.createWriteStream(). If path is passed as a string, then writeStream.path will be a string. If path is passed as a <Buffer>, then writeStream.path will be a", "doc_id": "f60dc197-8ea9-4e74-9c9c-5c19dd4fa6bb", "embedding": null, "doc_hash": "9f490e969828203ede3998ef3f49a3f0067cd7957cce13d1f5676b7e82e7f245", "extra_info": null, "node_info": {"start": 1372985, "end": 1375990}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e4e336c5-7e84-4b6a-b2af-46d6e47b9e26", "3": "95d811e9-9614-47b3-9981-44aa42ecc717"}}, "__type__": "1"}, "95d811e9-9614-47b3-9981-44aa42ecc717": {"__data__": {"text": "when the <fs.WriteStream> is ready to be used.\n\nFires immediately after 'open'.\n\nwriteStream.bytesWritten#\nAdded in: v0.4.7\nThe number of bytes written so far. Does not include data that is still queued for writing.\n\nwriteStream.close([callback])#\nAdded in: v0.9.4\ncallback <Function>\nerr <Error>\nCloses writeStream. Optionally accepts a callback that will be executed once the writeStream is closed.\n\nwriteStream.path#\nAdded in: v0.1.93\nThe path to the file the stream is writing to as specified in the first argument to fs.createWriteStream(). If path is passed as a string, then writeStream.path will be a string. If path is passed as a <Buffer>, then writeStream.path will be a <Buffer>.\n\nwriteStream.pending#\nAdded in: v11.2.0\n<boolean>\nThis property is true if the underlying file has not been opened yet, i.e. before the 'ready' event is emitted.\n\nfs.constants#\n<Object>\nReturns an object containing commonly used constants for file system operations.\n\nFS constants#\nThe following constants are exported by fs.constants and fsPromises.constants.\n\nNot every constant will be available on every operating system; this is especially important for Windows, where many of the POSIX specific definitions are not available. For portable applications it is recommended to check for their presence before use.\n\nTo use more than one constant, use the bitwise OR | operator.\n\nExample:\n\nimport { open, constants } from 'node:fs';\n\nconst {\n  O_RDWR,\n  O_CREAT,\n  O_EXCL,\n} = constants;\n\nopen('/path/to/my/file', O_RDWR | O_CREAT | O_EXCL, (err, fd) => {\n  // ...\n});\nFile access constants#\nThe following constants are meant for use as the mode parameter passed to fsPromises.access(), fs.access(), and fs.accessSync().\n\nConstant\tDescription\nF_OK\tFlag indicating that the file is visible to the calling process. This is useful for determining if a file exists, but says nothing about rwx permissions. Default if no mode is specified.\nR_OK\tFlag indicating that the file can be read by the calling process.\nW_OK\tFlag indicating that the file can be written by the calling process.\nX_OK\tFlag indicating that the file can be executed by the calling process. This has no effect on Windows (will behave like fs.constants.F_OK).\nThe definitions are also available on Windows.\n\nFile copy constants#\nThe following constants are meant for use with fs.copyFile().\n\nConstant\tDescription\nCOPYFILE_EXCL\tIf present, the copy operation will fail with an error if the destination path already exists.\nCOPYFILE_FICLONE\tIf present, the copy operation will attempt to create a copy-on-write reflink. If the underlying platform does not support copy-on-write, then a fallback copy mechanism is used.\nCOPYFILE_FICLONE_FORCE\tIf present, the copy operation will attempt to create a copy-on-write reflink. If the underlying platform does not support copy-on-write, then the operation will fail with an error.\nThe definitions are also available on Windows.\n\nFile open constants#\nThe following constants are meant for use with fs.open().\n\nConstant\tDescription\nO_RDONLY\tFlag indicating to open a file for read-only access.\nO_WRONLY\tFlag indicating to open a file for write-only access.\nO_RDWR\tFlag indicating to open a file for read-write access.\nO_CREAT\tFlag indicating to create the file if it does not already exist.\nO_EXCL\tFlag indicating that opening a file should fail if the O_CREAT flag is set and the file already exists.\nO_NOCTTY\tFlag indicating that if path identifies a terminal device, opening the path shall not cause that terminal to become the controlling terminal for the process (if the process does", "doc_id": "95d811e9-9614-47b3-9981-44aa42ecc717", "embedding": null, "doc_hash": "9b9a1a1872847fe08671e6e19133c2972cc92c33d671ddf9280a1125ee27081c", "extra_info": null, "node_info": {"start": 1375963, "end": 1379545}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f60dc197-8ea9-4e74-9c9c-5c19dd4fa6bb", "3": "ba83668d-cec9-45f1-995a-15e2d0ff46df"}}, "__type__": "1"}, "ba83668d-cec9-45f1-995a-15e2d0ff46df": {"__data__": {"text": "with an error.\nThe definitions are also available on Windows.\n\nFile open constants#\nThe following constants are meant for use with fs.open().\n\nConstant\tDescription\nO_RDONLY\tFlag indicating to open a file for read-only access.\nO_WRONLY\tFlag indicating to open a file for write-only access.\nO_RDWR\tFlag indicating to open a file for read-write access.\nO_CREAT\tFlag indicating to create the file if it does not already exist.\nO_EXCL\tFlag indicating that opening a file should fail if the O_CREAT flag is set and the file already exists.\nO_NOCTTY\tFlag indicating that if path identifies a terminal device, opening the path shall not cause that terminal to become the controlling terminal for the process (if the process does not already have one).\nO_TRUNC\tFlag indicating that if the file exists and is a regular file, and the file is opened successfully for write access, its length shall be truncated to zero.\nO_APPEND\tFlag indicating that data will be appended to the end of the file.\nO_DIRECTORY\tFlag indicating that the open should fail if the path is not a directory.\nO_NOATIME\tFlag indicating reading accesses to the file system will no longer result in an update to the atime information associated with the file. This flag is available on Linux operating systems only.\nO_NOFOLLOW\tFlag indicating that the open should fail if the path is a symbolic link.\nO_SYNC\tFlag indicating that the file is opened for synchronized I/O with write operations waiting for file integrity.\nO_DSYNC\tFlag indicating that the file is opened for synchronized I/O with write operations waiting for data integrity.\nO_SYMLINK\tFlag indicating to open the symbolic link itself rather than the resource it is pointing to.\nO_DIRECT\tWhen set, an attempt will be made to minimize caching effects of file I/O.\nO_NONBLOCK\tFlag indicating to open the file in nonblocking mode when possible.\nUV_FS_O_FILEMAP\tWhen set, a memory file mapping is used to access the file. This flag is available on Windows operating systems only. On other operating systems, this flag is ignored.\nOn Windows, only O_APPEND, O_CREAT, O_EXCL, O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY, and UV_FS_O_FILEMAP are available.\n\nFile type constants#\nThe following constants are meant for use with the <fs.Stats> object's mode property for determining a file's type.\n\nConstant\tDescription\nS_IFMT\tBit mask used to extract the file type code.\nS_IFREG\tFile type constant for a regular file.\nS_IFDIR\tFile type constant for a directory.\nS_IFCHR\tFile type constant for a character-oriented device file.\nS_IFBLK\tFile type constant for a block-oriented device file.\nS_IFIFO\tFile type constant for a FIFO/pipe.\nS_IFLNK\tFile type constant for a symbolic link.\nS_IFSOCK\tFile type constant for a socket.\nOn Windows, only S_IFCHR, S_IFDIR, S_IFLNK, S_IFMT, and S_IFREG, are available.\n\nFile mode constants#\nThe following constants are meant for use with the <fs.Stats> object's mode property for determining the access permissions for a file.\n\nConstant\tDescription\nS_IRWXU\tFile mode indicating readable, writable, and executable by owner.\nS_IRUSR\tFile mode indicating readable by owner.\nS_IWUSR\tFile mode indicating writable by owner.\nS_IXUSR\tFile mode indicating executable by owner.\nS_IRWXG\tFile mode indicating readable, writable, and executable by group.\nS_IRGRP\tFile mode indicating readable by group.\nS_IWGRP\tFile mode indicating writable by group.\nS_IXGRP\tFile mode indicating executable by", "doc_id": "ba83668d-cec9-45f1-995a-15e2d0ff46df", "embedding": null, "doc_hash": "b89a20ab7dbb3fca876973c82356a4836bd197c8f92643b8417acb99c3c783f8", "extra_info": null, "node_info": {"start": 1379516, "end": 1382933}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "95d811e9-9614-47b3-9981-44aa42ecc717", "3": "6713d2e3-04e1-45c8-ade5-d210de5e191a"}}, "__type__": "1"}, "6713d2e3-04e1-45c8-ade5-d210de5e191a": {"__data__": {"text": "and S_IFREG, are available.\n\nFile mode constants#\nThe following constants are meant for use with the <fs.Stats> object's mode property for determining the access permissions for a file.\n\nConstant\tDescription\nS_IRWXU\tFile mode indicating readable, writable, and executable by owner.\nS_IRUSR\tFile mode indicating readable by owner.\nS_IWUSR\tFile mode indicating writable by owner.\nS_IXUSR\tFile mode indicating executable by owner.\nS_IRWXG\tFile mode indicating readable, writable, and executable by group.\nS_IRGRP\tFile mode indicating readable by group.\nS_IWGRP\tFile mode indicating writable by group.\nS_IXGRP\tFile mode indicating executable by group.\nS_IRWXO\tFile mode indicating readable, writable, and executable by others.\nS_IROTH\tFile mode indicating readable by others.\nS_IWOTH\tFile mode indicating writable by others.\nS_IXOTH\tFile mode indicating executable by others.\nOn Windows, only S_IRUSR and S_IWUSR are available.\n\nNotes#\nOrdering of callback and promise-based operations#\nBecause they are executed asynchronously by the underlying thread pool, there is no guaranteed ordering when using either the callback or promise-based methods.\n\nFor example, the following is prone to error because the fs.stat() operation might complete before the fs.rename() operation:\n\nconst fs = require('node:fs');\n\nfs.rename('/tmp/hello', '/tmp/world', (err) => {\n  if (err) throw err;\n  console.log('renamed complete');\n});\nfs.stat('/tmp/world', (err, stats) => {\n  if (err) throw err;\n  console.log(`stats: ${JSON.stringify(stats)}`);\n});\nIt is important to correctly order the operations by awaiting the results of one before invoking the other:\n\nimport { rename, stat } from 'node:fs/promises';\n\nconst oldPath = '/tmp/hello';\nconst newPath = '/tmp/world';\n\ntry {\n  await rename(oldPath, newPath);\n  const stats = await stat(newPath);\n  console.log(`stats: ${JSON.stringify(stats)}`);\n} catch (error) {\n  console.error('there was an error:', error.message);\n}\nOr, when using the callback APIs, move the fs.stat() call into the callback of the fs.rename() operation:\n\nimport { rename, stat } from 'node:fs';\n\nrename('/tmp/hello', '/tmp/world', (err) => {\n  if (err) throw err;\n  stat('/tmp/world', (err, stats) => {\n    if (err) throw err;\n    console.log(`stats: ${JSON.stringify(stats)}`);\n  });\n});\nFile paths#\nMost fs operations accept file paths that may be specified in the form of a string, a <Buffer>, or a <URL> object using the file: protocol.\n\nString paths#\nString paths are interpreted as UTF-8 character sequences identifying the absolute or relative filename. Relative paths will be resolved relative to the current working directory as determined by calling process.cwd().\n\nExample using an absolute path on POSIX:\n\nimport { open } from 'node:fs/promises';\n\nlet fd;\ntry {\n  fd = await open('/open/some/file.txt', 'r');\n  // Do something with the file\n} finally {\n  await fd?.close();\n}\nExample using a relative path on POSIX (relative to process.cwd()):\n\nimport { open } from 'node:fs/promises';\n\nlet fd;\ntry {\n  fd = await open('file.txt', 'r');\n  // Do something with the file\n} finally {\n  await fd?.close();\n}\nFile URL paths#\nAdded in: v7.6.0\nFor most node:fs module functions, the path or filename argument may be passed as", "doc_id": "6713d2e3-04e1-45c8-ade5-d210de5e191a", "embedding": null, "doc_hash": "85fc58755bb98242c81ae9f23c9a598ee1837b365cdfa168f5190abeb6ef886e", "extra_info": null, "node_info": {"start": 1382985, "end": 1386219}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ba83668d-cec9-45f1-995a-15e2d0ff46df", "3": "ed2e3410-a837-4827-9546-b19a57ea1566"}}, "__type__": "1"}, "ed2e3410-a837-4827-9546-b19a57ea1566": {"__data__": {"text": "calling process.cwd().\n\nExample using an absolute path on POSIX:\n\nimport { open } from 'node:fs/promises';\n\nlet fd;\ntry {\n  fd = await open('/open/some/file.txt', 'r');\n  // Do something with the file\n} finally {\n  await fd?.close();\n}\nExample using a relative path on POSIX (relative to process.cwd()):\n\nimport { open } from 'node:fs/promises';\n\nlet fd;\ntry {\n  fd = await open('file.txt', 'r');\n  // Do something with the file\n} finally {\n  await fd?.close();\n}\nFile URL paths#\nAdded in: v7.6.0\nFor most node:fs module functions, the path or filename argument may be passed as a <URL> object using the file: protocol.\n\nimport { readFileSync } from 'node:fs';\n\nreadFileSync(new URL('file:///tmp/hello'));\nfile: URLs are always absolute paths.\n\nPlatform-specific considerations#\nOn Windows, file: <URL>s with a host name convert to UNC paths, while file: <URL>s with drive letters convert to local absolute paths. file: <URL>s with no host name and no drive letter will result in an error:\n\nimport { readFileSync } from 'node:fs';\n// On Windows :\n\n// - WHATWG file URLs with hostname convert to UNC path\n// file://hostname/p/a/t/h/file => \\\\hostname\\p\\a\\t\\h\\file\nreadFileSync(new URL('file://hostname/p/a/t/h/file'));\n\n// - WHATWG file URLs with drive letters convert to absolute path\n// file:///C:/tmp/hello => C:\\tmp\\hello\nreadFileSync(new URL('file:///C:/tmp/hello'));\n\n// - WHATWG file URLs without hostname must have a drive letters\nreadFileSync(new URL('file:///notdriveletter/p/a/t/h/file'));\nreadFileSync(new URL('file:///c/p/a/t/h/file'));\n// TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must be absolute\nfile: <URL>s with drive letters must use : as a separator just after the drive letter. Using another separator will result in an error.\n\nOn all other platforms, file: <URL>s with a host name are unsupported and will result in an error:\n\nimport { readFileSync } from 'node:fs';\n// On other platforms:\n\n// - WHATWG file URLs with hostname are unsupported\n// file://hostname/p/a/t/h/file => throw!\nreadFileSync(new URL('file://hostname/p/a/t/h/file'));\n// TypeError [ERR_INVALID_FILE_URL_PATH]: must be absolute\n\n// - WHATWG file URLs convert to absolute path\n// file:///tmp/hello => /tmp/hello\nreadFileSync(new URL('file:///tmp/hello'));\nA file: <URL> having encoded slash characters will result in an error on all platforms:\n\nimport { readFileSync } from 'node:fs';\n\n// On Windows\nreadFileSync(new URL('file:///C:/p/a/t/h/%2F'));\nreadFileSync(new URL('file:///C:/p/a/t/h/%2f'));\n/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded\n\\ or / characters */\n\n// On POSIX\nreadFileSync(new URL('file:///p/a/t/h/%2F'));\nreadFileSync(new URL('file:///p/a/t/h/%2f'));\n/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded\n/ characters */\nOn Windows, file: <URL>s having encoded backslash will result in an error:\n\nimport { readFileSync } from 'node:fs';\n\n// On Windows\nreadFileSync(new", "doc_id": "ed2e3410-a837-4827-9546-b19a57ea1566", "embedding": null, "doc_hash": "c13b75702d988c198f704f0659dc8caf03855753fdef2d01d23a30be9476aaba", "extra_info": null, "node_info": {"start": 1386295, "end": 1389246}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6713d2e3-04e1-45c8-ade5-d210de5e191a", "3": "d4330b78-b0b2-4206-aca1-594930af62c7"}}, "__type__": "1"}, "d4330b78-b0b2-4206-aca1-594930af62c7": {"__data__": {"text": "URL('file:///C:/p/a/t/h/%2f'));\n/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded\n\\ or / characters */\n\n// On POSIX\nreadFileSync(new URL('file:///p/a/t/h/%2F'));\nreadFileSync(new URL('file:///p/a/t/h/%2f'));\n/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded\n/ characters */\nOn Windows, file: <URL>s having encoded backslash will result in an error:\n\nimport { readFileSync } from 'node:fs';\n\n// On Windows\nreadFileSync(new URL('file:///C:/path/%5C'));\nreadFileSync(new URL('file:///C:/path/%5c'));\n/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded\n\\ or / characters */\nBuffer paths#\nPaths specified using a <Buffer> are useful primarily on certain POSIX operating systems that treat file paths as opaque byte sequences. On such systems, it is possible for a single file path to contain sub-sequences that use multiple character encodings. As with string paths, <Buffer> paths may be relative or absolute:\n\nExample using an absolute path on POSIX:\n\nimport { open } from 'node:fs/promises';\nimport { Buffer } from 'node:buffer';\n\nlet fd;\ntry {\n  fd = await open(Buffer.from('/open/some/file.txt'), 'r');\n  // Do something with the file\n} finally {\n  await fd?.close();\n}\nPer-drive working directories on Windows#\nOn Windows, Node.js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example fs.readdirSync('C:\\\\') can potentially return a different result than fs.readdirSync('C:'). For more information, see this MSDN page.\n\nFile descriptors#\nOn POSIX systems, for every process, the kernel maintains a table of currently open files and resources. Each open file is assigned a simple numeric identifier called a file descriptor. At the system-level, all file system operations use these file descriptors to identify and track each specific file. Windows systems use a different but conceptually similar mechanism for tracking resources. To simplify things for users, Node.js abstracts away the differences between operating systems and assigns all open files a numeric file descriptor.\n\nThe callback-based fs.open(), and synchronous fs.openSync() methods open a file and allocate a new file descriptor. Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file.\n\nOperating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed. Failure to do so will result in a memory leak that will eventually cause an application to crash.\n\nimport { open, close, fstat } from 'node:fs';\n\nfunction closeFd(fd) {\n  close(fd, (err) => {\n    if (err) throw err;\n  });\n}\n\nopen('/open/some/file.txt', 'r', (err, fd) => {\n  if (err) throw err;\n  try {\n    fstat(fd, (err, stat) => {\n      if (err) {\n        closeFd(fd);\n        throw err;\n      }\n\n      // use stat\n\n      closeFd(fd);\n    });\n  } catch (err) {\n    closeFd(fd);\n    throw err;\n  }\n});\nThe promise-based APIs use a <FileHandle> object in place of the numeric file descriptor. These objects are better managed by the system to ensure that resources are not leaked. However, it is still", "doc_id": "d4330b78-b0b2-4206-aca1-594930af62c7", "embedding": null, "doc_hash": "aa896b2969df7d09addf32be069aa576afb6b5673752490e5ee87a2fae66ff2b", "extra_info": null, "node_info": {"start": 1389305, "end": 1392567}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ed2e3410-a837-4827-9546-b19a57ea1566", "3": "1399c9c4-8949-4d30-bb5d-f99ec2bdb5dc"}}, "__type__": "1"}, "1399c9c4-8949-4d30-bb5d-f99ec2bdb5dc": {"__data__": {"text": "'r', (err, fd) => {\n  if (err) throw err;\n  try {\n    fstat(fd, (err, stat) => {\n      if (err) {\n        closeFd(fd);\n        throw err;\n      }\n\n      // use stat\n\n      closeFd(fd);\n    });\n  } catch (err) {\n    closeFd(fd);\n    throw err;\n  }\n});\nThe promise-based APIs use a <FileHandle> object in place of the numeric file descriptor. These objects are better managed by the system to ensure that resources are not leaked. However, it is still required that they are closed when operations are completed:\n\nimport { open } from 'node:fs/promises';\n\nlet file;\ntry {\n  file = await open('/open/some/file.txt', 'r');\n  const stat = await file.stat();\n  // use stat\n} finally {\n  await file.close();\n}\nThreadpool usage#\nAll callback and promise-based file system APIs (with the exception of fs.FSWatcher()) use libuv's threadpool. This can have surprising and negative performance implications for some applications. See the UV_THREADPOOL_SIZE documentation for more information.\n\nFile system flags#\nThe following flags are available wherever the flag option takes a string.\n\n'a': Open file for appending. The file is created if it does not exist.\n\n'ax': Like 'a' but fails if the path exists.\n\n'a+': Open file for reading and appending. The file is created if it does not exist.\n\n'ax+': Like 'a+' but fails if the path exists.\n\n'as': Open file for appending in synchronous mode. The file is created if it does not exist.\n\n'as+': Open file for reading and appending in synchronous mode. The file is created if it does not exist.\n\n'r': Open file for reading. An exception occurs if the file does not exist.\n\n'r+': Open file for reading and writing. An exception occurs if the file does not exist.\n\n'rs+': Open file for reading and writing in synchronous mode. Instructs the operating system to bypass the local file system cache.\n\nThis is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache. It has a very real impact on I/O performance so using this flag is not recommended unless it is needed.\n\nThis doesn't turn fs.open() or fsPromises.open() into a synchronous blocking call. If synchronous operation is desired, something like fs.openSync() should be used.\n\n'w': Open file for writing. The file is created (if it does not exist) or truncated (if it exists).\n\n'wx': Like 'w' but fails if the path exists.\n\n'w+': Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).\n\n'wx+': Like 'w+' but fails if the path exists.\n\nflag can also be a number as documented by open(2); commonly used constants are available from fs.constants. On Windows, flags are translated to their equivalent ones where applicable, e.g. O_WRONLY to FILE_GENERIC_WRITE, or O_EXCL|O_CREAT to CREATE_NEW, as accepted by CreateFileW.\n\nThe exclusive flag 'x' (O_EXCL flag in open(2)) causes the operation to return an error if the path already exists. On POSIX, if the path is a symbolic link, using O_EXCL returns an error even if the link is to a path that does not exist. The exclusive flag might not work with network file systems.\n\nOn Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.\n\nModifying a file rather than replacing it may require the flag option to be set to 'r+' rather than the default", "doc_id": "1399c9c4-8949-4d30-bb5d-f99ec2bdb5dc", "embedding": null, "doc_hash": "6001d31818a5b48c32260d89649d76842f02838134b14de48f4e4543f6685d50", "extra_info": null, "node_info": {"start": 1392673, "end": 1396067}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d4330b78-b0b2-4206-aca1-594930af62c7", "3": "77d24da1-12ef-4dbd-8e28-683b660dfa80"}}, "__type__": "1"}, "77d24da1-12ef-4dbd-8e28-683b660dfa80": {"__data__": {"text": "where applicable, e.g. O_WRONLY to FILE_GENERIC_WRITE, or O_EXCL|O_CREAT to CREATE_NEW, as accepted by CreateFileW.\n\nThe exclusive flag 'x' (O_EXCL flag in open(2)) causes the operation to return an error if the path already exists. On POSIX, if the path is a symbolic link, using O_EXCL returns an error even if the link is to a path that does not exist. The exclusive flag might not work with network file systems.\n\nOn Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.\n\nModifying a file rather than replacing it may require the flag option to be set to 'r+' rather than the default 'w'.\n\nThe behavior of some flags are platform-specific. As such, opening a directory on macOS and Linux with the 'a+' flag, as in the example below, will return an error. In contrast, on Windows and FreeBSD, a file descriptor or a FileHandle will be returned.\n\n// macOS and Linux\nfs.open('<directory>', 'a+', (err, fd) => {\n  // => [Error: EISDIR: illegal operation on a directory, open <directory>]\n});\n\n// Windows and FreeBSD\nfs.open('<directory>', 'a+', (err, fd) => {\n  // => null, <fd>\n});\nOn Windows, opening an existing hidden file using the 'w' flag (either through fs.open(), fs.writeFile(), or fsPromises.open()) will fail with EPERM. Existing hidden files can be opened for writing with the 'r+' flag.\n\nA call to fs.ftruncate() or filehandle.truncate() can be used to reset the file contents.\n\nGlobal objects#\nThese objects are available in all modules. The following variables may appear to be global but are not. They exist only in the scope of modules, see the module system documentation:\n\n__dirname\n__filename\nexports\nmodule\nrequire()\nThe objects listed here are specific to Node.js. There are built-in objects that are part of the JavaScript language itself, which are also globally accessible.\n\nClass: AbortController#\nHistory\nA utility class used to signal cancelation in selected Promise-based APIs. The API is based on the Web API AbortController.\n\nconst ac = new AbortController();\n\nac.signal.addEventListener('abort', () => console.log('Aborted!'),\n                           { once: true });\n\nac.abort();\n\nconsole.log(ac.signal.aborted);  // Prints True\nabortController.abort([reason])#\nHistory\nreason <any> An optional reason, retrievable on the AbortSignal's reason property.\nTriggers the abort signal, causing the abortController.signal to emit the 'abort' event.\n\nabortController.signal#\nAdded in: v15.0.0, v14.17.0\nType: <AbortSignal>\nClass: AbortSignal#\nAdded in: v15.0.0, v14.17.0\nExtends: <EventTarget>\nThe AbortSignal is used to notify observers when the abortController.abort() method is called.\n\nStatic method: AbortSignal.abort([reason])#\nHistory\nreason: <any>\nReturns: <AbortSignal>\nReturns a new already aborted AbortSignal.\n\nStatic method: AbortSignal.timeout(delay)#\nAdded in: v17.3.0, v16.14.0\ndelay <number> The number of milliseconds to wait before triggering the AbortSignal.\nReturns a new AbortSignal which will be aborted in delay milliseconds.\n\nEvent: 'abort'#\nAdded in: v15.0.0, v14.17.0\nThe 'abort' event is emitted when the abortController.abort() method is called. The callback is invoked with a single object argument with a single type property set to", "doc_id": "77d24da1-12ef-4dbd-8e28-683b660dfa80", "embedding": null, "doc_hash": "b8d53af79399232e3dc18977a95cf25ab81f98a7b1a8509ad4420073442d4f82", "extra_info": null, "node_info": {"start": 1395816, "end": 1399123}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1399c9c4-8949-4d30-bb5d-f99ec2bdb5dc", "3": "0736c5b2-ab52-4f91-a979-92a8f69f16a3"}}, "__type__": "1"}, "0736c5b2-ab52-4f91-a979-92a8f69f16a3": {"__data__": {"text": "when the abortController.abort() method is called.\n\nStatic method: AbortSignal.abort([reason])#\nHistory\nreason: <any>\nReturns: <AbortSignal>\nReturns a new already aborted AbortSignal.\n\nStatic method: AbortSignal.timeout(delay)#\nAdded in: v17.3.0, v16.14.0\ndelay <number> The number of milliseconds to wait before triggering the AbortSignal.\nReturns a new AbortSignal which will be aborted in delay milliseconds.\n\nEvent: 'abort'#\nAdded in: v15.0.0, v14.17.0\nThe 'abort' event is emitted when the abortController.abort() method is called. The callback is invoked with a single object argument with a single type property set to 'abort':\n\nconst ac = new AbortController();\n\n// Use either the onabort property...\nac.signal.onabort = () => console.log('aborted!');\n\n// Or the EventTarget API...\nac.signal.addEventListener('abort', (event) => {\n  console.log(event.type);  // Prints 'abort'\n}, { once: true });\n\nac.abort();\nThe AbortController with which the AbortSignal is associated will only ever trigger the 'abort' event once. We recommended that code check that the abortSignal.aborted attribute is false before adding an 'abort' event listener.\n\nAny event listeners attached to the AbortSignal should use the { once: true } option (or, if using the EventEmitter APIs to attach a listener, use the once() method) to ensure that the event listener is removed as soon as the 'abort' event is handled. Failure to do so may result in memory leaks.\n\nabortSignal.aborted#\nAdded in: v15.0.0, v14.17.0\nType: <boolean> True after the AbortController has been aborted.\nabortSignal.onabort#\nAdded in: v15.0.0, v14.17.0\nType: <Function>\nAn optional callback function that may be set by user code to be notified when the abortController.abort() function has been called.\n\nabortSignal.reason#\nAdded in: v17.2.0, v16.14.0\nType: <any>\nAn optional reason specified when the AbortSignal was triggered.\n\nconst ac = new AbortController();\nac.abort(new Error('boom!'));\nconsole.log(ac.signal.reason);  // Error('boom!');\nabortSignal.throwIfAborted()#\nAdded in: v17.3.0\nIf abortSignal.aborted is true, throws abortSignal.reason.\n\nClass: Blob#\nAdded in: v18.0.0\nSee <Blob>.\n\nClass: Buffer#\nAdded in: v0.1.103\n<Function>\nUsed to handle binary data. See the buffer section.\n\nClass: ByteLengthQueuingStrategy#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of ByteLengthQueuingStrategy.\n\n__dirname#\nThis variable may appear to be global but is not. See __dirname.\n\n__filename#\nThis variable may appear to be global but is not. See __filename.\n\natob(data)#\nAdded in: v16.0.0\nStability: 3 - Legacy. Use Buffer.from(data, 'base64') instead.\nGlobal alias for buffer.atob().\n\nBroadcastChannel#\nAdded in: v18.0.0\nSee <BroadcastChannel>.\n\nbtoa(data)#\nAdded in: v16.0.0\nStability: 3 - Legacy. Use buf.toString('base64') instead.\nGlobal alias for buffer.btoa().\n\nclearImmediate(immediateObject)#\nAdded in: v0.9.1\nclearImmediate is described in the timers section.\n\nclearInterval(intervalObject)#\nAdded in: v0.0.1\nclearInterval is described in the timers section.\n\nclearTimeout(timeoutObject)#\nAdded", "doc_id": "0736c5b2-ab52-4f91-a979-92a8f69f16a3", "embedding": null, "doc_hash": "54d565c2bece5ecca710efc0917cb2aec1f83c69149e3e4cf54bc556210857bc", "extra_info": null, "node_info": {"start": 1399153, "end": 1402252}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "77d24da1-12ef-4dbd-8e28-683b660dfa80", "3": "828dea06-8c14-4471-983a-d13f070934a6"}}, "__type__": "1"}, "828dea06-8c14-4471-983a-d13f070934a6": {"__data__": {"text": "in: v16.0.0\nStability: 3 - Legacy. Use Buffer.from(data, 'base64') instead.\nGlobal alias for buffer.atob().\n\nBroadcastChannel#\nAdded in: v18.0.0\nSee <BroadcastChannel>.\n\nbtoa(data)#\nAdded in: v16.0.0\nStability: 3 - Legacy. Use buf.toString('base64') instead.\nGlobal alias for buffer.btoa().\n\nclearImmediate(immediateObject)#\nAdded in: v0.9.1\nclearImmediate is described in the timers section.\n\nclearInterval(intervalObject)#\nAdded in: v0.0.1\nclearInterval is described in the timers section.\n\nclearTimeout(timeoutObject)#\nAdded in: v0.0.1\nclearTimeout is described in the timers section.\n\nClass: CompressionStream#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of CompressionStream.\n\nconsole#\nAdded in: v0.1.100\n<Object>\nUsed to print to stdout and stderr. See the console section.\n\nClass: CountQueuingStrategy#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of CountQueuingStrategy.\n\nCrypto#\nAdded in: v17.6.0\nStability: 1 - Experimental. Enable this API with the --experimental-global-webcrypto CLI flag.\nA browser-compatible implementation of <Crypto>. This global is available only if the Node.js binary was compiled with including support for the node:crypto module.\n\ncrypto#\nAdded in: v17.6.0\nStability: 1 - Experimental. Enable this API with the --experimental-global-webcrypto CLI flag.\nA browser-compatible implementation of the Web Crypto API.\n\nCryptoKey#\nAdded in: v17.6.0\nStability: 1 - Experimental. Enable this API with the --experimental-global-webcrypto CLI flag.\nA browser-compatible implementation of <CryptoKey>. This global is available only if the Node.js binary was compiled with including support for the node:crypto module.\n\nCustomEvent#\nAdded in: v18.7.0\nStability: 1 - Experimental. Enable this API with the --experimental-global-customevent CLI flag.\nA browser-compatible implementation of the CustomEvent Web API.\n\nClass: DecompressionStream#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of DecompressionStream.\n\nEvent#\nHistory\nA browser-compatible implementation of the Event class. See EventTarget and Event API for more details.\n\nEventTarget#\nHistory\nA browser-compatible implementation of the EventTarget class. See EventTarget and Event API for more details.\n\nexports#\nThis variable may appear to be global but is not. See exports.\n\nfetch#\nHistory\nStability: 1 - Experimental. Disable this API with the --no-experimental-fetch CLI flag.\nA browser-compatible implementation of the fetch() function.\n\nClass FormData#\nHistory\nStability: 1 - Experimental. Disable this API with the --no-experimental-fetch CLI flag.\nA browser-compatible implementation of <FormData>.\n\nglobal#\nAdded in: v0.1.27\n<Object> The global namespace object.\nIn browsers, the top-level scope is the global scope. This means that within the browser var something will define a new global variable. In Node.js this is different. The top-level scope is not the global scope; var something inside a Node.js module will be local to that module.\n\nClass Headers#\nHistory\nStability: 1 - Experimental. Disable this API with the --no-experimental-fetch CLI flag.\nA browser-compatible implementation of <Headers>.\n\nMessageChannel#\nAdded in: v15.0.0\nThe MessageChannel class. See MessageChannel for more details.\n\nMessageEvent#\nAdded in: v15.0.0\nThe MessageEvent class. See MessageEvent for more details.\n\nMessagePort#\nAdded in: v15.0.0\nThe MessagePort class.", "doc_id": "828dea06-8c14-4471-983a-d13f070934a6", "embedding": null, "doc_hash": "2a9a2b5ed9cc922e96e7d4b8b563f2c83bd46fce2f05f4c2b64d2ef41447307a", "extra_info": null, "node_info": {"start": 1402322, "end": 1405782}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0736c5b2-ab52-4f91-a979-92a8f69f16a3", "3": "7ad6146b-8b45-4f80-82ad-843ce1636399"}}, "__type__": "1"}, "7ad6146b-8b45-4f80-82ad-843ce1636399": {"__data__": {"text": "The global namespace object.\nIn browsers, the top-level scope is the global scope. This means that within the browser var something will define a new global variable. In Node.js this is different. The top-level scope is not the global scope; var something inside a Node.js module will be local to that module.\n\nClass Headers#\nHistory\nStability: 1 - Experimental. Disable this API with the --no-experimental-fetch CLI flag.\nA browser-compatible implementation of <Headers>.\n\nMessageChannel#\nAdded in: v15.0.0\nThe MessageChannel class. See MessageChannel for more details.\n\nMessageEvent#\nAdded in: v15.0.0\nThe MessageEvent class. See MessageEvent for more details.\n\nMessagePort#\nAdded in: v15.0.0\nThe MessagePort class. See MessagePort for more details.\n\nmodule#\nThis variable may appear to be global but is not. See module.\n\nperformance#\nAdded in: v16.0.0\nThe perf_hooks.performance object.\n\nprocess#\nAdded in: v0.1.7\n<Object>\nThe process object. See the process object section.\n\nqueueMicrotask(callback)#\nAdded in: v11.0.0\ncallback <Function> Function to be queued.\nThe queueMicrotask() method queues a microtask to invoke callback. If callback throws an exception, the process object 'uncaughtException' event will be emitted.\n\nThe microtask queue is managed by V8 and may be used in a similar manner to the process.nextTick() queue, which is managed by Node.js. The process.nextTick() queue is always processed before the microtask queue within each turn of the Node.js event loop.\n\n// Here, `queueMicrotask()` is used to ensure the 'load' event is always\n// emitted asynchronously, and therefore consistently. Using\n// `process.nextTick()` here would result in the 'load' event always emitting\n// before any other promise jobs.\n\nDataHandler.prototype.load = async function load(key) {\n  const hit = this._cache.get(key);\n  if (hit !== undefined) {\n    queueMicrotask(() => {\n      this.emit('load', hit);\n    });\n    return;\n  }\n\n  const data = await fetchData(key);\n  this._cache.set(key, data);\n  this.emit('load', data);\n};\nClass: ReadableByteStreamController#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of ReadableByteStreamController.\n\nClass: ReadableStream#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of ReadableStream.\n\nClass: ReadableStreamBYOBReader#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of ReadableStreamBYOBReader.\n\nClass: ReadableStreamBYOBRequest#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of ReadableStreamBYOBRequest.\n\nClass: ReadableStreamDefaultController#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of ReadableStreamDefaultController.\n\nClass: ReadableStreamDefaultReader#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of ReadableStreamDefaultReader.\n\nrequire()#\nThis variable may appear to be global but is not. See require().\n\nResponse#\nHistory\nStability: 1 - Experimental. Disable this API with the --no-experimental-fetch CLI flag.\nA browser-compatible implementation of <Response>.\n\nRequest#\nHistory\nStability: 1 - Experimental. Disable this API with the --no-experimental-fetch CLI flag.\nA browser-compatible implementation of <Request>.\n\nsetImmediate(callback[, ...args])#\nAdded in: v0.9.1\nsetImmediate is described in the timers section.\n\nsetInterval(callback, delay[, ...args])#\nAdded in:", "doc_id": "7ad6146b-8b45-4f80-82ad-843ce1636399", "embedding": null, "doc_hash": "247257cb921f14e9839275965197d2cdefc7cc70c9c570f2a5704b890b90a415", "extra_info": null, "node_info": {"start": 1405640, "end": 1409101}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "828dea06-8c14-4471-983a-d13f070934a6", "3": "88cce6f7-d6fb-44dc-b866-0001aec53849"}}, "__type__": "1"}, "88cce6f7-d6fb-44dc-b866-0001aec53849": {"__data__": {"text": "ReadableStreamDefaultReader#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of ReadableStreamDefaultReader.\n\nrequire()#\nThis variable may appear to be global but is not. See require().\n\nResponse#\nHistory\nStability: 1 - Experimental. Disable this API with the --no-experimental-fetch CLI flag.\nA browser-compatible implementation of <Response>.\n\nRequest#\nHistory\nStability: 1 - Experimental. Disable this API with the --no-experimental-fetch CLI flag.\nA browser-compatible implementation of <Request>.\n\nsetImmediate(callback[, ...args])#\nAdded in: v0.9.1\nsetImmediate is described in the timers section.\n\nsetInterval(callback, delay[, ...args])#\nAdded in: v0.0.1\nsetInterval is described in the timers section.\n\nsetTimeout(callback, delay[, ...args])#\nAdded in: v0.0.1\nsetTimeout is described in the timers section.\n\nstructuredClone(value[, options])#\nAdded in: v17.0.0\nThe WHATWG structuredClone method.\n\nSubtleCrypto#\nAdded in: v17.6.0\nStability: 1 - Experimental. Enable this API with the --experimental-global-webcrypto CLI flag.\nA browser-compatible implementation of <SubtleCrypto>. This global is available only if the Node.js binary was compiled with including support for the node:crypto module.\n\nDOMException#\nAdded in: v17.0.0\nThe WHATWG DOMException class. See DOMException for more details.\n\nTextDecoder#\nAdded in: v11.0.0\nThe WHATWG TextDecoder class. See the TextDecoder section.\n\nClass: TextDecoderStream#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of TextDecoderStream.\n\nTextEncoder#\nAdded in: v11.0.0\nThe WHATWG TextEncoder class. See the TextEncoder section.\n\nClass: TextEncoderStream#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of TextEncoderStream.\n\nClass: TransformStream#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of TransformStream.\n\nClass: TransformStreamDefaultController#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of TransformStreamDefaultController.\n\nURL#\nAdded in: v10.0.0\nThe WHATWG URL class. See the URL section.\n\nURLSearchParams#\nAdded in: v10.0.0\nThe WHATWG URLSearchParams class. See the URLSearchParams section.\n\nWebAssembly#\nAdded in: v8.0.0\n<Object>\nThe object that acts as the namespace for all W3C WebAssembly related functionality. See the Mozilla Developer Network for usage and compatibility.\n\nClass: WritableStream#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of WritableStream.\n\nClass: WritableStreamDefaultController#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of WritableStreamDefaultController.\n\nClass: WritableStreamDefaultWriter#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of WritableStreamDefaultWriter.\n\nHTTP#\nStability: 2 - Stable\nSource Code: lib/http.js\n\nTo use the HTTP server and client one must require('node:http').\n\nThe HTTP interfaces in Node.js are designed to support many features of the protocol which have been traditionally difficult to use. In particular, large, possibly chunk-encoded, messages. The interface is careful to never buffer entire requests or responses, so the user is able to stream data.\n\nHTTP message headers are represented by an object like this:\n\n{ 'content-length': '123',\n  'content-type': 'text/plain',\n  'connection':", "doc_id": "88cce6f7-d6fb-44dc-b866-0001aec53849", "embedding": null, "doc_hash": "105256dd355b3ad5cde768ee70d39360154af384fc502f7f074189a530c686d0", "extra_info": null, "node_info": {"start": 1409103, "end": 1412528}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7ad6146b-8b45-4f80-82ad-843ce1636399", "3": "e3b05457-1dbf-4eaf-b156-97c5436b915f"}}, "__type__": "1"}, "e3b05457-1dbf-4eaf-b156-97c5436b915f": {"__data__": {"text": "WritableStreamDefaultController.\n\nClass: WritableStreamDefaultWriter#\nAdded in: v18.0.0\nStability: 1 - Experimental.\nA browser-compatible implementation of WritableStreamDefaultWriter.\n\nHTTP#\nStability: 2 - Stable\nSource Code: lib/http.js\n\nTo use the HTTP server and client one must require('node:http').\n\nThe HTTP interfaces in Node.js are designed to support many features of the protocol which have been traditionally difficult to use. In particular, large, possibly chunk-encoded, messages. The interface is careful to never buffer entire requests or responses, so the user is able to stream data.\n\nHTTP message headers are represented by an object like this:\n\n{ 'content-length': '123',\n  'content-type': 'text/plain',\n  'connection': 'keep-alive',\n  'host': 'example.com',\n  'accept': '*/*' }\nKeys are lowercased. Values are not modified.\n\nIn order to support the full spectrum of possible HTTP applications, the Node.js HTTP API is very low-level. It deals with stream handling and message parsing only. It parses a message into headers and body but it does not parse the actual headers or the body.\n\nSee message.headers for details on how duplicate headers are handled.\n\nThe raw headers as they were received are retained in the rawHeaders property, which is an array of [key, value, key2, value2, ...]. For example, the previous message header object might have a rawHeaders list like the following:\n\n[ 'ConTent-Length', '123456',\n  'content-LENGTH', '123',\n  'content-type', 'text/plain',\n  'CONNECTION', 'keep-alive',\n  'Host', 'example.com',\n  'accepT', '*/*' ]\nClass: http.Agent#\nAdded in: v0.3.4\nAn Agent is responsible for managing connection persistence and reuse for HTTP clients. It maintains a queue of pending requests for a given host and port, reusing a single socket connection for each until the queue is empty, at which time the socket is either destroyed or put into a pool where it is kept to be used again for requests to the same host and port. Whether it is destroyed or pooled depends on the keepAlive option.\n\nPooled connections have TCP Keep-Alive enabled for them, but servers may still close idle connections, in which case they will be removed from the pool and a new connection will be made when a new HTTP request is made for that host and port. Servers may also refuse to allow multiple requests over the same connection, in which case the connection will have to be remade for every request and cannot be pooled. The Agent will still make the requests to that server, but each one will occur over a new connection.\n\nWhen a connection is closed by the client or the server, it is removed from the pool. Any unused sockets in the pool will be unrefed so as not to keep the Node.js process running when there are no outstanding requests. (see socket.unref()).\n\nIt is good practice, to destroy() an Agent instance when it is no longer in use, because unused sockets consume OS resources.\n\nSockets are removed from an agent when the socket emits either a 'close' event or an 'agentRemove' event. When intending to keep one HTTP request open for a long time without keeping it in the agent, something like the following may be done:\n\nhttp.get(options, (res) => {\n  // Do stuff\n}).on('socket', (socket) => {\n  socket.emit('agentRemove');\n});\nAn agent may also be used for an individual request. By providing {agent: false} as an option to the http.get() or http.request() functions, a one-time use Agent with default options will be used for the client connection.\n\nagent:false:\n\nhttp.get({\n  hostname: 'localhost',\n  port: 80,\n  path: '/',\n  agent: false,  // Create a new agent just for this one request\n}, (res) => {\n  // Do stuff with response\n});\nnew Agent([options])#\nHistory\noptions <Object> Set of configurable options to set on the", "doc_id": "e3b05457-1dbf-4eaf-b156-97c5436b915f", "embedding": null, "doc_hash": "92706b895af489b718111110e15689b56136b8f3e8da50acf2e780084d9713bd", "extra_info": null, "node_info": {"start": 1412503, "end": 1416276}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "88cce6f7-d6fb-44dc-b866-0001aec53849", "3": "53d5bd52-57de-483f-9280-db5e98e9f43d"}}, "__type__": "1"}, "53d5bd52-57de-483f-9280-db5e98e9f43d": {"__data__": {"text": "without keeping it in the agent, something like the following may be done:\n\nhttp.get(options, (res) => {\n  // Do stuff\n}).on('socket', (socket) => {\n  socket.emit('agentRemove');\n});\nAn agent may also be used for an individual request. By providing {agent: false} as an option to the http.get() or http.request() functions, a one-time use Agent with default options will be used for the client connection.\n\nagent:false:\n\nhttp.get({\n  hostname: 'localhost',\n  port: 80,\n  path: '/',\n  agent: false,  // Create a new agent just for this one request\n}, (res) => {\n  // Do stuff with response\n});\nnew Agent([options])#\nHistory\noptions <Object> Set of configurable options to set on the agent. Can have the following fields:\nkeepAlive <boolean> Keep sockets around even when there are no outstanding requests, so they can be used for future requests without having to reestablish a TCP connection. Not to be confused with the keep-alive value of the Connection header. The Connection: keep-alive header is always sent when using an agent except when the Connection header is explicitly specified or when the keepAlive and maxSockets options are respectively set to false and Infinity, in which case Connection: close will be used. Default: false.\nkeepAliveMsecs <number> When using the keepAlive option, specifies the initial delay for TCP Keep-Alive packets. Ignored when the keepAlive option is false or undefined. Default: 1000.\nmaxSockets <number> Maximum number of sockets to allow per host. If the same host opens multiple concurrent connections, each request will use new socket until the maxSockets value is reached. If the host attempts to open more connections than maxSockets, the additional requests will enter into a pending request queue, and will enter active connection state when an existing connection terminates. This makes sure there are at most maxSockets active connections at any point in time, from a given host. Default: Infinity.\nmaxTotalSockets <number> Maximum number of sockets allowed for all hosts in total. Each request will use a new socket until the maximum is reached. Default: Infinity.\nmaxFreeSockets <number> Maximum number of sockets per host to leave open in a free state. Only relevant if keepAlive is set to true. Default: 256.\nscheduling <string> Scheduling strategy to apply when picking the next free socket to use. It can be 'fifo' or 'lifo'. The main difference between the two scheduling strategies is that 'lifo' selects the most recently used socket, while 'fifo' selects the least recently used socket. In case of a low rate of request per second, the 'lifo' scheduling will lower the risk of picking a socket that might have been closed by the server due to inactivity. In case of a high rate of request per second, the 'fifo' scheduling will maximize the number of open sockets, while the 'lifo' scheduling will keep it as low as possible. Default: 'lifo'.\ntimeout <number> Socket timeout in milliseconds. This will set the timeout when the socket is created.\noptions in socket.connect() are also supported.\n\nThe default http.globalAgent that is used by http.request() has all of these values set to their respective defaults.\n\nTo configure any of them, a custom http.Agent instance must be created.\n\nconst http = require('node:http');\nconst keepAliveAgent = new http.Agent({ keepAlive: true });\noptions.agent = keepAliveAgent;\nhttp.request(options, onResponseCallback);\nagent.createConnection(options[, callback])#\nAdded in: v0.11.4\noptions <Object> Options containing connection details. Check net.createConnection() for the format of the options\ncallback <Function> Callback function that receives the created socket\nReturns: <stream.Duplex>\nProduces a socket/stream to be used for HTTP requests.\n\nBy default, this function is the same as net.createConnection(). However, custom agents may override this method in case greater flexibility is desired.\n\nA socket/stream can be supplied in one of two ways: by returning the socket/stream from this function, or by passing the", "doc_id": "53d5bd52-57de-483f-9280-db5e98e9f43d", "embedding": null, "doc_hash": "1e5d14fff9fb6d2aa9a2793475ce6f8086d77a4cd0fd4f13c0e57a05d170a59a", "extra_info": null, "node_info": {"start": 1416352, "end": 1420375}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e3b05457-1dbf-4eaf-b156-97c5436b915f", "3": "21473cd2-d914-488a-8cbc-19b8b099b2a8"}}, "__type__": "1"}, "21473cd2-d914-488a-8cbc-19b8b099b2a8": {"__data__": {"text": "http = require('node:http');\nconst keepAliveAgent = new http.Agent({ keepAlive: true });\noptions.agent = keepAliveAgent;\nhttp.request(options, onResponseCallback);\nagent.createConnection(options[, callback])#\nAdded in: v0.11.4\noptions <Object> Options containing connection details. Check net.createConnection() for the format of the options\ncallback <Function> Callback function that receives the created socket\nReturns: <stream.Duplex>\nProduces a socket/stream to be used for HTTP requests.\n\nBy default, this function is the same as net.createConnection(). However, custom agents may override this method in case greater flexibility is desired.\n\nA socket/stream can be supplied in one of two ways: by returning the socket/stream from this function, or by passing the socket/stream to callback.\n\nThis method is guaranteed to return an instance of the <net.Socket> class, a subclass of <stream.Duplex>, unless the user specifies a socket type other than <net.Socket>.\n\ncallback has a signature of (err, stream).\n\nagent.keepSocketAlive(socket)#\nAdded in: v8.1.0\nsocket <stream.Duplex>\nCalled when socket is detached from a request and could be persisted by the Agent. Default behavior is to:\n\nsocket.setKeepAlive(true, this.keepAliveMsecs);\nsocket.unref();\nreturn true;\nThis method can be overridden by a particular Agent subclass. If this method returns a falsy value, the socket will be destroyed instead of persisting it for use with the next request.\n\nThe socket argument can be an instance of <net.Socket>, a subclass of <stream.Duplex>.\n\nagent.reuseSocket(socket, request)#\nAdded in: v8.1.0\nsocket <stream.Duplex>\nrequest <http.ClientRequest>\nCalled when socket is attached to request after being persisted because of the keep-alive options. Default behavior is to:\n\nsocket.ref();\nThis method can be overridden by a particular Agent subclass.\n\nThe socket argument can be an instance of <net.Socket>, a subclass of <stream.Duplex>.\n\nagent.destroy()#\nAdded in: v0.11.4\nDestroy any sockets that are currently in use by the agent.\n\nIt is usually not necessary to do this. However, if using an agent with keepAlive enabled, then it is best to explicitly shut down the agent when it is no longer needed. Otherwise, sockets might stay open for quite a long time before the server terminates them.\n\nagent.freeSockets#\nHistory\n<Object>\nAn object which contains arrays of sockets currently awaiting use by the agent when keepAlive is enabled. Do not modify.\n\nSockets in the freeSockets list will be automatically destroyed and removed from the array on 'timeout'.\n\nagent.getName([options])#\nHistory\noptions <Object> A set of options providing information for name generation\nhost <string> A domain name or IP address of the server to issue the request to\nport <number> Port of remote server\nlocalAddress <string> Local interface to bind for network connections when issuing the request\nfamily <integer> Must be 4 or 6 if this doesn't equal undefined.\nReturns: <string>\nGet a unique name for a set of request options, to determine whether a connection can be reused. For an HTTP agent, this returns host:port:localAddress or host:port:localAddress:family. For an HTTPS agent, the name includes the CA, cert, ciphers, and other HTTPS/TLS-specific options that determine socket reusability.\n\nagent.maxFreeSockets#\nAdded in: v0.11.7\n<number>\nBy default set to 256. For agents with keepAlive enabled, this sets the maximum number of sockets that will be left open in the free state.\n\nagent.maxSockets#\nAdded in: v0.3.6\n<number>\nBy default set to Infinity. Determines how many concurrent sockets the agent can have open per origin. Origin is the returned value of agent.getName().\n\nagent.maxTotalSockets#\nAdded in: v14.5.0,", "doc_id": "21473cd2-d914-488a-8cbc-19b8b099b2a8", "embedding": null, "doc_hash": "7e1e8dfda80f5f037d13d724c52ad64ec163231e04220993ce55a021788a0374", "extra_info": null, "node_info": {"start": 1420273, "end": 1423985}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "53d5bd52-57de-483f-9280-db5e98e9f43d", "3": "b56bbdd5-48d0-43c2-af1b-2ea639336829"}}, "__type__": "1"}, "b56bbdd5-48d0-43c2-af1b-2ea639336829": {"__data__": {"text": "be reused. For an HTTP agent, this returns host:port:localAddress or host:port:localAddress:family. For an HTTPS agent, the name includes the CA, cert, ciphers, and other HTTPS/TLS-specific options that determine socket reusability.\n\nagent.maxFreeSockets#\nAdded in: v0.11.7\n<number>\nBy default set to 256. For agents with keepAlive enabled, this sets the maximum number of sockets that will be left open in the free state.\n\nagent.maxSockets#\nAdded in: v0.3.6\n<number>\nBy default set to Infinity. Determines how many concurrent sockets the agent can have open per origin. Origin is the returned value of agent.getName().\n\nagent.maxTotalSockets#\nAdded in: v14.5.0, v12.19.0\n<number>\nBy default set to Infinity. Determines how many concurrent sockets the agent can have open. Unlike maxSockets, this parameter applies across all origins.\n\nagent.requests#\nHistory\n<Object>\nAn object which contains queues of requests that have not yet been assigned to sockets. Do not modify.\n\nagent.sockets#\nHistory\n<Object>\nAn object which contains arrays of sockets currently in use by the agent. Do not modify.\n\nClass: http.ClientRequest#\nAdded in: v0.1.17\nExtends: <http.OutgoingMessage>\nThis object is created internally and returned from http.request(). It represents an in-progress request whose header has already been queued. The header is still mutable using the setHeader(name, value), getHeader(name), removeHeader(name) API. The actual header will be sent along with the first data chunk or when calling request.end().\n\nTo get the response, add a listener for 'response' to the request object. 'response' will be emitted from the request object when the response headers have been received. The 'response' event is executed with one argument which is an instance of http.IncomingMessage.\n\nDuring the 'response' event, one can add listeners to the response object; particularly to listen for the 'data' event.\n\nIf no 'response' handler is added, then the response will be entirely discarded. However, if a 'response' event handler is added, then the data from the response object must be consumed, either by calling response.read() whenever there is a 'readable' event, or by adding a 'data' handler, or by calling the .resume() method. Until the data is consumed, the 'end' event will not fire. Also, until the data is read it will consume memory that can eventually lead to a 'process out of memory' error.\n\nFor backward compatibility, res will only emit 'error' if there is an 'error' listener registered.\n\nSet Content-Length header to limit the response body size. If response.strictContentLength is set to true, mismatching the Content-Length header value will result in an Error being thrown, identified by code: 'ERR_HTTP_CONTENT_LENGTH_MISMATCH'.\n\nContent-Length value should be in bytes, not characters. Use Buffer.byteLength() to determine the length of the body in bytes.\n\nEvent: 'abort'#\nAdded in: v1.4.1Deprecated since: v17.0.0, v16.12.0\nStability: 0 - Deprecated. Listen for the 'close' event instead.\nEmitted when the request has been aborted by the client. This event is only emitted on the first call to abort().\n\nEvent: 'close'#\nAdded in: v0.5.4\nIndicates that the request is completed, or its underlying connection was terminated prematurely (before the response completion).\n\nEvent: 'connect'#\nAdded in: v0.7.0\nresponse <http.IncomingMessage>\nsocket <stream.Duplex>\nhead <Buffer>\nEmitted each time a server responds to a request with a CONNECT method. If this event is not being listened for, clients receiving a CONNECT method will have their connections closed.\n\nThis event is guaranteed to be passed an instance of the <net.Socket> class, a subclass of", "doc_id": "b56bbdd5-48d0-43c2-af1b-2ea639336829", "embedding": null, "doc_hash": "8b5c620dce09174084a4cf67fb53e6aa587ad66ff35b1b29595aadc0983af1bc", "extra_info": null, "node_info": {"start": 1424089, "end": 1427757}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "21473cd2-d914-488a-8cbc-19b8b099b2a8", "3": "6ab8c39b-db10-47d6-aa35-b590c63797ce"}}, "__type__": "1"}, "6ab8c39b-db10-47d6-aa35-b590c63797ce": {"__data__": {"text": "0 - Deprecated. Listen for the 'close' event instead.\nEmitted when the request has been aborted by the client. This event is only emitted on the first call to abort().\n\nEvent: 'close'#\nAdded in: v0.5.4\nIndicates that the request is completed, or its underlying connection was terminated prematurely (before the response completion).\n\nEvent: 'connect'#\nAdded in: v0.7.0\nresponse <http.IncomingMessage>\nsocket <stream.Duplex>\nhead <Buffer>\nEmitted each time a server responds to a request with a CONNECT method. If this event is not being listened for, clients receiving a CONNECT method will have their connections closed.\n\nThis event is guaranteed to be passed an instance of the <net.Socket> class, a subclass of <stream.Duplex>, unless the user specifies a socket type other than <net.Socket>.\n\nA client and server pair demonstrating how to listen for the 'connect' event:\n\nconst http = require('node:http');\nconst net = require('node:net');\nconst { URL } = require('node:url');\n\n// Create an HTTP tunneling proxy\nconst proxy = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('okay');\n});\nproxy.on('connect', (req, clientSocket, head) => {\n  // Connect to an origin server\n  const { port, hostname } = new URL(`http://${req.url}`);\n  const serverSocket = net.connect(port || 80, hostname, () => {\n    clientSocket.write('HTTP/1.1 200 Connection Established\\r\\n' +\n                    'Proxy-agent: Node.js-Proxy\\r\\n' +\n                    '\\r\\n');\n    serverSocket.write(head);\n    serverSocket.pipe(clientSocket);\n    clientSocket.pipe(serverSocket);\n  });\n});\n\n// Now that proxy is running\nproxy.listen(1337, '127.0.0.1', () => {\n\n  // Make a request to a tunneling proxy\n  const options = {\n    port: 1337,\n    host: '127.0.0.1',\n    method: 'CONNECT',\n    path: 'www.google.com:80',\n  };\n\n  const req = http.request(options);\n  req.end();\n\n  req.on('connect', (res, socket, head) => {\n    console.log('got connected!');\n\n    // Make a request over an HTTP tunnel\n    socket.write('GET / HTTP/1.1\\r\\n' +\n                 'Host: www.google.com:80\\r\\n' +\n                 'Connection: close\\r\\n' +\n                 '\\r\\n');\n    socket.on('data', (chunk) => {\n      console.log(chunk.toString());\n    });\n    socket.on('end', () => {\n      proxy.close();\n    });\n  });\n});\nEvent: 'continue'#\nAdded in: v0.3.2\nEmitted when the server sends a '100 Continue' HTTP response, usually because the request contained 'Expect: 100-continue'. This is an instruction that the client should send the request body.\n\nEvent: 'finish'#\nAdded in: v0.3.6\nEmitted when the request has been sent. More specifically, this event is emitted when the last segment of the response headers and body have been handed off to the operating system for transmission over the network. It does not imply that the server has received anything yet.\n\nEvent: 'information'#\nAdded in: v10.0.0\ninfo <Object>\nhttpVersion", "doc_id": "6ab8c39b-db10-47d6-aa35-b590c63797ce", "embedding": null, "doc_hash": "6fdff455d2b2dfe824b7d6dca1c53020e78a3a1912ceb2da42937e5edaaa1e0f", "extra_info": null, "node_info": {"start": 1427722, "end": 1430656}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b56bbdd5-48d0-43c2-af1b-2ea639336829", "3": "f089af4a-8eb4-4668-aff6-c730316b6796"}}, "__type__": "1"}, "f089af4a-8eb4-4668-aff6-c730316b6796": {"__data__": {"text": "  });\n    socket.on('end', () => {\n      proxy.close();\n    });\n  });\n});\nEvent: 'continue'#\nAdded in: v0.3.2\nEmitted when the server sends a '100 Continue' HTTP response, usually because the request contained 'Expect: 100-continue'. This is an instruction that the client should send the request body.\n\nEvent: 'finish'#\nAdded in: v0.3.6\nEmitted when the request has been sent. More specifically, this event is emitted when the last segment of the response headers and body have been handed off to the operating system for transmission over the network. It does not imply that the server has received anything yet.\n\nEvent: 'information'#\nAdded in: v10.0.0\ninfo <Object>\nhttpVersion <string>\nhttpVersionMajor <integer>\nhttpVersionMinor <integer>\nstatusCode <integer>\nstatusMessage <string>\nheaders <Object>\nrawHeaders <string[]>\nEmitted when the server sends a 1xx intermediate response (excluding 101 Upgrade). The listeners of this event will receive an object containing the HTTP version, status code, status message, key-value headers object, and array with the raw header names followed by their respective values.\n\nconst http = require('node:http');\n\nconst options = {\n  host: '127.0.0.1',\n  port: 8080,\n  path: '/length_request',\n};\n\n// Make a request\nconst req = http.request(options);\nreq.end();\n\nreq.on('information', (info) => {\n  console.log(`Got information prior to main response: ${info.statusCode}`);\n});\n101 Upgrade statuses do not fire this event due to their break from the traditional HTTP request/response chain, such as web sockets, in-place TLS upgrades, or HTTP 2.0. To be notified of 101 Upgrade notices, listen for the 'upgrade' event instead.\n\nEvent: 'response'#\nAdded in: v0.1.0\nresponse <http.IncomingMessage>\nEmitted when a response is received to this request. This event is emitted only once.\n\nEvent: 'socket'#\nAdded in: v0.5.3\nsocket <stream.Duplex>\nThis event is guaranteed to be passed an instance of the <net.Socket> class, a subclass of <stream.Duplex>, unless the user specifies a socket type other than <net.Socket>.\n\nEvent: 'timeout'#\nAdded in: v0.7.8\nEmitted when the underlying socket times out from inactivity. This only notifies that the socket has been idle. The request must be destroyed manually.\n\nSee also: request.setTimeout().\n\nEvent: 'upgrade'#\nAdded in: v0.1.94\nresponse <http.IncomingMessage>\nsocket <stream.Duplex>\nhead <Buffer>\nEmitted each time a server responds to a request with an upgrade. If this event is not being listened for and the response status code is 101 Switching Protocols, clients receiving an upgrade header will have their connections closed.\n\nThis event is guaranteed to be passed an instance of the <net.Socket> class, a subclass of <stream.Duplex>, unless the user specifies a socket type other than <net.Socket>.\n\nA client server pair demonstrating how to listen for the 'upgrade' event.\n\nconst http = require('node:http');\n\n// Create an HTTP server\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('okay');\n});\nserver.on('upgrade', (req, socket, head) => {\n  socket.write('HTTP/1.1 101 Web Socket Protocol Handshake\\r\\n' +\n               'Upgrade: WebSocket\\r\\n' +\n               'Connection: Upgrade\\r\\n' +\n               '\\r\\n');\n\n  socket.pipe(socket); // echo back\n});\n\n// Now that", "doc_id": "f089af4a-8eb4-4668-aff6-c730316b6796", "embedding": null, "doc_hash": "88992211568d702f22ad76a9f653f275c4633898df90df9bcdf1b307eed4b460", "extra_info": null, "node_info": {"start": 1430696, "end": 1434026}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6ab8c39b-db10-47d6-aa35-b590c63797ce", "3": "c87fa6db-599b-4767-bc7a-d28087bc00d2"}}, "__type__": "1"}, "c87fa6db-599b-4767-bc7a-d28087bc00d2": {"__data__": {"text": "event.\n\nconst http = require('node:http');\n\n// Create an HTTP server\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('okay');\n});\nserver.on('upgrade', (req, socket, head) => {\n  socket.write('HTTP/1.1 101 Web Socket Protocol Handshake\\r\\n' +\n               'Upgrade: WebSocket\\r\\n' +\n               'Connection: Upgrade\\r\\n' +\n               '\\r\\n');\n\n  socket.pipe(socket); // echo back\n});\n\n// Now that server is running\nserver.listen(1337, '127.0.0.1', () => {\n\n  // make a request\n  const options = {\n    port: 1337,\n    host: '127.0.0.1',\n    headers: {\n      'Connection': 'Upgrade',\n      'Upgrade': 'websocket',\n    },\n  };\n\n  const req = http.request(options);\n  req.end();\n\n  req.on('upgrade', (res, socket, upgradeHead) => {\n    console.log('got upgraded!');\n    socket.end();\n    process.exit(0);\n  });\n});\nrequest.abort()#\nAdded in: v0.3.8Deprecated since: v14.1.0, v13.14.0\nStability: 0 - Deprecated: Use request.destroy() instead.\nMarks the request as aborting. Calling this will cause remaining data in the response to be dropped and the socket to be destroyed.\n\nrequest.aborted#\nHistory\nStability: 0 - Deprecated. Check request.destroyed instead.\n<boolean>\nThe request.aborted property will be true if the request has been aborted.\n\nrequest.connection#\nAdded in: v0.3.0Deprecated since: v13.0.0\nStability: 0 - Deprecated. Use request.socket.\n<stream.Duplex>\nSee request.socket.\n\nrequest.cork()#\nAdded in: v13.2.0, v12.16.0\nSee writable.cork().\n\nrequest.end([data[, encoding]][, callback])#\nHistory\ndata <string> | <Buffer> | <Uint8Array>\nencoding <string>\ncallback <Function>\nReturns: <this>\nFinishes sending the request. If any parts of the body are unsent, it will flush them to the stream. If the request is chunked, this will send the terminating '0\\r\\n\\r\\n'.\n\nIf data is specified, it is equivalent to calling request.write(data, encoding) followed by request.end(callback).\n\nIf callback is specified, it will be called when the request stream is finished.\n\nrequest.destroy([error])#\nHistory\nerror <Error> Optional, an error to emit with 'error' event.\nReturns: <this>\nDestroy the request. Optionally emit an 'error' event, and emit a 'close' event. Calling this will cause remaining data in the response to be dropped and the socket to be destroyed.\n\nSee writable.destroy() for further details.\n\nrequest.destroyed#\nAdded in: v14.1.0, v13.14.0\n<boolean>\nIs true after request.destroy() has been called.\n\nSee writable.destroyed for further details.\n\nrequest.finished#\nAdded in: v0.0.1Deprecated since: v13.4.0, v12.16.0\nStability: 0 - Deprecated. Use request.writableEnded.\n<boolean>\nThe request.finished property will be true if request.end() has been called. request.end() will automatically be called if the request was initiated via http.get().\n\nrequest.flushHeaders()#\nAdded in: v1.6.0\nFlushes the request headers.\n\nFor efficiency reasons, Node.js normally buffers the", "doc_id": "c87fa6db-599b-4767-bc7a-d28087bc00d2", "embedding": null, "doc_hash": "d29d839c431b6e90bed186608c6bd8180a00300b1158782616d79e8789831597", "extra_info": null, "node_info": {"start": 1434222, "end": 1437183}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f089af4a-8eb4-4668-aff6-c730316b6796", "3": "98d0eeea-d4b0-4d00-bea6-99dd25b69bd3"}}, "__type__": "1"}, "98d0eeea-d4b0-4d00-bea6-99dd25b69bd3": {"__data__": {"text": "writable.destroy() for further details.\n\nrequest.destroyed#\nAdded in: v14.1.0, v13.14.0\n<boolean>\nIs true after request.destroy() has been called.\n\nSee writable.destroyed for further details.\n\nrequest.finished#\nAdded in: v0.0.1Deprecated since: v13.4.0, v12.16.0\nStability: 0 - Deprecated. Use request.writableEnded.\n<boolean>\nThe request.finished property will be true if request.end() has been called. request.end() will automatically be called if the request was initiated via http.get().\n\nrequest.flushHeaders()#\nAdded in: v1.6.0\nFlushes the request headers.\n\nFor efficiency reasons, Node.js normally buffers the request headers until request.end() is called or the first chunk of request data is written. It then tries to pack the request headers and data into a single TCP packet.\n\nThat's usually desired (it saves a TCP round-trip), but not when the first data is not sent until possibly much later. request.flushHeaders() bypasses the optimization and kickstarts the request.\n\nrequest.getHeader(name)#\nAdded in: v1.6.0\nname <string>\nReturns: <any>\nReads out a header on the request. The name is case-insensitive. The type of the return value depends on the arguments provided to request.setHeader().\n\nrequest.setHeader('content-type', 'text/html');\nrequest.setHeader('Content-Length', Buffer.byteLength(body));\nrequest.setHeader('Cookie', ['type=ninja', 'language=javascript']);\nconst contentType = request.getHeader('Content-Type');\n// 'contentType' is 'text/html'\nconst contentLength = request.getHeader('Content-Length');\n// 'contentLength' is of type number\nconst cookie = request.getHeader('Cookie');\n// 'cookie' is of type string[]\nrequest.getHeaderNames()#\nAdded in: v7.7.0\nReturns: <string[]>\nReturns an array containing the unique names of the current outgoing headers. All header names are lowercase.\n\nrequest.setHeader('Foo', 'bar');\nrequest.setHeader('Cookie', ['foo=bar', 'bar=baz']);\n\nconst headerNames = request.getHeaderNames();\n// headerNames === ['foo', 'cookie']\nrequest.getHeaders()#\nAdded in: v7.7.0\nReturns: <Object>\nReturns a shallow copy of the current outgoing headers. Since a shallow copy is used, array values may be mutated without additional calls to various header-related http module methods. The keys of the returned object are the header names and the values are the respective header values. All header names are lowercase.\n\nThe object returned by the request.getHeaders() method does not prototypically inherit from the JavaScript Object. This means that typical Object methods such as obj.toString(), obj.hasOwnProperty(), and others are not defined and will not work.\n\nrequest.setHeader('Foo', 'bar');\nrequest.setHeader('Cookie', ['foo=bar', 'bar=baz']);\n\nconst headers = request.getHeaders();\n// headers === { foo: 'bar', 'cookie': ['foo=bar', 'bar=baz'] }\nrequest.getRawHeaderNames()#\nAdded in: v15.13.0, v14.17.0\nReturns: <string[]>\nReturns an array containing the unique names of the current outgoing raw headers. Header names are returned with their exact casing being set.\n\nrequest.setHeader('Foo', 'bar');\nrequest.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n\nconst headerNames = request.getRawHeaderNames();\n// headerNames === ['Foo', 'Set-Cookie']\nrequest.hasHeader(name)#\nAdded in: v7.7.0\nname <string>\nReturns: <boolean>\nReturns true if the header identified by name is currently set in the outgoing headers. The header name matching is case-insensitive.\n\nconst hasContentType =", "doc_id": "98d0eeea-d4b0-4d00-bea6-99dd25b69bd3", "embedding": null, "doc_hash": "85d397d839d2e0d8bc52ddb61ef81730516859644bd0777e7aed9e808a47a9eb", "extra_info": null, "node_info": {"start": 1437008, "end": 1440447}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c87fa6db-599b-4767-bc7a-d28087bc00d2", "3": "3c1abc2d-128e-402c-a36a-f893a54f6102"}}, "__type__": "1"}, "3c1abc2d-128e-402c-a36a-f893a54f6102": {"__data__": {"text": "}\nrequest.getRawHeaderNames()#\nAdded in: v15.13.0, v14.17.0\nReturns: <string[]>\nReturns an array containing the unique names of the current outgoing raw headers. Header names are returned with their exact casing being set.\n\nrequest.setHeader('Foo', 'bar');\nrequest.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n\nconst headerNames = request.getRawHeaderNames();\n// headerNames === ['Foo', 'Set-Cookie']\nrequest.hasHeader(name)#\nAdded in: v7.7.0\nname <string>\nReturns: <boolean>\nReturns true if the header identified by name is currently set in the outgoing headers. The header name matching is case-insensitive.\n\nconst hasContentType = request.hasHeader('content-type');\nrequest.maxHeadersCount#\n<number> Default: 2000\nLimits maximum response headers count. If set to 0, no limit will be applied.\n\nrequest.path#\nAdded in: v0.4.0\n<string> The request path.\nrequest.method#\nAdded in: v0.1.97\n<string> The request method.\nrequest.host#\nAdded in: v14.5.0, v12.19.0\n<string> The request host.\nrequest.protocol#\nAdded in: v14.5.0, v12.19.0\n<string> The request protocol.\nrequest.removeHeader(name)#\nAdded in: v1.6.0\nname <string>\nRemoves a header that's already defined into headers object.\n\nrequest.removeHeader('Content-Type');\nrequest.reusedSocket#\nAdded in: v13.0.0, v12.16.0\n<boolean> Whether the request is send through a reused socket.\nWhen sending request through a keep-alive enabled agent, the underlying socket might be reused. But if server closes connection at unfortunate time, client may run into a 'ECONNRESET' error.\n\nconst http = require('node:http');\n\n// Server has a 5 seconds keep-alive timeout by default\nhttp\n  .createServer((req, res) => {\n    res.write('hello\\n');\n    res.end();\n  })\n  .listen(3000);\n\nsetInterval(() => {\n  // Adapting a keep-alive agent\n  http.get('http://localhost:3000', { agent }, (res) => {\n    res.on('data', (data) => {\n      // Do nothing\n    });\n  });\n}, 5000); // Sending request on 5s interval so it's easy to hit idle timeout\nBy marking a request whether it reused socket or not, we can do automatic error retry base on it.\n\nconst http = require('node:http');\nconst agent = new http.Agent({ keepAlive: true });\n\nfunction retriableRequest() {\n  const req = http\n    .get('http://localhost:3000', { agent }, (res) => {\n      // ...\n    })\n    .on('error', (err) => {\n      // Check if retry is needed\n      if (req.reusedSocket && err.code === 'ECONNRESET') {\n        retriableRequest();\n      }\n    });\n}\n\nretriableRequest();\nrequest.setHeader(name, value)#\nAdded in: v1.6.0\nname <string>\nvalue <any>\nSets a single header value for headers object. If this header already exists in the to-be-sent headers, its value will be replaced. Use an array of strings here to send multiple headers with the same name. Non-string values will be stored without modification. Therefore, request.getHeader() may return non-string values. However, the non-string values will be converted to strings for network transmission.\n\nrequest.setHeader('Content-Type', 'application/json');\nor\n\nrequest.setHeader('Cookie', ['type=ninja', 'language=javascript']);\nWhen the value is a string an exception will be thrown if it contains characters outside the", "doc_id": "3c1abc2d-128e-402c-a36a-f893a54f6102", "embedding": null, "doc_hash": "0abfa1d5af81dd94f00d2e3fa0ca82ba5d681c5fd94dc77143fad29361cd186e", "extra_info": null, "node_info": {"start": 1440430, "end": 1443609}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "98d0eeea-d4b0-4d00-bea6-99dd25b69bd3", "3": "6473298d-b109-46ac-9257-481f5401da39"}}, "__type__": "1"}, "6473298d-b109-46ac-9257-481f5401da39": {"__data__": {"text": "   });\n}\n\nretriableRequest();\nrequest.setHeader(name, value)#\nAdded in: v1.6.0\nname <string>\nvalue <any>\nSets a single header value for headers object. If this header already exists in the to-be-sent headers, its value will be replaced. Use an array of strings here to send multiple headers with the same name. Non-string values will be stored without modification. Therefore, request.getHeader() may return non-string values. However, the non-string values will be converted to strings for network transmission.\n\nrequest.setHeader('Content-Type', 'application/json');\nor\n\nrequest.setHeader('Cookie', ['type=ninja', 'language=javascript']);\nWhen the value is a string an exception will be thrown if it contains characters outside the latin1 encoding.\n\nIf you need to pass UTF-8 characters in the value please encode the value using the RFC 8187 standard.\n\nconst filename = 'Rock \ud83c\udfb5.txt';\nrequest.setHeader('Content-Disposition', `attachment; filename*=utf-8''${encodeURIComponent(filename)}`);\nrequest.setNoDelay([noDelay])#\nAdded in: v0.5.9\nnoDelay <boolean>\nOnce a socket is assigned to this request and is connected socket.setNoDelay() will be called.\n\nrequest.setSocketKeepAlive([enable][, initialDelay])#\nAdded in: v0.5.9\nenable <boolean>\ninitialDelay <number>\nOnce a socket is assigned to this request and is connected socket.setKeepAlive() will be called.\n\nrequest.setTimeout(timeout[, callback])#\nHistory\ntimeout <number> Milliseconds before a request times out.\ncallback <Function> Optional function to be called when a timeout occurs. Same as binding to the 'timeout' event.\nReturns: <http.ClientRequest>\nOnce a socket is assigned to this request and is connected socket.setTimeout() will be called.\n\nrequest.socket#\nAdded in: v0.3.0\n<stream.Duplex>\nReference to the underlying socket. Usually users will not want to access this property. In particular, the socket will not emit 'readable' events because of how the protocol parser attaches to the socket.\n\nconst http = require('node:http');\nconst options = {\n  host: 'www.google.com',\n};\nconst req = http.get(options);\nreq.end();\nreq.once('response', (res) => {\n  const ip = req.socket.localAddress;\n  const port = req.socket.localPort;\n  console.log(`Your IP address is ${ip} and your source port is ${port}.`);\n  // Consume response object\n});\nThis property is guaranteed to be an instance of the <net.Socket> class, a subclass of <stream.Duplex>, unless the user specified a socket type other than <net.Socket>.\n\nrequest.uncork()#\nAdded in: v13.2.0, v12.16.0\nSee writable.uncork().\n\nrequest.writableEnded#\nAdded in: v12.9.0\n<boolean>\nIs true after request.end() has been called. This property does not indicate whether the data has been flushed, for this use request.writableFinished instead.\n\nrequest.writableFinished#\nAdded in: v12.7.0\n<boolean>\nIs true if all data has been flushed to the underlying system, immediately before the 'finish' event is emitted.\n\nrequest.write(chunk[, encoding][, callback])#\nHistory\nchunk <string> | <Buffer> | <Uint8Array>\nencoding <string>\ncallback <Function>\nReturns: <boolean>\nSends a chunk of the body. This method can be called multiple times. If no Content-Length is set, data will automatically be encoded in HTTP Chunked transfer encoding, so that server knows when the data ends. The Transfer-Encoding: chunked header is added. Calling request.end() is necessary to finish sending the request.\n\nThe encoding argument is optional and only applies when chunk is a string. Defaults to", "doc_id": "6473298d-b109-46ac-9257-481f5401da39", "embedding": null, "doc_hash": "09cc33f441db5f34f03a77e81309efa104b161810edf2dbdb04d0858ae6e8c1b", "extra_info": null, "node_info": {"start": 1443539, "end": 1447026}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3c1abc2d-128e-402c-a36a-f893a54f6102", "3": "9746563b-ff1a-49e2-b911-a8835713c9d7"}}, "__type__": "1"}, "9746563b-ff1a-49e2-b911-a8835713c9d7": {"__data__": {"text": "in: v12.7.0\n<boolean>\nIs true if all data has been flushed to the underlying system, immediately before the 'finish' event is emitted.\n\nrequest.write(chunk[, encoding][, callback])#\nHistory\nchunk <string> | <Buffer> | <Uint8Array>\nencoding <string>\ncallback <Function>\nReturns: <boolean>\nSends a chunk of the body. This method can be called multiple times. If no Content-Length is set, data will automatically be encoded in HTTP Chunked transfer encoding, so that server knows when the data ends. The Transfer-Encoding: chunked header is added. Calling request.end() is necessary to finish sending the request.\n\nThe encoding argument is optional and only applies when chunk is a string. Defaults to 'utf8'.\n\nThe callback argument is optional and will be called when this chunk of data is flushed, but only if the chunk is non-empty.\n\nReturns true if the entire data was flushed successfully to the kernel buffer. Returns false if all or part of the data was queued in user memory. 'drain' will be emitted when the buffer is free again.\n\nWhen write function is called with empty string or buffer, it does nothing and waits for more input.\n\nClass: http.Server#\nAdded in: v0.1.17\nExtends: <net.Server>\nEvent: 'checkContinue'#\nAdded in: v0.3.0\nrequest <http.IncomingMessage>\nresponse <http.ServerResponse>\nEmitted each time a request with an HTTP Expect: 100-continue is received. If this event is not listened for, the server will automatically respond with a 100 Continue as appropriate.\n\nHandling this event involves calling response.writeContinue() if the client should continue to send the request body, or generating an appropriate HTTP response (e.g. 400 Bad Request) if the client should not continue to send the request body.\n\nWhen this event is emitted and handled, the 'request' event will not be emitted.\n\nEvent: 'checkExpectation'#\nAdded in: v5.5.0\nrequest <http.IncomingMessage>\nresponse <http.ServerResponse>\nEmitted each time a request with an HTTP Expect header is received, where the value is not 100-continue. If this event is not listened for, the server will automatically respond with a 417 Expectation Failed as appropriate.\n\nWhen this event is emitted and handled, the 'request' event will not be emitted.\n\nEvent: 'clientError'#\nHistory\nexception <Error>\nsocket <stream.Duplex>\nIf a client connection emits an 'error' event, it will be forwarded here. Listener of this event is responsible for closing/destroying the underlying socket. For example, one may wish to more gracefully close the socket with a custom HTTP response instead of abruptly severing the connection. The socket must be closed or destroyed before the listener ends.\n\nThis event is guaranteed to be passed an instance of the <net.Socket> class, a subclass of <stream.Duplex>, unless the user specifies a socket type other than <net.Socket>.\n\nDefault behavior is to try close the socket with a HTTP '400 Bad Request', or a HTTP '431 Request Header Fields Too Large' in the case of a HPE_HEADER_OVERFLOW error. If the socket is not writable or headers of the current attached http.ServerResponse has been sent, it is immediately destroyed.\n\nsocket is the net.Socket object that the error originated from.\n\nconst http = require('node:http');\n\nconst server = http.createServer((req, res) => {\n  res.end();\n});\nserver.on('clientError', (err, socket) => {\n  socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n});\nserver.listen(8000);\nWhen the 'clientError' event occurs, there is no request or response object, so any HTTP response sent, including response headers and payload, must be written directly to the socket object. Care must be taken to ensure the response is a properly formatted HTTP response message.\n\nerr is an instance of Error with two extra columns:\n\nbytesParsed: the bytes count of request packet that Node.js may have", "doc_id": "9746563b-ff1a-49e2-b911-a8835713c9d7", "embedding": null, "doc_hash": "a3d848a9b27e5df77ae4e8b7431c75619a00df250c4dcec2c76c4fc177c4a920", "extra_info": null, "node_info": {"start": 1447068, "end": 1450884}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6473298d-b109-46ac-9257-481f5401da39", "3": "c5bc0063-99b1-44f2-a77c-4d3c50214f76"}}, "__type__": "1"}, "c5bc0063-99b1-44f2-a77c-4d3c50214f76": {"__data__": {"text": "destroyed.\n\nsocket is the net.Socket object that the error originated from.\n\nconst http = require('node:http');\n\nconst server = http.createServer((req, res) => {\n  res.end();\n});\nserver.on('clientError', (err, socket) => {\n  socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n});\nserver.listen(8000);\nWhen the 'clientError' event occurs, there is no request or response object, so any HTTP response sent, including response headers and payload, must be written directly to the socket object. Care must be taken to ensure the response is a properly formatted HTTP response message.\n\nerr is an instance of Error with two extra columns:\n\nbytesParsed: the bytes count of request packet that Node.js may have parsed correctly;\nrawPacket: the raw packet of current request.\nIn some cases, the client has already received the response and/or the socket has already been destroyed, like in case of ECONNRESET errors. Before trying to send data to the socket, it is better to check that it is still writable.\n\nserver.on('clientError', (err, socket) => {\n  if (err.code === 'ECONNRESET' || !socket.writable) {\n    return;\n  }\n\n  socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n});\nEvent: 'close'#\nAdded in: v0.1.4\nEmitted when the server closes.\n\nEvent: 'connect'#\nAdded in: v0.7.0\nrequest <http.IncomingMessage> Arguments for the HTTP request, as it is in the 'request' event\nsocket <stream.Duplex> Network socket between the server and client\nhead <Buffer> The first packet of the tunneling stream (may be empty)\nEmitted each time a client requests an HTTP CONNECT method. If this event is not listened for, then clients requesting a CONNECT method will have their connections closed.\n\nThis event is guaranteed to be passed an instance of the <net.Socket> class, a subclass of <stream.Duplex>, unless the user specifies a socket type other than <net.Socket>.\n\nAfter this event is emitted, the request's socket will not have a 'data' event listener, meaning it will need to be bound in order to handle data sent to the server on that socket.\n\nEvent: 'connection'#\nAdded in: v0.1.0\nsocket <stream.Duplex>\nThis event is emitted when a new TCP stream is established. socket is typically an object of type net.Socket. Usually users will not want to access this event. In particular, the socket will not emit 'readable' events because of how the protocol parser attaches to the socket. The socket can also be accessed at request.socket.\n\nThis event can also be explicitly emitted by users to inject connections into the HTTP server. In that case, any Duplex stream can be passed.\n\nIf socket.setTimeout() is called here, the timeout will be replaced with server.keepAliveTimeout when the socket has served a request (if server.keepAliveTimeout is non-zero).\n\nThis event is guaranteed to be passed an instance of the <net.Socket> class, a subclass of <stream.Duplex>, unless the user specifies a socket type other than <net.Socket>.\n\nEvent: 'dropRequest'#\nAdded in: v18.7.0\nrequest <http.IncomingMessage> Arguments for the HTTP request, as it is in the 'request' event\nsocket <stream.Duplex> Network socket between the server and client\nWhen the number of requests on a socket reaches the threshold of server.maxRequestsPerSocket, the server will drop new requests and emit 'dropRequest' event instead, then send 503 to client.\n\nEvent: 'request'#\nAdded in: v0.1.0\nrequest <http.IncomingMessage>\nresponse <http.ServerResponse>\nEmitted each time there is a request. There may be multiple requests per connection (in the case of HTTP Keep-Alive connections).\n\nEvent: 'upgrade'#\nHistory\nrequest <http.IncomingMessage> Arguments for the HTTP request, as it", "doc_id": "c5bc0063-99b1-44f2-a77c-4d3c50214f76", "embedding": null, "doc_hash": "91301f94f9bdc74cffbf1e6c2f472ce0e1cdb2942da1167988ea3cddeb962970", "extra_info": null, "node_info": {"start": 1450882, "end": 1454514}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9746563b-ff1a-49e2-b911-a8835713c9d7", "3": "e9aaf805-a86f-4ac6-994d-6145595906e4"}}, "__type__": "1"}, "e9aaf805-a86f-4ac6-994d-6145595906e4": {"__data__": {"text": "'dropRequest'#\nAdded in: v18.7.0\nrequest <http.IncomingMessage> Arguments for the HTTP request, as it is in the 'request' event\nsocket <stream.Duplex> Network socket between the server and client\nWhen the number of requests on a socket reaches the threshold of server.maxRequestsPerSocket, the server will drop new requests and emit 'dropRequest' event instead, then send 503 to client.\n\nEvent: 'request'#\nAdded in: v0.1.0\nrequest <http.IncomingMessage>\nresponse <http.ServerResponse>\nEmitted each time there is a request. There may be multiple requests per connection (in the case of HTTP Keep-Alive connections).\n\nEvent: 'upgrade'#\nHistory\nrequest <http.IncomingMessage> Arguments for the HTTP request, as it is in the 'request' event\nsocket <stream.Duplex> Network socket between the server and client\nhead <Buffer> The first packet of the upgraded stream (may be empty)\nEmitted each time a client requests an HTTP upgrade. Listening to this event is optional and clients cannot insist on a protocol change.\n\nAfter this event is emitted, the request's socket will not have a 'data' event listener, meaning it will need to be bound in order to handle data sent to the server on that socket.\n\nThis event is guaranteed to be passed an instance of the <net.Socket> class, a subclass of <stream.Duplex>, unless the user specifies a socket type other than <net.Socket>.\n\nserver.close([callback])#\nAdded in: v0.1.90\ncallback <Function>\nStops the server from accepting new connections. See net.Server.close().\n\nserver.closeAllConnections()#\nAdded in: v18.2.0\nCloses all connections connected to this server.\n\nserver.closeIdleConnections()#\nAdded in: v18.2.0\nCloses all connections connected to this server which are not sending a request or waiting for a response.\n\nserver.headersTimeout#\nHistory\n<number> Default: The minimum between server.requestTimeout or 60000.\nLimit the amount of time the parser will wait to receive the complete HTTP headers.\n\nIf the timeout expires, the server responds with status 408 without forwarding the request to the request listener and then closes the connection.\n\nIt must be set to a non-zero value (e.g. 120 seconds) to protect against potential Denial-of-Service attacks in case the server is deployed without a reverse proxy in front.\n\nserver.listen()#\nStarts the HTTP server listening for connections. This method is identical to server.listen() from net.Server.\n\nserver.listening#\nAdded in: v5.7.0\n<boolean> Indicates whether or not the server is listening for connections.\nserver.maxHeadersCount#\nAdded in: v0.7.0\n<number> Default: 2000\nLimits maximum incoming headers count. If set to 0, no limit will be applied.\n\nserver.requestTimeout#\nHistory\n<number> Default: 300000\nSets the timeout value in milliseconds for receiving the entire request from the client.\n\nIf the timeout expires, the server responds with status 408 without forwarding the request to the request listener and then closes the connection.\n\nIt must be set to a non-zero value (e.g. 120 seconds) to protect against potential Denial-of-Service attacks in case the server is deployed without a reverse proxy in front.\n\nserver.setTimeout([msecs][, callback])#\nHistory\nmsecs <number> Default: 0 (no timeout)\ncallback <Function>\nReturns: <http.Server>\nSets the timeout value for sockets, and emits a 'timeout' event on the Server object, passing the socket as an argument, if a timeout occurs.\n\nIf there is a 'timeout' event listener on the Server object, then it will be called with the timed-out socket as an argument.\n\nBy default, the Server does not timeout sockets. However, if a callback is assigned to the Server's 'timeout' event, timeouts must be handled explicitly.\n\nserver.maxRequestsPerSocket#\nAdded in:", "doc_id": "e9aaf805-a86f-4ac6-994d-6145595906e4", "embedding": null, "doc_hash": "cc2ed8c1dba67c80fd64984b7c247d8cb0eec44ecb3b4c13b3a86f90d7100916", "extra_info": null, "node_info": {"start": 1454498, "end": 1458213}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c5bc0063-99b1-44f2-a77c-4d3c50214f76", "3": "bd26570b-8ce8-4801-86fb-ae8fe52b8004"}}, "__type__": "1"}, "bd26570b-8ce8-4801-86fb-ae8fe52b8004": {"__data__": {"text": "120 seconds) to protect against potential Denial-of-Service attacks in case the server is deployed without a reverse proxy in front.\n\nserver.setTimeout([msecs][, callback])#\nHistory\nmsecs <number> Default: 0 (no timeout)\ncallback <Function>\nReturns: <http.Server>\nSets the timeout value for sockets, and emits a 'timeout' event on the Server object, passing the socket as an argument, if a timeout occurs.\n\nIf there is a 'timeout' event listener on the Server object, then it will be called with the timed-out socket as an argument.\n\nBy default, the Server does not timeout sockets. However, if a callback is assigned to the Server's 'timeout' event, timeouts must be handled explicitly.\n\nserver.maxRequestsPerSocket#\nAdded in: v16.10.0\n<number> Requests per socket. Default: 0 (no limit)\nThe maximum number of requests socket can handle before closing keep alive connection.\n\nA value of 0 will disable the limit.\n\nWhen the limit is reached it will set the Connection header value to close, but will not actually close the connection, subsequent requests sent after the limit is reached will get 503 Service Unavailable as a response.\n\nserver.timeout#\nHistory\n<number> Timeout in milliseconds. Default: 0 (no timeout)\nThe number of milliseconds of inactivity before a socket is presumed to have timed out.\n\nA value of 0 will disable the timeout behavior on incoming connections.\n\nThe socket timeout logic is set up on connection, so changing this value only affects new connections to the server, not any existing connections.\n\nserver.keepAliveTimeout#\nAdded in: v8.0.0\n<number> Timeout in milliseconds. Default: 5000 (5 seconds).\nThe number of milliseconds of inactivity a server needs to wait for additional incoming data, after it has finished writing the last response, before a socket will be destroyed. If the server receives new data before the keep-alive timeout has fired, it will reset the regular inactivity timeout, i.e., server.timeout.\n\nA value of 0 will disable the keep-alive timeout behavior on incoming connections. A value of 0 makes the http server behave similarly to Node.js versions prior to 8.0.0, which did not have a keep-alive timeout.\n\nThe socket timeout logic is set up on connection, so changing this value only affects new connections to the server, not any existing connections.\n\nClass: http.ServerResponse#\nAdded in: v0.1.17\nExtends: <http.OutgoingMessage>\nThis object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the 'request' event.\n\nEvent: 'close'#\nAdded in: v0.6.7\nIndicates that the response is completed, or its underlying connection was terminated prematurely (before the response completion).\n\nEvent: 'finish'#\nAdded in: v0.3.6\nEmitted when the response has been sent. More specifically, this event is emitted when the last segment of the response headers and body have been handed off to the operating system for transmission over the network. It does not imply that the client has received anything yet.\n\nresponse.addTrailers(headers)#\nAdded in: v0.3.0\nheaders <Object>\nThis method adds HTTP trailing headers (a header but at the end of the message) to the response.\n\nTrailers will only be emitted if chunked encoding is used for the response; if it is not (e.g. if the request was HTTP/1.0), they will be silently discarded.\n\nHTTP requires the Trailer header to be sent in order to emit trailers, with a list of the header fields in its value. E.g.,\n\nresponse.writeHead(200, { 'Content-Type': 'text/plain',\n                          'Trailer': 'Content-MD5' });\nresponse.write(fileData);\nresponse.addTrailers({ 'Content-MD5': '7895bf4b8828b55ceaf47747b4bca667' });\nresponse.end();\nAttempting", "doc_id": "bd26570b-8ce8-4801-86fb-ae8fe52b8004", "embedding": null, "doc_hash": "64a6fbe3a3d31b040e15517381bcd844021539dd5e66cc13f64c1ba3e7a17e08", "extra_info": null, "node_info": {"start": 1458209, "end": 1461897}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e9aaf805-a86f-4ac6-994d-6145595906e4", "3": "9f11dc7b-c668-4a87-957b-1e2f50842a2b"}}, "__type__": "1"}, "9f11dc7b-c668-4a87-957b-1e2f50842a2b": {"__data__": {"text": "at the end of the message) to the response.\n\nTrailers will only be emitted if chunked encoding is used for the response; if it is not (e.g. if the request was HTTP/1.0), they will be silently discarded.\n\nHTTP requires the Trailer header to be sent in order to emit trailers, with a list of the header fields in its value. E.g.,\n\nresponse.writeHead(200, { 'Content-Type': 'text/plain',\n                          'Trailer': 'Content-MD5' });\nresponse.write(fileData);\nresponse.addTrailers({ 'Content-MD5': '7895bf4b8828b55ceaf47747b4bca667' });\nresponse.end();\nAttempting to set a header field name or value that contains invalid characters will result in a TypeError being thrown.\n\nresponse.connection#\nAdded in: v0.3.0Deprecated since: v13.0.0\nStability: 0 - Deprecated. Use response.socket.\n<stream.Duplex>\nSee response.socket.\n\nresponse.cork()#\nAdded in: v13.2.0, v12.16.0\nSee writable.cork().\n\nresponse.end([data[, encoding]][, callback])#\nHistory\ndata <string> | <Buffer> | <Uint8Array>\nencoding <string>\ncallback <Function>\nReturns: <this>\nThis method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. The method, response.end(), MUST be called on each response.\n\nIf data is specified, it is similar in effect to calling response.write(data, encoding) followed by response.end(callback).\n\nIf callback is specified, it will be called when the response stream is finished.\n\nresponse.finished#\nAdded in: v0.0.2Deprecated since: v13.4.0, v12.16.0\nStability: 0 - Deprecated. Use response.writableEnded.\n<boolean>\nThe response.finished property will be true if response.end() has been called.\n\nresponse.flushHeaders()#\nAdded in: v1.6.0\nFlushes the response headers. See also: request.flushHeaders().\n\nresponse.getHeader(name)#\nAdded in: v0.4.0\nname <string>\nReturns: <any>\nReads out a header that's already been queued but not sent to the client. The name is case-insensitive. The type of the return value depends on the arguments provided to response.setHeader().\n\nresponse.setHeader('Content-Type', 'text/html');\nresponse.setHeader('Content-Length', Buffer.byteLength(body));\nresponse.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);\nconst contentType = response.getHeader('content-type');\n// contentType is 'text/html'\nconst contentLength = response.getHeader('Content-Length');\n// contentLength is of type number\nconst setCookie = response.getHeader('set-cookie');\n// setCookie is of type string[]\nresponse.getHeaderNames()#\nAdded in: v7.7.0\nReturns: <string[]>\nReturns an array containing the unique names of the current outgoing headers. All header names are lowercase.\n\nresponse.setHeader('Foo', 'bar');\nresponse.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n\nconst headerNames = response.getHeaderNames();\n// headerNames === ['foo', 'set-cookie']\nresponse.getHeaders()#\nAdded in: v7.7.0\nReturns: <Object>\nReturns a shallow copy of the current outgoing headers. Since a shallow copy is used, array values may be mutated without additional calls to various header-related http module methods. The keys of the returned object are the header names and the values are the respective header values. All header names are lowercase.\n\nThe object returned by the response.getHeaders() method does not prototypically inherit from the JavaScript Object. This means that typical Object methods such as obj.toString(), obj.hasOwnProperty(), and", "doc_id": "9f11dc7b-c668-4a87-957b-1e2f50842a2b", "embedding": null, "doc_hash": "31d463df44bca323ceb9110179ae4d8339483e39e505b4a615d645cfc13e2d8a", "extra_info": null, "node_info": {"start": 1462051, "end": 1465487}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "bd26570b-8ce8-4801-86fb-ae8fe52b8004", "3": "de2085b5-1814-45d8-87f3-f7cb302890af"}}, "__type__": "1"}, "de2085b5-1814-45d8-87f3-f7cb302890af": {"__data__": {"text": "'bar');\nresponse.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n\nconst headerNames = response.getHeaderNames();\n// headerNames === ['foo', 'set-cookie']\nresponse.getHeaders()#\nAdded in: v7.7.0\nReturns: <Object>\nReturns a shallow copy of the current outgoing headers. Since a shallow copy is used, array values may be mutated without additional calls to various header-related http module methods. The keys of the returned object are the header names and the values are the respective header values. All header names are lowercase.\n\nThe object returned by the response.getHeaders() method does not prototypically inherit from the JavaScript Object. This means that typical Object methods such as obj.toString(), obj.hasOwnProperty(), and others are not defined and will not work.\n\nresponse.setHeader('Foo', 'bar');\nresponse.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n\nconst headers = response.getHeaders();\n// headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }\nresponse.hasHeader(name)#\nAdded in: v7.7.0\nname <string>\nReturns: <boolean>\nReturns true if the header identified by name is currently set in the outgoing headers. The header name matching is case-insensitive.\n\nconst hasContentType = response.hasHeader('content-type');\nresponse.headersSent#\nAdded in: v0.9.3\n<boolean>\nBoolean (read-only). True if headers were sent, false otherwise.\n\nresponse.removeHeader(name)#\nAdded in: v0.4.0\nname <string>\nRemoves a header that's queued for implicit sending.\n\nresponse.removeHeader('Content-Encoding');\nresponse.req#\nAdded in: v15.7.0\n<http.IncomingMessage>\nA reference to the original HTTP request object.\n\nresponse.sendDate#\nAdded in: v0.7.5\n<boolean>\nWhen true, the Date header will be automatically generated and sent in the response if it is not already present in the headers. Defaults to true.\n\nThis should only be disabled for testing; HTTP requires the Date header in responses.\n\nresponse.setHeader(name, value)#\nAdded in: v0.4.0\nname <string>\nvalue <any>\nReturns: <http.ServerResponse>\nReturns the response object.\n\nSets a single header value for implicit headers. If this header already exists in the to-be-sent headers, its value will be replaced. Use an array of strings here to send multiple headers with the same name. Non-string values will be stored without modification. Therefore, response.getHeader() may return non-string values. However, the non-string values will be converted to strings for network transmission. The same response object is returned to the caller, to enable call chaining.\n\nresponse.setHeader('Content-Type', 'text/html');\nor\n\nresponse.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);\nAttempting to set a header field name or value that contains invalid characters will result in a TypeError being thrown.\n\nWhen headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead(), with the headers passed to response.writeHead() given precedence.\n\n// Returns content-type = text/plain\nconst server = http.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('ok');\n});\nIf response.writeHead() method is called and this method has not been called, it will directly write the supplied header values onto the network channel without caching internally, and the response.getHeader() on the header will not yield the expected result. If progressive population of headers is desired with potential future retrieval and modification, use response.setHeader() instead of response.writeHead().\n\nresponse.setTimeout(msecs[,", "doc_id": "de2085b5-1814-45d8-87f3-f7cb302890af", "embedding": null, "doc_hash": "e43ee02a63a5175f31b7cad7a2b6750510d81eb9434668ff8c7dc851b783cf67", "extra_info": null, "node_info": {"start": 1465315, "end": 1468975}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9f11dc7b-c668-4a87-957b-1e2f50842a2b", "3": "859f3bd5-cfad-46b0-8056-b0bf9be17853"}}, "__type__": "1"}, "859f3bd5-cfad-46b0-8056-b0bf9be17853": {"__data__": {"text": "to response.writeHead() given precedence.\n\n// Returns content-type = text/plain\nconst server = http.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('ok');\n});\nIf response.writeHead() method is called and this method has not been called, it will directly write the supplied header values onto the network channel without caching internally, and the response.getHeader() on the header will not yield the expected result. If progressive population of headers is desired with potential future retrieval and modification, use response.setHeader() instead of response.writeHead().\n\nresponse.setTimeout(msecs[, callback])#\nAdded in: v0.9.12\nmsecs <number>\ncallback <Function>\nReturns: <http.ServerResponse>\nSets the Socket's timeout value to msecs. If a callback is provided, then it is added as a listener on the 'timeout' event on the response object.\n\nIf no 'timeout' listener is added to the request, the response, or the server, then sockets are destroyed when they time out. If a handler is assigned to the request, the response, or the server's 'timeout' events, timed out sockets must be handled explicitly.\n\nresponse.socket#\nAdded in: v0.3.0\n<stream.Duplex>\nReference to the underlying socket. Usually users will not want to access this property. In particular, the socket will not emit 'readable' events because of how the protocol parser attaches to the socket. After response.end(), the property is nulled.\n\nconst http = require('node:http');\nconst server = http.createServer((req, res) => {\n  const ip = res.socket.remoteAddress;\n  const port = res.socket.remotePort;\n  res.end(`Your IP address is ${ip} and your source port is ${port}.`);\n}).listen(3000);\nThis property is guaranteed to be an instance of the <net.Socket> class, a subclass of <stream.Duplex>, unless the user specified a socket type other than <net.Socket>.\n\nresponse.statusCode#\nAdded in: v0.4.0\n<number> Default: 200\nWhen using implicit headers (not calling response.writeHead() explicitly), this property controls the status code that will be sent to the client when the headers get flushed.\n\nresponse.statusCode = 404;\nAfter response header was sent to the client, this property indicates the status code which was sent out.\n\nresponse.statusMessage#\nAdded in: v0.11.8\n<string>\nWhen using implicit headers (not calling response.writeHead() explicitly), this property controls the status message that will be sent to the client when the headers get flushed. If this is left as undefined then the standard message for the status code will be used.\n\nresponse.statusMessage = 'Not found';\nAfter response header was sent to the client, this property indicates the status message which was sent out.\n\nresponse.strictContentLength#\nAdded in: v18.10.0, v16.18.0\n<boolean> Default: false\nIf set to true, Node.js will check whether the Content-Length header value and the size of the body, in bytes, are equal. Mismatching the Content-Length header value will result in an Error being thrown, identified by code: 'ERR_HTTP_CONTENT_LENGTH_MISMATCH'.\n\nresponse.uncork()#\nAdded in: v13.2.0, v12.16.0\nSee writable.uncork().\n\nresponse.writableEnded#\nAdded in: v12.9.0\n<boolean>\nIs true after response.end() has been called. This property does not indicate whether the data has been flushed, for this use response.writableFinished instead.\n\nresponse.writableFinished#\nAdded in: v12.7.0\n<boolean>\nIs true if all data has been flushed to the underlying system, immediately before the 'finish' event is emitted.\n\nresponse.write(chunk[, encoding][,", "doc_id": "859f3bd5-cfad-46b0-8056-b0bf9be17853", "embedding": null, "doc_hash": "91021ec1d5060014c805d1a77b12a577570adeff37886e30d0ccbc44fc778df6", "extra_info": null, "node_info": {"start": 1468980, "end": 1472611}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "de2085b5-1814-45d8-87f3-f7cb302890af", "3": "1b4a46e1-bbcd-4835-85d9-14e757dd61f1"}}, "__type__": "1"}, "1b4a46e1-bbcd-4835-85d9-14e757dd61f1": {"__data__": {"text": "Mismatching the Content-Length header value will result in an Error being thrown, identified by code: 'ERR_HTTP_CONTENT_LENGTH_MISMATCH'.\n\nresponse.uncork()#\nAdded in: v13.2.0, v12.16.0\nSee writable.uncork().\n\nresponse.writableEnded#\nAdded in: v12.9.0\n<boolean>\nIs true after response.end() has been called. This property does not indicate whether the data has been flushed, for this use response.writableFinished instead.\n\nresponse.writableFinished#\nAdded in: v12.7.0\n<boolean>\nIs true if all data has been flushed to the underlying system, immediately before the 'finish' event is emitted.\n\nresponse.write(chunk[, encoding][, callback])#\nHistory\nchunk <string> | <Buffer> | <Uint8Array>\nencoding <string> Default: 'utf8'\ncallback <Function>\nReturns: <boolean>\nIf this method is called and response.writeHead() has not been called, it will switch to implicit header mode and flush the implicit headers.\n\nThis sends a chunk of the response body. This method may be called multiple times to provide successive parts of the body.\n\nIn the node:http module, the response body is omitted when the request is a HEAD request. Similarly, the 204 and 304 responses must not include a message body.\n\nchunk can be a string or a buffer. If chunk is a string, the second parameter specifies how to encode it into a byte stream. callback will be called when this chunk of data is flushed.\n\nThis is the raw HTTP body and has nothing to do with higher-level multi-part body encodings that may be used.\n\nThe first time response.write() is called, it will send the buffered header information and the first chunk of the body to the client. The second time response.write() is called, Node.js assumes data will be streamed, and sends the new data separately. That is, the response is buffered up to the first chunk of the body.\n\nReturns true if the entire data was flushed successfully to the kernel buffer. Returns false if all or part of the data was queued in user memory. 'drain' will be emitted when the buffer is free again.\n\nresponse.writeContinue()#\nAdded in: v0.3.0\nSends an HTTP/1.1 100 Continue message to the client, indicating that the request body should be sent. See the 'checkContinue' event on Server.\n\nresponse.writeEarlyHints(hints[, callback])#\nHistory\nhints <Object>\ncallback <Function>\nSends an HTTP/1.1 103 Early Hints message to the client with a Link header, indicating that the user agent can preload/preconnect the linked resources. The hints is an object containing the values of headers to be sent with early hints message. The optional callback argument will be called when the response message has been written.\n\nExample\n\nconst earlyHintsLink = '</styles.css>; rel=preload; as=style';\nresponse.writeEarlyHints({\n  'link': earlyHintsLink,\n});\n\nconst earlyHintsLinks = [\n  '</styles.css>; rel=preload; as=style',\n  '</scripts.js>; rel=preload; as=script',\n];\nresponse.writeEarlyHints({\n  'link': earlyHintsLinks,\n  'x-trace-id': 'id for diagnostics',\n});\n\nconst earlyHintsCallback = () => console.log('early hints message sent');\nresponse.writeEarlyHints({\n  'link': earlyHintsLinks,\n}, earlyHintsCallback);\nresponse.writeHead(statusCode[, statusMessage][, headers])#\nHistory\nstatusCode <number>\nstatusMessage <string>\nheaders <Object> | <Array>\nReturns: <http.ServerResponse>\nSends a response header to the request. The status code is a 3-digit HTTP status code, like 404. The last argument, headers, are the response headers. Optionally one can give a human-readable statusMessage as the second argument.\n\nheaders may be an Array where the keys and values are in the same list. It is not a list of tuples. So, the even-numbered offsets are key values, and the", "doc_id": "1b4a46e1-bbcd-4835-85d9-14e757dd61f1", "embedding": null, "doc_hash": "5b4d8c1b94d70394ca199e3b3944de5dce43a5c8da494eed881abf144d3c08e5", "extra_info": null, "node_info": {"start": 1472695, "end": 1476366}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "859f3bd5-cfad-46b0-8056-b0bf9be17853", "3": "7c22a6e8-c58f-4732-8bc6-455a88782573"}}, "__type__": "1"}, "7c22a6e8-c58f-4732-8bc6-455a88782573": {"__data__": {"text": "'id for diagnostics',\n});\n\nconst earlyHintsCallback = () => console.log('early hints message sent');\nresponse.writeEarlyHints({\n  'link': earlyHintsLinks,\n}, earlyHintsCallback);\nresponse.writeHead(statusCode[, statusMessage][, headers])#\nHistory\nstatusCode <number>\nstatusMessage <string>\nheaders <Object> | <Array>\nReturns: <http.ServerResponse>\nSends a response header to the request. The status code is a 3-digit HTTP status code, like 404. The last argument, headers, are the response headers. Optionally one can give a human-readable statusMessage as the second argument.\n\nheaders may be an Array where the keys and values are in the same list. It is not a list of tuples. So, the even-numbered offsets are key values, and the odd-numbered offsets are the associated values. The array is in the same format as request.rawHeaders.\n\nReturns a reference to the ServerResponse, so that calls can be chained.\n\nconst body = 'hello world';\nresponse\n  .writeHead(200, {\n    'Content-Length': Buffer.byteLength(body),\n    'Content-Type': 'text/plain',\n  })\n  .end(body);\nThis method must only be called once on a message and it must be called before response.end() is called.\n\nIf response.write() or response.end() are called before calling this, the implicit/mutable headers will be calculated and call this function.\n\nWhen headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead(), with the headers passed to response.writeHead() given precedence.\n\nIf this method is called and response.setHeader() has not been called, it will directly write the supplied header values onto the network channel without caching internally, and the response.getHeader() on the header will not yield the expected result. If progressive population of headers is desired with potential future retrieval and modification, use response.setHeader() instead.\n\n// Returns content-type = text/plain\nconst server = http.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('ok');\n});\nContent-Length is read in bytes, not characters. Use Buffer.byteLength() to determine the length of the body in bytes. Node.js will check whether Content-Length and the length of the body which has been transmitted are equal or not.\n\nAttempting to set a header field name or value that contains invalid characters will result in a [Error][] being thrown.\n\nresponse.writeProcessing()#\nAdded in: v10.0.0\nSends a HTTP/1.1 102 Processing message to the client, indicating that the request body should be sent.\n\nClass: http.IncomingMessage#\nHistory\nExtends: <stream.Readable>\nAn IncomingMessage object is created by http.Server or http.ClientRequest and passed as the first argument to the 'request' and 'response' event respectively. It may be used to access response status, headers, and data.\n\nDifferent from its socket value which is a subclass of <stream.Duplex>, the IncomingMessage itself extends <stream.Readable> and is created separately to parse and emit the incoming HTTP headers and payload, as the underlying socket may be reused multiple times in case of keep-alive.\n\nEvent: 'aborted'#\nAdded in: v0.3.8Deprecated since: v17.0.0, v16.12.0\nStability: 0 - Deprecated. Listen for 'close' event instead.\nEmitted when the request has been aborted.\n\nEvent: 'close'#\nHistory\nEmitted when the request has been completed.\n\nmessage.aborted#\nAdded in: v10.1.0Deprecated since: v17.0.0, v16.12.0\nStability: 0 - Deprecated. Check message.destroyed from <stream.Readable>.\n<boolean>\nThe message.aborted property will be true if the request has been aborted.\n\nmessage.complete#\nAdded", "doc_id": "7c22a6e8-c58f-4732-8bc6-455a88782573", "embedding": null, "doc_hash": "33c42e2a6fb5d0e482346907865aeb88d0c1e5ecc047057f880d194720987117", "extra_info": null, "node_info": {"start": 1476286, "end": 1479998}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1b4a46e1-bbcd-4835-85d9-14e757dd61f1", "3": "975cb97f-972f-48c7-a124-0c700142f915"}}, "__type__": "1"}, "975cb97f-972f-48c7-a124-0c700142f915": {"__data__": {"text": "the incoming HTTP headers and payload, as the underlying socket may be reused multiple times in case of keep-alive.\n\nEvent: 'aborted'#\nAdded in: v0.3.8Deprecated since: v17.0.0, v16.12.0\nStability: 0 - Deprecated. Listen for 'close' event instead.\nEmitted when the request has been aborted.\n\nEvent: 'close'#\nHistory\nEmitted when the request has been completed.\n\nmessage.aborted#\nAdded in: v10.1.0Deprecated since: v17.0.0, v16.12.0\nStability: 0 - Deprecated. Check message.destroyed from <stream.Readable>.\n<boolean>\nThe message.aborted property will be true if the request has been aborted.\n\nmessage.complete#\nAdded in: v0.3.0\n<boolean>\nThe message.complete property will be true if a complete HTTP message has been received and successfully parsed.\n\nThis property is particularly useful as a means of determining if a client or server fully transmitted a message before a connection was terminated:\n\nconst req = http.request({\n  host: '127.0.0.1',\n  port: 8080,\n  method: 'POST',\n}, (res) => {\n  res.resume();\n  res.on('end', () => {\n    if (!res.complete)\n      console.error(\n        'The connection was terminated while the message was still being sent');\n  });\n});\nmessage.connection#\nAdded in: v0.1.90Deprecated since: v16.0.0\nStability: 0 - Deprecated. Use message.socket.\nAlias for message.socket.\n\nmessage.destroy([error])#\nHistory\nerror <Error>\nReturns: <this>\nCalls destroy() on the socket that received the IncomingMessage. If error is provided, an 'error' event is emitted on the socket and error is passed as an argument to any listeners on the event.\n\nmessage.headers#\nHistory\n<Object>\nThe request/response headers object.\n\nKey-value pairs of header names and values. Header names are lower-cased.\n\n// Prints something like:\n//\n// { 'user-agent': 'curl/7.22.0',\n//   host: '127.0.0.1:8000',\n//   accept: '*/*' }\nconsole.log(request.headers);\nDuplicates in raw headers are handled in the following ways, depending on the header name:\n\nDuplicates of age, authorization, content-length, content-type, etag, expires, from, host, if-modified-since, if-unmodified-since, last-modified, location, max-forwards, proxy-authorization, referer, retry-after, server, or user-agent are discarded. To allow duplicate values of the headers listed above to be joined, use the option joinDuplicateHeaders in http.request() and http.createServer(). See RFC 9110 Section 5.3 for more information.\nset-cookie is always an array. Duplicates are added to the array.\nFor duplicate cookie headers, the values are joined together with ; .\nFor all other headers, the values are joined together with , .\nmessage.headersDistinct#\nAdded in: v18.3.0\n<Object>\nSimilar to message.headers, but there is no join logic and the values are always arrays of strings, even for headers received just once.\n\n// Prints something like:\n//\n// { 'user-agent': ['curl/7.22.0'],\n//   host: ['127.0.0.1:8000'],\n//   accept: ['*/*'] }\nconsole.log(request.headersDistinct);\nmessage.httpVersion#\nAdded in: v0.1.1\n<string>\nIn case of server request, the HTTP version sent by the client. In the case of client response, the HTTP version of the connected-to server. Probably either '1.1' or '1.0'.\n\nAlso message.httpVersionMajor is the first integer and message.httpVersionMinor is the second.\n\nmessage.method#\nAdded in: v0.1.1\n<string>\nOnly valid for request", "doc_id": "975cb97f-972f-48c7-a124-0c700142f915", "embedding": null, "doc_hash": "6da00f91409f6899a4a7f54c01d9267d5f28a6536f847e8171db7098c485e220", "extra_info": null, "node_info": {"start": 1480095, "end": 1483416}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7c22a6e8-c58f-4732-8bc6-455a88782573", "3": "ede587b8-8835-42db-847f-44d0462fb5b5"}}, "__type__": "1"}, "ede587b8-8835-42db-847f-44d0462fb5b5": {"__data__": {"text": "logic and the values are always arrays of strings, even for headers received just once.\n\n// Prints something like:\n//\n// { 'user-agent': ['curl/7.22.0'],\n//   host: ['127.0.0.1:8000'],\n//   accept: ['*/*'] }\nconsole.log(request.headersDistinct);\nmessage.httpVersion#\nAdded in: v0.1.1\n<string>\nIn case of server request, the HTTP version sent by the client. In the case of client response, the HTTP version of the connected-to server. Probably either '1.1' or '1.0'.\n\nAlso message.httpVersionMajor is the first integer and message.httpVersionMinor is the second.\n\nmessage.method#\nAdded in: v0.1.1\n<string>\nOnly valid for request obtained from http.Server.\n\nThe request method as a string. Read only. Examples: 'GET', 'DELETE'.\n\nmessage.rawHeaders#\nAdded in: v0.11.6\n<string[]>\nThe raw request/response headers list exactly as they were received.\n\nThe keys and values are in the same list. It is not a list of tuples. So, the even-numbered offsets are key values, and the odd-numbered offsets are the associated values.\n\nHeader names are not lowercased, and duplicates are not merged.\n\n// Prints something like:\n//\n// [ 'user-agent',\n//   'this is invalid because there can be only one',\n//   'User-Agent',\n//   'curl/7.22.0',\n//   'Host',\n//   '127.0.0.1:8000',\n//   'ACCEPT',\n//   '*/*' ]\nconsole.log(request.rawHeaders);\nmessage.rawTrailers#\nAdded in: v0.11.6\n<string[]>\nThe raw request/response trailer keys and values exactly as they were received. Only populated at the 'end' event.\n\nmessage.setTimeout(msecs[, callback])#\nAdded in: v0.5.9\nmsecs <number>\ncallback <Function>\nReturns: <http.IncomingMessage>\nCalls message.socket.setTimeout(msecs, callback).\n\nmessage.socket#\nAdded in: v0.3.0\n<stream.Duplex>\nThe net.Socket object associated with the connection.\n\nWith HTTPS support, use request.socket.getPeerCertificate() to obtain the client's authentication details.\n\nThis property is guaranteed to be an instance of the <net.Socket> class, a subclass of <stream.Duplex>, unless the user specified a socket type other than <net.Socket> or internally nulled.\n\nmessage.statusCode#\nAdded in: v0.1.1\n<number>\nOnly valid for response obtained from http.ClientRequest.\n\nThe 3-digit HTTP response status code. E.G. 404.\n\nmessage.statusMessage#\nAdded in: v0.11.10\n<string>\nOnly valid for response obtained from http.ClientRequest.\n\nThe HTTP response status message (reason phrase). E.G. OK or Internal Server Error.\n\nmessage.trailers#\nAdded in: v0.3.0\n<Object>\nThe request/response trailers object. Only populated at the 'end' event.\n\nmessage.trailersDistinct#\nAdded in: v18.3.0\n<Object>\nSimilar to message.trailers, but there is no join logic and the values are always arrays of strings, even for headers received just once. Only populated at the 'end' event.\n\nmessage.url#\nAdded in: v0.1.90\n<string>\nOnly valid for request obtained from http.Server.\n\nRequest URL string. This contains only the URL that is present in the actual HTTP request. Take the following request:\n\nGET /status?name=ryan HTTP/1.1\nAccept: text/plain\nTo parse the URL into its parts:\n\nnew URL(request.url, `http://${request.headers.host}`);\nWhen request.url is '/status?name=ryan' and request.headers.host is 'localhost:3000':\n\n$ node\n> new URL(request.url,", "doc_id": "ede587b8-8835-42db-847f-44d0462fb5b5", "embedding": null, "doc_hash": "768dc2049b74d369b6d60e23caee6d2a49dd745c5dd82cb99dbad69d68f8cb6c", "extra_info": null, "node_info": {"start": 1483413, "end": 1486640}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "975cb97f-972f-48c7-a124-0c700142f915", "3": "e248a952-241c-4886-b50c-9dd16a7bd73b"}}, "__type__": "1"}, "e248a952-241c-4886-b50c-9dd16a7bd73b": {"__data__": {"text": "v18.3.0\n<Object>\nSimilar to message.trailers, but there is no join logic and the values are always arrays of strings, even for headers received just once. Only populated at the 'end' event.\n\nmessage.url#\nAdded in: v0.1.90\n<string>\nOnly valid for request obtained from http.Server.\n\nRequest URL string. This contains only the URL that is present in the actual HTTP request. Take the following request:\n\nGET /status?name=ryan HTTP/1.1\nAccept: text/plain\nTo parse the URL into its parts:\n\nnew URL(request.url, `http://${request.headers.host}`);\nWhen request.url is '/status?name=ryan' and request.headers.host is 'localhost:3000':\n\n$ node\n> new URL(request.url, `http://${request.headers.host}`)\nURL {\n  href: 'http://localhost:3000/status?name=ryan',\n  origin: 'http://localhost:3000',\n  protocol: 'http:',\n  username: '',\n  password: '',\n  host: 'localhost:3000',\n  hostname: 'localhost',\n  port: '3000',\n  pathname: '/status',\n  search: '?name=ryan',\n  searchParams: URLSearchParams { 'name' => 'ryan' },\n  hash: ''\n}\nClass: http.OutgoingMessage#\nAdded in: v0.1.17\nExtends: <Stream>\nThis class serves as the parent class of http.ClientRequest and http.ServerResponse. It is an abstract outgoing message from the perspective of the participants of an HTTP transaction.\n\nEvent: 'drain'#\nAdded in: v0.3.6\nEmitted when the buffer of the message is free again.\n\nEvent: 'finish'#\nAdded in: v0.1.17\nEmitted when the transmission is finished successfully.\n\nEvent: 'prefinish'#\nAdded in: v0.11.6\nEmitted after outgoingMessage.end() is called. When the event is emitted, all data has been processed but not necessarily completely flushed.\n\noutgoingMessage.addTrailers(headers)#\nAdded in: v0.3.0\nheaders <Object>\nAdds HTTP trailers (headers but at the end of the message) to the message.\n\nTrailers will only be emitted if the message is chunked encoded. If not, the trailers will be silently discarded.\n\nHTTP requires the Trailer header to be sent to emit trailers, with a list of header field names in its value, e.g.\n\nmessage.writeHead(200, { 'Content-Type': 'text/plain',\n                         'Trailer': 'Content-MD5' });\nmessage.write(fileData);\nmessage.addTrailers({ 'Content-MD5': '7895bf4b8828b55ceaf47747b4bca667' });\nmessage.end();\nAttempting to set a header field name or value that contains invalid characters will result in a TypeError being thrown.\n\noutgoingMessage.appendHeader(name, value)#\nAdded in: v18.3.0\nname <string> Header name\nvalue <string> | <string[]> Header value\nReturns: <this>\nAppend a single header value for the header object.\n\nIf the value is an array, this is equivalent of calling this method multiple times.\n\nIf there were no previous value for the header, this is equivalent of calling outgoingMessage.setHeader(name, value).\n\nDepending of the value of options.uniqueHeaders when the client request or the server were created, this will end up in the header being sent multiple times or a single time with values joined using ; .\n\noutgoingMessage.connection#\nAdded in: v0.3.0Deprecated since: v15.12.0, v14.17.1\nStability: 0 - Deprecated: Use outgoingMessage.socket instead.\nAlias of outgoingMessage.socket.\n\noutgoingMessage.cork()#\nAdded in: v13.2.0, v12.16.0\nSee writable.cork().\n\noutgoingMessage.destroy([error])#\nAdded in:", "doc_id": "e248a952-241c-4886-b50c-9dd16a7bd73b", "embedding": null, "doc_hash": "a356e603c7cbbffe5bb34f061e92858b88d0afac263d7086b5c83f85d4b26ee7", "extra_info": null, "node_info": {"start": 1486611, "end": 1489867}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ede587b8-8835-42db-847f-44d0462fb5b5", "3": "5d9064cb-8f14-4d9f-8d43-830f58e51746"}}, "__type__": "1"}, "5d9064cb-8f14-4d9f-8d43-830f58e51746": {"__data__": {"text": "value is an array, this is equivalent of calling this method multiple times.\n\nIf there were no previous value for the header, this is equivalent of calling outgoingMessage.setHeader(name, value).\n\nDepending of the value of options.uniqueHeaders when the client request or the server were created, this will end up in the header being sent multiple times or a single time with values joined using ; .\n\noutgoingMessage.connection#\nAdded in: v0.3.0Deprecated since: v15.12.0, v14.17.1\nStability: 0 - Deprecated: Use outgoingMessage.socket instead.\nAlias of outgoingMessage.socket.\n\noutgoingMessage.cork()#\nAdded in: v13.2.0, v12.16.0\nSee writable.cork().\n\noutgoingMessage.destroy([error])#\nAdded in: v0.3.0\nerror <Error> Optional, an error to emit with error event\nReturns: <this>\nDestroys the message. Once a socket is associated with the message and is connected, that socket will be destroyed as well.\n\noutgoingMessage.end(chunk[, encoding][, callback])#\nHistory\nchunk <string> | <Buffer> | <Uint8Array>\nencoding <string> Optional, Default: utf8\ncallback <Function> Optional\nReturns: <this>\nFinishes the outgoing message. If any parts of the body are unsent, it will flush them to the underlying system. If the message is chunked, it will send the terminating chunk 0\\r\\n\\r\\n, and send the trailers (if any).\n\nIf chunk is specified, it is equivalent to calling outgoingMessage.write(chunk, encoding), followed by outgoingMessage.end(callback).\n\nIf callback is provided, it will be called when the message is finished (equivalent to a listener of the 'finish' event).\n\noutgoingMessage.flushHeaders()#\nAdded in: v1.6.0\nFlushes the message headers.\n\nFor efficiency reason, Node.js normally buffers the message headers until outgoingMessage.end() is called or the first chunk of message data is written. It then tries to pack the headers and data into a single TCP packet.\n\nIt is usually desired (it saves a TCP round-trip), but not when the first data is not sent until possibly much later. outgoingMessage.flushHeaders() bypasses the optimization and kickstarts the message.\n\noutgoingMessage.getHeader(name)#\nAdded in: v0.4.0\nname <string> Name of header\nReturns <string> | <undefined>\nGets the value of the HTTP header with the given name. If that header is not set, the returned value will be undefined.\n\noutgoingMessage.getHeaderNames()#\nAdded in: v7.7.0\nReturns <string[]>\nReturns an array containing the unique names of the current outgoing headers. All names are lowercase.\n\noutgoingMessage.getHeaders()#\nAdded in: v7.7.0\nReturns: <Object>\nReturns a shallow copy of the current outgoing headers. Since a shallow copy is used, array values may be mutated without additional calls to various header-related HTTP module methods. The keys of the returned object are the header names and the values are the respective header values. All header names are lowercase.\n\nThe object returned by the outgoingMessage.getHeaders() method does not prototypically inherit from the JavaScript Object. This means that typical Object methods such as obj.toString(), obj.hasOwnProperty(), and others are not defined and will not work.\n\noutgoingMessage.setHeader('Foo', 'bar');\noutgoingMessage.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n\nconst headers = outgoingMessage.getHeaders();\n// headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }\noutgoingMessage.hasHeader(name)#\nAdded in: v7.7.0\nname <string>\nReturns <boolean>\nReturns true if the header identified by name is currently set in the outgoing headers. The header name is case-insensitive.\n\nconst hasContentType =", "doc_id": "5d9064cb-8f14-4d9f-8d43-830f58e51746", "embedding": null, "doc_hash": "23f40cc347294e7c64d9c995ecd52ae71770de76b3c167509818f1be4c897969", "extra_info": null, "node_info": {"start": 1489834, "end": 1493405}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e248a952-241c-4886-b50c-9dd16a7bd73b", "3": "915249a3-32ea-403e-b5cc-84d6b3e6dfbd"}}, "__type__": "1"}, "915249a3-32ea-403e-b5cc-84d6b3e6dfbd": {"__data__": {"text": "method does not prototypically inherit from the JavaScript Object. This means that typical Object methods such as obj.toString(), obj.hasOwnProperty(), and others are not defined and will not work.\n\noutgoingMessage.setHeader('Foo', 'bar');\noutgoingMessage.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n\nconst headers = outgoingMessage.getHeaders();\n// headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }\noutgoingMessage.hasHeader(name)#\nAdded in: v7.7.0\nname <string>\nReturns <boolean>\nReturns true if the header identified by name is currently set in the outgoing headers. The header name is case-insensitive.\n\nconst hasContentType = outgoingMessage.hasHeader('content-type');\noutgoingMessage.headersSent#\nAdded in: v0.9.3\n<boolean>\nRead-only. true if the headers were sent, otherwise false.\n\noutgoingMessage.pipe()#\nAdded in: v9.0.0\nOverrides the stream.pipe() method inherited from the legacy Stream class which is the parent class of http.OutgoingMessage.\n\nCalling this method will throw an Error because outgoingMessage is a write-only stream.\n\noutgoingMessage.removeHeader(name)#\nAdded in: v0.4.0\nname <string> Header name\nRemoves a header that is queued for implicit sending.\n\noutgoingMessage.removeHeader('Content-Encoding');\noutgoingMessage.setHeader(name, value)#\nAdded in: v0.4.0\nname <string> Header name\nvalue <any> Header value\nReturns: <this>\nSets a single header value. If the header already exists in the to-be-sent headers, its value will be replaced. Use an array of strings to send multiple headers with the same name.\n\noutgoingMessage.setHeaders(headers)#\nAdded in: v18.15.0\nheaders <Headers> | <Map>\nReturns: <http.ServerResponse>\nReturns the response object.\n\nSets multiple header values for implicit headers. headers must be an instance of Headers or Map, if a header already exists in the to-be-sent headers, its value will be replaced.\n\nconst headers = new Headers({ foo: 'bar' });\nresponse.setHeaders(headers);\nor\n\nconst headers = new Map([['foo', 'bar']]);\nres.setHeaders(headers);\nWhen headers have been set with outgoingMessage.setHeaders(), they will be merged with any headers passed to response.writeHead(), with the headers passed to response.writeHead() given precedence.\n\n// Returns content-type = text/plain\nconst server = http.createServer((req, res) => {\n  const headers = new Headers({ 'Content-Type': 'text/html' });\n  res.setHeaders(headers);\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('ok');\n});\noutgoingMessage.setTimeout(msesc[, callback])#\nAdded in: v0.9.12\nmsesc <number>\ncallback <Function> Optional function to be called when a timeout occurs. Same as binding to the timeout event.\nReturns: <this>\nOnce a socket is associated with the message and is connected, socket.setTimeout() will be called with msecs as the first parameter.\n\noutgoingMessage.socket#\nAdded in: v0.3.0\n<stream.Duplex>\nReference to the underlying socket. Usually, users will not want to access this property.\n\nAfter calling outgoingMessage.end(), this property will be nulled.\n\noutgoingMessage.uncork()#\nAdded in: v13.2.0, v12.16.0\nSee writable.uncork()\n\noutgoingMessage.writableCorked#\nAdded in: v13.2.0, v12.16.0\n<number>\nThe number of times outgoingMessage.cork() has been called.\n\noutgoingMessage.writableEnded#\nAdded in: v12.9.0\n<boolean>\nIs true if outgoingMessage.end() has been called. This property does not indicate whether", "doc_id": "915249a3-32ea-403e-b5cc-84d6b3e6dfbd", "embedding": null, "doc_hash": "ba222531f5b0adcee9bdd273395aa84797048e7cfb48c278959092c25cdd4443", "extra_info": null, "node_info": {"start": 1493439, "end": 1496830}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5d9064cb-8f14-4d9f-8d43-830f58e51746", "3": "70e43007-4458-43cf-921a-418f6feea89a"}}, "__type__": "1"}, "70e43007-4458-43cf-921a-418f6feea89a": {"__data__": {"text": "as the first parameter.\n\noutgoingMessage.socket#\nAdded in: v0.3.0\n<stream.Duplex>\nReference to the underlying socket. Usually, users will not want to access this property.\n\nAfter calling outgoingMessage.end(), this property will be nulled.\n\noutgoingMessage.uncork()#\nAdded in: v13.2.0, v12.16.0\nSee writable.uncork()\n\noutgoingMessage.writableCorked#\nAdded in: v13.2.0, v12.16.0\n<number>\nThe number of times outgoingMessage.cork() has been called.\n\noutgoingMessage.writableEnded#\nAdded in: v12.9.0\n<boolean>\nIs true if outgoingMessage.end() has been called. This property does not indicate whether the data has been flushed. For that purpose, use message.writableFinished instead.\n\noutgoingMessage.writableFinished#\nAdded in: v12.7.0\n<boolean>\nIs true if all data has been flushed to the underlying system.\n\noutgoingMessage.writableHighWaterMark#\nAdded in: v12.9.0\n<number>\nThe highWaterMark of the underlying socket if assigned. Otherwise, the default buffer level when writable.write() starts returning false (16384).\n\noutgoingMessage.writableLength#\nAdded in: v12.9.0\n<number>\nThe number of buffered bytes.\n\noutgoingMessage.writableObjectMode#\nAdded in: v12.9.0\n<boolean>\nAlways false.\n\noutgoingMessage.write(chunk[, encoding][, callback])#\nHistory\nchunk <string> | <Buffer> | <Uint8Array>\nencoding <string> Default: utf8\ncallback <Function>\nReturns <boolean>\nSends a chunk of the body. This method can be called multiple times.\n\nThe encoding argument is only relevant when chunk is a string. Defaults to 'utf8'.\n\nThe callback argument is optional and will be called when this chunk of data is flushed.\n\nReturns true if the entire data was flushed successfully to the kernel buffer. Returns false if all or part of the data was queued in the user memory. The 'drain' event will be emitted when the buffer is free again.\n\nhttp.METHODS#\nAdded in: v0.11.8\n<string[]>\nA list of the HTTP methods that are supported by the parser.\n\nhttp.STATUS_CODES#\nAdded in: v0.1.22\n<Object>\nA collection of all the standard HTTP response status codes, and the short description of each. For example, http.STATUS_CODES[404] === 'Not Found'.\n\nhttp.createServer([options][, requestListener])#\nHistory\noptions <Object>\n\nconnectionsCheckingInterval: Sets the interval value in milliseconds to check for request and headers timeout in incomplete requests. Default: 30000.\nheadersTimeout: Sets the timeout value in milliseconds for receiving the complete HTTP headers from the client. See server.headersTimeout for more information. Default: 60000.\ninsecureHTTPParser <boolean> Use an insecure HTTP parser that accepts invalid HTTP headers when true. Using the insecure parser should be avoided. See --insecure-http-parser for more information. Default: false.\nIncomingMessage <http.IncomingMessage> Specifies the IncomingMessage class to be used. Useful for extending the original IncomingMessage. Default: IncomingMessage.\nkeepAlive <boolean> If set to true, it enables keep-alive functionality on the socket immediately after a new incoming connection is received, similarly on what is done in [socket.setKeepAlive([enable][, initialDelay])][socket.setKeepAlive(enable, initialDelay)]. Default: false.\nkeepAliveInitialDelay <number> If set to a positive number, it sets the initial delay before the first keepalive probe is sent on an idle socket. Default: 0.\nrequestTimeout: Sets the timeout value in milliseconds for receiving the entire request from the client. See server.requestTimeout for more information. Default: 300000.\njoinDuplicateHeaders <boolean> It joins the field line values of multiple headers in a", "doc_id": "70e43007-4458-43cf-921a-418f6feea89a", "embedding": null, "doc_hash": "99e45db08f000b77bbb23a4efab56a295657a23dd5e54ca10723ff564d78fce5", "extra_info": null, "node_info": {"start": 1496871, "end": 1500466}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "915249a3-32ea-403e-b5cc-84d6b3e6dfbd", "3": "c3570920-63c5-45ae-82a5-cdbc2b7d506f"}}, "__type__": "1"}, "c3570920-63c5-45ae-82a5-cdbc2b7d506f": {"__data__": {"text": "be used. Useful for extending the original IncomingMessage. Default: IncomingMessage.\nkeepAlive <boolean> If set to true, it enables keep-alive functionality on the socket immediately after a new incoming connection is received, similarly on what is done in [socket.setKeepAlive([enable][, initialDelay])][socket.setKeepAlive(enable, initialDelay)]. Default: false.\nkeepAliveInitialDelay <number> If set to a positive number, it sets the initial delay before the first keepalive probe is sent on an idle socket. Default: 0.\nrequestTimeout: Sets the timeout value in milliseconds for receiving the entire request from the client. See server.requestTimeout for more information. Default: 300000.\njoinDuplicateHeaders <boolean> It joins the field line values of multiple headers in a request with , instead of discarding the duplicates. See message.headers for more information. Default: false.\nServerResponse <http.ServerResponse> Specifies the ServerResponse class to be used. Useful for extending the original ServerResponse. Default: ServerResponse.\nuniqueHeaders <Array> A list of response headers that should be sent only once. If the header's value is an array, the items will be joined using ; .\nrequestListener <Function>\n\nReturns: <http.Server>\n\nReturns a new instance of http.Server.\n\nThe requestListener is a function which is automatically added to the 'request' event.\n\nconst http = require('node:http');\n\n// Create a local server to receive data from\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'application/json' });\n  res.end(JSON.stringify({\n    data: 'Hello World!',\n  }));\n});\n\nserver.listen(8000);\nconst http = require('node:http');\n\n// Create a local server to receive data from\nconst server = http.createServer();\n\n// Listen to the request event\nserver.on('request', (request, res) => {\n  res.writeHead(200, { 'Content-Type': 'application/json' });\n  res.end(JSON.stringify({\n    data: 'Hello World!',\n  }));\n});\n\nserver.listen(8000);\nhttp.get(options[, callback])#\nhttp.get(url[, options][, callback])#\nHistory\nurl <string> | <URL>\noptions <Object> Accepts the same options as http.request(), with the method always set to GET. Properties that are inherited from the prototype are ignored.\ncallback <Function>\nReturns: <http.ClientRequest>\nSince most requests are GET requests without bodies, Node.js provides this convenience method. The only difference between this method and http.request() is that it sets the method to GET and calls req.end() automatically. The callback must take care to consume the response data for reasons stated in http.ClientRequest section.\n\nThe callback is invoked with a single argument that is an instance of http.IncomingMessage.\n\nJSON fetching example:\n\nhttp.get('http://localhost:8000/', (res) => {\n  const { statusCode } = res;\n  const contentType = res.headers['content-type'];\n\n  let error;\n  // Any 2xx status code signals a successful response but\n  // here we're only checking for 200.\n  if (statusCode !== 200) {\n    error = new Error('Request Failed.\\n' +\n                      `Status Code: ${statusCode}`);\n  } else if (!/^application\\/json/.test(contentType)) {\n    error = new Error('Invalid content-type.\\n' +\n                      `Expected application/json but received ${contentType}`);\n  }\n  if (error) {\n    console.error(error.message);\n    // Consume response data to free up memory\n    res.resume();\n    return;\n  }\n\n  res.setEncoding('utf8');\n  let rawData = '';\n ", "doc_id": "c3570920-63c5-45ae-82a5-cdbc2b7d506f", "embedding": null, "doc_hash": "2dc8dc075c749bb4335966c96f7be4e576007ad6185b9b693cb2f60f89b9d538", "extra_info": null, "node_info": {"start": 1500328, "end": 1503814}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "70e43007-4458-43cf-921a-418f6feea89a", "3": "949b5ae9-0ceb-46bc-acdd-3d332aa7dde2"}}, "__type__": "1"}, "949b5ae9-0ceb-46bc-acdd-3d332aa7dde2": {"__data__": {"text": "!== 200) {\n    error = new Error('Request Failed.\\n' +\n                      `Status Code: ${statusCode}`);\n  } else if (!/^application\\/json/.test(contentType)) {\n    error = new Error('Invalid content-type.\\n' +\n                      `Expected application/json but received ${contentType}`);\n  }\n  if (error) {\n    console.error(error.message);\n    // Consume response data to free up memory\n    res.resume();\n    return;\n  }\n\n  res.setEncoding('utf8');\n  let rawData = '';\n  res.on('data', (chunk) => { rawData += chunk; });\n  res.on('end', () => {\n    try {\n      const parsedData = JSON.parse(rawData);\n      console.log(parsedData);\n    } catch (e) {\n      console.error(e.message);\n    }\n  });\n}).on('error', (e) => {\n  console.error(`Got error: ${e.message}`);\n});\n\n// Create a local server to receive data from\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'application/json' });\n  res.end(JSON.stringify({\n    data: 'Hello World!',\n  }));\n});\n\nserver.listen(8000);\nhttp.globalAgent#\nAdded in: v0.5.9\n<http.Agent>\nGlobal instance of Agent which is used as the default for all HTTP client requests.\n\nhttp.maxHeaderSize#\nAdded in: v11.6.0, v10.15.0\n<number>\nRead-only property specifying the maximum allowed size of HTTP headers in bytes. Defaults to 16 KiB. Configurable using the --max-http-header-size CLI option.\n\nThis can be overridden for servers and client requests by passing the maxHeaderSize option.\n\nhttp.request(options[, callback])#\nhttp.request(url[, options][, callback])#\nHistory\nurl <string> | <URL>\noptions <Object>\nagent <http.Agent> | <boolean> Controls Agent behavior. Possible values:\nundefined (default): use http.globalAgent for this host and port.\nAgent object: explicitly use the passed in Agent.\nfalse: causes a new Agent with default values to be used.\nauth <string> Basic authentication ('user:password') to compute an Authorization header.\ncreateConnection <Function> A function that produces a socket/stream to use for the request when the agent option is not used. This can be used to avoid creating a custom Agent class just to override the default createConnection function. See agent.createConnection() for more details. Any Duplex stream is a valid return value.\ndefaultPort <number> Default port for the protocol. Default: agent.defaultPort if an Agent is used, else undefined.\nfamily <number> IP address family to use when resolving host or hostname. Valid values are 4 or 6. When unspecified, both IP v4 and v6 will be used.\nheaders <Object> An object containing request headers.\nhints <number> Optional dns.lookup() hints.\nhost <string> A domain name or IP address of the server to issue the request to. Default: 'localhost'.\nhostname <string> Alias for host. To support url.parse(), hostname will be used if both host and hostname are specified.\ninsecureHTTPParser <boolean> Use an insecure HTTP parser that accepts invalid HTTP headers when true. Using the insecure parser should be avoided. See --insecure-http-parser for more information. Default: false\nlocalAddress <string> Local interface to bind for network connections.\nlocalPort <number> Local port to connect from.\nlookup <Function> Custom lookup function. Default: dns.lookup().\nmaxHeaderSize <number> Optionally overrides the value of --max-http-header-size (the", "doc_id": "949b5ae9-0ceb-46bc-acdd-3d332aa7dde2", "embedding": null, "doc_hash": "ea5b995b21b76f946ad16f7da3242b306704c175b8750b6f688015cde8414164", "extra_info": null, "node_info": {"start": 1504135, "end": 1507449}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c3570920-63c5-45ae-82a5-cdbc2b7d506f", "3": "3062b395-3f6f-4af7-a6e6-01d547e4a51f"}}, "__type__": "1"}, "3062b395-3f6f-4af7-a6e6-01d547e4a51f": {"__data__": {"text": "An object containing request headers.\nhints <number> Optional dns.lookup() hints.\nhost <string> A domain name or IP address of the server to issue the request to. Default: 'localhost'.\nhostname <string> Alias for host. To support url.parse(), hostname will be used if both host and hostname are specified.\ninsecureHTTPParser <boolean> Use an insecure HTTP parser that accepts invalid HTTP headers when true. Using the insecure parser should be avoided. See --insecure-http-parser for more information. Default: false\nlocalAddress <string> Local interface to bind for network connections.\nlocalPort <number> Local port to connect from.\nlookup <Function> Custom lookup function. Default: dns.lookup().\nmaxHeaderSize <number> Optionally overrides the value of --max-http-header-size (the maximum length of response headers in bytes) for responses received from the server. Default: 16384 (16 KiB).\nmethod <string> A string specifying the HTTP request method. Default: 'GET'.\npath <string> Request path. Should include query string if any. E.G. '/index.html?page=12'. An exception is thrown when the request path contains illegal characters. Currently, only spaces are rejected but that may change in the future. Default: '/'.\nport <number> Port of remote server. Default: defaultPort if set, else 80.\nprotocol <string> Protocol to use. Default: 'http:'.\nsetHost <boolean>: Specifies whether or not to automatically add the Host header. Defaults to true.\nsignal <AbortSignal>: An AbortSignal that may be used to abort an ongoing request.\nsocketPath <string> Unix domain socket. Cannot be used if one of host or port is specified, as those specify a TCP Socket.\ntimeout <number>: A number specifying the socket timeout in milliseconds. This will set the timeout before the socket is connected.\nuniqueHeaders <Array> A list of request headers that should be sent only once. If the header's value is an array, the items will be joined using ; .\njoinDuplicateHeaders <boolean> It joins the field line values of multiple headers in a request with , instead of discarding the duplicates. See message.headers for more information. Default: false.\ncallback <Function>\nReturns: <http.ClientRequest>\noptions in socket.connect() are also supported.\n\nNode.js maintains several connections per server to make HTTP requests. This function allows one to transparently issue requests.\n\nurl can be a string or a URL object. If url is a string, it is automatically parsed with new URL(). If it is a URL object, it will be automatically converted to an ordinary options object.\n\nIf both url and options are specified, the objects are merged, with the options properties taking precedence.\n\nThe optional callback parameter will be added as a one-time listener for the 'response' event.\n\nhttp.request() returns an instance of the http.ClientRequest class. The ClientRequest instance is a writable stream. If one needs to upload a file with a POST request, then write to the ClientRequest object.\n\nconst http = require('node:http');\n\nconst postData = JSON.stringify({\n  'msg': 'Hello World!',\n});\n\nconst options = {\n  hostname: 'www.google.com',\n  port: 80,\n  path: '/upload',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Content-Length': Buffer.byteLength(postData),\n  },\n};\n\nconst req = http.request(options, (res) => {\n  console.log(`STATUS: ${res.statusCode}`);\n  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n  res.setEncoding('utf8');\n  res.on('data', (chunk) => {\n    console.log(`BODY: ${chunk}`);\n  });\n  res.on('end', () => {\n    console.log('No more data in response.');\n  });\n});\n\nreq.on('error', (e) => {\n  console.error(`problem with request:", "doc_id": "3062b395-3f6f-4af7-a6e6-01d547e4a51f", "embedding": null, "doc_hash": "272d4ac69833c6cc59d7fd8267c2de52a5bda32be0e45e49a2a5b7e0c85a0807", "extra_info": null, "node_info": {"start": 1507126, "end": 1510797}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "949b5ae9-0ceb-46bc-acdd-3d332aa7dde2", "3": "6a2af759-eeeb-4442-84a5-bb297400f383"}}, "__type__": "1"}, "6a2af759-eeeb-4442-84a5-bb297400f383": {"__data__": {"text": " headers: {\n    'Content-Type': 'application/json',\n    'Content-Length': Buffer.byteLength(postData),\n  },\n};\n\nconst req = http.request(options, (res) => {\n  console.log(`STATUS: ${res.statusCode}`);\n  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n  res.setEncoding('utf8');\n  res.on('data', (chunk) => {\n    console.log(`BODY: ${chunk}`);\n  });\n  res.on('end', () => {\n    console.log('No more data in response.');\n  });\n});\n\nreq.on('error', (e) => {\n  console.error(`problem with request: ${e.message}`);\n});\n\n// Write data to request body\nreq.write(postData);\nreq.end();\nIn the example req.end() was called. With http.request() one must always call req.end() to signify the end of the request - even if there is no data being written to the request body.\n\nIf any error is encountered during the request (be that with DNS resolution, TCP level errors, or actual HTTP parse errors) an 'error' event is emitted on the returned request object. As with all 'error' events, if no listeners are registered the error will be thrown.\n\nThere are a few special headers that should be noted.\n\nSending a 'Connection: keep-alive' will notify Node.js that the connection to the server should be persisted until the next request.\n\nSending a 'Content-Length' header will disable the default chunked encoding.\n\nSending an 'Expect' header will immediately send the request headers. Usually, when sending 'Expect: 100-continue', both a timeout and a listener for the 'continue' event should be set. See RFC 2616 Section 8.2.3 for more information.\n\nSending an Authorization header will override using the auth option to compute basic authentication.\n\nExample using a URL as options:\n\nconst options = new URL('http://abc:xyz@example.com');\n\nconst req = http.request(options, (res) => {\n  // ...\n});\nIn a successful request, the following events will be emitted in the following order:\n\n'socket'\n'response'\n'data' any number of times, on the res object ('data' will not be emitted at all if the response body is empty, for instance, in most redirects)\n'end' on the res object\n'close'\nIn the case of a connection error, the following events will be emitted:\n\n'socket'\n'error'\n'close'\nIn the case of a premature connection close before the response is received, the following events will be emitted in the following order:\n\n'socket'\n'error' with an error with message 'Error: socket hang up' and code 'ECONNRESET'\n'close'\nIn the case of a premature connection close after the response is received, the following events will be emitted in the following order:\n\n'socket'\n'response'\n'data' any number of times, on the res object\n(connection closed here)\n'aborted' on the res object\n'error' on the res object with an error with message 'Error: aborted' and code 'ECONNRESET'.\n'close'\n'close' on the res object\nIf req.destroy() is called before a socket is assigned, the following events will be emitted in the following order:\n\n(req.destroy() called here)\n'error' with an error with message 'Error: socket hang up' and code 'ECONNRESET'\n'close'\nIf req.destroy() is called before the connection succeeds, the following events will be emitted in the following order:\n\n'socket'\n(req.destroy() called here)\n'error' with an error with message 'Error: socket hang up' and code 'ECONNRESET'\n'close'\nIf req.destroy() is called after the response is received, the following events will be emitted in the following order:\n\n'socket'\n'response'\n'data' any number of times, on the res", "doc_id": "6a2af759-eeeb-4442-84a5-bb297400f383", "embedding": null, "doc_hash": "cd28113cad62e8e79de0217287f7a3964b5f5e9ccae2efecf56fa345b047eb83", "extra_info": null, "node_info": {"start": 1511045, "end": 1514502}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3062b395-3f6f-4af7-a6e6-01d547e4a51f", "3": "fe1f3167-9f63-4233-898c-7afd4026fdbd"}}, "__type__": "1"}, "fe1f3167-9f63-4233-898c-7afd4026fdbd": {"__data__": {"text": "on the res object\nIf req.destroy() is called before a socket is assigned, the following events will be emitted in the following order:\n\n(req.destroy() called here)\n'error' with an error with message 'Error: socket hang up' and code 'ECONNRESET'\n'close'\nIf req.destroy() is called before the connection succeeds, the following events will be emitted in the following order:\n\n'socket'\n(req.destroy() called here)\n'error' with an error with message 'Error: socket hang up' and code 'ECONNRESET'\n'close'\nIf req.destroy() is called after the response is received, the following events will be emitted in the following order:\n\n'socket'\n'response'\n'data' any number of times, on the res object\n(req.destroy() called here)\n'aborted' on the res object\n'error' on the res object with an error with message 'Error: aborted' and code 'ECONNRESET'.\n'close'\n'close' on the res object\nIf req.abort() is called before a socket is assigned, the following events will be emitted in the following order:\n\n(req.abort() called here)\n'abort'\n'close'\nIf req.abort() is called before the connection succeeds, the following events will be emitted in the following order:\n\n'socket'\n(req.abort() called here)\n'abort'\n'error' with an error with message 'Error: socket hang up' and code 'ECONNRESET'\n'close'\nIf req.abort() is called after the response is received, the following events will be emitted in the following order:\n\n'socket'\n'response'\n'data' any number of times, on the res object\n(req.abort() called here)\n'abort'\n'aborted' on the res object\n'error' on the res object with an error with message 'Error: aborted' and code 'ECONNRESET'.\n'close'\n'close' on the res object\nSetting the timeout option or using the setTimeout() function will not abort the request or do anything besides add a 'timeout' event.\n\nPassing an AbortSignal and then calling abort on the corresponding AbortController will behave the same way as calling .destroy() on the request itself.\n\nhttp.validateHeaderName(name[, label])#\nHistory\nname <string>\nlabel <string> Label for error message. Default: 'Header name'.\nPerforms the low-level validations on the provided name that are done when res.setHeader(name, value) is called.\n\nPassing illegal value as name will result in a TypeError being thrown, identified by code: 'ERR_INVALID_HTTP_TOKEN'.\n\nIt is not necessary to use this method before passing headers to an HTTP request or response. The HTTP module will automatically validate such headers. Examples:\n\nExample:\n\nconst { validateHeaderName } = require('node:http');\n\ntry {\n  validateHeaderName('');\n} catch (err) {\n  console.error(err instanceof TypeError); // --> true\n  console.error(err.code); // --> 'ERR_INVALID_HTTP_TOKEN'\n  console.error(err.message); // --> 'Header name must be a valid HTTP token [\"\"]'\n}\nhttp.validateHeaderValue(name, value)#\nAdded in: v14.3.0\nname <string>\nvalue <any>\nPerforms the low-level validations on the provided value that are done when res.setHeader(name, value) is called.\n\nPassing illegal value as value will result in a TypeError being thrown.\n\nUndefined value error is identified by code: 'ERR_HTTP_INVALID_HEADER_VALUE'.\nInvalid value character error is identified by code: 'ERR_INVALID_CHAR'.\nIt is not necessary to use this method before passing headers to an HTTP request or response. The HTTP module will automatically validate such headers.\n\nExamples:\n\nconst { validateHeaderValue } = require('node:http');\n\ntry {\n  validateHeaderValue('x-my-header', undefined);\n} catch (err) {\n ", "doc_id": "fe1f3167-9f63-4233-898c-7afd4026fdbd", "embedding": null, "doc_hash": "fe3e9eba44f79737407e91bb25656081491c4b1dee1de8d36ae99c6bc0958abe", "extra_info": null, "node_info": {"start": 1514354, "end": 1517842}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6a2af759-eeeb-4442-84a5-bb297400f383", "3": "3f39bf9a-ce2c-48c0-b26f-11c607d53dea"}}, "__type__": "1"}, "3f39bf9a-ce2c-48c0-b26f-11c607d53dea": {"__data__": {"text": "value)#\nAdded in: v14.3.0\nname <string>\nvalue <any>\nPerforms the low-level validations on the provided value that are done when res.setHeader(name, value) is called.\n\nPassing illegal value as value will result in a TypeError being thrown.\n\nUndefined value error is identified by code: 'ERR_HTTP_INVALID_HEADER_VALUE'.\nInvalid value character error is identified by code: 'ERR_INVALID_CHAR'.\nIt is not necessary to use this method before passing headers to an HTTP request or response. The HTTP module will automatically validate such headers.\n\nExamples:\n\nconst { validateHeaderValue } = require('node:http');\n\ntry {\n  validateHeaderValue('x-my-header', undefined);\n} catch (err) {\n  console.error(err instanceof TypeError); // --> true\n  console.error(err.code === 'ERR_HTTP_INVALID_HEADER_VALUE'); // --> true\n  console.error(err.message); // --> 'Invalid value \"undefined\" for header \"x-my-header\"'\n}\n\ntry {\n  validateHeaderValue('x-my-header', 'o\u028am\u026a\u0261\u0259');\n} catch (err) {\n  console.error(err instanceof TypeError); // --> true\n  console.error(err.code === 'ERR_INVALID_CHAR'); // --> true\n  console.error(err.message); // --> 'Invalid character in header content [\"x-my-header\"]'\n}\nhttp.setMaxIdleHTTPParsers(max)#\nAdded in: v18.8.0\nmax <number> Default: 1000.\nSet the maximum number of idle HTTP parsers.\n\nHTTP/2#\nHistory\nStability: 2 - Stable\nSource Code: lib/http2.js\n\nThe node:http2 module provides an implementation of the HTTP/2 protocol. It can be accessed using:\n\nconst http2 = require('node:http2');\nDetermining if crypto support is unavailable#\nIt is possible for Node.js to be built without including support for the node:crypto module. In such cases, attempting to import from node:http2 or calling require('node:http2') will result in an error being thrown.\n\nWhen using CommonJS, the error thrown can be caught using try/catch:\n\nlet http2;\ntry {\n  http2 = require('node:http2');\n} catch (err) {\n  console.error('http2 support is disabled!');\n}\nWhen using the lexical ESM import keyword, the error can only be caught if a handler for process.on('uncaughtException') is registered before any attempt to load the module is made (using, for instance, a preload module).\n\nWhen using ESM, if there is a chance that the code may be run on a build of Node.js where crypto support is not enabled, consider using the import() function instead of the lexical import keyword:\n\nlet http2;\ntry {\n  http2 = await import('node:http2');\n} catch (err) {\n  console.error('http2 support is disabled!');\n}\nCore API#\nThe Core API provides a low-level interface designed specifically around support for HTTP/2 protocol features. It is specifically not designed for compatibility with the existing HTTP/1 module API. However, the Compatibility API is.\n\nThe http2 Core API is much more symmetric between client and server than the http API. For instance, most events, like 'error', 'connect' and 'stream', can be emitted either by client-side code or server-side code.\n\nServer-side example#\nThe following illustrates a simple HTTP/2 server using the Core API. Since there are no browsers known that support unencrypted HTTP/2, the use of http2.createSecureServer() is necessary when communicating with browser clients.\n\nconst http2 = require('node:http2');\nconst fs = require('node:fs');\n\nconst server = http2.createSecureServer({\n  key: fs.readFileSync('localhost-privkey.pem'),\n  cert: fs.readFileSync('localhost-cert.pem'),\n});\nserver.on('error', (err) =>", "doc_id": "3f39bf9a-ce2c-48c0-b26f-11c607d53dea", "embedding": null, "doc_hash": "fb7c56acb4289e226cb0249eb840fc1f721f8717712bef0c3712f1993ea14402", "extra_info": null, "node_info": {"start": 1517831, "end": 1521279}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fe1f3167-9f63-4233-898c-7afd4026fdbd", "3": "a677123b-8f63-41cd-aa39-623adbde10e2"}}, "__type__": "1"}, "a677123b-8f63-41cd-aa39-623adbde10e2": {"__data__": {"text": "http2 Core API is much more symmetric between client and server than the http API. For instance, most events, like 'error', 'connect' and 'stream', can be emitted either by client-side code or server-side code.\n\nServer-side example#\nThe following illustrates a simple HTTP/2 server using the Core API. Since there are no browsers known that support unencrypted HTTP/2, the use of http2.createSecureServer() is necessary when communicating with browser clients.\n\nconst http2 = require('node:http2');\nconst fs = require('node:fs');\n\nconst server = http2.createSecureServer({\n  key: fs.readFileSync('localhost-privkey.pem'),\n  cert: fs.readFileSync('localhost-cert.pem'),\n});\nserver.on('error', (err) => console.error(err));\n\nserver.on('stream', (stream, headers) => {\n  // stream is a Duplex\n  stream.respond({\n    'content-type': 'text/html; charset=utf-8',\n    ':status': 200,\n  });\n  stream.end('<h1>Hello World</h1>');\n});\n\nserver.listen(8443);\nTo generate the certificate and key for this example, run:\n\nopenssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' \\\n  -keyout localhost-privkey.pem -out localhost-cert.pem\nClient-side example#\nThe following illustrates an HTTP/2 client:\n\nconst http2 = require('node:http2');\nconst fs = require('node:fs');\nconst client = http2.connect('https://localhost:8443', {\n  ca: fs.readFileSync('localhost-cert.pem'),\n});\nclient.on('error', (err) => console.error(err));\n\nconst req = client.request({ ':path': '/' });\n\nreq.on('response', (headers, flags) => {\n  for (const name in headers) {\n    console.log(`${name}: ${headers[name]}`);\n  }\n});\n\nreq.setEncoding('utf8');\nlet data = '';\nreq.on('data', (chunk) => { data += chunk; });\nreq.on('end', () => {\n  console.log(`\\n${data}`);\n  client.close();\n});\nreq.end();\nClass: Http2Session#\nAdded in: v8.4.0\nExtends: <EventEmitter>\nInstances of the http2.Http2Session class represent an active communications session between an HTTP/2 client and server. Instances of this class are not intended to be constructed directly by user code.\n\nEach Http2Session instance will exhibit slightly different behaviors depending on whether it is operating as a server or a client. The http2session.type property can be used to determine the mode in which an Http2Session is operating. On the server side, user code should rarely have occasion to work with the Http2Session object directly, with most actions typically taken through interactions with either the Http2Server or Http2Stream objects.\n\nUser code will not create Http2Session instances directly. Server-side Http2Session instances are created by the Http2Server instance when a new HTTP/2 connection is received. Client-side Http2Session instances are created using the http2.connect() method.\n\nHttp2Session and sockets#\nEvery Http2Session instance is associated with exactly one net.Socket or tls.TLSSocket when it is created. When either the Socket or the Http2Session are destroyed, both will be destroyed.\n\nBecause of the specific serialization and processing requirements imposed by the HTTP/2 protocol, it is not recommended for user code to read data from or write data to a Socket instance bound to a Http2Session. Doing so can put the HTTP/2 session into an indeterminate state causing the session and the socket to become unusable.\n\nOnce a Socket has been bound to an Http2Session, user code should rely solely on the API of the Http2Session.\n\nEvent: 'close'#\nAdded in: v8.4.0\nThe 'close' event is emitted once the Http2Session has been destroyed. Its", "doc_id": "a677123b-8f63-41cd-aa39-623adbde10e2", "embedding": null, "doc_hash": "bb2ac6b93f1f2d3e4dbf34ad7e0f9d29f0f473b3b6bb8da500f40506be65009d", "extra_info": null, "node_info": {"start": 1521262, "end": 1524773}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3f39bf9a-ce2c-48c0-b26f-11c607d53dea", "3": "70122c97-d631-4a23-b35d-993012397db9"}}, "__type__": "1"}, "70122c97-d631-4a23-b35d-993012397db9": {"__data__": {"text": "method.\n\nHttp2Session and sockets#\nEvery Http2Session instance is associated with exactly one net.Socket or tls.TLSSocket when it is created. When either the Socket or the Http2Session are destroyed, both will be destroyed.\n\nBecause of the specific serialization and processing requirements imposed by the HTTP/2 protocol, it is not recommended for user code to read data from or write data to a Socket instance bound to a Http2Session. Doing so can put the HTTP/2 session into an indeterminate state causing the session and the socket to become unusable.\n\nOnce a Socket has been bound to an Http2Session, user code should rely solely on the API of the Http2Session.\n\nEvent: 'close'#\nAdded in: v8.4.0\nThe 'close' event is emitted once the Http2Session has been destroyed. Its listener does not expect any arguments.\n\nEvent: 'connect'#\nAdded in: v8.4.0\nsession <Http2Session>\nsocket <net.Socket>\nThe 'connect' event is emitted once the Http2Session has been successfully connected to the remote peer and communication may begin.\n\nUser code will typically not listen for this event directly.\n\nEvent: 'error'#\nAdded in: v8.4.0\nerror <Error>\nThe 'error' event is emitted when an error occurs during the processing of an Http2Session.\n\nEvent: 'frameError'#\nAdded in: v8.4.0\ntype <integer> The frame type.\ncode <integer> The error code.\nid <integer> The stream id (or 0 if the frame isn't associated with a stream).\nThe 'frameError' event is emitted when an error occurs while attempting to send a frame on the session. If the frame that could not be sent is associated with a specific Http2Stream, an attempt to emit a 'frameError' event on the Http2Stream is made.\n\nIf the 'frameError' event is associated with a stream, the stream will be closed and destroyed immediately following the 'frameError' event. If the event is not associated with a stream, the Http2Session will be shut down immediately following the 'frameError' event.\n\nEvent: 'goaway'#\nAdded in: v8.4.0\nerrorCode <number> The HTTP/2 error code specified in the GOAWAY frame.\nlastStreamID <number> The ID of the last stream the remote peer successfully processed (or 0 if no ID is specified).\nopaqueData <Buffer> If additional opaque data was included in the GOAWAY frame, a Buffer instance will be passed containing that data.\nThe 'goaway' event is emitted when a GOAWAY frame is received.\n\nThe Http2Session instance will be shut down automatically when the 'goaway' event is emitted.\n\nEvent: 'localSettings'#\nAdded in: v8.4.0\nsettings <HTTP/2 Settings Object> A copy of the SETTINGS frame received.\nThe 'localSettings' event is emitted when an acknowledgment SETTINGS frame has been received.\n\nWhen using http2session.settings() to submit new settings, the modified settings do not take effect until the 'localSettings' event is emitted.\n\nsession.settings({ enablePush: false });\n\nsession.on('localSettings', (settings) => {\n  /* Use the new settings */\n});\nEvent: 'ping'#\nAdded in: v10.12.0\npayload <Buffer> The PING frame 8-byte payload\nThe 'ping' event is emitted whenever a PING frame is received from the connected peer.\n\nEvent: 'remoteSettings'#\nAdded in: v8.4.0\nsettings <HTTP/2 Settings Object> A copy of the SETTINGS frame received.\nThe 'remoteSettings' event is emitted when a new SETTINGS frame is received from the connected peer.\n\nsession.on('remoteSettings', (settings) => {\n  /* Use the new settings */\n});\nEvent: 'stream'#\nAdded in: v8.4.0\nstream <Http2Stream> A reference to the stream\nheaders <HTTP/2 Headers Object> An object describing the headers\nflags <number> The associated numeric flags\nrawHeaders <Array> An array containing the raw header names followed by their respective values.\nThe 'stream' event is emitted when a new", "doc_id": "70122c97-d631-4a23-b35d-993012397db9", "embedding": null, "doc_hash": "9f9660b4492f92a0fdd1b5f56f66fb99a43fd60592722d5036cb7162da838ba1", "extra_info": null, "node_info": {"start": 1524733, "end": 1528445}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a677123b-8f63-41cd-aa39-623adbde10e2", "3": "e28e5658-7758-431e-be16-ade496157289"}}, "__type__": "1"}, "e28e5658-7758-431e-be16-ade496157289": {"__data__": {"text": "'ping' event is emitted whenever a PING frame is received from the connected peer.\n\nEvent: 'remoteSettings'#\nAdded in: v8.4.0\nsettings <HTTP/2 Settings Object> A copy of the SETTINGS frame received.\nThe 'remoteSettings' event is emitted when a new SETTINGS frame is received from the connected peer.\n\nsession.on('remoteSettings', (settings) => {\n  /* Use the new settings */\n});\nEvent: 'stream'#\nAdded in: v8.4.0\nstream <Http2Stream> A reference to the stream\nheaders <HTTP/2 Headers Object> An object describing the headers\nflags <number> The associated numeric flags\nrawHeaders <Array> An array containing the raw header names followed by their respective values.\nThe 'stream' event is emitted when a new Http2Stream is created.\n\nconst http2 = require('node:http2');\nsession.on('stream', (stream, headers, flags) => {\n  const method = headers[':method'];\n  const path = headers[':path'];\n  // ...\n  stream.respond({\n    ':status': 200,\n    'content-type': 'text/plain; charset=utf-8',\n  });\n  stream.write('hello ');\n  stream.end('world');\n});\nOn the server side, user code will typically not listen for this event directly, and would instead register a handler for the 'stream' event emitted by the net.Server or tls.Server instances returned by http2.createServer() and http2.createSecureServer(), respectively, as in the example below:\n\nconst http2 = require('node:http2');\n\n// Create an unencrypted HTTP/2 server\nconst server = http2.createServer();\n\nserver.on('stream', (stream, headers) => {\n  stream.respond({\n    'content-type': 'text/html; charset=utf-8',\n    ':status': 200,\n  });\n  stream.on('error', (error) => console.error(error));\n  stream.end('<h1>Hello World</h1>');\n});\n\nserver.listen(8000);\nEven though HTTP/2 streams and network sockets are not in a 1:1 correspondence, a network error will destroy each individual stream and must be handled on the stream level, as shown above.\n\nEvent: 'timeout'#\nAdded in: v8.4.0\nAfter the http2session.setTimeout() method is used to set the timeout period for this Http2Session, the 'timeout' event is emitted if there is no activity on the Http2Session after the configured number of milliseconds. Its listener does not expect any arguments.\n\nsession.setTimeout(2000);\nsession.on('timeout', () => { /* .. */ });\nhttp2session.alpnProtocol#\nAdded in: v9.4.0\n<string> | <undefined>\nValue will be undefined if the Http2Session is not yet connected to a socket, h2c if the Http2Session is not connected to a TLSSocket, or will return the value of the connected TLSSocket's own alpnProtocol property.\n\nhttp2session.close([callback])#\nAdded in: v9.4.0\ncallback <Function>\nGracefully closes the Http2Session, allowing any existing streams to complete on their own and preventing new Http2Stream instances from being created. Once closed, http2session.destroy() might be called if there are no open Http2Stream instances.\n\nIf specified, the callback function is registered as a handler for the 'close' event.\n\nhttp2session.closed#\nAdded in: v9.4.0\n<boolean>\nWill be true if this Http2Session instance has been closed, otherwise false.\n\nhttp2session.connecting#\nAdded in: v10.0.0\n<boolean>\nWill be true if this Http2Session instance is still connecting, will be set to false before emitting connect event and/or calling the http2.connect callback.\n\nhttp2session.destroy([error][, code])#\nAdded in: v8.4.0\nerror <Error> An Error object if the Http2Session is being destroyed due to an error.\ncode <number> The HTTP/2 error code to send in", "doc_id": "e28e5658-7758-431e-be16-ade496157289", "embedding": null, "doc_hash": "f90114b5e9573f48e37265a03968566cf073296805836d28723a8d99c7733db4", "extra_info": null, "node_info": {"start": 1528492, "end": 1531978}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "70122c97-d631-4a23-b35d-993012397db9", "3": "d7ab8b59-d00c-4387-8cc9-03aa56a47168"}}, "__type__": "1"}, "d7ab8b59-d00c-4387-8cc9-03aa56a47168": {"__data__": {"text": "might be called if there are no open Http2Stream instances.\n\nIf specified, the callback function is registered as a handler for the 'close' event.\n\nhttp2session.closed#\nAdded in: v9.4.0\n<boolean>\nWill be true if this Http2Session instance has been closed, otherwise false.\n\nhttp2session.connecting#\nAdded in: v10.0.0\n<boolean>\nWill be true if this Http2Session instance is still connecting, will be set to false before emitting connect event and/or calling the http2.connect callback.\n\nhttp2session.destroy([error][, code])#\nAdded in: v8.4.0\nerror <Error> An Error object if the Http2Session is being destroyed due to an error.\ncode <number> The HTTP/2 error code to send in the final GOAWAY frame. If unspecified, and error is not undefined, the default is INTERNAL_ERROR, otherwise defaults to NO_ERROR.\nImmediately terminates the Http2Session and the associated net.Socket or tls.TLSSocket.\n\nOnce destroyed, the Http2Session will emit the 'close' event. If error is not undefined, an 'error' event will be emitted immediately before the 'close' event.\n\nIf there are any remaining open Http2Streams associated with the Http2Session, those will also be destroyed.\n\nhttp2session.destroyed#\nAdded in: v8.4.0\n<boolean>\nWill be true if this Http2Session instance has been destroyed and must no longer be used, otherwise false.\n\nhttp2session.encrypted#\nAdded in: v9.4.0\n<boolean> | <undefined>\nValue is undefined if the Http2Session session socket has not yet been connected, true if the Http2Session is connected with a TLSSocket, and false if the Http2Session is connected to any other kind of socket or stream.\n\nhttp2session.goaway([code[, lastStreamID[, opaqueData]]])#\nAdded in: v9.4.0\ncode <number> An HTTP/2 error code\nlastStreamID <number> The numeric ID of the last processed Http2Stream\nopaqueData <Buffer> | <TypedArray> | <DataView> A TypedArray or DataView instance containing additional data to be carried within the GOAWAY frame.\nTransmits a GOAWAY frame to the connected peer without shutting down the Http2Session.\n\nhttp2session.localSettings#\nAdded in: v8.4.0\n<HTTP/2 Settings Object>\nA prototype-less object describing the current local settings of this Http2Session. The local settings are local to this Http2Session instance.\n\nhttp2session.originSet#\nAdded in: v9.4.0\n<string[]> | <undefined>\nIf the Http2Session is connected to a TLSSocket, the originSet property will return an Array of origins for which the Http2Session may be considered authoritative.\n\nThe originSet property is only available when using a secure TLS connection.\n\nhttp2session.pendingSettingsAck#\nAdded in: v8.4.0\n<boolean>\nIndicates whether the Http2Session is currently waiting for acknowledgment of a sent SETTINGS frame. Will be true after calling the http2session.settings() method. Will be false once all sent SETTINGS frames have been acknowledged.\n\nhttp2session.ping([payload, ]callback)#\nHistory\npayload <Buffer> | <TypedArray> | <DataView> Optional ping payload.\ncallback <Function>\nReturns: <boolean>\nSends a PING frame to the connected HTTP/2 peer. A callback function must be provided. The method will return true if the PING was sent, false otherwise.\n\nThe maximum number of outstanding (unacknowledged) pings is determined by the maxOutstandingPings configuration option. The default maximum is 10.\n\nIf provided, the payload must be a Buffer, TypedArray, or DataView containing 8 bytes of data that will be transmitted with the PING and returned with the ping acknowledgment.\n\nThe callback will be invoked with three arguments: an error argument that will be null if the PING was successfully acknowledged, a duration argument that reports the number of milliseconds elapsed since the ping was sent and the", "doc_id": "d7ab8b59-d00c-4387-8cc9-03aa56a47168", "embedding": null, "doc_hash": "da2d6745596393d086a5189b5a380bbd00d88aeef6ebd4c9890c9a8d2640aeb8", "extra_info": null, "node_info": {"start": 1532003, "end": 1535713}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e28e5658-7758-431e-be16-ade496157289", "3": "cfc2b28c-90b6-4eea-bc6b-251a3948aa1a"}}, "__type__": "1"}, "cfc2b28c-90b6-4eea-bc6b-251a3948aa1a": {"__data__": {"text": "<Buffer> | <TypedArray> | <DataView> Optional ping payload.\ncallback <Function>\nReturns: <boolean>\nSends a PING frame to the connected HTTP/2 peer. A callback function must be provided. The method will return true if the PING was sent, false otherwise.\n\nThe maximum number of outstanding (unacknowledged) pings is determined by the maxOutstandingPings configuration option. The default maximum is 10.\n\nIf provided, the payload must be a Buffer, TypedArray, or DataView containing 8 bytes of data that will be transmitted with the PING and returned with the ping acknowledgment.\n\nThe callback will be invoked with three arguments: an error argument that will be null if the PING was successfully acknowledged, a duration argument that reports the number of milliseconds elapsed since the ping was sent and the acknowledgment was received, and a Buffer containing the 8-byte PING payload.\n\nsession.ping(Buffer.from('abcdefgh'), (err, duration, payload) => {\n  if (!err) {\n    console.log(`Ping acknowledged in ${duration} milliseconds`);\n    console.log(`With payload '${payload.toString()}'`);\n  }\n});\nIf the payload argument is not specified, the default payload will be the 64-bit timestamp (little endian) marking the start of the PING duration.\n\nhttp2session.ref()#\nAdded in: v9.4.0\nCalls ref() on this Http2Session instance's underlying net.Socket.\n\nhttp2session.remoteSettings#\nAdded in: v8.4.0\n<HTTP/2 Settings Object>\nA prototype-less object describing the current remote settings of this Http2Session. The remote settings are set by the connected HTTP/2 peer.\n\nhttp2session.setLocalWindowSize(windowSize)#\nAdded in: v15.3.0, v14.18.0\nwindowSize <number>\nSets the local endpoint's window size. The windowSize is the total window size to set, not the delta.\n\nconst http2 = require('node:http2');\n\nconst server = http2.createServer();\nconst expectedWindowSize = 2 ** 20;\nserver.on('connect', (session) => {\n\n  // Set local window size to be 2 ** 20\n  session.setLocalWindowSize(expectedWindowSize);\n});\nhttp2session.setTimeout(msecs, callback)#\nHistory\nmsecs <number>\ncallback <Function>\nUsed to set a callback function that is called when there is no activity on the Http2Session after msecs milliseconds. The given callback is registered as a listener on the 'timeout' event.\n\nhttp2session.socket#\nAdded in: v8.4.0\n<net.Socket> | <tls.TLSSocket>\nReturns a Proxy object that acts as a net.Socket (or tls.TLSSocket) but limits available methods to ones safe to use with HTTP/2.\n\ndestroy, emit, end, pause, read, resume, and write will throw an error with code ERR_HTTP2_NO_SOCKET_MANIPULATION. See Http2Session and Sockets for more information.\n\nsetTimeout method will be called on this Http2Session.\n\nAll other interactions will be routed directly to the socket.\n\nhttp2session.state#\nAdded in: v8.4.0\nProvides miscellaneous information about the current state of the Http2Session.\n\n<Object>\neffectiveLocalWindowSize <number> The current local (receive) flow control window size for the Http2Session.\neffectiveRecvDataLength <number> The current number of bytes that have been received since the last flow control WINDOW_UPDATE.\nnextStreamID <number> The numeric identifier to be used the next time a new Http2Stream is created by this Http2Session.\nlocalWindowSize <number> The number of bytes that the remote peer can send without receiving a WINDOW_UPDATE.\nlastProcStreamID <number> The numeric id of the Http2Stream for which a HEADERS or DATA frame was most recently received.\nremoteWindowSize <number> The number of bytes that this Http2Session may send without receiving a WINDOW_UPDATE.\noutboundQueueSize <number> The number of frames currently within the", "doc_id": "cfc2b28c-90b6-4eea-bc6b-251a3948aa1a", "embedding": null, "doc_hash": "0b7c6353877edb2106697a82890f3fa80b6b14367af170db640f3d849ba419fc", "extra_info": null, "node_info": {"start": 1535613, "end": 1539281}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d7ab8b59-d00c-4387-8cc9-03aa56a47168", "3": "8df46f2e-0ca3-4c92-b4ef-a79a7bbf42a7"}}, "__type__": "1"}, "8df46f2e-0ca3-4c92-b4ef-a79a7bbf42a7": {"__data__": {"text": "the current state of the Http2Session.\n\n<Object>\neffectiveLocalWindowSize <number> The current local (receive) flow control window size for the Http2Session.\neffectiveRecvDataLength <number> The current number of bytes that have been received since the last flow control WINDOW_UPDATE.\nnextStreamID <number> The numeric identifier to be used the next time a new Http2Stream is created by this Http2Session.\nlocalWindowSize <number> The number of bytes that the remote peer can send without receiving a WINDOW_UPDATE.\nlastProcStreamID <number> The numeric id of the Http2Stream for which a HEADERS or DATA frame was most recently received.\nremoteWindowSize <number> The number of bytes that this Http2Session may send without receiving a WINDOW_UPDATE.\noutboundQueueSize <number> The number of frames currently within the outbound queue for this Http2Session.\ndeflateDynamicTableSize <number> The current size in bytes of the outbound header compression state table.\ninflateDynamicTableSize <number> The current size in bytes of the inbound header compression state table.\nAn object describing the current status of this Http2Session.\n\nhttp2session.settings([settings][, callback])#\nHistory\nsettings <HTTP/2 Settings Object>\ncallback <Function> Callback that is called once the session is connected or right away if the session is already connected.\nerr <Error> | <null>\nsettings <HTTP/2 Settings Object> The updated settings object.\nduration <integer>\nUpdates the current local settings for this Http2Session and sends a new SETTINGS frame to the connected HTTP/2 peer.\n\nOnce called, the http2session.pendingSettingsAck property will be true while the session is waiting for the remote peer to acknowledge the new settings.\n\nThe new settings will not become effective until the SETTINGS acknowledgment is received and the 'localSettings' event is emitted. It is possible to send multiple SETTINGS frames while acknowledgment is still pending.\n\nhttp2session.type#\nAdded in: v8.4.0\n<number>\nThe http2session.type will be equal to http2.constants.NGHTTP2_SESSION_SERVER if this Http2Session instance is a server, and http2.constants.NGHTTP2_SESSION_CLIENT if the instance is a client.\n\nhttp2session.unref()#\nAdded in: v9.4.0\nCalls unref() on this Http2Session instance's underlying net.Socket.\n\nClass: ServerHttp2Session#\nAdded in: v8.4.0\nExtends: <Http2Session>\nserverhttp2session.altsvc(alt, originOrStream)#\nAdded in: v9.4.0\nalt <string> A description of the alternative service configuration as defined by RFC 7838.\noriginOrStream <number> | <string> | <URL> | <Object> Either a URL string specifying the origin (or an Object with an origin property) or the numeric identifier of an active Http2Stream as given by the http2stream.id property.\nSubmits an ALTSVC frame (as defined by RFC 7838) to the connected client.\n\nconst http2 = require('node:http2');\n\nconst server = http2.createServer();\nserver.on('session', (session) => {\n  // Set altsvc for origin https://example.org:80\n  session.altsvc('h2=\":8000\"', 'https://example.org:80');\n});\n\nserver.on('stream', (stream) => {\n  // Set altsvc for a specific stream\n  stream.session.altsvc('h2=\":8000\"', stream.id);\n});\nSending an ALTSVC frame with a specific stream ID indicates that the alternate service is associated with the origin of the given Http2Stream.\n\nThe alt and origin string must contain only ASCII bytes and are strictly interpreted as a sequence of ASCII bytes. The special value 'clear' may be passed to clear any previously set alternative service for a given domain.\n\nWhen a string is passed for the originOrStream argument, it will be parsed as a URL and the origin will be derived. For instance, the origin for the HTTP URL 'https://example.org/foo/bar' is the ASCII string 'https://example.org'. An error will be thrown", "doc_id": "8df46f2e-0ca3-4c92-b4ef-a79a7bbf42a7", "embedding": null, "doc_hash": "31b3ce55bf3d7d3919122c9abb4804284983ab2c5e26415de11da7ee60c428d1", "extra_info": null, "node_info": {"start": 1539258, "end": 1543049}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cfc2b28c-90b6-4eea-bc6b-251a3948aa1a", "3": "11cb62ce-5bc2-4f5b-bc5d-70986aa84c28"}}, "__type__": "1"}, "11cb62ce-5bc2-4f5b-bc5d-70986aa84c28": {"__data__": {"text": "(stream) => {\n  // Set altsvc for a specific stream\n  stream.session.altsvc('h2=\":8000\"', stream.id);\n});\nSending an ALTSVC frame with a specific stream ID indicates that the alternate service is associated with the origin of the given Http2Stream.\n\nThe alt and origin string must contain only ASCII bytes and are strictly interpreted as a sequence of ASCII bytes. The special value 'clear' may be passed to clear any previously set alternative service for a given domain.\n\nWhen a string is passed for the originOrStream argument, it will be parsed as a URL and the origin will be derived. For instance, the origin for the HTTP URL 'https://example.org/foo/bar' is the ASCII string 'https://example.org'. An error will be thrown if either the given string cannot be parsed as a URL or if a valid origin cannot be derived.\n\nA URL object, or any object with an origin property, may be passed as originOrStream, in which case the value of the origin property will be used. The value of the origin property must be a properly serialized ASCII origin.\n\nSpecifying alternative services#\nThe format of the alt parameter is strictly defined by RFC 7838 as an ASCII string containing a comma-delimited list of \"alternative\" protocols associated with a specific host and port.\n\nFor example, the value 'h2=\"example.org:81\"' indicates that the HTTP/2 protocol is available on the host 'example.org' on TCP/IP port 81. The host and port must be contained within the quote (\") characters.\n\nMultiple alternatives may be specified, for instance: 'h2=\"example.org:81\", h2=\":82\"'.\n\nThe protocol identifier ('h2' in the examples) may be any valid ALPN Protocol ID.\n\nThe syntax of these values is not validated by the Node.js implementation and are passed through as provided by the user or received from the peer.\n\nserverhttp2session.origin(...origins)#\nAdded in: v10.12.0\norigins <string> | <URL> | <Object> One or more URL Strings passed as separate arguments.\nSubmits an ORIGIN frame (as defined by RFC 8336) to the connected client to advertise the set of origins for which the server is capable of providing authoritative responses.\n\nconst http2 = require('node:http2');\nconst options = getSecureOptionsSomehow();\nconst server = http2.createSecureServer(options);\nserver.on('stream', (stream) => {\n  stream.respond();\n  stream.end('ok');\n});\nserver.on('session', (session) => {\n  session.origin('https://example.com', 'https://example.org');\n});\nWhen a string is passed as an origin, it will be parsed as a URL and the origin will be derived. For instance, the origin for the HTTP URL 'https://example.org/foo/bar' is the ASCII string 'https://example.org'. An error will be thrown if either the given string cannot be parsed as a URL or if a valid origin cannot be derived.\n\nA URL object, or any object with an origin property, may be passed as an origin, in which case the value of the origin property will be used. The value of the origin property must be a properly serialized ASCII origin.\n\nAlternatively, the origins option may be used when creating a new HTTP/2 server using the http2.createSecureServer() method:\n\nconst http2 = require('node:http2');\nconst options = getSecureOptionsSomehow();\noptions.origins = ['https://example.com', 'https://example.org'];\nconst server = http2.createSecureServer(options);\nserver.on('stream', (stream) => {\n  stream.respond();\n  stream.end('ok');\n});\nClass: ClientHttp2Session#\nAdded in: v8.4.0\nExtends: <Http2Session>\nEvent: 'altsvc'#\nAdded in: v9.4.0\nalt <string>\norigin <string>\nstreamId <number>\nThe 'altsvc' event is emitted whenever an ALTSVC frame is received by the client. The event is emitted with the ALTSVC value,", "doc_id": "11cb62ce-5bc2-4f5b-bc5d-70986aa84c28", "embedding": null, "doc_hash": "661b33c919a2ef6b53c335fb900a733d467a490dbc0d3de064048fab63c63213", "extra_info": null, "node_info": {"start": 1543148, "end": 1546804}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8df46f2e-0ca3-4c92-b4ef-a79a7bbf42a7", "3": "47de11ce-96f0-4b35-919c-6e1280be7c90"}}, "__type__": "1"}, "47de11ce-96f0-4b35-919c-6e1280be7c90": {"__data__": {"text": "a new HTTP/2 server using the http2.createSecureServer() method:\n\nconst http2 = require('node:http2');\nconst options = getSecureOptionsSomehow();\noptions.origins = ['https://example.com', 'https://example.org'];\nconst server = http2.createSecureServer(options);\nserver.on('stream', (stream) => {\n  stream.respond();\n  stream.end('ok');\n});\nClass: ClientHttp2Session#\nAdded in: v8.4.0\nExtends: <Http2Session>\nEvent: 'altsvc'#\nAdded in: v9.4.0\nalt <string>\norigin <string>\nstreamId <number>\nThe 'altsvc' event is emitted whenever an ALTSVC frame is received by the client. The event is emitted with the ALTSVC value, origin, and stream ID. If no origin is provided in the ALTSVC frame, origin will be an empty string.\n\nconst http2 = require('node:http2');\nconst client = http2.connect('https://example.org');\n\nclient.on('altsvc', (alt, origin, streamId) => {\n  console.log(alt);\n  console.log(origin);\n  console.log(streamId);\n});\nEvent: 'origin'#\nAdded in: v10.12.0\norigins <string[]>\nThe 'origin' event is emitted whenever an ORIGIN frame is received by the client. The event is emitted with an array of origin strings. The http2session.originSet will be updated to include the received origins.\n\nconst http2 = require('node:http2');\nconst client = http2.connect('https://example.org');\n\nclient.on('origin', (origins) => {\n  for (let n = 0; n < origins.length; n++)\n    console.log(origins[n]);\n});\nThe 'origin' event is only emitted when using a secure TLS connection.\n\nclienthttp2session.request(headers[, options])#\nAdded in: v8.4.0\nheaders <HTTP/2 Headers Object>\n\noptions <Object>\n\nendStream <boolean> true if the Http2Stream writable side should be closed initially, such as when sending a GET request that should not expect a payload body.\nexclusive <boolean> When true and parent identifies a parent Stream, the created stream is made the sole direct dependency of the parent, with all other existing dependents made a dependent of the newly created stream. Default: false.\nparent <number> Specifies the numeric identifier of a stream the newly created stream is dependent on.\nweight <number> Specifies the relative dependency of a stream in relation to other streams with the same parent. The value is a number between 1 and 256 (inclusive).\nwaitForTrailers <boolean> When true, the Http2Stream will emit the 'wantTrailers' event after the final DATA frame has been sent.\nsignal <AbortSignal> An AbortSignal that may be used to abort an ongoing request.\nReturns: <ClientHttp2Stream>\n\nFor HTTP/2 Client Http2Session instances only, the http2session.request() creates and returns an Http2Stream instance that can be used to send an HTTP/2 request to the connected server.\n\nWhen a ClientHttp2Session is first created, the socket may not yet be connected. if clienthttp2session.request() is called during this time, the actual request will be deferred until the socket is ready to go. If the session is closed before the actual request be executed, an ERR_HTTP2_GOAWAY_SESSION is thrown.\n\nThis method is only available if http2session.type is equal to http2.constants.NGHTTP2_SESSION_CLIENT.\n\nconst http2 = require('node:http2');\nconst clientSession = http2.connect('https://localhost:1234');\nconst {\n  HTTP2_HEADER_PATH,\n  HTTP2_HEADER_STATUS,\n} = http2.constants;\n\nconst req = clientSession.request({ [HTTP2_HEADER_PATH]: '/' });\nreq.on('response', (headers) => {\n  console.log(headers[HTTP2_HEADER_STATUS]);\n  req.on('data', (chunk) => { /* .. */ });\n ", "doc_id": "47de11ce-96f0-4b35-919c-6e1280be7c90", "embedding": null, "doc_hash": "9220840c4aa5d54e2aeeda376660a3c12080f4bfc583711ef2ff1aecbf693337", "extra_info": null, "node_info": {"start": 1546864, "end": 1550324}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "11cb62ce-5bc2-4f5b-bc5d-70986aa84c28", "3": "0206d144-1e84-4663-8f01-71f2472b5a94"}}, "__type__": "1"}, "0206d144-1e84-4663-8f01-71f2472b5a94": {"__data__": {"text": "ready to go. If the session is closed before the actual request be executed, an ERR_HTTP2_GOAWAY_SESSION is thrown.\n\nThis method is only available if http2session.type is equal to http2.constants.NGHTTP2_SESSION_CLIENT.\n\nconst http2 = require('node:http2');\nconst clientSession = http2.connect('https://localhost:1234');\nconst {\n  HTTP2_HEADER_PATH,\n  HTTP2_HEADER_STATUS,\n} = http2.constants;\n\nconst req = clientSession.request({ [HTTP2_HEADER_PATH]: '/' });\nreq.on('response', (headers) => {\n  console.log(headers[HTTP2_HEADER_STATUS]);\n  req.on('data', (chunk) => { /* .. */ });\n  req.on('end', () => { /* .. */ });\n});\nWhen the options.waitForTrailers option is set, the 'wantTrailers' event is emitted immediately after queuing the last chunk of payload data to be sent. The http2stream.sendTrailers() method can then be called to send trailing headers to the peer.\n\nWhen options.waitForTrailers is set, the Http2Stream will not automatically close when the final DATA frame is transmitted. User code must call either http2stream.sendTrailers() or http2stream.close() to close the Http2Stream.\n\nWhen options.signal is set with an AbortSignal and then abort on the corresponding AbortController is called, the request will emit an 'error' event with an AbortError error.\n\nThe :method and :path pseudo-headers are not specified within headers, they respectively default to:\n\n:method = 'GET'\n:path = /\nClass: Http2Stream#\nAdded in: v8.4.0\nExtends: <stream.Duplex>\nEach instance of the Http2Stream class represents a bidirectional HTTP/2 communications stream over an Http2Session instance. Any single Http2Session may have up to 231-1 Http2Stream instances over its lifetime.\n\nUser code will not construct Http2Stream instances directly. Rather, these are created, managed, and provided to user code through the Http2Session instance. On the server, Http2Stream instances are created either in response to an incoming HTTP request (and handed off to user code via the 'stream' event), or in response to a call to the http2stream.pushStream() method. On the client, Http2Stream instances are created and returned when either the http2session.request() method is called, or in response to an incoming 'push' event.\n\nThe Http2Stream class is a base for the ServerHttp2Stream and ClientHttp2Stream classes, each of which is used specifically by either the Server or Client side, respectively.\n\nAll Http2Stream instances are Duplex streams. The Writable side of the Duplex is used to send data to the connected peer, while the Readable side is used to receive data sent by the connected peer.\n\nThe default text character encoding for an Http2Stream is UTF-8. When using an Http2Stream to send text, use the 'content-type' header to set the character encoding.\n\nstream.respond({\n  'content-type': 'text/html; charset=utf-8',\n  ':status': 200,\n});\nHttp2Stream Lifecycle#\nCreation#\nOn the server side, instances of ServerHttp2Stream are created either when:\n\nA new HTTP/2 HEADERS frame with a previously unused stream ID is received;\nThe http2stream.pushStream() method is called.\nOn the client side, instances of ClientHttp2Stream are created when the http2session.request() method is called.\n\nOn the client, the Http2Stream instance returned by http2session.request() may not be immediately ready for use if the parent Http2Session has not yet been fully established. In such cases, operations called on the Http2Stream will be buffered until the 'ready' event is emitted. User code should rarely, if ever, need to handle the 'ready' event directly. The ready status of an Http2Stream can be determined by checking the value of http2stream.id. If the value is undefined, the stream is not yet ready for use.\n\nDestruction#\nAll Http2Stream instances are", "doc_id": "0206d144-1e84-4663-8f01-71f2472b5a94", "embedding": null, "doc_hash": "a41f0df258ff0f77f638fdb4fa9856bf62ed985407169ae3a077e5759d8bd0fa", "extra_info": null, "node_info": {"start": 1550360, "end": 1554107}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "47de11ce-96f0-4b35-919c-6e1280be7c90", "3": "d972e862-9d6a-4d01-950c-491496dcc956"}}, "__type__": "1"}, "d972e862-9d6a-4d01-950c-491496dcc956": {"__data__": {"text": "new HTTP/2 HEADERS frame with a previously unused stream ID is received;\nThe http2stream.pushStream() method is called.\nOn the client side, instances of ClientHttp2Stream are created when the http2session.request() method is called.\n\nOn the client, the Http2Stream instance returned by http2session.request() may not be immediately ready for use if the parent Http2Session has not yet been fully established. In such cases, operations called on the Http2Stream will be buffered until the 'ready' event is emitted. User code should rarely, if ever, need to handle the 'ready' event directly. The ready status of an Http2Stream can be determined by checking the value of http2stream.id. If the value is undefined, the stream is not yet ready for use.\n\nDestruction#\nAll Http2Stream instances are destroyed either when:\n\nAn RST_STREAM frame for the stream is received by the connected peer, and (for client streams only) pending data has been read.\nThe http2stream.close() method is called, and (for client streams only) pending data has been read.\nThe http2stream.destroy() or http2session.destroy() methods are called.\nWhen an Http2Stream instance is destroyed, an attempt will be made to send an RST_STREAM frame to the connected peer.\n\nWhen the Http2Stream instance is destroyed, the 'close' event will be emitted. Because Http2Stream is an instance of stream.Duplex, the 'end' event will also be emitted if the stream data is currently flowing. The 'error' event may also be emitted if http2stream.destroy() was called with an Error passed as the first argument.\n\nAfter the Http2Stream has been destroyed, the http2stream.destroyed property will be true and the http2stream.rstCode property will specify the RST_STREAM error code. The Http2Stream instance is no longer usable once destroyed.\n\nEvent: 'aborted'#\nAdded in: v8.4.0\nThe 'aborted' event is emitted whenever a Http2Stream instance is abnormally aborted in mid-communication. Its listener does not expect any arguments.\n\nThe 'aborted' event will only be emitted if the Http2Stream writable side has not been ended.\n\nEvent: 'close'#\nAdded in: v8.4.0\nThe 'close' event is emitted when the Http2Stream is destroyed. Once this event is emitted, the Http2Stream instance is no longer usable.\n\nThe HTTP/2 error code used when closing the stream can be retrieved using the http2stream.rstCode property. If the code is any value other than NGHTTP2_NO_ERROR (0), an 'error' event will have also been emitted.\n\nEvent: 'error'#\nAdded in: v8.4.0\nerror <Error>\nThe 'error' event is emitted when an error occurs during the processing of an Http2Stream.\n\nEvent: 'frameError'#\nAdded in: v8.4.0\ntype <integer> The frame type.\ncode <integer> The error code.\nid <integer> The stream id (or 0 if the frame isn't associated with a stream).\nThe 'frameError' event is emitted when an error occurs while attempting to send a frame. When invoked, the handler function will receive an integer argument identifying the frame type, and an integer argument identifying the error code. The Http2Stream instance will be destroyed immediately after the 'frameError' event is emitted.\n\nEvent: 'ready'#\nAdded in: v8.4.0\nThe 'ready' event is emitted when the Http2Stream has been opened, has been assigned an id, and can be used. The listener does not expect any arguments.\n\nEvent: 'timeout'#\nAdded in: v8.4.0\nThe 'timeout' event is emitted after no activity is received for this Http2Stream within the number of milliseconds set using http2stream.setTimeout(). Its listener does not expect any arguments.\n\nEvent: 'trailers'#\nAdded in: v8.4.0\nheaders <HTTP/2 Headers Object> An object describing the headers\nflags <number> The associated numeric flags\nThe 'trailers' event is emitted when a block of headers associated with trailing header", "doc_id": "d972e862-9d6a-4d01-950c-491496dcc956", "embedding": null, "doc_hash": "2bd5c11173549d1095fa24ae5e9665ec9ae90fb7367f6053cc2603b4169e601f", "extra_info": null, "node_info": {"start": 1553953, "end": 1557717}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0206d144-1e84-4663-8f01-71f2472b5a94", "3": "01671eb0-811a-4126-b00b-f851d4635d4f"}}, "__type__": "1"}, "01671eb0-811a-4126-b00b-f851d4635d4f": {"__data__": {"text": "the 'frameError' event is emitted.\n\nEvent: 'ready'#\nAdded in: v8.4.0\nThe 'ready' event is emitted when the Http2Stream has been opened, has been assigned an id, and can be used. The listener does not expect any arguments.\n\nEvent: 'timeout'#\nAdded in: v8.4.0\nThe 'timeout' event is emitted after no activity is received for this Http2Stream within the number of milliseconds set using http2stream.setTimeout(). Its listener does not expect any arguments.\n\nEvent: 'trailers'#\nAdded in: v8.4.0\nheaders <HTTP/2 Headers Object> An object describing the headers\nflags <number> The associated numeric flags\nThe 'trailers' event is emitted when a block of headers associated with trailing header fields is received. The listener callback is passed the HTTP/2 Headers Object and flags associated with the headers.\n\nThis event might not be emitted if http2stream.end() is called before trailers are received and the incoming data is not being read or listened for.\n\nstream.on('trailers', (headers, flags) => {\n  console.log(headers);\n});\nEvent: 'wantTrailers'#\nAdded in: v10.0.0\nThe 'wantTrailers' event is emitted when the Http2Stream has queued the final DATA frame to be sent on a frame and the Http2Stream is ready to send trailing headers. When initiating a request or response, the waitForTrailers option must be set for this event to be emitted.\n\nhttp2stream.aborted#\nAdded in: v8.4.0\n<boolean>\nSet to true if the Http2Stream instance was aborted abnormally. When set, the 'aborted' event will have been emitted.\n\nhttp2stream.bufferSize#\nAdded in: v11.2.0, v10.16.0\n<number>\nThis property shows the number of characters currently buffered to be written. See net.Socket.bufferSize for details.\n\nhttp2stream.close(code[, callback])#\nHistory\ncode <number> Unsigned 32-bit integer identifying the error code. Default: http2.constants.NGHTTP2_NO_ERROR (0x00).\ncallback <Function> An optional function registered to listen for the 'close' event.\nCloses the Http2Stream instance by sending an RST_STREAM frame to the connected HTTP/2 peer.\n\nhttp2stream.closed#\nAdded in: v9.4.0\n<boolean>\nSet to true if the Http2Stream instance has been closed.\n\nhttp2stream.destroyed#\nAdded in: v8.4.0\n<boolean>\nSet to true if the Http2Stream instance has been destroyed and is no longer usable.\n\nhttp2stream.endAfterHeaders#\nAdded in: v10.11.0\n<boolean>\nSet to true if the END_STREAM flag was set in the request or response HEADERS frame received, indicating that no additional data should be received and the readable side of the Http2Stream will be closed.\n\nhttp2stream.id#\nAdded in: v8.4.0\n<number> | <undefined>\nThe numeric stream identifier of this Http2Stream instance. Set to undefined if the stream identifier has not yet been assigned.\n\nhttp2stream.pending#\nAdded in: v9.4.0\n<boolean>\nSet to true if the Http2Stream instance has not yet been assigned a numeric stream identifier.\n\nhttp2stream.priority(options)#\nAdded in: v8.4.0\noptions <Object>\nexclusive <boolean> When true and parent identifies a parent Stream, this stream is made the sole direct dependency of the parent, with all other existing dependents made a dependent of this stream. Default: false.\nparent <number> Specifies the numeric identifier of a stream this stream is dependent on.\nweight <number> Specifies the relative dependency of a stream in relation to other streams with the same parent. The value is a number between 1 and 256 (inclusive).\nsilent <boolean> When true, changes the priority locally without sending a PRIORITY frame to the connected peer.\nUpdates the priority for this Http2Stream", "doc_id": "01671eb0-811a-4126-b00b-f851d4635d4f", "embedding": null, "doc_hash": "d835149428c80232a6d433db81ff3a630e0dbb8cea1f23e1e53c129ad7bc88c9", "extra_info": null, "node_info": {"start": 1557800, "end": 1561355}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d972e862-9d6a-4d01-950c-491496dcc956", "3": "96d9e942-210e-4e96-83a0-d49f9f84b596"}}, "__type__": "1"}, "96d9e942-210e-4e96-83a0-d49f9f84b596": {"__data__": {"text": "to true if the Http2Stream instance has not yet been assigned a numeric stream identifier.\n\nhttp2stream.priority(options)#\nAdded in: v8.4.0\noptions <Object>\nexclusive <boolean> When true and parent identifies a parent Stream, this stream is made the sole direct dependency of the parent, with all other existing dependents made a dependent of this stream. Default: false.\nparent <number> Specifies the numeric identifier of a stream this stream is dependent on.\nweight <number> Specifies the relative dependency of a stream in relation to other streams with the same parent. The value is a number between 1 and 256 (inclusive).\nsilent <boolean> When true, changes the priority locally without sending a PRIORITY frame to the connected peer.\nUpdates the priority for this Http2Stream instance.\n\nhttp2stream.rstCode#\nAdded in: v8.4.0\n<number>\nSet to the RST_STREAM error code reported when the Http2Stream is destroyed after either receiving an RST_STREAM frame from the connected peer, calling http2stream.close(), or http2stream.destroy(). Will be undefined if the Http2Stream has not been closed.\n\nhttp2stream.sentHeaders#\nAdded in: v9.5.0\n<HTTP/2 Headers Object>\nAn object containing the outbound headers sent for this Http2Stream.\n\nhttp2stream.sentInfoHeaders#\nAdded in: v9.5.0\n<HTTP/2 Headers Object[]>\nAn array of objects containing the outbound informational (additional) headers sent for this Http2Stream.\n\nhttp2stream.sentTrailers#\nAdded in: v9.5.0\n<HTTP/2 Headers Object>\nAn object containing the outbound trailers sent for this HttpStream.\n\nhttp2stream.session#\nAdded in: v8.4.0\n<Http2Session>\nA reference to the Http2Session instance that owns this Http2Stream. The value will be undefined after the Http2Stream instance is destroyed.\n\nhttp2stream.setTimeout(msecs, callback)#\nHistory\nmsecs <number>\ncallback <Function>\nconst http2 = require('node:http2');\nconst client = http2.connect('http://example.org:8000');\nconst { NGHTTP2_CANCEL } = http2.constants;\nconst req = client.request({ ':path': '/' });\n\n// Cancel the stream if there's no activity after 5 seconds\nreq.setTimeout(5000, () => req.close(NGHTTP2_CANCEL));\nhttp2stream.state#\nAdded in: v8.4.0\nProvides miscellaneous information about the current state of the Http2Stream.\n\n<Object>\nlocalWindowSize <number> The number of bytes the connected peer may send for this Http2Stream without receiving a WINDOW_UPDATE.\nstate <number> A flag indicating the low-level current state of the Http2Stream as determined by nghttp2.\nlocalClose <number> 1 if this Http2Stream has been closed locally.\nremoteClose <number> 1 if this Http2Stream has been closed remotely.\nsumDependencyWeight <number> The sum weight of all Http2Stream instances that depend on this Http2Stream as specified using PRIORITY frames.\nweight <number> The priority weight of this Http2Stream.\nA current state of this Http2Stream.\n\nhttp2stream.sendTrailers(headers)#\nAdded in: v10.0.0\nheaders <HTTP/2 Headers Object>\nSends a trailing HEADERS frame to the connected HTTP/2 peer. This method will cause the Http2Stream to be immediately closed and must only be called after the 'wantTrailers' event has been emitted. When sending a request or sending a response, the options.waitForTrailers option must be set in order to keep the Http2Stream open after the final DATA frame so that trailers can be sent.\n\nconst http2 = require('node:http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  stream.respond(undefined, { waitForTrailers: true });\n  stream.on('wantTrailers', () => {\n    stream.sendTrailers({ xyz: 'abc' });\n  });\n  stream.end('Hello World');\n});\nThe", "doc_id": "96d9e942-210e-4e96-83a0-d49f9f84b596", "embedding": null, "doc_hash": "e2ed756d70096cd62a94f159460d0689986b8fb809a7a637a635091361c587e4", "extra_info": null, "node_info": {"start": 1561280, "end": 1564898}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "01671eb0-811a-4126-b00b-f851d4635d4f", "3": "7fa8802e-7ac4-48c0-b954-16ecc365b55a"}}, "__type__": "1"}, "7fa8802e-7ac4-48c0-b954-16ecc365b55a": {"__data__": {"text": "<HTTP/2 Headers Object>\nSends a trailing HEADERS frame to the connected HTTP/2 peer. This method will cause the Http2Stream to be immediately closed and must only be called after the 'wantTrailers' event has been emitted. When sending a request or sending a response, the options.waitForTrailers option must be set in order to keep the Http2Stream open after the final DATA frame so that trailers can be sent.\n\nconst http2 = require('node:http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  stream.respond(undefined, { waitForTrailers: true });\n  stream.on('wantTrailers', () => {\n    stream.sendTrailers({ xyz: 'abc' });\n  });\n  stream.end('Hello World');\n});\nThe HTTP/1 specification forbids trailers from containing HTTP/2 pseudo-header fields (e.g. ':method', ':path', etc).\n\nClass: ClientHttp2Stream#\nAdded in: v8.4.0\nExtends <Http2Stream>\nThe ClientHttp2Stream class is an extension of Http2Stream that is used exclusively on HTTP/2 Clients. Http2Stream instances on the client provide events such as 'response' and 'push' that are only relevant on the client.\n\nEvent: 'continue'#\nAdded in: v8.5.0\nEmitted when the server sends a 100 Continue status, usually because the request contained Expect: 100-continue. This is an instruction that the client should send the request body.\n\nEvent: 'headers'#\nAdded in: v8.4.0\nheaders <HTTP/2 Headers Object>\nflags <number>\nThe 'headers' event is emitted when an additional block of headers is received for a stream, such as when a block of 1xx informational headers is received. The listener callback is passed the HTTP/2 Headers Object and flags associated with the headers.\n\nstream.on('headers', (headers, flags) => {\n  console.log(headers);\n});\nEvent: 'push'#\nAdded in: v8.4.0\nheaders <HTTP/2 Headers Object>\nflags <number>\nThe 'push' event is emitted when response headers for a Server Push stream are received. The listener callback is passed the HTTP/2 Headers Object and flags associated with the headers.\n\nstream.on('push', (headers, flags) => {\n  console.log(headers);\n});\nEvent: 'response'#\nAdded in: v8.4.0\nheaders <HTTP/2 Headers Object>\nflags <number>\nThe 'response' event is emitted when a response HEADERS frame has been received for this stream from the connected HTTP/2 server. The listener is invoked with two arguments: an Object containing the received HTTP/2 Headers Object, and flags associated with the headers.\n\nconst http2 = require('node:http2');\nconst client = http2.connect('https://localhost');\nconst req = client.request({ ':path': '/' });\nreq.on('response', (headers, flags) => {\n  console.log(headers[':status']);\n});\nClass: ServerHttp2Stream#\nAdded in: v8.4.0\nExtends: <Http2Stream>\nThe ServerHttp2Stream class is an extension of Http2Stream that is used exclusively on HTTP/2 Servers. Http2Stream instances on the server provide additional methods such as http2stream.pushStream() and http2stream.respond() that are only relevant on the server.\n\nhttp2stream.additionalHeaders(headers)#\nAdded in: v8.4.0\nheaders <HTTP/2 Headers Object>\nSends an additional informational HEADERS frame to the connected HTTP/2 peer.\n\nhttp2stream.headersSent#\nAdded in: v8.4.0\n<boolean>\nTrue if headers were sent, false otherwise (read-only).\n\nhttp2stream.pushAllowed#\nAdded in: v8.4.0\n<boolean>\nRead-only property mapped to the SETTINGS_ENABLE_PUSH flag of the remote client's most recent SETTINGS frame. Will be true if the remote peer accepts push streams, false otherwise. Settings are the same for every Http2Stream in the same", "doc_id": "7fa8802e-7ac4-48c0-b954-16ecc365b55a", "embedding": null, "doc_hash": "0b37b0d82b5c320e8efc96471068e61e6ea45cd01da782e85ec4b0aa71113d85", "extra_info": null, "node_info": {"start": 1564973, "end": 1568494}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "96d9e942-210e-4e96-83a0-d49f9f84b596", "3": "fc69774c-284f-4be7-aac1-a3176778ba81"}}, "__type__": "1"}, "fc69774c-284f-4be7-aac1-a3176778ba81": {"__data__": {"text": "http2stream.pushStream() and http2stream.respond() that are only relevant on the server.\n\nhttp2stream.additionalHeaders(headers)#\nAdded in: v8.4.0\nheaders <HTTP/2 Headers Object>\nSends an additional informational HEADERS frame to the connected HTTP/2 peer.\n\nhttp2stream.headersSent#\nAdded in: v8.4.0\n<boolean>\nTrue if headers were sent, false otherwise (read-only).\n\nhttp2stream.pushAllowed#\nAdded in: v8.4.0\n<boolean>\nRead-only property mapped to the SETTINGS_ENABLE_PUSH flag of the remote client's most recent SETTINGS frame. Will be true if the remote peer accepts push streams, false otherwise. Settings are the same for every Http2Stream in the same Http2Session.\n\nhttp2stream.pushStream(headers[, options], callback)#\nHistory\nheaders <HTTP/2 Headers Object>\noptions <Object>\nexclusive <boolean> When true and parent identifies a parent Stream, the created stream is made the sole direct dependency of the parent, with all other existing dependents made a dependent of the newly created stream. Default: false.\nparent <number> Specifies the numeric identifier of a stream the newly created stream is dependent on.\ncallback <Function> Callback that is called once the push stream has been initiated.\nerr <Error>\npushStream <ServerHttp2Stream> The returned pushStream object.\nheaders <HTTP/2 Headers Object> Headers object the pushStream was initiated with.\nInitiates a push stream. The callback is invoked with the new Http2Stream instance created for the push stream passed as the second argument, or an Error passed as the first argument.\n\nconst http2 = require('node:http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  stream.respond({ ':status': 200 });\n  stream.pushStream({ ':path': '/' }, (err, pushStream, headers) => {\n    if (err) throw err;\n    pushStream.respond({ ':status': 200 });\n    pushStream.end('some pushed data');\n  });\n  stream.end('some data');\n});\nSetting the weight of a push stream is not allowed in the HEADERS frame. Pass a weight value to http2stream.priority with the silent option set to true to enable server-side bandwidth balancing between concurrent streams.\n\nCalling http2stream.pushStream() from within a pushed stream is not permitted and will throw an error.\n\nhttp2stream.respond([headers[, options]])#\nHistory\nheaders <HTTP/2 Headers Object>\noptions <Object>\nendStream <boolean> Set to true to indicate that the response will not include payload data.\nwaitForTrailers <boolean> When true, the Http2Stream will emit the 'wantTrailers' event after the final DATA frame has been sent.\nconst http2 = require('node:http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  stream.respond({ ':status': 200 });\n  stream.end('some data');\n});\nInitiates a response. When the options.waitForTrailers option is set, the 'wantTrailers' event will be emitted immediately after queuing the last chunk of payload data to be sent. The http2stream.sendTrailers() method can then be used to sent trailing header fields to the peer.\n\nWhen options.waitForTrailers is set, the Http2Stream will not automatically close when the final DATA frame is transmitted. User code must call either http2stream.sendTrailers() or http2stream.close() to close the Http2Stream.\n\nconst http2 = require('node:http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  stream.respond({ ':status': 200 }, { waitForTrailers: true });\n  stream.on('wantTrailers', () => {\n    stream.sendTrailers({ ABC: 'some value to send' });\n  });\n  stream.end('some data');\n});\nhttp2stream.respondWithFD(fd[, headers[, options]])#\nHistory\nfd <number> | <FileHandle> A readable file", "doc_id": "fc69774c-284f-4be7-aac1-a3176778ba81", "embedding": null, "doc_hash": "2169291535e785a2869c24bbabb0b6796e8a6924d511bb11543a26c7f34049fe", "extra_info": null, "node_info": {"start": 1568508, "end": 1572156}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7fa8802e-7ac4-48c0-b954-16ecc365b55a", "3": "49e27079-7615-414f-9104-01f850d0ea51"}}, "__type__": "1"}, "49e27079-7615-414f-9104-01f850d0ea51": {"__data__": {"text": "trailing header fields to the peer.\n\nWhen options.waitForTrailers is set, the Http2Stream will not automatically close when the final DATA frame is transmitted. User code must call either http2stream.sendTrailers() or http2stream.close() to close the Http2Stream.\n\nconst http2 = require('node:http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  stream.respond({ ':status': 200 }, { waitForTrailers: true });\n  stream.on('wantTrailers', () => {\n    stream.sendTrailers({ ABC: 'some value to send' });\n  });\n  stream.end('some data');\n});\nhttp2stream.respondWithFD(fd[, headers[, options]])#\nHistory\nfd <number> | <FileHandle> A readable file descriptor.\nheaders <HTTP/2 Headers Object>\noptions <Object>\nstatCheck <Function>\nwaitForTrailers <boolean> When true, the Http2Stream will emit the 'wantTrailers' event after the final DATA frame has been sent.\noffset <number> The offset position at which to begin reading.\nlength <number> The amount of data from the fd to send.\nInitiates a response whose data is read from the given file descriptor. No validation is performed on the given file descriptor. If an error occurs while attempting to read data using the file descriptor, the Http2Stream will be closed using an RST_STREAM frame using the standard INTERNAL_ERROR code.\n\nWhen used, the Http2Stream object's Duplex interface will be closed automatically.\n\nconst http2 = require('node:http2');\nconst fs = require('node:fs');\n\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  const fd = fs.openSync('/some/file', 'r');\n\n  const stat = fs.fstatSync(fd);\n  const headers = {\n    'content-length': stat.size,\n    'last-modified': stat.mtime.toUTCString(),\n    'content-type': 'text/plain; charset=utf-8',\n  };\n  stream.respondWithFD(fd, headers);\n  stream.on('close', () => fs.closeSync(fd));\n});\nThe optional options.statCheck function may be specified to give user code an opportunity to set additional content headers based on the fs.Stat details of the given fd. If the statCheck function is provided, the http2stream.respondWithFD() method will perform an fs.fstat() call to collect details on the provided file descriptor.\n\nThe offset and length options may be used to limit the response to a specific range subset. This can be used, for instance, to support HTTP Range requests.\n\nThe file descriptor or FileHandle is not closed when the stream is closed, so it will need to be closed manually once it is no longer needed. Using the same file descriptor concurrently for multiple streams is not supported and may result in data loss. Re-using a file descriptor after a stream has finished is supported.\n\nWhen the options.waitForTrailers option is set, the 'wantTrailers' event will be emitted immediately after queuing the last chunk of payload data to be sent. The http2stream.sendTrailers() method can then be used to sent trailing header fields to the peer.\n\nWhen options.waitForTrailers is set, the Http2Stream will not automatically close when the final DATA frame is transmitted. User code must call either http2stream.sendTrailers() or http2stream.close() to close the Http2Stream.\n\nconst http2 = require('node:http2');\nconst fs = require('node:fs');\n\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  const fd = fs.openSync('/some/file', 'r');\n\n  const stat = fs.fstatSync(fd);\n  const headers = {\n    'content-length': stat.size,\n    'last-modified': stat.mtime.toUTCString(),\n    'content-type': 'text/plain; charset=utf-8',\n  };\n  stream.respondWithFD(fd, headers, {", "doc_id": "49e27079-7615-414f-9104-01f850d0ea51", "embedding": null, "doc_hash": "e130fb53e095415b93838be9cf8a6b107e0b072f1fab73386e3df3e895c64b25", "extra_info": null, "node_info": {"start": 1572150, "end": 1575708}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fc69774c-284f-4be7-aac1-a3176778ba81", "3": "59ef6f78-4b45-41e9-978e-78b1e269d490"}}, "__type__": "1"}, "59ef6f78-4b45-41e9-978e-78b1e269d490": {"__data__": {"text": "set, the Http2Stream will not automatically close when the final DATA frame is transmitted. User code must call either http2stream.sendTrailers() or http2stream.close() to close the Http2Stream.\n\nconst http2 = require('node:http2');\nconst fs = require('node:fs');\n\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  const fd = fs.openSync('/some/file', 'r');\n\n  const stat = fs.fstatSync(fd);\n  const headers = {\n    'content-length': stat.size,\n    'last-modified': stat.mtime.toUTCString(),\n    'content-type': 'text/plain; charset=utf-8',\n  };\n  stream.respondWithFD(fd, headers, { waitForTrailers: true });\n  stream.on('wantTrailers', () => {\n    stream.sendTrailers({ ABC: 'some value to send' });\n  });\n\n  stream.on('close', () => fs.closeSync(fd));\n});\nhttp2stream.respondWithFile(path[, headers[, options]])#\nHistory\npath <string> | <Buffer> | <URL>\nheaders <HTTP/2 Headers Object>\noptions <Object>\nstatCheck <Function>\nonError <Function> Callback function invoked in the case of an error before send.\nwaitForTrailers <boolean> When true, the Http2Stream will emit the 'wantTrailers' event after the final DATA frame has been sent.\noffset <number> The offset position at which to begin reading.\nlength <number> The amount of data from the fd to send.\nSends a regular file as the response. The path must specify a regular file or an 'error' event will be emitted on the Http2Stream object.\n\nWhen used, the Http2Stream object's Duplex interface will be closed automatically.\n\nThe optional options.statCheck function may be specified to give user code an opportunity to set additional content headers based on the fs.Stat details of the given file:\n\nIf an error occurs while attempting to read the file data, the Http2Stream will be closed using an RST_STREAM frame using the standard INTERNAL_ERROR code. If the onError callback is defined, then it will be called. Otherwise the stream will be destroyed.\n\nExample using a file path:\n\nconst http2 = require('node:http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  function statCheck(stat, headers) {\n    headers['last-modified'] = stat.mtime.toUTCString();\n  }\n\n  function onError(err) {\n    // stream.respond() can throw if the stream has been destroyed by\n    // the other side.\n    try {\n      if (err.code === 'ENOENT') {\n        stream.respond({ ':status': 404 });\n      } else {\n        stream.respond({ ':status': 500 });\n      }\n    } catch (err) {\n      // Perform actual error handling.\n      console.error(err);\n    }\n    stream.end();\n  }\n\n  stream.respondWithFile('/some/file',\n                         { 'content-type': 'text/plain; charset=utf-8' },\n                         { statCheck, onError });\n});\nThe options.statCheck function may also be used to cancel the send operation by returning false. For instance, a conditional request may check the stat results to determine if the file has been modified to return an appropriate 304 response:\n\nconst http2 = require('node:http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  function statCheck(stat, headers) {\n    // Check the stat here...\n    stream.respond({ ':status': 304 });\n    return false; // Cancel the send operation\n", "doc_id": "59ef6f78-4b45-41e9-978e-78b1e269d490", "embedding": null, "doc_hash": "0f08fe0fac03141876bba08262f4bd30dd01c0d86659ffdab570dc2535bc4ff0", "extra_info": null, "node_info": {"start": 1575769, "end": 1579002}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "49e27079-7615-414f-9104-01f850d0ea51", "3": "c3c7389e-2546-4a05-9277-8d8419ebc6ab"}}, "__type__": "1"}, "c3c7389e-2546-4a05-9277-8d8419ebc6ab": {"__data__": {"text": "            { 'content-type': 'text/plain; charset=utf-8' },\n                         { statCheck, onError });\n});\nThe options.statCheck function may also be used to cancel the send operation by returning false. For instance, a conditional request may check the stat results to determine if the file has been modified to return an appropriate 304 response:\n\nconst http2 = require('node:http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  function statCheck(stat, headers) {\n    // Check the stat here...\n    stream.respond({ ':status': 304 });\n    return false; // Cancel the send operation\n  }\n  stream.respondWithFile('/some/file',\n                         { 'content-type': 'text/plain; charset=utf-8' },\n                         { statCheck });\n});\nThe content-length header field will be automatically set.\n\nThe offset and length options may be used to limit the response to a specific range subset. This can be used, for instance, to support HTTP Range requests.\n\nThe options.onError function may also be used to handle all the errors that could happen before the delivery of the file is initiated. The default behavior is to destroy the stream.\n\nWhen the options.waitForTrailers option is set, the 'wantTrailers' event will be emitted immediately after queuing the last chunk of payload data to be sent. The http2stream.sendTrailers() method can then be used to sent trailing header fields to the peer.\n\nWhen options.waitForTrailers is set, the Http2Stream will not automatically close when the final DATA frame is transmitted. User code must call either http2stream.sendTrailers() or http2stream.close() to close the Http2Stream.\n\nconst http2 = require('node:http2');\nconst server = http2.createServer();\nserver.on('stream', (stream) => {\n  stream.respondWithFile('/some/file',\n                         { 'content-type': 'text/plain; charset=utf-8' },\n                         { waitForTrailers: true });\n  stream.on('wantTrailers', () => {\n    stream.sendTrailers({ ABC: 'some value to send' });\n  });\n});\nClass: Http2Server#\nAdded in: v8.4.0\nExtends: <net.Server>\nInstances of Http2Server are created using the http2.createServer() function. The Http2Server class is not exported directly by the node:http2 module.\n\nEvent: 'checkContinue'#\nAdded in: v8.5.0\nrequest <http2.Http2ServerRequest>\nresponse <http2.Http2ServerResponse>\nIf a 'request' listener is registered or http2.createServer() is supplied a callback function, the 'checkContinue' event is emitted each time a request with an HTTP Expect: 100-continue is received. If this event is not listened for, the server will automatically respond with a status 100 Continue as appropriate.\n\nHandling this event involves calling response.writeContinue() if the client should continue to send the request body, or generating an appropriate HTTP response (e.g. 400 Bad Request) if the client should not continue to send the request body.\n\nWhen this event is emitted and handled, the 'request' event will not be emitted.\n\nEvent: 'connection'#\nAdded in: v8.4.0\nsocket <stream.Duplex>\nThis event is emitted when a new TCP stream is established. socket is typically an object of type net.Socket. Usually users will not want to access this event.\n\nThis event can also be explicitly emitted by users to inject connections into the HTTP server. In that case, any Duplex stream can be", "doc_id": "c3c7389e-2546-4a05-9277-8d8419ebc6ab", "embedding": null, "doc_hash": "3685ccda8cc8ec93f40ffe859658bf9172b21aae0d7eba45b807f2965f108f8e", "extra_info": null, "node_info": {"start": 1579034, "end": 1582401}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "59ef6f78-4b45-41e9-978e-78b1e269d490", "3": "08029900-53e1-4449-83f1-97c3d1b0cd7d"}}, "__type__": "1"}, "08029900-53e1-4449-83f1-97c3d1b0cd7d": {"__data__": {"text": "is received. If this event is not listened for, the server will automatically respond with a status 100 Continue as appropriate.\n\nHandling this event involves calling response.writeContinue() if the client should continue to send the request body, or generating an appropriate HTTP response (e.g. 400 Bad Request) if the client should not continue to send the request body.\n\nWhen this event is emitted and handled, the 'request' event will not be emitted.\n\nEvent: 'connection'#\nAdded in: v8.4.0\nsocket <stream.Duplex>\nThis event is emitted when a new TCP stream is established. socket is typically an object of type net.Socket. Usually users will not want to access this event.\n\nThis event can also be explicitly emitted by users to inject connections into the HTTP server. In that case, any Duplex stream can be passed.\n\nEvent: 'request'#\nAdded in: v8.4.0\nrequest <http2.Http2ServerRequest>\nresponse <http2.Http2ServerResponse>\nEmitted each time there is a request. There may be multiple requests per session. See the Compatibility API.\n\nEvent: 'session'#\nAdded in: v8.4.0\nsession <ServerHttp2Session>\nThe 'session' event is emitted when a new Http2Session is created by the Http2Server.\n\nEvent: 'sessionError'#\nAdded in: v8.4.0\nerror <Error>\nsession <ServerHttp2Session>\nThe 'sessionError' event is emitted when an 'error' event is emitted by an Http2Session object associated with the Http2Server.\n\nEvent: 'stream'#\nAdded in: v8.4.0\nstream <Http2Stream> A reference to the stream\nheaders <HTTP/2 Headers Object> An object describing the headers\nflags <number> The associated numeric flags\nrawHeaders <Array> An array containing the raw header names followed by their respective values.\nThe 'stream' event is emitted when a 'stream' event has been emitted by an Http2Session associated with the server.\n\nSee also Http2Session's 'stream' event.\n\nconst http2 = require('node:http2');\nconst {\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_PATH,\n  HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_CONTENT_TYPE,\n} = http2.constants;\n\nconst server = http2.createServer();\nserver.on('stream', (stream, headers, flags) => {\n  const method = headers[HTTP2_HEADER_METHOD];\n  const path = headers[HTTP2_HEADER_PATH];\n  // ...\n  stream.respond({\n    [HTTP2_HEADER_STATUS]: 200,\n    [HTTP2_HEADER_CONTENT_TYPE]: 'text/plain; charset=utf-8',\n  });\n  stream.write('hello ');\n  stream.end('world');\n});\nEvent: 'timeout'#\nHistory\nThe 'timeout' event is emitted when there is no activity on the Server for a given number of milliseconds set using http2server.setTimeout(). Default: 0 (no timeout)\n\nserver.close([callback])#\nAdded in: v8.4.0\ncallback <Function>\nStops the server from establishing new sessions. This does not prevent new request streams from being created due to the persistent nature of HTTP/2 sessions. To gracefully shut down the server, call http2session.close() on all active sessions.\n\nIf callback is provided, it is not invoked until all active sessions have been closed, although the server has already stopped allowing new sessions. See net.Server.close() for more details.\n\nserver.setTimeout([msecs][, callback])#\nHistory\nmsecs <number> Default: 0 (no timeout)\ncallback <Function>\nReturns: <Http2Server>\nUsed to set the timeout value for http2 server requests, and sets a callback function that is called when there is no activity on the Http2Server after msecs milliseconds.\n\nThe given callback is registered as a listener on the 'timeout' event.\n\nIn case if callback is not a function, a new ERR_INVALID_ARG_TYPE error will be", "doc_id": "08029900-53e1-4449-83f1-97c3d1b0cd7d", "embedding": null, "doc_hash": "7c68bbc3075921f943b1b4e1a23f6d9ccdeea99cfc4f5e9e51a00c35ae96a599", "extra_info": null, "node_info": {"start": 1582213, "end": 1585729}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c3c7389e-2546-4a05-9277-8d8419ebc6ab", "3": "117189aa-3c43-4a30-9c9a-faba68327fb4"}}, "__type__": "1"}, "117189aa-3c43-4a30-9c9a-faba68327fb4": {"__data__": {"text": "To gracefully shut down the server, call http2session.close() on all active sessions.\n\nIf callback is provided, it is not invoked until all active sessions have been closed, although the server has already stopped allowing new sessions. See net.Server.close() for more details.\n\nserver.setTimeout([msecs][, callback])#\nHistory\nmsecs <number> Default: 0 (no timeout)\ncallback <Function>\nReturns: <Http2Server>\nUsed to set the timeout value for http2 server requests, and sets a callback function that is called when there is no activity on the Http2Server after msecs milliseconds.\n\nThe given callback is registered as a listener on the 'timeout' event.\n\nIn case if callback is not a function, a new ERR_INVALID_ARG_TYPE error will be thrown.\n\nserver.timeout#\nHistory\n<number> Timeout in milliseconds. Default: 0 (no timeout)\nThe number of milliseconds of inactivity before a socket is presumed to have timed out.\n\nA value of 0 will disable the timeout behavior on incoming connections.\n\nThe socket timeout logic is set up on connection, so changing this value only affects new connections to the server, not any existing connections.\n\nserver.updateSettings([settings])#\nAdded in: v15.1.0, v14.17.0\nsettings <HTTP/2 Settings Object>\nUsed to update the server with the provided settings.\n\nThrows ERR_HTTP2_INVALID_SETTING_VALUE for invalid settings values.\n\nThrows ERR_INVALID_ARG_TYPE for invalid settings argument.\n\nClass: Http2SecureServer#\nAdded in: v8.4.0\nExtends: <tls.Server>\nInstances of Http2SecureServer are created using the http2.createSecureServer() function. The Http2SecureServer class is not exported directly by the node:http2 module.\n\nEvent: 'checkContinue'#\nAdded in: v8.5.0\nrequest <http2.Http2ServerRequest>\nresponse <http2.Http2ServerResponse>\nIf a 'request' listener is registered or http2.createSecureServer() is supplied a callback function, the 'checkContinue' event is emitted each time a request with an HTTP Expect: 100-continue is received. If this event is not listened for, the server will automatically respond with a status 100 Continue as appropriate.\n\nHandling this event involves calling response.writeContinue() if the client should continue to send the request body, or generating an appropriate HTTP response (e.g. 400 Bad Request) if the client should not continue to send the request body.\n\nWhen this event is emitted and handled, the 'request' event will not be emitted.\n\nEvent: 'connection'#\nAdded in: v8.4.0\nsocket <stream.Duplex>\nThis event is emitted when a new TCP stream is established, before the TLS handshake begins. socket is typically an object of type net.Socket. Usually users will not want to access this event.\n\nThis event can also be explicitly emitted by users to inject connections into the HTTP server. In that case, any Duplex stream can be passed.\n\nEvent: 'request'#\nAdded in: v8.4.0\nrequest <http2.Http2ServerRequest>\nresponse <http2.Http2ServerResponse>\nEmitted each time there is a request. There may be multiple requests per session. See the Compatibility API.\n\nEvent: 'session'#\nAdded in: v8.4.0\nsession <ServerHttp2Session>\nThe 'session' event is emitted when a new Http2Session is created by the Http2SecureServer.\n\nEvent: 'sessionError'#\nAdded in: v8.4.0\nerror <Error>\nsession <ServerHttp2Session>\nThe 'sessionError' event is emitted when an 'error' event is emitted by an Http2Session object associated with the Http2SecureServer.\n\nEvent: 'stream'#\nAdded in: v8.4.0\nstream <Http2Stream> A reference to the stream\nheaders <HTTP/2 Headers Object> An object describing the headers\nflags <number> The associated numeric flags\nrawHeaders <Array> An array containing the raw header names followed by their respective values.\nThe", "doc_id": "117189aa-3c43-4a30-9c9a-faba68327fb4", "embedding": null, "doc_hash": "2262bd470cd3ebde23cf5656157ad4a85498327e8fb98cbbdac580138c0ef3e6", "extra_info": null, "node_info": {"start": 1585785, "end": 1589478}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "08029900-53e1-4449-83f1-97c3d1b0cd7d", "3": "ab2a221d-dbc6-4f60-9ea3-1df5f6b16f0e"}}, "__type__": "1"}, "ab2a221d-dbc6-4f60-9ea3-1df5f6b16f0e": {"__data__": {"text": "the Compatibility API.\n\nEvent: 'session'#\nAdded in: v8.4.0\nsession <ServerHttp2Session>\nThe 'session' event is emitted when a new Http2Session is created by the Http2SecureServer.\n\nEvent: 'sessionError'#\nAdded in: v8.4.0\nerror <Error>\nsession <ServerHttp2Session>\nThe 'sessionError' event is emitted when an 'error' event is emitted by an Http2Session object associated with the Http2SecureServer.\n\nEvent: 'stream'#\nAdded in: v8.4.0\nstream <Http2Stream> A reference to the stream\nheaders <HTTP/2 Headers Object> An object describing the headers\nflags <number> The associated numeric flags\nrawHeaders <Array> An array containing the raw header names followed by their respective values.\nThe 'stream' event is emitted when a 'stream' event has been emitted by an Http2Session associated with the server.\n\nSee also Http2Session's 'stream' event.\n\nconst http2 = require('node:http2');\nconst {\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_PATH,\n  HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_CONTENT_TYPE,\n} = http2.constants;\n\nconst options = getOptionsSomehow();\n\nconst server = http2.createSecureServer(options);\nserver.on('stream', (stream, headers, flags) => {\n  const method = headers[HTTP2_HEADER_METHOD];\n  const path = headers[HTTP2_HEADER_PATH];\n  // ...\n  stream.respond({\n    [HTTP2_HEADER_STATUS]: 200,\n    [HTTP2_HEADER_CONTENT_TYPE]: 'text/plain; charset=utf-8',\n  });\n  stream.write('hello ');\n  stream.end('world');\n});\nEvent: 'timeout'#\nAdded in: v8.4.0\nThe 'timeout' event is emitted when there is no activity on the Server for a given number of milliseconds set using http2secureServer.setTimeout(). Default: 2 minutes.\n\nEvent: 'unknownProtocol'#\nAdded in: v8.4.0\nsocket <stream.Duplex>\nThe 'unknownProtocol' event is emitted when a connecting client fails to negotiate an allowed protocol (i.e. HTTP/2 or HTTP/1.1). The event handler receives the socket for handling. If no listener is registered for this event, the connection is terminated. A timeout may be specified using the 'unknownProtocolTimeout' option passed to http2.createSecureServer(). See the Compatibility API.\n\nserver.close([callback])#\nAdded in: v8.4.0\ncallback <Function>\nStops the server from establishing new sessions. This does not prevent new request streams from being created due to the persistent nature of HTTP/2 sessions. To gracefully shut down the server, call http2session.close() on all active sessions.\n\nIf callback is provided, it is not invoked until all active sessions have been closed, although the server has already stopped allowing new sessions. See tls.Server.close() for more details.\n\nserver.setTimeout([msecs][, callback])#\nHistory\nmsecs <number> Default: 120000 (2 minutes)\ncallback <Function>\nReturns: <Http2SecureServer>\nUsed to set the timeout value for http2 secure server requests, and sets a callback function that is called when there is no activity on the Http2SecureServer after msecs milliseconds.\n\nThe given callback is registered as a listener on the 'timeout' event.\n\nIn case if callback is not a function, a new ERR_INVALID_ARG_TYPE error will be thrown.\n\nserver.timeout#\nHistory\n<number> Timeout in milliseconds. Default: 0 (no timeout)\nThe number of milliseconds of inactivity before a socket is presumed to have timed out.\n\nA value of 0 will disable the timeout behavior on incoming connections.\n\nThe socket timeout logic is set up on connection, so changing this value only affects new connections to the server, not any existing connections.\n\nserver.updateSettings([settings])#\nAdded", "doc_id": "ab2a221d-dbc6-4f60-9ea3-1df5f6b16f0e", "embedding": null, "doc_hash": "6a5cbb6ab218aa81959aa556de00f8a7cecf50e7b7d811eb68d56b531723841d", "extra_info": null, "node_info": {"start": 1589501, "end": 1592999}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "117189aa-3c43-4a30-9c9a-faba68327fb4", "3": "ca3f7fe8-f057-4b26-b254-89681364a0d0"}}, "__type__": "1"}, "ca3f7fe8-f057-4b26-b254-89681364a0d0": {"__data__": {"text": "to set the timeout value for http2 secure server requests, and sets a callback function that is called when there is no activity on the Http2SecureServer after msecs milliseconds.\n\nThe given callback is registered as a listener on the 'timeout' event.\n\nIn case if callback is not a function, a new ERR_INVALID_ARG_TYPE error will be thrown.\n\nserver.timeout#\nHistory\n<number> Timeout in milliseconds. Default: 0 (no timeout)\nThe number of milliseconds of inactivity before a socket is presumed to have timed out.\n\nA value of 0 will disable the timeout behavior on incoming connections.\n\nThe socket timeout logic is set up on connection, so changing this value only affects new connections to the server, not any existing connections.\n\nserver.updateSettings([settings])#\nAdded in: v15.1.0, v14.17.0\nsettings <HTTP/2 Settings Object>\nUsed to update the server with the provided settings.\n\nThrows ERR_HTTP2_INVALID_SETTING_VALUE for invalid settings values.\n\nThrows ERR_INVALID_ARG_TYPE for invalid settings argument.\n\nhttp2.createServer([options][, onRequestHandler])#\nHistory\noptions <Object>\nmaxDeflateDynamicTableSize <number> Sets the maximum dynamic table size for deflating header fields. Default: 4Kib.\nmaxSettings <number> Sets the maximum number of settings entries per SETTINGS frame. The minimum value allowed is 1. Default: 32.\nmaxSessionMemory<number> Sets the maximum memory that the Http2Session is permitted to use. The value is expressed in terms of number of megabytes, e.g. 1 equal 1 megabyte. The minimum value allowed is 1. This is a credit based limit, existing Http2Streams may cause this limit to be exceeded, but new Http2Stream instances will be rejected while this limit is exceeded. The current number of Http2Stream sessions, the current memory use of the header compression tables, current data queued to be sent, and unacknowledged PING and SETTINGS frames are all counted towards the current limit. Default: 10.\nmaxHeaderListPairs <number> Sets the maximum number of header entries. This is similar to server.maxHeadersCount or request.maxHeadersCount in the node:http module. The minimum value is 4. Default: 128.\nmaxOutstandingPings <number> Sets the maximum number of outstanding, unacknowledged pings. Default: 10.\nmaxSendHeaderBlockLength <number> Sets the maximum allowed size for a serialized, compressed block of headers. Attempts to send headers that exceed this limit will result in a 'frameError' event being emitted and the stream being closed and destroyed. While this sets the maximum allowed size to the entire block of headers, nghttp2 (the internal http2 library) has a limit of 65536 for each decompressed key/value pair.\npaddingStrategy <number> The strategy used for determining the amount of padding to use for HEADERS and DATA frames. Default: http2.constants.PADDING_STRATEGY_NONE. Value may be one of:\nhttp2.constants.PADDING_STRATEGY_NONE: No padding is applied.\nhttp2.constants.PADDING_STRATEGY_MAX: The maximum amount of padding, determined by the internal implementation, is applied.\nhttp2.constants.PADDING_STRATEGY_ALIGNED: Attempts to apply enough padding to ensure that the total frame length, including the 9-byte header, is a multiple of 8. For each frame, there is a maximum allowed number of padding bytes that is determined by current flow control state and settings. If this maximum is less than the calculated amount needed to ensure alignment, the maximum is used and the total frame length is not necessarily aligned at 8 bytes.\npeerMaxConcurrentStreams <number> Sets the maximum number of concurrent streams for the remote peer as if a SETTINGS frame had been received. Will be overridden if the remote peer sets its own value for maxConcurrentStreams. Default: 100.\nmaxSessionInvalidFrames <integer> Sets the maximum number of invalid frames that will be tolerated before the session is closed. Default: 1000.\nmaxSessionRejectedStreams <integer> Sets the maximum number of rejected upon", "doc_id": "ca3f7fe8-f057-4b26-b254-89681364a0d0", "embedding": null, "doc_hash": "37fbff63e6d5865f15e555a64f5493522ba359068d8a4a1b1be7f2d5cc3120a3", "extra_info": null, "node_info": {"start": 1592946, "end": 1596904}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ab2a221d-dbc6-4f60-9ea3-1df5f6b16f0e", "3": "b821b5c0-7d90-4a3f-a42b-1507888c7a88"}}, "__type__": "1"}, "b821b5c0-7d90-4a3f-a42b-1507888c7a88": {"__data__": {"text": "Attempts to apply enough padding to ensure that the total frame length, including the 9-byte header, is a multiple of 8. For each frame, there is a maximum allowed number of padding bytes that is determined by current flow control state and settings. If this maximum is less than the calculated amount needed to ensure alignment, the maximum is used and the total frame length is not necessarily aligned at 8 bytes.\npeerMaxConcurrentStreams <number> Sets the maximum number of concurrent streams for the remote peer as if a SETTINGS frame had been received. Will be overridden if the remote peer sets its own value for maxConcurrentStreams. Default: 100.\nmaxSessionInvalidFrames <integer> Sets the maximum number of invalid frames that will be tolerated before the session is closed. Default: 1000.\nmaxSessionRejectedStreams <integer> Sets the maximum number of rejected upon creation streams that will be tolerated before the session is closed. Each rejection is associated with an NGHTTP2_ENHANCE_YOUR_CALM error that should tell the peer to not open any more streams, continuing to open streams is therefore regarded as a sign of a misbehaving peer. Default: 100.\nsettings <HTTP/2 Settings Object> The initial settings to send to the remote peer upon connection.\nHttp1IncomingMessage <http.IncomingMessage> Specifies the IncomingMessage class to used for HTTP/1 fallback. Useful for extending the original http.IncomingMessage. Default: http.IncomingMessage.\nHttp1ServerResponse <http.ServerResponse> Specifies the ServerResponse class to used for HTTP/1 fallback. Useful for extending the original http.ServerResponse. Default: http.ServerResponse.\nHttp2ServerRequest <http2.Http2ServerRequest> Specifies the Http2ServerRequest class to use. Useful for extending the original Http2ServerRequest. Default: Http2ServerRequest.\nHttp2ServerResponse <http2.Http2ServerResponse> Specifies the Http2ServerResponse class to use. Useful for extending the original Http2ServerResponse. Default: Http2ServerResponse.\nunknownProtocolTimeout <number> Specifies a timeout in milliseconds that a server should wait when an 'unknownProtocol' is emitted. If the socket has not been destroyed by that time the server will destroy it. Default: 10000.\n...: Any net.createServer() option can be provided.\nonRequestHandler <Function> See Compatibility API\nReturns: <Http2Server>\nReturns a net.Server instance that creates and manages Http2Session instances.\n\nSince there are no browsers known that support unencrypted HTTP/2, the use of http2.createSecureServer() is necessary when communicating with browser clients.\n\nconst http2 = require('node:http2');\n\n// Create an unencrypted HTTP/2 server.\n// Since there are no browsers known that support\n// unencrypted HTTP/2, the use of `http2.createSecureServer()`\n// is necessary when communicating with browser clients.\nconst server = http2.createServer();\n\nserver.on('stream', (stream, headers) => {\n  stream.respond({\n    'content-type': 'text/html; charset=utf-8',\n    ':status': 200,\n  });\n  stream.end('<h1>Hello World</h1>');\n});\n\nserver.listen(8000);\nhttp2.createSecureServer(options[, onRequestHandler])#\nHistory\noptions <Object>\nallowHTTP1 <boolean> Incoming client connections that do not support HTTP/2 will be downgraded to HTTP/1.x when set to true. See the 'unknownProtocol' event. See ALPN negotiation. Default: false.\nmaxDeflateDynamicTableSize <number> Sets the maximum dynamic table size for deflating header fields. Default: 4Kib.\nmaxSettings <number> Sets the maximum number of settings entries per SETTINGS frame. The minimum value allowed is 1. Default: 32.\nmaxSessionMemory<number> Sets the maximum memory that the Http2Session is permitted to use. The value is expressed in terms of number of megabytes, e.g. 1 equal 1 megabyte. The minimum value allowed is 1. This is a credit based limit, existing Http2Streams may cause this limit to be exceeded, but new Http2Stream instances will be rejected while this limit is exceeded. The current number of Http2Stream", "doc_id": "b821b5c0-7d90-4a3f-a42b-1507888c7a88", "embedding": null, "doc_hash": "92adf232fccb348b45a0ad3ab72b2597f1372d048ab0e4d50318269f75bc6c3d", "extra_info": null, "node_info": {"start": 1596829, "end": 1600842}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ca3f7fe8-f057-4b26-b254-89681364a0d0", "3": "2f4dc8dc-97cb-449f-88c1-4900620166c6"}}, "__type__": "1"}, "2f4dc8dc-97cb-449f-88c1-4900620166c6": {"__data__": {"text": "will be downgraded to HTTP/1.x when set to true. See the 'unknownProtocol' event. See ALPN negotiation. Default: false.\nmaxDeflateDynamicTableSize <number> Sets the maximum dynamic table size for deflating header fields. Default: 4Kib.\nmaxSettings <number> Sets the maximum number of settings entries per SETTINGS frame. The minimum value allowed is 1. Default: 32.\nmaxSessionMemory<number> Sets the maximum memory that the Http2Session is permitted to use. The value is expressed in terms of number of megabytes, e.g. 1 equal 1 megabyte. The minimum value allowed is 1. This is a credit based limit, existing Http2Streams may cause this limit to be exceeded, but new Http2Stream instances will be rejected while this limit is exceeded. The current number of Http2Stream sessions, the current memory use of the header compression tables, current data queued to be sent, and unacknowledged PING and SETTINGS frames are all counted towards the current limit. Default: 10.\nmaxHeaderListPairs <number> Sets the maximum number of header entries. This is similar to server.maxHeadersCount or request.maxHeadersCount in the node:http module. The minimum value is 4. Default: 128.\nmaxOutstandingPings <number> Sets the maximum number of outstanding, unacknowledged pings. Default: 10.\nmaxSendHeaderBlockLength <number> Sets the maximum allowed size for a serialized, compressed block of headers. Attempts to send headers that exceed this limit will result in a 'frameError' event being emitted and the stream being closed and destroyed.\npaddingStrategy <number> Strategy used for determining the amount of padding to use for HEADERS and DATA frames. Default: http2.constants.PADDING_STRATEGY_NONE. Value may be one of:\nhttp2.constants.PADDING_STRATEGY_NONE: No padding is applied.\nhttp2.constants.PADDING_STRATEGY_MAX: The maximum amount of padding, determined by the internal implementation, is applied.\nhttp2.constants.PADDING_STRATEGY_ALIGNED: Attempts to apply enough padding to ensure that the total frame length, including the 9-byte header, is a multiple of 8. For each frame, there is a maximum allowed number of padding bytes that is determined by current flow control state and settings. If this maximum is less than the calculated amount needed to ensure alignment, the maximum is used and the total frame length is not necessarily aligned at 8 bytes.\npeerMaxConcurrentStreams <number> Sets the maximum number of concurrent streams for the remote peer as if a SETTINGS frame had been received. Will be overridden if the remote peer sets its own value for maxConcurrentStreams. Default: 100.\nmaxSessionInvalidFrames <integer> Sets the maximum number of invalid frames that will be tolerated before the session is closed. Default: 1000.\nmaxSessionRejectedStreams <integer> Sets the maximum number of rejected upon creation streams that will be tolerated before the session is closed. Each rejection is associated with an NGHTTP2_ENHANCE_YOUR_CALM error that should tell the peer to not open any more streams, continuing to open streams is therefore regarded as a sign of a misbehaving peer. Default: 100.\nsettings <HTTP/2 Settings Object> The initial settings to send to the remote peer upon connection.\n...: Any tls.createServer() options can be provided. For servers, the identity options (pfx or key/cert) are usually required.\norigins <string[]> An array of origin strings to send within an ORIGIN frame immediately following creation of a new server Http2Session.\nunknownProtocolTimeout <number> Specifies a timeout in milliseconds that a server should wait when an 'unknownProtocol' event is emitted. If the socket has not been destroyed by that time the server will destroy it. Default: 10000.\nonRequestHandler <Function> See Compatibility API\nReturns: <Http2SecureServer>\nReturns a tls.Server instance that creates and manages Http2Session instances.\n\nconst http2 = require('node:http2');\nconst fs = require('node:fs');\n\nconst options = {\n  key: fs.readFileSync('server-key.pem'),\n  cert:", "doc_id": "2f4dc8dc-97cb-449f-88c1-4900620166c6", "embedding": null, "doc_hash": "dd2893b6dbe37aa96359c920fdf0fe557e3315df56044cae1c4f8da127f5b49a", "extra_info": null, "node_info": {"start": 1600928, "end": 1604925}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b821b5c0-7d90-4a3f-a42b-1507888c7a88", "3": "017da089-3d49-4bd3-bc3b-787b4ce0f446"}}, "__type__": "1"}, "017da089-3d49-4bd3-bc3b-787b4ce0f446": {"__data__": {"text": "be provided. For servers, the identity options (pfx or key/cert) are usually required.\norigins <string[]> An array of origin strings to send within an ORIGIN frame immediately following creation of a new server Http2Session.\nunknownProtocolTimeout <number> Specifies a timeout in milliseconds that a server should wait when an 'unknownProtocol' event is emitted. If the socket has not been destroyed by that time the server will destroy it. Default: 10000.\nonRequestHandler <Function> See Compatibility API\nReturns: <Http2SecureServer>\nReturns a tls.Server instance that creates and manages Http2Session instances.\n\nconst http2 = require('node:http2');\nconst fs = require('node:fs');\n\nconst options = {\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem'),\n};\n\n// Create a secure HTTP/2 server\nconst server = http2.createSecureServer(options);\n\nserver.on('stream', (stream, headers) => {\n  stream.respond({\n    'content-type': 'text/html; charset=utf-8',\n    ':status': 200,\n  });\n  stream.end('<h1>Hello World</h1>');\n});\n\nserver.listen(8443);\nhttp2.connect(authority[, options][, listener])#\nHistory\nauthority <string> | <URL> The remote HTTP/2 server to connect to. This must be in the form of a minimal, valid URL with the http:// or https:// prefix, host name, and IP port (if a non-default port is used). Userinfo (user ID and password), path, querystring, and fragment details in the URL will be ignored.\noptions <Object>\nmaxDeflateDynamicTableSize <number> Sets the maximum dynamic table size for deflating header fields. Default: 4Kib.\nmaxSettings <number> Sets the maximum number of settings entries per SETTINGS frame. The minimum value allowed is 1. Default: 32.\nmaxSessionMemory<number> Sets the maximum memory that the Http2Session is permitted to use. The value is expressed in terms of number of megabytes, e.g. 1 equal 1 megabyte. The minimum value allowed is 1. This is a credit based limit, existing Http2Streams may cause this limit to be exceeded, but new Http2Stream instances will be rejected while this limit is exceeded. The current number of Http2Stream sessions, the current memory use of the header compression tables, current data queued to be sent, and unacknowledged PING and SETTINGS frames are all counted towards the current limit. Default: 10.\nmaxHeaderListPairs <number> Sets the maximum number of header entries. This is similar to server.maxHeadersCount or request.maxHeadersCount in the node:http module. The minimum value is 1. Default: 128.\nmaxOutstandingPings <number> Sets the maximum number of outstanding, unacknowledged pings. Default: 10.\nmaxReservedRemoteStreams <number> Sets the maximum number of reserved push streams the client will accept at any given time. Once the current number of currently reserved push streams exceeds reaches this limit, new push streams sent by the server will be automatically rejected. The minimum allowed value is 0. The maximum allowed value is 232-1. A negative value sets this option to the maximum allowed value. Default: 200.\nmaxSendHeaderBlockLength <number> Sets the maximum allowed size for a serialized, compressed block of headers. Attempts to send headers that exceed this limit will result in a 'frameError' event being emitted and the stream being closed and destroyed.\npaddingStrategy <number> Strategy used for determining the amount of padding to use for HEADERS and DATA frames. Default: http2.constants.PADDING_STRATEGY_NONE. Value may be one of:\nhttp2.constants.PADDING_STRATEGY_NONE: No padding is applied.\nhttp2.constants.PADDING_STRATEGY_MAX: The maximum amount of padding, determined by the internal implementation, is applied.\nhttp2.constants.PADDING_STRATEGY_ALIGNED: Attempts to apply enough padding to ensure that the total frame length, including", "doc_id": "017da089-3d49-4bd3-bc3b-787b4ce0f446", "embedding": null, "doc_hash": "fa9f38454af9ccec4b521f339eca05f3ec8053317cdf46b3ecd74e1df40c0102", "extra_info": null, "node_info": {"start": 1604925, "end": 1608712}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2f4dc8dc-97cb-449f-88c1-4900620166c6", "3": "81ace837-80b9-4ec7-9327-b6953bd20f8f"}}, "__type__": "1"}, "81ace837-80b9-4ec7-9327-b6953bd20f8f": {"__data__": {"text": "<number> Sets the maximum allowed size for a serialized, compressed block of headers. Attempts to send headers that exceed this limit will result in a 'frameError' event being emitted and the stream being closed and destroyed.\npaddingStrategy <number> Strategy used for determining the amount of padding to use for HEADERS and DATA frames. Default: http2.constants.PADDING_STRATEGY_NONE. Value may be one of:\nhttp2.constants.PADDING_STRATEGY_NONE: No padding is applied.\nhttp2.constants.PADDING_STRATEGY_MAX: The maximum amount of padding, determined by the internal implementation, is applied.\nhttp2.constants.PADDING_STRATEGY_ALIGNED: Attempts to apply enough padding to ensure that the total frame length, including the 9-byte header, is a multiple of 8. For each frame, there is a maximum allowed number of padding bytes that is determined by current flow control state and settings. If this maximum is less than the calculated amount needed to ensure alignment, the maximum is used and the total frame length is not necessarily aligned at 8 bytes.\npeerMaxConcurrentStreams <number> Sets the maximum number of concurrent streams for the remote peer as if a SETTINGS frame had been received. Will be overridden if the remote peer sets its own value for maxConcurrentStreams. Default: 100.\nprotocol <string> The protocol to connect with, if not set in the authority. Value may be either 'http:' or 'https:'. Default: 'https:'\nsettings <HTTP/2 Settings Object> The initial settings to send to the remote peer upon connection.\ncreateConnection <Function> An optional callback that receives the URL instance passed to connect and the options object, and returns any Duplex stream that is to be used as the connection for this session.\n...: Any net.connect() or tls.connect() options can be provided.\nunknownProtocolTimeout <number> Specifies a timeout in milliseconds that a server should wait when an 'unknownProtocol' event is emitted. If the socket has not been destroyed by that time the server will destroy it. Default: 10000.\nlistener <Function> Will be registered as a one-time listener of the 'connect' event.\nReturns: <ClientHttp2Session>\nReturns a ClientHttp2Session instance.\n\nconst http2 = require('node:http2');\nconst client = http2.connect('https://localhost:1234');\n\n/* Use the client */\n\nclient.close();\nhttp2.constants#\nAdded in: v8.4.0\nError codes for RST_STREAM and GOAWAY#\nValue\tName\tConstant\n0x00\tNo Error\thttp2.constants.NGHTTP2_NO_ERROR\n0x01\tProtocol Error\thttp2.constants.NGHTTP2_PROTOCOL_ERROR\n0x02\tInternal Error\thttp2.constants.NGHTTP2_INTERNAL_ERROR\n0x03\tFlow Control Error\thttp2.constants.NGHTTP2_FLOW_CONTROL_ERROR\n0x04\tSettings Timeout\thttp2.constants.NGHTTP2_SETTINGS_TIMEOUT\n0x05\tStream Closed\thttp2.constants.NGHTTP2_STREAM_CLOSED\n0x06\tFrame Size Error\thttp2.constants.NGHTTP2_FRAME_SIZE_ERROR\n0x07\tRefused Stream\thttp2.constants.NGHTTP2_REFUSED_STREAM\n0x08\tCancel\thttp2.constants.NGHTTP2_CANCEL\n0x09\tCompression Error\thttp2.constants.NGHTTP2_COMPRESSION_ERROR\n0x0a\tConnect Error\thttp2.constants.NGHTTP2_CONNECT_ERROR\n0x0b\tEnhance Your Calm\thttp2.constants.NGHTTP2_ENHANCE_YOUR_CALM\n0x0c\tInadequate Security\thttp2.constants.NGHTTP2_INADEQUATE_SECURITY\n0x0d\tHTTP/1.1 Required\thttp2.constants.NGHTTP2_HTTP_1_1_REQUIRED\nThe 'timeout' event is emitted when there is no activity on the Server for a given number of milliseconds set using", "doc_id": "81ace837-80b9-4ec7-9327-b6953bd20f8f", "embedding": null, "doc_hash": "dfc54ee142f389f12698864b24ec80204ea464b11dd89f301d500e8dc378fcf8", "extra_info": null, "node_info": {"start": 1608740, "end": 1612105}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "017da089-3d49-4bd3-bc3b-787b4ce0f446", "3": "12760dc4-8d38-4d78-a87b-cbfd06155ea2"}}, "__type__": "1"}, "12760dc4-8d38-4d78-a87b-cbfd06155ea2": {"__data__": {"text": "Error\thttp2.constants.NGHTTP2_COMPRESSION_ERROR\n0x0a\tConnect Error\thttp2.constants.NGHTTP2_CONNECT_ERROR\n0x0b\tEnhance Your Calm\thttp2.constants.NGHTTP2_ENHANCE_YOUR_CALM\n0x0c\tInadequate Security\thttp2.constants.NGHTTP2_INADEQUATE_SECURITY\n0x0d\tHTTP/1.1 Required\thttp2.constants.NGHTTP2_HTTP_1_1_REQUIRED\nThe 'timeout' event is emitted when there is no activity on the Server for a given number of milliseconds set using http2server.setTimeout().\n\nhttp2.getDefaultSettings()#\nAdded in: v8.4.0\nReturns: <HTTP/2 Settings Object>\nReturns an object containing the default settings for an Http2Session instance. This method returns a new object instance every time it is called so instances returned may be safely modified for use.\n\nhttp2.getPackedSettings([settings])#\nAdded in: v8.4.0\nsettings <HTTP/2 Settings Object>\nReturns: <Buffer>\nReturns a Buffer instance containing serialized representation of the given HTTP/2 settings as specified in the HTTP/2 specification. This is intended for use with the HTTP2-Settings header field.\n\nconst http2 = require('node:http2');\n\nconst packed = http2.getPackedSettings({ enablePush: false });\n\nconsole.log(packed.toString('base64'));\n// Prints: AAIAAAAA\nhttp2.getUnpackedSettings(buf)#\nAdded in: v8.4.0\nbuf <Buffer> | <TypedArray> The packed settings.\nReturns: <HTTP/2 Settings Object>\nReturns a HTTP/2 Settings Object containing the deserialized settings from the given Buffer as generated by http2.getPackedSettings().\n\nhttp2.sensitiveHeaders#\nAdded in: v15.0.0, v14.18.0\n<symbol>\nThis symbol can be set as a property on the HTTP/2 headers object with an array value in order to provide a list of headers considered sensitive. See Sensitive headers for more details.\n\nHeaders object#\nHeaders are represented as own-properties on JavaScript objects. The property keys will be serialized to lower-case. Property values should be strings (if they are not they will be coerced to strings) or an Array of strings (in order to send more than one value per header field).\n\nconst headers = {\n  ':status': '200',\n  'content-type': 'text-plain',\n  'ABC': ['has', 'more', 'than', 'one', 'value'],\n};\n\nstream.respond(headers);\nHeader objects passed to callback functions will have a null prototype. This means that normal JavaScript object methods such as Object.prototype.toString() and Object.prototype.hasOwnProperty() will not work.\n\nFor incoming headers:\n\nThe :status header is converted to number.\nDuplicates of :status, :method, :authority, :scheme, :path, :protocol, age, authorization, access-control-allow-credentials, access-control-max-age, access-control-request-method, content-encoding, content-language, content-length, content-location, content-md5, content-range, content-type, date, dnt, etag, expires, from, host, if-match, if-modified-since, if-none-match, if-range, if-unmodified-since, last-modified, location, max-forwards, proxy-authorization, range, referer,retry-after, tk, upgrade-insecure-requests, user-agent or x-content-type-options are discarded.\nset-cookie is always an array. Duplicates are added to the array.\nFor duplicate cookie headers, the values are joined together with '; '.\nFor all other headers, the values are joined together with ', '.\nconst http2 = require('node:http2');\nconst server = http2.createServer();\nserver.on('stream', (stream, headers) => {\n  console.log(headers[':path']);\n  console.log(headers.ABC);\n});\nSensitive headers#\nHTTP2 headers can be marked as sensitive, which means that the", "doc_id": "12760dc4-8d38-4d78-a87b-cbfd06155ea2", "embedding": null, "doc_hash": "7079b334ba096405264ec40371fa5c92a104807c53dfa025b4055132ccc37432", "extra_info": null, "node_info": {"start": 1612343, "end": 1615818}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "81ace837-80b9-4ec7-9327-b6953bd20f8f", "3": "c8c494bc-4d50-4097-b412-1a846bd4bfbb"}}, "__type__": "1"}, "c8c494bc-4d50-4097-b412-1a846bd4bfbb": {"__data__": {"text": "if-none-match, if-range, if-unmodified-since, last-modified, location, max-forwards, proxy-authorization, range, referer,retry-after, tk, upgrade-insecure-requests, user-agent or x-content-type-options are discarded.\nset-cookie is always an array. Duplicates are added to the array.\nFor duplicate cookie headers, the values are joined together with '; '.\nFor all other headers, the values are joined together with ', '.\nconst http2 = require('node:http2');\nconst server = http2.createServer();\nserver.on('stream', (stream, headers) => {\n  console.log(headers[':path']);\n  console.log(headers.ABC);\n});\nSensitive headers#\nHTTP2 headers can be marked as sensitive, which means that the HTTP/2 header compression algorithm will never index them. This can make sense for header values with low entropy and that may be considered valuable to an attacker, for example Cookie or Authorization. To achieve this, add the header name to the [http2.sensitiveHeaders] property as an array:\n\nconst headers = {\n  ':status': '200',\n  'content-type': 'text-plain',\n  'cookie': 'some-cookie',\n  'other-sensitive-header': 'very secret data',\n  [http2.sensitiveHeaders]: ['cookie', 'other-sensitive-header'],\n};\n\nstream.respond(headers);\nFor some headers, such as Authorization and short Cookie headers, this flag is set automatically.\n\nThis property is also set for received headers. It will contain the names of all headers marked as sensitive, including ones marked that way automatically.\n\nSettings object#\nHistory\nThe http2.getDefaultSettings(), http2.getPackedSettings(), http2.createServer(), http2.createSecureServer(), http2session.settings(), http2session.localSettings, and http2session.remoteSettings APIs either return or receive as input an object that defines configuration settings for an Http2Session object. These objects are ordinary JavaScript objects containing the following properties.\n\nheaderTableSize <number> Specifies the maximum number of bytes used for header compression. The minimum allowed value is 0. The maximum allowed value is 232-1. Default: 4096.\nenablePush <boolean> Specifies true if HTTP/2 Push Streams are to be permitted on the Http2Session instances. Default: true.\ninitialWindowSize <number> Specifies the sender's initial window size in bytes for stream-level flow control. The minimum allowed value is 0. The maximum allowed value is 232-1. Default: 65535.\nmaxFrameSize <number> Specifies the size in bytes of the largest frame payload. The minimum allowed value is 16,384. The maximum allowed value is 224-1. Default: 16384.\nmaxConcurrentStreams <number> Specifies the maximum number of concurrent streams permitted on an Http2Session. There is no default value which implies, at least theoretically, 232-1 streams may be open concurrently at any given time in an Http2Session. The minimum value is 0. The maximum allowed value is 232-1. Default: 4294967295.\nmaxHeaderListSize <number> Specifies the maximum size (uncompressed octets) of header list that will be accepted. The minimum allowed value is 0. The maximum allowed value is 232-1. Default: 65535.\nmaxHeaderSize <number> Alias for maxHeaderListSize.\nenableConnectProtocol<boolean> Specifies true if the \"Extended Connect Protocol\" defined by RFC 8441 is to be enabled. This setting is only meaningful if sent by the server. Once the enableConnectProtocol setting has been enabled for a given Http2Session, it cannot be disabled. Default: false.\nAll additional properties on the settings object are ignored.\n\nError handling#\nThere are several types of error conditions that may arise when using the node:http2 module:\n\nValidation errors occur when an incorrect argument, option, or setting value is passed in. These will always be reported by a synchronous throw.\n\nState errors occur when an action is attempted at an incorrect time (for instance, attempting to send data on a stream after it has closed). These will be reported using either a synchronous throw or via an 'error' event on the Http2Stream, Http2Session or", "doc_id": "c8c494bc-4d50-4097-b412-1a846bd4bfbb", "embedding": null, "doc_hash": "b818a1bd7a929f33293481ae7b64e836ba2cbc64ef7749bc0be8ee42d2cfd8ff", "extra_info": null, "node_info": {"start": 1615602, "end": 1619610}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "12760dc4-8d38-4d78-a87b-cbfd06155ea2", "3": "df94f3b9-5318-48f0-a524-301539409b81"}}, "__type__": "1"}, "df94f3b9-5318-48f0-a524-301539409b81": {"__data__": {"text": "true if the \"Extended Connect Protocol\" defined by RFC 8441 is to be enabled. This setting is only meaningful if sent by the server. Once the enableConnectProtocol setting has been enabled for a given Http2Session, it cannot be disabled. Default: false.\nAll additional properties on the settings object are ignored.\n\nError handling#\nThere are several types of error conditions that may arise when using the node:http2 module:\n\nValidation errors occur when an incorrect argument, option, or setting value is passed in. These will always be reported by a synchronous throw.\n\nState errors occur when an action is attempted at an incorrect time (for instance, attempting to send data on a stream after it has closed). These will be reported using either a synchronous throw or via an 'error' event on the Http2Stream, Http2Session or HTTP/2 Server objects, depending on where and when the error occurs.\n\nInternal errors occur when an HTTP/2 session fails unexpectedly. These will be reported via an 'error' event on the Http2Session or HTTP/2 Server objects.\n\nProtocol errors occur when various HTTP/2 protocol constraints are violated. These will be reported using either a synchronous throw or via an 'error' event on the Http2Stream, Http2Session or HTTP/2 Server objects, depending on where and when the error occurs.\n\nInvalid character handling in header names and values#\nThe HTTP/2 implementation applies stricter handling of invalid characters in HTTP header names and values than the HTTP/1 implementation.\n\nHeader field names are case-insensitive and are transmitted over the wire strictly as lower-case strings. The API provided by Node.js allows header names to be set as mixed-case strings (e.g. Content-Type) but will convert those to lower-case (e.g. content-type) upon transmission.\n\nHeader field-names must only contain one or more of the following ASCII characters: a-z, A-Z, 0-9, !, #, $, %, &, ', *, +, -, ., ^, _, ` (backtick), |, and ~.\n\nUsing invalid characters within an HTTP header field name will cause the stream to be closed with a protocol error being reported.\n\nHeader field values are handled with more leniency but should not contain new-line or carriage return characters and should be limited to US-ASCII characters, per the requirements of the HTTP specification.\n\nPush streams on the client#\nTo receive pushed streams on the client, set a listener for the 'stream' event on the ClientHttp2Session:\n\nconst http2 = require('node:http2');\n\nconst client = http2.connect('http://localhost');\n\nclient.on('stream', (pushedStream, requestHeaders) => {\n  pushedStream.on('push', (responseHeaders) => {\n    // Process response headers\n  });\n  pushedStream.on('data', (chunk) => { /* handle pushed data */ });\n});\n\nconst req = client.request({ ':path': '/' });\nSupporting the CONNECT method#\nThe CONNECT method is used to allow an HTTP/2 server to be used as a proxy for TCP/IP connections.\n\nA simple TCP Server:\n\nconst net = require('node:net');\n\nconst server = net.createServer((socket) => {\n  let name = '';\n  socket.setEncoding('utf8');\n  socket.on('data', (chunk) => name += chunk);\n  socket.on('end', () => socket.end(`hello ${name}`));\n});\n\nserver.listen(8000);\nAn HTTP/2 CONNECT proxy:\n\nconst http2 = require('node:http2');\nconst { NGHTTP2_REFUSED_STREAM } = http2.constants;\nconst net = require('node:net');\n\nconst proxy = http2.createServer();\nproxy.on('stream', (stream, headers) => {\n  if (headers[':method'] !== 'CONNECT') {\n    // Only accept CONNECT requests\n    stream.close(NGHTTP2_REFUSED_STREAM);\n    return;\n  }\n  const auth = new URL(`tcp://${headers[':authority']}`);\n ", "doc_id": "df94f3b9-5318-48f0-a524-301539409b81", "embedding": null, "doc_hash": "b54268b4d2362b252f19c765339abcc39d02910019f76b808333c0bb5451a1e2", "extra_info": null, "node_info": {"start": 1619521, "end": 1623133}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c8c494bc-4d50-4097-b412-1a846bd4bfbb", "3": "b6f84671-c518-4612-90e8-0798c213695f"}}, "__type__": "1"}, "b6f84671-c518-4612-90e8-0798c213695f": {"__data__": {"text": "(chunk) => name += chunk);\n  socket.on('end', () => socket.end(`hello ${name}`));\n});\n\nserver.listen(8000);\nAn HTTP/2 CONNECT proxy:\n\nconst http2 = require('node:http2');\nconst { NGHTTP2_REFUSED_STREAM } = http2.constants;\nconst net = require('node:net');\n\nconst proxy = http2.createServer();\nproxy.on('stream', (stream, headers) => {\n  if (headers[':method'] !== 'CONNECT') {\n    // Only accept CONNECT requests\n    stream.close(NGHTTP2_REFUSED_STREAM);\n    return;\n  }\n  const auth = new URL(`tcp://${headers[':authority']}`);\n  // It's a very good idea to verify that hostname and port are\n  // things this proxy should be connecting to.\n  const socket = net.connect(auth.port, auth.hostname, () => {\n    stream.respond();\n    socket.pipe(stream);\n    stream.pipe(socket);\n  });\n  socket.on('error', (error) => {\n    stream.close(http2.constants.NGHTTP2_CONNECT_ERROR);\n  });\n});\n\nproxy.listen(8001);\nAn HTTP/2 CONNECT client:\n\nconst http2 = require('node:http2');\n\nconst client = http2.connect('http://localhost:8001');\n\n// Must not specify the ':path' and ':scheme' headers\n// for CONNECT requests or an error will be thrown.\nconst req = client.request({\n  ':method': 'CONNECT',\n  ':authority': 'localhost:8000',\n});\n\nreq.on('response', (headers) => {\n  console.log(headers[http2.constants.HTTP2_HEADER_STATUS]);\n});\nlet data = '';\nreq.setEncoding('utf8');\nreq.on('data', (chunk) => data += chunk);\nreq.on('end', () => {\n  console.log(`The server says: ${data}`);\n  client.close();\n});\nreq.end('Jane');\nThe extended CONNECT protocol#\nRFC 8441 defines an \"Extended CONNECT Protocol\" extension to HTTP/2 that may be used to bootstrap the use of an Http2Stream using the CONNECT method as a tunnel for other communication protocols (such as WebSockets).\n\nThe use of the Extended CONNECT Protocol is enabled by HTTP/2 servers by using the enableConnectProtocol setting:\n\nconst http2 = require('node:http2');\nconst settings = { enableConnectProtocol: true };\nconst server = http2.createServer({ settings });\nOnce the client receives the SETTINGS frame from the server indicating that the extended CONNECT may be used, it may send CONNECT requests that use the ':protocol' HTTP/2 pseudo-header:\n\nconst http2 = require('node:http2');\nconst client = http2.connect('http://localhost:8080');\nclient.on('remoteSettings', (settings) => {\n  if (settings.enableConnectProtocol) {\n    const req = client.request({ ':method': 'CONNECT', ':protocol': 'foo' });\n    // ...\n  }\n});\nCompatibility API#\nThe Compatibility API has the goal of providing a similar developer experience of HTTP/1 when using HTTP/2, making it possible to develop applications that support both HTTP/1 and HTTP/2. This API targets only the public API of the HTTP/1. However many modules use internal methods or state, and those are not supported as it is a completely different implementation.\n\nThe following example creates an HTTP/2 server using the compatibility API:\n\nconst http2 = require('node:http2');\nconst server = http2.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });\n ", "doc_id": "b6f84671-c518-4612-90e8-0798c213695f", "embedding": null, "doc_hash": "a1a54bf3b123ec956d1c2047ac358ec380fafa51b88a603cae3d944e3afde7a7", "extra_info": null, "node_info": {"start": 1623367, "end": 1626538}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "df94f3b9-5318-48f0-a524-301539409b81", "3": "73490b47-48f7-4d97-91b0-0971f5030e1d"}}, "__type__": "1"}, "73490b47-48f7-4d97-91b0-0971f5030e1d": {"__data__": {"text": "API#\nThe Compatibility API has the goal of providing a similar developer experience of HTTP/1 when using HTTP/2, making it possible to develop applications that support both HTTP/1 and HTTP/2. This API targets only the public API of the HTTP/1. However many modules use internal methods or state, and those are not supported as it is a completely different implementation.\n\nThe following example creates an HTTP/2 server using the compatibility API:\n\nconst http2 = require('node:http2');\nconst server = http2.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/html');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });\n  res.end('ok');\n});\nIn order to create a mixed HTTPS and HTTP/2 server, refer to the ALPN negotiation section. Upgrading from non-tls HTTP/1 servers is not supported.\n\nThe HTTP/2 compatibility API is composed of Http2ServerRequest and Http2ServerResponse. They aim at API compatibility with HTTP/1, but they do not hide the differences between the protocols. As an example, the status message for HTTP codes is ignored.\n\nALPN negotiation#\nALPN negotiation allows supporting both HTTPS and HTTP/2 over the same socket. The req and res objects can be either HTTP/1 or HTTP/2, and an application must restrict itself to the public API of HTTP/1, and detect if it is possible to use the more advanced features of HTTP/2.\n\nThe following example creates a server that supports both protocols:\n\nconst { createSecureServer } = require('node:http2');\nconst { readFileSync } = require('node:fs');\n\nconst cert = readFileSync('./cert.pem');\nconst key = readFileSync('./key.pem');\n\nconst server = createSecureServer(\n  { cert, key, allowHTTP1: true },\n  onRequest,\n).listen(4443);\n\nfunction onRequest(req, res) {\n  // Detects if it is a HTTPS request or HTTP/2\n  const { socket: { alpnProtocol } } = req.httpVersion === '2.0' ?\n    req.stream.session : req;\n  res.writeHead(200, { 'content-type': 'application/json' });\n  res.end(JSON.stringify({\n    alpnProtocol,\n    httpVersion: req.httpVersion,\n  }));\n}\nThe 'request' event works identically on both HTTPS and HTTP/2.\n\nClass: http2.Http2ServerRequest#\nAdded in: v8.4.0\nExtends: <stream.Readable>\nA Http2ServerRequest object is created by http2.Server or http2.SecureServer and passed as the first argument to the 'request' event. It may be used to access a request status, headers, and data.\n\nEvent: 'aborted'#\nAdded in: v8.4.0\nThe 'aborted' event is emitted whenever a Http2ServerRequest instance is abnormally aborted in mid-communication.\n\nThe 'aborted' event will only be emitted if the Http2ServerRequest writable side has not been ended.\n\nEvent: 'close'#\nAdded in: v8.4.0\nIndicates that the underlying Http2Stream was closed. Just like 'end', this event occurs only once per response.\n\nrequest.aborted#\nAdded in: v10.1.0\n<boolean>\nThe request.aborted property will be true if the request has been aborted.\n\nrequest.authority#\nAdded in: v8.4.0\n<string>\nThe request authority pseudo header field. Because HTTP/2 allows requests to set either :authority or host, this value is derived from req.headers[':authority'] if present. Otherwise, it is derived from req.headers['host'].\n\nrequest.complete#\nAdded in: v12.10.0\n<boolean>\nThe request.complete property will be true if the request has been completed, aborted, or destroyed.\n\nrequest.connection#\nAdded in:", "doc_id": "73490b47-48f7-4d97-91b0-0971f5030e1d", "embedding": null, "doc_hash": "89b7ae7994bc1b7776e1f2c152f06021ef3e0177cf2d4609357eb8c2e44a962d", "extra_info": null, "node_info": {"start": 1626409, "end": 1629800}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b6f84671-c518-4612-90e8-0798c213695f", "3": "94d2899a-92a3-40ac-93d8-e99e17bc4759"}}, "__type__": "1"}, "94d2899a-92a3-40ac-93d8-e99e17bc4759": {"__data__": {"text": "that the underlying Http2Stream was closed. Just like 'end', this event occurs only once per response.\n\nrequest.aborted#\nAdded in: v10.1.0\n<boolean>\nThe request.aborted property will be true if the request has been aborted.\n\nrequest.authority#\nAdded in: v8.4.0\n<string>\nThe request authority pseudo header field. Because HTTP/2 allows requests to set either :authority or host, this value is derived from req.headers[':authority'] if present. Otherwise, it is derived from req.headers['host'].\n\nrequest.complete#\nAdded in: v12.10.0\n<boolean>\nThe request.complete property will be true if the request has been completed, aborted, or destroyed.\n\nrequest.connection#\nAdded in: v8.4.0Deprecated since: v13.0.0\nStability: 0 - Deprecated. Use request.socket.\n<net.Socket> | <tls.TLSSocket>\nSee request.socket.\n\nrequest.destroy([error])#\nAdded in: v8.4.0\nerror <Error>\nCalls destroy() on the Http2Stream that received the Http2ServerRequest. If error is provided, an 'error' event is emitted and error is passed as an argument to any listeners on the event.\n\nIt does nothing if the stream was already destroyed.\n\nrequest.headers#\nAdded in: v8.4.0\n<Object>\nThe request/response headers object.\n\nKey-value pairs of header names and values. Header names are lower-cased.\n\n// Prints something like:\n//\n// { 'user-agent': 'curl/7.22.0',\n//   host: '127.0.0.1:8000',\n//   accept: '*/*' }\nconsole.log(request.headers);\nSee HTTP/2 Headers Object.\n\nIn HTTP/2, the request path, host name, protocol, and method are represented as special headers prefixed with the : character (e.g. ':path'). These special headers will be included in the request.headers object. Care must be taken not to inadvertently modify these special headers or errors may occur. For instance, removing all headers from the request will cause errors to occur:\n\nremoveAllHeaders(request.headers);\nassert(request.url);   // Fails because the :path header has been removed\nrequest.httpVersion#\nAdded in: v8.4.0\n<string>\nIn case of server request, the HTTP version sent by the client. In the case of client response, the HTTP version of the connected-to server. Returns '2.0'.\n\nAlso message.httpVersionMajor is the first integer and message.httpVersionMinor is the second.\n\nrequest.method#\nAdded in: v8.4.0\n<string>\nThe request method as a string. Read-only. Examples: 'GET', 'DELETE'.\n\nrequest.rawHeaders#\nAdded in: v8.4.0\n<string[]>\nThe raw request/response headers list exactly as they were received.\n\nThe keys and values are in the same list. It is not a list of tuples. So, the even-numbered offsets are key values, and the odd-numbered offsets are the associated values.\n\nHeader names are not lowercased, and duplicates are not merged.\n\n// Prints something like:\n//\n// [ 'user-agent',\n//   'this is invalid because there can be only one',\n//   'User-Agent',\n//   'curl/7.22.0',\n//   'Host',\n//   '127.0.0.1:8000',\n//   'ACCEPT',\n//   '*/*' ]\nconsole.log(request.rawHeaders);\nrequest.rawTrailers#\nAdded in: v8.4.0\n<string[]>\nThe raw request/response trailer keys and values exactly as they were received. Only populated at the 'end' event.\n\nrequest.scheme#\nAdded in: v8.4.0\n<string>\nThe request scheme pseudo header field indicating the scheme portion of the target URL.\n\nrequest.setTimeout(msecs, callback)#\nAdded in:", "doc_id": "94d2899a-92a3-40ac-93d8-e99e17bc4759", "embedding": null, "doc_hash": "e5c40034d1cf024b0123ac5c4a0191ee4cde9f512c047137738655f63c96537c", "extra_info": null, "node_info": {"start": 1629802, "end": 1633076}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "73490b47-48f7-4d97-91b0-0971f5030e1d", "3": "27464973-0516-421e-9816-230fd6681851"}}, "__type__": "1"}, "27464973-0516-421e-9816-230fd6681851": {"__data__": {"text": "  'this is invalid because there can be only one',\n//   'User-Agent',\n//   'curl/7.22.0',\n//   'Host',\n//   '127.0.0.1:8000',\n//   'ACCEPT',\n//   '*/*' ]\nconsole.log(request.rawHeaders);\nrequest.rawTrailers#\nAdded in: v8.4.0\n<string[]>\nThe raw request/response trailer keys and values exactly as they were received. Only populated at the 'end' event.\n\nrequest.scheme#\nAdded in: v8.4.0\n<string>\nThe request scheme pseudo header field indicating the scheme portion of the target URL.\n\nrequest.setTimeout(msecs, callback)#\nAdded in: v8.4.0\nmsecs <number>\ncallback <Function>\nReturns: <http2.Http2ServerRequest>\nSets the Http2Stream's timeout value to msecs. If a callback is provided, then it is added as a listener on the 'timeout' event on the response object.\n\nIf no 'timeout' listener is added to the request, the response, or the server, then Http2Streams are destroyed when they time out. If a handler is assigned to the request, the response, or the server's 'timeout' events, timed out sockets must be handled explicitly.\n\nrequest.socket#\nAdded in: v8.4.0\n<net.Socket> | <tls.TLSSocket>\nReturns a Proxy object that acts as a net.Socket (or tls.TLSSocket) but applies getters, setters, and methods based on HTTP/2 logic.\n\ndestroyed, readable, and writable properties will be retrieved from and set on request.stream.\n\ndestroy, emit, end, on and once methods will be called on request.stream.\n\nsetTimeout method will be called on request.stream.session.\n\npause, read, resume, and write will throw an error with code ERR_HTTP2_NO_SOCKET_MANIPULATION. See Http2Session and Sockets for more information.\n\nAll other interactions will be routed directly to the socket. With TLS support, use request.socket.getPeerCertificate() to obtain the client's authentication details.\n\nrequest.stream#\nAdded in: v8.4.0\n<Http2Stream>\nThe Http2Stream object backing the request.\n\nrequest.trailers#\nAdded in: v8.4.0\n<Object>\nThe request/response trailers object. Only populated at the 'end' event.\n\nrequest.url#\nAdded in: v8.4.0\n<string>\nRequest URL string. This contains only the URL that is present in the actual HTTP request. If the request is:\n\nGET /status?name=ryan HTTP/1.1\nAccept: text/plain\nThen request.url will be:\n\n'/status?name=ryan'\nTo parse the url into its parts, new URL() can be used:\n\n$ node\n> new URL('/status?name=ryan', 'http://example.com')\nURL {\n  href: 'http://example.com/status?name=ryan',\n  origin: 'http://example.com',\n  protocol: 'http:',\n  username: '',\n  password: '',\n  host: 'example.com',\n  hostname: 'example.com',\n  port: '',\n  pathname: '/status',\n  search: '?name=ryan',\n  searchParams: URLSearchParams { 'name' => 'ryan' },\n  hash: ''\n}\nClass: http2.Http2ServerResponse#\nAdded in: v8.4.0\nExtends: <Stream>\nThis object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the 'request' event.\n\nEvent: 'close'#\nAdded in: v8.4.0\nIndicates that the underlying Http2Stream was terminated before response.end() was called or able to flush.\n\nEvent: 'finish'#\nAdded in: v8.4.0\nEmitted when the response has been sent. More specifically, this event is emitted when the last segment of the response headers and", "doc_id": "27464973-0516-421e-9816-230fd6681851", "embedding": null, "doc_hash": "9c7bfdb93ad52b47c248d0f9142301b31ef22b5376af6ac4fc4ffac033fe9b1a", "extra_info": null, "node_info": {"start": 1633210, "end": 1636379}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "94d2899a-92a3-40ac-93d8-e99e17bc4759", "3": "8e171c9f-9211-4b55-bb85-cf729ec1b47c"}}, "__type__": "1"}, "8e171c9f-9211-4b55-bb85-cf729ec1b47c": {"__data__": {"text": "port: '',\n  pathname: '/status',\n  search: '?name=ryan',\n  searchParams: URLSearchParams { 'name' => 'ryan' },\n  hash: ''\n}\nClass: http2.Http2ServerResponse#\nAdded in: v8.4.0\nExtends: <Stream>\nThis object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the 'request' event.\n\nEvent: 'close'#\nAdded in: v8.4.0\nIndicates that the underlying Http2Stream was terminated before response.end() was called or able to flush.\n\nEvent: 'finish'#\nAdded in: v8.4.0\nEmitted when the response has been sent. More specifically, this event is emitted when the last segment of the response headers and body have been handed off to the HTTP/2 multiplexing for transmission over the network. It does not imply that the client has received anything yet.\n\nAfter this event, no more events will be emitted on the response object.\n\nresponse.addTrailers(headers)#\nAdded in: v8.4.0\nheaders <Object>\nThis method adds HTTP trailing headers (a header but at the end of the message) to the response.\n\nAttempting to set a header field name or value that contains invalid characters will result in a TypeError being thrown.\n\nresponse.connection#\nAdded in: v8.4.0Deprecated since: v13.0.0\nStability: 0 - Deprecated. Use response.socket.\n<net.Socket> | <tls.TLSSocket>\nSee response.socket.\n\nresponse.createPushResponse(headers, callback)#\nHistory\nheaders <HTTP/2 Headers Object> An object describing the headers\ncallback <Function> Called once http2stream.pushStream() is finished, or either when the attempt to create the pushed Http2Stream has failed or has been rejected, or the state of Http2ServerRequest is closed prior to calling the http2stream.pushStream() method\nerr <Error>\nres <http2.Http2ServerResponse> The newly-created Http2ServerResponse object\nCall http2stream.pushStream() with the given headers, and wrap the given Http2Stream on a newly created Http2ServerResponse as the callback parameter if successful. When Http2ServerRequest is closed, the callback is called with an error ERR_HTTP2_INVALID_STREAM.\n\nresponse.end([data[, encoding]][, callback])#\nHistory\ndata <string> | <Buffer> | <Uint8Array>\nencoding <string>\ncallback <Function>\nReturns: <this>\nThis method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. The method, response.end(), MUST be called on each response.\n\nIf data is specified, it is equivalent to calling response.write(data, encoding) followed by response.end(callback).\n\nIf callback is specified, it will be called when the response stream is finished.\n\nresponse.finished#\nAdded in: v8.4.0Deprecated since: v13.4.0, v12.16.0\nStability: 0 - Deprecated. Use response.writableEnded.\n<boolean>\nBoolean value that indicates whether the response has completed. Starts as false. After response.end() executes, the value will be true.\n\nresponse.getHeader(name)#\nAdded in: v8.4.0\nname <string>\nReturns: <string>\nReads out a header that has already been queued but not sent to the client. The name is case-insensitive.\n\nconst contentType = response.getHeader('content-type');\nresponse.getHeaderNames()#\nAdded in: v8.4.0\nReturns: <string[]>\nReturns an array containing the unique names of the current outgoing headers. All header names are lowercase.\n\nresponse.setHeader('Foo', 'bar');\nresponse.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n\nconst headerNames = response.getHeaderNames();\n// headerNames === ['foo', 'set-cookie']\nresponse.getHeaders()#\nAdded in: v8.4.0\nReturns: <Object>\nReturns a shallow copy of the current", "doc_id": "8e171c9f-9211-4b55-bb85-cf729ec1b47c", "embedding": null, "doc_hash": "72511a976e47f5ec313325dbdbbd950d3dd8399c0de5f09089dba90d7a73dd43", "extra_info": null, "node_info": {"start": 1636298, "end": 1639856}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "27464973-0516-421e-9816-230fd6681851", "3": "836ff546-128e-406d-a2f7-e5ce1dff7772"}}, "__type__": "1"}, "836ff546-128e-406d-a2f7-e5ce1dff7772": {"__data__": {"text": "<string>\nReturns: <string>\nReads out a header that has already been queued but not sent to the client. The name is case-insensitive.\n\nconst contentType = response.getHeader('content-type');\nresponse.getHeaderNames()#\nAdded in: v8.4.0\nReturns: <string[]>\nReturns an array containing the unique names of the current outgoing headers. All header names are lowercase.\n\nresponse.setHeader('Foo', 'bar');\nresponse.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n\nconst headerNames = response.getHeaderNames();\n// headerNames === ['foo', 'set-cookie']\nresponse.getHeaders()#\nAdded in: v8.4.0\nReturns: <Object>\nReturns a shallow copy of the current outgoing headers. Since a shallow copy is used, array values may be mutated without additional calls to various header-related http module methods. The keys of the returned object are the header names and the values are the respective header values. All header names are lowercase.\n\nThe object returned by the response.getHeaders() method does not prototypically inherit from the JavaScript Object. This means that typical Object methods such as obj.toString(), obj.hasOwnProperty(), and others are not defined and will not work.\n\nresponse.setHeader('Foo', 'bar');\nresponse.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n\nconst headers = response.getHeaders();\n// headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }\nresponse.hasHeader(name)#\nAdded in: v8.4.0\nname <string>\nReturns: <boolean>\nReturns true if the header identified by name is currently set in the outgoing headers. The header name matching is case-insensitive.\n\nconst hasContentType = response.hasHeader('content-type');\nresponse.headersSent#\nAdded in: v8.4.0\n<boolean>\nTrue if headers were sent, false otherwise (read-only).\n\nresponse.removeHeader(name)#\nAdded in: v8.4.0\nname <string>\nRemoves a header that has been queued for implicit sending.\n\nresponse.removeHeader('Content-Encoding');\nresponse.req#\nAdded in: v15.7.0\n<http2.Http2ServerRequest>\nA reference to the original HTTP2 request object.\n\nresponse.sendDate#\nAdded in: v8.4.0\n<boolean>\nWhen true, the Date header will be automatically generated and sent in the response if it is not already present in the headers. Defaults to true.\n\nThis should only be disabled for testing; HTTP requires the Date header in responses.\n\nresponse.setHeader(name, value)#\nAdded in: v8.4.0\nname <string>\nvalue <string> | <string[]>\nSets a single header value for implicit headers. If this header already exists in the to-be-sent headers, its value will be replaced. Use an array of strings here to send multiple headers with the same name.\n\nresponse.setHeader('Content-Type', 'text/html; charset=utf-8');\nor\n\nresponse.setHeader('Set-Cookie', ['type=ninja', 'language=javascript']);\nAttempting to set a header field name or value that contains invalid characters will result in a TypeError being thrown.\n\nWhen headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead(), with the headers passed to response.writeHead() given precedence.\n\n// Returns content-type = text/plain\nconst server = http2.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/html; charset=utf-8');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });\n  res.end('ok');\n});\nresponse.setTimeout(msecs[, callback])#\nAdded in: v8.4.0\nmsecs <number>\ncallback <Function>\nReturns:", "doc_id": "836ff546-128e-406d-a2f7-e5ce1dff7772", "embedding": null, "doc_hash": "1058c39fa72ba3afa839cf6f91725acd9407175301db6d5259b4cd3567ea2d4d", "extra_info": null, "node_info": {"start": 1639822, "end": 1643253}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8e171c9f-9211-4b55-bb85-cf729ec1b47c", "3": "ded400d1-3f4b-4647-aba9-83210b951f9a"}}, "__type__": "1"}, "ded400d1-3f4b-4647-aba9-83210b951f9a": {"__data__": {"text": "will result in a TypeError being thrown.\n\nWhen headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead(), with the headers passed to response.writeHead() given precedence.\n\n// Returns content-type = text/plain\nconst server = http2.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/html; charset=utf-8');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });\n  res.end('ok');\n});\nresponse.setTimeout(msecs[, callback])#\nAdded in: v8.4.0\nmsecs <number>\ncallback <Function>\nReturns: <http2.Http2ServerResponse>\nSets the Http2Stream's timeout value to msecs. If a callback is provided, then it is added as a listener on the 'timeout' event on the response object.\n\nIf no 'timeout' listener is added to the request, the response, or the server, then Http2Streams are destroyed when they time out. If a handler is assigned to the request, the response, or the server's 'timeout' events, timed out sockets must be handled explicitly.\n\nresponse.socket#\nAdded in: v8.4.0\n<net.Socket> | <tls.TLSSocket>\nReturns a Proxy object that acts as a net.Socket (or tls.TLSSocket) but applies getters, setters, and methods based on HTTP/2 logic.\n\ndestroyed, readable, and writable properties will be retrieved from and set on response.stream.\n\ndestroy, emit, end, on and once methods will be called on response.stream.\n\nsetTimeout method will be called on response.stream.session.\n\npause, read, resume, and write will throw an error with code ERR_HTTP2_NO_SOCKET_MANIPULATION. See Http2Session and Sockets for more information.\n\nAll other interactions will be routed directly to the socket.\n\nconst http2 = require('node:http2');\nconst server = http2.createServer((req, res) => {\n  const ip = req.socket.remoteAddress;\n  const port = req.socket.remotePort;\n  res.end(`Your IP address is ${ip} and your source port is ${port}.`);\n}).listen(3000);\nresponse.statusCode#\nAdded in: v8.4.0\n<number>\nWhen using implicit headers (not calling response.writeHead() explicitly), this property controls the status code that will be sent to the client when the headers get flushed.\n\nresponse.statusCode = 404;\nAfter response header was sent to the client, this property indicates the status code which was sent out.\n\nresponse.statusMessage#\nAdded in: v8.4.0\n<string>\nStatus message is not supported by HTTP/2 (RFC 7540 8.1.2.4). It returns an empty string.\n\nresponse.stream#\nAdded in: v8.4.0\n<Http2Stream>\nThe Http2Stream object backing the response.\n\nresponse.writableEnded#\nAdded in: v12.9.0\n<boolean>\nIs true after response.end() has been called. This property does not indicate whether the data has been flushed, for this use writable.writableFinished instead.\n\nresponse.write(chunk[, encoding][, callback])#\nAdded in: v8.4.0\nchunk <string> | <Buffer> | <Uint8Array>\nencoding <string>\ncallback <Function>\nReturns: <boolean>\nIf this method is called and response.writeHead() has not been called, it will switch to implicit header mode and flush the implicit headers.\n\nThis sends a chunk of the response body. This method may be called multiple times to provide successive parts of the body.\n\nIn the node:http module, the response body is omitted when the request is a HEAD request. Similarly, the 204 and 304 responses must not include a message body.\n\nchunk can be a string or a buffer. If chunk is a string, the second parameter specifies how to encode", "doc_id": "ded400d1-3f4b-4647-aba9-83210b951f9a", "embedding": null, "doc_hash": "ad93707659f560df6d91ef66e4a7bbf67855268b76773c2f8b5730f63c70bea7", "extra_info": null, "node_info": {"start": 1643291, "end": 1646740}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "836ff546-128e-406d-a2f7-e5ce1dff7772", "3": "6085bcb1-61d5-4e7e-aa27-db76e850f6c7"}}, "__type__": "1"}, "6085bcb1-61d5-4e7e-aa27-db76e850f6c7": {"__data__": {"text": "writable.writableFinished instead.\n\nresponse.write(chunk[, encoding][, callback])#\nAdded in: v8.4.0\nchunk <string> | <Buffer> | <Uint8Array>\nencoding <string>\ncallback <Function>\nReturns: <boolean>\nIf this method is called and response.writeHead() has not been called, it will switch to implicit header mode and flush the implicit headers.\n\nThis sends a chunk of the response body. This method may be called multiple times to provide successive parts of the body.\n\nIn the node:http module, the response body is omitted when the request is a HEAD request. Similarly, the 204 and 304 responses must not include a message body.\n\nchunk can be a string or a buffer. If chunk is a string, the second parameter specifies how to encode it into a byte stream. By default the encoding is 'utf8'. callback will be called when this chunk of data is flushed.\n\nThis is the raw HTTP body and has nothing to do with higher-level multi-part body encodings that may be used.\n\nThe first time response.write() is called, it will send the buffered header information and the first chunk of the body to the client. The second time response.write() is called, Node.js assumes data will be streamed, and sends the new data separately. That is, the response is buffered up to the first chunk of the body.\n\nReturns true if the entire data was flushed successfully to the kernel buffer. Returns false if all or part of the data was queued in user memory. 'drain' will be emitted when the buffer is free again.\n\nresponse.writeContinue()#\nAdded in: v8.4.0\nSends a status 100 Continue to the client, indicating that the request body should be sent. See the 'checkContinue' event on Http2Server and Http2SecureServer.\n\nresponse.writeEarlyHints(hints)#\nAdded in: v18.11.0\nhints <Object>\nSends a status 103 Early Hints to the client with a Link header, indicating that the user agent can preload/preconnect the linked resources. The hints is an object containing the values of headers to be sent with early hints message.\n\nExample\n\nconst earlyHintsLink = '</styles.css>; rel=preload; as=style';\nresponse.writeEarlyHints({\n  'link': earlyHintsLink,\n});\n\nconst earlyHintsLinks = [\n  '</styles.css>; rel=preload; as=style',\n  '</scripts.js>; rel=preload; as=script',\n];\nresponse.writeEarlyHints({\n  'link': earlyHintsLinks,\n});\nresponse.writeHead(statusCode[, statusMessage][, headers])#\nHistory\nstatusCode <number>\nstatusMessage <string>\nheaders <Object> | <Array>\nReturns: <http2.Http2ServerResponse>\nSends a response header to the request. The status code is a 3-digit HTTP status code, like 404. The last argument, headers, are the response headers.\n\nReturns a reference to the Http2ServerResponse, so that calls can be chained.\n\nFor compatibility with HTTP/1, a human-readable statusMessage may be passed as the second argument. However, because the statusMessage has no meaning within HTTP/2, the argument will have no effect and a process warning will be emitted.\n\nconst body = 'hello world';\nresponse.writeHead(200, {\n  'Content-Length': Buffer.byteLength(body),\n  'Content-Type': 'text/plain; charset=utf-8',\n});\nContent-Length is given in bytes not characters. The Buffer.byteLength() API may be used to determine the number of bytes in a given encoding. On outbound messages, Node.js does not check if Content-Length and the length of the body being transmitted are equal or not. However, when receiving messages, Node.js will automatically reject messages when the Content-Length does not match the actual payload size.\n\nThis method may be called at most one time on a message before response.end() is called.\n\nIf response.write() or response.end() are called before calling this, the implicit/mutable headers will be calculated and call this function.\n\nWhen headers have been set with", "doc_id": "6085bcb1-61d5-4e7e-aa27-db76e850f6c7", "embedding": null, "doc_hash": "c9b2604ce29a133d61b086e2ee7223d6c4be799ede55e58ae461fac1551b46e7", "extra_info": null, "node_info": {"start": 1646660, "end": 1650421}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ded400d1-3f4b-4647-aba9-83210b951f9a", "3": "5b7e0dcb-09d2-4189-8c96-2ec4232a1c85"}}, "__type__": "1"}, "5b7e0dcb-09d2-4189-8c96-2ec4232a1c85": {"__data__": {"text": " 'Content-Length': Buffer.byteLength(body),\n  'Content-Type': 'text/plain; charset=utf-8',\n});\nContent-Length is given in bytes not characters. The Buffer.byteLength() API may be used to determine the number of bytes in a given encoding. On outbound messages, Node.js does not check if Content-Length and the length of the body being transmitted are equal or not. However, when receiving messages, Node.js will automatically reject messages when the Content-Length does not match the actual payload size.\n\nThis method may be called at most one time on a message before response.end() is called.\n\nIf response.write() or response.end() are called before calling this, the implicit/mutable headers will be calculated and call this function.\n\nWhen headers have been set with response.setHeader(), they will be merged with any headers passed to response.writeHead(), with the headers passed to response.writeHead() given precedence.\n\n// Returns content-type = text/plain\nconst server = http2.createServer((req, res) => {\n  res.setHeader('Content-Type', 'text/html; charset=utf-8');\n  res.setHeader('X-Foo', 'bar');\n  res.writeHead(200, { 'Content-Type': 'text/plain; charset=utf-8' });\n  res.end('ok');\n});\nAttempting to set a header field name or value that contains invalid characters will result in a TypeError being thrown.\n\nCollecting HTTP/2 performance metrics\nThe Performance Observer API can be used to collect basic performance metrics for each Http2Session and Http2Stream instance.\n\nconst { PerformanceObserver } = require('node:perf_hooks');\n\nconst obs = new PerformanceObserver((items) => {\n  const entry = items.getEntries()[0];\n  console.log(entry.entryType);  // prints 'http2'\n  if (entry.name === 'Http2Session') {\n    // Entry contains statistics about the Http2Session\n  } else if (entry.name === 'Http2Stream') {\n    // Entry contains statistics about the Http2Stream\n  }\n});\nobs.observe({ entryTypes: ['http2'] });\nThe entryType property of the PerformanceEntry will be equal to 'http2'.\n\nThe name property of the PerformanceEntry will be equal to either 'Http2Stream' or 'Http2Session'.\n\nIf name is equal to Http2Stream, the PerformanceEntry will contain the following additional properties:\n\nbytesRead <number> The number of DATA frame bytes received for this Http2Stream.\nbytesWritten <number> The number of DATA frame bytes sent for this Http2Stream.\nid <number> The identifier of the associated Http2Stream\ntimeToFirstByte <number> The number of milliseconds elapsed between the PerformanceEntry startTime and the reception of the first DATA frame.\ntimeToFirstByteSent <number> The number of milliseconds elapsed between the PerformanceEntry startTime and sending of the first DATA frame.\ntimeToFirstHeader <number> The number of milliseconds elapsed between the PerformanceEntry startTime and the reception of the first header.\nIf name is equal to Http2Session, the PerformanceEntry will contain the following additional properties:\n\nbytesRead <number> The number of bytes received for this Http2Session.\nbytesWritten <number> The number of bytes sent for this Http2Session.\nframesReceived <number> The number of HTTP/2 frames received by the Http2Session.\nframesSent <number> The number of HTTP/2 frames sent by the Http2Session.\nmaxConcurrentStreams <number> The maximum number of streams concurrently open during the lifetime of the Http2Session.\npingRTT <number> The number of milliseconds elapsed since the transmission of a PING frame and the reception of its acknowledgment. Only present if a PING frame has been sent on the Http2Session.\nstreamAverageDuration <number> The average duration (in milliseconds) for all Http2Stream instances.\nstreamCount <number> The number of Http2Stream instances processed by the Http2Session.\ntype <string> Either 'server' or 'client' to identify the type of Http2Session.\nNote on :authority and host#\nHTTP/2", "doc_id": "5b7e0dcb-09d2-4189-8c96-2ec4232a1c85", "embedding": null, "doc_hash": "70d116cfb5582b8ceecfe30be6727352885f2c5a22656bbc2089dcd13cedb296", "extra_info": null, "node_info": {"start": 1650383, "end": 1654256}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6085bcb1-61d5-4e7e-aa27-db76e850f6c7", "3": "7a7a540b-da4f-4674-b2a5-6d609bdf6ac4"}}, "__type__": "1"}, "7a7a540b-da4f-4674-b2a5-6d609bdf6ac4": {"__data__": {"text": "<number> The number of HTTP/2 frames received by the Http2Session.\nframesSent <number> The number of HTTP/2 frames sent by the Http2Session.\nmaxConcurrentStreams <number> The maximum number of streams concurrently open during the lifetime of the Http2Session.\npingRTT <number> The number of milliseconds elapsed since the transmission of a PING frame and the reception of its acknowledgment. Only present if a PING frame has been sent on the Http2Session.\nstreamAverageDuration <number> The average duration (in milliseconds) for all Http2Stream instances.\nstreamCount <number> The number of Http2Stream instances processed by the Http2Session.\ntype <string> Either 'server' or 'client' to identify the type of Http2Session.\nNote on :authority and host#\nHTTP/2 requires requests to have either the :authority pseudo-header or the host header. Prefer :authority when constructing an HTTP/2 request directly, and host when converting from HTTP/1 (in proxies, for instance).\n\nThe compatibility API falls back to host if :authority is not present. See request.authority for more information. However, if you don't use the compatibility API (or use req.headers directly), you need to implement any fall-back behavior yourself.\n\nHTTPS#\nStability: 2 - Stable\nSource Code: lib/https.js\n\nHTTPS is the HTTP protocol over TLS/SSL. In Node.js this is implemented as a separate module.\n\nDetermining if crypto support is unavailable#\nIt is possible for Node.js to be built without including support for the node:crypto module. In such cases, attempting to import from https or calling require('node:https') will result in an error being thrown.\n\nWhen using CommonJS, the error thrown can be caught using try/catch:\n\nlet https;\ntry {\n  https = require('node:https');\n} catch (err) {\n  console.error('https support is disabled!');\n}\nWhen using the lexical ESM import keyword, the error can only be caught if a handler for process.on('uncaughtException') is registered before any attempt to load the module is made (using, for instance, a preload module).\n\nWhen using ESM, if there is a chance that the code may be run on a build of Node.js where crypto support is not enabled, consider using the import() function instead of the lexical import keyword:\n\nlet https;\ntry {\n  https = await import('node:https');\n} catch (err) {\n  console.error('https support is disabled!');\n}\nClass: https.Agent#\nHistory\nAn Agent object for HTTPS similar to http.Agent. See https.request() for more information.\n\nnew Agent([options])#\nHistory\noptions <Object> Set of configurable options to set on the agent. Can have the same fields as for http.Agent(options), and\nmaxCachedSessions <number> maximum number of TLS cached sessions. Use 0 to disable TLS session caching. Default: 100.\n\nservername <string> the value of Server Name Indication extension to be sent to the server. Use empty string '' to disable sending the extension. Default: host name of the target server, unless the target server is specified using an IP address, in which case the default is '' (no extension).\n\nSee Session Resumption for information about TLS session reuse.\n\nEvent: 'keylog'#\nAdded in: v13.2.0, v12.16.0\nline <Buffer> Line of ASCII text, in NSS SSLKEYLOGFILE format.\ntlsSocket <tls.TLSSocket> The tls.TLSSocket instance on which it was generated.\nThe keylog event is emitted when key material is generated or received by a connection managed by this agent (typically before handshake has completed, but not necessarily). This keying material can be stored for debugging, as it allows captured TLS traffic to be decrypted. It may be emitted multiple times for each socket.\n\nA typical use case is to append received lines to a common text file, which is later used by software (such as Wireshark) to decrypt the traffic:\n\n// ...\nhttps.globalAgent.on('keylog', (line, tlsSocket) =>", "doc_id": "7a7a540b-da4f-4674-b2a5-6d609bdf6ac4", "embedding": null, "doc_hash": "e389c4e4dd47e4694b41574a66ae0c9b02862c82034687a1a1463fd11cd38955", "extra_info": null, "node_info": {"start": 1654260, "end": 1658089}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5b7e0dcb-09d2-4189-8c96-2ec4232a1c85", "3": "7f708d7d-35cf-4a38-b86b-cc32a5a7227a"}}, "__type__": "1"}, "7f708d7d-35cf-4a38-b86b-cc32a5a7227a": {"__data__": {"text": "in: v13.2.0, v12.16.0\nline <Buffer> Line of ASCII text, in NSS SSLKEYLOGFILE format.\ntlsSocket <tls.TLSSocket> The tls.TLSSocket instance on which it was generated.\nThe keylog event is emitted when key material is generated or received by a connection managed by this agent (typically before handshake has completed, but not necessarily). This keying material can be stored for debugging, as it allows captured TLS traffic to be decrypted. It may be emitted multiple times for each socket.\n\nA typical use case is to append received lines to a common text file, which is later used by software (such as Wireshark) to decrypt the traffic:\n\n// ...\nhttps.globalAgent.on('keylog', (line, tlsSocket) => {\n  fs.appendFileSync('/tmp/ssl-keys.log', line, { mode: 0o600 });\n});\nClass: https.Server#\nAdded in: v0.3.4\nExtends: <tls.Server>\nSee http.Server for more information.\n\nserver.close([callback])#\nAdded in: v0.1.90\ncallback <Function>\nReturns: <https.Server>\nSee server.close() in the node:http module.\n\nserver.closeAllConnections()#\nAdded in: v18.2.0\nSee server.closeAllConnections() in the node:http module.\n\nserver.closeIdleConnections()#\nAdded in: v18.2.0\nSee server.closeIdleConnections() in the node:http module.\n\nserver.headersTimeout#\nAdded in: v11.3.0\n<number> Default: 60000\nSee server.headersTimeout in the node:http module.\n\nserver.listen()#\nStarts the HTTPS server listening for encrypted connections. This method is identical to server.listen() from net.Server.\n\nserver.maxHeadersCount#\n<number> Default: 2000\nSee server.maxHeadersCount in the node:http module.\n\nserver.requestTimeout#\nHistory\n<number> Default: 300000\nSee server.requestTimeout in the node:http module.\n\nserver.setTimeout([msecs][, callback])#\nAdded in: v0.11.2\nmsecs <number> Default: 120000 (2 minutes)\ncallback <Function>\nReturns: <https.Server>\nSee server.setTimeout() in the node:http module.\n\nserver.timeout#\nHistory\n<number> Default: 0 (no timeout)\nSee server.timeout in the node:http module.\n\nserver.keepAliveTimeout#\nAdded in: v8.0.0\n<number> Default: 5000 (5 seconds)\nSee server.keepAliveTimeout in the node:http module.\n\nhttps.createServer([options][, requestListener])#\nAdded in: v0.3.4\noptions <Object> Accepts options from tls.createServer(), tls.createSecureContext() and http.createServer().\nrequestListener <Function> A listener to be added to the 'request' event.\nReturns: <https.Server>\n// curl -k https://localhost:8000/\nconst https = require('node:https');\nconst fs = require('node:fs');\n\nconst options = {\n  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\n  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem'),\n};\n\nhttps.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('hello world\\n');\n}).listen(8000);\nOr\n\nconst https = require('node:https');\nconst fs = require('node:fs');\n\nconst options = {\n  pfx: fs.readFileSync('test/fixtures/test_cert.pfx'),\n  passphrase: 'sample',\n};\n\nhttps.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('hello world\\n');\n}).listen(8000);\nhttps.get(options[, callback])#\nhttps.get(url[, options][, callback])#\nHistory\nurl <string> | <URL>\noptions <Object> |", "doc_id": "7f708d7d-35cf-4a38-b86b-cc32a5a7227a", "embedding": null, "doc_hash": "2b56d6b9bdfb967fe33b1edd29d317102ad39ec40b7e18f0bfa8b8d1ac6c4c0c", "extra_info": null, "node_info": {"start": 1658157, "end": 1661304}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7a7a540b-da4f-4674-b2a5-6d609bdf6ac4", "3": "504bf806-4451-4eba-a0fe-5263d7b4c179"}}, "__type__": "1"}, "504bf806-4451-4eba-a0fe-5263d7b4c179": {"__data__": {"text": "(req, res) => {\n  res.writeHead(200);\n  res.end('hello world\\n');\n}).listen(8000);\nOr\n\nconst https = require('node:https');\nconst fs = require('node:fs');\n\nconst options = {\n  pfx: fs.readFileSync('test/fixtures/test_cert.pfx'),\n  passphrase: 'sample',\n};\n\nhttps.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('hello world\\n');\n}).listen(8000);\nhttps.get(options[, callback])#\nhttps.get(url[, options][, callback])#\nHistory\nurl <string> | <URL>\noptions <Object> | <string> | <URL> Accepts the same options as https.request(), with the method always set to GET.\ncallback <Function>\nLike http.get() but for HTTPS.\n\noptions can be an object, a string, or a URL object. If options is a string, it is automatically parsed with new URL(). If it is a URL object, it will be automatically converted to an ordinary options object.\n\nconst https = require('node:https');\n\nhttps.get('https://encrypted.google.com/', (res) => {\n  console.log('statusCode:', res.statusCode);\n  console.log('headers:', res.headers);\n\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n\n}).on('error', (e) => {\n  console.error(e);\n});\nhttps.globalAgent#\nAdded in: v0.5.9\nGlobal instance of https.Agent for all HTTPS client requests.\n\nhttps.request(options[, callback])#\nhttps.request(url[, options][, callback])#\nHistory\nurl <string> | <URL>\noptions <Object> | <string> | <URL> Accepts all options from http.request(), with some differences in default values:\nprotocol Default: 'https:'\nport Default: 443\nagent Default: https.globalAgent\ncallback <Function>\nReturns: <http.ClientRequest>\nMakes a request to a secure web server.\n\nThe following additional options from tls.connect() are also accepted: ca, cert, ciphers, clientCertEngine, crl, dhparam, ecdhCurve, honorCipherOrder, key, passphrase, pfx, rejectUnauthorized, secureOptions, secureProtocol, servername, sessionIdContext, highWaterMark.\n\noptions can be an object, a string, or a URL object. If options is a string, it is automatically parsed with new URL(). If it is a URL object, it will be automatically converted to an ordinary options object.\n\nhttps.request() returns an instance of the http.ClientRequest class. The ClientRequest instance is a writable stream. If one needs to upload a file with a POST request, then write to the ClientRequest object.\n\nconst https = require('node:https');\n\nconst options = {\n  hostname: 'encrypted.google.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n};\n\nconst req = https.request(options, (res) => {\n  console.log('statusCode:', res.statusCode);\n  console.log('headers:', res.headers);\n\n  res.on('data', (d) => {\n    process.stdout.write(d);\n  });\n});\n\nreq.on('error', (e) => {\n  console.error(e);\n});\nreq.end();\nExample using options from tls.connect():\n\nconst options = {\n  hostname: 'encrypted.google.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\n  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem'),\n};\noptions.agent = new https.Agent(options);\n\nconst req = https.request(options, (res) => {\n  // ...\n});\nAlternatively, opt out of connection pooling by not using an Agent.\n\nconst options", "doc_id": "504bf806-4451-4eba-a0fe-5263d7b4c179", "embedding": null, "doc_hash": "88e9124b61e85dfae193e13ff017bf1eb8d003fb07b99515cffaa5d4932d4ea0", "extra_info": null, "node_info": {"start": 1661453, "end": 1664621}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7f708d7d-35cf-4a38-b86b-cc32a5a7227a", "3": "27c5a902-3c45-4f7e-a0dd-b37a7c2cfd31"}}, "__type__": "1"}, "27c5a902-3c45-4f7e-a0dd-b37a7c2cfd31": {"__data__": {"text": "=> {\n    process.stdout.write(d);\n  });\n});\n\nreq.on('error', (e) => {\n  console.error(e);\n});\nreq.end();\nExample using options from tls.connect():\n\nconst options = {\n  hostname: 'encrypted.google.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\n  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem'),\n};\noptions.agent = new https.Agent(options);\n\nconst req = https.request(options, (res) => {\n  // ...\n});\nAlternatively, opt out of connection pooling by not using an Agent.\n\nconst options = {\n  hostname: 'encrypted.google.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\n  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem'),\n  agent: false,\n};\n\nconst req = https.request(options, (res) => {\n  // ...\n});\nExample using a URL as options:\n\nconst options = new URL('https://abc:xyz@example.com');\n\nconst req = https.request(options, (res) => {\n  // ...\n});\nExample pinning on certificate fingerprint, or the public key (similar to pin-sha256):\n\nconst tls = require('node:tls');\nconst https = require('node:https');\nconst crypto = require('node:crypto');\n\nfunction sha256(s) {\n  return crypto.createHash('sha256').update(s).digest('base64');\n}\nconst options = {\n  hostname: 'github.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  checkServerIdentity: function(host, cert) {\n    // Make sure the certificate is issued to the host we are connected to\n    const err = tls.checkServerIdentity(host, cert);\n    if (err) {\n      return err;\n    }\n\n    // Pin the public key, similar to HPKP pin-sha256 pinning\n    const pubkey256 = 'pL1+qb9HTMRZJmuC/bB/ZI9d302BYrrqiVuRyW+DGrU=';\n    if (sha256(cert.pubkey) !== pubkey256) {\n      const msg = 'Certificate verification error: ' +\n        `The public key of '${cert.subject.CN}' ` +\n        'does not match our pinned fingerprint';\n      return new Error(msg);\n    }\n\n    // Pin the exact certificate, rather than the pub key\n    const cert256 = '25:FE:39:32:D9:63:8C:8A:FC:A1:9A:29:87:' +\n      'D8:3E:4C:1D:98:DB:71:E4:1A:48:03:98:EA:22:6A:BD:8B:93:16';\n    if (cert.fingerprint256 !== cert256) {\n      const msg = 'Certificate verification error: ' +\n        `The certificate of '${cert.subject.CN}' ` +\n        'does not match our pinned fingerprint';\n      return new Error(msg);\n    }\n\n    // This loop is informational only.\n    // Print the certificate and public key fingerprints of all certs in the\n    // chain. Its common to pin the public key of the issuer on the public\n    // internet, while pinning the public key of the service in sensitive\n    // environments.\n    do {\n     ", "doc_id": "27c5a902-3c45-4f7e-a0dd-b37a7c2cfd31", "embedding": null, "doc_hash": "21a56613f4008088529cdd72afee43ab4581c38f0cc0d96acf87b6c8a48dbab4", "extra_info": null, "node_info": {"start": 1664572, "end": 1667245}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "504bf806-4451-4eba-a0fe-5263d7b4c179", "3": "df843395-b69e-473c-bd40-3070f7dddf73"}}, "__type__": "1"}, "df843395-b69e-473c-bd40-3070f7dddf73": {"__data__": {"text": "   if (cert.fingerprint256 !== cert256) {\n      const msg = 'Certificate verification error: ' +\n        `The certificate of '${cert.subject.CN}' ` +\n        'does not match our pinned fingerprint';\n      return new Error(msg);\n    }\n\n    // This loop is informational only.\n    // Print the certificate and public key fingerprints of all certs in the\n    // chain. Its common to pin the public key of the issuer on the public\n    // internet, while pinning the public key of the service in sensitive\n    // environments.\n    do {\n      console.log('Subject Common Name:', cert.subject.CN);\n      console.log('  Certificate SHA256 fingerprint:', cert.fingerprint256);\n\n      hash = crypto.createHash('sha256');\n      console.log('  Public key ping-sha256:', sha256(cert.pubkey));\n\n      lastprint256 = cert.fingerprint256;\n      cert = cert.issuerCertificate;\n    } while (cert.fingerprint256 !== lastprint256);\n\n  },\n};\n\noptions.agent = new https.Agent(options);\nconst req = https.request(options, (res) => {\n  console.log('All OK. Server matched our pinned cert or public key');\n  console.log('statusCode:', res.statusCode);\n  // Print the HPKP values\n  console.log('headers:', res.headers['public-key-pins']);\n\n  res.on('data', (d) => {});\n});\n\nreq.on('error', (e) => {\n  console.error(e.message);\n});\nreq.end();\nOutputs for example:\n\nSubject Common Name: github.com\n  Certificate SHA256 fingerprint: 25:FE:39:32:D9:63:8C:8A:FC:A1:9A:29:87:D8:3E:4C:1D:98:DB:71:E4:1A:48:03:98:EA:22:6A:BD:8B:93:16\n  Public key ping-sha256: pL1+qb9HTMRZJmuC/bB/ZI9d302BYrrqiVuRyW+DGrU=\nSubject Common Name: DigiCert SHA2 Extended Validation Server CA\n  Certificate SHA256 fingerprint: 40:3E:06:2A:26:53:05:91:13:28:5B:AF:80:A0:D4:AE:42:2C:84:8C:9F:78:FA:D0:1F:C9:4B:C5:B8:7F:EF:1A\n  Public key ping-sha256: RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\nSubject Common Name: DigiCert High Assurance EV Root CA\n  Certificate SHA256 fingerprint: 74:31:E5:F4:C3:C1:CE:46:90:77:4F:0B:61:E0:54:40:88:3B:A9:A0:1E:D0:0B:A6:AB:D7:80:6E:D3:B1:18:CF\n  Public key ping-sha256: WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\nAll OK. Server matched our pinned cert or public key\nstatusCode: 200\nheaders: max-age=0; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\";", "doc_id": "df843395-b69e-473c-bd40-3070f7dddf73", "embedding": null, "doc_hash": "76ed3bb96e6e9e5376273536c7a2866a59c8023035d4942731084ff75a27b6c6", "extra_info": null, "node_info": {"start": 1667337, "end": 1669637}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "27c5a902-3c45-4f7e-a0dd-b37a7c2cfd31", "3": "6991334e-eb0b-4620-b616-3bdbed967065"}}, "__type__": "1"}, "6991334e-eb0b-4620-b616-3bdbed967065": {"__data__": {"text": " Public key ping-sha256: WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\nAll OK. Server matched our pinned cert or public key\nstatusCode: 200\nheaders: max-age=0; pin-sha256=\"WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\"; pin-sha256=\"RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\"; pin-sha256=\"k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=\"; pin-sha256=\"K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=\"; pin-sha256=\"IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=\"; pin-sha256=\"iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=\"; pin-sha256=\"LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=\"; includeSubDomains\nInspector#\nStability: 2 - Stable\nSource Code: lib/inspector.js\n\nThe node:inspector module provides an API for interacting with the V8 inspector.\n\nIt can be accessed using:\n\nconst inspector = require('node:inspector');\ninspector.close()#\nHistory\nDeactivate the inspector. Blocks until there are no active connections.\n\ninspector.console#\n<Object> An object to send messages to the remote inspector console.\nrequire('node:inspector').console.log('a message');\nThe inspector console does not have API parity with Node.js console.\n\ninspector.open([port[, host[, wait]]])#\nport <number> Port to listen on for inspector connections. Optional. Default: what was specified on the CLI.\nhost <string> Host to listen on for inspector connections. Optional. Default: what was specified on the CLI.\nwait <boolean> Block until a client has connected. Optional. Default: false.\nActivate inspector on host and port. Equivalent to node --inspect=[[host:]port], but can be done programmatically after node has started.\n\nIf wait is true, will block until a client has connected to the inspect port and flow control has been passed to the debugger client.\n\nSee the security warning regarding the host parameter usage.\n\ninspector.url()#\nReturns: <string> | <undefined>\nReturn the URL of the active inspector, or undefined if there is none.\n\n$ node --inspect -p 'inspector.url()'\nDebugger listening on ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34\nFor help, see: https://nodejs.org/en/docs/inspector\nws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34\n\n$ node --inspect=localhost:3000 -p 'inspector.url()'\nDebugger listening on ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a\nFor help, see: https://nodejs.org/en/docs/inspector\nws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a\n\n$ node -p 'inspector.url()'\nundefined\ninspector.waitForDebugger()#\nAdded in: v12.7.0\nBlocks until a client (existing or connected later) has sent Runtime.runIfWaitingForDebugger command.\n\nAn exception will be thrown if there is no active", "doc_id": "6991334e-eb0b-4620-b616-3bdbed967065", "embedding": null, "doc_hash": "753becfcf7e8d4a8717184b48d9bb599dd37c9b5b5f85f6bb3f13360777e10d0", "extra_info": null, "node_info": {"start": 1669784, "end": 1672400}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "df843395-b69e-473c-bd40-3070f7dddf73", "3": "bd079558-1da8-4b38-abb2-301cd48f0124"}}, "__type__": "1"}, "bd079558-1da8-4b38-abb2-301cd48f0124": {"__data__": {"text": "node --inspect=localhost:3000 -p 'inspector.url()'\nDebugger listening on ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a\nFor help, see: https://nodejs.org/en/docs/inspector\nws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a\n\n$ node -p 'inspector.url()'\nundefined\ninspector.waitForDebugger()#\nAdded in: v12.7.0\nBlocks until a client (existing or connected later) has sent Runtime.runIfWaitingForDebugger command.\n\nAn exception will be thrown if there is no active inspector.\n\nClass: inspector.Session#\nExtends: <EventEmitter>\nThe inspector.Session is used for dispatching messages to the V8 inspector back-end and receiving message responses and notifications.\n\nnew inspector.Session()#\nAdded in: v8.0.0\nCreate a new instance of the inspector.Session class. The inspector session needs to be connected through session.connect() before the messages can be dispatched to the inspector backend.\n\nEvent: 'inspectorNotification'#\nAdded in: v8.0.0\n<Object> The notification message object\nEmitted when any notification from the V8 Inspector is received.\n\nsession.on('inspectorNotification', (message) => console.log(message.method));\n// Debugger.paused\n// Debugger.resumed\nIt is also possible to subscribe only to notifications with specific method:\n\nEvent: <inspector-protocol-method>;#\nAdded in: v8.0.0\n<Object> The notification message object\nEmitted when an inspector notification is received that has its method field set to the <inspector-protocol-method> value.\n\nThe following snippet installs a listener on the 'Debugger.paused' event, and prints the reason for program suspension whenever program execution is suspended (through breakpoints, for example):\n\nsession.on('Debugger.paused', ({ params }) => {\n  console.log(params.hitBreakpoints);\n});\n// [ '/the/file/that/has/the/breakpoint.js:11:0' ]\nsession.connect()#\nAdded in: v8.0.0\nConnects a session to the inspector back-end.\n\nsession.connectToMainThread()#\nAdded in: v12.11.0\nConnects a session to the main thread inspector back-end. An exception will be thrown if this API was not called on a Worker thread.\n\nsession.disconnect()#\nAdded in: v8.0.0\nImmediately close the session. All pending message callbacks will be called with an error. session.connect() will need to be called to be able to send messages again. Reconnected session will lose all inspector state, such as enabled agents or configured breakpoints.\n\nsession.post(method[, params][, callback])#\nHistory\nmethod <string>\nparams <Object>\ncallback <Function>\nPosts a message to the inspector back-end. callback will be notified when a response is received. callback is a function that accepts two optional arguments: error and message-specific result.\n\nsession.post('Runtime.evaluate', { expression: '2 + 2' },\n             (error, { result }) => console.log(result));\n// Output: { type: 'number', value: 4, description: '4' }\nThe latest version of the V8 inspector protocol is published on the Chrome DevTools Protocol Viewer.\n\nNode.js inspector supports all the Chrome DevTools Protocol domains declared by V8. Chrome DevTools Protocol domain provides an interface for interacting with one of the runtime agents used to inspect the application state and listen to the run-time events.\n\nYou can not set reportProgress to true when sending a HeapProfiler.takeHeapSnapshot or HeapProfiler.stopTrackingHeapObjects command to V8.\n\nExample usage#\nApart from", "doc_id": "bd079558-1da8-4b38-abb2-301cd48f0124", "embedding": null, "doc_hash": "b3d141732c1a771baa911a1ccc1ca659e3adae4da1c3f7d751cb6f947bca29ae", "extra_info": null, "node_info": {"start": 1672217, "end": 1675605}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6991334e-eb0b-4620-b616-3bdbed967065", "3": "55cb1735-ad8d-4fad-a22a-4e1bdb7e4c0d"}}, "__type__": "1"}, "55cb1735-ad8d-4fad-a22a-4e1bdb7e4c0d": {"__data__": {"text": "{ expression: '2 + 2' },\n             (error, { result }) => console.log(result));\n// Output: { type: 'number', value: 4, description: '4' }\nThe latest version of the V8 inspector protocol is published on the Chrome DevTools Protocol Viewer.\n\nNode.js inspector supports all the Chrome DevTools Protocol domains declared by V8. Chrome DevTools Protocol domain provides an interface for interacting with one of the runtime agents used to inspect the application state and listen to the run-time events.\n\nYou can not set reportProgress to true when sending a HeapProfiler.takeHeapSnapshot or HeapProfiler.stopTrackingHeapObjects command to V8.\n\nExample usage#\nApart from the debugger, various V8 Profilers are available through the DevTools protocol.\n\nCPU profiler#\nHere's an example showing how to use the CPU Profiler:\n\nconst inspector = require('node:inspector');\nconst fs = require('node:fs');\nconst session = new inspector.Session();\nsession.connect();\n\nsession.post('Profiler.enable', () => {\n  session.post('Profiler.start', () => {\n    // Invoke business logic under measurement here...\n\n    // some time later...\n    session.post('Profiler.stop', (err, { profile }) => {\n      // Write profile to disk, upload, etc.\n      if (!err) {\n        fs.writeFileSync('./profile.cpuprofile', JSON.stringify(profile));\n      }\n    });\n  });\n});\nHeap profiler#\nHere's an example showing how to use the Heap Profiler:\n\nconst inspector = require('node:inspector');\nconst fs = require('node:fs');\nconst session = new inspector.Session();\n\nconst fd = fs.openSync('profile.heapsnapshot', 'w');\n\nsession.connect();\n\nsession.on('HeapProfiler.addHeapSnapshotChunk', (m) => {\n  fs.writeSync(fd, m.params.chunk);\n});\n\nsession.post('HeapProfiler.takeHeapSnapshot', null, (err, r) => {\n  console.log('HeapProfiler.takeHeapSnapshot done:', err, r);\n  session.disconnect();\n  fs.closeSync(fd);\n});\nInternationalization support#\nNode.js has many features that make it easier to write internationalized programs. Some of them are:\n\nLocale-sensitive or Unicode-aware functions in the ECMAScript Language Specification:\nString.prototype.normalize()\nString.prototype.toLowerCase()\nString.prototype.toUpperCase()\nAll functionality described in the ECMAScript Internationalization API Specification (aka ECMA-402):\nIntl object\nLocale-sensitive methods like String.prototype.localeCompare() and Date.prototype.toLocaleString()\nThe WHATWG URL parser's internationalized domain names (IDNs) support\nrequire('node:buffer').transcode()\nMore accurate REPL line editing\nrequire('node:util').TextDecoder\nRegExp Unicode Property Escapes\nNode.js and the underlying V8 engine use International Components for Unicode (ICU) to implement these features in native C/C++ code. The full ICU data set is provided by Node.js by default. However, due to the size of the ICU data file, several options are provided for customizing the ICU data set either when building or running Node.js.\n\nOptions for building Node.js#\nTo control how ICU is used in Node.js, four configure options are available during compilation. Additional details on how to compile Node.js are documented in BUILDING.md.\n\n--with-intl=none/--without-intl\n--with-intl=system-icu\n--with-intl=small-icu\n--with-intl=full-icu (default)\nAn overview of available Node.js and JavaScript features for each configure", "doc_id": "55cb1735-ad8d-4fad-a22a-4e1bdb7e4c0d", "embedding": null, "doc_hash": "7bae6a6cafe3d931c1bb9fdd26038a0b4b493c2c2f5d405cbf2f5bb1964fd362", "extra_info": null, "node_info": {"start": 1675484, "end": 1678814}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "bd079558-1da8-4b38-abb2-301cd48f0124", "3": "4c0824d7-2a88-426f-abab-be3406eb835c"}}, "__type__": "1"}, "4c0824d7-2a88-426f-abab-be3406eb835c": {"__data__": {"text": "the underlying V8 engine use International Components for Unicode (ICU) to implement these features in native C/C++ code. The full ICU data set is provided by Node.js by default. However, due to the size of the ICU data file, several options are provided for customizing the ICU data set either when building or running Node.js.\n\nOptions for building Node.js#\nTo control how ICU is used in Node.js, four configure options are available during compilation. Additional details on how to compile Node.js are documented in BUILDING.md.\n\n--with-intl=none/--without-intl\n--with-intl=system-icu\n--with-intl=small-icu\n--with-intl=full-icu (default)\nAn overview of available Node.js and JavaScript features for each configure option:\n\nFeature\tnone\tsystem-icu\tsmall-icu\tfull-icu\nString.prototype.normalize()\tnone (function is no-op)\tfull\tfull\tfull\nString.prototype.to*Case()\tfull\tfull\tfull\tfull\nIntl\tnone (object does not exist)\tpartial/full (depends on OS)\tpartial (English-only)\tfull\nString.prototype.localeCompare()\tpartial (not locale-aware)\tfull\tfull\tfull\nString.prototype.toLocale*Case()\tpartial (not locale-aware)\tfull\tfull\tfull\nNumber.prototype.toLocaleString()\tpartial (not locale-aware)\tpartial/full (depends on OS)\tpartial (English-only)\tfull\nDate.prototype.toLocale*String()\tpartial (not locale-aware)\tpartial/full (depends on OS)\tpartial (English-only)\tfull\nLegacy URL Parser\tpartial (no IDN support)\tfull\tfull\tfull\nWHATWG URL Parser\tpartial (no IDN support)\tfull\tfull\tfull\nrequire('node:buffer').transcode()\tnone (function does not exist)\tfull\tfull\tfull\nREPL\tpartial (inaccurate line editing)\tfull\tfull\tfull\nrequire('node:util').TextDecoder\tpartial (basic encodings support)\tpartial/full (depends on OS)\tpartial (Unicode-only)\tfull\nRegExp Unicode Property Escapes\tnone (invalid RegExp error)\tfull\tfull\tfull\nThe \"(not locale-aware)\" designation denotes that the function carries out its operation just like the non-Locale version of the function, if one exists. For example, under none mode, Date.prototype.toLocaleString()'s operation is identical to that of Date.prototype.toString().\n\nDisable all internationalization features (none)#\nIf this option is chosen, ICU is disabled and most internationalization features mentioned above will be unavailable in the resulting node binary.\n\nBuild with a pre-installed ICU (system-icu)#\nNode.js can link against an ICU build already installed on the system. In fact, most Linux distributions already come with ICU installed, and this option would make it possible to reuse the same set of data used by other components in the OS.\n\nFunctionalities that only require the ICU library itself, such as String.prototype.normalize() and the WHATWG URL parser, are fully supported under system-icu. Features that require ICU locale data in addition, such as Intl.DateTimeFormat may be fully or partially supported, depending on the completeness of the ICU data installed on the system.\n\nEmbed a limited set of ICU data (small-icu)#\nThis option makes the resulting binary link against the ICU library statically, and includes a subset of ICU data (typically only the English locale) within the node executable.\n\nFunctionalities that only require the ICU library itself, such as String.prototype.normalize() and the WHATWG URL parser, are fully supported under small-icu. Features that require ICU locale data in addition, such as Intl.DateTimeFormat, generally only work with the English locale:\n\nconst january = new Date(9e8);\nconst english = new Intl.DateTimeFormat('en', { month: 'long' });\nconst spanish = new Intl.DateTimeFormat('es', { month: 'long'", "doc_id": "4c0824d7-2a88-426f-abab-be3406eb835c", "embedding": null, "doc_hash": "ac419f2d08a03b0b5678af87cf3e7eb276bdc83251e58fc6a147a08a9266dae5", "extra_info": null, "node_info": {"start": 1678757, "end": 1682350}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "55cb1735-ad8d-4fad-a22a-4e1bdb7e4c0d", "3": "cfc0ee0d-4182-4c10-a058-e6633ba0bb9a"}}, "__type__": "1"}, "cfc0ee0d-4182-4c10-a058-e6633ba0bb9a": {"__data__": {"text": "depending on the completeness of the ICU data installed on the system.\n\nEmbed a limited set of ICU data (small-icu)#\nThis option makes the resulting binary link against the ICU library statically, and includes a subset of ICU data (typically only the English locale) within the node executable.\n\nFunctionalities that only require the ICU library itself, such as String.prototype.normalize() and the WHATWG URL parser, are fully supported under small-icu. Features that require ICU locale data in addition, such as Intl.DateTimeFormat, generally only work with the English locale:\n\nconst january = new Date(9e8);\nconst english = new Intl.DateTimeFormat('en', { month: 'long' });\nconst spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n\nconsole.log(english.format(january));\n// Prints \"January\"\nconsole.log(spanish.format(january));\n// Prints either \"M01\" or \"January\" on small-icu, depending on the user\u2019s default locale\n// Should print \"enero\"\nThis mode provides a balance between features and binary size.\n\nProviding ICU data at runtime#\nIf the small-icu option is used, one can still provide additional locale data at runtime so that the JS methods would work for all ICU locales. Assuming the data file is stored at /some/directory, it can be made available to ICU through either:\n\nThe NODE_ICU_DATA environment variable:\n\nenv NODE_ICU_DATA=/some/directory node\nThe --icu-data-dir CLI parameter:\n\nnode --icu-data-dir=/some/directory\n(If both are specified, the --icu-data-dir CLI parameter takes precedence.)\n\nICU is able to automatically find and load a variety of data formats, but the data must be appropriate for the ICU version, and the file correctly named. The most common name for the data file is icudt6X[bl].dat, where 6X denotes the intended ICU version, and b or l indicates the system's endianness. Check \"ICU Data\" article in the ICU User Guide for other supported formats and more details on ICU data in general.\n\nThe full-icu npm module can greatly simplify ICU data installation by detecting the ICU version of the running node executable and downloading the appropriate data file. After installing the module through npm i full-icu, the data file will be available at ./node_modules/full-icu. This path can be then passed either to NODE_ICU_DATA or --icu-data-dir as shown above to enable full Intl support.\n\nEmbed the entire ICU (full-icu)#\nThis option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. This is the default behavior if no --with-intl flag is passed. The official binaries are also built in this mode.\n\nDetecting internationalization support#\nTo verify that ICU is enabled at all (system-icu, small-icu, or full-icu), simply checking the existence of Intl should suffice:\n\nconst hasICU = typeof Intl === 'object';\nAlternatively, checking for process.versions.icu, a property defined only when ICU is enabled, works too:\n\nconst hasICU = typeof process.versions.icu === 'string';\nTo check for support for a non-English locale (i.e. full-icu or system-icu), Intl.DateTimeFormat can be a good distinguishing factor:\n\nconst hasFullICU = (() => {\n  try {\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    return spanish.format(january) === 'enero';\n  } catch (err) {\n    return false;\n  }\n})();\nFor more verbose tests for Intl support, the following resources may be found to be", "doc_id": "cfc0ee0d-4182-4c10-a058-e6633ba0bb9a", "embedding": null, "doc_hash": "ee5a2c8cf5433ce9d702ef9f1cb78c36276e8b27202ee0cd0ffa8ffc59e8098a", "extra_info": null, "node_info": {"start": 1682337, "end": 1685872}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4c0824d7-2a88-426f-abab-be3406eb835c", "3": "b2d86efa-0e2f-47a7-af6f-7bcf090b1c47"}}, "__type__": "1"}, "b2d86efa-0e2f-47a7-af6f-7bcf090b1c47": {"__data__": {"text": "checking for process.versions.icu, a property defined only when ICU is enabled, works too:\n\nconst hasICU = typeof process.versions.icu === 'string';\nTo check for support for a non-English locale (i.e. full-icu or system-icu), Intl.DateTimeFormat can be a good distinguishing factor:\n\nconst hasFullICU = (() => {\n  try {\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    return spanish.format(january) === 'enero';\n  } catch (err) {\n    return false;\n  }\n})();\nFor more verbose tests for Intl support, the following resources may be found to be helpful:\n\nbtest402: Generally used to check whether Node.js with Intl support is built correctly.\nTest262: ECMAScript's official conformance test suite includes a section dedicated to ECMA-402.\nModules: CommonJS modules#\nStability: 2 - Stable\nCommonJS modules are the original way to package JavaScript code for Node.js. Node.js also supports the ECMAScript modules standard used by browsers and other JavaScript runtimes.\n\nIn Node.js, each file is treated as a separate module. For example, consider a file named foo.js:\n\nconst circle = require('./circle.js');\nconsole.log(`The area of a circle of radius 4 is ${circle.area(4)}`);\nOn the first line, foo.js loads the module circle.js that is in the same directory as foo.js.\n\nHere are the contents of circle.js:\n\nconst { PI } = Math;\n\nexports.area = (r) => PI * r ** 2;\n\nexports.circumference = (r) => 2 * PI * r;\nThe module circle.js has exported the functions area() and circumference(). Functions and objects are added to the root of a module by specifying additional properties on the special exports object.\n\nVariables local to the module will be private, because the module is wrapped in a function by Node.js (see module wrapper). In this example, the variable PI is private to circle.js.\n\nThe module.exports property can be assigned a new value (such as a function or object).\n\nBelow, bar.js makes use of the square module, which exports a Square class:\n\nconst Square = require('./square.js');\nconst mySquare = new Square(2);\nconsole.log(`The area of mySquare is ${mySquare.area()}`);\nThe square module is defined in square.js:\n\n// Assigning to exports will not modify module, must use module.exports\nmodule.exports = class Square {\n  constructor(width) {\n    this.width = width;\n  }\n\n  area() {\n    return this.width ** 2;\n  }\n};\nThe CommonJS module system is implemented in the module core module.\n\nEnabling#\nNode.js has two module systems: CommonJS modules and ECMAScript modules.\n\nBy default, Node.js will treat the following as CommonJS modules:\n\nFiles with a .cjs extension;\n\nFiles with a .js extension when the nearest parent package.json file contains a top-level field \"type\" with a value of \"commonjs\".\n\nFiles with a .js extension when the nearest parent package.json file doesn't contain a top-level field \"type\". Package authors should include the \"type\" field, even in packages where all sources are CommonJS. Being explicit about the type of the package will make things easier for build tools and loaders to determine how the files in the package should be interpreted.\n\nFiles with an extension that is not .mjs, .cjs, .json, .node, or .js (when the nearest parent package.json file contains a top-level field \"type\" with a value of \"module\", those files will be recognized as CommonJS modules only if they are being included via require(), not when used as the command-line entry point of the program).\n\nSee Determining module system for more details.\n\nCalling require() always use the CommonJS module loader. Calling import()", "doc_id": "b2d86efa-0e2f-47a7-af6f-7bcf090b1c47", "embedding": null, "doc_hash": "113ab5d1a68f9594457bf465e733358c5b97786cea8cde3c847ee563ec012cd4", "extra_info": null, "node_info": {"start": 1686005, "end": 1689609}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cfc0ee0d-4182-4c10-a058-e6633ba0bb9a", "3": "8b90ac34-39c0-470b-8e8a-aeac73415acc"}}, "__type__": "1"}, "8b90ac34-39c0-470b-8e8a-aeac73415acc": {"__data__": {"text": "with a .js extension when the nearest parent package.json file doesn't contain a top-level field \"type\". Package authors should include the \"type\" field, even in packages where all sources are CommonJS. Being explicit about the type of the package will make things easier for build tools and loaders to determine how the files in the package should be interpreted.\n\nFiles with an extension that is not .mjs, .cjs, .json, .node, or .js (when the nearest parent package.json file contains a top-level field \"type\" with a value of \"module\", those files will be recognized as CommonJS modules only if they are being included via require(), not when used as the command-line entry point of the program).\n\nSee Determining module system for more details.\n\nCalling require() always use the CommonJS module loader. Calling import() always use the ECMAScript module loader.\n\nAccessing the main module#\nWhen a file is run directly from Node.js, require.main is set to its module. That means that it is possible to determine whether a file has been run directly by testing require.main === module.\n\nFor a file foo.js, this will be true if run via node foo.js, but false if run by require('./foo').\n\nWhen the entry point is not a CommonJS module, require.main is undefined, and the main module is out of reach.\n\nPackage manager tips#\nThe semantics of the Node.js require() function were designed to be general enough to support reasonable directory structures. Package manager programs such as dpkg, rpm, and npm will hopefully find it possible to build native packages from Node.js modules without modification.\n\nBelow we give a suggested directory structure that could work:\n\nLet's say that we wanted to have the folder at /usr/lib/node/<some-package>/<some-version> hold the contents of a specific version of a package.\n\nPackages can depend on one another. In order to install package foo, it may be necessary to install a specific version of package bar. The bar package may itself have dependencies, and in some cases, these may even collide or form cyclic dependencies.\n\nBecause Node.js looks up the realpath of any modules it loads (that is, it resolves symlinks) and then looks for their dependencies in node_modules folders, this situation can be resolved with the following architecture:\n\n/usr/lib/node/foo/1.2.3/: Contents of the foo package, version 1.2.3.\n/usr/lib/node/bar/4.3.2/: Contents of the bar package that foo depends on.\n/usr/lib/node/foo/1.2.3/node_modules/bar: Symbolic link to /usr/lib/node/bar/4.3.2/.\n/usr/lib/node/bar/4.3.2/node_modules/*: Symbolic links to the packages that bar depends on.\nThus, even if a cycle is encountered, or if there are dependency conflicts, every module will be able to get a version of its dependency that it can use.\n\nWhen the code in the foo package does require('bar'), it will get the version that is symlinked into /usr/lib/node/foo/1.2.3/node_modules/bar. Then, when the code in the bar package calls require('quux'), it'll get the version that is symlinked into /usr/lib/node/bar/4.3.2/node_modules/quux.\n\nFurthermore, to make the module lookup process even more optimal, rather than putting packages directly in /usr/lib/node, we could put them in /usr/lib/node_modules/<name>/<version>. Then Node.js will not bother looking for missing dependencies in /usr/node_modules or /node_modules.\n\nIn order to make modules available to the Node.js REPL, it might be useful to also add the /usr/lib/node_modules folder to the $NODE_PATH environment variable. Since the module lookups using node_modules folders are all relative, and based on the real path of the files making the calls to require(), the packages themselves can be anywhere.\n\nThe .mjs extension#\nDue to the synchronous nature of require(), it is not possible to", "doc_id": "8b90ac34-39c0-470b-8e8a-aeac73415acc", "embedding": null, "doc_hash": "3828d5c18622773c630b404b105380287c678d99b127765bc9de19ce39c75d8d", "extra_info": null, "node_info": {"start": 1689421, "end": 1693191}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b2d86efa-0e2f-47a7-af6f-7bcf090b1c47", "3": "35daa43a-a023-4f93-8d32-41aea5315ef0"}}, "__type__": "1"}, "35daa43a-a023-4f93-8d32-41aea5315ef0": {"__data__": {"text": "to make the module lookup process even more optimal, rather than putting packages directly in /usr/lib/node, we could put them in /usr/lib/node_modules/<name>/<version>. Then Node.js will not bother looking for missing dependencies in /usr/node_modules or /node_modules.\n\nIn order to make modules available to the Node.js REPL, it might be useful to also add the /usr/lib/node_modules folder to the $NODE_PATH environment variable. Since the module lookups using node_modules folders are all relative, and based on the real path of the files making the calls to require(), the packages themselves can be anywhere.\n\nThe .mjs extension#\nDue to the synchronous nature of require(), it is not possible to use it to load ECMAScript module files. Attempting to do so will throw a ERR_REQUIRE_ESM error. Use import() instead.\n\nThe .mjs extension is reserved for ECMAScript Modules which cannot be loaded via require(). See Determining module system section for more info regarding which files are parsed as ECMAScript modules.\n\nAll together#\nTo get the exact filename that will be loaded when require() is called, use the require.resolve() function.\n\nPutting together all of the above, here is the high-level algorithm in pseudocode of what require() does:\n\nrequire(X) from module at path Y\n1. If X is a core module,\n   a. return the core module\n   b. STOP\n2. If X begins with '/'\n   a. set Y to be the file system root\n3. If X begins with './' or '/' or '../'\n   a. LOAD_AS_FILE(Y + X)\n   b. LOAD_AS_DIRECTORY(Y + X)\n   c. THROW \"not found\"\n4. If X begins with '#'\n   a. LOAD_PACKAGE_IMPORTS(X, dirname(Y))\n5. LOAD_PACKAGE_SELF(X, dirname(Y))\n6. LOAD_NODE_MODULES(X, dirname(Y))\n7. THROW \"not found\"\n\nLOAD_AS_FILE(X)\n1. If X is a file, load X as its file extension format. STOP\n2. If X.js is a file, load X.js as JavaScript text. STOP\n3. If X.json is a file, parse X.json to a JavaScript Object. STOP\n4. If X.node is a file, load X.node as binary addon. STOP\n\nLOAD_INDEX(X)\n1. If X/index.js is a file, load X/index.js as JavaScript text. STOP\n2. If X/index.json is a file, parse X/index.json to a JavaScript object. STOP\n3. If X/index.node is a file, load X/index.node as binary addon. STOP\n\nLOAD_AS_DIRECTORY(X)\n1. If X/package.json is a file,\n   a. Parse X/package.json, and look for \"main\" field.\n   b. If \"main\" is a falsy value, GOTO 2.\n   c. let M = X + (json main field)\n   d. LOAD_AS_FILE(M)\n   e. LOAD_INDEX(M)\n   f. LOAD_INDEX(X) DEPRECATED\n   g. THROW \"not found\"\n2. LOAD_INDEX(X)\n\nLOAD_NODE_MODULES(X, START)\n1. let DIRS = NODE_MODULES_PATHS(START)\n2. for each DIR in DIRS:\n   a. LOAD_PACKAGE_EXPORTS(X, DIR)\n   b. LOAD_AS_FILE(DIR/X)\n   c. LOAD_AS_DIRECTORY(DIR/X)\n\nNODE_MODULES_PATHS(START)\n1. let PARTS = path split(START)\n2. let I = count of PARTS - 1\n3. let DIRS = []\n4. while I >= 0,\n   a. if PARTS[I] =", "doc_id": "35daa43a-a023-4f93-8d32-41aea5315ef0", "embedding": null, "doc_hash": "db8e3fbc469d57950864b68776ccdebc4ea717eda96b6c4ff4ea602ed2dc27c1", "extra_info": null, "node_info": {"start": 1693287, "end": 1696102}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8b90ac34-39c0-470b-8e8a-aeac73415acc", "3": "a09fce7c-1e38-4399-bf90-054899da8a4e"}}, "__type__": "1"}, "a09fce7c-1e38-4399-bf90-054899da8a4e": {"__data__": {"text": "LOAD_INDEX(X) DEPRECATED\n   g. THROW \"not found\"\n2. LOAD_INDEX(X)\n\nLOAD_NODE_MODULES(X, START)\n1. let DIRS = NODE_MODULES_PATHS(START)\n2. for each DIR in DIRS:\n   a. LOAD_PACKAGE_EXPORTS(X, DIR)\n   b. LOAD_AS_FILE(DIR/X)\n   c. LOAD_AS_DIRECTORY(DIR/X)\n\nNODE_MODULES_PATHS(START)\n1. let PARTS = path split(START)\n2. let I = count of PARTS - 1\n3. let DIRS = []\n4. while I >= 0,\n   a. if PARTS[I] = \"node_modules\" CONTINUE\n   b. DIR = path join(PARTS[0 .. I] + \"node_modules\")\n   c. DIRS = DIR + DIRS\n   d. let I = I - 1\n5. return DIRS + GLOBAL_FOLDERS\n\nLOAD_PACKAGE_IMPORTS(X, DIR)\n1. Find the closest package scope SCOPE to DIR.\n2. If no scope was found, return.\n3. If the SCOPE/package.json \"imports\" is null or undefined, return.\n4. let MATCH = PACKAGE_IMPORTS_RESOLVE(X, pathToFileURL(SCOPE),\n  [\"node\", \"require\"]) defined in the ESM resolver.\n5. RESOLVE_ESM_MATCH(MATCH).\n\nLOAD_PACKAGE_EXPORTS(X, DIR)\n1. Try to interpret X as a combination of NAME and SUBPATH where the name\n   may have a @scope/ prefix and the subpath begins with a slash (`/`).\n2. If X does not match this pattern or DIR/NAME/package.json is not a file,\n   return.\n3. Parse DIR/NAME/package.json, and look for \"exports\" field.\n4. If \"exports\" is null or undefined, return.\n5. let MATCH = PACKAGE_EXPORTS_RESOLVE(pathToFileURL(DIR/NAME), \".\" + SUBPATH,\n   `package.json` \"exports\", [\"node\", \"require\"]) defined in the ESM resolver.\n6. RESOLVE_ESM_MATCH(MATCH)\n\nLOAD_PACKAGE_SELF(X, DIR)\n1. Find the closest package scope SCOPE to DIR.\n2. If no scope was found, return.\n3. If the SCOPE/package.json \"exports\" is null or undefined, return.\n4. If the SCOPE/package.json \"name\" is not the first segment of X, return.\n5. let MATCH = PACKAGE_EXPORTS_RESOLVE(pathToFileURL(SCOPE),\n   \".\" + X.slice(\"name\".length), `package.json` \"exports\", [\"node\", \"require\"])\n   defined in the ESM resolver.\n6. RESOLVE_ESM_MATCH(MATCH)\n\nRESOLVE_ESM_MATCH(MATCH)\n1. let RESOLVED_PATH = fileURLToPath(MATCH)\n2. If the file at RESOLVED_PATH exists, load RESOLVED_PATH as its extension\n   format. STOP\n3. THROW \"not found\"\nCaching#\nModules are cached after the first time they are loaded. This means (among other things) that every call to require('foo') will get exactly the same object returned, if it would resolve to the same file.\n\nProvided require.cache is not modified, multiple calls to require('foo') will not cause the module code to be executed multiple times. This is an important feature. With it, \"partially done\" objects can be returned, thus allowing transitive dependencies to be loaded even when they would cause cycles.\n\nTo have a module execute code multiple times, export a function, and call that function.\n\nModule caching caveats#\nModules are cached based on their resolved filename. Since modules may resolve to a different filename based on the", "doc_id": "a09fce7c-1e38-4399-bf90-054899da8a4e", "embedding": null, "doc_hash": "c877ee5817f3d1a93ae7a8d9c6df99254cc22464291c8c0fa486fc9de55a4a92", "extra_info": null, "node_info": {"start": 1696365, "end": 1699181}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "35daa43a-a023-4f93-8d32-41aea5315ef0", "3": "989adcc8-90c5-4331-9ec5-1c2ef69f145f"}}, "__type__": "1"}, "989adcc8-90c5-4331-9ec5-1c2ef69f145f": {"__data__": {"text": "as its extension\n   format. STOP\n3. THROW \"not found\"\nCaching#\nModules are cached after the first time they are loaded. This means (among other things) that every call to require('foo') will get exactly the same object returned, if it would resolve to the same file.\n\nProvided require.cache is not modified, multiple calls to require('foo') will not cause the module code to be executed multiple times. This is an important feature. With it, \"partially done\" objects can be returned, thus allowing transitive dependencies to be loaded even when they would cause cycles.\n\nTo have a module execute code multiple times, export a function, and call that function.\n\nModule caching caveats#\nModules are cached based on their resolved filename. Since modules may resolve to a different filename based on the location of the calling module (loading from node_modules folders), it is not a guarantee that require('foo') will always return the exact same object, if it would resolve to different files.\n\nAdditionally, on case-insensitive file systems or operating systems, different resolved filenames can point to the same file, but the cache will still treat them as different modules and will reload the file multiple times. For example, require('./foo') and require('./FOO') return two different objects, irrespective of whether or not ./foo and ./FOO are the same file.\n\nCore modules#\nHistory\nNode.js has several modules compiled into the binary. These modules are described in greater detail elsewhere in this documentation.\n\nThe core modules are defined within the Node.js source and are located in the lib/ folder.\n\nCore modules can be identified using the node: prefix, in which case it bypasses the require cache. For instance, require('node:http') will always return the built in HTTP module, even if there is require.cache entry by that name.\n\nSome core modules are always preferentially loaded if their identifier is passed to require(). For instance, require('http') will always return the built-in HTTP module, even if there is a file by that name. The list of core modules that can be loaded without using the node: prefix is exposed as module.builtinModules.\n\nCycles#\nWhen there are circular require() calls, a module might not have finished executing when it is returned.\n\nConsider this situation:\n\na.js:\n\nconsole.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\nb.js:\n\nconsole.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\nmain.js:\n\nconsole.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done = %j, b.done = %j', a.done, b.done);\nWhen main.js loads a.js, then a.js in turn loads b.js. At that point, b.js tries to load a.js. In order to prevent an infinite loop, an unfinished copy of the a.js exports object is returned to the b.js module. b.js then finishes loading, and its exports object is provided to the a.js module.\n\nBy the time main.js has loaded both modules, they're both finished. The output of this program would thus be:\n\n$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done = true, b.done = true\nCareful planning is required to allow cyclic module dependencies to work correctly within an application.\n\nFile modules#\nIf the exact filename is not found, then Node.js will attempt to load the required filename with the added extensions: .js, .json, and finally .node. When loading a file that has a different extension (e.g. .cjs), its full", "doc_id": "989adcc8-90c5-4331-9ec5-1c2ef69f145f", "embedding": null, "doc_hash": "2f52e361b1f28339b9a9cadb1857e6d53167e04d1a4588afd2e828f5627b19d9", "extra_info": null, "node_info": {"start": 1698841, "end": 1702547}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a09fce7c-1e38-4399-bf90-054899da8a4e", "3": "d7992973-0d75-4b0f-9fdc-5e6dc20d4468"}}, "__type__": "1"}, "d7992973-0d75-4b0f-9fdc-5e6dc20d4468": {"__data__": {"text": "to the b.js module. b.js then finishes loading, and its exports object is provided to the a.js module.\n\nBy the time main.js has loaded both modules, they're both finished. The output of this program would thus be:\n\n$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done = true, b.done = true\nCareful planning is required to allow cyclic module dependencies to work correctly within an application.\n\nFile modules#\nIf the exact filename is not found, then Node.js will attempt to load the required filename with the added extensions: .js, .json, and finally .node. When loading a file that has a different extension (e.g. .cjs), its full name must be passed to require(), including its file extension (e.g. require('./file.cjs')).\n\n.json files are parsed as JSON text files, .node files are interpreted as compiled addon modules loaded with process.dlopen(). Files using any other extension (or no extension at all) are parsed as JavaScript text files. Refer to the Determining module system section to understand what parse goal will be used.\n\nA required module prefixed with '/' is an absolute path to the file. For example, require('/home/marco/foo.js') will load the file at /home/marco/foo.js.\n\nA required module prefixed with './' is relative to the file calling require(). That is, circle.js must be in the same directory as foo.js for require('./circle') to find it.\n\nWithout a leading '/', './', or '../' to indicate a file, the module must either be a core module or is loaded from a node_modules folder.\n\nIf the given path does not exist, require() will throw a MODULE_NOT_FOUND error.\n\nFolders as modules#\nStability: 3 - Legacy: Use subpath exports or subpath imports instead.\nThere are three ways in which a folder may be passed to require() as an argument.\n\nThe first is to create a package.json file in the root of the folder, which specifies a main module. An example package.json file might look like this:\n\n{ \"name\" : \"some-library\",\n  \"main\" : \"./lib/some-library.js\" }\nIf this was in a folder at ./some-library, then require('./some-library') would attempt to load ./some-library/lib/some-library.js.\n\nIf there is no package.json file present in the directory, or if the \"main\" entry is missing or cannot be resolved, then Node.js will attempt to load an index.js or index.node file out of that directory. For example, if there was no package.json file in the previous example, then require('./some-library') would attempt to load:\n\n./some-library/index.js\n./some-library/index.node\nIf these attempts fail, then Node.js will report the entire module as missing with the default error:\n\nError: Cannot find module 'some-library'\nIn all three above cases, an import('./some-library') call would result in a ERR_UNSUPPORTED_DIR_IMPORT error. Using package subpath exports or subpath imports can provide the same containment organization benefits as folders as modules, and work for both require and import.\n\nLoading from node_modules folders#\nIf the module identifier passed to require() is not a core module, and does not begin with '/', '../', or './', then Node.js starts at the directory of the current module, and adds /node_modules, and attempts to load the module from that location. Node.js will not append node_modules to a path already ending in node_modules.\n\nIf it is not found there, then it moves to the parent directory, and so on, until the root of the file system is reached.\n\nFor example, if the file at '/home/ry/projects/foo.js' called require('bar.js'), then Node.js would look in the following locations, in this", "doc_id": "d7992973-0d75-4b0f-9fdc-5e6dc20d4468", "embedding": null, "doc_hash": "a0235ff5dde7d10e9220d75343d8f3ce71b1d256ee33bfde4d4d7c79b8b36c38", "extra_info": null, "node_info": {"start": 1702633, "end": 1706248}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "989adcc8-90c5-4331-9ec5-1c2ef69f145f", "3": "39555c6c-44b6-46f0-adb7-24bbaf27c7ae"}}, "__type__": "1"}, "39555c6c-44b6-46f0-adb7-24bbaf27c7ae": {"__data__": {"text": "or subpath imports can provide the same containment organization benefits as folders as modules, and work for both require and import.\n\nLoading from node_modules folders#\nIf the module identifier passed to require() is not a core module, and does not begin with '/', '../', or './', then Node.js starts at the directory of the current module, and adds /node_modules, and attempts to load the module from that location. Node.js will not append node_modules to a path already ending in node_modules.\n\nIf it is not found there, then it moves to the parent directory, and so on, until the root of the file system is reached.\n\nFor example, if the file at '/home/ry/projects/foo.js' called require('bar.js'), then Node.js would look in the following locations, in this order:\n\n/home/ry/projects/node_modules/bar.js\n/home/ry/node_modules/bar.js\n/home/node_modules/bar.js\n/node_modules/bar.js\nThis allows programs to localize their dependencies, so that they do not clash.\n\nIt is possible to require specific files or sub modules distributed with a module by including a path suffix after the module name. For instance require('example-module/path/to/file') would resolve path/to/file relative to where example-module is located. The suffixed path follows the same module resolution semantics.\n\nLoading from the global folders#\nIf the NODE_PATH environment variable is set to a colon-delimited list of absolute paths, then Node.js will search those paths for modules if they are not found elsewhere.\n\nOn Windows, NODE_PATH is delimited by semicolons (;) instead of colons.\n\nNODE_PATH was originally created to support loading modules from varying paths before the current module resolution algorithm was defined.\n\nNODE_PATH is still supported, but is less necessary now that the Node.js ecosystem has settled on a convention for locating dependent modules. Sometimes deployments that rely on NODE_PATH show surprising behavior when people are unaware that NODE_PATH must be set. Sometimes a module's dependencies change, causing a different version (or even a different module) to be loaded as the NODE_PATH is searched.\n\nAdditionally, Node.js will search in the following list of GLOBAL_FOLDERS:\n\n1: $HOME/.node_modules\n2: $HOME/.node_libraries\n3: $PREFIX/lib/node\nWhere $HOME is the user's home directory, and $PREFIX is the Node.js configured node_prefix.\n\nThese are mostly for historic reasons.\n\nIt is strongly encouraged to place dependencies in the local node_modules folder. These will be loaded faster, and more reliably.\n\nThe module wrapper#\nBefore a module's code is executed, Node.js will wrap it with a function wrapper that looks like the following:\n\n(function(exports, require, module, __filename, __dirname) {\n// Module code actually lives in here\n});\nBy doing this, Node.js achieves a few things:\n\nIt keeps top-level variables (defined with var, const, or let) scoped to the module rather than the global object.\nIt helps to provide some global-looking variables that are actually specific to the module, such as:\nThe module and exports objects that the implementor can use to export values from the module.\nThe convenience variables __filename and __dirname, containing the module's absolute filename and directory path.\nThe module scope#\n__dirname#\nAdded in: v0.1.27\n<string>\nThe directory name of the current module. This is the same as the path.dirname() of the __filename.\n\nExample: running node example.js from /Users/mjr\n\nconsole.log(__dirname);\n// Prints: /Users/mjr\nconsole.log(path.dirname(__filename));\n// Prints: /Users/mjr\n__filename#\nAdded in: v0.0.1\n<string>\nThe file name of the current module. This is the current module file's absolute path with symlinks resolved.\n\nFor a main program this is not necessarily the same as the file name", "doc_id": "39555c6c-44b6-46f0-adb7-24bbaf27c7ae", "embedding": null, "doc_hash": "aef6ebf105f765a1b27a5c714ab0710aca65f5fd7b873e32c959d2d25e69ff8c", "extra_info": null, "node_info": {"start": 1706199, "end": 1709959}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d7992973-0d75-4b0f-9fdc-5e6dc20d4468", "3": "da9d3d0b-dca7-4569-9275-57f120868e1d"}}, "__type__": "1"}, "da9d3d0b-dca7-4569-9275-57f120868e1d": {"__data__": {"text": "to export values from the module.\nThe convenience variables __filename and __dirname, containing the module's absolute filename and directory path.\nThe module scope#\n__dirname#\nAdded in: v0.1.27\n<string>\nThe directory name of the current module. This is the same as the path.dirname() of the __filename.\n\nExample: running node example.js from /Users/mjr\n\nconsole.log(__dirname);\n// Prints: /Users/mjr\nconsole.log(path.dirname(__filename));\n// Prints: /Users/mjr\n__filename#\nAdded in: v0.0.1\n<string>\nThe file name of the current module. This is the current module file's absolute path with symlinks resolved.\n\nFor a main program this is not necessarily the same as the file name used in the command line.\n\nSee __dirname for the directory name of the current module.\n\nExamples:\n\nRunning node example.js from /Users/mjr\n\nconsole.log(__filename);\n// Prints: /Users/mjr/example.js\nconsole.log(__dirname);\n// Prints: /Users/mjr\nGiven two modules: a and b, where b is a dependency of a and there is a directory structure of:\n\n/Users/mjr/app/a.js\n/Users/mjr/app/node_modules/b/b.js\nReferences to __filename within b.js will return /Users/mjr/app/node_modules/b/b.js while references to __filename within a.js will return /Users/mjr/app/a.js.\n\nexports#\nAdded in: v0.1.12\n<Object>\nA reference to the module.exports that is shorter to type. See the section about the exports shortcut for details on when to use exports and when to use module.exports.\n\nmodule#\nAdded in: v0.1.16\n<module>\nA reference to the current module, see the section about the module object. In particular, module.exports is used for defining what a module exports and makes available through require().\n\nrequire(id)#\nAdded in: v0.1.13\nid <string> module name or path\nReturns: <any> exported module content\nUsed to import modules, JSON, and local files. Modules can be imported from node_modules. Local modules and JSON files can be imported using a relative path (e.g. ./, ./foo, ./bar/baz, ../foo) that will be resolved against the directory named by __dirname (if defined) or the current working directory. The relative paths of POSIX style are resolved in an OS independent fashion, meaning that the examples above will work on Windows in the same way they would on Unix systems.\n\n// Importing a local module with a path relative to the `__dirname` or current\n// working directory. (On Windows, this would resolve to .\\path\\myLocalModule.)\nconst myLocalModule = require('./path/myLocalModule');\n\n// Importing a JSON file:\nconst jsonData = require('./path/filename.json');\n\n// Importing a module from node_modules or Node.js built-in module:\nconst crypto = require('node:crypto');\nrequire.cache#\nAdded in: v0.3.0\n<Object>\nModules are cached in this object when they are required. By deleting a key value from this object, the next require will reload the module. This does not apply to native addons, for which reloading will result in an error.\n\nAdding or replacing entries is also possible. This cache is checked before built-in modules and if a name matching a built-in module is added to the cache, only node:-prefixed require calls are going to receive the built-in module. Use with care!\n\nconst assert = require('node:assert');\nconst realFs = require('node:fs');\n\nconst fakeFs = {};\nrequire.cache.fs = { exports: fakeFs };\n\nassert.strictEqual(require('fs'), fakeFs);\nassert.strictEqual(require('node:fs'), realFs);\nrequire.extensions#\nAdded in: v0.3.0Deprecated since: v0.10.6\nStability: 0 -", "doc_id": "da9d3d0b-dca7-4569-9275-57f120868e1d", "embedding": null, "doc_hash": "78d4506eb615422440b98586fcc77e2c7b5f7ad1cc2f0ac5b7566ab1173fd8b4", "extra_info": null, "node_info": {"start": 1710004, "end": 1713465}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "39555c6c-44b6-46f0-adb7-24bbaf27c7ae", "3": "49aee804-3068-4c1c-88dd-d786eb641fb4"}}, "__type__": "1"}, "49aee804-3068-4c1c-88dd-d786eb641fb4": {"__data__": {"text": "object, the next require will reload the module. This does not apply to native addons, for which reloading will result in an error.\n\nAdding or replacing entries is also possible. This cache is checked before built-in modules and if a name matching a built-in module is added to the cache, only node:-prefixed require calls are going to receive the built-in module. Use with care!\n\nconst assert = require('node:assert');\nconst realFs = require('node:fs');\n\nconst fakeFs = {};\nrequire.cache.fs = { exports: fakeFs };\n\nassert.strictEqual(require('fs'), fakeFs);\nassert.strictEqual(require('node:fs'), realFs);\nrequire.extensions#\nAdded in: v0.3.0Deprecated since: v0.10.6\nStability: 0 - Deprecated\n<Object>\nInstruct require on how to handle certain file extensions.\n\nProcess files with the extension .sjs as .js:\n\nrequire.extensions['.sjs'] = require.extensions['.js'];\nDeprecated. In the past, this list has been used to load non-JavaScript modules into Node.js by compiling them on-demand. However, in practice, there are much better ways to do this, such as loading modules via some other Node.js program, or compiling them to JavaScript ahead of time.\n\nAvoid using require.extensions. Use could cause subtle bugs and resolving the extensions gets slower with each registered extension.\n\nrequire.main#\nAdded in: v0.1.17\n<module> | <undefined>\nThe Module object representing the entry script loaded when the Node.js process launched, or undefined if the entry point of the program is not a CommonJS module. See \"Accessing the main module\".\n\nIn entry.js script:\n\nconsole.log(require.main);\nnode entry.js\nModule {\n  id: '.',\n  path: '/absolute/path/to',\n  exports: {},\n  filename: '/absolute/path/to/entry.js',\n  loaded: false,\n  children: [],\n  paths:\n   [ '/absolute/path/to/node_modules',\n     '/absolute/path/node_modules',\n     '/absolute/node_modules',\n     '/node_modules' ] }\nrequire.resolve(request[, options])#\nHistory\nrequest <string> The module path to resolve.\noptions <Object>\npaths <string[]> Paths to resolve module location from. If present, these paths are used instead of the default resolution paths, with the exception of GLOBAL_FOLDERS like $HOME/.node_modules, which are always included. Each of these paths is used as a starting point for the module resolution algorithm, meaning that the node_modules hierarchy is checked from this location.\nReturns: <string>\nUse the internal require() machinery to look up the location of a module, but rather than loading the module, just return the resolved filename.\n\nIf the module can not be found, a MODULE_NOT_FOUND error is thrown.\n\nrequire.resolve.paths(request)#\nAdded in: v8.9.0\nrequest <string> The module path whose lookup paths are being retrieved.\nReturns: <string[]> | <null>\nReturns an array containing the paths searched during resolution of request or null if the request string references a core module, for example http or fs.\n\nThe module object#\nAdded in: v0.1.16\n<Object>\nIn each module, the module free variable is a reference to the object representing the current module. For convenience, module.exports is also accessible via the exports module-global. module is not actually a global but rather local to each module.\n\nmodule.children#\nAdded in: v0.1.16\n<module[]>\nThe module objects required for the first time by this one.\n\nmodule.exports#\nAdded in: v0.1.16\n<Object>\nThe module.exports object is created by the Module system. Sometimes this is not acceptable; many want their module to be an instance of some class. To do this, assign the desired export object to module.exports. Assigning the desired object to exports will simply rebind the local exports variable,", "doc_id": "49aee804-3068-4c1c-88dd-d786eb641fb4", "embedding": null, "doc_hash": "a4dde9175d1f6630d2b447cb61ed304a2f2514b3ad08304e4461d04c91bdbac5", "extra_info": null, "node_info": {"start": 1713466, "end": 1717117}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "da9d3d0b-dca7-4569-9275-57f120868e1d", "3": "6f984fa6-4bbf-43b1-b846-154737312fab"}}, "__type__": "1"}, "6f984fa6-4bbf-43b1-b846-154737312fab": {"__data__": {"text": "fs.\n\nThe module object#\nAdded in: v0.1.16\n<Object>\nIn each module, the module free variable is a reference to the object representing the current module. For convenience, module.exports is also accessible via the exports module-global. module is not actually a global but rather local to each module.\n\nmodule.children#\nAdded in: v0.1.16\n<module[]>\nThe module objects required for the first time by this one.\n\nmodule.exports#\nAdded in: v0.1.16\n<Object>\nThe module.exports object is created by the Module system. Sometimes this is not acceptable; many want their module to be an instance of some class. To do this, assign the desired export object to module.exports. Assigning the desired object to exports will simply rebind the local exports variable, which is probably not what is desired.\n\nFor example, suppose we were making a module called a.js:\n\nconst EventEmitter = require('node:events');\n\nmodule.exports = new EventEmitter();\n\n// Do some work, and after some time emit\n// the 'ready' event from the module itself.\nsetTimeout(() => {\n  module.exports.emit('ready');\n}, 1000);\nThen in another file we could do:\n\nconst a = require('./a');\na.on('ready', () => {\n  console.log('module \"a\" is ready');\n});\nAssignment to module.exports must be done immediately. It cannot be done in any callbacks. This does not work:\n\nx.js:\n\nsetTimeout(() => {\n  module.exports = { a: 'hello' };\n}, 0);\ny.js:\n\nconst x = require('./x');\nconsole.log(x.a);\nexports shortcut#\nAdded in: v0.1.16\nThe exports variable is available within a module's file-level scope, and is assigned the value of module.exports before the module is evaluated.\n\nIt allows a shortcut, so that module.exports.f = ... can be written more succinctly as exports.f = .... However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to module.exports:\n\nmodule.exports.hello = true; // Exported from require of module\nexports = { hello: false };  // Not exported, only available in the module\nWhen the module.exports property is being completely replaced by a new object, it is common to also reassign exports:\n\nmodule.exports = exports = function Constructor() {\n  // ... etc.\n};\nTo illustrate the behavior, imagine this hypothetical implementation of require(), which is quite similar to what is actually done by require():\n\nfunction require(/* ... */) {\n  const module = { exports: {} };\n  ((module, exports) => {\n    // Module code here. In this example, define a function.\n    function someFunc() {}\n    exports = someFunc;\n    // At this point, exports is no longer a shortcut to module.exports, and\n    // this module will still export an empty default object.\n    module.exports = someFunc;\n    // At this point, the module will now export someFunc, instead of the\n    // default object.\n  })(module, module.exports);\n  return module.exports;\n}\nmodule.filename#\nAdded in: v0.1.16\n<string>\nThe fully resolved filename of the module.\n\nmodule.id#\nAdded in: v0.1.16\n<string>\nThe identifier for the module. Typically this is the fully resolved filename.\n\nmodule.isPreloading#\nAdded in: v15.4.0, v14.17.0\nType: <boolean> true if the module is running during the Node.js preload phase.\nmodule.loaded#\nAdded in: v0.1.16\n<boolean>\nWhether or not the module is done loading, or is in the process of loading.\n\nmodule.parent#\nAdded in: v0.1.16Deprecated since: v14.6.0,", "doc_id": "6f984fa6-4bbf-43b1-b846-154737312fab", "embedding": null, "doc_hash": "d97e8f14426324a132b97aa9d8f7db090006cae780d90447062fb50e7e10db7d", "extra_info": null, "node_info": {"start": 1717069, "end": 1720429}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "49aee804-3068-4c1c-88dd-d786eb641fb4", "3": "3d6920fa-da79-4049-81eb-30a0384f3759"}}, "__type__": "1"}, "3d6920fa-da79-4049-81eb-30a0384f3759": {"__data__": {"text": " })(module, module.exports);\n  return module.exports;\n}\nmodule.filename#\nAdded in: v0.1.16\n<string>\nThe fully resolved filename of the module.\n\nmodule.id#\nAdded in: v0.1.16\n<string>\nThe identifier for the module. Typically this is the fully resolved filename.\n\nmodule.isPreloading#\nAdded in: v15.4.0, v14.17.0\nType: <boolean> true if the module is running during the Node.js preload phase.\nmodule.loaded#\nAdded in: v0.1.16\n<boolean>\nWhether or not the module is done loading, or is in the process of loading.\n\nmodule.parent#\nAdded in: v0.1.16Deprecated since: v14.6.0, v12.19.0\nStability: 0 - Deprecated: Please use require.main and module.children instead.\n<module> | <null> | <undefined>\nThe module that first required this one, or null if the current module is the entry point of the current process, or undefined if the module was loaded by something that is not a CommonJS module (E.G.: REPL or import).\n\nmodule.path#\nAdded in: v11.14.0\n<string>\nThe directory name of the module. This is usually the same as the path.dirname() of the module.id.\n\nmodule.paths#\nAdded in: v0.4.0\n<string[]>\nThe search paths for the module.\n\nmodule.require(id)#\nAdded in: v0.5.1\nid <string>\nReturns: <any> exported module content\nThe module.require() method provides a way to load a module as if require() was called from the original module.\n\nIn order to do this, it is necessary to get a reference to the module object. Since require() returns the module.exports, and the module is typically only available within a specific module's code, it must be explicitly exported in order to be used.\n\nThe Module object#\nThis section was moved to Modules: module core module.\n\nmodule.builtinModules\nmodule.createRequire(filename)\nmodule.syncBuiltinESMExports()\nSource map v3 support#\nThis section was moved to Modules: module core module.\n\nmodule.findSourceMap(path)\nClass: module.SourceMap\nnew SourceMap(payload)\nsourceMap.payload\nsourceMap.findEntry(lineNumber, columnNumber)\nModules: ECMAScript modules#\nHistory\nStability: 2 - Stable\nIntroduction#\nECMAScript modules are the official standard format to package JavaScript code for reuse. Modules are defined using a variety of import and export statements.\n\nThe following example of an ES module exports a function:\n\n// addTwo.mjs\nfunction addTwo(num) {\n  return num + 2;\n}\n\nexport { addTwo };\nThe following example of an ES module imports the function from addTwo.mjs:\n\n// app.mjs\nimport { addTwo } from './addTwo.mjs';\n\n// Prints: 6\nconsole.log(addTwo(4));\nNode.js fully supports ECMAScript modules as they are currently specified and provides interoperability between them and its original module format, CommonJS.\n\n\nEnabling#\nNode.js has two module systems: CommonJS modules and ECMAScript modules.\n\nAuthors can tell Node.js to use the ECMAScript modules loader via the .mjs file extension, the package.json \"type\" field, or the --input-type flag. Outside of those cases, Node.js will use the CommonJS module loader. See Determining module system for more details.\n\n\nPackages#\nThis section was moved to Modules: Packages.\n\nimport Specifiers#\nTerminology#\nThe specifier of an import statement is the string after the from keyword, e.g. 'node:path' in import { sep } from 'node:path'. Specifiers are also used in export from statements, and as the argument to an import() expression.\n\nThere are three types of specifiers:\n\nRelative specifiers like './startup.js' or '../config.mjs'. They refer to a path relative to the location of the importing file. The file extension", "doc_id": "3d6920fa-da79-4049-81eb-30a0384f3759", "embedding": null, "doc_hash": "7fb3bf2bccfcab61966ae5dbc59d70bcda3df8bf561c16e4c777c30b198f5da0", "extra_info": null, "node_info": {"start": 1720571, "end": 1724074}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6f984fa6-4bbf-43b1-b846-154737312fab", "3": "11c2cce1-0533-4a3b-8b51-61acbb91ec62"}}, "__type__": "1"}, "11c2cce1-0533-4a3b-8b51-61acbb91ec62": {"__data__": {"text": "to use the ECMAScript modules loader via the .mjs file extension, the package.json \"type\" field, or the --input-type flag. Outside of those cases, Node.js will use the CommonJS module loader. See Determining module system for more details.\n\n\nPackages#\nThis section was moved to Modules: Packages.\n\nimport Specifiers#\nTerminology#\nThe specifier of an import statement is the string after the from keyword, e.g. 'node:path' in import { sep } from 'node:path'. Specifiers are also used in export from statements, and as the argument to an import() expression.\n\nThere are three types of specifiers:\n\nRelative specifiers like './startup.js' or '../config.mjs'. They refer to a path relative to the location of the importing file. The file extension is always necessary for these.\n\nBare specifiers like 'some-package' or 'some-package/shuffle'. They can refer to the main entry point of a package by the package name, or a specific feature module within a package prefixed by the package name as per the examples respectively. Including the file extension is only necessary for packages without an \"exports\" field.\n\nAbsolute specifiers like 'file:///opt/nodejs/config.js'. They refer directly and explicitly to a full path.\n\nBare specifier resolutions are handled by the Node.js module resolution algorithm. All other specifier resolutions are always only resolved with the standard relative URL resolution semantics.\n\nLike in CommonJS, module files within packages can be accessed by appending a path to the package name unless the package's package.json contains an \"exports\" field, in which case files within packages can only be accessed via the paths defined in \"exports\".\n\nFor details on these package resolution rules that apply to bare specifiers in the Node.js module resolution, see the packages documentation.\n\nMandatory file extensions#\nA file extension must be provided when using the import keyword to resolve relative or absolute specifiers. Directory indexes (e.g. './startup/index.js') must also be fully specified.\n\nThis behavior matches how import behaves in browser environments, assuming a typically configured server.\n\nURLs#\nES modules are resolved and cached as URLs. This means that special characters must be percent-encoded, such as # with %23 and ? with %3F.\n\nfile:, node:, and data: URL schemes are supported. A specifier like 'https://example.com/app.js' is not supported natively in Node.js unless using a custom HTTPS loader.\n\nfile: URLs#\nModules are loaded multiple times if the import specifier used to resolve them has a different query or fragment.\n\nimport './foo.mjs?query=1'; // loads ./foo.mjs with query of \"?query=1\"\nimport './foo.mjs?query=2'; // loads ./foo.mjs with query of \"?query=2\"\nThe volume root may be referenced via /, //, or file:///. Given the differences between URL and path resolution (such as percent encoding details), it is recommended to use url.pathToFileURL when importing a path.\n\ndata: imports#\nAdded in: v12.10.0\ndata: URLs are supported for importing with the following MIME types:\n\ntext/javascript for ES modules\napplication/json for JSON\napplication/wasm for Wasm\nimport 'data:text/javascript,console.log(\"hello!\");';\nimport _ from 'data:application/json,\"world!\"' assert { type: 'json' };\ndata: URLs only resolve bare specifiers for builtin modules and absolute specifiers. Resolving relative specifiers does not work because data: is not a special scheme. For example, attempting to load ./foo from data:text/javascript,import \"./foo\"; fails to resolve because there is no concept of relative resolution for data: URLs.\n\nnode: imports#\nHistory\nnode: URLs are supported as an alternative means to load Node.js builtin modules. This URL scheme allows for builtin modules to be referenced by valid absolute URL strings.\n\nimport fs from 'node:fs/promises';\nImport assertions#\nAdded in: v17.1.0, v16.14.0\nStability:", "doc_id": "11c2cce1-0533-4a3b-8b51-61acbb91ec62", "embedding": null, "doc_hash": "582909c5c539072be068d3af9190ec62a18acc3cd998f7f066c41717864e9e63", "extra_info": null, "node_info": {"start": 1723945, "end": 1727819}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3d6920fa-da79-4049-81eb-30a0384f3759", "3": "8c0d6e62-0d0f-4217-a63f-6b628684ad4b"}}, "__type__": "1"}, "8c0d6e62-0d0f-4217-a63f-6b628684ad4b": {"__data__": {"text": "_ from 'data:application/json,\"world!\"' assert { type: 'json' };\ndata: URLs only resolve bare specifiers for builtin modules and absolute specifiers. Resolving relative specifiers does not work because data: is not a special scheme. For example, attempting to load ./foo from data:text/javascript,import \"./foo\"; fails to resolve because there is no concept of relative resolution for data: URLs.\n\nnode: imports#\nHistory\nnode: URLs are supported as an alternative means to load Node.js builtin modules. This URL scheme allows for builtin modules to be referenced by valid absolute URL strings.\n\nimport fs from 'node:fs/promises';\nImport assertions#\nAdded in: v17.1.0, v16.14.0\nStability: 1 - Experimental\nThe Import Assertions proposal adds an inline syntax for module import statements to pass on more information alongside the module specifier.\n\nimport fooData from './foo.json' assert { type: 'json' };\n\nconst { default: barData } =\n  await import('./bar.json', { assert: { type: 'json' } });\nNode.js supports the following type values, for which the assertion is mandatory:\n\nAssertion type\tNeeded for\n'json'\tJSON modules\nBuiltin modules#\nCore modules provide named exports of their public API. A default export is also provided which is the value of the CommonJS exports. The default export can be used for, among other things, modifying the named exports. Named exports of builtin modules are updated only by calling module.syncBuiltinESMExports().\n\nimport EventEmitter from 'node:events';\nconst e = new EventEmitter();\nimport { readFile } from 'node:fs';\nreadFile('./foo.txt', (err, source) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(source);\n  }\n});\nimport fs, { readFileSync } from 'node:fs';\nimport { syncBuiltinESMExports } from 'node:module';\nimport { Buffer } from 'node:buffer';\n\nfs.readFileSync = () => Buffer.from('Hello, ESM');\nsyncBuiltinESMExports();\n\nfs.readFileSync === readFileSync;\nimport() expressions#\nDynamic import() is supported in both CommonJS and ES modules. In CommonJS modules it can be used to load ES modules.\n\nimport.meta#\n<Object>\nThe import.meta meta property is an Object that contains the following properties.\n\nimport.meta.url#\n<string> The absolute file: URL of the module.\nThis is defined exactly the same as it is in browsers providing the URL of the current module file.\n\nThis enables useful patterns such as relative file loading:\n\nimport { readFileSync } from 'node:fs';\nconst buffer = readFileSync(new URL('./data.proto', import.meta.url));\nimport.meta.resolve(specifier[, parent])#\nStability: 1 - Experimental\nThis feature is only available with the --experimental-import-meta-resolve command flag enabled.\n\nspecifier <string> The module specifier to resolve relative to parent.\nparent <string> | <URL> The absolute parent module URL to resolve from. If none is specified, the value of import.meta.url is used as the default.\nReturns: <Promise>\nProvides a module-relative resolution function scoped to each module, returning the URL string.\n\nconst dependencyAsset = await import.meta.resolve('component-lib/asset.css');\nimport.meta.resolve also accepts a second argument which is the parent module from which to resolve from:\n\nawait import.meta.resolve('./dep', import.meta.url);\nThis function is asynchronous because the ES module resolver in Node.js is allowed to be asynchronous.\n\nInteroperability with CommonJS#\nimport statements#\nAn import statement can reference an ES module or a CommonJS module. import statements are permitted only in ES modules, but dynamic import() expressions are supported in CommonJS for loading ES modules.\n\nWhen importing CommonJS modules, the module.exports object is provided as the default export.", "doc_id": "8c0d6e62-0d0f-4217-a63f-6b628684ad4b", "embedding": null, "doc_hash": "d450480597012ed2bfb028dd7d32c0786730f92f1d68c66686d47b6ad9b21753", "extra_info": null, "node_info": {"start": 1727859, "end": 1731566}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "11c2cce1-0533-4a3b-8b51-61acbb91ec62", "3": "17147260-53a8-473d-8803-295737fcaa32"}}, "__type__": "1"}, "17147260-53a8-473d-8803-295737fcaa32": {"__data__": {"text": "<Promise>\nProvides a module-relative resolution function scoped to each module, returning the URL string.\n\nconst dependencyAsset = await import.meta.resolve('component-lib/asset.css');\nimport.meta.resolve also accepts a second argument which is the parent module from which to resolve from:\n\nawait import.meta.resolve('./dep', import.meta.url);\nThis function is asynchronous because the ES module resolver in Node.js is allowed to be asynchronous.\n\nInteroperability with CommonJS#\nimport statements#\nAn import statement can reference an ES module or a CommonJS module. import statements are permitted only in ES modules, but dynamic import() expressions are supported in CommonJS for loading ES modules.\n\nWhen importing CommonJS modules, the module.exports object is provided as the default export. Named exports may be available, provided by static analysis as a convenience for better ecosystem compatibility.\n\nrequire#\nThe CommonJS module require always treats the files it references as CommonJS.\n\nUsing require to load an ES module is not supported because ES modules have asynchronous execution. Instead, use import() to load an ES module from a CommonJS module.\n\nCommonJS Namespaces#\nCommonJS modules consist of a module.exports object which can be of any type.\n\nWhen importing a CommonJS module, it can be reliably imported using the ES module default import or its corresponding sugar syntax:\n\nimport { default as cjs } from 'cjs';\n\n// The following import statement is \"syntax sugar\" (equivalent but sweeter)\n// for `{ default as cjsSugar }` in the above import statement:\nimport cjsSugar from 'cjs';\n\nconsole.log(cjs);\nconsole.log(cjs === cjsSugar);\n// Prints:\n//   <module.exports>\n//   true\nThe ECMAScript Module Namespace representation of a CommonJS module is always a namespace with a default export key pointing to the CommonJS module.exports value.\n\nThis Module Namespace Exotic Object can be directly observed either when using import * as m from 'cjs' or a dynamic import:\n\nimport * as m from 'cjs';\nconsole.log(m);\nconsole.log(m === await import('cjs'));\n// Prints:\n//   [Module] { default: <module.exports> }\n//   true\nFor better compatibility with existing usage in the JS ecosystem, Node.js in addition attempts to determine the CommonJS named exports of every imported CommonJS module to provide them as separate ES module exports using a static analysis process.\n\nFor example, consider a CommonJS module written:\n\n// cjs.cjs\nexports.name = 'exported';\nThe preceding module supports named imports in ES modules:\n\nimport { name } from './cjs.cjs';\nconsole.log(name);\n// Prints: 'exported'\n\nimport cjs from './cjs.cjs';\nconsole.log(cjs);\n// Prints: { name: 'exported' }\n\nimport * as m from './cjs.cjs';\nconsole.log(m);\n// Prints: [Module] { default: { name: 'exported' }, name: 'exported' }\nAs can be seen from the last example of the Module Namespace Exotic Object being logged, the name export is copied off of the module.exports object and set directly on the ES module namespace when the module is imported.\n\nLive binding updates or new exports added to module.exports are not detected for these named exports.\n\nThe detection of named exports is based on common syntax patterns but does not always correctly detect named exports. In these cases, using the default import form described above can be a better option.\n\nNamed exports detection covers many common export patterns, reexport patterns and build tool and transpiler outputs. See cjs-module-lexer for the exact semantics implemented.\n\nDifferences between ES modules and CommonJS#\nNo require, exports, or module.exports#\nIn most cases, the ES module import can be used to load CommonJS modules.\n\nIf needed, a require function can be", "doc_id": "17147260-53a8-473d-8803-295737fcaa32", "embedding": null, "doc_hash": "a79ae9ac4c6ef72a8c76b26f90ee13059e262daa1a9ca221cd8ca16d6a5e7d8a", "extra_info": null, "node_info": {"start": 1731461, "end": 1735177}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8c0d6e62-0d0f-4217-a63f-6b628684ad4b", "3": "c71abab8-e46d-44eb-acf6-2597bbb41145"}}, "__type__": "1"}, "c71abab8-e46d-44eb-acf6-2597bbb41145": {"__data__": {"text": "copied off of the module.exports object and set directly on the ES module namespace when the module is imported.\n\nLive binding updates or new exports added to module.exports are not detected for these named exports.\n\nThe detection of named exports is based on common syntax patterns but does not always correctly detect named exports. In these cases, using the default import form described above can be a better option.\n\nNamed exports detection covers many common export patterns, reexport patterns and build tool and transpiler outputs. See cjs-module-lexer for the exact semantics implemented.\n\nDifferences between ES modules and CommonJS#\nNo require, exports, or module.exports#\nIn most cases, the ES module import can be used to load CommonJS modules.\n\nIf needed, a require function can be constructed within an ES module using module.createRequire().\n\nNo __filename or __dirname#\nThese CommonJS variables are not available in ES modules.\n\n__filename and __dirname use cases can be replicated via import.meta.url.\n\nNo Addon Loading#\nAddons are not currently supported with ES module imports.\n\nThey can instead be loaded with module.createRequire() or process.dlopen.\n\nNo require.resolve#\nRelative resolution can be handled via new URL('./local', import.meta.url).\n\nFor a complete require.resolve replacement, there is a flagged experimental import.meta.resolve API.\n\nAlternatively module.createRequire() can be used.\n\nNo NODE_PATH#\nNODE_PATH is not part of resolving import specifiers. Please use symlinks if this behavior is desired.\n\nNo require.extensions#\nrequire.extensions is not used by import. The expectation is that loader hooks can provide this workflow in the future.\n\nNo require.cache#\nrequire.cache is not used by import as the ES module loader has its own separate cache.\n\n\nJSON modules#\nStability: 1 - Experimental\nJSON files can be referenced by import:\n\nimport packageConfig from './package.json' assert { type: 'json' };\nThe assert { type: 'json' } syntax is mandatory; see Import Assertions.\n\nThe imported JSON only exposes a default export. There is no support for named exports. A cache entry is created in the CommonJS cache to avoid duplication. The same object is returned in CommonJS if the JSON module has already been imported from the same path.\n\n\nWasm modules#\nStability: 1 - Experimental\nImporting WebAssembly modules is supported under the --experimental-wasm-modules flag, allowing any .wasm files to be imported as normal modules while also supporting their module imports.\n\nThis integration is in line with the ES Module Integration Proposal for WebAssembly.\n\nFor example, an index.mjs containing:\n\nimport * as M from './module.wasm';\nconsole.log(M);\nexecuted under:\n\nnode --experimental-wasm-modules index.mjs\nwould provide the exports interface for the instantiation of module.wasm.\n\n\nTop-level await#\nAdded in: v14.8.0\nThe await keyword may be used in the top level body of an ECMAScript module.\n\nAssuming an a.mjs with\n\nexport const five = await Promise.resolve(5);\nAnd a b.mjs with\n\nimport { five } from './a.mjs';\n\nconsole.log(five); // Logs `5`\nnode b.mjs # works\nIf a top level await expression never resolves, the node process will exit with a 13 status code.\n\nimport { spawn } from 'node:child_process';\nimport { execPath } from 'node:process';\n\nspawn(execPath, [\n  '--input-type=module',\n  '--eval',\n  // Never-resolving Promise:\n  'await new Promise(() => {})',\n]).once('exit', (code) => {\n  console.log(code); // Logs `13`\n});\nHTTPS and HTTP imports#\nStability: 1 - Experimental\nImporting network based modules using https: and http: is supported under the --experimental-network-imports flag. This allows web browser-like", "doc_id": "c71abab8-e46d-44eb-acf6-2597bbb41145", "embedding": null, "doc_hash": "ff973b7bf2cbeb1cd12460a96f548a60c0ac9d4ba523217b0b7aac5cd1becde9", "extra_info": null, "node_info": {"start": 1735204, "end": 1738878}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "17147260-53a8-473d-8803-295737fcaa32", "3": "9e09496b-16eb-4a47-8395-6efe86f6bc5a"}}, "__type__": "1"}, "9e09496b-16eb-4a47-8395-6efe86f6bc5a": {"__data__": {"text": "// Logs `5`\nnode b.mjs # works\nIf a top level await expression never resolves, the node process will exit with a 13 status code.\n\nimport { spawn } from 'node:child_process';\nimport { execPath } from 'node:process';\n\nspawn(execPath, [\n  '--input-type=module',\n  '--eval',\n  // Never-resolving Promise:\n  'await new Promise(() => {})',\n]).once('exit', (code) => {\n  console.log(code); // Logs `13`\n});\nHTTPS and HTTP imports#\nStability: 1 - Experimental\nImporting network based modules using https: and http: is supported under the --experimental-network-imports flag. This allows web browser-like imports to work in Node.js with a few differences due to application stability and security concerns that are different when running in a privileged environment instead of a browser sandbox.\n\nImports are limited to HTTP/1#\nAutomatic protocol negotiation for HTTP/2 and HTTP/3 is not yet supported.\n\nHTTP is limited to loopback addresses#\nhttp: is vulnerable to man-in-the-middle attacks and is not allowed to be used for addresses outside of the IPv4 address 127.0.0.0/8 (127.0.0.1 to 127.255.255.255) and the IPv6 address ::1. Support for http: is intended to be used for local development.\n\nAuthentication is never sent to the destination server.#\nAuthorization, Cookie, and Proxy-Authorization headers are not sent to the server. Avoid including user info in parts of imported URLs. A security model for safely using these on the server is being worked on.\n\nCORS is never checked on the destination server#\nCORS is designed to allow a server to limit the consumers of an API to a specific set of hosts. This is not supported as it does not make sense for a server-based implementation.\n\nCannot load non-network dependencies#\nThese modules cannot access other modules that are not over http: or https:. To still access local modules while avoiding the security concern, pass in references to the local dependencies:\n\n// file.mjs\nimport worker_threads from 'node:worker_threads';\nimport { configure, resize } from 'https://example.com/imagelib.mjs';\nconfigure({ worker_threads });\n// https://example.com/imagelib.mjs\nlet worker_threads;\nexport function configure(opts) {\n  worker_threads = opts.worker_threads;\n}\nexport function resize(img, size) {\n  // Perform resizing in worker_thread to avoid main thread blocking\n}\nNetwork-based loading is not enabled by default#\nFor now, the --experimental-network-imports flag is required to enable loading resources over http: or https:. In the future, a different mechanism will be used to enforce this. Opt-in is required to prevent transitive dependencies inadvertently using potentially mutable state that could affect reliability of Node.js applications.\n\n\nLoaders#\nHistory\nStability: 1 - Experimental\nThis API is currently being redesigned and will still change.\n\nTo customize the default module resolution, loader hooks can optionally be provided via a --experimental-loader ./loader-name.mjs argument to Node.js.\n\nWhen hooks are used they apply to the entry point and all import calls. They won't apply to require calls; those still follow CommonJS rules.\n\nLoaders follow the pattern of --require:\n\nnode \\\n  --experimental-loader unpkg \\\n  --experimental-loader http-to-https \\\n  --experimental-loader cache-buster\nThese are called in the following sequence: cache-buster calls http-to-https which calls unpkg.\n\nHooks#\nHooks are part of a chain, even if that chain consists of only one custom (user-provided) hook and the default hook, which is always present. Hook functions nest: each one must always return a plain object, and chaining happens as a result of each function calling next<hookName>(), which is a reference to the subsequent loader\u2019s hook.\n\nA hook that returns a value lacking a required property triggers an", "doc_id": "9e09496b-16eb-4a47-8395-6efe86f6bc5a", "embedding": null, "doc_hash": "49090e9a031a9a5b213207d25d44e53f160695427ac1e836eb863a7bd0069ea1", "extra_info": null, "node_info": {"start": 1739040, "end": 1742811}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c71abab8-e46d-44eb-acf6-2597bbb41145", "3": "cb75f051-d172-4636-a4f5-d6f0c671208d"}}, "__type__": "1"}, "cb75f051-d172-4636-a4f5-d6f0c671208d": {"__data__": {"text": "calls. They won't apply to require calls; those still follow CommonJS rules.\n\nLoaders follow the pattern of --require:\n\nnode \\\n  --experimental-loader unpkg \\\n  --experimental-loader http-to-https \\\n  --experimental-loader cache-buster\nThese are called in the following sequence: cache-buster calls http-to-https which calls unpkg.\n\nHooks#\nHooks are part of a chain, even if that chain consists of only one custom (user-provided) hook and the default hook, which is always present. Hook functions nest: each one must always return a plain object, and chaining happens as a result of each function calling next<hookName>(), which is a reference to the subsequent loader\u2019s hook.\n\nA hook that returns a value lacking a required property triggers an exception. A hook that returns without calling next<hookName>() and without returning shortCircuit: true also triggers an exception. These errors are to help prevent unintentional breaks in the chain.\n\nresolve(specifier, context, nextResolve)#\nHistory\nThe loaders API is being redesigned. This hook may disappear or its signature may change. Do not rely on the API described below.\n\nspecifier <string>\ncontext <Object>\nconditions <string[]> Export conditions of the relevant package.json\nimportAssertions <Object>\nparentURL <string> | <undefined> The module importing this one, or undefined if this is the Node.js entry point\nnextResolve <Function> The subsequent resolve hook in the chain, or the Node.js default resolve hook after the last user-supplied resolve hook\nspecifier <string>\ncontext <Object>\nReturns: <Object>\nformat <string> | <null> | <undefined> A hint to the load hook (it might be ignored) 'builtin' | 'commonjs' | 'json' | 'module' | 'wasm'\nshortCircuit <undefined> | <boolean> A signal that this hook intends to terminate the chain of resolve hooks. Default: false\nurl <string> The absolute URL to which this input resolves\nThe resolve hook chain is responsible for resolving file URL for a given module specifier and parent URL, and optionally its format (such as 'module') as a hint to the load hook. If a format is specified, the load hook is ultimately responsible for providing the final format value (and it is free to ignore the hint provided by resolve); if resolve provides a format, a custom load hook is required even if only to pass the value to the Node.js default load hook.\n\nThe module specifier is the string in an import statement or import() expression.\n\nThe parent URL is the URL of the module that imported this one, or undefined if this is the main entry point for the application.\n\nThe conditions property in context is an array of conditions for package exports conditions that apply to this resolution request. They can be used for looking up conditional mappings elsewhere or to modify the list when calling the default resolution logic.\n\nThe current package exports conditions are always in the context.conditions array passed into the hook. To guarantee default Node.js module specifier resolution behavior when calling defaultResolve, the context.conditions array passed to it must include all elements of the context.conditions array originally passed into the resolve hook.\n\nexport async function resolve(specifier, context, nextResolve) {\n  const { parentURL = null } = context;\n\n  if (Math.random() > 0.5) { // Some condition.\n    // For some or all specifiers, do some custom logic for resolving.\n    // Always return an object of the form {url: <string>}.\n    return {\n      shortCircuit: true,\n      url: parentURL ?\n        new URL(specifier, parentURL).href :\n        new URL(specifier).href,\n    };\n  }\n\n  if (Math.random() < 0.5) { // Another condition.\n    // When calling `defaultResolve`, the arguments can be modified. In this\n    // case it's adding another value for matching conditional exports.\n", "doc_id": "cb75f051-d172-4636-a4f5-d6f0c671208d", "embedding": null, "doc_hash": "0a94027fdf98a2b162b98aacea0e8b5f5a6fd6ab44829f50e438d6187d2b5d4f", "extra_info": null, "node_info": {"start": 1742690, "end": 1746498}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9e09496b-16eb-4a47-8395-6efe86f6bc5a", "3": "e26a46a6-7ebc-461c-b6da-7b1e8cc6938b"}}, "__type__": "1"}, "e26a46a6-7ebc-461c-b6da-7b1e8cc6938b": {"__data__": {"text": " const { parentURL = null } = context;\n\n  if (Math.random() > 0.5) { // Some condition.\n    // For some or all specifiers, do some custom logic for resolving.\n    // Always return an object of the form {url: <string>}.\n    return {\n      shortCircuit: true,\n      url: parentURL ?\n        new URL(specifier, parentURL).href :\n        new URL(specifier).href,\n    };\n  }\n\n  if (Math.random() < 0.5) { // Another condition.\n    // When calling `defaultResolve`, the arguments can be modified. In this\n    // case it's adding another value for matching conditional exports.\n    return nextResolve(specifier, {\n      ...context,\n      conditions: [...context.conditions, 'another-condition'],\n    });\n  }\n\n  // Defer to the next hook in the chain, which would be the\n  // Node.js default resolve if this is the last user-specified loader.\n  return nextResolve(specifier);\n}\nload(url, context, nextLoad)#\nHistory\nThe loaders API is being redesigned. This hook may disappear or its signature may change. Do not rely on the API described below.\n\nIn a previous version of this API, this was split across 3 separate, now deprecated, hooks (getFormat, getSource, and transformSource).\n\nurl <string> The URL returned by the resolve chain\ncontext <Object>\nconditions <string[]> Export conditions of the relevant package.json\nformat <string> | <null> | <undefined> The format optionally supplied by the resolve hook chain\nimportAssertions <Object>\nnextLoad <Function> The subsequent load hook in the chain, or the Node.js default load hook after the last user-supplied load hook\nspecifier <string>\ncontext <Object>\nReturns: <Object>\nformat <string>\nshortCircuit <undefined> | <boolean> A signal that this hook intends to terminate the chain of resolve hooks. Default: false\nsource <string> | <ArrayBuffer> | <TypedArray> The source for Node.js to evaluate\nThe load hook provides a way to define a custom method of determining how a URL should be interpreted, retrieved, and parsed. It is also in charge of validating the import assertion.\n\nThe final value of format must be one of the following:\n\nformat\tDescription\tAcceptable types for source returned by load\n'builtin'\tLoad a Node.js builtin module\tNot applicable\n'commonjs'\tLoad a Node.js CommonJS module\tNot applicable\n'json'\tLoad a JSON file\t{ string, ArrayBuffer, TypedArray }\n'module'\tLoad an ES module\t{ string, ArrayBuffer, TypedArray }\n'wasm'\tLoad a WebAssembly module\t{ ArrayBuffer, TypedArray }\nThe value of source is ignored for type 'builtin' because currently it is not possible to replace the value of a Node.js builtin (core) module. The value of source is ignored for type 'commonjs' because the CommonJS module loader does not provide a mechanism for the ES module loader to override the CommonJS module return value. This limitation might be overcome in the future.\n\nCaveat: The ESM load hook and namespaced exports from CommonJS modules are incompatible. Attempting to use them together will result in an empty object from the import. This may be addressed in the future.\n\nThese types all correspond to classes defined in ECMAScript.\n\nThe specific ArrayBuffer object is a SharedArrayBuffer.\nThe specific TypedArray object is a Uint8Array.\nIf the source value of a text-based format (i.e., 'json', 'module') is not a string, it is converted to a string using util.TextDecoder.\n\nThe load hook provides a way to define a custom method for retrieving the source code of an ES module specifier. This would allow a loader to potentially avoid reading files from disk. It could also be used to map an unrecognized format to a supported one, for example", "doc_id": "e26a46a6-7ebc-461c-b6da-7b1e8cc6938b", "embedding": null, "doc_hash": "e067df150c156e5e596774b3b2272cfe0e1d8deaa4b6509e8fb8bdf3ec9917e5", "extra_info": null, "node_info": {"start": 1746694, "end": 1750297}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cb75f051-d172-4636-a4f5-d6f0c671208d", "3": "d1da64b9-fe44-4b08-9e82-3c66d84c33bb"}}, "__type__": "1"}, "d1da64b9-fe44-4b08-9e82-3c66d84c33bb": {"__data__": {"text": "overcome in the future.\n\nCaveat: The ESM load hook and namespaced exports from CommonJS modules are incompatible. Attempting to use them together will result in an empty object from the import. This may be addressed in the future.\n\nThese types all correspond to classes defined in ECMAScript.\n\nThe specific ArrayBuffer object is a SharedArrayBuffer.\nThe specific TypedArray object is a Uint8Array.\nIf the source value of a text-based format (i.e., 'json', 'module') is not a string, it is converted to a string using util.TextDecoder.\n\nThe load hook provides a way to define a custom method for retrieving the source code of an ES module specifier. This would allow a loader to potentially avoid reading files from disk. It could also be used to map an unrecognized format to a supported one, for example yaml to module.\n\nexport async function load(url, context, nextLoad) {\n  const { format } = context;\n\n  if (Math.random() > 0.5) { // Some condition\n    /*\n      For some or all URLs, do some custom logic for retrieving the source.\n      Always return an object of the form {\n        format: <string>,\n        source: <string|buffer>,\n      }.\n    */\n    return {\n      format,\n      shortCircuit: true,\n      source: '...',\n    };\n  }\n\n  // Defer to the next hook in the chain.\n  return nextLoad(url);\n}\nIn a more advanced scenario, this can also be used to transform an unsupported source to a supported one (see Examples below).\n\nglobalPreload()#\nHistory\nThe loaders API is being redesigned. This hook may disappear or its signature may change. Do not rely on the API described below.\n\nIn a previous version of this API, this hook was named getGlobalPreloadCode.\n\ncontext <Object> Information to assist the preload code\nport <MessagePort>\nReturns: <string> Code to run before application startup\nSometimes it might be necessary to run some code inside of the same global scope that the application runs in. This hook allows the return of a string that is run as a sloppy-mode script on startup.\n\nSimilar to how CommonJS wrappers work, the code runs in an implicit function scope. The only argument is a require-like function that can be used to load builtins like \"fs\": getBuiltin(request: string).\n\nIf the code needs more advanced require features, it has to construct its own require using module.createRequire().\n\nexport function globalPreload(context) {\n  return `\\\nglobalThis.someInjectedProperty = 42;\nconsole.log('I just set some globals!');\n\nconst { createRequire } = getBuiltin('module');\nconst { cwd } = getBuiltin('process');\n\nconst require = createRequire(cwd() + '/<preload>');\n// [...]\n`;\n}\nIn order to allow communication between the application and the loader, another argument is provided to the preload code: port. This is available as a parameter to the loader hook and inside of the source text returned by the hook. Some care must be taken in order to properly call port.ref() and port.unref() to prevent a process from being in a state where it won't close normally.\n\n/**\n * This example has the application context send a message to the loader\n * and sends the message back to the application context\n */\nexport function globalPreload({ port }) {\n  port.onmessage = (evt) => {\n    port.postMessage(evt.data);\n  };\n  return `\\\n    port.postMessage('console.log(\"I went to the Loader and back\");');\n    port.onmessage = (evt) => {\n      eval(evt.data);\n    };\n  `;\n}\nExamples#\nThe various loader hooks can be used together to accomplish wide-ranging customizations of the Node.js code loading and evaluation behaviors.\n\nHTTPS loader#\nIn current Node.js, specifiers starting with https:// are", "doc_id": "d1da64b9-fe44-4b08-9e82-3c66d84c33bb", "embedding": null, "doc_hash": "ba9974766de276ccd80083f1ac25186ae6d73704eb4ee73f18f21bb0ea21c9fb", "extra_info": null, "node_info": {"start": 1750064, "end": 1753683}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e26a46a6-7ebc-461c-b6da-7b1e8cc6938b", "3": "f22a2c27-c5f0-4f51-885c-343af24e3e68"}}, "__type__": "1"}, "f22a2c27-c5f0-4f51-885c-343af24e3e68": {"__data__": {"text": "won't close normally.\n\n/**\n * This example has the application context send a message to the loader\n * and sends the message back to the application context\n */\nexport function globalPreload({ port }) {\n  port.onmessage = (evt) => {\n    port.postMessage(evt.data);\n  };\n  return `\\\n    port.postMessage('console.log(\"I went to the Loader and back\");');\n    port.onmessage = (evt) => {\n      eval(evt.data);\n    };\n  `;\n}\nExamples#\nThe various loader hooks can be used together to accomplish wide-ranging customizations of the Node.js code loading and evaluation behaviors.\n\nHTTPS loader#\nIn current Node.js, specifiers starting with https:// are experimental (see HTTPS and HTTP imports).\n\nThe loader below registers hooks to enable rudimentary support for such specifiers. While this may seem like a significant improvement to Node.js core functionality, there are substantial downsides to actually using this loader: performance is much slower than loading files from disk, there is no caching, and there is no security.\n\n// https-loader.mjs\nimport { get } from 'node:https';\n\nexport function resolve(specifier, context, nextResolve) {\n  const { parentURL = null } = context;\n\n  // Normally Node.js would error on specifiers starting with 'https://', so\n  // this hook intercepts them and converts them into absolute URLs to be\n  // passed along to the later hooks below.\n  if (specifier.startsWith('https://')) {\n    return {\n      shortCircuit: true,\n      url: specifier,\n    };\n  } else if (parentURL && parentURL.startsWith('https://')) {\n    return {\n      shortCircuit: true,\n      url: new URL(specifier, parentURL).href,\n    };\n  }\n\n  // Let Node.js handle all other specifiers.\n  return nextResolve(specifier);\n}\n\nexport function load(url, context, nextLoad) {\n  // For JavaScript to be loaded over the network, we need to fetch and\n  // return it.\n  if (url.startsWith('https://')) {\n    return new Promise((resolve, reject) => {\n      get(url, (res) => {\n        let data = '';\n        res.on('data', (chunk) => data += chunk);\n        res.on('end', () => resolve({\n          // This example assumes all network-provided JavaScript is ES module\n          // code.\n          format: 'module',\n          shortCircuit: true,\n          source: data,\n        }));\n      }).on('error', (err) => reject(err));\n    });\n  }\n\n  // Let Node.js handle all other URLs.\n  return nextLoad(url);\n}\n// main.mjs\nimport { VERSION } from 'https://coffeescript.org/browser-compiler-modern/coffeescript.js';\n\nconsole.log(VERSION);\nWith the preceding loader, running node --experimental-loader ./https-loader.mjs ./main.mjs prints the current version of CoffeeScript per the module at the URL in main.mjs.\n\nTranspiler loader#\nSources that are in formats Node.js doesn't understand can be converted into JavaScript using the load hook. Before that hook gets called, however, a resolve hook needs to tell Node.js not to throw an error on unknown file types.\n\nThis is less performant than transpiling source files before running Node.js; a transpiler loader should only be used for development and testing purposes.\n\n// coffeescript-loader.mjs\nimport { readFile } from", "doc_id": "f22a2c27-c5f0-4f51-885c-343af24e3e68", "embedding": null, "doc_hash": "dbd5bd7fb695b3de48b0b676a1132d83dff1c9ba004379e73280a6cc6dcdeaf4", "extra_info": null, "node_info": {"start": 1753820, "end": 1756976}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d1da64b9-fe44-4b08-9e82-3c66d84c33bb", "3": "bf5690fd-0225-4606-bc19-0f6e828fd463"}}, "__type__": "1"}, "bf5690fd-0225-4606-bc19-0f6e828fd463": {"__data__": {"text": "VERSION } from 'https://coffeescript.org/browser-compiler-modern/coffeescript.js';\n\nconsole.log(VERSION);\nWith the preceding loader, running node --experimental-loader ./https-loader.mjs ./main.mjs prints the current version of CoffeeScript per the module at the URL in main.mjs.\n\nTranspiler loader#\nSources that are in formats Node.js doesn't understand can be converted into JavaScript using the load hook. Before that hook gets called, however, a resolve hook needs to tell Node.js not to throw an error on unknown file types.\n\nThis is less performant than transpiling source files before running Node.js; a transpiler loader should only be used for development and testing purposes.\n\n// coffeescript-loader.mjs\nimport { readFile } from 'node:fs/promises';\nimport { dirname, extname, resolve as resolvePath } from 'node:path';\nimport { cwd } from 'node:process';\nimport { fileURLToPath, pathToFileURL } from 'node:url';\nimport CoffeeScript from 'coffeescript';\n\nconst baseURL = pathToFileURL(`${cwd()}/`).href;\n\n// CoffeeScript files end in .coffee, .litcoffee, or .coffee.md.\nconst extensionsRegex = /\\.coffee$|\\.litcoffee$|\\.coffee\\.md$/;\n\nexport async function resolve(specifier, context, nextResolve) {\n  if (extensionsRegex.test(specifier)) {\n    const { parentURL = baseURL } = context;\n\n    // Node.js normally errors on unknown file extensions, so return a URL for\n    // specifiers ending in the CoffeeScript file extensions.\n    return {\n      shortCircuit: true,\n      url: new URL(specifier, parentURL).href,\n    };\n  }\n\n  // Let Node.js handle all other specifiers.\n  return nextResolve(specifier);\n}\n\nexport async function load(url, context, nextLoad) {\n  if (extensionsRegex.test(url)) {\n    // Now that we patched resolve to let CoffeeScript URLs through, we need to\n    // tell Node.js what format such URLs should be interpreted as. Because\n    // CoffeeScript transpiles into JavaScript, it should be one of the two\n    // JavaScript formats: 'commonjs' or 'module'.\n\n    // CoffeeScript files can be either CommonJS or ES modules, so we want any\n    // CoffeeScript file to be treated by Node.js the same as a .js file at the\n    // same location. To determine how Node.js would interpret an arbitrary .js\n    // file, search up the file system for the nearest parent package.json file\n    // and read its \"type\" field.\n    const format = await getPackageType(url);\n    // When a hook returns a format of 'commonjs', `source` is ignored.\n    // To handle CommonJS files, a handler needs to be registered with\n    // `require.extensions` in order to process the files with the CommonJS\n    // loader. Avoiding the need for a separate CommonJS handler is a future\n    // enhancement planned for ES module loaders.\n    if (format === 'commonjs') {\n      return {\n        format,\n        shortCircuit: true,\n      };\n    }\n\n    const { source: rawSource } = await nextLoad(url, { ...context, format });\n    // This hook converts CoffeeScript source code into JavaScript source code\n    // for all imported CoffeeScript files.\n    const transformedSource = coffeeCompile(rawSource.toString(), url);\n\n    return {\n      format,\n      shortCircuit: true,\n      source:", "doc_id": "bf5690fd-0225-4606-bc19-0f6e828fd463", "embedding": null, "doc_hash": "7b6ffb2b2f8c119326fe7d30b8f369bbb323fa7f0c363bda5a422f86b13494e8", "extra_info": null, "node_info": {"start": 1756871, "end": 1760055}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f22a2c27-c5f0-4f51-885c-343af24e3e68", "3": "880c4e56-d07c-4f9d-add7-3b9b68c51f60"}}, "__type__": "1"}, "880c4e56-d07c-4f9d-add7-3b9b68c51f60": {"__data__": {"text": "the need for a separate CommonJS handler is a future\n    // enhancement planned for ES module loaders.\n    if (format === 'commonjs') {\n      return {\n        format,\n        shortCircuit: true,\n      };\n    }\n\n    const { source: rawSource } = await nextLoad(url, { ...context, format });\n    // This hook converts CoffeeScript source code into JavaScript source code\n    // for all imported CoffeeScript files.\n    const transformedSource = coffeeCompile(rawSource.toString(), url);\n\n    return {\n      format,\n      shortCircuit: true,\n      source: transformedSource,\n    };\n  }\n\n  // Let Node.js handle all other URLs.\n  return nextLoad(url);\n}\n\nasync function getPackageType(url) {\n  // `url` is only a file path during the first iteration when passed the\n  // resolved url from the load() hook\n  // an actual file path from load() will contain a file extension as it's\n  // required by the spec\n  // this simple truthy check for whether `url` contains a file extension will\n  // work for most projects but does not cover some edge-cases (such as\n  // extensionless files or a url ending in a trailing space)\n  const isFilePath = !!extname(url);\n  // If it is a file path, get the directory it's in\n  const dir = isFilePath ?\n    dirname(fileURLToPath(url)) :\n    url;\n  // Compose a file path to a package.json in the same directory,\n  // which may or may not exist\n  const packagePath = resolvePath(dir, 'package.json');\n  // Try to read the possibly nonexistent package.json\n  const type = await readFile(packagePath, { encoding: 'utf8' })\n    .then((filestring) => JSON.parse(filestring).type)\n    .catch((err) => {\n      if (err?.code !== 'ENOENT') console.error(err);\n    });\n  // Ff package.json existed and contained a `type` field with a value, voila\n  if (type) return type;\n  // Otherwise, (if not at the root) continue checking the next directory up\n  // If at the root, stop and return false\n  return dir.length > 1 && getPackageType(resolvePath(dir, '..'));\n}\n# main.coffee\nimport { scream } from './scream.coffee'\nconsole.log scream 'hello, world'\n\nimport { version } from 'node:process'\nconsole.log \"Brought to you by Node.js version #{version}\"\n# scream.coffee\nexport scream = (str) -> str.toUpperCase()\nWith the preceding loader, running node --experimental-loader ./coffeescript-loader.mjs main.coffee causes main.coffee to be turned into JavaScript after its source code is loaded from disk but before Node.js executes it; and so on for any .coffee, .litcoffee or .coffee.md files referenced via import statements of any loaded file.\n\nResolution algorithm#\nFeatures#\nThe resolver has the following properties:\n\nFileURL-based resolution as is used by ES modules\nSupport for builtin module loading\nRelative and absolute URL resolution\nNo default extensions\nNo folder mains\nBare specifier package resolution lookup through node_modules\nResolver algorithm#\nThe algorithm to load an ES module specifier is given through the ESM_RESOLVE method below. It returns the resolved URL for a module specifier relative to a parentURL.\n\nThe algorithm to determine the module format of a resolved URL is provided by ESM_FORMAT, which returns the unique module format for any file. The \"module\" format is returned for an ECMAScript Module, while the \"commonjs\" format is used to indicate loading through the legacy CommonJS loader. Additional formats such as \"addon\"", "doc_id": "880c4e56-d07c-4f9d-add7-3b9b68c51f60", "embedding": null, "doc_hash": "cec70d52541eed0ec9cc07a89c00e176cc1ff470dd6de66af947f4fa740ff5f5", "extra_info": null, "node_info": {"start": 1760283, "end": 1763658}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "bf5690fd-0225-4606-bc19-0f6e828fd463", "3": "a95dc4bf-e9e6-454d-a0c0-2300fc7b688f"}}, "__type__": "1"}, "a95dc4bf-e9e6-454d-a0c0-2300fc7b688f": {"__data__": {"text": "algorithm#\nFeatures#\nThe resolver has the following properties:\n\nFileURL-based resolution as is used by ES modules\nSupport for builtin module loading\nRelative and absolute URL resolution\nNo default extensions\nNo folder mains\nBare specifier package resolution lookup through node_modules\nResolver algorithm#\nThe algorithm to load an ES module specifier is given through the ESM_RESOLVE method below. It returns the resolved URL for a module specifier relative to a parentURL.\n\nThe algorithm to determine the module format of a resolved URL is provided by ESM_FORMAT, which returns the unique module format for any file. The \"module\" format is returned for an ECMAScript Module, while the \"commonjs\" format is used to indicate loading through the legacy CommonJS loader. Additional formats such as \"addon\" can be extended in future updates.\n\nIn the following algorithms, all subroutine errors are propagated as errors of these top-level routines unless stated otherwise.\n\ndefaultConditions is the conditional environment name array, [\"node\", \"import\"].\n\nThe resolver can throw the following errors:\n\nInvalid Module Specifier: Module specifier is an invalid URL, package name or package subpath specifier.\nInvalid Package Configuration: package.json configuration is invalid or contains an invalid configuration.\nInvalid Package Target: Package exports or imports define a target module for the package that is an invalid type or string target.\nPackage Path Not Exported: Package exports do not define or permit a target subpath in the package for the given module.\nPackage Import Not Defined: Package imports do not define the specifier.\nModule Not Found: The package or module requested does not exist.\nUnsupported Directory Import: The resolved path corresponds to a directory, which is not a supported target for module imports.\nResolver Algorithm Specification#\nESM_RESOLVE(specifier, parentURL)\n\nLet resolved be undefined.\nIf specifier is a valid URL, then\nSet resolved to the result of parsing and reserializing specifier as a URL.\nOtherwise, if specifier starts with \"/\", \"./\", or \"../\", then\nSet resolved to the URL resolution of specifier relative to parentURL.\nOtherwise, if specifier starts with \"#\", then\nSet resolved to the result of PACKAGE_IMPORTS_RESOLVE(specifier, parentURL, defaultConditions).\nOtherwise,\nNote: specifier is now a bare specifier.\nSet resolved the result of PACKAGE_RESOLVE(specifier, parentURL).\nLet format be undefined.\nIf resolved is a \"file:\" URL, then\nIf resolved contains any percent encodings of \"/\" or \"\\\" (\"%2F\" and \"%5C\" respectively), then\nThrow an Invalid Module Specifier error.\nIf the file at resolved is a directory, then\nThrow an Unsupported Directory Import error.\nIf the file at resolved does not exist, then\nThrow a Module Not Found error.\nSet resolved to the real path of resolved, maintaining the same URL querystring and fragment components.\nSet format to the result of ESM_FILE_FORMAT(resolved).\nOtherwise,\nSet format the module format of the content type associated with the URL resolved.\nLoad resolved as module format, format.\nPACKAGE_RESOLVE(packageSpecifier, parentURL)\n\nLet packageName be undefined.\nIf packageSpecifier is an empty string, then\nThrow an Invalid Module Specifier error.\nIf packageSpecifier is a Node.js builtin module name, then\nReturn the string \"node:\" concatenated with packageSpecifier.\nIf packageSpecifier does not start with \"@\", then\nSet packageName to the substring of packageSpecifier until the first \"/\" separator or the end of the string.\nOtherwise,\nIf packageSpecifier does not contain a \"/\" separator, then\nThrow an Invalid Module Specifier error.\nSet packageName to the substring of packageSpecifier until the second \"/\" separator or the end of the string.\nIf packageName starts with \".\" or contains \"\\\" or \"%\", then\nThrow an Invalid Module Specifier error.\nLet packageSubpath be \".\" concatenated with the substring of packageSpecifier from the position at the length of packageName.\nIf packageSubpath ends in \"/\",", "doc_id": "a95dc4bf-e9e6-454d-a0c0-2300fc7b688f", "embedding": null, "doc_hash": "a5732a39ebe822e72a5a419cabde55c21ace97ca0c4b5f8508c711c33e98b58f", "extra_info": null, "node_info": {"start": 1763386, "end": 1767391}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "880c4e56-d07c-4f9d-add7-3b9b68c51f60", "3": "697a9db8-176b-4b82-8e3c-708b3359f67c"}}, "__type__": "1"}, "697a9db8-176b-4b82-8e3c-708b3359f67c": {"__data__": {"text": "an Invalid Module Specifier error.\nIf packageSpecifier is a Node.js builtin module name, then\nReturn the string \"node:\" concatenated with packageSpecifier.\nIf packageSpecifier does not start with \"@\", then\nSet packageName to the substring of packageSpecifier until the first \"/\" separator or the end of the string.\nOtherwise,\nIf packageSpecifier does not contain a \"/\" separator, then\nThrow an Invalid Module Specifier error.\nSet packageName to the substring of packageSpecifier until the second \"/\" separator or the end of the string.\nIf packageName starts with \".\" or contains \"\\\" or \"%\", then\nThrow an Invalid Module Specifier error.\nLet packageSubpath be \".\" concatenated with the substring of packageSpecifier from the position at the length of packageName.\nIf packageSubpath ends in \"/\", then\nThrow an Invalid Module Specifier error.\nLet selfUrl be the result of PACKAGE_SELF_RESOLVE(packageName, packageSubpath, parentURL).\nIf selfUrl is not undefined, return selfUrl.\nWhile parentURL is not the file system root,\nLet packageURL be the URL resolution of \"node_modules/\" concatenated with packageSpecifier, relative to parentURL.\nSet parentURL to the parent folder URL of parentURL.\nIf the folder at packageURL does not exist, then\nContinue the next loop iteration.\nLet pjson be the result of READ_PACKAGE_JSON(packageURL).\nIf pjson is not null and pjson.exports is not null or undefined, then\nReturn the result of PACKAGE_EXPORTS_RESOLVE(packageURL, packageSubpath, pjson.exports, defaultConditions).\nOtherwise, if packageSubpath is equal to \".\", then\nIf pjson.main is a string, then\nReturn the URL resolution of main in packageURL.\nOtherwise,\nReturn the URL resolution of packageSubpath in packageURL.\nThrow a Module Not Found error.\nPACKAGE_SELF_RESOLVE(packageName, packageSubpath, parentURL)\n\nLet packageURL be the result of LOOKUP_PACKAGE_SCOPE(parentURL).\nIf packageURL is null, then\nReturn undefined.\nLet pjson be the result of READ_PACKAGE_JSON(packageURL).\nIf pjson is null or if pjson.exports is null or undefined, then\nReturn undefined.\nIf pjson.name is equal to packageName, then\nReturn the result of PACKAGE_EXPORTS_RESOLVE(packageURL, packageSubpath, pjson.exports, defaultConditions).\nOtherwise, return undefined.\nPACKAGE_EXPORTS_RESOLVE(packageURL, subpath, exports, conditions)\n\nIf exports is an Object with both a key starting with \".\" and a key not starting with \".\", throw an Invalid Package Configuration error.\nIf subpath is equal to \".\", then\nLet mainExport be undefined.\nIf exports is a String or Array, or an Object containing no keys starting with \".\", then\nSet mainExport to exports.\nOtherwise if exports is an Object containing a \".\" property, then\nSet mainExport to exports[\".\"].\nIf mainExport is not undefined, then\nLet resolved be the result of PACKAGE_TARGET_RESOLVE( packageURL, mainExport, null, false, conditions).\nIf resolved is not null or undefined, return resolved.\nOtherwise, if exports is an Object and all keys of exports start with \".\", then\nLet matchKey be the string \"./\" concatenated with subpath.\nLet resolved be the result of PACKAGE_IMPORTS_EXPORTS_RESOLVE( matchKey, exports, packageURL, false, conditions).\nIf resolved is not null or undefined, return resolved.\nThrow a Package Path Not Exported error.\nPACKAGE_IMPORTS_RESOLVE(specifier, parentURL, conditions)\n\nAssert: specifier begins with \"#\".\nIf specifier is exactly equal to \"#\" or starts with \"#/\", then\nThrow an Invalid Module Specifier error.\nLet packageURL be the result of LOOKUP_PACKAGE_SCOPE(parentURL).\nIf packageURL is not null, then\nLet pjson be the result of READ_PACKAGE_JSON(packageURL).\nIf pjson.imports is a non-null Object,", "doc_id": "697a9db8-176b-4b82-8e3c-708b3359f67c", "embedding": null, "doc_hash": "9099d94362052689af0ecbc1b05e7a12af026a19a32cae031bb1cfb445497dd4", "extra_info": null, "node_info": {"start": 1767401, "end": 1771053}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a95dc4bf-e9e6-454d-a0c0-2300fc7b688f", "3": "fe5672f9-60f5-491b-8601-a55e84cb51ed"}}, "__type__": "1"}, "fe5672f9-60f5-491b-8601-a55e84cb51ed": {"__data__": {"text": "concatenated with subpath.\nLet resolved be the result of PACKAGE_IMPORTS_EXPORTS_RESOLVE( matchKey, exports, packageURL, false, conditions).\nIf resolved is not null or undefined, return resolved.\nThrow a Package Path Not Exported error.\nPACKAGE_IMPORTS_RESOLVE(specifier, parentURL, conditions)\n\nAssert: specifier begins with \"#\".\nIf specifier is exactly equal to \"#\" or starts with \"#/\", then\nThrow an Invalid Module Specifier error.\nLet packageURL be the result of LOOKUP_PACKAGE_SCOPE(parentURL).\nIf packageURL is not null, then\nLet pjson be the result of READ_PACKAGE_JSON(packageURL).\nIf pjson.imports is a non-null Object, then\nLet resolved be the result of PACKAGE_IMPORTS_EXPORTS_RESOLVE( specifier, pjson.imports, packageURL, true, conditions).\nIf resolved is not null or undefined, return resolved.\nThrow a Package Import Not Defined error.\nPACKAGE_IMPORTS_EXPORTS_RESOLVE(matchKey, matchObj, packageURL, isImports, conditions)\n\nIf matchKey is a key of matchObj and does not contain \"*\", then\nLet target be the value of matchObj[matchKey].\nReturn the result of PACKAGE_TARGET_RESOLVE(packageURL, target, null, isImports, conditions).\nLet expansionKeys be the list of keys of matchObj containing only a single \"*\", sorted by the sorting function PATTERN_KEY_COMPARE which orders in descending order of specificity.\nFor each key expansionKey in expansionKeys, do\nLet patternBase be the substring of expansionKey up to but excluding the first \"*\" character.\nIf matchKey starts with but is not equal to patternBase, then\nLet patternTrailer be the substring of expansionKey from the index after the first \"*\" character.\nIf patternTrailer has zero length, or if matchKey ends with patternTrailer and the length of matchKey is greater than or equal to the length of expansionKey, then\nLet target be the value of matchObj[expansionKey].\nLet patternMatch be the substring of matchKey starting at the index of the length of patternBase up to the length of matchKey minus the length of patternTrailer.\nReturn the result of PACKAGE_TARGET_RESOLVE(packageURL, target, patternMatch, isImports, conditions).\nReturn null.\nPATTERN_KEY_COMPARE(keyA, keyB)\n\nAssert: keyA ends with \"/\" or contains only a single \"*\".\nAssert: keyB ends with \"/\" or contains only a single \"*\".\nLet baseLengthA be the index of \"*\" in keyA plus one, if keyA contains \"*\", or the length of keyA otherwise.\nLet baseLengthB be the index of \"*\" in keyB plus one, if keyB contains \"*\", or the length of keyB otherwise.\nIf baseLengthA is greater than baseLengthB, return -1.\nIf baseLengthB is greater than baseLengthA, return 1.\nIf keyA does not contain \"*\", return 1.\nIf keyB does not contain \"*\", return -1.\nIf the length of keyA is greater than the length of keyB, return -1.\nIf the length of keyB is greater than the length of keyA, return 1.\nReturn 0.\nPACKAGE_TARGET_RESOLVE(packageURL, target, patternMatch, isImports, conditions)\n\nIf target is a String, then\nIf target does not start with \"./\", then\nIf isImports is false, or if target starts with \"../\" or \"/\", or if target is a valid URL, then\nThrow an Invalid Package Target error.\nIf patternMatch is a String, then\nReturn PACKAGE_RESOLVE(target with every instance of \"*\" replaced by patternMatch, packageURL + \"/\").\nReturn PACKAGE_RESOLVE(target, packageURL + \"/\").\nIf target split on \"/\" or \"\\\" contains any \"\", \".\", \"..\", or \"node_modules\" segments after the first \".\" segment, case insensitive and including percent", "doc_id": "fe5672f9-60f5-491b-8601-a55e84cb51ed", "embedding": null, "doc_hash": "0d8d505d5bce985d97bc9bb6f84479137b7ef059a1946b470c0f70d2843117f6", "extra_info": null, "node_info": {"start": 1771182, "end": 1774625}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "697a9db8-176b-4b82-8e3c-708b3359f67c", "3": "e9fca149-7260-4295-98d0-2eefdf9a298e"}}, "__type__": "1"}, "e9fca149-7260-4295-98d0-2eefdf9a298e": {"__data__": {"text": "greater than the length of keyA, return 1.\nReturn 0.\nPACKAGE_TARGET_RESOLVE(packageURL, target, patternMatch, isImports, conditions)\n\nIf target is a String, then\nIf target does not start with \"./\", then\nIf isImports is false, or if target starts with \"../\" or \"/\", or if target is a valid URL, then\nThrow an Invalid Package Target error.\nIf patternMatch is a String, then\nReturn PACKAGE_RESOLVE(target with every instance of \"*\" replaced by patternMatch, packageURL + \"/\").\nReturn PACKAGE_RESOLVE(target, packageURL + \"/\").\nIf target split on \"/\" or \"\\\" contains any \"\", \".\", \"..\", or \"node_modules\" segments after the first \".\" segment, case insensitive and including percent encoded variants, throw an Invalid Package Target error.\nLet resolvedTarget be the URL resolution of the concatenation of packageURL and target.\nAssert: resolvedTarget is contained in packageURL.\nIf patternMatch is null, then\nReturn resolvedTarget.\nIf patternMatch split on \"/\" or \"\\\" contains any \"\", \".\", \"..\", or \"node_modules\" segments, case insensitive and including percent encoded variants, throw an Invalid Module Specifier error.\nReturn the URL resolution of resolvedTarget with every instance of \"*\" replaced with patternMatch.\nOtherwise, if target is a non-null Object, then\nIf exports contains any index property keys, as defined in ECMA-262 6.1.7 Array Index, throw an Invalid Package Configuration error.\nFor each property p of target, in object insertion order as,\nIf p equals \"default\" or conditions contains an entry for p, then\nLet targetValue be the value of the p property in target.\nLet resolved be the result of PACKAGE_TARGET_RESOLVE( packageURL, targetValue, patternMatch, isImports, conditions).\nIf resolved is equal to undefined, continue the loop.\nReturn resolved.\nReturn undefined.\nOtherwise, if target is an Array, then\nIf _target.length is zero, return null.\nFor each item targetValue in target, do\nLet resolved be the result of PACKAGE_TARGET_RESOLVE( packageURL, targetValue, patternMatch, isImports, conditions), continuing the loop on any Invalid Package Target error.\nIf resolved is undefined, continue the loop.\nReturn resolved.\nReturn or throw the last fallback resolution null return or error.\nOtherwise, if target is null, return null.\nOtherwise throw an Invalid Package Target error.\nESM_FILE_FORMAT(url)\n\nAssert: url corresponds to an existing file.\nIf url ends in \".mjs\", then\nReturn \"module\".\nIf url ends in \".cjs\", then\nReturn \"commonjs\".\nIf url ends in \".json\", then\nReturn \"json\".\nLet packageURL be the result of LOOKUP_PACKAGE_SCOPE(url).\nLet pjson be the result of READ_PACKAGE_JSON(packageURL).\nIf pjson?.type exists and is \"module\", then\nIf url ends in \".js\", then\nReturn \"module\".\nThrow an Unsupported File Extension error.\nOtherwise,\nThrow an Unsupported File Extension error.\nLOOKUP_PACKAGE_SCOPE(url)\n\nLet scopeURL be url.\nWhile scopeURL is not the file system root,\nSet scopeURL to the parent URL of scopeURL.\nIf scopeURL ends in a \"node_modules\" path segment, return null.\nLet pjsonURL be the resolution of \"package.json\" within scopeURL.\nif the file at pjsonURL exists, then\nReturn scopeURL.\nReturn null.\nREAD_PACKAGE_JSON(packageURL)\n\nLet pjsonURL be the resolution of \"package.json\" within packageURL.\nIf the file at pjsonURL does not exist, then\nReturn null.\nIf the file at packageURL does not parse as valid JSON, then\nThrow an Invalid Package Configuration error.\nReturn the parsed JSON source of the file at pjsonURL.\nCustomizing ESM specifier resolution algorithm#\nStability: 1 - Experimental\nDo not rely on this flag. We plan to remove it once the Loaders API has advanced to the point that equivalent functionality can be achieved via custom", "doc_id": "e9fca149-7260-4295-98d0-2eefdf9a298e", "embedding": null, "doc_hash": "e4d45d0f8b368af31e7cecad84d5fba7542d4ce86aeb47431f16335a96aa0df4", "extra_info": null, "node_info": {"start": 1774600, "end": 1778284}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fe5672f9-60f5-491b-8601-a55e84cb51ed", "3": "f3e692e9-0cab-4c10-af2d-aba16799d37a"}}, "__type__": "1"}, "f3e692e9-0cab-4c10-af2d-aba16799d37a": {"__data__": {"text": "scopeURL ends in a \"node_modules\" path segment, return null.\nLet pjsonURL be the resolution of \"package.json\" within scopeURL.\nif the file at pjsonURL exists, then\nReturn scopeURL.\nReturn null.\nREAD_PACKAGE_JSON(packageURL)\n\nLet pjsonURL be the resolution of \"package.json\" within packageURL.\nIf the file at pjsonURL does not exist, then\nReturn null.\nIf the file at packageURL does not parse as valid JSON, then\nThrow an Invalid Package Configuration error.\nReturn the parsed JSON source of the file at pjsonURL.\nCustomizing ESM specifier resolution algorithm#\nStability: 1 - Experimental\nDo not rely on this flag. We plan to remove it once the Loaders API has advanced to the point that equivalent functionality can be achieved via custom loaders.\n\nThe current specifier resolution does not support all default behavior of the CommonJS loader. One of the behavior differences is automatic resolution of file extensions and the ability to import directories that have an index file.\n\nThe --experimental-specifier-resolution=[mode] flag can be used to customize the extension resolution algorithm. The default mode is explicit, which requires the full path to a module be provided to the loader. To enable the automatic extension resolution and importing from directories that include an index file use the node mode.\n\n$ node index.mjs\nsuccess!\n$ node index # Failure!\nError: Cannot find module\n$ node --experimental-specifier-resolution=node index\nsuccess!\nModules: node:module API#\nAdded in: v0.3.7\nThe Module object#\n<Object>\nProvides general utility methods when interacting with instances of Module, the module variable often seen in CommonJS modules. Accessed via import 'node:module' or require('node:module').\n\nmodule.builtinModules#\nAdded in: v9.3.0, v8.10.0, v6.13.0\n<string[]>\nA list of the names of all modules provided by Node.js. Can be used to verify if a module is maintained by a third party or not.\n\nmodule in this context isn't the same object that's provided by the module wrapper. To access it, require the Module module:\n\n// module.mjs\n// In an ECMAScript module\nimport { builtinModules as builtin } from 'node:module';\nmodule.createRequire(filename)#\nAdded in: v12.2.0\nfilename <string> | <URL> Filename to be used to construct the require function. Must be a file URL object, file URL string, or absolute path string.\nReturns: <require> Require function\nimport { createRequire } from 'node:module';\nconst require = createRequire(import.meta.url);\n\n// sibling-module.js is a CommonJS module.\nconst siblingModule = require('./sibling-module');\nmodule.isBuiltin(moduleName)#\nAdded in: v18.6.0\nmoduleName <string> name of the module\nReturns: <boolean> returns true if the module is builtin else returns false\nimport { isBuiltin } from 'node:module';\nisBuiltin('node:fs'); // true\nisBuiltin('fs'); // true\nisBuiltin('wss'); // false\nmodule.syncBuiltinESMExports()#\nAdded in: v12.12.0\nThe module.syncBuiltinESMExports() method updates all the live bindings for builtin ES Modules to match the properties of the CommonJS exports. It does not add or remove exported names from the ES Modules.\n\nconst fs = require('node:fs');\nconst assert = require('node:assert');\nconst { syncBuiltinESMExports } = require('node:module');\n\nfs.readFile = newAPI;\n\ndelete fs.readFileSync;\n\nfunction newAPI() {\n  // ...\n}\n\nfs.newAPI = newAPI;\n\nsyncBuiltinESMExports();\n\nimport('node:fs').then((esmFS) => {\n  // It syncs the existing readFile property with the new value\n  assert.strictEqual(esmFS.readFile, newAPI);\n  // readFileSync has been deleted from the required fs\n  assert.strictEqual('readFileSync' in fs,", "doc_id": "f3e692e9-0cab-4c10-af2d-aba16799d37a", "embedding": null, "doc_hash": "83da12a743bcdc440c558f32a819d2cb57971f80ef07dd55cc2b81c9e927eff4", "extra_info": null, "node_info": {"start": 1778229, "end": 1781838}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e9fca149-7260-4295-98d0-2eefdf9a298e", "3": "e0d6b48d-4374-4e43-9689-0e0797e06be6"}}, "__type__": "1"}, "e0d6b48d-4374-4e43-9689-0e0797e06be6": {"__data__": {"text": "builtin ES Modules to match the properties of the CommonJS exports. It does not add or remove exported names from the ES Modules.\n\nconst fs = require('node:fs');\nconst assert = require('node:assert');\nconst { syncBuiltinESMExports } = require('node:module');\n\nfs.readFile = newAPI;\n\ndelete fs.readFileSync;\n\nfunction newAPI() {\n  // ...\n}\n\nfs.newAPI = newAPI;\n\nsyncBuiltinESMExports();\n\nimport('node:fs').then((esmFS) => {\n  // It syncs the existing readFile property with the new value\n  assert.strictEqual(esmFS.readFile, newAPI);\n  // readFileSync has been deleted from the required fs\n  assert.strictEqual('readFileSync' in fs, false);\n  // syncBuiltinESMExports() does not remove readFileSync from esmFS\n  assert.strictEqual('readFileSync' in esmFS, true);\n  // syncBuiltinESMExports() does not add names\n  assert.strictEqual(esmFS.newAPI, undefined);\n});\nSource map v3 support#\nAdded in: v13.7.0, v12.17.0\nStability: 1 - Experimental\nHelpers for interacting with the source map cache. This cache is populated when source map parsing is enabled and source map include directives are found in a modules' footer.\n\nTo enable source map parsing, Node.js must be run with the flag --enable-source-maps, or with code coverage enabled by setting NODE_V8_COVERAGE=dir.\n\n// module.mjs\n// In an ECMAScript module\nimport { findSourceMap, SourceMap } from 'node:module';\n\nmodule.findSourceMap(path)#\nAdded in: v13.7.0, v12.17.0\npath <string>\nReturns: <module.SourceMap> | <undefined> Returns module.SourceMap if a source map is found, undefined otherwise.\npath is the resolved path for the file for which a corresponding source map should be fetched.\n\nClass: module.SourceMap#\nAdded in: v13.7.0, v12.17.0\nnew SourceMap(payload)#\npayload <Object>\nCreates a new sourceMap instance.\n\npayload is an object with keys matching the Source map v3 format:\n\nfile: <string>\nversion: <number>\nsources: <string[]>\nsourcesContent: <string[]>\nnames: <string[]>\nmappings: <string>\nsourceRoot: <string>\nsourceMap.payload#\nReturns: <Object>\nGetter for the payload used to construct the SourceMap instance.\n\nsourceMap.findEntry(lineNumber, columnNumber)#\nlineNumber <number>\ncolumnNumber <number>\nReturns: <Object>\nGiven a line number and column number in the generated source file, returns an object representing the position in the original file. The object returned consists of the following keys:\n\ngeneratedLine: <number>\ngeneratedColumn: <number>\noriginalSource: <string>\noriginalLine: <number>\noriginalColumn: <number>\nname: <string>\nModules: Packages#\nHistory\nIntroduction#\nA package is a folder tree described by a package.json file. The package consists of the folder containing the package.json file and all subfolders until the next folder containing another package.json file, or a folder named node_modules.\n\nThis page provides guidance for package authors writing package.json files along with a reference for the package.json fields defined by Node.js.\n\nDetermining module system#\nNode.js will treat the following as ES modules when passed to node as the initial input, or when referenced by import statements or import() expressions:\n\nFiles with an .mjs extension.\n\nFiles with a .js extension when the nearest parent package.json file contains a top-level \"type\" field with a value of \"module\".\n\nStrings passed in as an argument to --eval, or piped to node via STDIN, with the flag --input-type=module.\n\nNode.js will treat as CommonJS all other forms of input, such as .js files where the nearest parent package.json", "doc_id": "e0d6b48d-4374-4e43-9689-0e0797e06be6", "embedding": null, "doc_hash": "6c5f864efba32e8af74a643e44d9dcbc82f0541e0b7c478c5f88ba99d0a1950a", "extra_info": null, "node_info": {"start": 1781921, "end": 1785427}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f3e692e9-0cab-4c10-af2d-aba16799d37a", "3": "09009419-a0cb-42e5-8cd8-d2f941c38406"}}, "__type__": "1"}, "09009419-a0cb-42e5-8cd8-d2f941c38406": {"__data__": {"text": "file, or a folder named node_modules.\n\nThis page provides guidance for package authors writing package.json files along with a reference for the package.json fields defined by Node.js.\n\nDetermining module system#\nNode.js will treat the following as ES modules when passed to node as the initial input, or when referenced by import statements or import() expressions:\n\nFiles with an .mjs extension.\n\nFiles with a .js extension when the nearest parent package.json file contains a top-level \"type\" field with a value of \"module\".\n\nStrings passed in as an argument to --eval, or piped to node via STDIN, with the flag --input-type=module.\n\nNode.js will treat as CommonJS all other forms of input, such as .js files where the nearest parent package.json file contains no top-level \"type\" field, or string input without the flag --input-type. This behavior is to preserve backward compatibility. However, now that Node.js supports both CommonJS and ES modules, it is best to be explicit whenever possible. Node.js will treat the following as CommonJS when passed to node as the initial input, or when referenced by import statements, import() expressions, or require() expressions:\n\nFiles with a .cjs extension.\n\nFiles with a .js extension when the nearest parent package.json file contains a top-level field \"type\" with a value of \"commonjs\".\n\nStrings passed in as an argument to --eval or --print, or piped to node via STDIN, with the flag --input-type=commonjs.\n\nPackage authors should include the \"type\" field, even in packages where all sources are CommonJS. Being explicit about the type of the package will future-proof the package in case the default type of Node.js ever changes, and it will also make things easier for build tools and loaders to determine how the files in the package should be interpreted.\n\nModules loaders#\nNode.js has two systems for resolving a specifier and loading modules.\n\nThere is the CommonJS module loader:\n\nIt is fully synchronous.\nIt is responsible for handling require() calls.\nIt is monkey patchable.\nIt supports folders as modules.\nWhen resolving a specifier, if no exact match is found, it will try to add extensions (.js, .json, and finally .node) and then attempt to resolve folders as modules.\nIt treats .json as JSON text files.\n.node files are interpreted as compiled addon modules loaded with process.dlopen().\nIt treats all files that lack .json or .node extensions as JavaScript text files.\nIt cannot be used to load ECMAScript modules (although it is possible to load ECMASCript modules from CommonJS modules). When used to load a JavaScript text file that is not an ECMAScript module, it loads it as a CommonJS module.\nThere is the ECMAScript module loader:\n\nIt is asynchronous.\nIt is responsible for handling import statements and import() expressions.\nIt is not monkey patchable, can be customized using loader hooks.\nIt does not support folders as modules, directory indexes (e.g. './startup/index.js') must be fully specified.\nIt does no extension searching. A file extension must be provided when the specifier is a relative or absolute file URL.\nIt can load JSON modules, but an import assertion is required.\nIt accepts only .js, .mjs, and .cjs extensions for JavaScript text files.\nIt can be used to load JavaScript CommonJS modules. Such modules are passed through the cjs-module-lexer to try to identify named exports, which are available if they can be determined through static analysis. Imported CommonJS modules have their URLs converted to absolute paths and are then loaded via the CommonJS module loader.\npackage.json and file extensions#\nWithin a package, the package.json \"type\" field defines how Node.js should interpret .js files. If a package.json file does not have a \"type\" field, .js files are treated as CommonJS.\n\nA package.json \"type\" value of \"module\" tells Node.js to interpret .js files within that package as using ES module syntax.\n\nThe \"type\" field applies not only", "doc_id": "09009419-a0cb-42e5-8cd8-d2f941c38406", "embedding": null, "doc_hash": "913376e4e723dc72f0669e367496815c7af9feab24f9ac31227fba3b51309321", "extra_info": null, "node_info": {"start": 1785346, "end": 1789293}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e0d6b48d-4374-4e43-9689-0e0797e06be6", "3": "c61dbd27-9c2d-471c-92eb-b7b00ce93a6c"}}, "__type__": "1"}, "c61dbd27-9c2d-471c-92eb-b7b00ce93a6c": {"__data__": {"text": "accepts only .js, .mjs, and .cjs extensions for JavaScript text files.\nIt can be used to load JavaScript CommonJS modules. Such modules are passed through the cjs-module-lexer to try to identify named exports, which are available if they can be determined through static analysis. Imported CommonJS modules have their URLs converted to absolute paths and are then loaded via the CommonJS module loader.\npackage.json and file extensions#\nWithin a package, the package.json \"type\" field defines how Node.js should interpret .js files. If a package.json file does not have a \"type\" field, .js files are treated as CommonJS.\n\nA package.json \"type\" value of \"module\" tells Node.js to interpret .js files within that package as using ES module syntax.\n\nThe \"type\" field applies not only to initial entry points (node my-app.js) but also to files referenced by import statements and import() expressions.\n\n// my-app.js, treated as an ES module because there is a package.json\n// file in the same folder with \"type\": \"module\".\n\nimport './startup/init.js';\n// Loaded as ES module since ./startup contains no package.json file,\n// and therefore inherits the \"type\" value from one level up.\n\nimport 'commonjs-package';\n// Loaded as CommonJS since ./node_modules/commonjs-package/package.json\n// lacks a \"type\" field or contains \"type\": \"commonjs\".\n\nimport './node_modules/commonjs-package/index.js';\n// Loaded as CommonJS since ./node_modules/commonjs-package/package.json\n// lacks a \"type\" field or contains \"type\": \"commonjs\".\nFiles ending with .mjs are always loaded as ES modules regardless of the nearest parent package.json.\n\nFiles ending with .cjs are always loaded as CommonJS regardless of the nearest parent package.json.\n\nimport './legacy-file.cjs';\n// Loaded as CommonJS since .cjs is always loaded as CommonJS.\n\nimport 'commonjs-package/src/index.mjs';\n// Loaded as ES module since .mjs is always loaded as ES module.\nThe .mjs and .cjs extensions can be used to mix types within the same package:\n\nWithin a \"type\": \"module\" package, Node.js can be instructed to interpret a particular file as CommonJS by naming it with a .cjs extension (since both .js and .mjs files are treated as ES modules within a \"module\" package).\n\nWithin a \"type\": \"commonjs\" package, Node.js can be instructed to interpret a particular file as an ES module by naming it with an .mjs extension (since both .js and .cjs files are treated as CommonJS within a \"commonjs\" package).\n\n--input-type flag#\nAdded in: v12.0.0\nStrings passed in as an argument to --eval (or -e), or piped to node via STDIN, are treated as ES modules when the --input-type=module flag is set.\n\nnode --input-type=module --eval \"import { sep } from 'node:path'; console.log(sep);\"\n\necho \"import { sep } from 'node:path'; console.log(sep);\" | node --input-type=module\nFor completeness there is also --input-type=commonjs, for explicitly running string input as CommonJS. This is the default behavior if --input-type is unspecified.\n\nDetermining package manager#\nStability: 1 - Experimental\nWhile all Node.js projects are expected to be installable by all package managers once published, their development teams are often required to use one specific package manager. To make this process easier, Node.js ships with a tool called Corepack that aims to make all package managers transparently available in your environment - provided you have Node.js installed.\n\nBy default Corepack won't enforce any specific package manager and will use the generic \"Last Known Good\" versions associated with each Node.js release, but you can improve this experience by setting the \"packageManager\" field in your project's package.json.\n\nPackage entry points#\nIn a package's package.json file, two fields can define entry points for a package: \"main\" and", "doc_id": "c61dbd27-9c2d-471c-92eb-b7b00ce93a6c", "embedding": null, "doc_hash": "a984a8b7e599bc2b3cff81bacdcc2b159d2f2b737188f838e19a5db0f152ea19", "extra_info": null, "node_info": {"start": 1789270, "end": 1793054}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "09009419-a0cb-42e5-8cd8-d2f941c38406", "3": "e64855b4-730a-42f0-a2cc-7b7a6de5451c"}}, "__type__": "1"}, "e64855b4-730a-42f0-a2cc-7b7a6de5451c": {"__data__": {"text": "running string input as CommonJS. This is the default behavior if --input-type is unspecified.\n\nDetermining package manager#\nStability: 1 - Experimental\nWhile all Node.js projects are expected to be installable by all package managers once published, their development teams are often required to use one specific package manager. To make this process easier, Node.js ships with a tool called Corepack that aims to make all package managers transparently available in your environment - provided you have Node.js installed.\n\nBy default Corepack won't enforce any specific package manager and will use the generic \"Last Known Good\" versions associated with each Node.js release, but you can improve this experience by setting the \"packageManager\" field in your project's package.json.\n\nPackage entry points#\nIn a package's package.json file, two fields can define entry points for a package: \"main\" and \"exports\". Both fields apply to both ES module and CommonJS module entry points.\n\nThe \"main\" field is supported in all versions of Node.js, but its capabilities are limited: it only defines the main entry point of the package.\n\nThe \"exports\" provides a modern alternative to \"main\" allowing multiple entry points to be defined, conditional entry resolution support between environments, and preventing any other entry points besides those defined in \"exports\". This encapsulation allows module authors to clearly define the public interface for their package.\n\nFor new packages targeting the currently supported versions of Node.js, the \"exports\" field is recommended. For packages supporting Node.js 10 and below, the \"main\" field is required. If both \"exports\" and \"main\" are defined, the \"exports\" field takes precedence over \"main\" in supported versions of Node.js.\n\nConditional exports can be used within \"exports\" to define different package entry points per environment, including whether the package is referenced via require or via import. For more information about supporting both CommonJS and ES modules in a single package please consult the dual CommonJS/ES module packages section.\n\nExisting packages introducing the \"exports\" field will prevent consumers of the package from using any entry points that are not defined, including the package.json (e.g. require('your-package/package.json'). This will likely be a breaking change.\n\nTo make the introduction of \"exports\" non-breaking, ensure that every previously supported entry point is exported. It is best to explicitly specify entry points so that the package's public API is well-defined. For example, a project that previously exported main, lib, feature, and the package.json could use the following package.exports:\n\n{\n  \"name\": \"my-package\",\n  \"exports\": {\n    \".\": \"./lib/index.js\",\n    \"./lib\": \"./lib/index.js\",\n    \"./lib/index\": \"./lib/index.js\",\n    \"./lib/index.js\": \"./lib/index.js\",\n    \"./feature\": \"./feature/index.js\",\n    \"./feature/index\": \"./feature/index.js\",\n    \"./feature/index.js\": \"./feature/index.js\",\n    \"./package.json\": \"./package.json\"\n  }\n}\nAlternatively a project could choose to export entire folders both with and without extensioned subpaths using export patterns:\n\n{\n  \"name\": \"my-package\",\n  \"exports\": {\n    \".\": \"./lib/index.js\",\n    \"./lib\": \"./lib/index.js\",\n    \"./lib/*\": \"./lib/*.js\",\n    \"./lib/*.js\": \"./lib/*.js\",\n    \"./feature\": \"./feature/index.js\",\n    \"./feature/*\": \"./feature/*.js\",\n    \"./feature/*.js\": \"./feature/*.js\",\n    \"./package.json\": \"./package.json\"\n  }\n}\nWith the above providing backwards-compatibility for any minor package versions, a future major change for the package can then properly restrict the exports to only the specific feature exports exposed:\n\n{\n  \"name\": \"my-package\",\n ", "doc_id": "e64855b4-730a-42f0-a2cc-7b7a6de5451c", "embedding": null, "doc_hash": "681e738546c2b411704575ba519a2c5577fa5d92a12753157852256b4aa9b7ab", "extra_info": null, "node_info": {"start": 1792945, "end": 1796672}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c61dbd27-9c2d-471c-92eb-b7b00ce93a6c", "3": "197a86e7-b566-4916-98fd-11f309cb9997"}}, "__type__": "1"}, "197a86e7-b566-4916-98fd-11f309cb9997": {"__data__": {"text": "{\n    \".\": \"./lib/index.js\",\n    \"./lib\": \"./lib/index.js\",\n    \"./lib/*\": \"./lib/*.js\",\n    \"./lib/*.js\": \"./lib/*.js\",\n    \"./feature\": \"./feature/index.js\",\n    \"./feature/*\": \"./feature/*.js\",\n    \"./feature/*.js\": \"./feature/*.js\",\n    \"./package.json\": \"./package.json\"\n  }\n}\nWith the above providing backwards-compatibility for any minor package versions, a future major change for the package can then properly restrict the exports to only the specific feature exports exposed:\n\n{\n  \"name\": \"my-package\",\n  \"exports\": {\n    \".\": \"./lib/index.js\",\n    \"./feature/*.js\": \"./feature/*.js\",\n    \"./feature/internal/*\": null\n  }\n}\nMain entry point export#\nWhen writing a new package, it is recommended to use the \"exports\" field:\n\n{\n  \"exports\": \"./index.js\"\n}\nWhen the \"exports\" field is defined, all subpaths of the package are encapsulated and no longer available to importers. For example, require('pkg/subpath.js') throws an ERR_PACKAGE_PATH_NOT_EXPORTED error.\n\nThis encapsulation of exports provides more reliable guarantees about package interfaces for tools and when handling semver upgrades for a package. It is not a strong encapsulation since a direct require of any absolute subpath of the package such as require('/path/to/node_modules/pkg/subpath.js') will still load subpath.js.\n\nAll currently supported versions of Node.js and modern build tools support the \"exports\" field. For projects using an older version of Node.js or a related build tool, compatibility can be achieved by including the \"main\" field alongside \"exports\" pointing to the same module:\n\n{\n  \"main\": \"./index.js\",\n  \"exports\": \"./index.js\"\n}\nSubpath exports#\nAdded in: v12.7.0\nWhen using the \"exports\" field, custom subpaths can be defined along with the main entry point by treating the main entry point as the \".\" subpath:\n\n{\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./submodule.js\": \"./src/submodule.js\"\n  }\n}\nNow only the defined subpath in \"exports\" can be imported by a consumer:\n\nimport submodule from 'es-module-package/submodule.js';\n// Loads ./node_modules/es-module-package/src/submodule.js\nWhile other subpaths will error:\n\nimport submodule from 'es-module-package/private-module.js';\n// Throws ERR_PACKAGE_PATH_NOT_EXPORTED\nExtensions in subpaths#\nPackage authors should provide either extensioned (import 'pkg/subpath.js') or extensionless (import 'pkg/subpath') subpaths in their exports. This ensures that there is only one subpath for each exported module so that all dependents import the same consistent specifier, keeping the package contract clear for consumers and simplifying package subpath completions.\n\nTraditionally, packages tended to use the extensionless style, which has the benefits of readability and of masking the true path of the file within the package.\n\nWith import maps now providing a standard for package resolution in browsers and other JavaScript runtimes, using the extensionless style can result in bloated import map definitions. Explicit file extensions can avoid this issue by enabling the import map to utilize a packages folder mapping to map multiple subpaths where possible instead of a separate map entry per package subpath export. This also mirrors the requirement of using the full specifier path in relative and absolute import specifiers.\n\nExports sugar#\nAdded in: v12.11.0\nIf the \".\" export is the only export, the \"exports\" field provides sugar for this case being", "doc_id": "197a86e7-b566-4916-98fd-11f309cb9997", "embedding": null, "doc_hash": "622d78768de3c64b84b0b448b02c7bce2707288cce914b1a12c6841158fb19ef", "extra_info": null, "node_info": {"start": 1797007, "end": 1800422}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e64855b4-730a-42f0-a2cc-7b7a6de5451c", "3": "2d4f8e80-a0af-413d-b693-95820e2dabda"}}, "__type__": "1"}, "2d4f8e80-a0af-413d-b693-95820e2dabda": {"__data__": {"text": "simplifying package subpath completions.\n\nTraditionally, packages tended to use the extensionless style, which has the benefits of readability and of masking the true path of the file within the package.\n\nWith import maps now providing a standard for package resolution in browsers and other JavaScript runtimes, using the extensionless style can result in bloated import map definitions. Explicit file extensions can avoid this issue by enabling the import map to utilize a packages folder mapping to map multiple subpaths where possible instead of a separate map entry per package subpath export. This also mirrors the requirement of using the full specifier path in relative and absolute import specifiers.\n\nExports sugar#\nAdded in: v12.11.0\nIf the \".\" export is the only export, the \"exports\" field provides sugar for this case being the direct \"exports\" field value.\n\n{\n  \"exports\": {\n    \".\": \"./index.js\"\n  }\n}\ncan be written:\n\n{\n  \"exports\": \"./index.js\"\n}\nSubpath imports#\nAdded in: v14.6.0, v12.19.0\nIn addition to the \"exports\" field, there is a package \"imports\" field to create private mappings that only apply to import specifiers from within the package itself.\n\nEntries in the \"imports\" field must always start with # to ensure they are disambiguated from external package specifiers.\n\nFor example, the imports field can be used to gain the benefits of conditional exports for internal modules:\n\n// package.json\n{\n  \"imports\": {\n    \"#dep\": {\n      \"node\": \"dep-node-native\",\n      \"default\": \"./dep-polyfill.js\"\n    }\n  },\n  \"dependencies\": {\n    \"dep-node-native\": \"^1.0.0\"\n  }\n}\nwhere import '#dep' does not get the resolution of the external package dep-node-native (including its exports in turn), and instead gets the local file ./dep-polyfill.js relative to the package in other environments.\n\nUnlike the \"exports\" field, the \"imports\" field permits mapping to external packages.\n\nThe resolution rules for the imports field are otherwise analogous to the exports field.\n\nSubpath patterns#\nHistory\nFor packages with a small number of exports or imports, we recommend explicitly listing each exports subpath entry. But for packages that have large numbers of subpaths, this might cause package.json bloat and maintenance issues.\n\nFor these use cases, subpath export patterns can be used instead:\n\n// ./node_modules/es-module-package/package.json\n{\n  \"exports\": {\n    \"./features/*.js\": \"./src/features/*.js\"\n  },\n  \"imports\": {\n    \"#internal/*.js\": \"./src/internal/*.js\"\n  }\n}\n* maps expose nested subpaths as it is a string replacement syntax only.\n\nAll instances of * on the right hand side will then be replaced with this value, including if it contains any / separators.\n\nimport featureX from 'es-module-package/features/x.js';\n// Loads ./node_modules/es-module-package/src/features/x.js\n\nimport featureY from 'es-module-package/features/y/y.js';\n// Loads ./node_modules/es-module-package/src/features/y/y.js\n\nimport internalZ from '#internal/z.js';\n// Loads ./node_modules/es-module-package/src/internal/z.js\nThis is a direct static matching and replacement without any special handling for file extensions. Including the \"*.js\" on both sides of the mapping restricts the exposed package exports to only JS files.\n\nThe property of exports being statically enumerable is maintained with exports patterns since the individual exports for a package can be determined by treating the right hand side target pattern as a ** glob against the list of files within the package. Because node_modules paths are forbidden", "doc_id": "2d4f8e80-a0af-413d-b693-95820e2dabda", "embedding": null, "doc_hash": "2ef67e4f2aaa7ee20e0aa760453003fd9d22c200e96663dba8fe991b78e30338", "extra_info": null, "node_info": {"start": 1800149, "end": 1803686}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "197a86e7-b566-4916-98fd-11f309cb9997", "3": "c6270d9c-fc5f-4de7-aefa-456a43666911"}}, "__type__": "1"}, "c6270d9c-fc5f-4de7-aefa-456a43666911": {"__data__": {"text": "featureY from 'es-module-package/features/y/y.js';\n// Loads ./node_modules/es-module-package/src/features/y/y.js\n\nimport internalZ from '#internal/z.js';\n// Loads ./node_modules/es-module-package/src/internal/z.js\nThis is a direct static matching and replacement without any special handling for file extensions. Including the \"*.js\" on both sides of the mapping restricts the exposed package exports to only JS files.\n\nThe property of exports being statically enumerable is maintained with exports patterns since the individual exports for a package can be determined by treating the right hand side target pattern as a ** glob against the list of files within the package. Because node_modules paths are forbidden in exports targets, this expansion is dependent on only the files of the package itself.\n\nTo exclude private subfolders from patterns, null targets can be used:\n\n// ./node_modules/es-module-package/package.json\n{\n  \"exports\": {\n    \"./features/*.js\": \"./src/features/*.js\",\n    \"./features/private-internal/*\": null\n  }\n}\nimport featureInternal from 'es-module-package/features/private-internal/m.js';\n// Throws: ERR_PACKAGE_PATH_NOT_EXPORTED\n\nimport featureX from 'es-module-package/features/x.js';\n// Loads ./node_modules/es-module-package/src/features/x.js\nConditional exports#\nHistory\nConditional exports provide a way to map to different paths depending on certain conditions. They are supported for both CommonJS and ES module imports.\n\nFor example, a package that wants to provide different ES module exports for require() and import can be written:\n\n// package.json\n{\n  \"exports\": {\n    \"import\": \"./index-module.js\",\n    \"require\": \"./index-require.cjs\"\n  },\n  \"type\": \"module\"\n}\nNode.js implements the following conditions, listed in order from most specific to least specific as conditions should be defined:\n\n\"node-addons\" - similar to \"node\" and matches for any Node.js environment. This condition can be used to provide an entry point which uses native C++ addons as opposed to an entry point which is more universal and doesn't rely on native addons. This condition can be disabled via the --no-addons flag.\n\"node\" - matches for any Node.js environment. Can be a CommonJS or ES module file. In most cases explicitly calling out the Node.js platform is not necessary.\n\"import\" - matches when the package is loaded via import or import(), or via any top-level import or resolve operation by the ECMAScript module loader. Applies regardless of the module format of the target file. Always mutually exclusive with \"require\".\n\"require\" - matches when the package is loaded via require(). The referenced file should be loadable with require() although the condition matches regardless of the module format of the target file. Expected formats include CommonJS, JSON, and native addons but not ES modules as require() doesn't support them. Always mutually exclusive with \"import\".\n\"default\" - the generic fallback that always matches. Can be a CommonJS or ES module file. This condition should always come last.\nWithin the \"exports\" object, key order is significant. During condition matching, earlier entries have higher priority and take precedence over later entries. The general rule is that conditions should be from most specific to least specific in object order.\n\nUsing the \"import\" and \"require\" conditions can lead to some hazards, which are further explained in the dual CommonJS/ES module packages section.\n\nThe \"node-addons\" condition can be used to provide an entry point which uses native C++ addons. However, this condition can be disabled via the --no-addons flag. When using \"node-addons\", it's recommended to treat \"default\" as an enhancement that provides a more universal entry point, e.g. using WebAssembly instead of a native addon.\n\nConditional exports can also be extended to exports subpaths, for example:\n\n{\n ", "doc_id": "c6270d9c-fc5f-4de7-aefa-456a43666911", "embedding": null, "doc_hash": "52e303e1f64bdacb77a036fe4e047697c9c2af98719d1919e2f661a6e81f5816", "extra_info": null, "node_info": {"start": 1803772, "end": 1807632}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2d4f8e80-a0af-413d-b693-95820e2dabda", "3": "c2d2f453-d412-443c-8c56-e617ab782c97"}}, "__type__": "1"}, "c2d2f453-d412-443c-8c56-e617ab782c97": {"__data__": {"text": "object, key order is significant. During condition matching, earlier entries have higher priority and take precedence over later entries. The general rule is that conditions should be from most specific to least specific in object order.\n\nUsing the \"import\" and \"require\" conditions can lead to some hazards, which are further explained in the dual CommonJS/ES module packages section.\n\nThe \"node-addons\" condition can be used to provide an entry point which uses native C++ addons. However, this condition can be disabled via the --no-addons flag. When using \"node-addons\", it's recommended to treat \"default\" as an enhancement that provides a more universal entry point, e.g. using WebAssembly instead of a native addon.\n\nConditional exports can also be extended to exports subpaths, for example:\n\n{\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./feature.js\": {\n      \"node\": \"./feature-node.js\",\n      \"default\": \"./feature.js\"\n    }\n  }\n}\nDefines a package where require('pkg/feature.js') and import 'pkg/feature.js' could provide different implementations between Node.js and other JS environments.\n\nWhen using environment branches, always include a \"default\" condition where possible. Providing a \"default\" condition ensures that any unknown JS environments are able to use this universal implementation, which helps avoid these JS environments from having to pretend to be existing environments in order to support packages with conditional exports. For this reason, using \"node\" and \"default\" condition branches is usually preferable to using \"node\" and \"browser\" condition branches.\n\nNested conditions#\nIn addition to direct mappings, Node.js also supports nested condition objects.\n\nFor example, to define a package that only has dual mode entry points for use in Node.js but not the browser:\n\n{\n  \"exports\": {\n    \"node\": {\n      \"import\": \"./feature-node.mjs\",\n      \"require\": \"./feature-node.cjs\"\n    },\n    \"default\": \"./feature.mjs\"\n  }\n}\nConditions continue to be matched in order as with flat conditions. If a nested condition does not have any mapping it will continue checking the remaining conditions of the parent condition. In this way nested conditions behave analogously to nested JavaScript if statements.\n\nResolving user conditions#\nAdded in: v14.9.0, v12.19.0\nWhen running Node.js, custom user conditions can be added with the --conditions flag:\n\nnode --conditions=development index.js\nwhich would then resolve the \"development\" condition in package imports and exports, while resolving the existing \"node\", \"node-addons\", \"default\", \"import\", and \"require\" conditions as appropriate.\n\nAny number of custom conditions can be set with repeat flags.\n\nCommunity Conditions Definitions#\nCondition strings other than the \"import\", \"require\", \"node\", \"node-addons\" and \"default\" conditions implemented in Node.js core are ignored by default.\n\nOther platforms may implement other conditions and user conditions can be enabled in Node.js via the --conditions / -C flag.\n\nSince custom package conditions require clear definitions to ensure correct usage, a list of common known package conditions and their strict definitions is provided below to assist with ecosystem coordination.\n\n\"types\" - can be used by typing systems to resolve the typing file for the given export. This condition should always be included first.\n\"deno\" - indicates a variation for the Deno platform.\n\"browser\" - any web browser environment.\n\"react-native\" - will be matched by the React Native framework (all platforms). To target React Native for Web, \"browser\" should be specified before this condition.\n\"development\" - can be used to define a development-only environment entry point, for example to provide additional debugging context such as better error messages when running in a development mode. Must always be mutually exclusive with \"production\".\n\"production\" - can be used to define a production environment entry point. Must always be mutually exclusive", "doc_id": "c2d2f453-d412-443c-8c56-e617ab782c97", "embedding": null, "doc_hash": "eaf86e86dad6f18a50cb13c668cf7cf05c00bf6bad5f7da9b0691c8fa42cfa84", "extra_info": null, "node_info": {"start": 1807576, "end": 1811535}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c6270d9c-fc5f-4de7-aefa-456a43666911", "3": "5cfe727c-fce1-4059-84c8-3fca3d4cf145"}}, "__type__": "1"}, "5cfe727c-fce1-4059-84c8-3fca3d4cf145": {"__data__": {"text": "list of common known package conditions and their strict definitions is provided below to assist with ecosystem coordination.\n\n\"types\" - can be used by typing systems to resolve the typing file for the given export. This condition should always be included first.\n\"deno\" - indicates a variation for the Deno platform.\n\"browser\" - any web browser environment.\n\"react-native\" - will be matched by the React Native framework (all platforms). To target React Native for Web, \"browser\" should be specified before this condition.\n\"development\" - can be used to define a development-only environment entry point, for example to provide additional debugging context such as better error messages when running in a development mode. Must always be mutually exclusive with \"production\".\n\"production\" - can be used to define a production environment entry point. Must always be mutually exclusive with \"development\".\nNew conditions definitions may be added to this list by creating a pull request to the Node.js documentation for this section. The requirements for listing a new condition definition here are that:\n\nThe definition should be clear and unambiguous for all implementers.\nThe use case for why the condition is needed should be clearly justified.\nThere should exist sufficient existing implementation usage.\nThe condition name should not conflict with another condition definition or condition in wide usage.\nThe listing of the condition definition should provide a coordination benefit to the ecosystem that wouldn't otherwise be possible. For example, this would not necessarily be the case for company-specific or application-specific conditions.\nThe above definitions may be moved to a dedicated conditions registry in due course.\n\nSelf-referencing a package using its name#\nHistory\nWithin a package, the values defined in the package's package.json \"exports\" field can be referenced via the package's name. For example, assuming the package.json is:\n\n// package.json\n{\n  \"name\": \"a-package\",\n  \"exports\": {\n    \".\": \"./index.mjs\",\n    \"./foo.js\": \"./foo.js\"\n  }\n}\nThen any module in that package can reference an export in the package itself:\n\n// ./a-module.mjs\nimport { something } from 'a-package'; // Imports \"something\" from ./index.mjs.\nSelf-referencing is available only if package.json has \"exports\", and will allow importing only what that \"exports\" (in the package.json) allows. So the code below, given the previous package, will generate a runtime error:\n\n// ./another-module.mjs\n\n// Imports \"another\" from ./m.mjs. Fails because\n// the \"package.json\" \"exports\" field\n// does not provide an export named \"./m.mjs\".\nimport { another } from 'a-package/m.mjs';\nSelf-referencing is also available when using require, both in an ES module, and in a CommonJS one. For example, this code will also work:\n\n// ./a-module.js\nconst { something } = require('a-package/foo.js'); // Loads from ./foo.js.\nFinally, self-referencing also works with scoped packages. For example, this code will also work:\n\n// package.json\n{\n  \"name\": \"@my/package\",\n  \"exports\": \"./index.js\"\n}\n// ./index.js\nmodule.exports = 42;\n// ./other.js\nconsole.log(require('@my/package'));\n$ node other.js\n42\nDual CommonJS/ES module packages#\nPrior to the introduction of support for ES modules in Node.js, it was a common pattern for package authors to include both CommonJS and ES module JavaScript sources in their package, with package.json \"main\" specifying the CommonJS entry point and package.json \"module\" specifying the ES module entry point. This enabled Node.js to run the CommonJS entry point while build tools such as bundlers used the ES module entry point, since Node.js ignored (and still ignores) the top-level \"module\" field.\n\nNode.js can now run ES module entry points, and a package can contain both CommonJS and ES module entry points (either via separate specifiers such as 'pkg' and 'pkg/es-module', or both at the same", "doc_id": "5cfe727c-fce1-4059-84c8-3fca3d4cf145", "embedding": null, "doc_hash": "80ae3d96980e35520438a4af95444311ba965df42939927229abe56d7c6178f2", "extra_info": null, "node_info": {"start": 1811465, "end": 1815380}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c2d2f453-d412-443c-8c56-e617ab782c97", "3": "254020c3-127a-422a-88e5-9de6fdec1d74"}}, "__type__": "1"}, "254020c3-127a-422a-88e5-9de6fdec1d74": {"__data__": {"text": "node other.js\n42\nDual CommonJS/ES module packages#\nPrior to the introduction of support for ES modules in Node.js, it was a common pattern for package authors to include both CommonJS and ES module JavaScript sources in their package, with package.json \"main\" specifying the CommonJS entry point and package.json \"module\" specifying the ES module entry point. This enabled Node.js to run the CommonJS entry point while build tools such as bundlers used the ES module entry point, since Node.js ignored (and still ignores) the top-level \"module\" field.\n\nNode.js can now run ES module entry points, and a package can contain both CommonJS and ES module entry points (either via separate specifiers such as 'pkg' and 'pkg/es-module', or both at the same specifier via Conditional exports). Unlike in the scenario where \"module\" is only used by bundlers, or ES module files are transpiled into CommonJS on the fly before evaluation by Node.js, the files referenced by the ES module entry point are evaluated as ES modules.\n\nDual package hazard#\nWhen an application is using a package that provides both CommonJS and ES module sources, there is a risk of certain bugs if both versions of the package get loaded. This potential comes from the fact that the pkgInstance created by const pkgInstance = require('pkg') is not the same as the pkgInstance created by import pkgInstance from 'pkg' (or an alternative main path like 'pkg/module'). This is the \u201cdual package hazard,\u201d where two versions of the same package can be loaded within the same runtime environment. While it is unlikely that an application or package would intentionally load both versions directly, it is common for an application to load one version while a dependency of the application loads the other version. This hazard can happen because Node.js supports intermixing CommonJS and ES modules, and can lead to unexpected behavior.\n\nIf the package main export is a constructor, an instanceof comparison of instances created by the two versions returns false, and if the export is an object, properties added to one (like pkgInstance.foo = 3) are not present on the other. This differs from how import and require statements work in all-CommonJS or all-ES module environments, respectively, and therefore is surprising to users. It also differs from the behavior users are familiar with when using transpilation via tools like Babel or esm.\n\nWriting dual packages while avoiding or minimizing hazards#\nFirst, the hazard described in the previous section occurs when a package contains both CommonJS and ES module sources and both sources are provided for use in Node.js, either via separate main entry points or exported paths. A package might instead be written where any version of Node.js receives only CommonJS sources, and any separate ES module sources the package might contain are intended only for other environments such as browsers. Such a package would be usable by any version of Node.js, since import can refer to CommonJS files; but it would not provide any of the advantages of using ES module syntax.\n\nA package might also switch from CommonJS to ES module syntax in a breaking change version bump. This has the disadvantage that the newest version of the package would only be usable in ES module-supporting versions of Node.js.\n\nEvery pattern has tradeoffs, but there are two broad approaches that satisfy the following conditions:\n\nThe package is usable via both require and import.\nThe package is usable in both current Node.js and older versions of Node.js that lack support for ES modules.\nThe package main entry point, e.g. 'pkg' can be used by both require to resolve to a CommonJS file and by import to resolve to an ES module file. (And likewise for exported paths, e.g. 'pkg/feature'.)\nThe package provides named exports, e.g. import { name } from 'pkg' rather than import pkg from 'pkg'; pkg.name.\nThe package is potentially usable in other ES module environments such as browsers.\nThe hazards described in the previous section are avoided or minimized.\nApproach #1: Use an ES module wrapper#\nWrite the package in CommonJS or transpile ES module sources into CommonJS, and create an ES module wrapper file that defines the named exports. Using Conditional exports, the ES module wrapper is used", "doc_id": "254020c3-127a-422a-88e5-9de6fdec1d74", "embedding": null, "doc_hash": "0e61adc3012df4e060ad0206dca125571b57ef1aa0a82978124bd0c780cfc119", "extra_info": null, "node_info": {"start": 1815502, "end": 1819789}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5cfe727c-fce1-4059-84c8-3fca3d4cf145", "3": "646c1e7c-1050-49ab-8c7f-06c3cfe1083c"}}, "__type__": "1"}, "646c1e7c-1050-49ab-8c7f-06c3cfe1083c": {"__data__": {"text": "Node.js that lack support for ES modules.\nThe package main entry point, e.g. 'pkg' can be used by both require to resolve to a CommonJS file and by import to resolve to an ES module file. (And likewise for exported paths, e.g. 'pkg/feature'.)\nThe package provides named exports, e.g. import { name } from 'pkg' rather than import pkg from 'pkg'; pkg.name.\nThe package is potentially usable in other ES module environments such as browsers.\nThe hazards described in the previous section are avoided or minimized.\nApproach #1: Use an ES module wrapper#\nWrite the package in CommonJS or transpile ES module sources into CommonJS, and create an ES module wrapper file that defines the named exports. Using Conditional exports, the ES module wrapper is used for import and the CommonJS entry point for require.\n\n// ./node_modules/pkg/package.json\n{\n  \"type\": \"module\",\n  \"exports\": {\n    \"import\": \"./wrapper.mjs\",\n    \"require\": \"./index.cjs\"\n  }\n}\nThe preceding example uses explicit extensions .mjs and .cjs. If your files use the .js extension, \"type\": \"module\" will cause such files to be treated as ES modules, just as \"type\": \"commonjs\" would cause them to be treated as CommonJS. See Enabling.\n\n// ./node_modules/pkg/index.cjs\nexports.name = 'value';\n// ./node_modules/pkg/wrapper.mjs\nimport cjsModule from './index.cjs';\nexport const name = cjsModule.name;\nIn this example, the name from import { name } from 'pkg' is the same singleton as the name from const { name } = require('pkg'). Therefore === returns true when comparing the two names and the divergent specifier hazard is avoided.\n\nIf the module is not simply a list of named exports, but rather contains a unique function or object export like module.exports = function () { ... }, or if support in the wrapper for the import pkg from 'pkg' pattern is desired, then the wrapper would instead be written to export the default optionally along with any named exports as well:\n\nimport cjsModule from './index.cjs';\nexport const name = cjsModule.name;\nexport default cjsModule;\nThis approach is appropriate for any of the following use cases:\n\nThe package is currently written in CommonJS and the author would prefer not to refactor it into ES module syntax, but wishes to provide named exports for ES module consumers.\nThe package has other packages that depend on it, and the end user might install both this package and those other packages. For example a utilities package is used directly in an application, and a utilities-plus package adds a few more functions to utilities. Because the wrapper exports underlying CommonJS files, it doesn't matter if utilities-plus is written in CommonJS or ES module syntax; it will work either way.\nThe package stores internal state, and the package author would prefer not to refactor the package to isolate its state management. See the next section.\nA variant of this approach not requiring conditional exports for consumers could be to add an export, e.g. \"./module\", to point to an all-ES module-syntax version of the package. This could be used via import 'pkg/module' by users who are certain that the CommonJS version will not be loaded anywhere in the application, such as by dependencies; or if the CommonJS version can be loaded but doesn't affect the ES module version (for example, because the package is stateless):\n\n// ./node_modules/pkg/package.json\n{\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": \"./index.cjs\",\n    \"./module\": \"./wrapper.mjs\"\n  }\n}\nApproach #2: Isolate state#\nA package.json file can define the separate CommonJS and ES module entry points directly:\n\n// ./node_modules/pkg/package.json\n{\n  \"type\": \"module\",\n  \"exports\": {\n    \"import\": \"./index.mjs\",\n    \"require\": \"./index.cjs\"\n ", "doc_id": "646c1e7c-1050-49ab-8c7f-06c3cfe1083c", "embedding": null, "doc_hash": "548ff88219205f2ada2b9cc9e19a49e99bcd69128c55a738a3b0c69cfa58c943", "extra_info": null, "node_info": {"start": 1819792, "end": 1823510}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "254020c3-127a-422a-88e5-9de6fdec1d74", "3": "3d0af644-0053-4bf8-99a5-b49c26ad7c6a"}}, "__type__": "1"}, "3d0af644-0053-4bf8-99a5-b49c26ad7c6a": {"__data__": {"text": "will not be loaded anywhere in the application, such as by dependencies; or if the CommonJS version can be loaded but doesn't affect the ES module version (for example, because the package is stateless):\n\n// ./node_modules/pkg/package.json\n{\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": \"./index.cjs\",\n    \"./module\": \"./wrapper.mjs\"\n  }\n}\nApproach #2: Isolate state#\nA package.json file can define the separate CommonJS and ES module entry points directly:\n\n// ./node_modules/pkg/package.json\n{\n  \"type\": \"module\",\n  \"exports\": {\n    \"import\": \"./index.mjs\",\n    \"require\": \"./index.cjs\"\n  }\n}\nThis can be done if both the CommonJS and ES module versions of the package are equivalent, for example because one is the transpiled output of the other; and the package's management of state is carefully isolated (or the package is stateless).\n\nThe reason that state is an issue is because both the CommonJS and ES module versions of the package might get used within an application; for example, the user's application code could import the ES module version while a dependency requires the CommonJS version. If that were to occur, two copies of the package would be loaded in memory and therefore two separate states would be present. This would likely cause hard-to-troubleshoot bugs.\n\nAside from writing a stateless package (if JavaScript's Math were a package, for example, it would be stateless as all of its methods are static), there are some ways to isolate state so that it's shared between the potentially loaded CommonJS and ES module instances of the package:\n\nIf possible, contain all state within an instantiated object. JavaScript's Date, for example, needs to be instantiated to contain state; if it were a package, it would be used like this:\n\nimport Date from 'date';\nconst someDate = new Date();\n// someDate contains state; Date does not\nThe new keyword isn't required; a package's function can return a new object, or modify a passed-in object, to keep the state external to the package.\n\nIsolate the state in one or more CommonJS files that are shared between the CommonJS and ES module versions of the package. For example, if the CommonJS and ES module entry points are index.cjs and index.mjs, respectively:\n\n// ./node_modules/pkg/index.cjs\nconst state = require('./state.cjs');\nmodule.exports.state = state;\n// ./node_modules/pkg/index.mjs\nimport state from './state.cjs';\nexport {\n  state,\n};\nEven if pkg is used via both require and import in an application (for example, via import in application code and via require by a dependency) each reference of pkg will contain the same state; and modifying that state from either module system will apply to both.\n\nAny plugins that attach to the package's singleton would need to separately attach to both the CommonJS and ES module singletons.\n\nThis approach is appropriate for any of the following use cases:\n\nThe package is currently written in ES module syntax and the package author wants that version to be used wherever such syntax is supported.\nThe package is stateless or its state can be isolated without too much difficulty.\nThe package is unlikely to have other public packages that depend on it, or if it does, the package is stateless or has state that need not be shared between dependencies or with the overall application.\nEven with isolated state, there is still the cost of possible extra code execution between the CommonJS and ES module versions of a package.\n\nAs with the previous approach, a variant of this approach not requiring conditional exports for consumers could be to add an export, e.g. \"./module\", to point to an all-ES module-syntax version of the package:\n\n// ./node_modules/pkg/package.json\n{\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": \"./index.cjs\",\n    \"./module\": \"./index.mjs\"\n  }\n}\nNode.js package.json field definitions#\nThis section describes", "doc_id": "3d0af644-0053-4bf8-99a5-b49c26ad7c6a", "embedding": null, "doc_hash": "f6fcaea5481ac195450ebb04e722bad1ae30468bbcaad89024c15a4aeaf63efe", "extra_info": null, "node_info": {"start": 1823641, "end": 1827496}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "646c1e7c-1050-49ab-8c7f-06c3cfe1083c", "3": "cf6840ac-57d9-4ccd-87a9-68c98b5fd776"}}, "__type__": "1"}, "cf6840ac-57d9-4ccd-87a9-68c98b5fd776": {"__data__": {"text": "on it, or if it does, the package is stateless or has state that need not be shared between dependencies or with the overall application.\nEven with isolated state, there is still the cost of possible extra code execution between the CommonJS and ES module versions of a package.\n\nAs with the previous approach, a variant of this approach not requiring conditional exports for consumers could be to add an export, e.g. \"./module\", to point to an all-ES module-syntax version of the package:\n\n// ./node_modules/pkg/package.json\n{\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": \"./index.cjs\",\n    \"./module\": \"./index.mjs\"\n  }\n}\nNode.js package.json field definitions#\nThis section describes the fields used by the Node.js runtime. Other tools (such as npm) use additional fields which are ignored by Node.js and not documented here.\n\nThe following fields in package.json files are used in Node.js:\n\n\"name\" - Relevant when using named imports within a package. Also used by package managers as the name of the package.\n\"main\" - The default module when loading the package, if exports is not specified, and in versions of Node.js prior to the introduction of exports.\n\"packageManager\" - The package manager recommended when contributing to the package. Leveraged by the Corepack shims.\n\"type\" - The package type determining whether to load .js files as CommonJS or ES modules.\n\"exports\" - Package exports and conditional exports. When present, limits which submodules can be loaded from within the package.\n\"imports\" - Package imports, for use by modules within the package itself.\n\"name\"#\nHistory\nType: <string>\n{\n  \"name\": \"package-name\"\n}\nThe \"name\" field defines your package's name. Publishing to the npm registry requires a name that satisfies certain requirements.\n\nThe \"name\" field can be used in addition to the \"exports\" field to self-reference a package using its name.\n\n\"main\"#\nAdded in: v0.4.0\nType: <string>\n{\n  \"main\": \"./index.js\"\n}\nThe \"main\" field defines the entry point of a package when imported by name via a node_modules lookup. Its value is a path.\n\nWhen a package has an \"exports\" field, this will take precedence over the \"main\" field when importing the package by name.\n\nIt also defines the script that is used when the package directory is loaded via require().\n\n// This resolves to ./path/to/directory/index.js.\nrequire('./path/to/directory');\n\"packageManager\"#\nAdded in: v16.9.0, v14.19.0\nStability: 1 - Experimental\nType: <string>\n{\n  \"packageManager\": \"<package manager name>@<version>\"\n}\nThe \"packageManager\" field defines which package manager is expected to be used when working on the current project. It can be set to any of the supported package managers, and will ensure that your teams use the exact same package manager versions without having to install anything else other than Node.js.\n\nThis field is currently experimental and needs to be opted-in; check the Corepack page for details about the procedure.\n\n\"type\"#\nHistory\nType: <string>\nThe \"type\" field defines the module format that Node.js uses for all .js files that have that package.json file as their nearest parent.\n\nFiles ending with .js are loaded as ES modules when the nearest parent package.json file contains a top-level field \"type\" with a value of \"module\".\n\nThe nearest parent package.json is defined as the first package.json found when searching in the current folder, that folder's parent, and so on up until a node_modules folder or the volume root is reached.\n\n// package.json\n{\n  \"type\": \"module\"\n}\n# In same folder as preceding package.json\nnode my-app.js # Runs as ES module\nIf the nearest parent package.json lacks a \"type\" field, or contains \"type\": \"commonjs\", .js files are", "doc_id": "cf6840ac-57d9-4ccd-87a9-68c98b5fd776", "embedding": null, "doc_hash": "af1aeb4ea598c23e85e9086a7564c34ef835733d7e1fa1ac62fe15344fb42145", "extra_info": null, "node_info": {"start": 1827419, "end": 1831110}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3d0af644-0053-4bf8-99a5-b49c26ad7c6a", "3": "89449869-b965-4d78-9c32-b5a9d52fcb55"}}, "__type__": "1"}, "89449869-b965-4d78-9c32-b5a9d52fcb55": {"__data__": {"text": "<string>\nThe \"type\" field defines the module format that Node.js uses for all .js files that have that package.json file as their nearest parent.\n\nFiles ending with .js are loaded as ES modules when the nearest parent package.json file contains a top-level field \"type\" with a value of \"module\".\n\nThe nearest parent package.json is defined as the first package.json found when searching in the current folder, that folder's parent, and so on up until a node_modules folder or the volume root is reached.\n\n// package.json\n{\n  \"type\": \"module\"\n}\n# In same folder as preceding package.json\nnode my-app.js # Runs as ES module\nIf the nearest parent package.json lacks a \"type\" field, or contains \"type\": \"commonjs\", .js files are treated as CommonJS. If the volume root is reached and no package.json is found, .js files are treated as CommonJS.\n\nimport statements of .js files are treated as ES modules if the nearest parent package.json contains \"type\": \"module\".\n\n// my-app.js, part of the same example as above\nimport './startup.js'; // Loaded as ES module because of package.json\nRegardless of the value of the \"type\" field, .mjs files are always treated as ES modules and .cjs files are always treated as CommonJS.\n\n\"exports\"#\nHistory\nType: <Object> | <string> | <string[]>\n{\n  \"exports\": \"./index.js\"\n}\nThe \"exports\" field allows defining the entry points of a package when imported by name loaded either via a node_modules lookup or a self-reference to its own name. It is supported in Node.js 12+ as an alternative to the \"main\" that can support defining subpath exports and conditional exports while encapsulating internal unexported modules.\n\nConditional Exports can also be used within \"exports\" to define different package entry points per environment, including whether the package is referenced via require or via import.\n\nAll paths defined in the \"exports\" must be relative file URLs starting with ./.\n\n\"imports\"#\nAdded in: v14.6.0, v12.19.0\nType: <Object>\n// package.json\n{\n  \"imports\": {\n    \"#dep\": {\n      \"node\": \"dep-node-native\",\n      \"default\": \"./dep-polyfill.js\"\n    }\n  },\n  \"dependencies\": {\n    \"dep-node-native\": \"^1.0.0\"\n  }\n}\nEntries in the imports field must be strings starting with #.\n\nPackage imports permit mapping to external packages.\n\nThis field defines subpath imports for the current package.\n\nNet#\nStability: 2 - Stable\nSource Code: lib/net.js\n\nThe node:net module provides an asynchronous network API for creating stream-based TCP or IPC servers (net.createServer()) and clients (net.createConnection()).\n\nIt can be accessed using:\n\nconst net = require('node:net');\nIPC support#\nThe node:net module supports IPC with named pipes on Windows, and Unix domain sockets on other operating systems.\n\nIdentifying paths for IPC connections#\nnet.connect(), net.createConnection(), server.listen(), and socket.connect() take a path parameter to identify IPC endpoints.\n\nOn Unix, the local domain is also known as the Unix domain. The path is a file system pathname. It gets truncated to an OS-dependent length of sizeof(sockaddr_un.sun_path) - 1. Typical values are 107 bytes on Linux and 103 bytes on macOS. If a Node.js API abstraction creates the Unix domain socket, it will unlink the Unix domain socket as well. For example, net.createServer() may create a Unix domain socket and server.close() will unlink it. But if a user creates the Unix domain socket outside of these abstractions, the user will need to remove it. The same applies when a Node.js API creates a Unix domain socket but the program then crashes. In short, a Unix domain socket will be visible in the file system and will", "doc_id": "89449869-b965-4d78-9c32-b5a9d52fcb55", "embedding": null, "doc_hash": "3113442c0696f533f4fb58f82b955c50be3af638b3b48fe52c7062902db918a1", "extra_info": null, "node_info": {"start": 1831078, "end": 1834702}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cf6840ac-57d9-4ccd-87a9-68c98b5fd776", "3": "442c2b04-fff3-42c4-9308-7a690e2505c5"}}, "__type__": "1"}, "442c2b04-fff3-42c4-9308-7a690e2505c5": {"__data__": {"text": "socket.connect() take a path parameter to identify IPC endpoints.\n\nOn Unix, the local domain is also known as the Unix domain. The path is a file system pathname. It gets truncated to an OS-dependent length of sizeof(sockaddr_un.sun_path) - 1. Typical values are 107 bytes on Linux and 103 bytes on macOS. If a Node.js API abstraction creates the Unix domain socket, it will unlink the Unix domain socket as well. For example, net.createServer() may create a Unix domain socket and server.close() will unlink it. But if a user creates the Unix domain socket outside of these abstractions, the user will need to remove it. The same applies when a Node.js API creates a Unix domain socket but the program then crashes. In short, a Unix domain socket will be visible in the file system and will persist until unlinked.\n\nOn Windows, the local domain is implemented using a named pipe. The path must refer to an entry in \\\\?\\pipe\\ or \\\\.\\pipe\\. Any characters are permitted, but the latter may do some processing of pipe names, such as resolving .. sequences. Despite how it might look, the pipe namespace is flat. Pipes will not persist. They are removed when the last reference to them is closed. Unlike Unix domain sockets, Windows will close and remove the pipe when the owning process exits.\n\nJavaScript string escaping requires paths to be specified with extra backslash escaping such as:\n\nnet.createServer().listen(\n  path.join('\\\\\\\\?\\\\pipe', process.cwd(), 'myctl'));\nClass: net.BlockList#\nAdded in: v15.0.0, v14.18.0\nThe BlockList object can be used with some network APIs to specify rules for disabling inbound or outbound access to specific IP addresses, IP ranges, or IP subnets.\n\nblockList.addAddress(address[, type])#\nAdded in: v15.0.0, v14.18.0\naddress <string> | <net.SocketAddress> An IPv4 or IPv6 address.\ntype <string> Either 'ipv4' or 'ipv6'. Default: 'ipv4'.\nAdds a rule to block the given IP address.\n\nblockList.addRange(start, end[, type])#\nAdded in: v15.0.0, v14.18.0\nstart <string> | <net.SocketAddress> The starting IPv4 or IPv6 address in the range.\nend <string> | <net.SocketAddress> The ending IPv4 or IPv6 address in the range.\ntype <string> Either 'ipv4' or 'ipv6'. Default: 'ipv4'.\nAdds a rule to block a range of IP addresses from start (inclusive) to end (inclusive).\n\nblockList.addSubnet(net, prefix[, type])#\nAdded in: v15.0.0, v14.18.0\nnet <string> | <net.SocketAddress> The network IPv4 or IPv6 address.\nprefix <number> The number of CIDR prefix bits. For IPv4, this must be a value between 0 and 32. For IPv6, this must be between 0 and 128.\ntype <string> Either 'ipv4' or 'ipv6'. Default: 'ipv4'.\nAdds a rule to block a range of IP addresses specified as a subnet mask.\n\nblockList.check(address[, type])#\nAdded in: v15.0.0, v14.18.0\naddress <string> | <net.SocketAddress> The IP address to check\ntype <string> Either 'ipv4' or 'ipv6'. Default: 'ipv4'.\nReturns: <boolean>\nReturns true if the given IP address matches any of the rules added to the BlockList.\n\nconst blockList = new net.BlockList();\nblockList.addAddress('123.123.123.123');\nblockList.addRange('10.0.0.1', '10.0.0.10');\nblockList.addSubnet('8592:757c:efae:4e45::', 64, 'ipv6');\n\nconsole.log(blockList.check('123.123.123.123'));  // Prints:", "doc_id": "442c2b04-fff3-42c4-9308-7a690e2505c5", "embedding": null, "doc_hash": "26829df074074b783d1f996d6ae49d0662a6ed2b573558110ee51a1bf0f49de3", "extra_info": null, "node_info": {"start": 1834660, "end": 1837897}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "89449869-b965-4d78-9c32-b5a9d52fcb55", "3": "5eda6d1b-7b55-4341-a8fe-95f0b0335208"}}, "__type__": "1"}, "5eda6d1b-7b55-4341-a8fe-95f0b0335208": {"__data__": {"text": "type])#\nAdded in: v15.0.0, v14.18.0\naddress <string> | <net.SocketAddress> The IP address to check\ntype <string> Either 'ipv4' or 'ipv6'. Default: 'ipv4'.\nReturns: <boolean>\nReturns true if the given IP address matches any of the rules added to the BlockList.\n\nconst blockList = new net.BlockList();\nblockList.addAddress('123.123.123.123');\nblockList.addRange('10.0.0.1', '10.0.0.10');\nblockList.addSubnet('8592:757c:efae:4e45::', 64, 'ipv6');\n\nconsole.log(blockList.check('123.123.123.123'));  // Prints: true\nconsole.log(blockList.check('10.0.0.3'));  // Prints: true\nconsole.log(blockList.check('222.111.111.222'));  // Prints: false\n\n// IPv6 notation for IPv4 addresses works:\nconsole.log(blockList.check('::ffff:7b7b:7b7b', 'ipv6')); // Prints: true\nconsole.log(blockList.check('::ffff:123.123.123.123', 'ipv6')); // Prints: true\nblockList.rules#\nAdded in: v15.0.0, v14.18.0\nType: <string[]>\nThe list of rules added to the blocklist.\n\nClass: net.SocketAddress#\nAdded in: v15.14.0, v14.18.0\nnew net.SocketAddress([options])#\nAdded in: v15.14.0, v14.18.0\noptions <Object>\naddress <string> The network address as either an IPv4 or IPv6 string. Default: '127.0.0.1' if family is 'ipv4'; '::' if family is 'ipv6'.\nfamily <string> One of either 'ipv4' or 'ipv6'. Default: 'ipv4'.\nflowlabel <number> An IPv6 flow-label used only if family is 'ipv6'.\nport <number> An IP port.\nsocketaddress.address#\nAdded in: v15.14.0, v14.18.0\nType <string>\nsocketaddress.family#\nAdded in: v15.14.0, v14.18.0\nType <string> Either 'ipv4' or 'ipv6'.\nsocketaddress.flowlabel#\nAdded in: v15.14.0, v14.18.0\nType <number>\nsocketaddress.port#\nAdded in: v15.14.0, v14.18.0\nType <number>\nClass: net.Server#\nAdded in: v0.1.90\nExtends: <EventEmitter>\nThis class is used to create a TCP or IPC server.\n\nnew net.Server([options][, connectionListener])#\noptions <Object> See net.createServer([options][, connectionListener]).\nconnectionListener <Function> Automatically set as a listener for the 'connection' event.\nReturns: <net.Server>\nnet.Server is an EventEmitter with the following events:\n\nEvent: 'close'#\nAdded in: v0.5.0\nEmitted when the server closes. If connections exist, this event is not emitted until all connections are ended.\n\nEvent: 'connection'#\nAdded in: v0.1.90\n<net.Socket> The connection object\nEmitted when a new connection is made. socket is an instance of net.Socket.\n\nEvent: 'error'#\nAdded in: v0.1.90\n<Error>\nEmitted when an error occurs. Unlike net.Socket, the 'close' event will not be emitted directly following this event unless server.close() is manually called. See the example in discussion of server.listen().\n\nEvent: 'listening'#\nAdded in: v0.1.90\nEmitted when the server has been bound after calling server.listen().\n\nEvent: 'drop'#\nAdded in: v18.6.0\nWhen the number of connections reaches the threshold of server.maxConnections, the server will drop new connections and emit 'drop'", "doc_id": "5eda6d1b-7b55-4341-a8fe-95f0b0335208", "embedding": null, "doc_hash": "073c889b0547649ee2ec1b35415a2e0949222e8a93eb987bbff4356fc6f160e1", "extra_info": null, "node_info": {"start": 1838094, "end": 1840981}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "442c2b04-fff3-42c4-9308-7a690e2505c5", "3": "8f37e84a-f440-4af1-93a9-0b9db3f1e691"}}, "__type__": "1"}, "8f37e84a-f440-4af1-93a9-0b9db3f1e691": {"__data__": {"text": "in: v0.1.90\n<net.Socket> The connection object\nEmitted when a new connection is made. socket is an instance of net.Socket.\n\nEvent: 'error'#\nAdded in: v0.1.90\n<Error>\nEmitted when an error occurs. Unlike net.Socket, the 'close' event will not be emitted directly following this event unless server.close() is manually called. See the example in discussion of server.listen().\n\nEvent: 'listening'#\nAdded in: v0.1.90\nEmitted when the server has been bound after calling server.listen().\n\nEvent: 'drop'#\nAdded in: v18.6.0\nWhen the number of connections reaches the threshold of server.maxConnections, the server will drop new connections and emit 'drop' event instead. If it is a TCP server, the argument is as follows, otherwise the argument is undefined.\n\ndata <Object> The argument passed to event listener.\nlocalAddress <string> Local address.\nlocalPort <number> Local port.\nlocalFamily <string> Local family.\nremoteAddress <string> Remote address.\nremotePort <number> Remote port.\nremoteFamily <string> Remote IP family. 'IPv4' or 'IPv6'.\nserver.address()#\nHistory\nReturns: <Object> | <string> | <null>\nReturns the bound address, the address family name, and port of the server as reported by the operating system if listening on an IP socket (useful to find which port was assigned when getting an OS-assigned address): { port: 12346, family: 'IPv4', address: '127.0.0.1' }.\n\nFor a server listening on a pipe or Unix domain socket, the name is returned as a string.\n\nconst server = net.createServer((socket) => {\n  socket.end('goodbye\\n');\n}).on('error', (err) => {\n  // Handle errors here.\n  throw err;\n});\n\n// Grab an arbitrary unused port.\nserver.listen(() => {\n  console.log('opened server on', server.address());\n});\nserver.address() returns null before the 'listening' event has been emitted or after calling server.close().\n\nserver.close([callback])#\nAdded in: v0.1.90\ncallback <Function> Called when the server is closed.\nReturns: <net.Server>\nStops the server from accepting new connections and keeps existing connections. This function is asynchronous, the server is finally closed when all connections are ended and the server emits a 'close' event. The optional callback will be called once the 'close' event occurs. Unlike that event, it will be called with an Error as its only argument if the server was not open when it was closed.\n\nserver.getConnections(callback)#\nAdded in: v0.9.7\ncallback <Function>\nReturns: <net.Server>\nAsynchronously get the number of concurrent connections on the server. Works when sockets were sent to forks.\n\nCallback should take two arguments err and count.\n\nserver.listen()#\nStart a server listening for connections. A net.Server can be a TCP or an IPC server depending on what it listens to.\n\nPossible signatures:\n\nserver.listen(handle[, backlog][, callback])\nserver.listen(options[, callback])\nserver.listen(path[, backlog][, callback]) for IPC servers\nserver.listen([port[, host[, backlog]]][, callback]) for TCP servers\nThis function is asynchronous. When the server starts listening, the 'listening' event will be emitted. The last parameter callback will be added as a listener for the 'listening' event.\n\nAll listen() methods can take a backlog parameter to specify the maximum length of the queue of pending connections. The actual length will be determined by the OS through sysctl settings such as tcp_max_syn_backlog and somaxconn on Linux. The default value of this parameter is 511 (not 512).\n\nAll net.Socket are set to SO_REUSEADDR (see socket(7) for details).\n\nThe server.listen() method can be called again if and only if there was an error during the first", "doc_id": "8f37e84a-f440-4af1-93a9-0b9db3f1e691", "embedding": null, "doc_hash": "6f8159edda3923a752dfee7fb371a6e3b75e46c52a022a86cb20b9e12596140d", "extra_info": null, "node_info": {"start": 1840875, "end": 1844495}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5eda6d1b-7b55-4341-a8fe-95f0b0335208", "3": "eda68e73-81a5-439e-868f-7a69310c4db5"}}, "__type__": "1"}, "eda68e73-81a5-439e-868f-7a69310c4db5": {"__data__": {"text": "for IPC servers\nserver.listen([port[, host[, backlog]]][, callback]) for TCP servers\nThis function is asynchronous. When the server starts listening, the 'listening' event will be emitted. The last parameter callback will be added as a listener for the 'listening' event.\n\nAll listen() methods can take a backlog parameter to specify the maximum length of the queue of pending connections. The actual length will be determined by the OS through sysctl settings such as tcp_max_syn_backlog and somaxconn on Linux. The default value of this parameter is 511 (not 512).\n\nAll net.Socket are set to SO_REUSEADDR (see socket(7) for details).\n\nThe server.listen() method can be called again if and only if there was an error during the first server.listen() call or server.close() has been called. Otherwise, an ERR_SERVER_ALREADY_LISTEN error will be thrown.\n\nOne of the most common errors raised when listening is EADDRINUSE. This happens when another server is already listening on the requested port/path/handle. One way to handle this would be to retry after a certain amount of time:\n\nserver.on('error', (e) => {\n  if (e.code === 'EADDRINUSE') {\n    console.error('Address in use, retrying...');\n    setTimeout(() => {\n      server.close();\n      server.listen(PORT, HOST);\n    }, 1000);\n  }\n});\nserver.listen(handle[, backlog][, callback])#\nAdded in: v0.5.10\nhandle <Object>\nbacklog <number> Common parameter of server.listen() functions\ncallback <Function>\nReturns: <net.Server>\nStart a server listening for connections on a given handle that has already been bound to a port, a Unix domain socket, or a Windows named pipe.\n\nThe handle object can be either a server, a socket (anything with an underlying _handle member), or an object with an fd member that is a valid file descriptor.\n\nListening on a file descriptor is not supported on Windows.\n\nserver.listen(options[, callback])#\nHistory\noptions <Object> Required. Supports the following properties:\nport <number>\nhost <string>\npath <string> Will be ignored if port is specified. See Identifying paths for IPC connections.\nbacklog <number> Common parameter of server.listen() functions.\nexclusive <boolean> Default: false\nreadableAll <boolean> For IPC servers makes the pipe readable for all users. Default: false.\nwritableAll <boolean> For IPC servers makes the pipe writable for all users. Default: false.\nipv6Only <boolean> For TCP servers, setting ipv6Only to true will disable dual-stack support, i.e., binding to host :: won't make 0.0.0.0 be bound. Default: false.\nsignal <AbortSignal> An AbortSignal that may be used to close a listening server.\ncallback <Function> functions.\nReturns: <net.Server>\nIf port is specified, it behaves the same as server.listen([port[, host[, backlog]]][, callback]). Otherwise, if path is specified, it behaves the same as server.listen(path[, backlog][, callback]). If none of them is specified, an error will be thrown.\n\nIf exclusive is false (default), then cluster workers will use the same underlying handle, allowing connection handling duties to be shared. When exclusive is true, the handle is not shared, and attempted port sharing results in an error. An example which listens on an exclusive port is shown below.\n\nserver.listen({\n  host: 'localhost',\n  port: 80,\n  exclusive: true,\n});\nWhen exclusive is true and the underlying handle is shared, it is possible that several workers query a handle with different backlogs. In this case, the first backlog passed to the master process will be used.\n\nStarting an IPC server as root may cause the server path to be inaccessible for unprivileged users. Using readableAll and writableAll will make the server accessible for", "doc_id": "eda68e73-81a5-439e-868f-7a69310c4db5", "embedding": null, "doc_hash": "57ba32d5f0cdf8db002b52d3847ec4e5a1dd1f8e41208db2c071d2f2c70f4d72", "extra_info": null, "node_info": {"start": 1844439, "end": 1848111}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8f37e84a-f440-4af1-93a9-0b9db3f1e691", "3": "19f12354-eba4-4792-80d2-4f6a66322190"}}, "__type__": "1"}, "19f12354-eba4-4792-80d2-4f6a66322190": {"__data__": {"text": "backlog][, callback]). If none of them is specified, an error will be thrown.\n\nIf exclusive is false (default), then cluster workers will use the same underlying handle, allowing connection handling duties to be shared. When exclusive is true, the handle is not shared, and attempted port sharing results in an error. An example which listens on an exclusive port is shown below.\n\nserver.listen({\n  host: 'localhost',\n  port: 80,\n  exclusive: true,\n});\nWhen exclusive is true and the underlying handle is shared, it is possible that several workers query a handle with different backlogs. In this case, the first backlog passed to the master process will be used.\n\nStarting an IPC server as root may cause the server path to be inaccessible for unprivileged users. Using readableAll and writableAll will make the server accessible for all users.\n\nIf the signal option is enabled, calling .abort() on the corresponding AbortController is similar to calling .close() on the server:\n\nconst controller = new AbortController();\nserver.listen({\n  host: 'localhost',\n  port: 80,\n  signal: controller.signal,\n});\n// Later, when you want to close the server.\ncontroller.abort();\nserver.listen(path[, backlog][, callback])#\nAdded in: v0.1.90\npath <string> Path the server should listen to. See Identifying paths for IPC connections.\nbacklog <number> Common parameter of server.listen() functions.\ncallback <Function>.\nReturns: <net.Server>\nStart an IPC server listening for connections on the given path.\n\nserver.listen([port[, host[, backlog]]][, callback])#\nAdded in: v0.1.90\nport <number>\nhost <string>\nbacklog <number> Common parameter of server.listen() functions.\ncallback <Function>.\nReturns: <net.Server>\nStart a TCP server listening for connections on the given port and host.\n\nIf port is omitted or is 0, the operating system will assign an arbitrary unused port, which can be retrieved by using server.address().port after the 'listening' event has been emitted.\n\nIf host is omitted, the server will accept connections on the unspecified IPv6 address (::) when IPv6 is available, or the unspecified IPv4 address (0.0.0.0) otherwise.\n\nIn most operating systems, listening to the unspecified IPv6 address (::) may cause the net.Server to also listen on the unspecified IPv4 address (0.0.0.0).\n\nserver.listening#\nAdded in: v5.7.0\n<boolean> Indicates whether or not the server is listening for connections.\nserver.maxConnections#\nAdded in: v0.2.0\n<integer>\nSet this property to reject connections when the server's connection count gets high.\n\nIt is not recommended to use this option once a socket has been sent to a child with child_process.fork().\n\nserver.ref()#\nAdded in: v0.9.1\nReturns: <net.Server>\nOpposite of unref(), calling ref() on a previously unrefed server will not let the program exit if it's the only server left (the default behavior). If the server is refed calling ref() again will have no effect.\n\nserver.unref()#\nAdded in: v0.9.1\nReturns: <net.Server>\nCalling unref() on a server will allow the program to exit if this is the only active server in the event system. If the server is already unrefed calling unref() again will have no effect.\n\nClass: net.Socket#\nAdded in: v0.3.4\nExtends: <stream.Duplex>\nThis class is an abstraction of a TCP socket or a streaming IPC endpoint (uses named pipes on Windows, and Unix domain sockets otherwise). It is also an EventEmitter.\n\nA net.Socket can be created by the user and used directly to interact with a server. For example, it is returned by net.createConnection(), so the user can use it to talk to the server.\n\nIt can also be created by Node.js and passed to the user when a", "doc_id": "19f12354-eba4-4792-80d2-4f6a66322190", "embedding": null, "doc_hash": "6c99a914820d31c432bafe2e5032ad4d3e42c65c87ca6305ef57a67d9ebf84c3", "extra_info": null, "node_info": {"start": 1848033, "end": 1851674}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "eda68e73-81a5-439e-868f-7a69310c4db5", "3": "7fbbbec5-542a-4453-8609-2065dc31d125"}}, "__type__": "1"}, "7fbbbec5-542a-4453-8609-2065dc31d125": {"__data__": {"text": "v0.9.1\nReturns: <net.Server>\nCalling unref() on a server will allow the program to exit if this is the only active server in the event system. If the server is already unrefed calling unref() again will have no effect.\n\nClass: net.Socket#\nAdded in: v0.3.4\nExtends: <stream.Duplex>\nThis class is an abstraction of a TCP socket or a streaming IPC endpoint (uses named pipes on Windows, and Unix domain sockets otherwise). It is also an EventEmitter.\n\nA net.Socket can be created by the user and used directly to interact with a server. For example, it is returned by net.createConnection(), so the user can use it to talk to the server.\n\nIt can also be created by Node.js and passed to the user when a connection is received. For example, it is passed to the listeners of a 'connection' event emitted on a net.Server, so the user can use it to interact with the client.\n\nnew net.Socket([options])#\nHistory\noptions <Object> Available options are:\nfd <number> If specified, wrap around an existing socket with the given file descriptor, otherwise a new socket will be created.\nallowHalfOpen <boolean> If set to false, then the socket will automatically end the writable side when the readable side ends. See net.createServer() and the 'end' event for details. Default: false.\nreadable <boolean> Allow reads on the socket when an fd is passed, otherwise ignored. Default: false.\nwritable <boolean> Allow writes on the socket when an fd is passed, otherwise ignored. Default: false.\nsignal <AbortSignal> An Abort signal that may be used to destroy the socket.\nReturns: <net.Socket>\nCreates a new socket object.\n\nThe newly created socket can be either a TCP socket or a streaming IPC endpoint, depending on what it connect() to.\n\nEvent: 'close'#\nAdded in: v0.1.90\nhadError <boolean> true if the socket had a transmission error.\nEmitted once the socket is fully closed. The argument hadError is a boolean which says if the socket was closed due to a transmission error.\n\nEvent: 'connect'#\nAdded in: v0.1.90\nEmitted when a socket connection is successfully established. See net.createConnection().\n\nEvent: 'data'#\nAdded in: v0.1.90\n<Buffer> | <string>\nEmitted when data is received. The argument data will be a Buffer or String. Encoding of data is set by socket.setEncoding().\n\nThe data will be lost if there is no listener when a Socket emits a 'data' event.\n\nEvent: 'drain'#\nAdded in: v0.1.90\nEmitted when the write buffer becomes empty. Can be used to throttle uploads.\n\nSee also: the return values of socket.write().\n\nEvent: 'end'#\nAdded in: v0.1.90\nEmitted when the other end of the socket signals the end of transmission, thus ending the readable side of the socket.\n\nBy default (allowHalfOpen is false) the socket will send an end of transmission packet back and destroy its file descriptor once it has written out its pending write queue. However, if allowHalfOpen is set to true, the socket will not automatically end() its writable side, allowing the user to write arbitrary amounts of data. The user must call end() explicitly to close the connection (i.e. sending a FIN packet back).\n\nEvent: 'error'#\nAdded in: v0.1.90\n<Error>\nEmitted when an error occurs. The 'close' event will be called directly following this event.\n\nEvent: 'lookup'#\nHistory\nEmitted after resolving the host name but before connecting. Not applicable to Unix sockets.\n\nerr <Error> | <null> The error object. See dns.lookup().\naddress <string> The IP address.\nfamily <number> | <null> The address type. See dns.lookup().\nhost <string> The host name.\nEvent: 'ready'#\nAdded in: v9.11.0\nEmitted when a socket is ready to be", "doc_id": "7fbbbec5-542a-4453-8609-2065dc31d125", "embedding": null, "doc_hash": "89e8b6da2faab392a7f1803d79176a442f21916d9b34bcaac060e26e56a74251", "extra_info": null, "node_info": {"start": 1851793, "end": 1855388}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "19f12354-eba4-4792-80d2-4f6a66322190", "3": "e334e41f-bc4b-43f7-bb06-09af73602534"}}, "__type__": "1"}, "e334e41f-bc4b-43f7-bb06-09af73602534": {"__data__": {"text": "arbitrary amounts of data. The user must call end() explicitly to close the connection (i.e. sending a FIN packet back).\n\nEvent: 'error'#\nAdded in: v0.1.90\n<Error>\nEmitted when an error occurs. The 'close' event will be called directly following this event.\n\nEvent: 'lookup'#\nHistory\nEmitted after resolving the host name but before connecting. Not applicable to Unix sockets.\n\nerr <Error> | <null> The error object. See dns.lookup().\naddress <string> The IP address.\nfamily <number> | <null> The address type. See dns.lookup().\nhost <string> The host name.\nEvent: 'ready'#\nAdded in: v9.11.0\nEmitted when a socket is ready to be used.\n\nTriggered immediately after 'connect'.\n\nEvent: 'timeout'#\nAdded in: v0.1.90\nEmitted if the socket times out from inactivity. This is only to notify that the socket has been idle. The user must manually close the connection.\n\nSee also: socket.setTimeout().\n\nsocket.address()#\nHistory\nReturns: <Object>\nReturns the bound address, the address family name and port of the socket as reported by the operating system: { port: 12346, family: 'IPv4', address: '127.0.0.1' }\n\nsocket.bufferSize#\nAdded in: v0.3.8Deprecated since: v14.6.0\nStability: 0 - Deprecated: Use writable.writableLength instead.\n<integer>\nThis property shows the number of characters buffered for writing. The buffer may contain strings whose length after encoding is not yet known. So this number is only an approximation of the number of bytes in the buffer.\n\nnet.Socket has the property that socket.write() always works. This is to help users get up and running quickly. The computer cannot always keep up with the amount of data that is written to a socket. The network connection simply might be too slow. Node.js will internally queue up the data written to a socket and send it out over the wire when it is possible.\n\nThe consequence of this internal buffering is that memory may grow. Users who experience large or growing bufferSize should attempt to \"throttle\" the data flows in their program with socket.pause() and socket.resume().\n\nsocket.bytesRead#\nAdded in: v0.5.3\n<integer>\nThe amount of received bytes.\n\nsocket.bytesWritten#\nAdded in: v0.5.3\n<integer>\nThe amount of bytes sent.\n\nsocket.connect()#\nInitiate a connection on a given socket.\n\nPossible signatures:\n\nsocket.connect(options[, connectListener])\nsocket.connect(path[, connectListener]) for IPC connections.\nsocket.connect(port[, host][, connectListener]) for TCP connections.\nReturns: <net.Socket> The socket itself.\nThis function is asynchronous. When the connection is established, the 'connect' event will be emitted. If there is a problem connecting, instead of a 'connect' event, an 'error' event will be emitted with the error passed to the 'error' listener. The last parameter connectListener, if supplied, will be added as a listener for the 'connect' event once.\n\nThis function should only be used for reconnecting a socket after 'close' has been emitted or otherwise it may lead to undefined behavior.\n\nsocket.connect(options[, connectListener])#\nHistory\noptions <Object>\nconnectListener <Function> Common parameter of socket.connect() methods. Will be added as a listener for the 'connect' event once.\nReturns: <net.Socket> The socket itself.\nInitiate a connection on a given socket. Normally this method is not needed, the socket should be created and opened with net.createConnection(). Use this only when implementing a custom Socket.\n\nFor TCP connections, available options are:\n\nport <number> Required. Port the socket should connect to.\nhost <string> Host the socket should connect to. Default: 'localhost'.\nlocalAddress <string> Local address the socket should connect from.\nlocalPort <number> Local port the socket should connect from.\nfamily <number>: Version of IP stack. Must", "doc_id": "e334e41f-bc4b-43f7-bb06-09af73602534", "embedding": null, "doc_hash": "3446c6683551c0c930d239135cc54216495b8e1ecb27b50db755103849eca4c7", "extra_info": null, "node_info": {"start": 1855431, "end": 1859202}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7fbbbec5-542a-4453-8609-2065dc31d125", "3": "abc1e945-2d68-4373-8aca-9630059f6c37"}}, "__type__": "1"}, "abc1e945-2d68-4373-8aca-9630059f6c37": {"__data__": {"text": "otherwise it may lead to undefined behavior.\n\nsocket.connect(options[, connectListener])#\nHistory\noptions <Object>\nconnectListener <Function> Common parameter of socket.connect() methods. Will be added as a listener for the 'connect' event once.\nReturns: <net.Socket> The socket itself.\nInitiate a connection on a given socket. Normally this method is not needed, the socket should be created and opened with net.createConnection(). Use this only when implementing a custom Socket.\n\nFor TCP connections, available options are:\n\nport <number> Required. Port the socket should connect to.\nhost <string> Host the socket should connect to. Default: 'localhost'.\nlocalAddress <string> Local address the socket should connect from.\nlocalPort <number> Local port the socket should connect from.\nfamily <number>: Version of IP stack. Must be 4, 6, or 0. The value 0 indicates that both IPv4 and IPv6 addresses are allowed. Default: 0.\nhints <number> Optional dns.lookup() hints.\nlookup <Function> Custom lookup function. Default: dns.lookup().\nnoDelay <boolean> If set to true, it disables the use of Nagle's algorithm immediately after the socket is established. Default: false.\nkeepAlive <boolean> If set to true, it enables keep-alive functionality on the socket immediately after the connection is established, similarly on what is done in socket.setKeepAlive([enable][, initialDelay]). Default: false.\nkeepAliveInitialDelay <number> If set to a positive number, it sets the initial delay before the first keepalive probe is sent on an idle socket.Default: 0.\nautoSelectFamily <boolean>: If set to true, it enables a family autodetection algorithm that loosely implements section 5 of RFC 8305. The all option passed to lookup is set to true and the sockets attempts to connect to all obtained IPv6 and IPv4 addresses, in sequence, until a connection is established. The first returned AAAA address is tried first, then the first returned A address and so on. Each connection attempt is given the amount of time specified by the autoSelectFamilyAttemptTimeout option before timing out and trying the next address. Ignored if the family option is not 0 or if localAddress is set. Connection errors are not emitted if at least one connection succeeds. Default: false.\nautoSelectFamilyAttemptTimeout <number>: The amount of time in milliseconds to wait for a connection attempt to finish before trying the next address when using the autoSelectFamily option. If set to a positive integer less than 10, then the value 10 will be used instead. Default: 250.\nFor IPC connections, available options are:\n\npath <string> Required. Path the client should connect to. See Identifying paths for IPC connections. If provided, the TCP-specific options above are ignored.\nFor both types, available options include:\n\nonread <Object> If specified, incoming data is stored in a single buffer and passed to the supplied callback when data arrives on the socket. This will cause the streaming functionality to not provide any data. The socket will emit events like 'error', 'end', and 'close' as usual. Methods like pause() and resume() will also behave as expected.\nbuffer <Buffer> | <Uint8Array> | <Function> Either a reusable chunk of memory to use for storing incoming data or a function that returns such.\ncallback <Function> This function is called for every chunk of incoming data. Two arguments are passed to it: the number of bytes written to buffer and a reference to buffer. Return false from this function to implicitly pause() the socket. This function will be executed in the global context.\nFollowing is an example of a client using the onread option:\n\nconst net = require('node:net');\nnet.connect({\n  port: 80,\n  onread: {\n    // Reuses a 4KiB Buffer for every read from the socket.\n    buffer: Buffer.alloc(4 * 1024),\n    callback: function(nread, buf) {\n      // Received data is available in `buf` from 0 to `nread`.\n      console.log(buf.toString('utf8', 0,", "doc_id": "abc1e945-2d68-4373-8aca-9630059f6c37", "embedding": null, "doc_hash": "27224b4244cac2c007408caddef10a1bddb91ff0bdf2dd5eed43d399f54f507a", "extra_info": null, "node_info": {"start": 1859019, "end": 1862972}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e334e41f-bc4b-43f7-bb06-09af73602534", "3": "c324cb4f-477b-47a3-a6e4-05c7412153c1"}}, "__type__": "1"}, "c324cb4f-477b-47a3-a6e4-05c7412153c1": {"__data__": {"text": "such.\ncallback <Function> This function is called for every chunk of incoming data. Two arguments are passed to it: the number of bytes written to buffer and a reference to buffer. Return false from this function to implicitly pause() the socket. This function will be executed in the global context.\nFollowing is an example of a client using the onread option:\n\nconst net = require('node:net');\nnet.connect({\n  port: 80,\n  onread: {\n    // Reuses a 4KiB Buffer for every read from the socket.\n    buffer: Buffer.alloc(4 * 1024),\n    callback: function(nread, buf) {\n      // Received data is available in `buf` from 0 to `nread`.\n      console.log(buf.toString('utf8', 0, nread));\n    },\n  },\n});\nsocket.connect(path[, connectListener])#\npath <string> Path the client should connect to. See Identifying paths for IPC connections.\nconnectListener <Function> Common parameter of socket.connect() methods. Will be added as a listener for the 'connect' event once.\nReturns: <net.Socket> The socket itself.\nInitiate an IPC connection on the given socket.\n\nAlias to socket.connect(options[, connectListener]) called with { path: path } as options.\n\nsocket.connect(port[, host][, connectListener])#\nAdded in: v0.1.90\nport <number> Port the client should connect to.\nhost <string> Host the client should connect to.\nconnectListener <Function> Common parameter of socket.connect() methods. Will be added as a listener for the 'connect' event once.\nReturns: <net.Socket> The socket itself.\nInitiate a TCP connection on the given socket.\n\nAlias to socket.connect(options[, connectListener]) called with {port: port, host: host} as options.\n\nsocket.connecting#\nAdded in: v6.1.0\n<boolean>\nIf true, socket.connect(options[, connectListener]) was called and has not yet finished. It will stay true until the socket becomes connected, then it is set to false and the 'connect' event is emitted. Note that the socket.connect(options[, connectListener]) callback is a listener for the 'connect' event.\n\nsocket.destroy([error])#\nAdded in: v0.1.90\nerror <Object>\nReturns: <net.Socket>\nEnsures that no more I/O activity happens on this socket. Destroys the stream and closes the connection.\n\nSee writable.destroy() for further details.\n\nsocket.destroyed#\n<boolean> Indicates if the connection is destroyed or not. Once a connection is destroyed no further data can be transferred using it.\nSee writable.destroyed for further details.\n\nsocket.destroySoon()#\nAdded in: v0.3.4\nDestroys the socket after all data is written. If the 'finish' event was already emitted the socket is destroyed immediately. If the socket is still writable it implicitly calls socket.end().\n\nsocket.end([data[, encoding]][, callback])#\nAdded in: v0.1.90\ndata <string> | <Buffer> | <Uint8Array>\nencoding <string> Only used when data is string. Default: 'utf8'.\ncallback <Function> Optional callback for when the socket is finished.\nReturns: <net.Socket> The socket itself.\nHalf-closes the socket. i.e., it sends a FIN packet. It is possible the server will still send some data.\n\nSee writable.end() for further details.\n\nsocket.localAddress#\nAdded in: v0.9.6\n<string>\nThe string representation of the local IP address the remote client is connecting on. For example, in a server listening on '0.0.0.0', if a client connects on '192.168.1.1', the value of socket.localAddress would be '192.168.1.1'.\n\nsocket.localPort#\nAdded in: v0.9.6\n<integer>\nThe numeric representation of the local port. For example, 80 or", "doc_id": "c324cb4f-477b-47a3-a6e4-05c7412153c1", "embedding": null, "doc_hash": "6fd6348001084f43a6f70680bf0a47160450bca8ff1a130e63961769290e9d73", "extra_info": null, "node_info": {"start": 1863147, "end": 1866610}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "abc1e945-2d68-4373-8aca-9630059f6c37", "3": "c57b57ea-f932-4c54-9bec-3de9d6745756"}}, "__type__": "1"}, "c57b57ea-f932-4c54-9bec-3de9d6745756": {"__data__": {"text": "<Function> Optional callback for when the socket is finished.\nReturns: <net.Socket> The socket itself.\nHalf-closes the socket. i.e., it sends a FIN packet. It is possible the server will still send some data.\n\nSee writable.end() for further details.\n\nsocket.localAddress#\nAdded in: v0.9.6\n<string>\nThe string representation of the local IP address the remote client is connecting on. For example, in a server listening on '0.0.0.0', if a client connects on '192.168.1.1', the value of socket.localAddress would be '192.168.1.1'.\n\nsocket.localPort#\nAdded in: v0.9.6\n<integer>\nThe numeric representation of the local port. For example, 80 or 21.\n\nsocket.localFamily#\nAdded in: v18.8.0\n<string>\nThe string representation of the local IP family. 'IPv4' or 'IPv6'.\n\nsocket.pause()#\nReturns: <net.Socket> The socket itself.\nPauses the reading of data. That is, 'data' events will not be emitted. Useful to throttle back an upload.\n\nsocket.pending#\nAdded in: v11.2.0, v10.16.0\n<boolean>\nThis is true if the socket is not connected yet, either because .connect() has not yet been called or because it is still in the process of connecting (see socket.connecting).\n\nsocket.ref()#\nAdded in: v0.9.1\nReturns: <net.Socket> The socket itself.\nOpposite of unref(), calling ref() on a previously unrefed socket will not let the program exit if it's the only socket left (the default behavior). If the socket is refed calling ref again will have no effect.\n\nsocket.remoteAddress#\nAdded in: v0.5.10\n<string>\nThe string representation of the remote IP address. For example, '74.125.127.100' or '2001:4860:a005::68'. Value may be undefined if the socket is destroyed (for example, if the client disconnected).\n\nsocket.remoteFamily#\nAdded in: v0.11.14\n<string>\nThe string representation of the remote IP family. 'IPv4' or 'IPv6'.\n\nsocket.remotePort#\nAdded in: v0.5.10\n<integer>\nThe numeric representation of the remote port. For example, 80 or 21.\n\nsocket.resetAndDestroy()#\nAdded in: v18.3.0\nReturns: <net.Socket>\nClose the TCP connection by sending an RST packet and destroy the stream. If this TCP socket is in connecting status, it will send an RST packet and destroy this TCP socket once it is connected. Otherwise, it will call socket.destroy with an ERR_SOCKET_CLOSED Error. If this is not a TCP socket (for example, a pipe), calling this method will immediately throw an ERR_INVALID_HANDLE_TYPE Error.\n\nsocket.resume()#\nReturns: <net.Socket> The socket itself.\nResumes reading after a call to socket.pause().\n\nsocket.setEncoding([encoding])#\nAdded in: v0.1.90\nencoding <string>\nReturns: <net.Socket> The socket itself.\nSet the encoding for the socket as a Readable Stream. See readable.setEncoding() for more information.\n\nsocket.setKeepAlive([enable][, initialDelay])#\nHistory\nenable <boolean> Default: false\ninitialDelay <number> Default: 0\nReturns: <net.Socket> The socket itself.\nEnable/disable keep-alive functionality, and optionally set the initial delay before the first keepalive probe is sent on an idle socket.\n\nSet initialDelay (in milliseconds) to set the delay between the last data packet received and the first keepalive probe. Setting 0 for initialDelay will leave the value unchanged from the default (or previous) setting.\n\nEnabling the keep-alive functionality will set the following socket", "doc_id": "c57b57ea-f932-4c54-9bec-3de9d6745756", "embedding": null, "doc_hash": "675e6b406242f0afef1805a5031b0687cdec5055d63e141ab63cb9a6bfcd3ad2", "extra_info": null, "node_info": {"start": 1866608, "end": 1869905}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c324cb4f-477b-47a3-a6e4-05c7412153c1", "3": "b75d51c9-1f5e-4fa3-bc99-7feafb6e97be"}}, "__type__": "1"}, "b75d51c9-1f5e-4fa3-bc99-7feafb6e97be": {"__data__": {"text": "<string>\nReturns: <net.Socket> The socket itself.\nSet the encoding for the socket as a Readable Stream. See readable.setEncoding() for more information.\n\nsocket.setKeepAlive([enable][, initialDelay])#\nHistory\nenable <boolean> Default: false\ninitialDelay <number> Default: 0\nReturns: <net.Socket> The socket itself.\nEnable/disable keep-alive functionality, and optionally set the initial delay before the first keepalive probe is sent on an idle socket.\n\nSet initialDelay (in milliseconds) to set the delay between the last data packet received and the first keepalive probe. Setting 0 for initialDelay will leave the value unchanged from the default (or previous) setting.\n\nEnabling the keep-alive functionality will set the following socket options:\n\nSO_KEEPALIVE=1\nTCP_KEEPIDLE=initialDelay\nTCP_KEEPCNT=10\nTCP_KEEPINTVL=1\nsocket.setNoDelay([noDelay])#\nAdded in: v0.1.90\nnoDelay <boolean> Default: true\nReturns: <net.Socket> The socket itself.\nEnable/disable the use of Nagle's algorithm.\n\nWhen a TCP connection is created, it will have Nagle's algorithm enabled.\n\nNagle's algorithm delays data before it is sent via the network. It attempts to optimize throughput at the expense of latency.\n\nPassing true for noDelay or not passing an argument will disable Nagle's algorithm for the socket. Passing false for noDelay will enable Nagle's algorithm.\n\nsocket.setTimeout(timeout[, callback])#\nHistory\ntimeout <number>\ncallback <Function>\nReturns: <net.Socket> The socket itself.\nSets the socket to timeout after timeout milliseconds of inactivity on the socket. By default net.Socket do not have a timeout.\n\nWhen an idle timeout is triggered the socket will receive a 'timeout' event but the connection will not be severed. The user must manually call socket.end() or socket.destroy() to end the connection.\n\nsocket.setTimeout(3000);\nsocket.on('timeout', () => {\n  console.log('socket timeout');\n  socket.end();\n});\nIf timeout is 0, then the existing idle timeout is disabled.\n\nThe optional callback parameter will be added as a one-time listener for the 'timeout' event.\n\nsocket.timeout#\nAdded in: v10.7.0\n<number> | <undefined>\nThe socket timeout in milliseconds as set by socket.setTimeout(). It is undefined if a timeout has not been set.\n\nsocket.unref()#\nAdded in: v0.9.1\nReturns: <net.Socket> The socket itself.\nCalling unref() on a socket will allow the program to exit if this is the only active socket in the event system. If the socket is already unrefed calling unref() again will have no effect.\n\nsocket.write(data[, encoding][, callback])#\nAdded in: v0.1.90\ndata <string> | <Buffer> | <Uint8Array>\nencoding <string> Only used when data is string. Default: utf8.\ncallback <Function>\nReturns: <boolean>\nSends data on the socket. The second parameter specifies the encoding in the case of a string. It defaults to UTF8 encoding.\n\nReturns true if the entire data was flushed successfully to the kernel buffer. Returns false if all or part of the data was queued in user memory. 'drain' will be emitted when the buffer is again free.\n\nThe optional callback parameter will be executed when the data is finally written out, which may not be immediately.\n\nSee Writable stream write() method for more information.\n\nsocket.readyState#\nAdded in: v0.5.0\n<string>\nThis property represents the state of the connection as a string.\n\nIf the stream is connecting socket.readyState is opening.\nIf the stream is readable and writable, it is open.\nIf the stream is readable and not writable, it is readOnly.\nIf the stream is not readable and writable, it is writeOnly.\nnet.connect()#\nAliases to", "doc_id": "b75d51c9-1f5e-4fa3-bc99-7feafb6e97be", "embedding": null, "doc_hash": "f783b27bd6841f42360fb6ad101d18d3059fb9369e4bb0101326288e2d3ab0ad", "extra_info": null, "node_info": {"start": 1869811, "end": 1873396}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c57b57ea-f932-4c54-9bec-3de9d6745756", "3": "3fe1edae-4f3d-4515-812e-fea95acf16c4"}}, "__type__": "1"}, "3fe1edae-4f3d-4515-812e-fea95acf16c4": {"__data__": {"text": "to UTF8 encoding.\n\nReturns true if the entire data was flushed successfully to the kernel buffer. Returns false if all or part of the data was queued in user memory. 'drain' will be emitted when the buffer is again free.\n\nThe optional callback parameter will be executed when the data is finally written out, which may not be immediately.\n\nSee Writable stream write() method for more information.\n\nsocket.readyState#\nAdded in: v0.5.0\n<string>\nThis property represents the state of the connection as a string.\n\nIf the stream is connecting socket.readyState is opening.\nIf the stream is readable and writable, it is open.\nIf the stream is readable and not writable, it is readOnly.\nIf the stream is not readable and writable, it is writeOnly.\nnet.connect()#\nAliases to net.createConnection().\n\nPossible signatures:\n\nnet.connect(options[, connectListener])\nnet.connect(path[, connectListener]) for IPC connections.\nnet.connect(port[, host][, connectListener]) for TCP connections.\nnet.connect(options[, connectListener])#\nAdded in: v0.7.0\noptions <Object>\nconnectListener <Function>\nReturns: <net.Socket>\nAlias to net.createConnection(options[, connectListener]).\n\nnet.connect(path[, connectListener])#\nAdded in: v0.1.90\npath <string>\nconnectListener <Function>\nReturns: <net.Socket>\nAlias to net.createConnection(path[, connectListener]).\n\nnet.connect(port[, host][, connectListener])#\nAdded in: v0.1.90\nport <number>\nhost <string>\nconnectListener <Function>\nReturns: <net.Socket>\nAlias to net.createConnection(port[, host][, connectListener]).\n\nnet.createConnection()#\nA factory function, which creates a new net.Socket, immediately initiates connection with socket.connect(), then returns the net.Socket that starts the connection.\n\nWhen the connection is established, a 'connect' event will be emitted on the returned socket. The last parameter connectListener, if supplied, will be added as a listener for the 'connect' event once.\n\nPossible signatures:\n\nnet.createConnection(options[, connectListener])\nnet.createConnection(path[, connectListener]) for IPC connections.\nnet.createConnection(port[, host][, connectListener]) for TCP connections.\nThe net.connect() function is an alias to this function.\n\nnet.createConnection(options[, connectListener])#\nAdded in: v0.1.90\noptions <Object> Required. Will be passed to both the new net.Socket([options]) call and the socket.connect(options[, connectListener]) method.\nconnectListener <Function> Common parameter of the net.createConnection() functions. If supplied, will be added as a listener for the 'connect' event on the returned socket once.\nReturns: <net.Socket> The newly created socket used to start the connection.\nFor available options, see new net.Socket([options]) and socket.connect(options[, connectListener]).\n\nAdditional options:\n\ntimeout <number> If set, will be used to call socket.setTimeout(timeout) after the socket is created, but before it starts the connection.\nFollowing is an example of a client of the echo server described in the net.createServer() section:\n\nconst net = require('node:net');\nconst client = net.createConnection({ port: 8124 }, () => {\n  // 'connect' listener.\n  console.log('connected to server!');\n  client.write('world!\\r\\n');\n});\nclient.on('data', (data) => {\n  console.log(data.toString());\n  client.end();\n});\nclient.on('end', () => {\n  console.log('disconnected from server');\n});\nTo connect on the socket /tmp/echo.sock:\n\nconst client = net.createConnection({ path: '/tmp/echo.sock' });\nnet.createConnection(path[, connectListener])#\nAdded in: v0.1.90\npath <string> Path the socket should connect to. Will be passed to socket.connect(path[, connectListener]). See Identifying paths for", "doc_id": "3fe1edae-4f3d-4515-812e-fea95acf16c4", "embedding": null, "doc_hash": "44172e67ba28b2f240ffddf5223bb5da9bf7e30d84e51c13eb386e6eed28b81a", "extra_info": null, "node_info": {"start": 1873395, "end": 1877082}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b75d51c9-1f5e-4fa3-bc99-7feafb6e97be", "3": "c04de061-93fc-43f8-ba9f-ca915d615434"}}, "__type__": "1"}, "c04de061-93fc-43f8-ba9f-ca915d615434": {"__data__": {"text": "client = net.createConnection({ port: 8124 }, () => {\n  // 'connect' listener.\n  console.log('connected to server!');\n  client.write('world!\\r\\n');\n});\nclient.on('data', (data) => {\n  console.log(data.toString());\n  client.end();\n});\nclient.on('end', () => {\n  console.log('disconnected from server');\n});\nTo connect on the socket /tmp/echo.sock:\n\nconst client = net.createConnection({ path: '/tmp/echo.sock' });\nnet.createConnection(path[, connectListener])#\nAdded in: v0.1.90\npath <string> Path the socket should connect to. Will be passed to socket.connect(path[, connectListener]). See Identifying paths for IPC connections.\nconnectListener <Function> Common parameter of the net.createConnection() functions, an \"once\" listener for the 'connect' event on the initiating socket. Will be passed to socket.connect(path[, connectListener]).\nReturns: <net.Socket> The newly created socket used to start the connection.\nInitiates an IPC connection.\n\nThis function creates a new net.Socket with all options set to default, immediately initiates connection with socket.connect(path[, connectListener]), then returns the net.Socket that starts the connection.\n\nnet.createConnection(port[, host][, connectListener])#\nAdded in: v0.1.90\nport <number> Port the socket should connect to. Will be passed to socket.connect(port[, host][, connectListener]).\nhost <string> Host the socket should connect to. Will be passed to socket.connect(port[, host][, connectListener]). Default: 'localhost'.\nconnectListener <Function> Common parameter of the net.createConnection() functions, an \"once\" listener for the 'connect' event on the initiating socket. Will be passed to socket.connect(port[, host][, connectListener]).\nReturns: <net.Socket> The newly created socket used to start the connection.\nInitiates a TCP connection.\n\nThis function creates a new net.Socket with all options set to default, immediately initiates connection with socket.connect(port[, host][, connectListener]), then returns the net.Socket that starts the connection.\n\nnet.createServer([options][, connectionListener])#\nHistory\noptions <Object>\n\nallowHalfOpen <boolean> If set to false, then the socket will automatically end the writable side when the readable side ends. Default: false.\npauseOnConnect <boolean> Indicates whether the socket should be paused on incoming connections. Default: false.\nnoDelay <boolean> If set to true, it disables the use of Nagle's algorithm immediately after a new incoming connection is received. Default: false.\nkeepAlive <boolean> If set to true, it enables keep-alive functionality on the socket immediately after a new incoming connection is received, similarly on what is done in socket.setKeepAlive([enable][, initialDelay]). Default: false.\nkeepAliveInitialDelay <number> If set to a positive number, it sets the initial delay before the first keepalive probe is sent on an idle socket.Default: 0.\nconnectionListener <Function> Automatically set as a listener for the 'connection' event.\n\nReturns: <net.Server>\n\nCreates a new TCP or IPC server.\n\nIf allowHalfOpen is set to true, when the other end of the socket signals the end of transmission, the server will only send back the end of transmission when socket.end() is explicitly called. For example, in the context of TCP, when a FIN packed is received, a FIN packed is sent back only when socket.end() is explicitly called. Until then the connection is half-closed (non-readable but still writable). See 'end' event and RFC 1122 (section 4.2.2.13) for more information.\n\nIf pauseOnConnect is set to true, then the socket associated with each incoming connection will be paused, and no data will be read from its handle. This allows connections to be passed between processes without any data being read by the original process. To begin reading data from a paused socket, call socket.resume().\n\nThe server can", "doc_id": "c04de061-93fc-43f8-ba9f-ca915d615434", "embedding": null, "doc_hash": "f9fd522b8dbc2396e6ce610517ac89b1a9a1b3fe4ea2d01b1106aa71372f2064", "extra_info": null, "node_info": {"start": 1877189, "end": 1881053}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3fe1edae-4f3d-4515-812e-fea95acf16c4", "3": "c32fb036-64ff-4e7f-897d-c1b75455ba59"}}, "__type__": "1"}, "c32fb036-64ff-4e7f-897d-c1b75455ba59": {"__data__": {"text": "allowHalfOpen is set to true, when the other end of the socket signals the end of transmission, the server will only send back the end of transmission when socket.end() is explicitly called. For example, in the context of TCP, when a FIN packed is received, a FIN packed is sent back only when socket.end() is explicitly called. Until then the connection is half-closed (non-readable but still writable). See 'end' event and RFC 1122 (section 4.2.2.13) for more information.\n\nIf pauseOnConnect is set to true, then the socket associated with each incoming connection will be paused, and no data will be read from its handle. This allows connections to be passed between processes without any data being read by the original process. To begin reading data from a paused socket, call socket.resume().\n\nThe server can be a TCP server or an IPC server, depending on what it listen() to.\n\nHere is an example of a TCP echo server which listens for connections on port 8124:\nconst net = require('node:net');\nconst server = net.createServer((c) => {\n  // 'connection' listener.\n  console.log('client connected');\n  c.on('end', () => {\n    console.log('client disconnected');\n  });\n  c.write('hello\\r\\n');\n  c.pipe(c);\n});\nserver.on('error', (err) => {\n  throw err;\n});\nserver.listen(8124, () => {\n  console.log('server bound');\n});\nTest this by using telnet:\n\n$ telnet localhost 8124\nTo listen on the socket /tmp/echo.sock:\n\nserver.listen('/tmp/echo.sock', () => {\n  console.log('server bound');\n});\nUse nc to connect to a Unix domain socket server:\n\n$ nc -U /tmp/echo.sock\nnet.isIP(input)#\nAdded in: v0.3.0\ninput <string>\nReturns: <integer>\nReturns 6 if input is an IPv6 address. Returns 4 if input is an IPv4 address in dot-decimal notation with no leading zeroes. Otherwise, returns 0.\n\nnet.isIP('::1'); // returns 6\nnet.isIP('127.0.0.1'); // returns 4\nnet.isIP('127.000.000.001'); // returns 0\nnet.isIP('127.0.0.1/24'); // returns 0\nnet.isIP('fhqwhgads'); // returns 0\nnet.isIPv4(input)#\nAdded in: v0.3.0\ninput <string>\nReturns: <boolean>\nReturns true if input is an IPv4 address in dot-decimal notation with no leading zeroes. Otherwise, returns false.\n\nnet.isIPv4('127.0.0.1'); // returns true\nnet.isIPv4('127.000.000.001'); // returns false\nnet.isIPv4('127.0.0.1/24'); // returns false\nnet.isIPv4('fhqwhgads'); // returns false\nnet.isIPv6(input)#\nAdded in: v0.3.0\ninput <string>\nReturns: <boolean>\nReturns true if input is an IPv6 address. Otherwise, returns false.\n\nnet.isIPv6('::1'); // returns true\nnet.isIPv6('fhqwhgads'); // returns false\nOS#\nStability: 2 - Stable\nSource Code: lib/os.js\n\nThe node:os module provides operating system-related utility methods and properties. It can be accessed using:\n\nconst os = require('node:os');\nos.EOL#\nAdded in: v0.7.8\n<string>\nThe operating system-specific end-of-line marker.\n\n\\n on POSIX\n\\r\\n on Windows\nos.availableParallelism()#\nAdded in: v18.14.0\nReturns: <integer>\nReturns an estimate of the default amount of parallelism a program should use. Always returns a value greater than zero.\n\nThis function is a small wrapper about libuv's", "doc_id": "c32fb036-64ff-4e7f-897d-c1b75455ba59", "embedding": null, "doc_hash": "e29f0a9a4cc3b6d900a63045acd324f5844fb3751664702b99d127a2dee1ff27", "extra_info": null, "node_info": {"start": 1880919, "end": 1884001}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c04de061-93fc-43f8-ba9f-ca915d615434", "3": "3b3ebad6-0223-4cc8-a28e-65f5d3c67911"}}, "__type__": "1"}, "3b3ebad6-0223-4cc8-a28e-65f5d3c67911": {"__data__": {"text": "// returns true\nnet.isIPv6('fhqwhgads'); // returns false\nOS#\nStability: 2 - Stable\nSource Code: lib/os.js\n\nThe node:os module provides operating system-related utility methods and properties. It can be accessed using:\n\nconst os = require('node:os');\nos.EOL#\nAdded in: v0.7.8\n<string>\nThe operating system-specific end-of-line marker.\n\n\\n on POSIX\n\\r\\n on Windows\nos.availableParallelism()#\nAdded in: v18.14.0\nReturns: <integer>\nReturns an estimate of the default amount of parallelism a program should use. Always returns a value greater than zero.\n\nThis function is a small wrapper about libuv's uv_available_parallelism().\n\nos.arch()#\nAdded in: v0.5.0\nReturns: <string>\nReturns the operating system CPU architecture for which the Node.js binary was compiled. Possible values are 'arm', 'arm64', 'ia32', 'mips', 'mipsel', 'ppc', 'ppc64', 's390', 's390x', and 'x64'.\n\nThe return value is equivalent to process.arch.\n\nos.constants#\nAdded in: v6.3.0\n<Object>\nContains commonly used operating system-specific constants for error codes, process signals, and so on. The specific constants defined are described in OS constants.\n\nos.cpus()#\nAdded in: v0.3.3\nReturns: <Object[]>\nReturns an array of objects containing information about each logical CPU core.\n\nThe properties included on each object include:\n\nmodel <string>\nspeed <number> (in MHz)\ntimes <Object>\nuser <number> The number of milliseconds the CPU has spent in user mode.\nnice <number> The number of milliseconds the CPU has spent in nice mode.\nsys <number> The number of milliseconds the CPU has spent in sys mode.\nidle <number> The number of milliseconds the CPU has spent in idle mode.\nirq <number> The number of milliseconds the CPU has spent in irq mode.\n[\n  {\n    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n    speed: 2926,\n    times: {\n      user: 252020,\n      nice: 0,\n      sys: 30340,\n      idle: 1070356870,\n      irq: 0,\n    },\n  },\n  {\n    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n    speed: 2926,\n    times: {\n      user: 306960,\n      nice: 0,\n      sys: 26980,\n      idle: 1071569080,\n      irq: 0,\n    },\n  },\n  {\n    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n    speed: 2926,\n    times: {\n      user: 248450,\n      nice: 0,\n      sys: 21750,\n      idle: 1070919370,\n      irq: 0,\n    },\n  },\n  {\n    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n    speed: 2926,\n    times: {\n      user: 256880,\n      nice: 0,\n      sys: 19430,\n      idle: 1070905480,\n      irq: 20,\n    },\n  },\n]\nnice values are", "doc_id": "3b3ebad6-0223-4cc8-a28e-65f5d3c67911", "embedding": null, "doc_hash": "0dfc3635d0fccb35c2370934b6ebb811eb635d2f92c9f41d95cc35e7c631b4b6", "extra_info": null, "node_info": {"start": 1884154, "end": 1886688}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c32fb036-64ff-4e7f-897d-c1b75455ba59", "3": "4e1d0a88-41ba-4a4f-83d3-aa0be1baac0d"}}, "__type__": "1"}, "4e1d0a88-41ba-4a4f-83d3-aa0be1baac0d": {"__data__": {"text": "   times: {\n      user: 248450,\n      nice: 0,\n      sys: 21750,\n      idle: 1070919370,\n      irq: 0,\n    },\n  },\n  {\n    model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n    speed: 2926,\n    times: {\n      user: 256880,\n      nice: 0,\n      sys: 19430,\n      idle: 1070905480,\n      irq: 20,\n    },\n  },\n]\nnice values are POSIX-only. On Windows, the nice values of all processors are always 0.\n\nos.cpus().length should not be used to calculate the amount of parallelism available to an application. Use os.availableParallelism() for this purpose.\n\nos.devNull#\nAdded in: v16.3.0, v14.18.0\n<string>\nThe platform-specific file path of the null device.\n\n\\\\.\\nul on Windows\n/dev/null on POSIX\nos.endianness()#\nAdded in: v0.9.4\nReturns: <string>\nReturns a string identifying the endianness of the CPU for which the Node.js binary was compiled.\n\nPossible values are 'BE' for big endian and 'LE' for little endian.\n\nos.freemem()#\nAdded in: v0.3.3\nReturns: <integer>\nReturns the amount of free system memory in bytes as an integer.\n\nos.getPriority([pid])#\nAdded in: v10.10.0\npid <integer> The process ID to retrieve scheduling priority for. Default: 0.\nReturns: <integer>\nReturns the scheduling priority for the process specified by pid. If pid is not provided or is 0, the priority of the current process is returned.\n\nos.homedir()#\nAdded in: v2.3.0\nReturns: <string>\nReturns the string path of the current user's home directory.\n\nOn POSIX, it uses the $HOME environment variable if defined. Otherwise it uses the effective UID to look up the user's home directory.\n\nOn Windows, it uses the USERPROFILE environment variable if defined. Otherwise it uses the path to the profile directory of the current user.\n\nos.hostname()#\nAdded in: v0.3.3\nReturns: <string>\nReturns the host name of the operating system as a string.\n\nos.loadavg()#\nAdded in: v0.3.3\nReturns: <number[]>\nReturns an array containing the 1, 5, and 15 minute load averages.\n\nThe load average is a measure of system activity calculated by the operating system and expressed as a fractional number.\n\nThe load average is a Unix-specific concept. On Windows, the return value is always [0, 0, 0].\n\nos.machine()#\nAdded in: v18.9.0\nReturns <string>\nReturns the machine type as a string, such as arm, arm64, aarch64, mips, mips64, ppc64, ppc64le, s390, s390x, i386, i686, x86_64.\n\nOn POSIX systems, the machine type is determined by calling uname(3). On Windows, RtlGetVersion() is used, and if it is not available, GetVersionExW() will be used. See https://en.wikipedia.org/wiki/Uname#Examples for more information.\n\nos.networkInterfaces()#\nHistory\nReturns: <Object>\nReturns an object containing network interfaces that have been assigned a network address.\n\nEach key on the returned object identifies a network interface. The associated value is an array of objects that each describe an assigned network address.\n\nThe properties available on the assigned network address object include:\n\naddress <string> The assigned IPv4 or IPv6 address\nnetmask <string> The IPv4 or IPv6 network mask\nfamily <string> Either IPv4 or IPv6\nmac <string> The MAC address of the network interface\ninternal", "doc_id": "4e1d0a88-41ba-4a4f-83d3-aa0be1baac0d", "embedding": null, "doc_hash": "15a32e69b24b9a22405717a0c80aa3075bfc93af4dd8f2e724c6a6b11692c875", "extra_info": null, "node_info": {"start": 1887008, "end": 1890155}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3b3ebad6-0223-4cc8-a28e-65f5d3c67911", "3": "66b21fa0-beda-495e-97d1-7fa4b253dd8f"}}, "__type__": "1"}, "66b21fa0-beda-495e-97d1-7fa4b253dd8f": {"__data__": {"text": "the machine type is determined by calling uname(3). On Windows, RtlGetVersion() is used, and if it is not available, GetVersionExW() will be used. See https://en.wikipedia.org/wiki/Uname#Examples for more information.\n\nos.networkInterfaces()#\nHistory\nReturns: <Object>\nReturns an object containing network interfaces that have been assigned a network address.\n\nEach key on the returned object identifies a network interface. The associated value is an array of objects that each describe an assigned network address.\n\nThe properties available on the assigned network address object include:\n\naddress <string> The assigned IPv4 or IPv6 address\nnetmask <string> The IPv4 or IPv6 network mask\nfamily <string> Either IPv4 or IPv6\nmac <string> The MAC address of the network interface\ninternal <boolean> true if the network interface is a loopback or similar interface that is not remotely accessible; otherwise false\nscopeid <number> The numeric IPv6 scope ID (only specified when family is IPv6)\ncidr <string> The assigned IPv4 or IPv6 address with the routing prefix in CIDR notation. If the netmask is invalid, this property is set to null.\n{\n  lo: [\n    {\n      address: '127.0.0.1',\n      netmask: '255.0.0.0',\n      family: 'IPv4',\n      mac: '00:00:00:00:00:00',\n      internal: true,\n      cidr: '127.0.0.1/8'\n    },\n    {\n      address: '::1',\n      netmask: 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff',\n      family: 'IPv6',\n      mac: '00:00:00:00:00:00',\n      scopeid: 0,\n      internal: true,\n      cidr: '::1/128'\n    }\n  ],\n  eth0: [\n    {\n      address: '192.168.1.108',\n      netmask: '255.255.255.0',\n      family: 'IPv4',\n      mac: '01:02:03:0a:0b:0c',\n      internal: false,\n      cidr: '192.168.1.108/24'\n    },\n    {\n      address: 'fe80::a00:27ff:fe4e:66a1',\n      netmask: 'ffff:ffff:ffff:ffff::',\n      family: 'IPv6',\n      mac: '01:02:03:0a:0b:0c',\n      scopeid: 1,\n      internal: false,\n      cidr: 'fe80::a00:27ff:fe4e:66a1/64'\n    }\n  ]\n}\nos.platform()#\nAdded in: v0.5.0\nReturns: <string>\nReturns a string identifying the operating system platform for which the Node.js binary was compiled. The value is set at compile time. Possible values are 'aix', 'darwin', 'freebsd','linux', 'openbsd', 'sunos', and 'win32'.\n\nThe return value is equivalent to process.platform.\n\nThe value 'android' may also be returned if Node.js is built on the Android operating system. Android support is experimental.\n\nos.release()#\nAdded in: v0.3.3\nReturns: <string>\nReturns the operating system as a string.\n\nOn POSIX systems, the operating system release is determined by calling uname(3). On Windows, GetVersionExW() is used. See https://en.wikipedia.org/wiki/Uname#Examples for more", "doc_id": "66b21fa0-beda-495e-97d1-7fa4b253dd8f", "embedding": null, "doc_hash": "a5a9aad20876e4d49fb5381bcabb4970daffe0ae5066b407417bdaf36ffde6d8", "extra_info": null, "node_info": {"start": 1889680, "end": 1892372}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4e1d0a88-41ba-4a4f-83d3-aa0be1baac0d", "3": "179d7165-b487-454f-8c46-904c7403a870"}}, "__type__": "1"}, "179d7165-b487-454f-8c46-904c7403a870": {"__data__": {"text": "<string>\nReturns a string identifying the operating system platform for which the Node.js binary was compiled. The value is set at compile time. Possible values are 'aix', 'darwin', 'freebsd','linux', 'openbsd', 'sunos', and 'win32'.\n\nThe return value is equivalent to process.platform.\n\nThe value 'android' may also be returned if Node.js is built on the Android operating system. Android support is experimental.\n\nos.release()#\nAdded in: v0.3.3\nReturns: <string>\nReturns the operating system as a string.\n\nOn POSIX systems, the operating system release is determined by calling uname(3). On Windows, GetVersionExW() is used. See https://en.wikipedia.org/wiki/Uname#Examples for more information.\n\nos.setPriority([pid, ]priority)#\nAdded in: v10.10.0\npid <integer> The process ID to set scheduling priority for. Default: 0.\npriority <integer> The scheduling priority to assign to the process.\nAttempts to set the scheduling priority for the process specified by pid. If pid is not provided or is 0, the process ID of the current process is used.\n\nThe priority input must be an integer between -20 (high priority) and 19 (low priority). Due to differences between Unix priority levels and Windows priority classes, priority is mapped to one of six priority constants in os.constants.priority. When retrieving a process priority level, this range mapping may cause the return value to be slightly different on Windows. To avoid confusion, set priority to one of the priority constants.\n\nOn Windows, setting priority to PRIORITY_HIGHEST requires elevated user privileges. Otherwise the set priority will be silently reduced to PRIORITY_HIGH.\n\nos.tmpdir()#\nHistory\nReturns: <string>\nReturns the operating system's default directory for temporary files as a string.\n\nos.totalmem()#\nAdded in: v0.3.3\nReturns: <integer>\nReturns the total amount of system memory in bytes as an integer.\n\nos.type()#\nAdded in: v0.3.3\nReturns: <string>\nReturns the operating system name as returned by uname(3). For example, it returns 'Linux' on Linux, 'Darwin' on macOS, and 'Windows_NT' on Windows.\n\nSee https://en.wikipedia.org/wiki/Uname#Examples for additional information about the output of running uname(3) on various operating systems.\n\nos.uptime()#\nHistory\nReturns: <integer>\nReturns the system uptime in number of seconds.\n\nos.userInfo([options])#\nAdded in: v6.0.0\noptions <Object>\nencoding <string> Character encoding used to interpret resulting strings. If encoding is set to 'buffer', the username, shell, and homedir values will be Buffer instances. Default: 'utf8'.\nReturns: <Object>\nReturns information about the currently effective user. On POSIX platforms, this is typically a subset of the password file. The returned object includes the username, uid, gid, shell, and homedir. On Windows, the uid and gid fields are -1, and shell is null.\n\nThe value of homedir returned by os.userInfo() is provided by the operating system. This differs from the result of os.homedir(), which queries environment variables for the home directory before falling back to the operating system response.\n\nThrows a SystemError if a user has no username or homedir.\n\nos.version()#\nAdded in: v13.11.0, v12.17.0\nReturns <string>\nReturns a string identifying the kernel version.\n\nOn POSIX systems, the operating system release is determined by calling uname(3). On Windows, RtlGetVersion() is used, and if it is not available, GetVersionExW() will be used. See https://en.wikipedia.org/wiki/Uname#Examples for more information.\n\nOS constants#\nThe following constants are exported by os.constants.\n\nNot all constants will be available on every operating system.\n\nSignal constants#\nHistory\nThe following signal constants are exported by", "doc_id": "179d7165-b487-454f-8c46-904c7403a870", "embedding": null, "doc_hash": "05d92be0439e82b7a00a458b0ca0ba049c45e704b7c19ba171acf69f765670fa", "extra_info": null, "node_info": {"start": 1892462, "end": 1896165}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "66b21fa0-beda-495e-97d1-7fa4b253dd8f", "3": "347a1705-a98e-46eb-882b-8ce15e0857ed"}}, "__type__": "1"}, "347a1705-a98e-46eb-882b-8ce15e0857ed": {"__data__": {"text": "variables for the home directory before falling back to the operating system response.\n\nThrows a SystemError if a user has no username or homedir.\n\nos.version()#\nAdded in: v13.11.0, v12.17.0\nReturns <string>\nReturns a string identifying the kernel version.\n\nOn POSIX systems, the operating system release is determined by calling uname(3). On Windows, RtlGetVersion() is used, and if it is not available, GetVersionExW() will be used. See https://en.wikipedia.org/wiki/Uname#Examples for more information.\n\nOS constants#\nThe following constants are exported by os.constants.\n\nNot all constants will be available on every operating system.\n\nSignal constants#\nHistory\nThe following signal constants are exported by os.constants.signals.\n\nConstant\tDescription\nSIGHUP\tSent to indicate when a controlling terminal is closed or a parent process exits.\nSIGINT\tSent to indicate when a user wishes to interrupt a process (Ctrl+C).\nSIGQUIT\tSent to indicate when a user wishes to terminate a process and perform a core dump.\nSIGILL\tSent to a process to notify that it has attempted to perform an illegal, malformed, unknown, or privileged instruction.\nSIGTRAP\tSent to a process when an exception has occurred.\nSIGABRT\tSent to a process to request that it abort.\nSIGIOT\tSynonym for SIGABRT\nSIGBUS\tSent to a process to notify that it has caused a bus error.\nSIGFPE\tSent to a process to notify that it has performed an illegal arithmetic operation.\nSIGKILL\tSent to a process to terminate it immediately.\nSIGUSR1 SIGUSR2\tSent to a process to identify user-defined conditions.\nSIGSEGV\tSent to a process to notify of a segmentation fault.\nSIGPIPE\tSent to a process when it has attempted to write to a disconnected pipe.\nSIGALRM\tSent to a process when a system timer elapses.\nSIGTERM\tSent to a process to request termination.\nSIGCHLD\tSent to a process when a child process terminates.\nSIGSTKFLT\tSent to a process to indicate a stack fault on a coprocessor.\nSIGCONT\tSent to instruct the operating system to continue a paused process.\nSIGSTOP\tSent to instruct the operating system to halt a process.\nSIGTSTP\tSent to a process to request it to stop.\nSIGBREAK\tSent to indicate when a user wishes to interrupt a process.\nSIGTTIN\tSent to a process when it reads from the TTY while in the background.\nSIGTTOU\tSent to a process when it writes to the TTY while in the background.\nSIGURG\tSent to a process when a socket has urgent data to read.\nSIGXCPU\tSent to a process when it has exceeded its limit on CPU usage.\nSIGXFSZ\tSent to a process when it grows a file larger than the maximum allowed.\nSIGVTALRM\tSent to a process when a virtual timer has elapsed.\nSIGPROF\tSent to a process when a system timer has elapsed.\nSIGWINCH\tSent to a process when the controlling terminal has changed its size.\nSIGIO\tSent to a process when I/O is available.\nSIGPOLL\tSynonym for SIGIO\nSIGLOST\tSent to a process when a file lock has been lost.\nSIGPWR\tSent to a process to notify of a power failure.\nSIGINFO\tSynonym for SIGPWR\nSIGSYS\tSent to a process to notify of a bad argument.\nSIGUNUSED\tSynonym for SIGSYS\nError constants#\nThe following error constants are exported by os.constants.errno.\n\nPOSIX error constants#\nConstant\tDescription\nE2BIG\tIndicates that the list of arguments is longer than expected.\nEACCES\tIndicates that the operation did not have sufficient permissions.\nEADDRINUSE\tIndicates that the network address is", "doc_id": "347a1705-a98e-46eb-882b-8ce15e0857ed", "embedding": null, "doc_hash": "def640ab56ac890cdb4b7e34ce808869e71c6f77eedefd1bcda74455ac8dd086", "extra_info": null, "node_info": {"start": 1896139, "end": 1899520}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "179d7165-b487-454f-8c46-904c7403a870", "3": "d3eba34d-5696-4d59-80cb-f04b1f571be1"}}, "__type__": "1"}, "d3eba34d-5696-4d59-80cb-f04b1f571be1": {"__data__": {"text": "its size.\nSIGIO\tSent to a process when I/O is available.\nSIGPOLL\tSynonym for SIGIO\nSIGLOST\tSent to a process when a file lock has been lost.\nSIGPWR\tSent to a process to notify of a power failure.\nSIGINFO\tSynonym for SIGPWR\nSIGSYS\tSent to a process to notify of a bad argument.\nSIGUNUSED\tSynonym for SIGSYS\nError constants#\nThe following error constants are exported by os.constants.errno.\n\nPOSIX error constants#\nConstant\tDescription\nE2BIG\tIndicates that the list of arguments is longer than expected.\nEACCES\tIndicates that the operation did not have sufficient permissions.\nEADDRINUSE\tIndicates that the network address is already in use.\nEADDRNOTAVAIL\tIndicates that the network address is currently unavailable for use.\nEAFNOSUPPORT\tIndicates that the network address family is not supported.\nEAGAIN\tIndicates that there is no data available and to try the operation again later.\nEALREADY\tIndicates that the socket already has a pending connection in progress.\nEBADF\tIndicates that a file descriptor is not valid.\nEBADMSG\tIndicates an invalid data message.\nEBUSY\tIndicates that a device or resource is busy.\nECANCELED\tIndicates that an operation was canceled.\nECHILD\tIndicates that there are no child processes.\nECONNABORTED\tIndicates that the network connection has been aborted.\nECONNREFUSED\tIndicates that the network connection has been refused.\nECONNRESET\tIndicates that the network connection has been reset.\nEDEADLK\tIndicates that a resource deadlock has been avoided.\nEDESTADDRREQ\tIndicates that a destination address is required.\nEDOM\tIndicates that an argument is out of the domain of the function.\nEDQUOT\tIndicates that the disk quota has been exceeded.\nEEXIST\tIndicates that the file already exists.\nEFAULT\tIndicates an invalid pointer address.\nEFBIG\tIndicates that the file is too large.\nEHOSTUNREACH\tIndicates that the host is unreachable.\nEIDRM\tIndicates that the identifier has been removed.\nEILSEQ\tIndicates an illegal byte sequence.\nEINPROGRESS\tIndicates that an operation is already in progress.\nEINTR\tIndicates that a function call was interrupted.\nEINVAL\tIndicates that an invalid argument was provided.\nEIO\tIndicates an otherwise unspecified I/O error.\nEISCONN\tIndicates that the socket is connected.\nEISDIR\tIndicates that the path is a directory.\nELOOP\tIndicates too many levels of symbolic links in a path.\nEMFILE\tIndicates that there are too many open files.\nEMLINK\tIndicates that there are too many hard links to a file.\nEMSGSIZE\tIndicates that the provided message is too long.\nEMULTIHOP\tIndicates that a multihop was attempted.\nENAMETOOLONG\tIndicates that the filename is too long.\nENETDOWN\tIndicates that the network is down.\nENETRESET\tIndicates that the connection has been aborted by the network.\nENETUNREACH\tIndicates that the network is unreachable.\nENFILE\tIndicates too many open files in the system.\nENOBUFS\tIndicates that no buffer space is available.\nENODATA\tIndicates that no message is available on the stream head read queue.\nENODEV\tIndicates that there is no such device.\nENOENT\tIndicates that there is no such file or directory.\nENOEXEC\tIndicates an exec format error.\nENOLCK\tIndicates that there are no locks available.\nENOLINK\tIndications that a link has been severed.\nENOMEM\tIndicates that there is not enough space.\nENOMSG\tIndicates that there is no message of the desired type.\nENOPROTOOPT\tIndicates that a given protocol is not available.\nENOSPC\tIndicates that there is no space available on the device.\nENOSR\tIndicates that there are no stream resources", "doc_id": "d3eba34d-5696-4d59-80cb-f04b1f571be1", "embedding": null, "doc_hash": "253aea07dfc588eb839f84250227880501646a9f99acd2a0a8cd49d83198d4af", "extra_info": null, "node_info": {"start": 1899598, "end": 1903103}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "347a1705-a98e-46eb-882b-8ce15e0857ed", "3": "72181837-a318-4836-a858-e6a66531044a"}}, "__type__": "1"}, "72181837-a318-4836-a858-e6a66531044a": {"__data__": {"text": "too many open files in the system.\nENOBUFS\tIndicates that no buffer space is available.\nENODATA\tIndicates that no message is available on the stream head read queue.\nENODEV\tIndicates that there is no such device.\nENOENT\tIndicates that there is no such file or directory.\nENOEXEC\tIndicates an exec format error.\nENOLCK\tIndicates that there are no locks available.\nENOLINK\tIndications that a link has been severed.\nENOMEM\tIndicates that there is not enough space.\nENOMSG\tIndicates that there is no message of the desired type.\nENOPROTOOPT\tIndicates that a given protocol is not available.\nENOSPC\tIndicates that there is no space available on the device.\nENOSR\tIndicates that there are no stream resources available.\nENOSTR\tIndicates that a given resource is not a stream.\nENOSYS\tIndicates that a function has not been implemented.\nENOTCONN\tIndicates that the socket is not connected.\nENOTDIR\tIndicates that the path is not a directory.\nENOTEMPTY\tIndicates that the directory is not empty.\nENOTSOCK\tIndicates that the given item is not a socket.\nENOTSUP\tIndicates that a given operation is not supported.\nENOTTY\tIndicates an inappropriate I/O control operation.\nENXIO\tIndicates no such device or address.\nEOPNOTSUPP\tIndicates that an operation is not supported on the socket. Although ENOTSUP and EOPNOTSUPP have the same value on Linux, according to POSIX.1 these error values should be distinct.)\nEOVERFLOW\tIndicates that a value is too large to be stored in a given data type.\nEPERM\tIndicates that the operation is not permitted.\nEPIPE\tIndicates a broken pipe.\nEPROTO\tIndicates a protocol error.\nEPROTONOSUPPORT\tIndicates that a protocol is not supported.\nEPROTOTYPE\tIndicates the wrong type of protocol for a socket.\nERANGE\tIndicates that the results are too large.\nEROFS\tIndicates that the file system is read only.\nESPIPE\tIndicates an invalid seek operation.\nESRCH\tIndicates that there is no such process.\nESTALE\tIndicates that the file handle is stale.\nETIME\tIndicates an expired timer.\nETIMEDOUT\tIndicates that the connection timed out.\nETXTBSY\tIndicates that a text file is busy.\nEWOULDBLOCK\tIndicates that the operation would block.\nEXDEV\tIndicates an improper link.\nWindows-specific error constants#\nThe following error codes are specific to the Windows operating system.\n\nConstant\tDescription\nWSAEINTR\tIndicates an interrupted function call.\nWSAEBADF\tIndicates an invalid file handle.\nWSAEACCES\tIndicates insufficient permissions to complete the operation.\nWSAEFAULT\tIndicates an invalid pointer address.\nWSAEINVAL\tIndicates that an invalid argument was passed.\nWSAEMFILE\tIndicates that there are too many open files.\nWSAEWOULDBLOCK\tIndicates that a resource is temporarily unavailable.\nWSAEINPROGRESS\tIndicates that an operation is currently in progress.\nWSAEALREADY\tIndicates that an operation is already in progress.\nWSAENOTSOCK\tIndicates that the resource is not a socket.\nWSAEDESTADDRREQ\tIndicates that a destination address is required.\nWSAEMSGSIZE\tIndicates that the message size is too long.\nWSAEPROTOTYPE\tIndicates the wrong protocol type for the socket.\nWSAENOPROTOOPT\tIndicates a bad protocol option.\nWSAEPROTONOSUPPORT\tIndicates that the protocol is not supported.\nWSAESOCKTNOSUPPORT\tIndicates that the socket type is not supported.\nWSAEOPNOTSUPP\tIndicates that the operation is not supported.\nWSAEPFNOSUPPORT\tIndicates that the protocol family is not supported.\nWSAEAFNOSUPPORT\tIndicates that the address family is not supported.\nWSAEADDRINUSE\tIndicates that the network address is already in", "doc_id": "72181837-a318-4836-a858-e6a66531044a", "embedding": null, "doc_hash": "42c1abd81c5ad9f2fba12905bc38b2d4243e15e14ef204037f4fd4447bcf7af3", "extra_info": null, "node_info": {"start": 1903041, "end": 1906555}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d3eba34d-5696-4d59-80cb-f04b1f571be1", "3": "e257371f-bf32-446c-b109-ac29ad0a509a"}}, "__type__": "1"}, "e257371f-bf32-446c-b109-ac29ad0a509a": {"__data__": {"text": "resource is not a socket.\nWSAEDESTADDRREQ\tIndicates that a destination address is required.\nWSAEMSGSIZE\tIndicates that the message size is too long.\nWSAEPROTOTYPE\tIndicates the wrong protocol type for the socket.\nWSAENOPROTOOPT\tIndicates a bad protocol option.\nWSAEPROTONOSUPPORT\tIndicates that the protocol is not supported.\nWSAESOCKTNOSUPPORT\tIndicates that the socket type is not supported.\nWSAEOPNOTSUPP\tIndicates that the operation is not supported.\nWSAEPFNOSUPPORT\tIndicates that the protocol family is not supported.\nWSAEAFNOSUPPORT\tIndicates that the address family is not supported.\nWSAEADDRINUSE\tIndicates that the network address is already in use.\nWSAEADDRNOTAVAIL\tIndicates that the network address is not available.\nWSAENETDOWN\tIndicates that the network is down.\nWSAENETUNREACH\tIndicates that the network is unreachable.\nWSAENETRESET\tIndicates that the network connection has been reset.\nWSAECONNABORTED\tIndicates that the connection has been aborted.\nWSAECONNRESET\tIndicates that the connection has been reset by the peer.\nWSAENOBUFS\tIndicates that there is no buffer space available.\nWSAEISCONN\tIndicates that the socket is already connected.\nWSAENOTCONN\tIndicates that the socket is not connected.\nWSAESHUTDOWN\tIndicates that data cannot be sent after the socket has been shutdown.\nWSAETOOMANYREFS\tIndicates that there are too many references.\nWSAETIMEDOUT\tIndicates that the connection has timed out.\nWSAECONNREFUSED\tIndicates that the connection has been refused.\nWSAELOOP\tIndicates that a name cannot be translated.\nWSAENAMETOOLONG\tIndicates that a name was too long.\nWSAEHOSTDOWN\tIndicates that a network host is down.\nWSAEHOSTUNREACH\tIndicates that there is no route to a network host.\nWSAENOTEMPTY\tIndicates that the directory is not empty.\nWSAEPROCLIM\tIndicates that there are too many processes.\nWSAEUSERS\tIndicates that the user quota has been exceeded.\nWSAEDQUOT\tIndicates that the disk quota has been exceeded.\nWSAESTALE\tIndicates a stale file handle reference.\nWSAEREMOTE\tIndicates that the item is remote.\nWSASYSNOTREADY\tIndicates that the network subsystem is not ready.\nWSAVERNOTSUPPORTED\tIndicates that the winsock.dll version is out of range.\nWSANOTINITIALISED\tIndicates that successful WSAStartup has not yet been performed.\nWSAEDISCON\tIndicates that a graceful shutdown is in progress.\nWSAENOMORE\tIndicates that there are no more results.\nWSAECANCELLED\tIndicates that an operation has been canceled.\nWSAEINVALIDPROCTABLE\tIndicates that the procedure call table is invalid.\nWSAEINVALIDPROVIDER\tIndicates an invalid service provider.\nWSAEPROVIDERFAILEDINIT\tIndicates that the service provider failed to initialized.\nWSASYSCALLFAILURE\tIndicates a system call failure.\nWSASERVICE_NOT_FOUND\tIndicates that a service was not found.\nWSATYPE_NOT_FOUND\tIndicates that a class type was not found.\nWSA_E_NO_MORE\tIndicates that there are no more results.\nWSA_E_CANCELLED\tIndicates that the call was canceled.\nWSAEREFUSED\tIndicates that a database query was refused.\ndlopen constants#\nIf available on the operating system, the following constants are exported in os.constants.dlopen. See dlopen(3) for detailed information.\n\nConstant\tDescription\nRTLD_LAZY\tPerform lazy binding. Node.js sets this flag by default.\nRTLD_NOW\tResolve all undefined symbols in the library before", "doc_id": "e257371f-bf32-446c-b109-ac29ad0a509a", "embedding": null, "doc_hash": "ff970f4cc84f2e1241cf88954463536f9117d3a0a2f211de0a5b112420f4564d", "extra_info": null, "node_info": {"start": 1906582, "end": 1909879}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "72181837-a318-4836-a858-e6a66531044a", "3": "f5d7a85d-03ba-45f5-a5ba-8984bf316199"}}, "__type__": "1"}, "f5d7a85d-03ba-45f5-a5ba-8984bf316199": {"__data__": {"text": "a system call failure.\nWSASERVICE_NOT_FOUND\tIndicates that a service was not found.\nWSATYPE_NOT_FOUND\tIndicates that a class type was not found.\nWSA_E_NO_MORE\tIndicates that there are no more results.\nWSA_E_CANCELLED\tIndicates that the call was canceled.\nWSAEREFUSED\tIndicates that a database query was refused.\ndlopen constants#\nIf available on the operating system, the following constants are exported in os.constants.dlopen. See dlopen(3) for detailed information.\n\nConstant\tDescription\nRTLD_LAZY\tPerform lazy binding. Node.js sets this flag by default.\nRTLD_NOW\tResolve all undefined symbols in the library before dlopen(3) returns.\nRTLD_GLOBAL\tSymbols defined by the library will be made available for symbol resolution of subsequently loaded libraries.\nRTLD_LOCAL\tThe converse of RTLD_GLOBAL. This is the default behavior if neither flag is specified.\nRTLD_DEEPBIND\tMake a self-contained library use its own symbols in preference to symbols from previously loaded libraries.\nPriority constants#\nAdded in: v10.10.0\nThe following process scheduling constants are exported by os.constants.priority.\n\nConstant\tDescription\nPRIORITY_LOW\tThe lowest process scheduling priority. This corresponds to IDLE_PRIORITY_CLASS on Windows, and a nice value of 19 on all other platforms.\nPRIORITY_BELOW_NORMAL\tThe process scheduling priority above PRIORITY_LOW and below PRIORITY_NORMAL. This corresponds to BELOW_NORMAL_PRIORITY_CLASS on Windows, and a nice value of 10 on all other platforms.\nPRIORITY_NORMAL\tThe default process scheduling priority. This corresponds to NORMAL_PRIORITY_CLASS on Windows, and a nice value of 0 on all other platforms.\nPRIORITY_ABOVE_NORMAL\tThe process scheduling priority above PRIORITY_NORMAL and below PRIORITY_HIGH. This corresponds to ABOVE_NORMAL_PRIORITY_CLASS on Windows, and a nice value of -7 on all other platforms.\nPRIORITY_HIGH\tThe process scheduling priority above PRIORITY_ABOVE_NORMAL and below PRIORITY_HIGHEST. This corresponds to HIGH_PRIORITY_CLASS on Windows, and a nice value of -14 on all other platforms.\nPRIORITY_HIGHEST\tThe highest process scheduling priority. This corresponds to REALTIME_PRIORITY_CLASS on Windows, and a nice value of -20 on all other platforms.\nlibuv constants#\nConstant\tDescription\nUV_UDP_REUSEADDR\t\nPath#\nStability: 2 - Stable\nSource Code: lib/path.js\n\nThe node:path module provides utilities for working with file and directory paths. It can be accessed using:\n\nconst path = require('node:path');\nWindows vs. POSIX#\nThe default operation of the node:path module varies based on the operating system on which a Node.js application is running. Specifically, when running on a Windows operating system, the node:path module will assume that Windows-style paths are being used.\n\nSo using path.basename() might yield different results on POSIX and Windows:\n\nOn POSIX:\n\npath.basename('C:\\\\temp\\\\myfile.html');\n// Returns: 'C:\\\\temp\\\\myfile.html'\nOn Windows:\n\npath.basename('C:\\\\temp\\\\myfile.html');\n// Returns: 'myfile.html'\nTo achieve consistent results when working with Windows file paths on any operating system, use path.win32:\n\nOn POSIX and Windows:\n\npath.win32.basename('C:\\\\temp\\\\myfile.html');\n// Returns: 'myfile.html'\nTo achieve consistent results when working with POSIX file paths on any operating system, use path.posix:\n\nOn POSIX and", "doc_id": "f5d7a85d-03ba-45f5-a5ba-8984bf316199", "embedding": null, "doc_hash": "6753e9efd10698ff75eed171b2a9fb99c156ddefe6addad761cbf041f2d3de51", "extra_info": null, "node_info": {"start": 1909914, "end": 1913227}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e257371f-bf32-446c-b109-ac29ad0a509a", "3": "96bf16f9-f61f-4a71-ad58-aa1ec8ddcac0"}}, "__type__": "1"}, "96bf16f9-f61f-4a71-ad58-aa1ec8ddcac0": {"__data__": {"text": "module will assume that Windows-style paths are being used.\n\nSo using path.basename() might yield different results on POSIX and Windows:\n\nOn POSIX:\n\npath.basename('C:\\\\temp\\\\myfile.html');\n// Returns: 'C:\\\\temp\\\\myfile.html'\nOn Windows:\n\npath.basename('C:\\\\temp\\\\myfile.html');\n// Returns: 'myfile.html'\nTo achieve consistent results when working with Windows file paths on any operating system, use path.win32:\n\nOn POSIX and Windows:\n\npath.win32.basename('C:\\\\temp\\\\myfile.html');\n// Returns: 'myfile.html'\nTo achieve consistent results when working with POSIX file paths on any operating system, use path.posix:\n\nOn POSIX and Windows:\n\npath.posix.basename('/tmp/myfile.html');\n// Returns: 'myfile.html'\nOn Windows Node.js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example, path.resolve('C:\\\\') can potentially return a different result than path.resolve('C:'). For more information, see this MSDN page.\n\npath.basename(path[, suffix])#\nHistory\npath <string>\nsuffix <string> An optional suffix to remove\nReturns: <string>\nThe path.basename() method returns the last portion of a path, similar to the Unix basename command. Trailing directory separators are ignored.\n\npath.basename('/foo/bar/baz/asdf/quux.html');\n// Returns: 'quux.html'\n\npath.basename('/foo/bar/baz/asdf/quux.html', '.html');\n// Returns: 'quux'\nAlthough Windows usually treats file names, including file extensions, in a case-insensitive manner, this function does not. For example, C:\\\\foo.html and C:\\\\foo.HTML refer to the same file, but basename treats the extension as a case-sensitive string:\n\npath.win32.basename('C:\\\\foo.html', '.html');\n// Returns: 'foo'\n\npath.win32.basename('C:\\\\foo.HTML', '.html');\n// Returns: 'foo.HTML'\nA TypeError is thrown if path is not a string or if suffix is given and is not a string.\n\npath.delimiter#\nAdded in: v0.9.3\n<string>\nProvides the platform-specific path delimiter:\n\n; for Windows\n: for POSIX\nFor example, on POSIX:\n\nconsole.log(process.env.PATH);\n// Prints: '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin'\n\nprocess.env.PATH.split(path.delimiter);\n// Returns: ['/usr/bin', '/bin', '/usr/sbin', '/sbin', '/usr/local/bin']\nOn Windows:\n\nconsole.log(process.env.PATH);\n// Prints: 'C:\\Windows\\system32;C:\\Windows;C:\\Program Files\\node\\'\n\nprocess.env.PATH.split(path.delimiter);\n// Returns ['C:\\\\Windows\\\\system32', 'C:\\\\Windows', 'C:\\\\Program Files\\\\node\\\\']\npath.dirname(path)#\nHistory\npath <string>\nReturns: <string>\nThe path.dirname() method returns the directory name of a path, similar to the Unix dirname command. Trailing directory separators are ignored, see path.sep.\n\npath.dirname('/foo/bar/baz/asdf/quux');\n// Returns: '/foo/bar/baz/asdf'\nA TypeError is thrown if path is not a string.\n\npath.extname(path)#\nHistory\npath <string>\nReturns: <string>\nThe path.extname() method returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last portion of the path. If there is no . in the last portion of the path, or if there are no . characters other than the first character of the basename of path (see", "doc_id": "96bf16f9-f61f-4a71-ad58-aa1ec8ddcac0", "embedding": null, "doc_hash": "c45a8304f175dfbd3559ac75224af970cf0a5898405ed9f42aebf29f9eab112d", "extra_info": null, "node_info": {"start": 1913213, "end": 1916374}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f5d7a85d-03ba-45f5-a5ba-8984bf316199", "3": "9732105c-d098-4c3c-8e79-ca7d71048626"}}, "__type__": "1"}, "9732105c-d098-4c3c-8e79-ca7d71048626": {"__data__": {"text": "<string>\nReturns: <string>\nThe path.dirname() method returns the directory name of a path, similar to the Unix dirname command. Trailing directory separators are ignored, see path.sep.\n\npath.dirname('/foo/bar/baz/asdf/quux');\n// Returns: '/foo/bar/baz/asdf'\nA TypeError is thrown if path is not a string.\n\npath.extname(path)#\nHistory\npath <string>\nReturns: <string>\nThe path.extname() method returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last portion of the path. If there is no . in the last portion of the path, or if there are no . characters other than the first character of the basename of path (see path.basename()) , an empty string is returned.\n\npath.extname('index.html');\n// Returns: '.html'\n\npath.extname('index.coffee.md');\n// Returns: '.md'\n\npath.extname('index.');\n// Returns: '.'\n\npath.extname('index');\n// Returns: ''\n\npath.extname('.index');\n// Returns: ''\n\npath.extname('.index.md');\n// Returns: '.md'\nA TypeError is thrown if path is not a string.\n\npath.format(pathObject)#\nAdded in: v0.11.15\npathObject <Object> Any JavaScript object having the following properties:\ndir <string>\nroot <string>\nbase <string>\nname <string>\next <string>\nReturns: <string>\nThe path.format() method returns a path string from an object. This is the opposite of path.parse().\n\nWhen providing properties to the pathObject remember that there are combinations where one property has priority over another:\n\npathObject.root is ignored if pathObject.dir is provided\npathObject.ext and pathObject.name are ignored if pathObject.base exists\nFor example, on POSIX:\n\n// If `dir`, `root` and `base` are provided,\n// `${dir}${path.sep}${base}`\n// will be returned. `root` is ignored.\npath.format({\n  root: '/ignored',\n  dir: '/home/user/dir',\n  base: 'file.txt',\n});\n// Returns: '/home/user/dir/file.txt'\n\n// `root` will be used if `dir` is not specified.\n// If only `root` is provided or `dir` is equal to `root` then the\n// platform separator will not be included. `ext` will be ignored.\npath.format({\n  root: '/',\n  base: 'file.txt',\n  ext: 'ignored',\n});\n// Returns: '/file.txt'\n\n// `name` + `ext` will be used if `base` is not specified.\npath.format({\n  root: '/',\n  name: 'file',\n  ext: '.txt',\n});\n// Returns: '/file.txt'\nOn Windows:\n\npath.format({\n  dir: 'C:\\\\path\\\\dir',\n  base: 'file.txt',\n});\n// Returns: 'C:\\\\path\\\\dir\\\\file.txt'\npath.isAbsolute(path)#\nAdded in: v0.11.2\npath <string>\nReturns: <boolean>\nThe path.isAbsolute() method determines if path is an absolute path.\n\nIf the given path is a zero-length string, false will be returned.\n\nFor example, on POSIX:\n\npath.isAbsolute('/foo/bar'); // true\npath.isAbsolute('/baz/..');  // true\npath.isAbsolute('qux/');     // false\npath.isAbsolute('.');        // false\nOn Windows:\n\npath.isAbsolute('//server');    // true\npath.isAbsolute('\\\\\\\\server');  // true\npath.isAbsolute('C:/foo/..');   // true\npath.isAbsolute('C:\\\\foo\\\\..'); // true\npath.isAbsolute('bar\\\\baz');    //", "doc_id": "9732105c-d098-4c3c-8e79-ca7d71048626", "embedding": null, "doc_hash": "1e231e9e0210a19d57c80faf00d796b43f4ed9a9915d752c59a36384bfd15a26", "extra_info": null, "node_info": {"start": 1916365, "end": 1919355}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "96bf16f9-f61f-4a71-ad58-aa1ec8ddcac0", "3": "1a6ceb15-6dac-4bd5-a64f-1c9592654a76"}}, "__type__": "1"}, "1a6ceb15-6dac-4bd5-a64f-1c9592654a76": {"__data__": {"text": "<boolean>\nThe path.isAbsolute() method determines if path is an absolute path.\n\nIf the given path is a zero-length string, false will be returned.\n\nFor example, on POSIX:\n\npath.isAbsolute('/foo/bar'); // true\npath.isAbsolute('/baz/..');  // true\npath.isAbsolute('qux/');     // false\npath.isAbsolute('.');        // false\nOn Windows:\n\npath.isAbsolute('//server');    // true\npath.isAbsolute('\\\\\\\\server');  // true\npath.isAbsolute('C:/foo/..');   // true\npath.isAbsolute('C:\\\\foo\\\\..'); // true\npath.isAbsolute('bar\\\\baz');    // false\npath.isAbsolute('bar/baz');     // false\npath.isAbsolute('.');           // false\nA TypeError is thrown if path is not a string.\n\npath.join([...paths])#\nAdded in: v0.1.16\n...paths <string> A sequence of path segments\nReturns: <string>\nThe path.join() method joins all given path segments together using the platform-specific separator as a delimiter, then normalizes the resulting path.\n\nZero-length path segments are ignored. If the joined path string is a zero-length string then '.' will be returned, representing the current working directory.\n\npath.join('/foo', 'bar', 'baz/asdf', 'quux', '..');\n// Returns: '/foo/bar/baz/asdf'\n\npath.join('foo', {}, 'bar');\n// Throws 'TypeError: Path must be a string. Received {}'\nA TypeError is thrown if any of the path segments is not a string.\n\npath.normalize(path)#\nAdded in: v0.1.23\npath <string>\nReturns: <string>\nThe path.normalize() method normalizes the given path, resolving '..' and '.' segments.\n\nWhen multiple, sequential path segment separation characters are found (e.g. / on POSIX and either \\ or / on Windows), they are replaced by a single instance of the platform-specific path segment separator (/ on POSIX and \\ on Windows). Trailing separators are preserved.\n\nIf the path is a zero-length string, '.' is returned, representing the current working directory.\n\nFor example, on POSIX:\n\npath.normalize('/foo/bar//baz/asdf/quux/..');\n// Returns: '/foo/bar/baz/asdf'\nOn Windows:\n\npath.normalize('C:\\\\temp\\\\\\\\foo\\\\bar\\\\..\\\\');\n// Returns: 'C:\\\\temp\\\\foo\\\\'\nSince Windows recognizes multiple path separators, both separators will be replaced by instances of the Windows preferred separator (\\):\n\npath.win32.normalize('C:////temp\\\\\\\\/\\\\/\\\\/foo/bar');\n// Returns: 'C:\\\\temp\\\\foo\\\\bar'\nA TypeError is thrown if path is not a string.\n\npath.parse(path)#\nAdded in: v0.11.15\npath <string>\nReturns: <Object>\nThe path.parse() method returns an object whose properties represent significant elements of the path. Trailing directory separators are ignored, see path.sep.\n\nThe returned object will have the following properties:\n\ndir <string>\nroot <string>\nbase <string>\nname <string>\next <string>\nFor example, on POSIX:\n\npath.parse('/home/user/dir/file.txt');\n// Returns:\n// { root: '/',\n//   dir: '/home/user/dir',\n//   base: 'file.txt',\n//   ext: '.txt',\n//   name: 'file' }\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          dir        \u2502    base    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c             ", "doc_id": "1a6ceb15-6dac-4bd5-a64f-1c9592654a76", "embedding": null, "doc_hash": "2e919eea3d2b896cda8c52b4b7fac47dbeff96a407bc1217e7bae57b0f6e54b6", "extra_info": null, "node_info": {"start": 1919466, "end": 1922418}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9732105c-d098-4c3c-8e79-ca7d71048626", "3": "d9dd1bca-2320-44f6-9c52-d88cfe1f2d57"}}, "__type__": "1"}, "d9dd1bca-2320-44f6-9c52-d88cfe1f2d57": {"__data__": {"text": "the path. Trailing directory separators are ignored, see path.sep.\n\nThe returned object will have the following properties:\n\ndir <string>\nroot <string>\nbase <string>\nname <string>\next <string>\nFor example, on POSIX:\n\npath.parse('/home/user/dir/file.txt');\n// Returns:\n// { root: '/',\n//   dir: '/home/user/dir',\n//   base: 'file.txt',\n//   ext: '.txt',\n//   name: 'file' }\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          dir        \u2502    base    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 root \u2502              \u2502 name \u2502 ext \u2502\n\"  /    home/user/dir / file  .txt \"\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n(All spaces in the \"\" line should be ignored. They are purely for formatting.)\nOn Windows:\n\npath.parse('C:\\\\path\\\\dir\\\\file.txt');\n// Returns:\n// { root: 'C:\\\\',\n//   dir: 'C:\\\\path\\\\dir',\n//   base: 'file.txt',\n//   ext: '.txt',\n//   name: 'file' }\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          dir        \u2502    base    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 root \u2502              \u2502 name \u2502 ext \u2502\n\" C:\\      path\\dir   \\ file  .txt \"\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n(All spaces in the \"\" line should be ignored. They are purely for formatting.)\nA TypeError is thrown if path is not a string.\n\npath.posix#\nHistory\n<Object>\nThe path.posix property provides access to POSIX specific implementations of the path methods.\n\nThe API is accessible via require('node:path').posix or require('node:path/posix').\n\npath.relative(from, to)#\nHistory\nfrom <string>\nto <string>\nReturns: <string>\nThe path.relative() method returns the relative path from from to to based on the current working directory. If from and to each resolve to the same path (after calling path.resolve() on each), a zero-length string is returned.\n\nIf a zero-length string is passed as from or to, the current working directory will be used instead of the zero-length strings.\n\nFor example, on POSIX:\n\npath.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb');\n// Returns: '../../impl/bbb'\nOn Windows:\n\npath.relative('C:\\\\orandea\\\\test\\\\aaa', 'C:\\\\orandea\\\\impl\\\\bbb');\n// Returns: '..\\\\..\\\\impl\\\\bbb'\nA TypeError is thrown if either from or to is not a string.\n\npath.resolve([...paths])#\nAdded in: v0.3.4\n...paths <string> A sequence of paths or path segments\nReturns: <string>\nThe path.resolve() method resolves a sequence of paths or path segments into an absolute path.\n\nThe given sequence of paths is processed from right to left, with each subsequent path prepended until an absolute path is constructed. For instance, given the sequence of path segments: /foo, /bar, baz, calling path.resolve('/foo', '/bar', 'baz') would return /bar/baz because 'baz' is not an absolute path but '/bar' + '/' + 'baz' is.\n\nIf, after processing all given path segments, an absolute path", "doc_id": "d9dd1bca-2320-44f6-9c52-d88cfe1f2d57", "embedding": null, "doc_hash": "ef0527fe1f1d2ea9849758962d364e8b2dcea745dc1bab85164dbfee6d681fa2", "extra_info": null, "node_info": {"start": 1922501, "end": 1925245}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1a6ceb15-6dac-4bd5-a64f-1c9592654a76", "3": "a1c0ccdb-5f85-4785-a740-5dcec8df9b7e"}}, "__type__": "1"}, "a1c0ccdb-5f85-4785-a740-5dcec8df9b7e": {"__data__": {"text": "TypeError is thrown if either from or to is not a string.\n\npath.resolve([...paths])#\nAdded in: v0.3.4\n...paths <string> A sequence of paths or path segments\nReturns: <string>\nThe path.resolve() method resolves a sequence of paths or path segments into an absolute path.\n\nThe given sequence of paths is processed from right to left, with each subsequent path prepended until an absolute path is constructed. For instance, given the sequence of path segments: /foo, /bar, baz, calling path.resolve('/foo', '/bar', 'baz') would return /bar/baz because 'baz' is not an absolute path but '/bar' + '/' + 'baz' is.\n\nIf, after processing all given path segments, an absolute path has not yet been generated, the current working directory is used.\n\nThe resulting path is normalized and trailing slashes are removed unless the path is resolved to the root directory.\n\nZero-length path segments are ignored.\n\nIf no path segments are passed, path.resolve() will return the absolute path of the current working directory.\n\npath.resolve('/foo/bar', './baz');\n// Returns: '/foo/bar/baz'\n\npath.resolve('/foo/bar', '/tmp/file/');\n// Returns: '/tmp/file'\n\npath.resolve('wwwroot', 'static_files/png/', '../gif/image.gif');\n// If the current working directory is /home/myself/node,\n// this returns '/home/myself/node/wwwroot/static_files/gif/image.gif'\nA TypeError is thrown if any of the arguments is not a string.\n\npath.sep#\nAdded in: v0.7.9\n<string>\nProvides the platform-specific path segment separator:\n\n\\ on Windows\n/ on POSIX\nFor example, on POSIX:\n\n'foo/bar/baz'.split(path.sep);\n// Returns: ['foo', 'bar', 'baz']\nOn Windows:\n\n'foo\\\\bar\\\\baz'.split(path.sep);\n// Returns: ['foo', 'bar', 'baz']\nOn Windows, both the forward slash (/) and backward slash (\\) are accepted as path segment separators; however, the path methods only add backward slashes (\\).\n\npath.toNamespacedPath(path)#\nAdded in: v9.0.0\npath <string>\nReturns: <string>\nOn Windows systems only, returns an equivalent namespace-prefixed path for the given path. If path is not a string, path will be returned without modifications.\n\nThis method is meaningful only on Windows systems. On POSIX systems, the method is non-operational and always returns path without modifications.\n\npath.win32#\nHistory\n<Object>\nThe path.win32 property provides access to Windows-specific implementations of the path methods.\n\nThe API is accessible via require('node:path').win32 or require('node:path/win32').\n\nPerformance measurement APIs#\nStability: 2 - Stable\nSource Code: lib/perf_hooks.js\n\nThis module provides an implementation of a subset of the W3C Web Performance APIs as well as additional APIs for Node.js-specific performance measurements.\n\nNode.js supports the following Web Performance APIs:\n\nHigh Resolution Time\nPerformance Timeline\nUser Timing\nResource Timing\nconst { PerformanceObserver, performance } = require('node:perf_hooks');\n\nconst obs = new PerformanceObserver((items) => {\n  console.log(items.getEntries()[0].duration);\n  performance.clearMarks();\n});\nobs.observe({ type: 'measure' });\nperformance.measure('Start to Now');\n\nperformance.mark('A');\ndoSomeLongRunningProcess(() => {\n  performance.measure('A to Now', 'A');\n\n  performance.mark('B');\n  performance.measure('A to B', 'A', 'B');\n});\nperf_hooks.performance#\nAdded in: v8.5.0\nAn object that can be used to collect performance", "doc_id": "a1c0ccdb-5f85-4785-a740-5dcec8df9b7e", "embedding": null, "doc_hash": "f42135cc3a61736021c3d09f1ee88e6dbc1357c33ca1856ad94d2b516fe09fa7", "extra_info": null, "node_info": {"start": 1925058, "end": 1928399}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d9dd1bca-2320-44f6-9c52-d88cfe1f2d57", "3": "619ea8ee-410f-4aea-8396-e8c417966439"}}, "__type__": "1"}, "619ea8ee-410f-4aea-8396-e8c417966439": {"__data__": {"text": "the following Web Performance APIs:\n\nHigh Resolution Time\nPerformance Timeline\nUser Timing\nResource Timing\nconst { PerformanceObserver, performance } = require('node:perf_hooks');\n\nconst obs = new PerformanceObserver((items) => {\n  console.log(items.getEntries()[0].duration);\n  performance.clearMarks();\n});\nobs.observe({ type: 'measure' });\nperformance.measure('Start to Now');\n\nperformance.mark('A');\ndoSomeLongRunningProcess(() => {\n  performance.measure('A to Now', 'A');\n\n  performance.mark('B');\n  performance.measure('A to B', 'A', 'B');\n});\nperf_hooks.performance#\nAdded in: v8.5.0\nAn object that can be used to collect performance metrics from the current Node.js instance. It is similar to window.performance in browsers.\n\nperformance.clearMarks([name])#\nAdded in: v8.5.0\nname <string>\nIf name is not provided, removes all PerformanceMark objects from the Performance Timeline. If name is provided, removes only the named mark.\n\nperformance.clearMeasures([name])#\nAdded in: v16.7.0\nname <string>\nIf name is not provided, removes all PerformanceMeasure objects from the Performance Timeline. If name is provided, removes only the named measure.\n\nperformance.clearResourceTimings([name])#\nAdded in: v18.2.0\nname <string>\nIf name is not provided, removes all PerformanceResourceTiming objects from the Resource Timeline. If name is provided, removes only the named resource.\n\nperformance.eventLoopUtilization([utilization1[, utilization2]])#\nAdded in: v14.10.0, v12.19.0\nutilization1 <Object> The result of a previous call to eventLoopUtilization().\nutilization2 <Object> The result of a previous call to eventLoopUtilization() prior to utilization1.\nReturns <Object>\nidle <number>\nactive <number>\nutilization <number>\nThe eventLoopUtilization() method returns an object that contains the cumulative duration of time the event loop has been both idle and active as a high resolution milliseconds timer. The utilization value is the calculated Event Loop Utilization (ELU).\n\nIf bootstrapping has not yet finished on the main thread the properties have the value of 0. The ELU is immediately available on Worker threads since bootstrap happens within the event loop.\n\nBoth utilization1 and utilization2 are optional parameters.\n\nIf utilization1 is passed, then the delta between the current call's active and idle times, as well as the corresponding utilization value are calculated and returned (similar to process.hrtime()).\n\nIf utilization1 and utilization2 are both passed, then the delta is calculated between the two arguments. This is a convenience option because, unlike process.hrtime(), calculating the ELU is more complex than a single subtraction.\n\nELU is similar to CPU utilization, except that it only measures event loop statistics and not CPU usage. It represents the percentage of time the event loop has spent outside the event loop's event provider (e.g. epoll_wait). No other CPU idle time is taken into consideration. The following is an example of how a mostly idle process will have a high ELU.\n\n'use strict';\nconst { eventLoopUtilization } = require('node:perf_hooks').performance;\nconst { spawnSync } = require('node:child_process');\n\nsetImmediate(() => {\n  const elu = eventLoopUtilization();\n  spawnSync('sleep', ['5']);\n  console.log(eventLoopUtilization(elu).utilization);\n});\nAlthough the CPU is mostly idle while running this script, the value of utilization is 1. This is because the call to child_process.spawnSync() blocks the event loop from proceeding.\n\nPassing in a user-defined object instead of the result of a previous call to eventLoopUtilization() will lead to undefined behavior. The return values are not guaranteed to reflect any correct state of the event loop.\n\nperformance.getEntries()#\nAdded", "doc_id": "619ea8ee-410f-4aea-8396-e8c417966439", "embedding": null, "doc_hash": "00f7a758c026ec969f00d8d8b7e5f2665083c2bf2b5045eaf5fc0f69e18435b5", "extra_info": null, "node_info": {"start": 1928388, "end": 1932134}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a1c0ccdb-5f85-4785-a740-5dcec8df9b7e", "3": "b71bb035-5dc1-406c-b96a-2f16f27e555e"}}, "__type__": "1"}, "b71bb035-5dc1-406c-b96a-2f16f27e555e": {"__data__": {"text": "strict';\nconst { eventLoopUtilization } = require('node:perf_hooks').performance;\nconst { spawnSync } = require('node:child_process');\n\nsetImmediate(() => {\n  const elu = eventLoopUtilization();\n  spawnSync('sleep', ['5']);\n  console.log(eventLoopUtilization(elu).utilization);\n});\nAlthough the CPU is mostly idle while running this script, the value of utilization is 1. This is because the call to child_process.spawnSync() blocks the event loop from proceeding.\n\nPassing in a user-defined object instead of the result of a previous call to eventLoopUtilization() will lead to undefined behavior. The return values are not guaranteed to reflect any correct state of the event loop.\n\nperformance.getEntries()#\nAdded in: v16.7.0\nReturns: <PerformanceEntry[]>\nReturns a list of PerformanceEntry objects in chronological order with respect to performanceEntry.startTime. If you are only interested in performance entries of certain types or that have certain names, see performance.getEntriesByType() and performance.getEntriesByName().\n\nperformance.getEntriesByName(name[, type])#\nAdded in: v16.7.0\nname <string>\ntype <string>\nReturns: <PerformanceEntry[]>\nReturns a list of PerformanceEntry objects in chronological order with respect to performanceEntry.startTime whose performanceEntry.name is equal to name, and optionally, whose performanceEntry.entryType is equal to type.\n\nperformance.getEntriesByType(type)#\nAdded in: v16.7.0\ntype <string>\nReturns: <PerformanceEntry[]>\nReturns a list of PerformanceEntry objects in chronological order with respect to performanceEntry.startTime whose performanceEntry.entryType is equal to type.\n\nperformance.mark([name[, options]])#\nHistory\nname <string>\noptions <Object>\ndetail <any> Additional optional detail to include with the mark.\nstartTime <number> An optional timestamp to be used as the mark time. Default: performance.now().\nCreates a new PerformanceMark entry in the Performance Timeline. A PerformanceMark is a subclass of PerformanceEntry whose performanceEntry.entryType is always 'mark', and whose performanceEntry.duration is always 0. Performance marks are used to mark specific significant moments in the Performance Timeline.\n\nThe created PerformanceMark entry is put in the global Performance Timeline and can be queried with performance.getEntries, performance.getEntriesByName, and performance.getEntriesByType. When the observation is performed, the entries should be cleared from the global Performance Timeline manually with performance.clearMarks.\n\nperformance.markResourceTiming(timingInfo, requestedUrl, initiatorType, global, cacheMode)#\nAdded in: v18.2.0\ntimingInfo <Object> Fetch Timing Info\nrequestedUrl <string> The resource url\ninitiatorType <string> The initiator name, e.g: 'fetch'\nglobal <Object>\ncacheMode <string> The cache mode must be an empty string ('') or 'local'\nThis property is an extension by Node.js. It is not available in Web browsers.\n\nCreates a new PerformanceResourceTiming entry in the Resource Timeline. A PerformanceResourceTiming is a subclass of PerformanceEntry whose performanceEntry.entryType is always 'resource'. Performance resources are used to mark moments in the Resource Timeline.\n\nThe created PerformanceMark entry is put in the global Resource Timeline and can be queried with performance.getEntries, performance.getEntriesByName, and performance.getEntriesByType. When the observation is performed, the entries should be cleared from the global Performance Timeline manually with performance.clearResourceTimings.\n\nperformance.measure(name[, startMarkOrOptions[, endMark]])#\nHistory\nname <string>\nstartMarkOrOptions <string> | <Object> Optional.\ndetail <any> Additional optional detail to include with the measure.\nduration <number> Duration between start and end times.\nend <number> | <string> Timestamp to be used as the end time, or a string identifying a previously recorded mark.\nstart <number> | <string> Timestamp to be used as the start time, or a string identifying a previously recorded mark.\nendMark <string> Optional. Must be", "doc_id": "b71bb035-5dc1-406c-b96a-2f16f27e555e", "embedding": null, "doc_hash": "1bab91dd5d4e1c231ed184d0fd32993e6d7612a60ad0db7291e579cabfa9cb5b", "extra_info": null, "node_info": {"start": 1932088, "end": 1936140}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "619ea8ee-410f-4aea-8396-e8c417966439", "3": "d2bd15c4-dd58-494d-aecd-3e6c9b7a7db1"}}, "__type__": "1"}, "d2bd15c4-dd58-494d-aecd-3e6c9b7a7db1": {"__data__": {"text": "and can be queried with performance.getEntries, performance.getEntriesByName, and performance.getEntriesByType. When the observation is performed, the entries should be cleared from the global Performance Timeline manually with performance.clearResourceTimings.\n\nperformance.measure(name[, startMarkOrOptions[, endMark]])#\nHistory\nname <string>\nstartMarkOrOptions <string> | <Object> Optional.\ndetail <any> Additional optional detail to include with the measure.\nduration <number> Duration between start and end times.\nend <number> | <string> Timestamp to be used as the end time, or a string identifying a previously recorded mark.\nstart <number> | <string> Timestamp to be used as the start time, or a string identifying a previously recorded mark.\nendMark <string> Optional. Must be omitted if startMarkOrOptions is an <Object>.\nCreates a new PerformanceMeasure entry in the Performance Timeline. A PerformanceMeasure is a subclass of PerformanceEntry whose performanceEntry.entryType is always 'measure', and whose performanceEntry.duration measures the number of milliseconds elapsed since startMark and endMark.\n\nThe startMark argument may identify any existing PerformanceMark in the Performance Timeline, or may identify any of the timestamp properties provided by the PerformanceNodeTiming class. If the named startMark does not exist, an error is thrown.\n\nThe optional endMark argument must identify any existing PerformanceMark in the Performance Timeline or any of the timestamp properties provided by the PerformanceNodeTiming class. endMark will be performance.now() if no parameter is passed, otherwise if the named endMark does not exist, an error will be thrown.\n\nThe created PerformanceMeasure entry is put in the global Performance Timeline and can be queried with performance.getEntries, performance.getEntriesByName, and performance.getEntriesByType. When the observation is performed, the entries should be cleared from the global Performance Timeline manually with performance.clearMeasures.\n\nperformance.nodeTiming#\nAdded in: v8.5.0\n<PerformanceNodeTiming>\nThis property is an extension by Node.js. It is not available in Web browsers.\n\nAn instance of the PerformanceNodeTiming class that provides performance metrics for specific Node.js operational milestones.\n\nperformance.now()#\nAdded in: v8.5.0\nReturns: <number>\nReturns the current high resolution millisecond timestamp, where 0 represents the start of the current node process.\n\nperformance.setResourceTimingBufferSize(maxSize)#\nAdded in: v18.8.0\nSets the global performance resource timing buffer size to the specified number of \"resource\" type performance entry objects.\n\nBy default the max buffer size is set to 250.\n\nperformance.timeOrigin#\nAdded in: v8.5.0\n<number>\nThe timeOrigin specifies the high resolution millisecond timestamp at which the current node process began, measured in Unix time.\n\nperformance.timerify(fn[, options])#\nHistory\nfn <Function>\noptions <Object>\nhistogram <RecordableHistogram> A histogram object created using perf_hooks.createHistogram() that will record runtime durations in nanoseconds.\nThis property is an extension by Node.js. It is not available in Web browsers.\n\nWraps a function within a new function that measures the running time of the wrapped function. A PerformanceObserver must be subscribed to the 'function' event type in order for the timing details to be accessed.\n\nconst {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\n\nfunction someFunction() {\n  console.log('hello world');\n}\n\nconst wrapped = performance.timerify(someFunction);\n\nconst obs = new PerformanceObserver((list) => {\n  console.log(list.getEntries()[0].duration);\n\n  performance.clearMarks();\n  performance.clearMeasures();\n  obs.disconnect();\n});\nobs.observe({ entryTypes: ['function'] });\n\n// A performance timeline entry will be created\nwrapped();\nIf the wrapped function returns a promise, a finally handler will be attached to the promise and the duration will be reported once the finally handler is", "doc_id": "d2bd15c4-dd58-494d-aecd-3e6c9b7a7db1", "embedding": null, "doc_hash": "1fb19c9f2970530e6dfbaff3e6ad4f7280d887765e2e0849eaec3eed70c3d6c8", "extra_info": null, "node_info": {"start": 1936079, "end": 1940104}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b71bb035-5dc1-406c-b96a-2f16f27e555e", "3": "2f5543de-eeb3-43a8-8aad-e74e49d3d571"}}, "__type__": "1"}, "2f5543de-eeb3-43a8-8aad-e74e49d3d571": {"__data__": {"text": "to the 'function' event type in order for the timing details to be accessed.\n\nconst {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\n\nfunction someFunction() {\n  console.log('hello world');\n}\n\nconst wrapped = performance.timerify(someFunction);\n\nconst obs = new PerformanceObserver((list) => {\n  console.log(list.getEntries()[0].duration);\n\n  performance.clearMarks();\n  performance.clearMeasures();\n  obs.disconnect();\n});\nobs.observe({ entryTypes: ['function'] });\n\n// A performance timeline entry will be created\nwrapped();\nIf the wrapped function returns a promise, a finally handler will be attached to the promise and the duration will be reported once the finally handler is invoked.\n\nperformance.toJSON()#\nAdded in: v16.1.0\nAn object which is JSON representation of the performance object. It is similar to window.performance.toJSON in browsers.\n\nEvent: 'resourcetimingbufferfull'#\nAdded in: v18.8.0\nThe 'resourcetimingbufferfull' event is fired when the global performance resource timing buffer is full. Adjust resource timing buffer size with performance.setResourceTimingBufferSize() or clear the buffer with performance.clearResourceTimings() in the event listener to allow more entries to be added to the performance timeline buffer.\n\nClass: PerformanceEntry#\nAdded in: v8.5.0\nperformanceEntry.detail#\nAdded in: v16.0.0\n<any>\nAdditional detail specific to the entryType.\n\nperformanceEntry.duration#\nAdded in: v8.5.0\n<number>\nThe total number of milliseconds elapsed for this entry. This value will not be meaningful for all Performance Entry types.\n\nperformanceEntry.entryType#\nAdded in: v8.5.0\n<string>\nThe type of the performance entry. It may be one of:\n\n'node' (Node.js only)\n'mark' (available on the Web)\n'measure' (available on the Web)\n'gc' (Node.js only)\n'function' (Node.js only)\n'http2' (Node.js only)\n'http' (Node.js only)\nperformanceEntry.flags#\nHistory\n<number>\nThis property is an extension by Node.js. It is not available in Web browsers.\n\nWhen performanceEntry.entryType is equal to 'gc', the performance.flags property contains additional information about garbage collection operation. The value may be one of:\n\nperf_hooks.constants.NODE_PERFORMANCE_GC_FLAGS_NO\nperf_hooks.constants.NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED\nperf_hooks.constants.NODE_PERFORMANCE_GC_FLAGS_FORCED\nperf_hooks.constants.NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING\nperf_hooks.constants.NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE\nperf_hooks.constants.NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY\nperf_hooks.constants.NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE\nperformanceEntry.name#\nAdded in: v8.5.0\n<string>\nThe name of the performance entry.\n\nperformanceEntry.kind#\nHistory\n<number>\nThis property is an extension by Node.js. It is not available in Web browsers.\n\nWhen performanceEntry.entryType is equal to 'gc', the performance.kind property identifies the type of garbage collection operation that occurred. The value may be one", "doc_id": "2f5543de-eeb3-43a8-8aad-e74e49d3d571", "embedding": null, "doc_hash": "bfc5703877d4b1deefc0e1a7ee93a0a63e60a724c7249380eb0b66f1c5e91795", "extra_info": null, "node_info": {"start": 1940173, "end": 1943157}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d2bd15c4-dd58-494d-aecd-3e6c9b7a7db1", "3": "90ade5d6-bc77-413a-a903-794bbe9cbdcc"}}, "__type__": "1"}, "90ade5d6-bc77-413a-a903-794bbe9cbdcc": {"__data__": {"text": "in: v8.5.0\n<string>\nThe name of the performance entry.\n\nperformanceEntry.kind#\nHistory\n<number>\nThis property is an extension by Node.js. It is not available in Web browsers.\n\nWhen performanceEntry.entryType is equal to 'gc', the performance.kind property identifies the type of garbage collection operation that occurred. The value may be one of:\n\nperf_hooks.constants.NODE_PERFORMANCE_GC_MAJOR\nperf_hooks.constants.NODE_PERFORMANCE_GC_MINOR\nperf_hooks.constants.NODE_PERFORMANCE_GC_INCREMENTAL\nperf_hooks.constants.NODE_PERFORMANCE_GC_WEAKCB\nperformanceEntry.startTime#\nAdded in: v8.5.0\n<number>\nThe high resolution millisecond timestamp marking the starting time of the Performance Entry.\n\nGarbage Collection ('gc') Details#\nWhen performanceEntry.type is equal to 'gc', the performanceEntry.detail property will be an <Object> with two properties:\n\nkind <number> One of:\nperf_hooks.constants.NODE_PERFORMANCE_GC_MAJOR\nperf_hooks.constants.NODE_PERFORMANCE_GC_MINOR\nperf_hooks.constants.NODE_PERFORMANCE_GC_INCREMENTAL\nperf_hooks.constants.NODE_PERFORMANCE_GC_WEAKCB\nflags <number> One of:\nperf_hooks.constants.NODE_PERFORMANCE_GC_FLAGS_NO\nperf_hooks.constants.NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED\nperf_hooks.constants.NODE_PERFORMANCE_GC_FLAGS_FORCED\nperf_hooks.constants.NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING\nperf_hooks.constants.NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE\nperf_hooks.constants.NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY\nperf_hooks.constants.NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE\nHTTP ('http') Details#\nWhen performanceEntry.type is equal to 'http', the performanceEntry.detail property will be an <Object> containing additional information.\n\nIf performanceEntry.name is equal to HttpClient, the detail will contain the following properties: req, res. And the req property will be an <Object> containing method, url, headers, the res property will be an <Object> containing statusCode, statusMessage, headers.\n\nIf performanceEntry.name is equal to HttpRequest, the detail will contain the following properties: req, res. And the req property will be an <Object> containing method, url, headers, the res property will be an <Object> containing statusCode, statusMessage, headers.\n\nThis could add additional memory overhead and should only be used for diagnostic purposes, not left turned on in production by default.\n\nHTTP/2 ('http2') Details#\nWhen performanceEntry.type is equal to 'http2', the performanceEntry.detail property will be an <Object> containing additional performance information.\n\nIf performanceEntry.name is equal to Http2Stream, the detail will contain the following properties:\n\nbytesRead <number> The number of DATA frame bytes received for this Http2Stream.\nbytesWritten <number> The number of DATA frame bytes sent for this Http2Stream.\nid <number> The identifier of the associated Http2Stream\ntimeToFirstByte <number> The number of milliseconds elapsed between the PerformanceEntry startTime and the reception of the first DATA frame.\ntimeToFirstByteSent <number> The number of milliseconds elapsed between the PerformanceEntry startTime and sending of the first DATA frame.\ntimeToFirstHeader <number> The number of milliseconds elapsed between the PerformanceEntry startTime and the reception of the first header.\nIf performanceEntry.name is equal to Http2Session, the detail will contain the following properties:\n\nbytesRead <number> The number of bytes", "doc_id": "90ade5d6-bc77-413a-a903-794bbe9cbdcc", "embedding": null, "doc_hash": "ec619e37c03e567b2bd5a169d48b9931ac0a3b45ce08470dcfceff82a9f269d1", "extra_info": null, "node_info": {"start": 1943482, "end": 1946916}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2f5543de-eeb3-43a8-8aad-e74e49d3d571", "3": "ee3fc4fe-8875-40d2-95ee-0a977aa39b0e"}}, "__type__": "1"}, "ee3fc4fe-8875-40d2-95ee-0a977aa39b0e": {"__data__": {"text": "is equal to Http2Stream, the detail will contain the following properties:\n\nbytesRead <number> The number of DATA frame bytes received for this Http2Stream.\nbytesWritten <number> The number of DATA frame bytes sent for this Http2Stream.\nid <number> The identifier of the associated Http2Stream\ntimeToFirstByte <number> The number of milliseconds elapsed between the PerformanceEntry startTime and the reception of the first DATA frame.\ntimeToFirstByteSent <number> The number of milliseconds elapsed between the PerformanceEntry startTime and sending of the first DATA frame.\ntimeToFirstHeader <number> The number of milliseconds elapsed between the PerformanceEntry startTime and the reception of the first header.\nIf performanceEntry.name is equal to Http2Session, the detail will contain the following properties:\n\nbytesRead <number> The number of bytes received for this Http2Session.\nbytesWritten <number> The number of bytes sent for this Http2Session.\nframesReceived <number> The number of HTTP/2 frames received by the Http2Session.\nframesSent <number> The number of HTTP/2 frames sent by the Http2Session.\nmaxConcurrentStreams <number> The maximum number of streams concurrently open during the lifetime of the Http2Session.\npingRTT <number> The number of milliseconds elapsed since the transmission of a PING frame and the reception of its acknowledgment. Only present if a PING frame has been sent on the Http2Session.\nstreamAverageDuration <number> The average duration (in milliseconds) for all Http2Stream instances.\nstreamCount <number> The number of Http2Stream instances processed by the Http2Session.\ntype <string> Either 'server' or 'client' to identify the type of Http2Session.\nTimerify ('function') Details#\nWhen performanceEntry.type is equal to 'function', the performanceEntry.detail property will be an <Array> listing the input arguments to the timed function.\n\nNet ('net') Details#\nWhen performanceEntry.type is equal to 'net', the performanceEntry.detail property will be an <Object> containing additional information.\n\nIf performanceEntry.name is equal to connect, the detail will contain the following properties: host, port.\n\nDNS ('dns') Details#\nWhen performanceEntry.type is equal to 'dns', the performanceEntry.detail property will be an <Object> containing additional information.\n\nIf performanceEntry.name is equal to lookup, the detail will contain the following properties: hostname, family, hints, verbatim, addresses.\n\nIf performanceEntry.name is equal to lookupService, the detail will contain the following properties: host, port, hostname, service.\n\nIf performanceEntry.name is equal to queryxxx or getHostByAddr, the detail will contain the following properties: host, ttl, result. The value of result is same as the result of queryxxx or getHostByAddr.\n\nClass: PerformanceNodeTiming#\nAdded in: v8.5.0\nExtends: <PerformanceEntry>\nThis property is an extension by Node.js. It is not available in Web browsers.\n\nProvides timing details for Node.js itself. The constructor of this class is not exposed to users.\n\nperformanceNodeTiming.bootstrapComplete#\nAdded in: v8.5.0\n<number>\nThe high resolution millisecond timestamp at which the Node.js process completed bootstrapping. If bootstrapping has not yet finished, the property has the value of -1.\n\nperformanceNodeTiming.environment#\nAdded in: v8.5.0\n<number>\nThe high resolution millisecond timestamp at which the Node.js environment was initialized.\n\nperformanceNodeTiming.idleTime#\nAdded in: v14.10.0, v12.19.0\n<number>\nThe high resolution millisecond timestamp of the amount of time the event loop has been idle within the event loop's event provider (e.g. epoll_wait). This does not take CPU usage into consideration. If the event loop has not yet started (e.g., in the first tick of the main script), the property has the value of 0.\n\nperformanceNodeTiming.loopExit#\nAdded in: v8.5.0\n<number>\nThe high resolution millisecond timestamp at which the Node.js event loop exited. If the", "doc_id": "ee3fc4fe-8875-40d2-95ee-0a977aa39b0e", "embedding": null, "doc_hash": "cbba638b67095c4e41d6dc221e6e5190162014717fca8bd22b127b229cf344a2", "extra_info": null, "node_info": {"start": 1946471, "end": 1950451}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "90ade5d6-bc77-413a-a903-794bbe9cbdcc", "3": "dbeea4da-9ad7-413e-8372-664c85be9626"}}, "__type__": "1"}, "dbeea4da-9ad7-413e-8372-664c85be9626": {"__data__": {"text": "in: v8.5.0\n<number>\nThe high resolution millisecond timestamp at which the Node.js environment was initialized.\n\nperformanceNodeTiming.idleTime#\nAdded in: v14.10.0, v12.19.0\n<number>\nThe high resolution millisecond timestamp of the amount of time the event loop has been idle within the event loop's event provider (e.g. epoll_wait). This does not take CPU usage into consideration. If the event loop has not yet started (e.g., in the first tick of the main script), the property has the value of 0.\n\nperformanceNodeTiming.loopExit#\nAdded in: v8.5.0\n<number>\nThe high resolution millisecond timestamp at which the Node.js event loop exited. If the event loop has not yet exited, the property has the value of -1. It can only have a value of not -1 in a handler of the 'exit' event.\n\nperformanceNodeTiming.loopStart#\nAdded in: v8.5.0\n<number>\nThe high resolution millisecond timestamp at which the Node.js event loop started. If the event loop has not yet started (e.g., in the first tick of the main script), the property has the value of -1.\n\nperformanceNodeTiming.nodeStart#\nAdded in: v8.5.0\n<number>\nThe high resolution millisecond timestamp at which the Node.js process was initialized.\n\nperformanceNodeTiming.v8Start#\nAdded in: v8.5.0\n<number>\nThe high resolution millisecond timestamp at which the V8 platform was initialized.\n\nClass: PerformanceResourceTiming#\nAdded in: v18.2.0\nExtends: <PerformanceEntry>\nProvides detailed network timing data regarding the loading of an application's resources.\n\nThe constructor of this class is not exposed to users directly.\n\nperformanceResourceTiming.workerStart#\nAdded in: v18.2.0\n<number>\nThe high resolution millisecond timestamp at immediately before dispatching the fetch request. If the resource is not intercepted by a worker the property will always return 0.\n\nperformanceResourceTiming.redirectStart#\nAdded in: v18.2.0\n<number>\nThe high resolution millisecond timestamp that represents the start time of the fetch which initiates the redirect.\n\nperformanceResourceTiming.redirectEnd#\nAdded in: v18.2.0\n<number>\nThe high resolution millisecond timestamp that will be created immediately after receiving the last byte of the response of the last redirect.\n\nperformanceResourceTiming.fetchStart#\nAdded in: v18.2.0\n<number>\nThe high resolution millisecond timestamp immediately before the Node.js starts to fetch the resource.\n\nperformanceResourceTiming.domainLookupStart#\nAdded in: v18.2.0\n<number>\nThe high resolution millisecond timestamp immediately before the Node.js starts the domain name lookup for the resource.\n\nperformanceResourceTiming.domainLookupEnd#\nAdded in: v18.2.0\n<number>\nThe high resolution millisecond timestamp representing the time immediately after the Node.js finished the domain name lookup for the resource.\n\nperformanceResourceTiming.connectStart#\nAdded in: v18.2.0\n<number>\nThe high resolution millisecond timestamp representing the time immediately before Node.js starts to establish the connection to the server to retrieve the resource.\n\nperformanceResourceTiming.connectEnd#\nAdded in: v18.2.0\n<number>\nThe high resolution millisecond timestamp representing the time immediately after Node.js finishes establishing the connection to the server to retrieve the resource.\n\nperformanceResourceTiming.secureConnectionStart#\nAdded in: v18.2.0\n<number>\nThe high resolution millisecond timestamp representing the time immediately before Node.js starts the handshake process to secure the current connection.\n\nperformanceResourceTiming.requestStart#\nAdded in: v18.2.0\n<number>\nThe high resolution millisecond timestamp representing the time immediately before Node.js receives the first byte of the response from the server.\n\nperformanceResourceTiming.responseEnd#\nAdded in:", "doc_id": "dbeea4da-9ad7-413e-8372-664c85be9626", "embedding": null, "doc_hash": "2776da962831b57611a6a22e8e117dab1b37ea020fd96796b43ed143f38ff616", "extra_info": null, "node_info": {"start": 1950638, "end": 1954388}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ee3fc4fe-8875-40d2-95ee-0a977aa39b0e", "3": "9464584b-051d-4a38-9883-4688fca3899b"}}, "__type__": "1"}, "9464584b-051d-4a38-9883-4688fca3899b": {"__data__": {"text": "starts to establish the connection to the server to retrieve the resource.\n\nperformanceResourceTiming.connectEnd#\nAdded in: v18.2.0\n<number>\nThe high resolution millisecond timestamp representing the time immediately after Node.js finishes establishing the connection to the server to retrieve the resource.\n\nperformanceResourceTiming.secureConnectionStart#\nAdded in: v18.2.0\n<number>\nThe high resolution millisecond timestamp representing the time immediately before Node.js starts the handshake process to secure the current connection.\n\nperformanceResourceTiming.requestStart#\nAdded in: v18.2.0\n<number>\nThe high resolution millisecond timestamp representing the time immediately before Node.js receives the first byte of the response from the server.\n\nperformanceResourceTiming.responseEnd#\nAdded in: v18.2.0\n<number>\nThe high resolution millisecond timestamp representing the time immediately after Node.js receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first.\n\nperformanceResourceTiming.transferSize#\nAdded in: v18.2.0\n<number>\nA number representing the size (in octets) of the fetched resource. The size includes the response header fields plus the response payload body.\n\nperformanceResourceTiming.encodedBodySize#\nAdded in: v18.2.0\n<number>\nA number representing the size (in octets) received from the fetch (HTTP or cache), of the payload body, before removing any applied content-codings.\n\nperformanceResourceTiming.decodedBodySize#\nAdded in: v18.2.0\n<number>\nA number representing the size (in octets) received from the fetch (HTTP or cache), of the message body, after removing any applied content-codings.\n\nperformanceResourceTiming.toJSON()#\nAdded in: v18.2.0\nReturns a object that is the JSON representation of the PerformanceResourceTiming object\n\nClass: perf_hooks.PerformanceObserver#\nAdded in: v8.5.0\nPerformanceObserver.supportedEntryTypes#\nAdded in: v16.0.0\n<string[]>\nGet supported types.\n\nnew PerformanceObserver(callback)#\nHistory\ncallback <Function>\nlist <PerformanceObserverEntryList>\nobserver <PerformanceObserver>\nPerformanceObserver objects provide notifications when new PerformanceEntry instances have been added to the Performance Timeline.\n\nconst {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\n\nconst obs = new PerformanceObserver((list, observer) => {\n  console.log(list.getEntries());\n\n  performance.clearMarks();\n  performance.clearMeasures();\n  observer.disconnect();\n});\nobs.observe({ entryTypes: ['mark'], buffered: true });\n\nperformance.mark('test');\nBecause PerformanceObserver instances introduce their own additional performance overhead, instances should not be left subscribed to notifications indefinitely. Users should disconnect observers as soon as they are no longer needed.\n\nThe callback is invoked when a PerformanceObserver is notified about new PerformanceEntry instances. The callback receives a PerformanceObserverEntryList instance and a reference to the PerformanceObserver.\n\nperformanceObserver.disconnect()#\nAdded in: v8.5.0\nDisconnects the PerformanceObserver instance from all notifications.\n\nperformanceObserver.observe(options)#\nHistory\noptions <Object>\ntype <string> A single <PerformanceEntry> type. Must not be given if entryTypes is already specified.\nentryTypes <string[]> An array of strings identifying the types of <PerformanceEntry> instances the observer is interested in. If not provided an error will be thrown.\nbuffered <boolean> If true, the observer callback is called with a list global PerformanceEntry buffered entries. If false, only PerformanceEntrys created after the time point are sent to the observer callback. Default: false.\nSubscribes the <PerformanceObserver> instance to notifications of new <PerformanceEntry> instances identified either by options.entryTypes or options.type:\n\nconst {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\n\nconst obs = new", "doc_id": "9464584b-051d-4a38-9883-4688fca3899b", "embedding": null, "doc_hash": "2bc3d28d955607d543d62fd5457556eee9ff111f728ad0cd64614c101a187089", "extra_info": null, "node_info": {"start": 1954225, "end": 1958183}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dbeea4da-9ad7-413e-8372-664c85be9626", "3": "70ad25c9-7437-4038-b802-f9fd91768bb3"}}, "__type__": "1"}, "70ad25c9-7437-4038-b802-f9fd91768bb3": {"__data__": {"text": "<Object>\ntype <string> A single <PerformanceEntry> type. Must not be given if entryTypes is already specified.\nentryTypes <string[]> An array of strings identifying the types of <PerformanceEntry> instances the observer is interested in. If not provided an error will be thrown.\nbuffered <boolean> If true, the observer callback is called with a list global PerformanceEntry buffered entries. If false, only PerformanceEntrys created after the time point are sent to the observer callback. Default: false.\nSubscribes the <PerformanceObserver> instance to notifications of new <PerformanceEntry> instances identified either by options.entryTypes or options.type:\n\nconst {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\n\nconst obs = new PerformanceObserver((list, observer) => {\n  // Called once asynchronously. `list` contains three items.\n});\nobs.observe({ type: 'mark' });\n\nfor (let n = 0; n < 3; n++)\n  performance.mark(`test${n}`);\nClass: PerformanceObserverEntryList#\nAdded in: v8.5.0\nThe PerformanceObserverEntryList class is used to provide access to the PerformanceEntry instances passed to a PerformanceObserver. The constructor of this class is not exposed to users.\n\nperformanceObserverEntryList.getEntries()#\nAdded in: v8.5.0\nReturns: <PerformanceEntry[]>\nReturns a list of PerformanceEntry objects in chronological order with respect to performanceEntry.startTime.\n\nconst {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\n\nconst obs = new PerformanceObserver((perfObserverList, observer) => {\n  console.log(perfObserverList.getEntries());\n  /**\n   * [\n   *   PerformanceEntry {\n   *     name: 'test',\n   *     entryType: 'mark',\n   *     startTime: 81.465639,\n   *     duration: 0\n   *   },\n   *   PerformanceEntry {\n   *     name: 'meow',\n   *     entryType: 'mark',\n   *     startTime: 81.860064,\n   *     duration: 0\n   *   }\n   * ]\n   */\n\n  performance.clearMarks();\n  performance.clearMeasures();\n  observer.disconnect();\n});\nobs.observe({ type: 'mark' });\n\nperformance.mark('test');\nperformance.mark('meow');\nperformanceObserverEntryList.getEntriesByName(name[, type])#\nAdded in: v8.5.0\nname <string>\ntype <string>\nReturns: <PerformanceEntry[]>\nReturns a list of PerformanceEntry objects in chronological order with respect to performanceEntry.startTime whose performanceEntry.name is equal to name, and optionally, whose performanceEntry.entryType is equal to type.\n\nconst {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\n\nconst obs = new PerformanceObserver((perfObserverList, observer) => {\n  console.log(perfObserverList.getEntriesByName('meow'));\n  /**\n   * [\n   *   PerformanceEntry {\n   *     name: 'meow',\n   *     entryType: 'mark',\n   *     startTime: 98.545991,\n   *     duration: 0\n   *   }\n   * ]\n   */\n  console.log(perfObserverList.getEntriesByName('nope')); // []\n\n  console.log(perfObserverList.getEntriesByName('test', 'mark'));\n  /**\n   * [\n   *   PerformanceEntry {\n   *     name: 'test',\n   *     entryType: 'mark',\n   *     startTime: 63.518931,\n   *     duration: 0\n   * ", "doc_id": "70ad25c9-7437-4038-b802-f9fd91768bb3", "embedding": null, "doc_hash": "30150940244edf85f4ae93555ad3aee9dd59178295ef662e4069b4b3855d867d", "extra_info": null, "node_info": {"start": 1958248, "end": 1961328}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9464584b-051d-4a38-9883-4688fca3899b", "3": "6decd566-fdd4-4fd7-8d74-4407486c0b6b"}}, "__type__": "1"}, "6decd566-fdd4-4fd7-8d74-4407486c0b6b": {"__data__": {"text": "PerformanceEntry {\n   *     name: 'meow',\n   *     entryType: 'mark',\n   *     startTime: 98.545991,\n   *     duration: 0\n   *   }\n   * ]\n   */\n  console.log(perfObserverList.getEntriesByName('nope')); // []\n\n  console.log(perfObserverList.getEntriesByName('test', 'mark'));\n  /**\n   * [\n   *   PerformanceEntry {\n   *     name: 'test',\n   *     entryType: 'mark',\n   *     startTime: 63.518931,\n   *     duration: 0\n   *   }\n   * ]\n   */\n  console.log(perfObserverList.getEntriesByName('test', 'measure')); // []\n\n  performance.clearMarks();\n  performance.clearMeasures();\n  observer.disconnect();\n});\nobs.observe({ entryTypes: ['mark', 'measure'] });\n\nperformance.mark('test');\nperformance.mark('meow');\nperformanceObserverEntryList.getEntriesByType(type)#\nAdded in: v8.5.0\ntype <string>\nReturns: <PerformanceEntry[]>\nReturns a list of PerformanceEntry objects in chronological order with respect to performanceEntry.startTime whose performanceEntry.entryType is equal to type.\n\nconst {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\n\nconst obs = new PerformanceObserver((perfObserverList, observer) => {\n  console.log(perfObserverList.getEntriesByType('mark'));\n  /**\n   * [\n   *   PerformanceEntry {\n   *     name: 'test',\n   *     entryType: 'mark',\n   *     startTime: 55.897834,\n   *     duration: 0\n   *   },\n   *   PerformanceEntry {\n   *     name: 'meow',\n   *     entryType: 'mark',\n   *     startTime: 56.350146,\n   *     duration: 0\n   *   }\n   * ]\n   */\n  performance.clearMarks();\n  performance.clearMeasures();\n  observer.disconnect();\n});\nobs.observe({ type: 'mark' });\n\nperformance.mark('test');\nperformance.mark('meow');\nperf_hooks.createHistogram([options])#\nAdded in: v15.9.0, v14.18.0\noptions <Object>\nlowest <number> | <bigint> The lowest discernible value. Must be an integer value greater than 0. Default: 1.\nhighest <number> | <bigint> The highest recordable value. Must be an integer value that is equal to or greater than two times lowest. Default: Number.MAX_SAFE_INTEGER.\nfigures <number> The number of accuracy digits. Must be a number between 1 and 5. Default: 3.\nReturns <RecordableHistogram>\nReturns a <RecordableHistogram>.\n\nperf_hooks.monitorEventLoopDelay([options])#\nAdded in: v11.10.0\noptions <Object>\nresolution <number> The sampling rate in milliseconds. Must be greater than zero. Default: 10.\nReturns: <IntervalHistogram>\nThis property is an extension by Node.js. It is not available in Web browsers.\n\nCreates an IntervalHistogram object that samples and reports the event loop delay over time. The delays will be reported in nanoseconds.\n\nUsing a timer to detect approximate event loop delay works because the execution of timers is tied specifically to the lifecycle of the libuv event loop. That is, a delay in the loop will cause a delay in the execution of the timer, and those delays are specifically what this API is intended to detect.\n\nconst { monitorEventLoopDelay } =", "doc_id": "6decd566-fdd4-4fd7-8d74-4407486c0b6b", "embedding": null, "doc_hash": "36d2fe767a2df31e25e441ad9188d0f4e1a6385888049fc87c524a12797efaca", "extra_info": null, "node_info": {"start": 1961679, "end": 1964623}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "70ad25c9-7437-4038-b802-f9fd91768bb3", "3": "fb689884-ed29-4177-b45e-7a0ca060ce90"}}, "__type__": "1"}, "fb689884-ed29-4177-b45e-7a0ca060ce90": {"__data__": {"text": "in: v11.10.0\noptions <Object>\nresolution <number> The sampling rate in milliseconds. Must be greater than zero. Default: 10.\nReturns: <IntervalHistogram>\nThis property is an extension by Node.js. It is not available in Web browsers.\n\nCreates an IntervalHistogram object that samples and reports the event loop delay over time. The delays will be reported in nanoseconds.\n\nUsing a timer to detect approximate event loop delay works because the execution of timers is tied specifically to the lifecycle of the libuv event loop. That is, a delay in the loop will cause a delay in the execution of the timer, and those delays are specifically what this API is intended to detect.\n\nconst { monitorEventLoopDelay } = require('node:perf_hooks');\nconst h = monitorEventLoopDelay({ resolution: 20 });\nh.enable();\n// Do something.\nh.disable();\nconsole.log(h.min);\nconsole.log(h.max);\nconsole.log(h.mean);\nconsole.log(h.stddev);\nconsole.log(h.percentiles);\nconsole.log(h.percentile(50));\nconsole.log(h.percentile(99));\nClass: Histogram#\nAdded in: v11.10.0\nhistogram.count#\nAdded in: v17.4.0, v16.14.0\n<number>\nThe number of samples recorded by the histogram.\n\nhistogram.countBigInt#\nAdded in: v17.4.0, v16.14.0\n<bigint>\nThe number of samples recorded by the histogram.\n\nhistogram.exceeds#\nAdded in: v11.10.0\n<number>\nThe number of times the event loop delay exceeded the maximum 1 hour event loop delay threshold.\n\nhistogram.exceedsBigInt#\nAdded in: v17.4.0, v16.14.0\n<bigint>\nThe number of times the event loop delay exceeded the maximum 1 hour event loop delay threshold.\n\nhistogram.max#\nAdded in: v11.10.0\n<number>\nThe maximum recorded event loop delay.\n\nhistogram.maxBigInt#\nAdded in: v17.4.0, v16.14.0\n<bigint>\nThe maximum recorded event loop delay.\n\nhistogram.mean#\nAdded in: v11.10.0\n<number>\nThe mean of the recorded event loop delays.\n\nhistogram.min#\nAdded in: v11.10.0\n<number>\nThe minimum recorded event loop delay.\n\nhistogram.minBigInt#\nAdded in: v17.4.0, v16.14.0\n<bigint>\nThe minimum recorded event loop delay.\n\nhistogram.percentile(percentile)#\nAdded in: v11.10.0\npercentile <number> A percentile value in the range (0, 100].\nReturns: <number>\nReturns the value at the given percentile.\n\nhistogram.percentileBigInt(percentile)#\nAdded in: v17.4.0, v16.14.0\npercentile <number> A percentile value in the range (0, 100].\nReturns: <bigint>\nReturns the value at the given percentile.\n\nhistogram.percentiles#\nAdded in: v11.10.0\n<Map>\nReturns a Map object detailing the accumulated percentile distribution.\n\nhistogram.percentilesBigInt#\nAdded in: v17.4.0, v16.14.0\n<Map>\nReturns a Map object detailing the accumulated percentile distribution.\n\nhistogram.reset()#\nAdded in: v11.10.0\nResets the collected histogram data.\n\nhistogram.stddev#\nAdded in: v11.10.0\n<number>\nThe standard deviation of the recorded event loop delays.\n\nClass: IntervalHistogram extends Histogram#\nA Histogram that is periodically updated on a given interval.\n\nhistogram.disable()#\nAdded in: v11.10.0\nReturns: <boolean>\nDisables the update interval timer. Returns true if the timer was stopped, false if it was already", "doc_id": "fb689884-ed29-4177-b45e-7a0ca060ce90", "embedding": null, "doc_hash": "cff7d6b7a7438e10e122443af727a0559559de7802f93033b39ac290fe47d1ce", "extra_info": null, "node_info": {"start": 1964333, "end": 1967419}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6decd566-fdd4-4fd7-8d74-4407486c0b6b", "3": "afa7f831-b3c0-4860-92a1-d7484d54b64c"}}, "__type__": "1"}, "afa7f831-b3c0-4860-92a1-d7484d54b64c": {"__data__": {"text": "object detailing the accumulated percentile distribution.\n\nhistogram.percentilesBigInt#\nAdded in: v17.4.0, v16.14.0\n<Map>\nReturns a Map object detailing the accumulated percentile distribution.\n\nhistogram.reset()#\nAdded in: v11.10.0\nResets the collected histogram data.\n\nhistogram.stddev#\nAdded in: v11.10.0\n<number>\nThe standard deviation of the recorded event loop delays.\n\nClass: IntervalHistogram extends Histogram#\nA Histogram that is periodically updated on a given interval.\n\nhistogram.disable()#\nAdded in: v11.10.0\nReturns: <boolean>\nDisables the update interval timer. Returns true if the timer was stopped, false if it was already stopped.\n\nhistogram.enable()#\nAdded in: v11.10.0\nReturns: <boolean>\nEnables the update interval timer. Returns true if the timer was started, false if it was already started.\n\nCloning an IntervalHistogram#\n<IntervalHistogram> instances can be cloned via <MessagePort>. On the receiving end, the histogram is cloned as a plain <Histogram> object that does not implement the enable() and disable() methods.\n\nClass: RecordableHistogram extends Histogram#\nAdded in: v15.9.0, v14.18.0\nhistogram.add(other)#\nAdded in: v17.4.0, v16.14.0\nother <RecordableHistogram>\nAdds the values from other to this histogram.\n\nhistogram.record(val)#\nAdded in: v15.9.0, v14.18.0\nval <number> | <bigint> The amount to record in the histogram.\nhistogram.recordDelta()#\nAdded in: v15.9.0, v14.18.0\nCalculates the amount of time (in nanoseconds) that has passed since the previous call to recordDelta() and records that amount in the histogram.\n\nExamples#\nMeasuring the duration of async operations#\nThe following example uses the Async Hooks and Performance APIs to measure the actual duration of a Timeout operation (including the amount of time it took to execute the callback).\n\n'use strict';\nconst async_hooks = require('node:async_hooks');\nconst {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\n\nconst set = new Set();\nconst hook = async_hooks.createHook({\n  init(id, type) {\n    if (type === 'Timeout') {\n      performance.mark(`Timeout-${id}-Init`);\n      set.add(id);\n    }\n  },\n  destroy(id) {\n    if (set.has(id)) {\n      set.delete(id);\n      performance.mark(`Timeout-${id}-Destroy`);\n      performance.measure(`Timeout-${id}`,\n                          `Timeout-${id}-Init`,\n                          `Timeout-${id}-Destroy`);\n    }\n  },\n});\nhook.enable();\n\nconst obs = new PerformanceObserver((list, observer) => {\n  console.log(list.getEntries()[0]);\n  performance.clearMarks();\n  performance.clearMeasures();\n  observer.disconnect();\n});\nobs.observe({ entryTypes: ['measure'], buffered: true });\n\nsetTimeout(() => {}, 1000);\nMeasuring how long it takes to load dependencies#\nThe following example measures the duration of require() operations to load dependencies:\n\n'use strict';\nconst {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\nconst mod = require('node:module');\n\n// Monkey patch the require function\nmod.Module.prototype.require", "doc_id": "afa7f831-b3c0-4860-92a1-d7484d54b64c", "embedding": null, "doc_hash": "f6c76b9a9c0d19309f120f2ae6d5ed9834e3092dd71dc1b60763af5fa32d04d8", "extra_info": null, "node_info": {"start": 1967446, "end": 1970460}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fb689884-ed29-4177-b45e-7a0ca060ce90", "3": "eda2e308-c2aa-42fc-95fa-1b3ef7477010"}}, "__type__": "1"}, "eda2e308-c2aa-42fc-95fa-1b3ef7477010": {"__data__": {"text": "   }\n  },\n});\nhook.enable();\n\nconst obs = new PerformanceObserver((list, observer) => {\n  console.log(list.getEntries()[0]);\n  performance.clearMarks();\n  performance.clearMeasures();\n  observer.disconnect();\n});\nobs.observe({ entryTypes: ['measure'], buffered: true });\n\nsetTimeout(() => {}, 1000);\nMeasuring how long it takes to load dependencies#\nThe following example measures the duration of require() operations to load dependencies:\n\n'use strict';\nconst {\n  performance,\n  PerformanceObserver,\n} = require('node:perf_hooks');\nconst mod = require('node:module');\n\n// Monkey patch the require function\nmod.Module.prototype.require =\n  performance.timerify(mod.Module.prototype.require);\nrequire = performance.timerify(require);\n\n// Activate the observer\nconst obs = new PerformanceObserver((list) => {\n  const entries = list.getEntries();\n  entries.forEach((entry) => {\n    console.log(`require('${entry[0]}')`, entry.duration);\n  });\n  performance.clearMarks();\n  performance.clearMeasures();\n  obs.disconnect();\n});\nobs.observe({ entryTypes: ['function'], buffered: true });\n\nrequire('some-module');\nMeasuring how long one HTTP round-trip takes#\nThe following example is used to trace the time spent by HTTP client (OutgoingMessage) and HTTP request (IncomingMessage). For HTTP client, it means the time interval between starting the request and receiving the response, and for HTTP request, it means the time interval between receiving the request and sending the response:\n\n'use strict';\nconst { PerformanceObserver } = require('node:perf_hooks');\nconst http = require('node:http');\n\nconst obs = new PerformanceObserver((items) => {\n  items.getEntries().forEach((item) => {\n    console.log(item);\n  });\n});\n\nobs.observe({ entryTypes: ['http'] });\n\nconst PORT = 8080;\n\nhttp.createServer((req, res) => {\n  res.end('ok');\n}).listen(PORT, () => {\n  http.get(`http://127.0.0.1:${PORT}`);\n});\nMeasuring how long the net.connect (only for TCP) takes when the connection is successful#\n'use strict';\nconst { PerformanceObserver } = require('node:perf_hooks');\nconst net = require('node:net');\nconst obs = new PerformanceObserver((items) => {\n  items.getEntries().forEach((item) => {\n    console.log(item);\n  });\n});\nobs.observe({ entryTypes: ['net'] });\nconst PORT = 8080;\nnet.createServer((socket) => {\n  socket.destroy();\n}).listen(PORT, () => {\n  net.connect(PORT);\n});\nMeasuring how long the DNS takes when the request is successful#\n'use strict';\nconst { PerformanceObserver } = require('node:perf_hooks');\nconst dns = require('node:dns');\nconst obs = new PerformanceObserver((items) => {\n  items.getEntries().forEach((item) => {\n    console.log(item);\n  });\n});\nobs.observe({ entryTypes: ['dns'] });\ndns.lookup('localhost', () => {});\ndns.promises.resolve('localhost');\nPermissions#\nPermissions can be used to control what system resources the Node.js process has access to or what actions the process can take with those resources. Permissions can also control what modules can be accessed by other modules.\n\nModule-based permissions control which files or URLs are available to other modules during application execution. This can be used to control what modules can be accessed by third-party dependencies, for example.\nIf you find a potential security vulnerability, please refer to our Security Policy.\n\nModule-based permissions#\nPolicies#\nStability: 1 - Experimental\nNode.js contains experimental support", "doc_id": "eda2e308-c2aa-42fc-95fa-1b3ef7477010", "embedding": null, "doc_hash": "d89fa59315a4381a663bb65b814a6ed6e6b384c95f18888fcb52c806f4b7dd43", "extra_info": null, "node_info": {"start": 1970465, "end": 1973882}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "afa7f831-b3c0-4860-92a1-d7484d54b64c", "3": "b40aab9e-48f2-4a39-b5c4-2b98754eac72"}}, "__type__": "1"}, "b40aab9e-48f2-4a39-b5c4-2b98754eac72": {"__data__": {"text": "=> {\n    console.log(item);\n  });\n});\nobs.observe({ entryTypes: ['dns'] });\ndns.lookup('localhost', () => {});\ndns.promises.resolve('localhost');\nPermissions#\nPermissions can be used to control what system resources the Node.js process has access to or what actions the process can take with those resources. Permissions can also control what modules can be accessed by other modules.\n\nModule-based permissions control which files or URLs are available to other modules during application execution. This can be used to control what modules can be accessed by third-party dependencies, for example.\nIf you find a potential security vulnerability, please refer to our Security Policy.\n\nModule-based permissions#\nPolicies#\nStability: 1 - Experimental\nNode.js contains experimental support for creating policies on loading code.\n\nPolicies are a security feature intended to allow guarantees about what code Node.js is able to load. The use of policies assumes safe practices for the policy files such as ensuring that policy files cannot be overwritten by the Node.js application by using file permissions.\n\nA best practice would be to ensure that the policy manifest is read-only for the running Node.js application and that the file cannot be changed by the running Node.js application in any way. A typical setup would be to create the policy file as a different user id than the one running Node.js and granting read permissions to the user id running Node.js.\n\nEnabling#\nThe --experimental-policy flag can be used to enable features for policies when loading modules.\n\nOnce this has been set, all modules must conform to a policy manifest file passed to the flag:\n\nnode --experimental-policy=policy.json app.js\nThe policy manifest will be used to enforce constraints on code loaded by Node.js.\n\nTo mitigate tampering with policy files on disk, an integrity for the policy file itself may be provided via --policy-integrity. This allows running node and asserting the policy file contents even if the file is changed on disk.\n\nnode --experimental-policy=policy.json --policy-integrity=\"sha384-SggXRQHwCG8g+DktYYzxkXRIkTiEYWBHqev0xnpCxYlqMBufKZHAHQM3/boDaI/0\" app.js\nFeatures#\nError behavior#\nWhen a policy check fails, Node.js by default will throw an error. It is possible to change the error behavior to one of a few possibilities by defining an \"onerror\" field in a policy manifest. The following values are available to change the behavior:\n\n\"exit\": will exit the process immediately. No cleanup code will be allowed to run.\n\"log\": will log the error at the site of the failure.\n\"throw\": will throw a JS error at the site of the failure. This is the default.\n{\n  \"onerror\": \"log\",\n  \"resources\": {\n    \"./app/checked.js\": {\n      \"integrity\": \"sha384-SggXRQHwCG8g+DktYYzxkXRIkTiEYWBHqev0xnpCxYlqMBufKZHAHQM3/boDaI/0\"\n    }\n  }\n}\nIntegrity checks#\nPolicy files must use integrity checks with Subresource Integrity strings compatible with the browser integrity attribute associated with absolute URLs.\n\nWhen using require() or import all resources involved in loading are checked for integrity if a policy manifest has been specified. If a resource does not match the integrity listed in the manifest, an error will be thrown.\n\nAn example policy file that would allow loading a file checked.js:\n\n{\n  \"resources\": {\n    \"./app/checked.js\": {\n      \"integrity\": \"sha384-SggXRQHwCG8g+DktYYzxkXRIkTiEYWBHqev0xnpCxYlqMBufKZHAHQM3/boDaI/0\"\n    }\n  }\n}\nEach resource listed in the policy manifest can be of one the following formats to determine its location:\n\nA", "doc_id": "b40aab9e-48f2-4a39-b5c4-2b98754eac72", "embedding": null, "doc_hash": "768b636db06542a61ff5004f32fd6690a0a7030cc7b60552b71fc2cf37089816", "extra_info": null, "node_info": {"start": 1973768, "end": 1977326}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "eda2e308-c2aa-42fc-95fa-1b3ef7477010", "3": "95f97f3d-15b6-47b4-942e-7178636a3a53"}}, "__type__": "1"}, "95f97f3d-15b6-47b4-942e-7178636a3a53": {"__data__": {"text": "compatible with the browser integrity attribute associated with absolute URLs.\n\nWhen using require() or import all resources involved in loading are checked for integrity if a policy manifest has been specified. If a resource does not match the integrity listed in the manifest, an error will be thrown.\n\nAn example policy file that would allow loading a file checked.js:\n\n{\n  \"resources\": {\n    \"./app/checked.js\": {\n      \"integrity\": \"sha384-SggXRQHwCG8g+DktYYzxkXRIkTiEYWBHqev0xnpCxYlqMBufKZHAHQM3/boDaI/0\"\n    }\n  }\n}\nEach resource listed in the policy manifest can be of one the following formats to determine its location:\n\nA relative-URL string to a resource from the manifest such as ./resource.js, ../resource.js, or /resource.js.\nA complete URL string to a resource such as file:///resource.js.\nWhen loading resources the entire URL must match including search parameters and hash fragment. ./a.js?b will not be used when attempting to load ./a.js and vice versa.\n\nTo generate integrity strings, a script such as node -e 'process.stdout.write(\"sha256-\");process.stdin.pipe(crypto.createHash(\"sha256\").setEncoding(\"base64\")).pipe(process.stdout)' < FILE can be used.\n\nIntegrity can be specified as the boolean value true to accept any body for the resource which can be useful for local development. It is not recommended in production since it would allow unexpected alteration of resources to be considered valid.\n\nDependency redirection#\nAn application may need to ship patched versions of modules or to prevent modules from allowing all modules access to all other modules. Redirection can be used by intercepting attempts to load the modules wishing to be replaced.\n\n{\n  \"resources\": {\n    \"./app/checked.js\": {\n      \"dependencies\": {\n        \"fs\": true,\n        \"os\": \"./app/node_modules/alt-os\",\n        \"http\": { \"import\": true }\n      }\n    }\n  }\n}\nThe dependencies are keyed by the requested specifier string and have values of either true, null, a string pointing to a module to be resolved, or a conditions object.\n\nThe specifier string does not perform any searching and must match exactly what is provided to the require() or import except for a canonicalization step. Therefore, multiple specifiers may be needed in the policy if it uses multiple different strings to point to the same module (such as excluding the extension).\n\nSpecifier strings are canonicalized but not resolved prior to be used for matching in order to have some compatibility with import maps, for example if a resource file:///C:/app/server.js was given the following redirection from a policy located at file:///C:/app/policy.json:\n\n{\n  \"resources\": {\n    \"file:///C:/app/utils.js\": {\n      \"dependencies\": {\n        \"./utils.js\": \"./utils-v2.js\"\n      }\n    }\n  }\n}\nAny specifier used to load file:///C:/app/utils.js would then be intercepted and redirected to file:///C:/app/utils-v2.js instead regardless of using an absolute or relative specifier. However, if a specifier that is not an absolute or relative URL string is used, it would not be intercepted. So, if an import such as import('#utils') was used, it would not be intercepted.\n\nIf the value of the redirection is true, a \"dependencies\" field at the top of the policy file will be used. If that field at the top of the policy file is true the default node searching algorithms are used to find the module.\n\nIf the value of the redirection is a string, it is resolved relative to the manifest and then immediately used without searching.\n\nAny specifier string for which resolution is", "doc_id": "95f97f3d-15b6-47b4-942e-7178636a3a53", "embedding": null, "doc_hash": "809f281b04288e89183d26f8cbe2159d00357cb140a70e27ef636419a2f08952", "extra_info": null, "node_info": {"start": 1977477, "end": 1981023}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b40aab9e-48f2-4a39-b5c4-2b98754eac72", "3": "f899b191-0f8f-4105-8386-9f53dbc68804"}}, "__type__": "1"}, "f899b191-0f8f-4105-8386-9f53dbc68804": {"__data__": {"text": "specifier used to load file:///C:/app/utils.js would then be intercepted and redirected to file:///C:/app/utils-v2.js instead regardless of using an absolute or relative specifier. However, if a specifier that is not an absolute or relative URL string is used, it would not be intercepted. So, if an import such as import('#utils') was used, it would not be intercepted.\n\nIf the value of the redirection is true, a \"dependencies\" field at the top of the policy file will be used. If that field at the top of the policy file is true the default node searching algorithms are used to find the module.\n\nIf the value of the redirection is a string, it is resolved relative to the manifest and then immediately used without searching.\n\nAny specifier string for which resolution is attempted and that is not listed in the dependencies results in an error according to the policy.\n\nRedirection does not prevent access to APIs through means such as direct access to require.cache or through module.constructor which allow access to loading modules. Policy redirection only affects specifiers to require() and import. Other means, such as to prevent undesired access to APIs through variables, are necessary to lock down that path of loading modules.\n\nA boolean value of true for the dependencies map can be specified to allow a module to load any specifier without redirection. This can be useful for local development and may have some valid usage in production, but should be used only with care after auditing a module to ensure its behavior is valid.\n\nSimilar to \"exports\" in package.json, dependencies can also be specified to be objects containing conditions which branch how dependencies are loaded. In the preceding example, \"http\" is allowed when the \"import\" condition is part of loading it.\n\nA value of null for the resolved value causes the resolution to fail. This can be used to ensure some kinds of dynamic access are explicitly prevented.\n\nUnknown values for the resolved module location cause failures but are not guaranteed to be forward compatible.\n\nExample: Patched dependency#\nRedirected dependencies can provide attenuated or modified functionality as fits the application. For example, log data about timing of function durations by wrapping the original:\n\nconst original = require('fn');\nmodule.exports = function fn(...args) {\n  console.time();\n  try {\n    return new.target ?\n      Reflect.construct(original, args) :\n      Reflect.apply(original, this, args);\n  } finally {\n    console.timeEnd();\n  }\n};\nScopes#\nUse the \"scopes\" field of a manifest to set configuration for many resources at once. The \"scopes\" field works by matching resources by their segments. If a scope or resource includes \"cascade\": true, unknown specifiers will be searched for in their containing scope. The containing scope for cascading is found by recursively reducing the resource URL by removing segments for special schemes, keeping trailing \"/\" suffixes, and removing the query and hash fragment. This leads to the eventual reduction of the URL to its origin. If the URL is non-special the scope will be located by the URL's origin. If no scope is found for the origin or in the case of opaque origins, a protocol string can be used as a scope. If no scope is found for the URL's protocol, a final empty string \"\" scope will be used.\n\nNote, blob: URLs adopt their origin from the path they contain, and so a scope of \"blob:https://nodejs.org\" will have no effect since no URL can have an origin of blob:https://nodejs.org; URLs starting with blob:https://nodejs.org/ will use https://nodejs.org for its origin and thus https: for its protocol scope. For opaque origin blob: URLs they will have blob: for their protocol scope since they do not adopt origins.\n\nExample#\n{\n  \"scopes\": {\n    \"file:///C:/app/\": {},\n    \"file:\": {},\n    \"\": {}\n  }\n}\nGiven a file located at", "doc_id": "f899b191-0f8f-4105-8386-9f53dbc68804", "embedding": null, "doc_hash": "6652e2c6f682ada89689f0fcc87bfe18497233d9beab7d484ae02b969053c418", "extra_info": null, "node_info": {"start": 1980912, "end": 1984782}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "95f97f3d-15b6-47b4-942e-7178636a3a53", "3": "09474376-01aa-475e-8b49-2b3ca45d5d42"}}, "__type__": "1"}, "09474376-01aa-475e-8b49-2b3ca45d5d42": {"__data__": {"text": "scope is found for the URL's protocol, a final empty string \"\" scope will be used.\n\nNote, blob: URLs adopt their origin from the path they contain, and so a scope of \"blob:https://nodejs.org\" will have no effect since no URL can have an origin of blob:https://nodejs.org; URLs starting with blob:https://nodejs.org/ will use https://nodejs.org for its origin and thus https: for its protocol scope. For opaque origin blob: URLs they will have blob: for their protocol scope since they do not adopt origins.\n\nExample#\n{\n  \"scopes\": {\n    \"file:///C:/app/\": {},\n    \"file:\": {},\n    \"\": {}\n  }\n}\nGiven a file located at file:///C:/app/bin/main.js, the following scopes would be checked in order:\n\n\"file:///C:/app/bin/\"\nThis determines the policy for all file based resources within \"file:///C:/app/bin/\". This is not in the \"scopes\" field of the policy and would be skipped. Adding this scope to the policy would cause it to be used prior to the \"file:///C:/app/\" scope.\n\n\"file:///C:/app/\"\nThis determines the policy for all file based resources within \"file:///C:/app/\". This is in the \"scopes\" field of the policy and it would determine the policy for the resource at file:///C:/app/bin/main.js. If the scope has \"cascade\": true, any unsatisfied queries about the resource would delegate to the next relevant scope for file:///C:/app/bin/main.js, \"file:\".\n\n\"file:///C:/\"\nThis determines the policy for all file based resources within \"file:///C:/\". This is not in the \"scopes\" field of the policy and would be skipped. It would not be used for file:///C:/app/bin/main.js unless \"file:///\" is set to cascade or is not in the \"scopes\" of the policy.\n\n\"file:///\"\nThis determines the policy for all file based resources on the localhost. This is not in the \"scopes\" field of the policy and would be skipped. It would not be used for file:///C:/app/bin/main.js unless \"file:///\" is set to cascade or is not in the \"scopes\" of the policy.\n\n\"file:\"\nThis determines the policy for all file based resources. It would not be used for file:///C:/app/bin/main.js unless \"file:///\" is set to cascade or is not in the \"scopes\" of the policy.\n\n\"\"\nThis determines the policy for all resources. It would not be used for file:///C:/app/bin/main.js unless \"file:\" is set to cascade.\n\nIntegrity using scopes#\nSetting an integrity to true on a scope will set the integrity for any resource not found in the manifest to true.\n\nSetting an integrity to null on a scope will set the integrity for any resource not found in the manifest to fail matching.\n\nNot including an integrity is the same as setting the integrity to null.\n\n\"cascade\" for integrity checks will be ignored if \"integrity\" is explicitly set.\n\nThe following example allows loading any file:\n\n{\n  \"scopes\": {\n    \"file:\": {\n      \"integrity\": true\n    }\n  }\n}\nDependency redirection using scopes#\nThe following example, would allow access to fs for all resources within ./app/:\n\n{\n  \"resources\": {\n    \"./app/checked.js\": {\n      \"cascade\": true,\n      \"integrity\": true\n    }\n  },\n  \"scopes\": {\n    \"./app/\": {\n      \"dependencies\": {\n        \"fs\": true\n      }\n    }\n  }\n}\nThe following example, would allow access to fs for all data: resources:\n\n{\n  \"resources\": {\n   ", "doc_id": "09474376-01aa-475e-8b49-2b3ca45d5d42", "embedding": null, "doc_hash": "3cccbd7bd7c4cefa0f79290b2ad05bf847203ea76f5de09dc48783102ba1bfa4", "extra_info": null, "node_info": {"start": 1984920, "end": 1988132}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f899b191-0f8f-4105-8386-9f53dbc68804", "3": "b5ca7149-12ba-4859-929c-aa591d20cd45"}}, "__type__": "1"}, "b5ca7149-12ba-4859-929c-aa591d20cd45": {"__data__": {"text": "{\n    \"file:\": {\n      \"integrity\": true\n    }\n  }\n}\nDependency redirection using scopes#\nThe following example, would allow access to fs for all resources within ./app/:\n\n{\n  \"resources\": {\n    \"./app/checked.js\": {\n      \"cascade\": true,\n      \"integrity\": true\n    }\n  },\n  \"scopes\": {\n    \"./app/\": {\n      \"dependencies\": {\n        \"fs\": true\n      }\n    }\n  }\n}\nThe following example, would allow access to fs for all data: resources:\n\n{\n  \"resources\": {\n    \"data:text/javascript,import('node:fs');\": {\n      \"cascade\": true,\n      \"integrity\": true\n    }\n  },\n  \"scopes\": {\n    \"data:\": {\n      \"dependencies\": {\n        \"fs\": true\n      }\n    }\n  }\n}\nExample: import maps emulation#\nGiven an import map:\n\n{\n  \"imports\": {\n    \"react\": \"./app/node_modules/react/index.js\"\n  },\n  \"scopes\": {\n    \"./ssr/\": {\n      \"react\": \"./app/node_modules/server-side-react/index.js\"\n    }\n  }\n}\n{\n  \"dependencies\": true,\n  \"scopes\": {\n    \"\": {\n      \"cascade\": true,\n      \"dependencies\": {\n        \"react\": \"./app/node_modules/react/index.js\"\n      }\n    },\n    \"./ssr/\": {\n      \"cascade\": true,\n      \"dependencies\": {\n        \"react\": \"./app/node_modules/server-side-react/index.js\"\n      }\n    }\n  }\n}\nImport maps assume you can get any resource by default. This means \"dependencies\" at the top level of the policy should be set to true. Policies require this to be opt-in since it enables all resources of the application cross linkage which doesn't make sense for many scenarios. They also assume any given scope has access to any scope above its allowed dependencies; all scopes emulating import maps must set \"cascade\": true.\n\nImport maps only have a single top level scope for their \"imports\". So for emulating \"imports\" use the \"\" scope. For emulating \"scopes\" use the \"scopes\" in a similar manner to how \"scopes\" works in import maps.\n\nCaveats: Policies do not use string matching for various finding of scope. They do URL traversals. This means things like blob: and data: URLs might not be entirely interoperable between the two systems. For example import maps can partially match a data: or blob: URL by partitioning the URL on a / character, policies intentionally cannot. For blob: URLs import map scopes do not adopt the origin of the blob: URL.\n\nAdditionally, import maps only work on import so it may be desirable to add a \"import\" condition to all dependency mappings.\n\nProcess#\nSource Code: lib/process.js\n\nThe process object provides information about, and control over, the current Node.js process.\n\nimport process from 'node:process';\nProcess events#\nThe process object is an instance of EventEmitter.\n\nEvent: 'beforeExit'#\nAdded in: v0.11.12\nThe 'beforeExit' event is emitted when Node.js empties its event loop and has no additional work to schedule. Normally, the Node.js process will exit when there is no work scheduled, but a listener registered on the 'beforeExit' event can make asynchronous calls, and thereby cause the", "doc_id": "b5ca7149-12ba-4859-929c-aa591d20cd45", "embedding": null, "doc_hash": "c8a767038eef331dfee38357cd2ebd598c7d33eded30a8df7da7719fbafd8f8a", "extra_info": null, "node_info": {"start": 1988296, "end": 1991246}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "09474376-01aa-475e-8b49-2b3ca45d5d42", "3": "1663052e-64e8-4645-b7d9-802949fc0d8f"}}, "__type__": "1"}, "1663052e-64e8-4645-b7d9-802949fc0d8f": {"__data__": {"text": "URLs import map scopes do not adopt the origin of the blob: URL.\n\nAdditionally, import maps only work on import so it may be desirable to add a \"import\" condition to all dependency mappings.\n\nProcess#\nSource Code: lib/process.js\n\nThe process object provides information about, and control over, the current Node.js process.\n\nimport process from 'node:process';\nProcess events#\nThe process object is an instance of EventEmitter.\n\nEvent: 'beforeExit'#\nAdded in: v0.11.12\nThe 'beforeExit' event is emitted when Node.js empties its event loop and has no additional work to schedule. Normally, the Node.js process will exit when there is no work scheduled, but a listener registered on the 'beforeExit' event can make asynchronous calls, and thereby cause the Node.js process to continue.\n\nThe listener callback function is invoked with the value of process.exitCode passed as the only argument.\n\nThe 'beforeExit' event is not emitted for conditions causing explicit termination, such as calling process.exit() or uncaught exceptions.\n\nThe 'beforeExit' should not be used as an alternative to the 'exit' event unless the intention is to schedule additional work.\n\nimport process from 'node:process';\n\nprocess.on('beforeExit', (code) => {\n  console.log('Process beforeExit event with code: ', code);\n});\n\nprocess.on('exit', (code) => {\n  console.log('Process exit event with code: ', code);\n});\n\nconsole.log('This message is displayed first.');\n\n// Prints:\n// This message is displayed first.\n// Process beforeExit event with code: 0\n// Process exit event with code: 0\nEvent: 'disconnect'#\nAdded in: v0.7.7\nIf the Node.js process is spawned with an IPC channel (see the Child Process and Cluster documentation), the 'disconnect' event will be emitted when the IPC channel is closed.\n\nEvent: 'exit'#\nAdded in: v0.1.7\ncode <integer>\nThe 'exit' event is emitted when the Node.js process is about to exit as a result of either:\n\nThe process.exit() method being called explicitly;\nThe Node.js event loop no longer having any additional work to perform.\nThere is no way to prevent the exiting of the event loop at this point, and once all 'exit' listeners have finished running the Node.js process will terminate.\n\nThe listener callback function is invoked with the exit code specified either by the process.exitCode property, or the exitCode argument passed to the process.exit() method.\n\nimport process from 'node:process';\n\nprocess.on('exit', (code) => {\n  console.log(`About to exit with code: ${code}`);\n});\nListener functions must only perform synchronous operations. The Node.js process will exit immediately after calling the 'exit' event listeners causing any additional work still queued in the event loop to be abandoned. In the following example, for instance, the timeout will never occur:\n\nimport process from 'node:process';\n\nprocess.on('exit', (code) => {\n  setTimeout(() => {\n    console.log('This will not run');\n  }, 0);\n});\nEvent: 'message'#\nAdded in: v0.5.10\nmessage <Object> | <boolean> | <number> | <string> | <null> a parsed JSON object or a serializable primitive value.\nsendHandle <net.Server> | <net.Socket> a net.Server or net.Socket object, or undefined.\nIf the Node.js process is spawned with an IPC channel (see the Child Process and Cluster documentation), the 'message' event is emitted whenever a message sent by a parent process using childprocess.send() is received by the child process.\n\nThe message goes through serialization and parsing. The resulting message might not be the same as what is originally sent.\n\nIf the serialization option was set to advanced used when spawning the process, the message argument can contain data that JSON is not able to represent. See Advanced serialization for child_process for more details.\n\nEvent:", "doc_id": "1663052e-64e8-4645-b7d9-802949fc0d8f", "embedding": null, "doc_hash": "135dd89c3a0370ec8928917c2b6fb44787bd6d12f30837b754d4600a97fe3c2b", "extra_info": null, "node_info": {"start": 1990948, "end": 1994710}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b5ca7149-12ba-4859-929c-aa591d20cd45", "3": "75587a64-23e4-4877-b206-6405120fce4a"}}, "__type__": "1"}, "75587a64-23e4-4877-b206-6405120fce4a": {"__data__": {"text": "<Object> | <boolean> | <number> | <string> | <null> a parsed JSON object or a serializable primitive value.\nsendHandle <net.Server> | <net.Socket> a net.Server or net.Socket object, or undefined.\nIf the Node.js process is spawned with an IPC channel (see the Child Process and Cluster documentation), the 'message' event is emitted whenever a message sent by a parent process using childprocess.send() is received by the child process.\n\nThe message goes through serialization and parsing. The resulting message might not be the same as what is originally sent.\n\nIf the serialization option was set to advanced used when spawning the process, the message argument can contain data that JSON is not able to represent. See Advanced serialization for child_process for more details.\n\nEvent: 'multipleResolves'#\nAdded in: v10.12.0Deprecated since: v17.6.0\nStability: 0 - Deprecated\ntype <string> The resolution type. One of 'resolve' or 'reject'.\npromise <Promise> The promise that resolved or rejected more than once.\nvalue <any> The value with which the promise was either resolved or rejected after the original resolve.\nThe 'multipleResolves' event is emitted whenever a Promise has been either:\n\nResolved more than once.\nRejected more than once.\nRejected after resolve.\nResolved after reject.\nThis is useful for tracking potential errors in an application while using the Promise constructor, as multiple resolutions are silently swallowed. However, the occurrence of this event does not necessarily indicate an error. For example, Promise.race() can trigger a 'multipleResolves' event.\n\nBecause of the unreliability of the event in cases like the Promise.race() example above it has been deprecated.\n\nimport process from 'node:process';\n\nprocess.on('multipleResolves', (type, promise, reason) => {\n  console.error(type, promise, reason);\n  setImmediate(() => process.exit(1));\n});\n\nasync function main() {\n  try {\n    return await new Promise((resolve, reject) => {\n      resolve('First call');\n      resolve('Swallowed resolve');\n      reject(new Error('Swallowed reject'));\n    });\n  } catch {\n    throw new Error('Failed');\n  }\n}\n\nmain().then(console.log);\n// resolve: Promise { 'First call' } 'Swallowed resolve'\n// reject: Promise { 'First call' } Error: Swallowed reject\n//     at Promise (*)\n//     at new Promise (<anonymous>)\n//     at main (*)\n// First call\nEvent: 'rejectionHandled'#\nAdded in: v1.4.1\npromise <Promise> The late handled promise.\nThe 'rejectionHandled' event is emitted whenever a Promise has been rejected and an error handler was attached to it (using promise.catch(), for example) later than one turn of the Node.js event loop.\n\nThe Promise object would have previously been emitted in an 'unhandledRejection' event, but during the course of processing gained a rejection handler.\n\nThere is no notion of a top level for a Promise chain at which rejections can always be handled. Being inherently asynchronous in nature, a Promise rejection can be handled at a future point in time, possibly much later than the event loop turn it takes for the 'unhandledRejection' event to be emitted.\n\nAnother way of stating this is that, unlike in synchronous code where there is an ever-growing list of unhandled exceptions, with Promises there can be a growing-and-shrinking list of unhandled rejections.\n\nIn synchronous code, the 'uncaughtException' event is emitted when the list of unhandled exceptions grows.\n\nIn asynchronous code, the 'unhandledRejection' event is emitted when the list of unhandled rejections grows, and the 'rejectionHandled' event is emitted when the list of unhandled rejections shrinks.\n\nimport process from", "doc_id": "75587a64-23e4-4877-b206-6405120fce4a", "embedding": null, "doc_hash": "a1eab2466fadad874cf1724324396c71d44c18f83013a8c6e2d0ef1d4fd2d8bc", "extra_info": null, "node_info": {"start": 1994690, "end": 1998342}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1663052e-64e8-4645-b7d9-802949fc0d8f", "3": "4e8836d5-f0f1-4bbd-be80-5ae596bb305a"}}, "__type__": "1"}, "4e8836d5-f0f1-4bbd-be80-5ae596bb305a": {"__data__": {"text": "chain at which rejections can always be handled. Being inherently asynchronous in nature, a Promise rejection can be handled at a future point in time, possibly much later than the event loop turn it takes for the 'unhandledRejection' event to be emitted.\n\nAnother way of stating this is that, unlike in synchronous code where there is an ever-growing list of unhandled exceptions, with Promises there can be a growing-and-shrinking list of unhandled rejections.\n\nIn synchronous code, the 'uncaughtException' event is emitted when the list of unhandled exceptions grows.\n\nIn asynchronous code, the 'unhandledRejection' event is emitted when the list of unhandled rejections grows, and the 'rejectionHandled' event is emitted when the list of unhandled rejections shrinks.\n\nimport process from 'node:process';\n\nconst unhandledRejections = new Map();\nprocess.on('unhandledRejection', (reason, promise) => {\n  unhandledRejections.set(promise, reason);\n});\nprocess.on('rejectionHandled', (promise) => {\n  unhandledRejections.delete(promise);\n});\nIn this example, the unhandledRejections Map will grow and shrink over time, reflecting rejections that start unhandled and then become handled. It is possible to record such errors in an error log, either periodically (which is likely best for long-running application) or upon process exit (which is likely most convenient for scripts).\n\nEvent: 'uncaughtException'#\nHistory\nerr <Error> The uncaught exception.\norigin <string> Indicates if the exception originates from an unhandled rejection or from a synchronous error. Can either be 'uncaughtException' or 'unhandledRejection'. The latter is used when an exception happens in a Promise based async context (or if a Promise is rejected) and --unhandled-rejections flag set to strict or throw (which is the default) and the rejection is not handled, or when a rejection happens during the command line entry point's ES module static loading phase.\nThe 'uncaughtException' event is emitted when an uncaught JavaScript exception bubbles all the way back to the event loop. By default, Node.js handles such exceptions by printing the stack trace to stderr and exiting with code 1, overriding any previously set process.exitCode. Adding a handler for the 'uncaughtException' event overrides this default behavior. Alternatively, change the process.exitCode in the 'uncaughtException' handler which will result in the process exiting with the provided exit code. Otherwise, in the presence of such handler the process will exit with 0.\n\nimport process from 'node:process';\n\nprocess.on('uncaughtException', (err, origin) => {\n  fs.writeSync(\n    process.stderr.fd,\n    `Caught exception: ${err}\\n` +\n    `Exception origin: ${origin}`,\n  );\n});\n\nsetTimeout(() => {\n  console.log('This will still run.');\n}, 500);\n\n// Intentionally cause an exception, but don't catch it.\nnonexistentFunc();\nconsole.log('This will not run.');\nIt is possible to monitor 'uncaughtException' events without overriding the default behavior to exit the process by installing a 'uncaughtExceptionMonitor' listener.\n\nWarning: Using 'uncaughtException' correctly#\n'uncaughtException' is a crude mechanism for exception handling intended to be used only as a last resort. The event should not be used as an equivalent to On Error Resume Next. Unhandled exceptions inherently mean that an application is in an undefined state. Attempting to resume application code without properly recovering from the exception can cause additional unforeseen and unpredictable issues.\n\nExceptions thrown from within the event handler will not be caught. Instead the process will exit with a non-zero exit code and the stack trace will be printed. This is to avoid infinite recursion.\n\nAttempting to resume normally after an uncaught exception can be similar to pulling out the power cord when upgrading a computer. Nine out of ten times, nothing happens. But the tenth time, the system becomes", "doc_id": "4e8836d5-f0f1-4bbd-be80-5ae596bb305a", "embedding": null, "doc_hash": "6e869be55f5836fe7a4d8f9d90d65a9bb796700075e0742f8d22d806cb2ab7aa", "extra_info": null, "node_info": {"start": 1998335, "end": 2002272}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "75587a64-23e4-4877-b206-6405120fce4a", "3": "da088617-b5bb-492a-934a-c5e1db540e55"}}, "__type__": "1"}, "da088617-b5bb-492a-934a-c5e1db540e55": {"__data__": {"text": "correctly#\n'uncaughtException' is a crude mechanism for exception handling intended to be used only as a last resort. The event should not be used as an equivalent to On Error Resume Next. Unhandled exceptions inherently mean that an application is in an undefined state. Attempting to resume application code without properly recovering from the exception can cause additional unforeseen and unpredictable issues.\n\nExceptions thrown from within the event handler will not be caught. Instead the process will exit with a non-zero exit code and the stack trace will be printed. This is to avoid infinite recursion.\n\nAttempting to resume normally after an uncaught exception can be similar to pulling out the power cord when upgrading a computer. Nine out of ten times, nothing happens. But the tenth time, the system becomes corrupted.\n\nThe correct use of 'uncaughtException' is to perform synchronous cleanup of allocated resources (e.g. file descriptors, handles, etc) before shutting down the process. It is not safe to resume normal operation after 'uncaughtException'.\n\nTo restart a crashed application in a more reliable way, whether 'uncaughtException' is emitted or not, an external monitor should be employed in a separate process to detect application failures and recover or restart as needed.\n\nEvent: 'uncaughtExceptionMonitor'#\nAdded in: v13.7.0, v12.17.0\nerr <Error> The uncaught exception.\norigin <string> Indicates if the exception originates from an unhandled rejection or from synchronous errors. Can either be 'uncaughtException' or 'unhandledRejection'. The latter is used when an exception happens in a Promise based async context (or if a Promise is rejected) and --unhandled-rejections flag set to strict or throw (which is the default) and the rejection is not handled, or when a rejection happens during the command line entry point's ES module static loading phase.\nThe 'uncaughtExceptionMonitor' event is emitted before an 'uncaughtException' event is emitted or a hook installed via process.setUncaughtExceptionCaptureCallback() is called.\n\nInstalling an 'uncaughtExceptionMonitor' listener does not change the behavior once an 'uncaughtException' event is emitted. The process will still crash if no 'uncaughtException' listener is installed.\n\nimport process from 'node:process';\n\nprocess.on('uncaughtExceptionMonitor', (err, origin) => {\n  MyMonitoringTool.logSync(err, origin);\n});\n\n// Intentionally cause an exception, but don't catch it.\nnonexistentFunc();\n// Still crashes Node.js\nEvent: 'unhandledRejection'#\nHistory\nreason <Error> | <any> The object with which the promise was rejected (typically an Error object).\npromise <Promise> The rejected promise.\nThe 'unhandledRejection' event is emitted whenever a Promise is rejected and no error handler is attached to the promise within a turn of the event loop. When programming with Promises, exceptions are encapsulated as \"rejected promises\". Rejections can be caught and handled using promise.catch() and are propagated through a Promise chain. The 'unhandledRejection' event is useful for detecting and keeping track of promises that were rejected whose rejections have not yet been handled.\n\nimport process from 'node:process';\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.log('Unhandled Rejection at:', promise, 'reason:', reason);\n  // Application specific logging, throwing an error, or other logic here\n});\n\nsomePromise.then((res) => {\n  return reportToUser(JSON.pasre(res)); // Note the typo (`pasre`)\n}); // No `.catch()` or `.then()`\nThe following will also trigger the 'unhandledRejection' event to be emitted:\n\nimport process from 'node:process';\n\nfunction SomeResource() {\n  // Initially set the loaded status to a rejected promise\n  this.loaded = Promise.reject(new Error('Resource not yet loaded!'));\n}\n\nconst resource = new SomeResource();\n// no .catch or .then", "doc_id": "da088617-b5bb-492a-934a-c5e1db540e55", "embedding": null, "doc_hash": "675dc85d5fa59b671b026995515796e7d2ad0f07d74db383b1a5132265eefa15", "extra_info": null, "node_info": {"start": 2002255, "end": 2006139}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4e8836d5-f0f1-4bbd-be80-5ae596bb305a", "3": "05395487-c7f1-4ad9-b7a1-12c7be11accf"}}, "__type__": "1"}, "05395487-c7f1-4ad9-b7a1-12c7be11accf": {"__data__": {"text": "(reason, promise) => {\n  console.log('Unhandled Rejection at:', promise, 'reason:', reason);\n  // Application specific logging, throwing an error, or other logic here\n});\n\nsomePromise.then((res) => {\n  return reportToUser(JSON.pasre(res)); // Note the typo (`pasre`)\n}); // No `.catch()` or `.then()`\nThe following will also trigger the 'unhandledRejection' event to be emitted:\n\nimport process from 'node:process';\n\nfunction SomeResource() {\n  // Initially set the loaded status to a rejected promise\n  this.loaded = Promise.reject(new Error('Resource not yet loaded!'));\n}\n\nconst resource = new SomeResource();\n// no .catch or .then on resource.loaded for at least a turn\nIn this example case, it is possible to track the rejection as a developer error as would typically be the case for other 'unhandledRejection' events. To address such failures, a non-operational .catch(() => { }) handler may be attached to resource.loaded, which would prevent the 'unhandledRejection' event from being emitted.\n\nEvent: 'warning'#\nAdded in: v6.0.0\nwarning <Error> Key properties of the warning are:\nname <string> The name of the warning. Default: 'Warning'.\nmessage <string> A system-provided description of the warning.\nstack <string> A stack trace to the location in the code where the warning was issued.\nThe 'warning' event is emitted whenever Node.js emits a process warning.\n\nA process warning is similar to an error in that it describes exceptional conditions that are being brought to the user's attention. However, warnings are not part of the normal Node.js and JavaScript error handling flow. Node.js can emit warnings whenever it detects bad coding practices that could lead to sub-optimal application performance, bugs, or security vulnerabilities.\n\nimport process from 'node:process';\n\nprocess.on('warning', (warning) => {\n  console.warn(warning.name);    // Print the warning name\n  console.warn(warning.message); // Print the warning message\n  console.warn(warning.stack);   // Print the stack trace\n});\nBy default, Node.js will print process warnings to stderr. The --no-warnings command-line option can be used to suppress the default console output but the 'warning' event will still be emitted by the process object.\n\nThe following example illustrates the warning that is printed to stderr when too many listeners have been added to an event:\n\n$ node\n> events.defaultMaxListeners = 1;\n> process.on('foo', () => {});\n> process.on('foo', () => {});\n> (node:38638) MaxListenersExceededWarning: Possible EventEmitter memory leak\ndetected. 2 foo listeners added. Use emitter.setMaxListeners() to increase limit\nIn contrast, the following example turns off the default warning output and adds a custom handler to the 'warning' event:\n\n$ node --no-warnings\n> const p = process.on('warning', (warning) => console.warn('Do not do that!'));\n> events.defaultMaxListeners = 1;\n> process.on('foo', () => {});\n> process.on('foo', () => {});\n> Do not do that!\nThe --trace-warnings command-line option can be used to have the default console output for warnings include the full stack trace of the warning.\n\nLaunching Node.js using the --throw-deprecation command-line flag will cause custom deprecation warnings to be thrown as exceptions.\n\nUsing the --trace-deprecation command-line flag will cause the custom deprecation to be printed to stderr along with the stack trace.\n\nUsing the --no-deprecation command-line flag will suppress all reporting of the custom deprecation.\n\nThe *-deprecation command-line flags only affect warnings that use the name 'DeprecationWarning'.\n\nEvent: 'worker'#\nAdded in: v16.2.0, v14.18.0\nworker <Worker> The <Worker> that was created.\nThe 'worker' event is", "doc_id": "05395487-c7f1-4ad9-b7a1-12c7be11accf", "embedding": null, "doc_hash": "f5699390c3632fe3eee527457ccce7e01a5568b4b6670a83ace069e9f25f5e60", "extra_info": null, "node_info": {"start": 2006281, "end": 2009965}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "da088617-b5bb-492a-934a-c5e1db540e55", "3": "3b661ca2-c7c3-4fbd-aabf-f4d7f457f21d"}}, "__type__": "1"}, "3b661ca2-c7c3-4fbd-aabf-f4d7f457f21d": {"__data__": {"text": "--trace-warnings command-line option can be used to have the default console output for warnings include the full stack trace of the warning.\n\nLaunching Node.js using the --throw-deprecation command-line flag will cause custom deprecation warnings to be thrown as exceptions.\n\nUsing the --trace-deprecation command-line flag will cause the custom deprecation to be printed to stderr along with the stack trace.\n\nUsing the --no-deprecation command-line flag will suppress all reporting of the custom deprecation.\n\nThe *-deprecation command-line flags only affect warnings that use the name 'DeprecationWarning'.\n\nEvent: 'worker'#\nAdded in: v16.2.0, v14.18.0\nworker <Worker> The <Worker> that was created.\nThe 'worker' event is emitted after a new <Worker> thread has been created.\n\nEmitting custom warnings#\nSee the process.emitWarning() method for issuing custom or application-specific warnings.\n\nNode.js warning names#\nThere are no strict guidelines for warning types (as identified by the name property) emitted by Node.js. New types of warnings can be added at any time. A few of the warning types that are most common include:\n\n'DeprecationWarning' - Indicates use of a deprecated Node.js API or feature. Such warnings must include a 'code' property identifying the deprecation code.\n'ExperimentalWarning' - Indicates use of an experimental Node.js API or feature. Such features must be used with caution as they may change at any time and are not subject to the same strict semantic-versioning and long-term support policies as supported features.\n'MaxListenersExceededWarning' - Indicates that too many listeners for a given event have been registered on either an EventEmitter or EventTarget. This is often an indication of a memory leak.\n'TimeoutOverflowWarning' - Indicates that a numeric value that cannot fit within a 32-bit signed integer has been provided to either the setTimeout() or setInterval() functions.\n'UnsupportedWarning' - Indicates use of an unsupported option or feature that will be ignored rather than treated as an error. One example is use of the HTTP response status message when using the HTTP/2 compatibility API.\nSignal events#\nSignal events will be emitted when the Node.js process receives a signal. Please refer to signal(7) for a listing of standard POSIX signal names such as 'SIGINT', 'SIGHUP', etc.\n\nSignals are not available on Worker threads.\n\nThe signal handler will receive the signal's name ('SIGINT', 'SIGTERM', etc.) as the first argument.\n\nThe name of each event will be the uppercase common name for the signal (e.g. 'SIGINT' for SIGINT signals).\n\nimport process from 'node:process';\n\n// Begin reading from stdin so the process does not exit.\nprocess.stdin.resume();\n\nprocess.on('SIGINT', () => {\n  console.log('Received SIGINT. Press Control-D to exit.');\n});\n\n// Using a single function to handle multiple signals\nfunction handle(signal) {\n  console.log(`Received ${signal}`);\n}\n\nprocess.on('SIGINT', handle);\nprocess.on('SIGTERM', handle);\n'SIGUSR1' is reserved by Node.js to start the debugger. It's possible to install a listener but doing so might interfere with the debugger.\n'SIGTERM' and 'SIGINT' have default handlers on non-Windows platforms that reset the terminal mode before exiting with code 128 + signal number. If one of these signals has a listener installed, its default behavior will be removed (Node.js will no longer exit).\n'SIGPIPE' is ignored by default. It can have a listener installed.\n'SIGHUP' is generated on Windows when the console window is closed, and on other platforms under various similar conditions. See signal(7). It can have a listener installed, however Node.js will be unconditionally terminated by Windows about 10 seconds later. On non-Windows platforms, the default behavior of SIGHUP is to", "doc_id": "3b661ca2-c7c3-4fbd-aabf-f4d7f457f21d", "embedding": null, "doc_hash": "93168a554ee6f7f31a4d5a64ca3904aab4748fdc027a85e8c96c6814a1492dd4", "extra_info": null, "node_info": {"start": 2009888, "end": 2013674}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "05395487-c7f1-4ad9-b7a1-12c7be11accf", "3": "5b1b00ff-a575-4f5e-a68b-a24c43ed7400"}}, "__type__": "1"}, "5b1b00ff-a575-4f5e-a68b-a24c43ed7400": {"__data__": {"text": "by Node.js to start the debugger. It's possible to install a listener but doing so might interfere with the debugger.\n'SIGTERM' and 'SIGINT' have default handlers on non-Windows platforms that reset the terminal mode before exiting with code 128 + signal number. If one of these signals has a listener installed, its default behavior will be removed (Node.js will no longer exit).\n'SIGPIPE' is ignored by default. It can have a listener installed.\n'SIGHUP' is generated on Windows when the console window is closed, and on other platforms under various similar conditions. See signal(7). It can have a listener installed, however Node.js will be unconditionally terminated by Windows about 10 seconds later. On non-Windows platforms, the default behavior of SIGHUP is to terminate Node.js, but once a listener has been installed its default behavior will be removed.\n'SIGTERM' is not supported on Windows, it can be listened on.\n'SIGINT' from the terminal is supported on all platforms, and can usually be generated with Ctrl+C (though this may be configurable). It is not generated when terminal raw mode is enabled and Ctrl+C is used.\n'SIGBREAK' is delivered on Windows when Ctrl+Break is pressed. On non-Windows platforms, it can be listened on, but there is no way to send or generate it.\n'SIGWINCH' is delivered when the console has been resized. On Windows, this will only happen on write to the console when the cursor is being moved, or when a readable tty is used in raw mode.\n'SIGKILL' cannot have a listener installed, it will unconditionally terminate Node.js on all platforms.\n'SIGSTOP' cannot have a listener installed.\n'SIGBUS', 'SIGFPE', 'SIGSEGV', and 'SIGILL', when not raised artificially using kill(2), inherently leave the process in a state from which it is not safe to call JS listeners. Doing so might cause the process to stop responding.\n0 can be sent to test for the existence of a process, it has no effect if the process exists, but will throw an error if the process does not exist.\nWindows does not support signals so has no equivalent to termination by signal, but Node.js offers some emulation with process.kill(), and subprocess.kill():\n\nSending SIGINT, SIGTERM, and SIGKILL will cause the unconditional termination of the target process, and afterwards, subprocess will report that the process was terminated by signal.\nSending signal 0 can be used as a platform independent way to test for the existence of a process.\nprocess.abort()#\nAdded in: v0.7.0\nThe process.abort() method causes the Node.js process to exit immediately and generate a core file.\n\nThis feature is not available in Worker threads.\n\nprocess.allowedNodeEnvironmentFlags#\nAdded in: v10.10.0\n<Set>\nThe process.allowedNodeEnvironmentFlags property is a special, read-only Set of flags allowable within the NODE_OPTIONS environment variable.\n\nprocess.allowedNodeEnvironmentFlags extends Set, but overrides Set.prototype.has to recognize several different possible flag representations. process.allowedNodeEnvironmentFlags.has() will return true in the following cases:\n\nFlags may omit leading single (-) or double (--) dashes; e.g., inspect-brk for --inspect-brk, or r for -r.\nFlags passed through to V8 (as listed in --v8-options) may replace one or more non-leading dashes for an underscore, or vice-versa; e.g., --perf_basic_prof, --perf-basic-prof, --perf_basic-prof, etc.\nFlags may contain one or more equals (=) characters; all characters after and including the first equals will be ignored; e.g., --stack-trace-limit=100.\nFlags must be allowable within NODE_OPTIONS.\nWhen iterating over process.allowedNodeEnvironmentFlags, flags will appear only once; each will begin with one or more dashes. Flags passed through to V8 will contain underscores instead of", "doc_id": "5b1b00ff-a575-4f5e-a68b-a24c43ed7400", "embedding": null, "doc_hash": "5c1535ace202c8164f9062636b13bea0394f8cb51a0dd659a7aac8835ec3b856", "extra_info": null, "node_info": {"start": 2013656, "end": 2017421}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3b661ca2-c7c3-4fbd-aabf-f4d7f457f21d", "3": "c2bbebd3-2bc6-4af2-bb06-59934c1c4830"}}, "__type__": "1"}, "c2bbebd3-2bc6-4af2-bb06-59934c1c4830": {"__data__": {"text": "(--) dashes; e.g., inspect-brk for --inspect-brk, or r for -r.\nFlags passed through to V8 (as listed in --v8-options) may replace one or more non-leading dashes for an underscore, or vice-versa; e.g., --perf_basic_prof, --perf-basic-prof, --perf_basic-prof, etc.\nFlags may contain one or more equals (=) characters; all characters after and including the first equals will be ignored; e.g., --stack-trace-limit=100.\nFlags must be allowable within NODE_OPTIONS.\nWhen iterating over process.allowedNodeEnvironmentFlags, flags will appear only once; each will begin with one or more dashes. Flags passed through to V8 will contain underscores instead of non-leading dashes:\n\nimport { allowedNodeEnvironmentFlags } from 'node:process';\n\nallowedNodeEnvironmentFlags.forEach((flag) => {\n  // -r\n  // --inspect-brk\n  // --abort_on_uncaught_exception\n  // ...\n});\nThe methods add(), clear(), and delete() of process.allowedNodeEnvironmentFlags do nothing, and will fail silently.\n\nIf Node.js was compiled without NODE_OPTIONS support (shown in process.config), process.allowedNodeEnvironmentFlags will contain what would have been allowable.\n\nprocess.arch#\nAdded in: v0.5.0\n<string>\nThe operating system CPU architecture for which the Node.js binary was compiled. Possible values are: 'arm', 'arm64', 'ia32', 'mips','mipsel', 'ppc', 'ppc64', 's390', 's390x', and 'x64'.\n\nimport { arch } from 'node:process';\n\nconsole.log(`This processor architecture is ${arch}`);\nprocess.argv#\nAdded in: v0.1.27\n<string[]>\nThe process.argv property returns an array containing the command-line arguments passed when the Node.js process was launched. The first element will be process.execPath. See process.argv0 if access to the original value of argv[0] is needed. The second element will be the path to the JavaScript file being executed. The remaining elements will be any additional command-line arguments.\n\nFor example, assuming the following script for process-args.js:\n\nimport { argv } from 'node:process';\n\n// print process.argv\nargv.forEach((val, index) => {\n  console.log(`${index}: ${val}`);\n});\nLaunching the Node.js process as:\n\n$ node process-args.js one two=three four\nWould generate the output:\n\n0: /usr/local/bin/node\n1: /Users/mjr/work/node/process-args.js\n2: one\n3: two=three\n4: four\nprocess.argv0#\nAdded in: v6.4.0\n<string>\nThe process.argv0 property stores a read-only copy of the original value of argv[0] passed when Node.js starts.\n\n$ bash -c 'exec -a customArgv0 ./node'\n> process.argv[0]\n'/Volumes/code/external/node/out/Release/node'\n> process.argv0\n'customArgv0'\nprocess.channel#\nHistory\n<Object>\nIf the Node.js process was spawned with an IPC channel (see the Child Process documentation), the process.channel property is a reference to the IPC channel. If no IPC channel exists, this property is undefined.\n\nprocess.channel.ref()#\nAdded in: v7.1.0\nThis method makes the IPC channel keep the event loop of the process running if .unref() has been called before.\n\nTypically, this is managed through the number of 'disconnect' and 'message' listeners on the process object. However, this method can be used to explicitly request a specific behavior.\n\nprocess.channel.unref()#\nAdded in: v7.1.0\nThis method makes the IPC channel not keep the event loop of the process running, and lets it finish even while the channel is open.\n\nTypically, this is", "doc_id": "c2bbebd3-2bc6-4af2-bb06-59934c1c4830", "embedding": null, "doc_hash": "8a6bc389bf1426ce12c42758b1245887d946331e6bc3ade966044a4b943cabec", "extra_info": null, "node_info": {"start": 2017510, "end": 2020858}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5b1b00ff-a575-4f5e-a68b-a24c43ed7400", "3": "8df92ab3-dd52-44a3-8531-adeb78e28d84"}}, "__type__": "1"}, "8df92ab3-dd52-44a3-8531-adeb78e28d84": {"__data__": {"text": "the Node.js process was spawned with an IPC channel (see the Child Process documentation), the process.channel property is a reference to the IPC channel. If no IPC channel exists, this property is undefined.\n\nprocess.channel.ref()#\nAdded in: v7.1.0\nThis method makes the IPC channel keep the event loop of the process running if .unref() has been called before.\n\nTypically, this is managed through the number of 'disconnect' and 'message' listeners on the process object. However, this method can be used to explicitly request a specific behavior.\n\nprocess.channel.unref()#\nAdded in: v7.1.0\nThis method makes the IPC channel not keep the event loop of the process running, and lets it finish even while the channel is open.\n\nTypically, this is managed through the number of 'disconnect' and 'message' listeners on the process object. However, this method can be used to explicitly request a specific behavior.\n\nprocess.chdir(directory)#\nAdded in: v0.1.17\ndirectory <string>\nThe process.chdir() method changes the current working directory of the Node.js process or throws an exception if doing so fails (for instance, if the specified directory does not exist).\n\nimport { chdir, cwd } from 'node:process';\n\nconsole.log(`Starting directory: ${cwd()}`);\ntry {\n  chdir('/tmp');\n  console.log(`New directory: ${cwd()}`);\n} catch (err) {\n  console.error(`chdir: ${err}`);\n}\nThis feature is not available in Worker threads.\n\nprocess.config#\nHistory\n<Object>\nThe process.config property returns an Object containing the JavaScript representation of the configure options used to compile the current Node.js executable. This is the same as the config.gypi file that was produced when running the ./configure script.\n\nAn example of the possible output looks like:\n\n{\n  target_defaults:\n   { cflags: [],\n     default_configuration: 'Release',\n     defines: [],\n     include_dirs: [],\n     libraries: [] },\n  variables:\n   {\n     host_arch: 'x64',\n     napi_build_version: 5,\n     node_install_npm: 'true',\n     node_prefix: '',\n     node_shared_cares: 'false',\n     node_shared_http_parser: 'false',\n     node_shared_libuv: 'false',\n     node_shared_zlib: 'false',\n     node_use_dtrace: 'false',\n     node_use_openssl: 'true',\n     node_shared_openssl: 'false',\n     strict_aliasing: 'true',\n     target_arch: 'x64',\n     v8_use_snapshot: 1\n   }\n}\nThe process.config property is not read-only and there are existing modules in the ecosystem that are known to extend, modify, or entirely replace the value of process.config.\n\nModifying the process.config property, or any child-property of the process.config object has been deprecated. The process.config will be made read-only in a future release.\n\nprocess.connected#\nAdded in: v0.7.2\n<boolean>\nIf the Node.js process is spawned with an IPC channel (see the Child Process and Cluster documentation), the process.connected property will return true so long as the IPC channel is connected and will return false after process.disconnect() is called.\n\nOnce process.connected is false, it is no longer possible to send messages over the IPC channel using process.send().\n\nprocess.constrainedMemory()#\nAdded in: v18.15.0\nStability: 1 - Experimental\n<number> | <undefined>\nGets the amount of memory available to the process (in bytes) based on limits imposed by the OS. If there is no such constraint, or the constraint is unknown, undefined is", "doc_id": "8df92ab3-dd52-44a3-8531-adeb78e28d84", "embedding": null, "doc_hash": "36ce6312176b89dfe557379436487b0ab41e2a8c15d8678738ad585cee191fe7", "extra_info": null, "node_info": {"start": 2020787, "end": 2024167}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c2bbebd3-2bc6-4af2-bb06-59934c1c4830", "3": "6aa7e63c-019b-458b-9c2d-a02609cd70cb"}}, "__type__": "1"}, "6aa7e63c-019b-458b-9c2d-a02609cd70cb": {"__data__": {"text": "will be made read-only in a future release.\n\nprocess.connected#\nAdded in: v0.7.2\n<boolean>\nIf the Node.js process is spawned with an IPC channel (see the Child Process and Cluster documentation), the process.connected property will return true so long as the IPC channel is connected and will return false after process.disconnect() is called.\n\nOnce process.connected is false, it is no longer possible to send messages over the IPC channel using process.send().\n\nprocess.constrainedMemory()#\nAdded in: v18.15.0\nStability: 1 - Experimental\n<number> | <undefined>\nGets the amount of memory available to the process (in bytes) based on limits imposed by the OS. If there is no such constraint, or the constraint is unknown, undefined is returned.\n\nSee uv_get_constrained_memory for more information.\n\nprocess.cpuUsage([previousValue])#\nAdded in: v6.1.0\npreviousValue <Object> A previous return value from calling process.cpuUsage()\nReturns: <Object>\nuser <integer>\nsystem <integer>\nThe process.cpuUsage() method returns the user and system CPU time usage of the current process, in an object with properties user and system, whose values are microsecond values (millionth of a second). These values measure time spent in user and system code respectively, and may end up being greater than actual elapsed time if multiple CPU cores are performing work for this process.\n\nThe result of a previous call to process.cpuUsage() can be passed as the argument to the function, to get a diff reading.\n\nimport { cpuUsage } from 'node:process';\n\nconst startUsage = cpuUsage();\n// { user: 38579, system: 6986 }\n\n// spin the CPU for 500 milliseconds\nconst now = Date.now();\nwhile (Date.now() - now < 500);\n\nconsole.log(cpuUsage(startUsage));\n// { user: 514883, system: 11226 }\nprocess.cwd()#\nAdded in: v0.1.8\nReturns: <string>\nThe process.cwd() method returns the current working directory of the Node.js process.\n\nimport { cwd } from 'node:process';\n\nconsole.log(`Current directory: ${cwd()}`);\nprocess.debugPort#\nAdded in: v0.7.2\n<number>\nThe port used by the Node.js debugger when enabled.\n\nimport process from 'node:process';\n\nprocess.debugPort = 5858;\nprocess.disconnect()#\nAdded in: v0.7.2\nIf the Node.js process is spawned with an IPC channel (see the Child Process and Cluster documentation), the process.disconnect() method will close the IPC channel to the parent process, allowing the child process to exit gracefully once there are no other connections keeping it alive.\n\nThe effect of calling process.disconnect() is the same as calling ChildProcess.disconnect() from the parent process.\n\nIf the Node.js process was not spawned with an IPC channel, process.disconnect() will be undefined.\n\nprocess.dlopen(module, filename[, flags])#\nHistory\nmodule <Object>\nfilename <string>\nflags <os.constants.dlopen> Default: os.constants.dlopen.RTLD_LAZY\nThe process.dlopen() method allows dynamically loading shared objects. It is primarily used by require() to load C++ Addons, and should not be used directly, except in special cases. In other words, require() should be preferred over process.dlopen() unless there are specific reasons such as custom dlopen flags or loading from ES modules.\n\nThe flags argument is an integer that allows to specify dlopen behavior. See the os.constants.dlopen documentation for details.\n\nAn important requirement when calling process.dlopen() is that the module instance must be passed. Functions exported by the C++ Addon are then accessible via module.exports.\n\nThe example below shows how to load a C++ Addon, named local.node, that exports a foo function. All the symbols are loaded before the call returns, by passing the RTLD_NOW constant. In this example the constant is assumed to be available.\n\nimport { dlopen } from", "doc_id": "6aa7e63c-019b-458b-9c2d-a02609cd70cb", "embedding": null, "doc_hash": "4c297ed80dbf360c05b139bad5de5a053b673bb19985566ddb62ac6908b706f6", "extra_info": null, "node_info": {"start": 2024171, "end": 2027921}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8df92ab3-dd52-44a3-8531-adeb78e28d84", "3": "ef6c744c-b5f0-4a2a-b973-b5ebd30acbff"}}, "__type__": "1"}, "ef6c744c-b5f0-4a2a-b973-b5ebd30acbff": {"__data__": {"text": "to load C++ Addons, and should not be used directly, except in special cases. In other words, require() should be preferred over process.dlopen() unless there are specific reasons such as custom dlopen flags or loading from ES modules.\n\nThe flags argument is an integer that allows to specify dlopen behavior. See the os.constants.dlopen documentation for details.\n\nAn important requirement when calling process.dlopen() is that the module instance must be passed. Functions exported by the C++ Addon are then accessible via module.exports.\n\nThe example below shows how to load a C++ Addon, named local.node, that exports a foo function. All the symbols are loaded before the call returns, by passing the RTLD_NOW constant. In this example the constant is assumed to be available.\n\nimport { dlopen } from 'node:process';\nimport { constants } from 'node:os';\nimport { fileURLToPath } from 'node:url';\n\nconst module = { exports: {} };\ndlopen(module, fileURLToPath(new URL('local.node', import.meta.url)),\n       constants.dlopen.RTLD_NOW);\nmodule.exports.foo();\nprocess.emitWarning(warning[, options])#\nAdded in: v8.0.0\nwarning <string> | <Error> The warning to emit.\noptions <Object>\ntype <string> When warning is a String, type is the name to use for the type of warning being emitted. Default: 'Warning'.\ncode <string> A unique identifier for the warning instance being emitted.\nctor <Function> When warning is a String, ctor is an optional function used to limit the generated stack trace. Default: process.emitWarning.\ndetail <string> Additional text to include with the error.\nThe process.emitWarning() method can be used to emit custom or application specific process warnings. These can be listened for by adding a handler to the 'warning' event.\n\nimport { emitWarning } from 'node:process';\n\n// Emit a warning with a code and additional detail.\nemitWarning('Something happened!', {\n  code: 'MY_WARNING',\n  detail: 'This is some additional information',\n});\n// Emits:\n// (node:56338) [MY_WARNING] Warning: Something happened!\n// This is some additional information\nIn this example, an Error object is generated internally by process.emitWarning() and passed through to the 'warning' handler.\n\nimport process from 'node:process';\n\nprocess.on('warning', (warning) => {\n  console.warn(warning.name);    // 'Warning'\n  console.warn(warning.message); // 'Something happened!'\n  console.warn(warning.code);    // 'MY_WARNING'\n  console.warn(warning.stack);   // Stack trace\n  console.warn(warning.detail);  // 'This is some additional information'\n});\nIf warning is passed as an Error object, the options argument is ignored.\n\nprocess.emitWarning(warning[, type[, code]][, ctor])#\nAdded in: v6.0.0\nwarning <string> | <Error> The warning to emit.\ntype <string> When warning is a String, type is the name to use for the type of warning being emitted. Default: 'Warning'.\ncode <string> A unique identifier for the warning instance being emitted.\nctor <Function> When warning is a String, ctor is an optional function used to limit the generated stack trace. Default: process.emitWarning.\nThe process.emitWarning() method can be used to emit custom or application specific process warnings. These can be listened for by adding a handler to the 'warning' event.\n\nimport { emitWarning } from 'node:process';\n\n// Emit a warning using a string.\nemitWarning('Something happened!');\n// Emits: (node: 56338) Warning: Something happened!\nimport { emitWarning } from 'node:process';\n\n// Emit a warning using a string and a type.\nemitWarning('Something Happened!', 'CustomWarning');\n// Emits: (node:56338) CustomWarning: Something Happened!\nimport { emitWarning } from", "doc_id": "ef6c744c-b5f0-4a2a-b973-b5ebd30acbff", "embedding": null, "doc_hash": "31d78018d51f05314f78d9ee8b4f4106fec10eb7607b22c903eeab7cf3daa659", "extra_info": null, "node_info": {"start": 2027873, "end": 2031527}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6aa7e63c-019b-458b-9c2d-a02609cd70cb", "3": "83062838-8411-4df5-a206-d0da3bdb61d6"}}, "__type__": "1"}, "83062838-8411-4df5-a206-d0da3bdb61d6": {"__data__": {"text": "instance being emitted.\nctor <Function> When warning is a String, ctor is an optional function used to limit the generated stack trace. Default: process.emitWarning.\nThe process.emitWarning() method can be used to emit custom or application specific process warnings. These can be listened for by adding a handler to the 'warning' event.\n\nimport { emitWarning } from 'node:process';\n\n// Emit a warning using a string.\nemitWarning('Something happened!');\n// Emits: (node: 56338) Warning: Something happened!\nimport { emitWarning } from 'node:process';\n\n// Emit a warning using a string and a type.\nemitWarning('Something Happened!', 'CustomWarning');\n// Emits: (node:56338) CustomWarning: Something Happened!\nimport { emitWarning } from 'node:process';\n\nemitWarning('Something happened!', 'CustomWarning', 'WARN001');\n// Emits: (node:56338) [WARN001] CustomWarning: Something happened!\nIn each of the previous examples, an Error object is generated internally by process.emitWarning() and passed through to the 'warning' handler.\n\nimport process from 'node:process';\n\nprocess.on('warning', (warning) => {\n  console.warn(warning.name);\n  console.warn(warning.message);\n  console.warn(warning.code);\n  console.warn(warning.stack);\n});\nIf warning is passed as an Error object, it will be passed through to the 'warning' event handler unmodified (and the optional type, code and ctor arguments will be ignored):\n\nimport { emitWarning } from 'node:process';\n\n// Emit a warning using an Error object.\nconst myWarning = new Error('Something happened!');\n// Use the Error name property to specify the type name\nmyWarning.name = 'CustomWarning';\nmyWarning.code = 'WARN001';\n\nemitWarning(myWarning);\n// Emits: (node:56338) [WARN001] CustomWarning: Something happened!\nA TypeError is thrown if warning is anything other than a string or Error object.\n\nWhile process warnings use Error objects, the process warning mechanism is not a replacement for normal error handling mechanisms.\n\nThe following additional handling is implemented if the warning type is 'DeprecationWarning':\n\nIf the --throw-deprecation command-line flag is used, the deprecation warning is thrown as an exception rather than being emitted as an event.\nIf the --no-deprecation command-line flag is used, the deprecation warning is suppressed.\nIf the --trace-deprecation command-line flag is used, the deprecation warning is printed to stderr along with the full stack trace.\nAvoiding duplicate warnings#\nAs a best practice, warnings should be emitted only once per process. To do so, place the emitWarning() behind a boolean.\n\nimport { emitWarning } from 'node:process';\n\nfunction emitMyWarning() {\n  if (!emitMyWarning.warned) {\n    emitMyWarning.warned = true;\n    emitWarning('Only warn once!');\n  }\n}\nemitMyWarning();\n// Emits: (node: 56339) Warning: Only warn once!\nemitMyWarning();\n// Emits nothing\nprocess.env#\nHistory\n<Object>\nThe process.env property returns an object containing the user environment. See environ(7).\n\nAn example of this object looks like:\n\n{\n  TERM: 'xterm-256color',\n  SHELL: '/usr/local/bin/bash',\n  USER: 'maciej',\n  PATH: '~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin',\n  PWD: '/Users/maciej',\n  EDITOR: 'vim',\n  SHLVL: '1',\n  HOME: '/Users/maciej',\n  LOGNAME: 'maciej',\n  _: '/usr/local/bin/node'\n}\nIt is possible to modify this object, but such modifications will not be reflected outside the Node.js process, or (unless explicitly requested) to other", "doc_id": "83062838-8411-4df5-a206-d0da3bdb61d6", "embedding": null, "doc_hash": "df8b2ea15fd4cadef7bd7f5dedcd0dfef80358612aeefbe56b0f98741e88d836", "extra_info": null, "node_info": {"start": 2031566, "end": 2035015}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ef6c744c-b5f0-4a2a-b973-b5ebd30acbff", "3": "a77d541d-5e91-4dc8-81da-5a5c733db40c"}}, "__type__": "1"}, "a77d541d-5e91-4dc8-81da-5a5c733db40c": {"__data__": {"text": "property returns an object containing the user environment. See environ(7).\n\nAn example of this object looks like:\n\n{\n  TERM: 'xterm-256color',\n  SHELL: '/usr/local/bin/bash',\n  USER: 'maciej',\n  PATH: '~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin',\n  PWD: '/Users/maciej',\n  EDITOR: 'vim',\n  SHLVL: '1',\n  HOME: '/Users/maciej',\n  LOGNAME: 'maciej',\n  _: '/usr/local/bin/node'\n}\nIt is possible to modify this object, but such modifications will not be reflected outside the Node.js process, or (unless explicitly requested) to other Worker threads. In other words, the following example would not work:\n\n$ node -e 'process.env.foo = \"bar\"' && echo $foo\nWhile the following will:\n\nimport { env } from 'node:process';\n\nenv.foo = 'bar';\nconsole.log(env.foo);\nAssigning a property on process.env will implicitly convert the value to a string. This behavior is deprecated. Future versions of Node.js may throw an error when the value is not a string, number, or boolean.\n\nimport { env } from 'node:process';\n\nenv.test = null;\nconsole.log(env.test);\n// => 'null'\nenv.test = undefined;\nconsole.log(env.test);\n// => 'undefined'\nUse delete to delete a property from process.env.\n\nimport { env } from 'node:process';\n\nenv.TEST = 1;\ndelete env.TEST;\nconsole.log(env.TEST);\n// => undefined\nOn Windows operating systems, environment variables are case-insensitive.\n\nimport { env } from 'node:process';\n\nenv.TEST = 1;\nconsole.log(env.test);\n// => 1\nUnless explicitly specified when creating a Worker instance, each Worker thread has its own copy of process.env, based on its parent thread's process.env, or whatever was specified as the env option to the Worker constructor. Changes to process.env will not be visible across Worker threads, and only the main thread can make changes that are visible to the operating system or to native add-ons.\n\nprocess.execArgv#\nAdded in: v0.7.7\n<string[]>\nThe process.execArgv property returns the set of Node.js-specific command-line options passed when the Node.js process was launched. These options do not appear in the array returned by the process.argv property, and do not include the Node.js executable, the name of the script, or any options following the script name. These options are useful in order to spawn child processes with the same execution environment as the parent.\n\n$ node --harmony script.js --version\nResults in process.execArgv:\n\n['--harmony']\nAnd process.argv:\n\n['/usr/local/bin/node', 'script.js', '--version']\nRefer to Worker constructor for the detailed behavior of worker threads with this property.\n\nprocess.execPath#\nAdded in: v0.1.100\n<string>\nThe process.execPath property returns the absolute pathname of the executable that started the Node.js process. Symbolic links, if any, are resolved.\n\n'/usr/local/bin/node'\nprocess.exit([code])#\nAdded in: v0.1.13\ncode <integer> The exit code. Default: 0.\nThe process.exit() method instructs Node.js to terminate the process synchronously with an exit status of code. If code is omitted, exit uses either the 'success' code 0 or the value of process.exitCode if it has been set. Node.js will not terminate until all the 'exit' event listeners are called.\n\nTo exit with a 'failure' code:\n\nimport { exit } from 'node:process';\n\nexit(1);\nThe shell that executed Node.js should see the exit code as 1.\n\nCalling process.exit() will force the process to exit as quickly as possible even if", "doc_id": "a77d541d-5e91-4dc8-81da-5a5c733db40c", "embedding": null, "doc_hash": "27043f01802748f0eedb5a7e1755577ccdf49090b316f8954a4ee6ccce884c90", "extra_info": null, "node_info": {"start": 2035187, "end": 2038579}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "83062838-8411-4df5-a206-d0da3bdb61d6", "3": "528630c1-96b6-442f-9c07-9e2123cdcf22"}}, "__type__": "1"}, "528630c1-96b6-442f-9c07-9e2123cdcf22": {"__data__": {"text": "Symbolic links, if any, are resolved.\n\n'/usr/local/bin/node'\nprocess.exit([code])#\nAdded in: v0.1.13\ncode <integer> The exit code. Default: 0.\nThe process.exit() method instructs Node.js to terminate the process synchronously with an exit status of code. If code is omitted, exit uses either the 'success' code 0 or the value of process.exitCode if it has been set. Node.js will not terminate until all the 'exit' event listeners are called.\n\nTo exit with a 'failure' code:\n\nimport { exit } from 'node:process';\n\nexit(1);\nThe shell that executed Node.js should see the exit code as 1.\n\nCalling process.exit() will force the process to exit as quickly as possible even if there are still asynchronous operations pending that have not yet completed fully, including I/O operations to process.stdout and process.stderr.\n\nIn most situations, it is not actually necessary to call process.exit() explicitly. The Node.js process will exit on its own if there is no additional work pending in the event loop. The process.exitCode property can be set to tell the process which exit code to use when the process exits gracefully.\n\nFor instance, the following example illustrates a misuse of the process.exit() method that could lead to data printed to stdout being truncated and lost:\n\nimport { exit } from 'node:process';\n\n// This is an example of what *not* to do:\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  exit(1);\n}\nThe reason this is problematic is because writes to process.stdout in Node.js are sometimes asynchronous and may occur over multiple ticks of the Node.js event loop. Calling process.exit(), however, forces the process to exit before those additional writes to stdout can be performed.\n\nRather than calling process.exit() directly, the code should set the process.exitCode and allow the process to exit naturally by avoiding scheduling any additional work for the event loop:\n\nimport process from 'node:process';\n\n// How to properly set the exit code while letting\n// the process exit gracefully.\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exitCode = 1;\n}\nIf it is necessary to terminate the Node.js process due to an error condition, throwing an uncaught error and allowing the process to terminate accordingly is safer than calling process.exit().\n\nIn Worker threads, this function stops the current thread rather than the current process.\n\nprocess.exitCode#\nAdded in: v0.11.8\n<integer>\nA number which will be the process exit code, when the process either exits gracefully, or is exited via process.exit() without specifying a code.\n\nSpecifying a code to process.exit(code) will override any previous setting of process.exitCode.\n\nprocess.getActiveResourcesInfo()#\nAdded in: v17.3.0, v16.14.0\nStability: 1 - Experimental\nReturns: <string[]>\nThe process.getActiveResourcesInfo() method returns an array of strings containing the types of the active resources that are currently keeping the event loop alive.\n\nimport { getActiveResourcesInfo } from 'node:process';\nimport { setTimeout } from 'node:timers';\n\nconsole.log('Before:', getActiveResourcesInfo());\nsetTimeout(() => {}, 1000);\nconsole.log('After:', getActiveResourcesInfo());\n// Prints:\n//   Before: [ 'CloseReq', 'TTYWrap', 'TTYWrap', 'TTYWrap' ]\n//   After: [ 'CloseReq', 'TTYWrap', 'TTYWrap', 'TTYWrap', 'Timeout' ]\nprocess.getegid()#\nAdded in: v2.0.0\nThe process.getegid() method returns the numerical effective group identity of the Node.js process. (See getegid(2).)\n\nimport process from 'node:process';\n\nif (process.getegid) {\n  console.log(`Current gid:", "doc_id": "528630c1-96b6-442f-9c07-9e2123cdcf22", "embedding": null, "doc_hash": "3bd93c792bedf06bed2fe5ebb2c93f8c45b93d6878e9e5a06fa507a178f8372c", "extra_info": null, "node_info": {"start": 2038478, "end": 2042041}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a77d541d-5e91-4dc8-81da-5a5c733db40c", "3": "4dc2fa0e-a7b2-42c4-853a-6375ec7424fd"}}, "__type__": "1"}, "4dc2fa0e-a7b2-42c4-853a-6375ec7424fd": {"__data__": {"text": "} from 'node:timers';\n\nconsole.log('Before:', getActiveResourcesInfo());\nsetTimeout(() => {}, 1000);\nconsole.log('After:', getActiveResourcesInfo());\n// Prints:\n//   Before: [ 'CloseReq', 'TTYWrap', 'TTYWrap', 'TTYWrap' ]\n//   After: [ 'CloseReq', 'TTYWrap', 'TTYWrap', 'TTYWrap', 'Timeout' ]\nprocess.getegid()#\nAdded in: v2.0.0\nThe process.getegid() method returns the numerical effective group identity of the Node.js process. (See getegid(2).)\n\nimport process from 'node:process';\n\nif (process.getegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n}\nThis function is only available on POSIX platforms (i.e. not Windows or Android).\n\nprocess.geteuid()#\nAdded in: v2.0.0\nReturns: <Object>\nThe process.geteuid() method returns the numerical effective user identity of the process. (See geteuid(2).)\n\nimport process from 'node:process';\n\nif (process.geteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n}\nThis function is only available on POSIX platforms (i.e. not Windows or Android).\n\nprocess.getgid()#\nAdded in: v0.1.31\nReturns: <Object>\nThe process.getgid() method returns the numerical group identity of the process. (See getgid(2).)\n\nimport process from 'node:process';\n\nif (process.getgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n}\nThis function is only available on POSIX platforms (i.e. not Windows or Android).\n\nprocess.getgroups()#\nAdded in: v0.9.4\nReturns: <integer[]>\nThe process.getgroups() method returns an array with the supplementary group IDs. POSIX leaves it unspecified if the effective group ID is included but Node.js ensures it always is.\n\nimport process from 'node:process';\n\nif (process.getgroups) {\n  console.log(process.getgroups()); // [ 16, 21, 297 ]\n}\nThis function is only available on POSIX platforms (i.e. not Windows or Android).\n\nprocess.getuid()#\nAdded in: v0.1.28\nReturns: <integer>\nThe process.getuid() method returns the numeric user identity of the process. (See getuid(2).)\n\nimport process from 'node:process';\n\nif (process.getuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n}\nThis function is only available on POSIX platforms (i.e. not Windows or Android).\n\nprocess.hasUncaughtExceptionCaptureCallback()#\nAdded in: v9.3.0\nReturns: <boolean>\nIndicates whether a callback has been set using process.setUncaughtExceptionCaptureCallback().\n\nprocess.hrtime([time])#\nAdded in: v0.7.6\nStability: 3 - Legacy. Use process.hrtime.bigint() instead.\ntime <integer[]> The result of a previous call to process.hrtime()\nReturns: <integer[]>\nThis is the legacy version of process.hrtime.bigint() before bigint was introduced in JavaScript.\n\nThe process.hrtime() method returns the current high-resolution real time in a [seconds, nanoseconds] tuple Array, where nanoseconds is the remaining part of the real time that can't be represented in second precision.\n\ntime is an optional parameter that must be the result of a previous process.hrtime() call to diff with the current time. If the parameter passed in is not a tuple Array, a TypeError will be thrown. Passing in a user-defined array instead of the result of a previous call to process.hrtime() will lead to undefined behavior.\n\nThese times are relative to an arbitrary time in the past, and not related to the time of", "doc_id": "4dc2fa0e-a7b2-42c4-853a-6375ec7424fd", "embedding": null, "doc_hash": "29a611a72d406dd28ae9c7939e5ae8dce84ac2abbbafe164d06e8c2f50405f13", "extra_info": null, "node_info": {"start": 2042133, "end": 2045378}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "528630c1-96b6-442f-9c07-9e2123cdcf22", "3": "b5a799cb-6e19-443f-a276-b5cc49b1a007"}}, "__type__": "1"}, "b5a799cb-6e19-443f-a276-b5cc49b1a007": {"__data__": {"text": "to process.hrtime()\nReturns: <integer[]>\nThis is the legacy version of process.hrtime.bigint() before bigint was introduced in JavaScript.\n\nThe process.hrtime() method returns the current high-resolution real time in a [seconds, nanoseconds] tuple Array, where nanoseconds is the remaining part of the real time that can't be represented in second precision.\n\ntime is an optional parameter that must be the result of a previous process.hrtime() call to diff with the current time. If the parameter passed in is not a tuple Array, a TypeError will be thrown. Passing in a user-defined array instead of the result of a previous call to process.hrtime() will lead to undefined behavior.\n\nThese times are relative to an arbitrary time in the past, and not related to the time of day and therefore not subject to clock drift. The primary use is for measuring performance between intervals:\n\nimport { hrtime } from 'node:process';\n\nconst NS_PER_SEC = 1e9;\nconst time = hrtime();\n// [ 1800216, 25 ]\n\nsetTimeout(() => {\n  const diff = hrtime(time);\n  // [ 1, 552 ]\n\n  console.log(`Benchmark took ${diff[0] * NS_PER_SEC + diff[1]} nanoseconds`);\n  // Benchmark took 1000000552 nanoseconds\n}, 1000);\nprocess.hrtime.bigint()#\nAdded in: v10.7.0\nReturns: <bigint>\nThe bigint version of the process.hrtime() method returning the current high-resolution real time in nanoseconds as a bigint.\n\nUnlike process.hrtime(), it does not support an additional time argument since the difference can just be computed directly by subtraction of the two bigints.\n\nimport { hrtime } from 'node:process';\n\nconst start = hrtime.bigint();\n// 191051479007711n\n\nsetTimeout(() => {\n  const end = hrtime.bigint();\n  // 191052633396993n\n\n  console.log(`Benchmark took ${end - start} nanoseconds`);\n  // Benchmark took 1154389282 nanoseconds\n}, 1000);\nprocess.initgroups(user, extraGroup)#\nAdded in: v0.9.4\nuser <string> | <number> The user name or numeric identifier.\nextraGroup <string> | <number> A group name or numeric identifier.\nThe process.initgroups() method reads the /etc/group file and initializes the group access list, using all groups of which the user is a member. This is a privileged operation that requires that the Node.js process either have root access or the CAP_SETGID capability.\n\nUse care when dropping privileges:\n\nimport { getgroups, initgroups, setgid } from 'node:process';\n\nconsole.log(getgroups());         // [ 0 ]\ninitgroups('nodeuser', 1000);     // switch user\nconsole.log(getgroups());         // [ 27, 30, 46, 1000, 0 ]\nsetgid(1000);                     // drop root gid\nconsole.log(getgroups());         // [ 27, 30, 46, 1000 ]\nThis function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads.\n\nprocess.kill(pid[, signal])#\nAdded in: v0.0.6\npid <number> A process ID\nsignal <string> | <number> The signal to send, either as a string or number. Default: 'SIGTERM'.\nThe process.kill() method sends the signal to the process identified by pid.\n\nSignal names are strings such as 'SIGINT' or 'SIGHUP'. See Signal Events and kill(2) for more information.\n\nThis method will throw an error if the target pid does not exist. As a special case, a signal of 0 can be used to test for the existence of a process. Windows platforms will throw an error if the pid is used to kill a process group.\n\nEven though the name", "doc_id": "b5a799cb-6e19-443f-a276-b5cc49b1a007", "embedding": null, "doc_hash": "c44b1bfdaa7629062426ba1fd6b380c61a2f5e81dc4b0b0c59cfe367093577e6", "extra_info": null, "node_info": {"start": 2045206, "end": 2048578}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4dc2fa0e-a7b2-42c4-853a-6375ec7424fd", "3": "fe6b61b4-5e0d-4686-83f2-d42158fcae16"}}, "__type__": "1"}, "fe6b61b4-5e0d-4686-83f2-d42158fcae16": {"__data__": {"text": "platforms (i.e. not Windows or Android). This feature is not available in Worker threads.\n\nprocess.kill(pid[, signal])#\nAdded in: v0.0.6\npid <number> A process ID\nsignal <string> | <number> The signal to send, either as a string or number. Default: 'SIGTERM'.\nThe process.kill() method sends the signal to the process identified by pid.\n\nSignal names are strings such as 'SIGINT' or 'SIGHUP'. See Signal Events and kill(2) for more information.\n\nThis method will throw an error if the target pid does not exist. As a special case, a signal of 0 can be used to test for the existence of a process. Windows platforms will throw an error if the pid is used to kill a process group.\n\nEven though the name of this function is process.kill(), it is really just a signal sender, like the kill system call. The signal sent may do something other than kill the target process.\n\nimport process, { kill } from 'node:process';\n\nprocess.on('SIGHUP', () => {\n  console.log('Got SIGHUP signal.');\n});\n\nsetTimeout(() => {\n  console.log('Exiting.');\n  process.exit(0);\n}, 100);\n\nkill(process.pid, 'SIGHUP');\nWhen SIGUSR1 is received by a Node.js process, Node.js will start the debugger. See Signal Events.\n\nprocess.mainModule#\nAdded in: v0.1.17Deprecated since: v14.0.0\nStability: 0 - Deprecated: Use require.main instead.\n<Object>\nThe process.mainModule property provides an alternative way of retrieving require.main. The difference is that if the main module changes at runtime, require.main may still refer to the original main module in modules that were required before the change occurred. Generally, it's safe to assume that the two refer to the same module.\n\nAs with require.main, process.mainModule will be undefined if there is no entry script.\n\nprocess.memoryUsage()#\nHistory\nReturns: <Object>\nrss <integer>\nheapTotal <integer>\nheapUsed <integer>\nexternal <integer>\narrayBuffers <integer>\nReturns an object describing the memory usage of the Node.js process measured in bytes.\n\nimport { memoryUsage } from 'node:process';\n\nconsole.log(memoryUsage());\n// Prints:\n// {\n//  rss: 4935680,\n//  heapTotal: 1826816,\n//  heapUsed: 650472,\n//  external: 49879,\n//  arrayBuffers: 9386\n// }\nheapTotal and heapUsed refer to V8's memory usage.\nexternal refers to the memory usage of C++ objects bound to JavaScript objects managed by V8.\nrss, Resident Set Size, is the amount of space occupied in the main memory device (that is a subset of the total allocated memory) for the process, including all C++ and JavaScript objects and code.\narrayBuffers refers to memory allocated for ArrayBuffers and SharedArrayBuffers, including all Node.js Buffers. This is also included in the external value. When Node.js is used as an embedded library, this value may be 0 because allocations for ArrayBuffers may not be tracked in that case.\nWhen using Worker threads, rss will be a value that is valid for the entire process, while the other fields will only refer to the current thread.\n\nThe process.memoryUsage() method iterates over each page to gather information about memory usage which might be slow depending on the program memory allocations.\n\nprocess.memoryUsage.rss()#\nAdded in: v15.6.0, v14.18.0\nReturns: <integer>\nThe process.memoryUsage.rss() method returns an integer representing the Resident Set Size (RSS) in bytes.\n\nThe Resident Set Size, is the amount of space occupied in the main memory device (that is a subset of the total allocated memory) for the process, including all C++ and JavaScript objects and code.\n\nThis is the same value as the rss property provided by process.memoryUsage() but process.memoryUsage.rss() is faster.\n\nimport { memoryUsage } from", "doc_id": "fe6b61b4-5e0d-4686-83f2-d42158fcae16", "embedding": null, "doc_hash": "97dec17445cc99b73a542f691cdf84947110200f843cf399416b5ad7cc52493c", "extra_info": null, "node_info": {"start": 2048648, "end": 2052299}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b5a799cb-6e19-443f-a276-b5cc49b1a007", "3": "fd6cf43a-5fad-4f99-8275-5fb84bef24e7"}}, "__type__": "1"}, "fd6cf43a-5fad-4f99-8275-5fb84bef24e7": {"__data__": {"text": "is valid for the entire process, while the other fields will only refer to the current thread.\n\nThe process.memoryUsage() method iterates over each page to gather information about memory usage which might be slow depending on the program memory allocations.\n\nprocess.memoryUsage.rss()#\nAdded in: v15.6.0, v14.18.0\nReturns: <integer>\nThe process.memoryUsage.rss() method returns an integer representing the Resident Set Size (RSS) in bytes.\n\nThe Resident Set Size, is the amount of space occupied in the main memory device (that is a subset of the total allocated memory) for the process, including all C++ and JavaScript objects and code.\n\nThis is the same value as the rss property provided by process.memoryUsage() but process.memoryUsage.rss() is faster.\n\nimport { memoryUsage } from 'node:process';\n\nconsole.log(memoryUsage.rss());\n// 35655680\nprocess.nextTick(callback[, ...args])#\nHistory\ncallback <Function>\n...args <any> Additional arguments to pass when invoking the callback\nprocess.nextTick() adds callback to the \"next tick queue\". This queue is fully drained after the current operation on the JavaScript stack runs to completion and before the event loop is allowed to continue. It's possible to create an infinite loop if one were to recursively call process.nextTick(). See the Event Loop guide for more background.\n\nimport { nextTick } from 'node:process';\n\nconsole.log('start');\nnextTick(() => {\n  console.log('nextTick callback');\n});\nconsole.log('scheduled');\n// Output:\n// start\n// scheduled\n// nextTick callback\nThis is important when developing APIs in order to give users the opportunity to assign event handlers after an object has been constructed but before any I/O has occurred:\n\nimport { nextTick } from 'node:process';\n\nfunction MyThing(options) {\n  this.setupOptions(options);\n\n  nextTick(() => {\n    this.startDoingStuff();\n  });\n}\n\nconst thing = new MyThing();\nthing.getReadyForStuff();\n\n// thing.startDoingStuff() gets called now, not before.\nIt is very important for APIs to be either 100% synchronous or 100% asynchronous. Consider this example:\n\n// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat('file', cb);\n}\nThis API is hazardous because in the following case:\n\nconst maybeTrue = Math.random() > 0.5;\n\nmaybeSync(maybeTrue, () => {\n  foo();\n});\n\nbar();\nIt is not clear whether foo() or bar() will be called first.\n\nThe following approach is much better:\n\nimport { nextTick } from 'node:process';\n\nfunction definitelyAsync(arg, cb) {\n  if (arg) {\n    nextTick(cb);\n    return;\n  }\n\n  fs.stat('file', cb);\n}\nWhen to use queueMicrotask() vs. process.nextTick()#\nThe queueMicrotask() API is an alternative to process.nextTick() that also defers execution of a function using the same microtask queue used to execute the then, catch, and finally handlers of resolved promises. Within Node.js, every time the \"next tick queue\" is drained, the microtask queue is drained immediately after.\n\nimport { nextTick } from 'node:process';\n\nPromise.resolve().then(() => console.log(2));\nqueueMicrotask(() => console.log(3));\nnextTick(() => console.log(1));\n// Output:\n// 1\n// 2\n// 3\nFor most userland use cases, the queueMicrotask() API provides a portable and reliable mechanism for deferring execution that works across multiple JavaScript platform environments and should be favored over process.nextTick(). In simple scenarios, queueMicrotask() can be a drop-in replacement for", "doc_id": "fd6cf43a-5fad-4f99-8275-5fb84bef24e7", "embedding": null, "doc_hash": "64be0ebdc9fd1a7401eca2f0e175ec4fc96fe39cafd90cbe8337e58418d8dbc6", "extra_info": null, "node_info": {"start": 2052209, "end": 2055690}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fe6b61b4-5e0d-4686-83f2-d42158fcae16", "3": "9fb24bfb-c301-4a1e-be5a-1427e6a633e2"}}, "__type__": "1"}, "9fb24bfb-c301-4a1e-be5a-1427e6a633e2": {"__data__": {"text": "of a function using the same microtask queue used to execute the then, catch, and finally handlers of resolved promises. Within Node.js, every time the \"next tick queue\" is drained, the microtask queue is drained immediately after.\n\nimport { nextTick } from 'node:process';\n\nPromise.resolve().then(() => console.log(2));\nqueueMicrotask(() => console.log(3));\nnextTick(() => console.log(1));\n// Output:\n// 1\n// 2\n// 3\nFor most userland use cases, the queueMicrotask() API provides a portable and reliable mechanism for deferring execution that works across multiple JavaScript platform environments and should be favored over process.nextTick(). In simple scenarios, queueMicrotask() can be a drop-in replacement for process.nextTick().\n\nconsole.log('start');\nqueueMicrotask(() => {\n  console.log('microtask callback');\n});\nconsole.log('scheduled');\n// Output:\n// start\n// scheduled\n// microtask callback\nOne note-worthy difference between the two APIs is that process.nextTick() allows specifying additional values that will be passed as arguments to the deferred function when it is called. Achieving the same result with queueMicrotask() requires using either a closure or a bound function:\n\nfunction deferred(a, b) {\n  console.log('microtask', a + b);\n}\n\nconsole.log('start');\nqueueMicrotask(deferred.bind(undefined, 1, 2));\nconsole.log('scheduled');\n// Output:\n// start\n// scheduled\n// microtask 3\nThere are minor differences in the way errors raised from within the next tick queue and microtask queue are handled. Errors thrown within a queued microtask callback should be handled within the queued callback when possible. If they are not, the process.on('uncaughtException') event handler can be used to capture and handle the errors.\n\nWhen in doubt, unless the specific capabilities of process.nextTick() are needed, use queueMicrotask().\n\nprocess.noDeprecation#\nAdded in: v0.8.0\n<boolean>\nThe process.noDeprecation property indicates whether the --no-deprecation flag is set on the current Node.js process. See the documentation for the 'warning' event and the emitWarning() method for more information about this flag's behavior.\n\nprocess.pid#\nAdded in: v0.1.15\n<integer>\nThe process.pid property returns the PID of the process.\n\nimport { pid } from 'node:process';\n\nconsole.log(`This process is pid ${pid}`);\nprocess.platform#\nAdded in: v0.1.16\n<string>\nThe process.platform property returns a string identifying the operating system platform for which the Node.js binary was compiled.\n\nCurrently possible values are:\n\n'aix'\n'darwin'\n'freebsd'\n'linux'\n'openbsd'\n'sunos'\n'win32'\nimport { platform } from 'node:process';\n\nconsole.log(`This platform is ${platform}`);\nThe value 'android' may also be returned if the Node.js is built on the Android operating system. However, Android support in Node.js is experimental.\n\nprocess.ppid#\nAdded in: v9.2.0, v8.10.0, v6.13.0\n<integer>\nThe process.ppid property returns the PID of the parent of the current process.\n\nimport { ppid } from 'node:process';\n\nconsole.log(`The parent process is pid ${ppid}`);\nprocess.release#\nHistory\n<Object>\nThe process.release property returns an Object containing metadata related to the current release, including URLs for the source tarball and headers-only tarball.\n\nprocess.release contains the following properties:\n\nname <string> A value that will always be 'node'.\nsourceUrl <string> an absolute URL pointing to a .tar.gz file containing the source code of the current release.\nheadersUrl<string> an absolute URL pointing to a .tar.gz file containing only the source header files for the current release. This file is significantly smaller than the full", "doc_id": "9fb24bfb-c301-4a1e-be5a-1427e6a633e2", "embedding": null, "doc_hash": "b8eef2e2754ce779c0be7785be395ab49d061f37c21f553c71039b2780a73ebd", "extra_info": null, "node_info": {"start": 2055745, "end": 2059389}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fd6cf43a-5fad-4f99-8275-5fb84bef24e7", "3": "9e3a1e6d-0ec2-4652-84c3-6d52522e4732"}}, "__type__": "1"}, "9e3a1e6d-0ec2-4652-84c3-6d52522e4732": {"__data__": {"text": "v6.13.0\n<integer>\nThe process.ppid property returns the PID of the parent of the current process.\n\nimport { ppid } from 'node:process';\n\nconsole.log(`The parent process is pid ${ppid}`);\nprocess.release#\nHistory\n<Object>\nThe process.release property returns an Object containing metadata related to the current release, including URLs for the source tarball and headers-only tarball.\n\nprocess.release contains the following properties:\n\nname <string> A value that will always be 'node'.\nsourceUrl <string> an absolute URL pointing to a .tar.gz file containing the source code of the current release.\nheadersUrl<string> an absolute URL pointing to a .tar.gz file containing only the source header files for the current release. This file is significantly smaller than the full source file and can be used for compiling Node.js native add-ons.\nlibUrl <string> | <undefined> an absolute URL pointing to a node.lib file matching the architecture and version of the current release. This file is used for compiling Node.js native add-ons. This property is only present on Windows builds of Node.js and will be missing on all other platforms.\nlts <string> | <undefined> a string label identifying the LTS label for this release. This property only exists for LTS releases and is undefined for all other release types, including Current releases. Valid values include the LTS Release code names (including those that are no longer supported).\n'Fermium' for the 14.x LTS line beginning with 14.15.0.\n'Gallium' for the 16.x LTS line beginning with 16.13.0.\n'Hydrogen' for the 18.x LTS line beginning with 18.12.0. For other LTS Release code names, see Node.js Changelog Archive\n{\n  name: 'node',\n  lts: 'Hydrogen',\n  sourceUrl: 'https://nodejs.org/download/release/v18.12.0/node-v18.12.0.tar.gz',\n  headersUrl: 'https://nodejs.org/download/release/v18.12.0/node-v18.12.0-headers.tar.gz',\n  libUrl: 'https://nodejs.org/download/release/v18.12.0/win-x64/node.lib'\n}\nIn custom builds from non-release versions of the source tree, only the name property may be present. The additional properties should not be relied upon to exist.\n\nprocess.report#\nHistory\n<Object>\nprocess.report is an object whose methods are used to generate diagnostic reports for the current process. Additional documentation is available in the report documentation.\n\nprocess.report.compact#\nAdded in: v13.12.0, v12.17.0\n<boolean>\nWrite reports in a compact format, single-line JSON, more easily consumable by log processing systems than the default multi-line format designed for human consumption.\n\nimport { report } from 'node:process';\n\nconsole.log(`Reports are compact? ${report.compact}`);\nprocess.report.directory#\nHistory\n<string>\nDirectory where the report is written. The default value is the empty string, indicating that reports are written to the current working directory of the Node.js process.\n\nimport { report } from 'node:process';\n\nconsole.log(`Report directory is ${report.directory}`);\nprocess.report.filename#\nHistory\n<string>\nFilename where the report is written. If set to the empty string, the output filename will be comprised of a timestamp, PID, and sequence number. The default value is the empty string.\n\nIf the value of process.report.filename is set to 'stdout' or 'stderr', the report is written to the stdout or stderr of the process respectively.\n\nimport { report } from 'node:process';\n\nconsole.log(`Report filename is ${report.filename}`);\nprocess.report.getReport([err])#\nHistory\nerr <Error> A custom error used for reporting the JavaScript stack.\nReturns: <Object>\nReturns a JavaScript Object representation of a diagnostic report for the running process. The report's JavaScript stack trace is taken from err, if", "doc_id": "9e3a1e6d-0ec2-4652-84c3-6d52522e4732", "embedding": null, "doc_hash": "949d2179cfc6bb05aa4a30ce9626bfc31f6d180f29150bc5b7498425be7a10f7", "extra_info": null, "node_info": {"start": 2059338, "end": 2063050}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9fb24bfb-c301-4a1e-be5a-1427e6a633e2", "3": "a1f3d2d5-ce83-49a1-9d80-b459664ec4fc"}}, "__type__": "1"}, "a1f3d2d5-ce83-49a1-9d80-b459664ec4fc": {"__data__": {"text": "where the report is written. If set to the empty string, the output filename will be comprised of a timestamp, PID, and sequence number. The default value is the empty string.\n\nIf the value of process.report.filename is set to 'stdout' or 'stderr', the report is written to the stdout or stderr of the process respectively.\n\nimport { report } from 'node:process';\n\nconsole.log(`Report filename is ${report.filename}`);\nprocess.report.getReport([err])#\nHistory\nerr <Error> A custom error used for reporting the JavaScript stack.\nReturns: <Object>\nReturns a JavaScript Object representation of a diagnostic report for the running process. The report's JavaScript stack trace is taken from err, if present.\n\nimport { report } from 'node:process';\n\nconst data = report.getReport();\nconsole.log(data.header.nodejsVersion);\n\n// Similar to process.report.writeReport()\nimport fs from 'node:fs';\nfs.writeFileSync('my-report.log', util.inspect(data), 'utf8');\nAdditional documentation is available in the report documentation.\n\nprocess.report.reportOnFatalError#\nHistory\n<boolean>\nIf true, a diagnostic report is generated on fatal errors, such as out of memory errors or failed C++ assertions.\n\nimport { report } from 'node:process';\n\nconsole.log(`Report on fatal error: ${report.reportOnFatalError}`);\nprocess.report.reportOnSignal#\nHistory\n<boolean>\nIf true, a diagnostic report is generated when the process receives the signal specified by process.report.signal.\n\nimport { report } from 'node:process';\n\nconsole.log(`Report on signal: ${report.reportOnSignal}`);\nprocess.report.reportOnUncaughtException#\nHistory\n<boolean>\nIf true, a diagnostic report is generated on uncaught exception.\n\nimport { report } from 'node:process';\n\nconsole.log(`Report on exception: ${report.reportOnUncaughtException}`);\nprocess.report.signal#\nHistory\n<string>\nThe signal used to trigger the creation of a diagnostic report. Defaults to 'SIGUSR2'.\n\nimport { report } from 'node:process';\n\nconsole.log(`Report signal: ${report.signal}`);\nprocess.report.writeReport([filename][, err])#\nHistory\nfilename <string> Name of the file where the report is written. This should be a relative path, that will be appended to the directory specified in process.report.directory, or the current working directory of the Node.js process, if unspecified.\n\nerr <Error> A custom error used for reporting the JavaScript stack.\n\nReturns: <string> Returns the filename of the generated report.\n\nWrites a diagnostic report to a file. If filename is not provided, the default filename includes the date, time, PID, and a sequence number. The report's JavaScript stack trace is taken from err, if present.\n\nIf the value of filename is set to 'stdout' or 'stderr', the report is written to the stdout or stderr of the process respectively.\n\nimport { report } from 'node:process';\n\nreport.writeReport();\nAdditional documentation is available in the report documentation.\n\nprocess.resourceUsage()#\nAdded in: v12.6.0\nReturns: <Object> the resource usage for the current process. All of these values come from the uv_getrusage call which returns a uv_rusage_t struct.\nuserCPUTime <integer> maps to ru_utime computed in microseconds. It is the same value as process.cpuUsage().user.\nsystemCPUTime <integer> maps to ru_stime computed in microseconds. It is the same value as process.cpuUsage().system.\nmaxRSS <integer> maps to ru_maxrss which is the maximum resident set size used in kilobytes.\nsharedMemorySize <integer> maps to ru_ixrss but is not supported by any platform.\nunsharedDataSize <integer> maps to ru_idrss but is not supported by any platform.\nunsharedStackSize <integer> maps to ru_isrss but is not supported by any platform.\nminorPageFault <integer> maps to", "doc_id": "a1f3d2d5-ce83-49a1-9d80-b459664ec4fc", "embedding": null, "doc_hash": "a7f1a2af1df8b360cf0c168d49ad17a14901212d18f55fc7cecc384e8101ea05", "extra_info": null, "node_info": {"start": 2063128, "end": 2066848}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9e3a1e6d-0ec2-4652-84c3-6d52522e4732", "3": "151d952e-a71f-4621-8467-2de0f47167b5"}}, "__type__": "1"}, "151d952e-a71f-4621-8467-2de0f47167b5": {"__data__": {"text": "resource usage for the current process. All of these values come from the uv_getrusage call which returns a uv_rusage_t struct.\nuserCPUTime <integer> maps to ru_utime computed in microseconds. It is the same value as process.cpuUsage().user.\nsystemCPUTime <integer> maps to ru_stime computed in microseconds. It is the same value as process.cpuUsage().system.\nmaxRSS <integer> maps to ru_maxrss which is the maximum resident set size used in kilobytes.\nsharedMemorySize <integer> maps to ru_ixrss but is not supported by any platform.\nunsharedDataSize <integer> maps to ru_idrss but is not supported by any platform.\nunsharedStackSize <integer> maps to ru_isrss but is not supported by any platform.\nminorPageFault <integer> maps to ru_minflt which is the number of minor page faults for the process, see this article for more details.\nmajorPageFault <integer> maps to ru_majflt which is the number of major page faults for the process, see this article for more details. This field is not supported on Windows.\nswappedOut <integer> maps to ru_nswap but is not supported by any platform.\nfsRead <integer> maps to ru_inblock which is the number of times the file system had to perform input.\nfsWrite <integer> maps to ru_oublock which is the number of times the file system had to perform output.\nipcSent <integer> maps to ru_msgsnd but is not supported by any platform.\nipcReceived <integer> maps to ru_msgrcv but is not supported by any platform.\nsignalsCount <integer> maps to ru_nsignals but is not supported by any platform.\nvoluntaryContextSwitches <integer> maps to ru_nvcsw which is the number of times a CPU context switch resulted due to a process voluntarily giving up the processor before its time slice was completed (usually to await availability of a resource). This field is not supported on Windows.\ninvoluntaryContextSwitches <integer> maps to ru_nivcsw which is the number of times a CPU context switch resulted due to a higher priority process becoming runnable or because the current process exceeded its time slice. This field is not supported on Windows.\nimport { resourceUsage } from 'node:process';\n\nconsole.log(resourceUsage());\n/*\n  Will output:\n  {\n    userCPUTime: 82872,\n    systemCPUTime: 4143,\n    maxRSS: 33164,\n    sharedMemorySize: 0,\n    unsharedDataSize: 0,\n    unsharedStackSize: 0,\n    minorPageFault: 2469,\n    majorPageFault: 0,\n    swappedOut: 0,\n    fsRead: 0,\n    fsWrite: 8,\n    ipcSent: 0,\n    ipcReceived: 0,\n    signalsCount: 0,\n    voluntaryContextSwitches: 79,\n    involuntaryContextSwitches: 1\n  }\n*/\nprocess.send(message[, sendHandle[, options]][, callback])#\nAdded in: v0.5.9\nmessage <Object>\nsendHandle <net.Server> | <net.Socket>\noptions <Object> used to parameterize the sending of certain types of handles.options supports the following properties:\nkeepOpen <boolean> A value that can be used when passing instances of net.Socket. When true, the socket is kept open in the sending process. Default: false.\ncallback <Function>\nReturns: <boolean>\nIf Node.js is spawned with an IPC channel, the process.send() method can be used to send messages to the parent process. Messages will be received as a 'message' event on the parent's ChildProcess object.\n\nIf Node.js was not spawned with an IPC channel, process.send will be undefined.\n\nThe message goes through serialization and parsing. The resulting message might not be the same as what is originally sent.\n\nprocess.setegid(id)#\nAdded in: v2.0.0\nid <string> | <number> A group name or ID\nThe", "doc_id": "151d952e-a71f-4621-8467-2de0f47167b5", "embedding": null, "doc_hash": "480b79befdff8276db29408937d1a67679c3024f6b120c1ac392b41f8b64f4ad", "extra_info": null, "node_info": {"start": 2066814, "end": 2070310}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a1f3d2d5-ce83-49a1-9d80-b459664ec4fc", "3": "0a19234f-63a9-40a5-a1a8-00740cee7e83"}}, "__type__": "1"}, "0a19234f-63a9-40a5-a1a8-00740cee7e83": {"__data__": {"text": "the following properties:\nkeepOpen <boolean> A value that can be used when passing instances of net.Socket. When true, the socket is kept open in the sending process. Default: false.\ncallback <Function>\nReturns: <boolean>\nIf Node.js is spawned with an IPC channel, the process.send() method can be used to send messages to the parent process. Messages will be received as a 'message' event on the parent's ChildProcess object.\n\nIf Node.js was not spawned with an IPC channel, process.send will be undefined.\n\nThe message goes through serialization and parsing. The resulting message might not be the same as what is originally sent.\n\nprocess.setegid(id)#\nAdded in: v2.0.0\nid <string> | <number> A group name or ID\nThe process.setegid() method sets the effective group identity of the process. (See setegid(2).) The id can be passed as either a numeric ID or a group name string. If a group name is specified, this method blocks while resolving the associated a numeric ID.\n\nimport process from 'node:process';\n\nif (process.getegid && process.setegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n  try {\n    process.setegid(501);\n    console.log(`New gid: ${process.getegid()}`);\n  } catch (err) {\n    console.error(`Failed to set gid: ${err}`);\n  }\n}\nThis function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads.\n\nprocess.seteuid(id)#\nAdded in: v2.0.0\nid <string> | <number> A user name or ID\nThe process.seteuid() method sets the effective user identity of the process. (See seteuid(2).) The id can be passed as either a numeric ID or a username string. If a username is specified, the method blocks while resolving the associated numeric ID.\n\nimport process from 'node:process';\n\nif (process.geteuid && process.seteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n  try {\n    process.seteuid(501);\n    console.log(`New uid: ${process.geteuid()}`);\n  } catch (err) {\n    console.error(`Failed to set uid: ${err}`);\n  }\n}\nThis function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads.\n\nprocess.setgid(id)#\nAdded in: v0.1.31\nid <string> | <number> The group name or ID\nThe process.setgid() method sets the group identity of the process. (See setgid(2).) The id can be passed as either a numeric ID or a group name string. If a group name is specified, this method blocks while resolving the associated numeric ID.\n\nimport process from 'node:process';\n\nif (process.getgid && process.setgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n  try {\n    process.setgid(501);\n    console.log(`New gid: ${process.getgid()}`);\n  } catch (err) {\n    console.error(`Failed to set gid: ${err}`);\n  }\n}\nThis function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads.\n\nprocess.setgroups(groups)#\nAdded in: v0.9.4\ngroups <integer[]>\nThe process.setgroups() method sets the supplementary group IDs for the Node.js process. This is a privileged operation that requires the Node.js process to have root or the CAP_SETGID capability.\n\nThe groups array can contain numeric group IDs, group names, or both.\n\nimport process from 'node:process';\n\nif", "doc_id": "0a19234f-63a9-40a5-a1a8-00740cee7e83", "embedding": null, "doc_hash": "477f71b2cb8b7d79fd35b3bbe64566ac52e5274d005603fd000c523732b3baa0", "extra_info": null, "node_info": {"start": 2070332, "end": 2073588}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "151d952e-a71f-4621-8467-2de0f47167b5", "3": "2469663a-d793-4288-aac8-aa824b38d599"}}, "__type__": "1"}, "2469663a-d793-4288-aac8-aa824b38d599": {"__data__": {"text": "   console.log(`New gid: ${process.getgid()}`);\n  } catch (err) {\n    console.error(`Failed to set gid: ${err}`);\n  }\n}\nThis function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads.\n\nprocess.setgroups(groups)#\nAdded in: v0.9.4\ngroups <integer[]>\nThe process.setgroups() method sets the supplementary group IDs for the Node.js process. This is a privileged operation that requires the Node.js process to have root or the CAP_SETGID capability.\n\nThe groups array can contain numeric group IDs, group names, or both.\n\nimport process from 'node:process';\n\nif (process.getgroups && process.setgroups) {\n  try {\n    process.setgroups([501]);\n    console.log(process.getgroups()); // new groups\n  } catch (err) {\n    console.error(`Failed to set groups: ${err}`);\n  }\n}\nThis function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads.\n\nprocess.setuid(id)#\nAdded in: v0.1.28\nid <integer> | <string>\nThe process.setuid(id) method sets the user identity of the process. (See setuid(2).) The id can be passed as either a numeric ID or a username string. If a username is specified, the method blocks while resolving the associated numeric ID.\n\nimport process from 'node:process';\n\nif (process.getuid && process.setuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n  try {\n    process.setuid(501);\n    console.log(`New uid: ${process.getuid()}`);\n  } catch (err) {\n    console.error(`Failed to set uid: ${err}`);\n  }\n}\nThis function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in Worker threads.\n\nprocess.setSourceMapsEnabled(val)#\nAdded in: v16.6.0, v14.18.0\nStability: 1 - Experimental\nval <boolean>\nThis function enables or disables the Source Map v3 support for stack traces.\n\nIt provides same features as launching Node.js process with commandline options --enable-source-maps.\n\nOnly source maps in JavaScript files that are loaded after source maps has been enabled will be parsed and loaded.\n\nprocess.setUncaughtExceptionCaptureCallback(fn)#\nAdded in: v9.3.0\nfn <Function> | <null>\nThe process.setUncaughtExceptionCaptureCallback() function sets a function that will be invoked when an uncaught exception occurs, which will receive the exception value itself as its first argument.\n\nIf such a function is set, the 'uncaughtException' event will not be emitted. If --abort-on-uncaught-exception was passed from the command line or set through v8.setFlagsFromString(), the process will not abort. Actions configured to take place on exceptions such as report generations will be affected too\n\nTo unset the capture function, process.setUncaughtExceptionCaptureCallback(null) may be used. Calling this method with a non-null argument while another capture function is set will throw an error.\n\nUsing this function is mutually exclusive with using the deprecated domain built-in module.\n\nprocess.stderr#\n<Stream>\nThe process.stderr property returns a stream connected to stderr (fd 2). It is a net.Socket (which is a Duplex stream) unless fd 2 refers to a file, in which case it is a Writable stream.\n\nprocess.stderr differs from other Node.js streams in important ways. See note on process I/O for more information.\n\nprocess.stderr.fd#\n<number>\nThis property refers to the value of underlying file descriptor of process.stderr. The value is fixed at 2. In Worker threads, this field", "doc_id": "2469663a-d793-4288-aac8-aa824b38d599", "embedding": null, "doc_hash": "2ee1d74fcb030e99d6874d26da8f66e5eda2e4a06aa317c8581222c342134cbb", "extra_info": null, "node_info": {"start": 2073665, "end": 2077135}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0a19234f-63a9-40a5-a1a8-00740cee7e83", "3": "b6adcef2-a506-4a7b-873f-9219b2fe5777"}}, "__type__": "1"}, "b6adcef2-a506-4a7b-873f-9219b2fe5777": {"__data__": {"text": "may be used. Calling this method with a non-null argument while another capture function is set will throw an error.\n\nUsing this function is mutually exclusive with using the deprecated domain built-in module.\n\nprocess.stderr#\n<Stream>\nThe process.stderr property returns a stream connected to stderr (fd 2). It is a net.Socket (which is a Duplex stream) unless fd 2 refers to a file, in which case it is a Writable stream.\n\nprocess.stderr differs from other Node.js streams in important ways. See note on process I/O for more information.\n\nprocess.stderr.fd#\n<number>\nThis property refers to the value of underlying file descriptor of process.stderr. The value is fixed at 2. In Worker threads, this field does not exist.\n\nprocess.stdin#\n<Stream>\nThe process.stdin property returns a stream connected to stdin (fd 0). It is a net.Socket (which is a Duplex stream) unless fd 0 refers to a file, in which case it is a Readable stream.\n\nFor details of how to read from stdin see readable.read().\n\nAs a Duplex stream, process.stdin can also be used in \"old\" mode that is compatible with scripts written for Node.js prior to v0.10. For more information see Stream compatibility.\n\nIn \"old\" streams mode the stdin stream is paused by default, so one must call process.stdin.resume() to read from it. Note also that calling process.stdin.resume() itself would switch stream to \"old\" mode.\n\nprocess.stdin.fd#\n<number>\nThis property refers to the value of underlying file descriptor of process.stdin. The value is fixed at 0. In Worker threads, this field does not exist.\n\nprocess.stdout\n<Stream>\nThe process.stdout property returns a stream connected to stdout (fd 1). It is a net.Socket (which is a Duplex stream) unless fd 1 refers to a file, in which case it is a Writable stream.\n\nFor example, to copy process.stdin to process.stdout:\n\nimport { stdin, stdout } from 'node:process';\n\nstdin.pipe(stdout);\nprocess.stdout differs from other Node.js streams in important ways. See note on process I/O for more information.\n\nprocess.stdout.fd#\n<number>\nThis property refers to the value of underlying file descriptor of process.stdout. The value is fixed at 1. In Worker threads, this field does not exist.\n\nA note on process I/O#\nprocess.stdout and process.stderr differ from other Node.js streams in important ways:\n\nThey are used internally by console.log() and console.error(), respectively.\nWrites may be synchronous depending on what the stream is connected to and whether the system is Windows or POSIX:\nFiles: synchronous on Windows and POSIX\nTTYs (Terminals): asynchronous on Windows, synchronous on POSIX\nPipes (and sockets): synchronous on Windows, asynchronous on POSIX\nThese behaviors are partly for historical reasons, as changing them would create backward incompatibility, but they are also expected by some users.\n\nSynchronous writes avoid problems such as output written with console.log() or console.error() being unexpectedly interleaved, or not written at all if process.exit() is called before an asynchronous write completes. See process.exit() for more information.\n\nWarning: Synchronous writes block the event loop until the write has completed. This can be near instantaneous in the case of output to a file, but under high system load, pipes that are not being read at the receiving end, or with slow terminals or file systems, it's possible for the event loop to be blocked often enough and long enough to have severe negative performance impacts. This may not be a problem when writing to an interactive terminal session, but consider this particularly careful when doing production logging to the process output streams.\n\nTo check if a stream is connected to a TTY context, check the isTTY property.\n\nFor instance:\n\n$ node -p \"Boolean(process.stdin.isTTY)\"\ntrue\n$", "doc_id": "b6adcef2-a506-4a7b-873f-9219b2fe5777", "embedding": null, "doc_hash": "1bfd4d55272443ea1a60ff55040b78024964cdd58b12906e6cd8d79ec81a8ecd", "extra_info": null, "node_info": {"start": 2077071, "end": 2080854}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2469663a-d793-4288-aac8-aa824b38d599", "3": "6cbd530e-526f-4c61-a47f-38bcdb94838b"}}, "__type__": "1"}, "6cbd530e-526f-4c61-a47f-38bcdb94838b": {"__data__": {"text": "all if process.exit() is called before an asynchronous write completes. See process.exit() for more information.\n\nWarning: Synchronous writes block the event loop until the write has completed. This can be near instantaneous in the case of output to a file, but under high system load, pipes that are not being read at the receiving end, or with slow terminals or file systems, it's possible for the event loop to be blocked often enough and long enough to have severe negative performance impacts. This may not be a problem when writing to an interactive terminal session, but consider this particularly careful when doing production logging to the process output streams.\n\nTo check if a stream is connected to a TTY context, check the isTTY property.\n\nFor instance:\n\n$ node -p \"Boolean(process.stdin.isTTY)\"\ntrue\n$ echo \"foo\" | node -p \"Boolean(process.stdin.isTTY)\"\nfalse\n$ node -p \"Boolean(process.stdout.isTTY)\"\ntrue\n$ node -p \"Boolean(process.stdout.isTTY)\" | cat\nfalse\nSee the TTY documentation for more information.\n\nprocess.throwDeprecation#\nAdded in: v0.9.12\n<boolean>\nThe initial value of process.throwDeprecation indicates whether the --throw-deprecation flag is set on the current Node.js process. process.throwDeprecation is mutable, so whether or not deprecation warnings result in errors may be altered at runtime. See the documentation for the 'warning' event and the emitWarning() method for more information.\n\n$ node --throw-deprecation -p \"process.throwDeprecation\"\ntrue\n$ node -p \"process.throwDeprecation\"\nundefined\n$ node\n> process.emitWarning('test', 'DeprecationWarning');\nundefined\n> (node:26598) DeprecationWarning: test\n> process.throwDeprecation = true;\ntrue\n> process.emitWarning('test', 'DeprecationWarning');\nThrown:\n[DeprecationWarning: test] { name: 'DeprecationWarning' }\nprocess.title#\nAdded in: v0.1.104\n<string>\nThe process.title property returns the current process title (i.e. returns the current value of ps). Assigning a new value to process.title modifies the current value of ps.\n\nWhen a new value is assigned, different platforms will impose different maximum length restrictions on the title. Usually such restrictions are quite limited. For instance, on Linux and macOS, process.title is limited to the size of the binary name plus the length of the command-line arguments because setting the process.title overwrites the argv memory of the process. Node.js v0.8 allowed for longer process title strings by also overwriting the environ memory but that was potentially insecure and confusing in some (rather obscure) cases.\n\nAssigning a value to process.title might not result in an accurate label within process manager applications such as macOS Activity Monitor or Windows Services Manager.\n\nprocess.traceDeprecation#\nAdded in: v0.8.0\n<boolean>\nThe process.traceDeprecation property indicates whether the --trace-deprecation flag is set on the current Node.js process. See the documentation for the 'warning' event and the emitWarning() method for more information about this flag's behavior.\n\nprocess.umask()#\nHistory\nStability: 0 - Deprecated. Calling process.umask() with no argument causes the process-wide umask to be written twice. This introduces a race condition between threads, and is a potential security vulnerability. There is no safe, cross-platform alternative API.\nprocess.umask() returns the Node.js process's file mode creation mask. Child processes inherit the mask from the parent process.\n\nprocess.umask(mask)#\nAdded in: v0.1.19\nmask <string> | <integer>\nprocess.umask(mask) sets the Node.js process's file mode creation mask. Child processes inherit the mask from the parent process. Returns the previous mask.\n\nimport { umask } from 'node:process';\n\nconst newmask = 0o022;\nconst oldmask = umask(newmask);\nconsole.log(\n ", "doc_id": "6cbd530e-526f-4c61-a47f-38bcdb94838b", "embedding": null, "doc_hash": "78a01e85a550a02acb31a914853298072d5cd2ef0fe123077e578206496f670f", "extra_info": null, "node_info": {"start": 2080767, "end": 2084558}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b6adcef2-a506-4a7b-873f-9219b2fe5777", "3": "208bfe41-6243-4845-a2d9-bd8ec3432a97"}}, "__type__": "1"}, "208bfe41-6243-4845-a2d9-bd8ec3432a97": {"__data__": {"text": "0 - Deprecated. Calling process.umask() with no argument causes the process-wide umask to be written twice. This introduces a race condition between threads, and is a potential security vulnerability. There is no safe, cross-platform alternative API.\nprocess.umask() returns the Node.js process's file mode creation mask. Child processes inherit the mask from the parent process.\n\nprocess.umask(mask)#\nAdded in: v0.1.19\nmask <string> | <integer>\nprocess.umask(mask) sets the Node.js process's file mode creation mask. Child processes inherit the mask from the parent process. Returns the previous mask.\n\nimport { umask } from 'node:process';\n\nconst newmask = 0o022;\nconst oldmask = umask(newmask);\nconsole.log(\n  `Changed umask from ${oldmask.toString(8)} to ${newmask.toString(8)}`,\n);\nIn Worker threads, process.umask(mask) will throw an exception.\n\nprocess.uptime()#\nAdded in: v0.5.0\nReturns: <number>\nThe process.uptime() method returns the number of seconds the current Node.js process has been running.\n\nThe return value includes fractions of a second. Use Math.floor() to get whole seconds.\n\nprocess.version#\nAdded in: v0.1.3\n<string>\nThe process.version property contains the Node.js version string.\n\nimport { version } from 'node:process';\n\nconsole.log(`Version: ${version}`);\n// Version: v14.8.0\nTo get the version string without the prepended v, use process.versions.node.\n\nprocess.versions#\nHistory\n<Object>\nThe process.versions property returns an object listing the version strings of Node.js and its dependencies. process.versions.modules indicates the current ABI version, which is increased whenever a C++ API changes. Node.js will refuse to load modules that were compiled against a different module ABI version.\n\nimport { versions } from 'node:process';\n\nconsole.log(versions);\nWill generate an object similar to:\n\n{ node: '11.13.0',\n  v8: '7.0.276.38-node.18',\n  uv: '1.27.0',\n  zlib: '1.2.11',\n  brotli: '1.0.7',\n  ares: '1.15.0',\n  modules: '67',\n  nghttp2: '1.34.0',\n  napi: '4',\n  llhttp: '1.1.1',\n  openssl: '1.1.1b',\n  cldr: '34.0',\n  icu: '63.1',\n  tz: '2018e',\n  unicode: '11.0' }\nExit codes#\nNode.js will normally exit with a 0 status code when no more async operations are pending. The following status codes are used in other cases:\n\n1 Uncaught Fatal Exception: There was an uncaught exception, and it was not handled by a domain or an 'uncaughtException' event handler.\n2: Unused (reserved by Bash for builtin misuse)\n3 Internal JavaScript Parse Error: The JavaScript source code internal in the Node.js bootstrapping process caused a parse error. This is extremely rare, and generally can only happen during development of Node.js itself.\n4 Internal JavaScript Evaluation Failure: The JavaScript source code internal in the Node.js bootstrapping process failed to return a function value when evaluated. This is extremely rare, and generally can only happen during development of Node.js itself.\n5 Fatal Error: There was a fatal unrecoverable error in V8. Typically a message will be printed to stderr with the prefix FATAL ERROR.\n6 Non-function Internal Exception Handler: There was an uncaught exception, but the internal fatal exception handler function was somehow set to a non-function, and could not be called.\n7 Internal Exception Handler Run-Time Failure: There was an uncaught exception, and the internal fatal exception handler function itself threw an error while attempting to handle it. This can happen, for example, if", "doc_id": "208bfe41-6243-4845-a2d9-bd8ec3432a97", "embedding": null, "doc_hash": "b2581fb1ba83cc367daf98f247860d4b0c81ab3fd9cf37b4e83a0bab79e10b4b", "extra_info": null, "node_info": {"start": 2084628, "end": 2088093}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6cbd530e-526f-4c61-a47f-38bcdb94838b", "3": "a9b5ee2a-eed2-4bf2-b20e-756a1d4d1004"}}, "__type__": "1"}, "a9b5ee2a-eed2-4bf2-b20e-756a1d4d1004": {"__data__": {"text": "during development of Node.js itself.\n4 Internal JavaScript Evaluation Failure: The JavaScript source code internal in the Node.js bootstrapping process failed to return a function value when evaluated. This is extremely rare, and generally can only happen during development of Node.js itself.\n5 Fatal Error: There was a fatal unrecoverable error in V8. Typically a message will be printed to stderr with the prefix FATAL ERROR.\n6 Non-function Internal Exception Handler: There was an uncaught exception, but the internal fatal exception handler function was somehow set to a non-function, and could not be called.\n7 Internal Exception Handler Run-Time Failure: There was an uncaught exception, and the internal fatal exception handler function itself threw an error while attempting to handle it. This can happen, for example, if an 'uncaughtException' or domain.on('error') handler throws an error.\n8: Unused. In previous versions of Node.js, exit code 8 sometimes indicated an uncaught exception.\n9 Invalid Argument: Either an unknown option was specified, or an option requiring a value was provided without a value.\n10 Internal JavaScript Run-Time Failure: The JavaScript source code internal in the Node.js bootstrapping process threw an error when the bootstrapping function was called. This is extremely rare, and generally can only happen during development of Node.js itself.\n12 Invalid Debug Argument: The --inspect and/or --inspect-brk options were set, but the port number chosen was invalid or unavailable.\n13 Unfinished Top-Level Await: await was used outside of a function in the top-level code, but the passed Promise never resolved.\n14 Snapshot Failure: Node.js was started to build a V8 startup snapshot and it failed because certain requirements of the state of the application were not met.\n>128 Signal Exits: If Node.js receives a fatal signal such as SIGKILL or SIGHUP, then its exit code will be 128 plus the value of the signal code. This is a standard POSIX practice, since exit codes are defined to be 7-bit integers, and signal exits set the high-order bit, and then contain the value of the signal code. For example, signal SIGABRT has value 6, so the expected exit code will be 128 + 6, or 134.\nPunycode#\nDeprecated since: v7.0.0\nStability: 0 - Deprecated\nSource Code: lib/punycode.js\n\nThe version of the punycode module bundled in Node.js is being deprecated. In a future major version of Node.js this module will be removed. Users currently depending on the punycode module should switch to using the userland-provided Punycode.js module instead. For punycode-based URL encoding, see url.domainToASCII or, more generally, the WHATWG URL API.\n\nThe punycode module is a bundled version of the Punycode.js module. It can be accessed using:\n\nconst punycode = require('punycode');\nPunycode is a character encoding scheme defined by RFC 3492 that is primarily intended for use in Internationalized Domain Names. Because host names in URLs are limited to ASCII characters only, Domain Names that contain non-ASCII characters must be converted into ASCII using the Punycode scheme. For instance, the Japanese character that translates into the English word, 'example' is '\u4f8b'. The Internationalized Domain Name, '\u4f8b.com' (equivalent to 'example.com') is represented by Punycode as the ASCII string 'xn--fsq.com'.\n\nThe punycode module provides a simple implementation of the Punycode standard.\n\nThe punycode module is a third-party dependency used by Node.js and made available to developers as a convenience. Fixes or other modifications to the module must be directed to the Punycode.js project.\n\npunycode.decode(string)#\nAdded in: v0.5.1\nstring <string>\nThe punycode.decode() method converts a Punycode string of ASCII-only characters to the equivalent string of Unicode", "doc_id": "a9b5ee2a-eed2-4bf2-b20e-756a1d4d1004", "embedding": null, "doc_hash": "adf3f15293a0546edbe9149cbb5235e8b6b012dd69269986337e0535eb2c6b68", "extra_info": null, "node_info": {"start": 2088007, "end": 2091802}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "208bfe41-6243-4845-a2d9-bd8ec3432a97", "3": "5edb9302-f110-4727-a9b7-39cd5539ebe2"}}, "__type__": "1"}, "5edb9302-f110-4727-a9b7-39cd5539ebe2": {"__data__": {"text": "the Japanese character that translates into the English word, 'example' is '\u4f8b'. The Internationalized Domain Name, '\u4f8b.com' (equivalent to 'example.com') is represented by Punycode as the ASCII string 'xn--fsq.com'.\n\nThe punycode module provides a simple implementation of the Punycode standard.\n\nThe punycode module is a third-party dependency used by Node.js and made available to developers as a convenience. Fixes or other modifications to the module must be directed to the Punycode.js project.\n\npunycode.decode(string)#\nAdded in: v0.5.1\nstring <string>\nThe punycode.decode() method converts a Punycode string of ASCII-only characters to the equivalent string of Unicode codepoints.\n\npunycode.decode('maana-pta'); // 'ma\u00f1ana'\npunycode.decode('--dqo34k'); // '\u2603-\u2318'\npunycode.encode(string)#\nAdded in: v0.5.1\nstring <string>\nThe punycode.encode() method converts a string of Unicode codepoints to a Punycode string of ASCII-only characters.\n\npunycode.encode('ma\u00f1ana'); // 'maana-pta'\npunycode.encode('\u2603-\u2318'); // '--dqo34k'\npunycode.toASCII(domain)#\nAdded in: v0.6.1\ndomain <string>\nThe punycode.toASCII() method converts a Unicode string representing an Internationalized Domain Name to Punycode. Only the non-ASCII parts of the domain name will be converted. Calling punycode.toASCII() on a string that already only contains ASCII characters will have no effect.\n\n// encode domain names\npunycode.toASCII('ma\u00f1ana.com');  // 'xn--maana-pta.com'\npunycode.toASCII('\u2603-\u2318.com');   // 'xn----dqo34k.com'\npunycode.toASCII('example.com'); // 'example.com'\npunycode.toUnicode(domain)#\nAdded in: v0.6.1\ndomain <string>\nThe punycode.toUnicode() method converts a string representing a domain name containing Punycode encoded characters into Unicode. Only the Punycode encoded parts of the domain name are be converted.\n\n// decode domain names\npunycode.toUnicode('xn--maana-pta.com'); // 'ma\u00f1ana.com'\npunycode.toUnicode('xn----dqo34k.com');  // '\u2603-\u2318.com'\npunycode.toUnicode('example.com');       // 'example.com'\npunycode.ucs2#\nAdded in: v0.7.0\npunycode.ucs2.decode(string)#\nAdded in: v0.7.0\nstring <string>\nThe punycode.ucs2.decode() method returns an array containing the numeric codepoint values of each Unicode symbol in the string.\n\npunycode.ucs2.decode('abc'); // [0x61, 0x62, 0x63]\n// surrogate pair for U+1D306 tetragram for centre:\npunycode.ucs2.decode('\\uD834\\uDF06'); // [0x1D306]\npunycode.ucs2.encode(codePoints)#\nAdded in: v0.7.0\ncodePoints <integer[]>\nThe punycode.ucs2.encode() method returns a string based on an array of numeric code point values.\n\npunycode.ucs2.encode([0x61, 0x62, 0x63]); // 'abc'\npunycode.ucs2.encode([0x1D306]); // '\\uD834\\uDF06'\npunycode.version#\nAdded in: v0.6.1\n<string>\nReturns a string", "doc_id": "5edb9302-f110-4727-a9b7-39cd5539ebe2", "embedding": null, "doc_hash": "23b8282c27b6c9830b9f091eea4076648f9f9a93ec25c9db0a2a6b50740039fe", "extra_info": null, "node_info": {"start": 2091925, "end": 2094640}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a9b5ee2a-eed2-4bf2-b20e-756a1d4d1004", "3": "55aa3957-0016-4e6a-8ff9-466e7c0eb950"}}, "__type__": "1"}, "55aa3957-0016-4e6a-8ff9-466e7c0eb950": {"__data__": {"text": "0x63]\n// surrogate pair for U+1D306 tetragram for centre:\npunycode.ucs2.decode('\\uD834\\uDF06'); // [0x1D306]\npunycode.ucs2.encode(codePoints)#\nAdded in: v0.7.0\ncodePoints <integer[]>\nThe punycode.ucs2.encode() method returns a string based on an array of numeric code point values.\n\npunycode.ucs2.encode([0x61, 0x62, 0x63]); // 'abc'\npunycode.ucs2.encode([0x1D306]); // '\\uD834\\uDF06'\npunycode.version#\nAdded in: v0.6.1\n<string>\nReturns a string identifying the current Punycode.js version number.\n\nQuery string#\nStability: 2 - Stable\nSource Code: lib/querystring.js\n\nThe node:querystring module provides utilities for parsing and formatting URL query strings. It can be accessed using:\n\nconst querystring = require('node:querystring');\nquerystring is more performant than <URLSearchParams> but is not a standardized API. Use <URLSearchParams> when performance is not critical or when compatibility with browser code is desirable.\n\nquerystring.decode()#\nAdded in: v0.1.99\nThe querystring.decode() function is an alias for querystring.parse().\n\nquerystring.encode()#\nAdded in: v0.1.99\nThe querystring.encode() function is an alias for querystring.stringify().\n\nquerystring.escape(str)#\nAdded in: v0.1.25\nstr <string>\nThe querystring.escape() method performs URL percent-encoding on the given str in a manner that is optimized for the specific requirements of URL query strings.\n\nThe querystring.escape() method is used by querystring.stringify() and is generally not expected to be used directly. It is exported primarily to allow application code to provide a replacement percent-encoding implementation if necessary by assigning querystring.escape to an alternative function.\n\nquerystring.parse(str[, sep[, eq[, options]]])#\nHistory\nstr <string> The URL query string to parse\nsep <string> The substring used to delimit key and value pairs in the query string. Default: '&'.\neq <string>. The substring used to delimit keys and values in the query string. Default: '='.\noptions <Object>\ndecodeURIComponent <Function> The function to use when decoding percent-encoded characters in the query string. Default: querystring.unescape().\nmaxKeys <number> Specifies the maximum number of keys to parse. Specify 0 to remove key counting limitations. Default: 1000.\nThe querystring.parse() method parses a URL query string (str) into a collection of key and value pairs.\n\nFor example, the query string 'foo=bar&abc=xyz&abc=123' is parsed into:\n\n{\n  foo: 'bar',\n  abc: ['xyz', '123']\n}\nThe object returned by the querystring.parse() method does not prototypically inherit from the JavaScript Object. This means that typical Object methods such as obj.toString(), obj.hasOwnProperty(), and others are not defined and will not work.\n\nBy default, percent-encoded characters within the query string will be assumed to use UTF-8 encoding. If an alternative character encoding is used, then an alternative decodeURIComponent option will need to be specified:\n\n// Assuming gbkDecodeURIComponent function already exists...\n\nquerystring.parse('w=%D6%D0%CE%C4&foo=bar', null, null,\n                  { decodeURIComponent: gbkDecodeURIComponent });\nquerystring.stringify(obj[, sep[, eq[, options]]])#\nAdded in: v0.1.25\nobj <Object> The object to serialize into a URL query string\nsep <string> The substring used to", "doc_id": "55aa3957-0016-4e6a-8ff9-466e7c0eb950", "embedding": null, "doc_hash": "9501c4ebc1cba935351ea5fedc54b3e493a560f4ceb2e36c4c5808ef24787425", "extra_info": null, "node_info": {"start": 2094819, "end": 2098111}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5edb9302-f110-4727-a9b7-39cd5539ebe2", "3": "1ca75eae-3b9f-4c16-b185-8a5b6a175df2"}}, "__type__": "1"}, "1ca75eae-3b9f-4c16-b185-8a5b6a175df2": {"__data__": {"text": "not defined and will not work.\n\nBy default, percent-encoded characters within the query string will be assumed to use UTF-8 encoding. If an alternative character encoding is used, then an alternative decodeURIComponent option will need to be specified:\n\n// Assuming gbkDecodeURIComponent function already exists...\n\nquerystring.parse('w=%D6%D0%CE%C4&foo=bar', null, null,\n                  { decodeURIComponent: gbkDecodeURIComponent });\nquerystring.stringify(obj[, sep[, eq[, options]]])#\nAdded in: v0.1.25\nobj <Object> The object to serialize into a URL query string\nsep <string> The substring used to delimit key and value pairs in the query string. Default: '&'.\neq <string>. The substring used to delimit keys and values in the query string. Default: '='.\noptions\nencodeURIComponent <Function> The function to use when converting URL-unsafe characters to percent-encoding in the query string. Default: querystring.escape().\nThe querystring.stringify() method produces a URL query string from a given obj by iterating through the object's \"own properties\".\n\nIt serializes the following types of values passed in obj: <string> | <number> | <bigint> | <boolean> | <string[]> | <number[]> | <bigint[]> | <boolean[]> The numeric values must be finite. Any other input values will be coerced to empty strings.\n\nquerystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' });\n// Returns 'foo=bar&baz=qux&baz=quux&corge='\n\nquerystring.stringify({ foo: 'bar', baz: 'qux' }, ';', ':');\n// Returns 'foo:bar;baz:qux'\nBy default, characters requiring percent-encoding within the query string will be encoded as UTF-8. If an alternative encoding is required, then an alternative encodeURIComponent option will need to be specified:\n\n// Assuming gbkEncodeURIComponent function already exists,\n\nquerystring.stringify({ w: '\u4e2d\u6587', foo: 'bar' }, null, null,\n                      { encodeURIComponent: gbkEncodeURIComponent });\nquerystring.unescape(str)#\nAdded in: v0.1.25\nstr <string>\nThe querystring.unescape() method performs decoding of URL percent-encoded characters on the given str.\n\nThe querystring.unescape() method is used by querystring.parse() and is generally not expected to be used directly. It is exported primarily to allow application code to provide a replacement decoding implementation if necessary by assigning querystring.unescape to an alternative function.\n\nBy default, the querystring.unescape() method will attempt to use the JavaScript built-in decodeURIComponent() method to decode. If that fails, a safer equivalent that does not throw on malformed URLs will be used.\n\nReadline#\nStability: 2 - Stable\nSource Code: lib/readline.js\n\nThe node:readline module provides an interface for reading data from a Readable stream (such as process.stdin) one line at a time.\n\nTo use the promise-based APIs:\n\nimport * as readline from 'node:readline/promises';\nTo use the callback and sync APIs:\n\nimport * as readline from 'node:readline';\nThe following simple example illustrates the basic use of the node:readline module.\n\nimport * as readline from 'node:readline/promises';\nimport { stdin as input, stdout as output } from 'node:process';\n\nconst rl = readline.createInterface({ input, output });\n\nconst answer = await rl.question('What do you think of Node.js? ');\n\nconsole.log(`Thank you for your valuable feedback:", "doc_id": "1ca75eae-3b9f-4c16-b185-8a5b6a175df2", "embedding": null, "doc_hash": "7df973aec40bc0fd5e69ad739d511b7146ec5d372aee68e47d01fb525cfb5730", "extra_info": null, "node_info": {"start": 2098002, "end": 2101330}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "55aa3957-0016-4e6a-8ff9-466e7c0eb950", "3": "9d80c51d-90dc-4bb7-b1f5-1e823238aa7e"}}, "__type__": "1"}, "9d80c51d-90dc-4bb7-b1f5-1e823238aa7e": {"__data__": {"text": "node:readline module provides an interface for reading data from a Readable stream (such as process.stdin) one line at a time.\n\nTo use the promise-based APIs:\n\nimport * as readline from 'node:readline/promises';\nTo use the callback and sync APIs:\n\nimport * as readline from 'node:readline';\nThe following simple example illustrates the basic use of the node:readline module.\n\nimport * as readline from 'node:readline/promises';\nimport { stdin as input, stdout as output } from 'node:process';\n\nconst rl = readline.createInterface({ input, output });\n\nconst answer = await rl.question('What do you think of Node.js? ');\n\nconsole.log(`Thank you for your valuable feedback: ${answer}`);\n\nrl.close();\nOnce this code is invoked, the Node.js application will not terminate until the readline.Interface is closed because the interface waits for data to be received on the input stream.\n\n\nClass: InterfaceConstructor#\nAdded in: v0.1.104\nExtends: <EventEmitter>\nInstances of the InterfaceConstructor class are constructed using the readlinePromises.createInterface() or readline.createInterface() method. Every instance is associated with a single input Readable stream and a single output Writable stream. The output stream is used to print prompts for user input that arrives on, and is read from, the input stream.\n\nEvent: 'close'#\nAdded in: v0.1.98\nThe 'close' event is emitted when one of the following occur:\n\nThe rl.close() method is called and the InterfaceConstructor instance has relinquished control over the input and output streams;\nThe input stream receives its 'end' event;\nThe input stream receives Ctrl+D to signal end-of-transmission (EOT);\nThe input stream receives Ctrl+C to signal SIGINT and there is no 'SIGINT' event listener registered on the InterfaceConstructor instance.\nThe listener function is called without passing any arguments.\n\nThe InterfaceConstructor instance is finished once the 'close' event is emitted.\n\nEvent: 'line'#\nAdded in: v0.1.98\nThe 'line' event is emitted whenever the input stream receives an end-of-line input (\\n, \\r, or \\r\\n). This usually occurs when the user presses Enter or Return.\n\nThe 'line' event is also emitted if new data has been read from a stream and that stream ends without a final end-of-line marker.\n\nThe listener function is called with a string containing the single line of received input.\n\nrl.on('line', (input) => {\n  console.log(`Received: ${input}`);\n});\nEvent: 'history'#\nAdded in: v15.8.0, v14.18.0\nThe 'history' event is emitted whenever the history array has changed.\n\nThe listener function is called with an array containing the history array. It will reflect all changes, added lines and removed lines due to historySize and removeHistoryDuplicates.\n\nThe primary purpose is to allow a listener to persist the history. It is also possible for the listener to change the history object. This could be useful to prevent certain lines to be added to the history, like a password.\n\nrl.on('history', (history) => {\n  console.log(`Received: ${history}`);\n});\nEvent: 'pause'#\nAdded in: v0.7.5\nThe 'pause' event is emitted when one of the following occur:\n\nThe input stream is paused.\nThe input stream is not paused and receives the 'SIGCONT' event. (See events 'SIGTSTP' and 'SIGCONT'.)\nThe listener function is called without passing any arguments.\n\nrl.on('pause', () => {\n  console.log('Readline paused.');\n});\nEvent: 'resume'#\nAdded in: v0.7.5\nThe 'resume' event is emitted whenever the input stream is resumed.\n\nThe listener function is called without passing any arguments.\n\nrl.on('resume', () => {\n  console.log('Readline", "doc_id": "9d80c51d-90dc-4bb7-b1f5-1e823238aa7e", "embedding": null, "doc_hash": "d243410bb7544f391f273dad80198611403529fc82ab3735e38a5d0cc1c84843", "extra_info": null, "node_info": {"start": 2101266, "end": 2104859}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1ca75eae-3b9f-4c16-b185-8a5b6a175df2", "3": "cce75144-f9d3-4d0b-912e-0fdb4186a8e6"}}, "__type__": "1"}, "cce75144-f9d3-4d0b-912e-0fdb4186a8e6": {"__data__": {"text": "${history}`);\n});\nEvent: 'pause'#\nAdded in: v0.7.5\nThe 'pause' event is emitted when one of the following occur:\n\nThe input stream is paused.\nThe input stream is not paused and receives the 'SIGCONT' event. (See events 'SIGTSTP' and 'SIGCONT'.)\nThe listener function is called without passing any arguments.\n\nrl.on('pause', () => {\n  console.log('Readline paused.');\n});\nEvent: 'resume'#\nAdded in: v0.7.5\nThe 'resume' event is emitted whenever the input stream is resumed.\n\nThe listener function is called without passing any arguments.\n\nrl.on('resume', () => {\n  console.log('Readline resumed.');\n});\nEvent: 'SIGCONT'#\nAdded in: v0.7.5\nThe 'SIGCONT' event is emitted when a Node.js process previously moved into the background using Ctrl+Z (i.e. SIGTSTP) is then brought back to the foreground using fg(1p).\n\nIf the input stream was paused before the SIGTSTP request, this event will not be emitted.\n\nThe listener function is invoked without passing any arguments.\n\nrl.on('SIGCONT', () => {\n  // `prompt` will automatically resume the stream\n  rl.prompt();\n});\nThe 'SIGCONT' event is not supported on Windows.\n\nEvent: 'SIGINT'#\nAdded in: v0.3.0\nThe 'SIGINT' event is emitted whenever the input stream receives a Ctrl+C input, known typically as SIGINT. If there are no 'SIGINT' event listeners registered when the input stream receives a SIGINT, the 'pause' event will be emitted.\n\nThe listener function is invoked without passing any arguments.\n\nrl.on('SIGINT', () => {\n  rl.question('Are you sure you want to exit? ', (answer) => {\n    if (answer.match(/^y(es)?$/i)) rl.pause();\n  });\n});\nEvent: 'SIGTSTP'#\nAdded in: v0.7.5\nThe 'SIGTSTP' event is emitted when the input stream receives a Ctrl+Z input, typically known as SIGTSTP. If there are no 'SIGTSTP' event listeners registered when the input stream receives a SIGTSTP, the Node.js process will be sent to the background.\n\nWhen the program is resumed using fg(1p), the 'pause' and 'SIGCONT' events will be emitted. These can be used to resume the input stream.\n\nThe 'pause' and 'SIGCONT' events will not be emitted if the input was paused before the process was sent to the background.\n\nThe listener function is invoked without passing any arguments.\n\nrl.on('SIGTSTP', () => {\n  // This will override SIGTSTP and prevent the program from going to the\n  // background.\n  console.log('Caught SIGTSTP.');\n});\nThe 'SIGTSTP' event is not supported on Windows.\n\nrl.close()#\nAdded in: v0.1.98\nThe rl.close() method closes the InterfaceConstructor instance and relinquishes control over the input and output streams. When called, the 'close' event will be emitted.\n\nCalling rl.close() does not immediately stop other events (including 'line') from being emitted by the InterfaceConstructor instance.\n\nrl.pause()#\nAdded in: v0.3.4\nThe rl.pause() method pauses the input stream, allowing it to be resumed later if necessary.\n\nCalling rl.pause() does not immediately pause other events (including 'line') from being emitted by the InterfaceConstructor instance.\n\nrl.prompt([preserveCursor])#\nAdded in: v0.1.98\npreserveCursor <boolean> If true, prevents the cursor placement from being reset to 0.\nThe rl.prompt() method writes the InterfaceConstructor instances configured prompt to", "doc_id": "cce75144-f9d3-4d0b-912e-0fdb4186a8e6", "embedding": null, "doc_hash": "c98d11c619d6b48f3bd1011ed43aae8b9c4213574f7eeee0bd049065e2f9ad02", "extra_info": null, "node_info": {"start": 2104931, "end": 2108160}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9d80c51d-90dc-4bb7-b1f5-1e823238aa7e", "3": "62453880-9b8f-4a33-8482-8c249808f241"}}, "__type__": "1"}, "62453880-9b8f-4a33-8482-8c249808f241": {"__data__": {"text": "InterfaceConstructor instance and relinquishes control over the input and output streams. When called, the 'close' event will be emitted.\n\nCalling rl.close() does not immediately stop other events (including 'line') from being emitted by the InterfaceConstructor instance.\n\nrl.pause()#\nAdded in: v0.3.4\nThe rl.pause() method pauses the input stream, allowing it to be resumed later if necessary.\n\nCalling rl.pause() does not immediately pause other events (including 'line') from being emitted by the InterfaceConstructor instance.\n\nrl.prompt([preserveCursor])#\nAdded in: v0.1.98\npreserveCursor <boolean> If true, prevents the cursor placement from being reset to 0.\nThe rl.prompt() method writes the InterfaceConstructor instances configured prompt to a new line in output in order to provide a user with a new location at which to provide input.\n\nWhen called, rl.prompt() will resume the input stream if it has been paused.\n\nIf the InterfaceConstructor was created with output set to null or undefined the prompt is not written.\n\nrl.question(query[, options], callback)#\nAdded in: v0.3.3\nquery <string> A statement or query to write to output, prepended to the prompt.\noptions <Object>\nsignal <AbortSignal> Optionally allows the question() to be canceled using an AbortController.\ncallback <Function> A callback function that is invoked with the user's input in response to the query.\nThe rl.question() method displays the query by writing it to the output, waits for user input to be provided on input, then invokes the callback function passing the provided input as the first argument.\n\nWhen called, rl.question() will resume the input stream if it has been paused.\n\nIf the InterfaceConstructor was created with output set to null or undefined the query is not written.\n\nThe callback function passed to rl.question() does not follow the typical pattern of accepting an Error object or null as the first argument. The callback is called with the provided answer as the only argument.\n\nAn error will be thrown if calling rl.question() after rl.close().\n\nExample usage:\n\nrl.question('What is your favorite food? ', (answer) => {\n  console.log(`Oh, so your favorite food is ${answer}`);\n});\nUsing an AbortController to cancel a question.\n\nconst ac = new AbortController();\nconst signal = ac.signal;\n\nrl.question('What is your favorite food? ', { signal }, (answer) => {\n  console.log(`Oh, so your favorite food is ${answer}`);\n});\n\nsignal.addEventListener('abort', () => {\n  console.log('The food question timed out');\n}, { once: true });\n\nsetTimeout(() => ac.abort(), 10000);\nrl.resume()#\nAdded in: v0.3.4\nThe rl.resume() method resumes the input stream if it has been paused.\n\nrl.setPrompt(prompt)#\nAdded in: v0.1.98\nprompt <string>\nThe rl.setPrompt() method sets the prompt that will be written to output whenever rl.prompt() is called.\n\nrl.getPrompt()#\nAdded in: v15.3.0, v14.17.0\nReturns: <string> the current prompt string\nThe rl.getPrompt() method returns the current prompt used by rl.prompt().\n\nrl.write(data[, key])#\nAdded in: v0.1.98\ndata <string>\nkey <Object>\nctrl <boolean> true to indicate the Ctrl key.\nmeta <boolean> true to indicate the Meta key.\nshift <boolean> true to indicate the Shift key.\nname <string> The name of the a key.\nThe rl.write() method will write either data or a key sequence identified by key to the output. The key argument is supported only if output is a TTY text terminal. See TTY keybindings for a list of key combinations.\n\nIf key is specified, data is ignored.\n\nWhen called, rl.write() will resume the input stream if it has been paused.\n\nIf the InterfaceConstructor was", "doc_id": "62453880-9b8f-4a33-8482-8c249808f241", "embedding": null, "doc_hash": "e21319957017fd59144da043f710554e9b491120aaedb5882eb59b3e71056c4a", "extra_info": null, "node_info": {"start": 2108011, "end": 2111626}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cce75144-f9d3-4d0b-912e-0fdb4186a8e6", "3": "5fda61c7-4e0d-49eb-bac6-2d001a6159e4"}}, "__type__": "1"}, "5fda61c7-4e0d-49eb-bac6-2d001a6159e4": {"__data__": {"text": "rl.getPrompt() method returns the current prompt used by rl.prompt().\n\nrl.write(data[, key])#\nAdded in: v0.1.98\ndata <string>\nkey <Object>\nctrl <boolean> true to indicate the Ctrl key.\nmeta <boolean> true to indicate the Meta key.\nshift <boolean> true to indicate the Shift key.\nname <string> The name of the a key.\nThe rl.write() method will write either data or a key sequence identified by key to the output. The key argument is supported only if output is a TTY text terminal. See TTY keybindings for a list of key combinations.\n\nIf key is specified, data is ignored.\n\nWhen called, rl.write() will resume the input stream if it has been paused.\n\nIf the InterfaceConstructor was created with output set to null or undefined the data and key are not written.\n\nrl.write('Delete this!');\n// Simulate Ctrl+U to delete the line written previously\nrl.write(null, { ctrl: true, name: 'u' });\nThe rl.write() method will write the data to the readline Interface's input as if it were provided by the user.\n\nrl[Symbol.asyncIterator]()#\nHistory\nReturns: <AsyncIterator>\nCreate an AsyncIterator object that iterates through each line in the input stream as a string. This method allows asynchronous iteration of InterfaceConstructor objects through for await...of loops.\n\nErrors in the input stream are not forwarded.\n\nIf the loop is terminated with break, throw, or return, rl.close() will be called. In other words, iterating over a InterfaceConstructor will always consume the input stream fully.\n\nPerformance is not on par with the traditional 'line' event API. Use 'line' instead for performance-sensitive applications.\n\nasync function processLineByLine() {\n  const rl = readline.createInterface({\n    // ...\n  });\n\n  for await (const line of rl) {\n    // Each line in the readline input will be successively available here as\n    // `line`.\n  }\n}\nreadline.createInterface() will start to consume the input stream once invoked. Having asynchronous operations between interface creation and asynchronous iteration may result in missed lines.\n\nrl.line#\nHistory\n<string>\nThe current input data being processed by node.\n\nThis can be used when collecting input from a TTY stream to retrieve the current value that has been processed thus far, prior to the line event being emitted. Once the line event has been emitted, this property will be an empty string.\n\nBe aware that modifying the value during the instance runtime may have unintended consequences if rl.cursor is not also controlled.\n\nIf not using a TTY stream for input, use the 'line' event.\n\nOne possible use case would be as follows:\n\nconst values = ['lorem ipsum', 'dolor sit amet'];\nconst rl = readline.createInterface(process.stdin);\nconst showResults = debounce(() => {\n  console.log(\n    '\\n',\n    values.filter((val) => val.startsWith(rl.line)).join(' '),\n  );\n}, 300);\nprocess.stdin.on('keypress', (c, k) => {\n  showResults();\n});\nrl.cursor#\nAdded in: v0.1.98\n<number> | <undefined>\nThe cursor position relative to rl.line.\n\nThis will track where the current cursor lands in the input string, when reading input from a TTY stream. The position of cursor determines the portion of the input string that will be modified as input is processed, as well as the column where the terminal caret will be rendered.\n\nrl.getCursorPos()#\nAdded in: v13.5.0, v12.16.0\nReturns: <Object>\nrows <number> the row of the prompt the cursor currently lands on\ncols <number> the screen column the cursor currently lands on\nReturns the real position of the cursor in relation to the input prompt + string. Long input (wrapping) strings, as well as multiple line prompts are included in the calculations.\n\nPromises API#\nAdded in:", "doc_id": "5fda61c7-4e0d-49eb-bac6-2d001a6159e4", "embedding": null, "doc_hash": "038fb71d072019ffa11bdde2f8f1c59959d7911827bb64d04bdc15577268c84e", "extra_info": null, "node_info": {"start": 2111709, "end": 2115374}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "62453880-9b8f-4a33-8482-8c249808f241", "3": "c53073c0-cbee-4128-826e-b3746ab542da"}}, "__type__": "1"}, "c53073c0-cbee-4128-826e-b3746ab542da": {"__data__": {"text": "| <undefined>\nThe cursor position relative to rl.line.\n\nThis will track where the current cursor lands in the input string, when reading input from a TTY stream. The position of cursor determines the portion of the input string that will be modified as input is processed, as well as the column where the terminal caret will be rendered.\n\nrl.getCursorPos()#\nAdded in: v13.5.0, v12.16.0\nReturns: <Object>\nrows <number> the row of the prompt the cursor currently lands on\ncols <number> the screen column the cursor currently lands on\nReturns the real position of the cursor in relation to the input prompt + string. Long input (wrapping) strings, as well as multiple line prompts are included in the calculations.\n\nPromises API#\nAdded in: v17.0.0\nStability: 1 - Experimental\nClass: readlinePromises.Interface#\nAdded in: v17.0.0\nExtends: <readline.InterfaceConstructor>\nInstances of the readlinePromises.Interface class are constructed using the readlinePromises.createInterface() method. Every instance is associated with a single input Readable stream and a single output Writable stream. The output stream is used to print prompts for user input that arrives on, and is read from, the input stream.\n\nrl.question(query[, options])#\nAdded in: v17.0.0\nquery <string> A statement or query to write to output, prepended to the prompt.\noptions <Object>\nsignal <AbortSignal> Optionally allows the question() to be canceled using an AbortSignal.\nReturns: <Promise> A promise that is fulfilled with the user's input in response to the query.\nThe rl.question() method displays the query by writing it to the output, waits for user input to be provided on input, then invokes the callback function passing the provided input as the first argument.\n\nWhen called, rl.question() will resume the input stream if it has been paused.\n\nIf the readlinePromises.Interface was created with output set to null or undefined the query is not written.\n\nIf the question is called after rl.close(), it returns a rejected promise.\n\nExample usage:\n\nconst answer = await rl.question('What is your favorite food? ');\nconsole.log(`Oh, so your favorite food is ${answer}`);\nUsing an AbortSignal to cancel a question.\n\nconst signal = AbortSignal.timeout(10_000);\n\nsignal.addEventListener('abort', () => {\n  console.log('The food question timed out');\n}, { once: true });\n\nconst answer = await rl.question('What is your favorite food? ', { signal });\nconsole.log(`Oh, so your favorite food is ${answer}`);\nClass: readlinePromises.Readline#\nAdded in: v17.0.0\nnew readlinePromises.Readline(stream[, options])#\nAdded in: v17.0.0\nstream <stream.Writable> A TTY stream.\noptions <Object>\nautoCommit <boolean> If true, no need to call rl.commit().\nrl.clearLine(dir)#\nAdded in: v17.0.0\ndir <integer>\n-1: to the left from cursor\n1: to the right from cursor\n0: the entire line\nReturns: this\nThe rl.clearLine() method adds to the internal list of pending action an action that clears current line of the associated stream in a specified direction identified by dir. Call rl.commit() to see the effect of this method, unless autoCommit: true was passed to the constructor.\n\nrl.clearScreenDown()#\nAdded in: v17.0.0\nReturns: this\nThe rl.clearScreenDown() method adds to the internal list of pending action an action that clears the associated stream from the current position of the cursor down. Call rl.commit() to see the effect of this method, unless autoCommit: true was passed to the constructor.\n\nrl.commit()#\nAdded in: v17.0.0\nReturns: <Promise>\nThe rl.commit() method sends all the pending actions to the associated stream and clears the internal list of pending", "doc_id": "c53073c0-cbee-4128-826e-b3746ab542da", "embedding": null, "doc_hash": "3ab21cff9794cf09cd4cf493bbe4fcb6cafb48c375c566cbf66b9dcebd143116", "extra_info": null, "node_info": {"start": 2115330, "end": 2118951}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5fda61c7-4e0d-49eb-bac6-2d001a6159e4", "3": "dc592ea2-d70b-4e52-b33c-71442c5586d5"}}, "__type__": "1"}, "dc592ea2-d70b-4e52-b33c-71442c5586d5": {"__data__": {"text": "rl.clearLine() method adds to the internal list of pending action an action that clears current line of the associated stream in a specified direction identified by dir. Call rl.commit() to see the effect of this method, unless autoCommit: true was passed to the constructor.\n\nrl.clearScreenDown()#\nAdded in: v17.0.0\nReturns: this\nThe rl.clearScreenDown() method adds to the internal list of pending action an action that clears the associated stream from the current position of the cursor down. Call rl.commit() to see the effect of this method, unless autoCommit: true was passed to the constructor.\n\nrl.commit()#\nAdded in: v17.0.0\nReturns: <Promise>\nThe rl.commit() method sends all the pending actions to the associated stream and clears the internal list of pending actions.\n\nrl.cursorTo(x[, y])#\nAdded in: v17.0.0\nx <integer>\ny <integer>\nReturns: this\nThe rl.cursorTo() method adds to the internal list of pending action an action that moves cursor to the specified position in the associated stream. Call rl.commit() to see the effect of this method, unless autoCommit: true was passed to the constructor.\n\nrl.moveCursor(dx, dy)#\nAdded in: v17.0.0\ndx <integer>\ndy <integer>\nReturns: this\nThe rl.moveCursor() method adds to the internal list of pending action an action that moves the cursor relative to its current position in the associated stream. Call rl.commit() to see the effect of this method, unless autoCommit: true was passed to the constructor.\n\nrl.rollback()#\nAdded in: v17.0.0\nReturns: this\nThe rl.rollback methods clears the internal list of pending actions without sending it to the associated stream.\n\nreadlinePromises.createInterface(options)#\nAdded in: v17.0.0\noptions <Object>\ninput <stream.Readable> The Readable stream to listen to. This option is required.\noutput <stream.Writable> The Writable stream to write readline data to.\ncompleter <Function> An optional function used for Tab autocompletion.\nterminal <boolean> true if the input and output streams should be treated like a TTY, and have ANSI/VT100 escape codes written to it. Default: checking isTTY on the output stream upon instantiation.\nhistory <string[]> Initial list of history lines. This option makes sense only if terminal is set to true by the user or by an internal output check, otherwise the history caching mechanism is not initialized at all. Default: [].\nhistorySize <number> Maximum number of history lines retained. To disable the history set this value to 0. This option makes sense only if terminal is set to true by the user or by an internal output check, otherwise the history caching mechanism is not initialized at all. Default: 30.\nremoveHistoryDuplicates <boolean> If true, when a new input line added to the history list duplicates an older one, this removes the older line from the list. Default: false.\nprompt <string> The prompt string to use. Default: '> '.\ncrlfDelay <number> If the delay between \\r and \\n exceeds crlfDelay milliseconds, both \\r and \\n will be treated as separate end-of-line input. crlfDelay will be coerced to a number no less than 100. It can be set to Infinity, in which case \\r followed by \\n will always be considered a single newline (which may be reasonable for reading files with \\r\\n line delimiter). Default: 100.\nescapeCodeTimeout <number> The duration readlinePromises will wait for a character (when reading an ambiguous key sequence in milliseconds one that can both form a complete key sequence using the input read so far and can take additional input to complete a longer key sequence). Default: 500.\ntabSize <integer> The number of spaces a tab is equal to (minimum 1). Default: 8.\nReturns: <readlinePromises.Interface>\nThe readlinePromises.createInterface() method creates a new readlinePromises.Interface instance.\n\nconst readlinePromises = require('node:readline/promises');\nconst rl =", "doc_id": "dc592ea2-d70b-4e52-b33c-71442c5586d5", "embedding": null, "doc_hash": "0e51f553c9275988007c76341b086c69491e7ee40b853f8cf5d2e38eb7b83783", "extra_info": null, "node_info": {"start": 2118916, "end": 2122762}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c53073c0-cbee-4128-826e-b3746ab542da", "3": "1ac05ec4-e6ae-4a3c-8c88-86b4f4f20417"}}, "__type__": "1"}, "1ac05ec4-e6ae-4a3c-8c88-86b4f4f20417": {"__data__": {"text": "to a number no less than 100. It can be set to Infinity, in which case \\r followed by \\n will always be considered a single newline (which may be reasonable for reading files with \\r\\n line delimiter). Default: 100.\nescapeCodeTimeout <number> The duration readlinePromises will wait for a character (when reading an ambiguous key sequence in milliseconds one that can both form a complete key sequence using the input read so far and can take additional input to complete a longer key sequence). Default: 500.\ntabSize <integer> The number of spaces a tab is equal to (minimum 1). Default: 8.\nReturns: <readlinePromises.Interface>\nThe readlinePromises.createInterface() method creates a new readlinePromises.Interface instance.\n\nconst readlinePromises = require('node:readline/promises');\nconst rl = readlinePromises.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\nOnce the readlinePromises.Interface instance is created, the most common case is to listen for the 'line' event:\n\nrl.on('line', (line) => {\n  console.log(`Received: ${line}`);\n});\nIf terminal is true for this instance then the output stream will get the best compatibility if it defines an output.columns property and emits a 'resize' event on the output if or when the columns ever change (process.stdout does this automatically when it is a TTY).\n\nUse of the completer function#\nThe completer function takes the current line entered by the user as an argument, and returns an Array with 2 entries:\n\nAn Array with matching entries for the completion.\nThe substring that was used for the matching.\nFor instance: [[substr1, substr2, ...], originalsubstring].\n\nfunction completer(line) {\n  const completions = '.help .error .exit .quit .q'.split(' ');\n  const hits = completions.filter((c) => c.startsWith(line));\n  // Show all completions if none found\n  return [hits.length ? hits : completions, line];\n}\nThe completer function can also returns a <Promise>, or be asynchronous:\n\nasync function completer(linePartial) {\n  await someAsyncWork();\n  return [['123'], linePartial];\n}\nCallback API#\nAdded in: v0.1.104\nClass: readline.Interface#\nHistory\nExtends: <readline.InterfaceConstructor>\nInstances of the readline.Interface class are constructed using the readline.createInterface() method. Every instance is associated with a single input Readable stream and a single output Writable stream. The output stream is used to print prompts for user input that arrives on, and is read from, the input stream.\n\nrl.question(query[, options], callback)#\nAdded in: v0.3.3\nquery <string> A statement or query to write to output, prepended to the prompt.\noptions <Object>\nsignal <AbortSignal> Optionally allows the question() to be canceled using an AbortController.\ncallback <Function> A callback function that is invoked with the user's input in response to the query.\nThe rl.question() method displays the query by writing it to the output, waits for user input to be provided on input, then invokes the callback function passing the provided input as the first argument.\n\nWhen called, rl.question() will resume the input stream if it has been paused.\n\nIf the readline.Interface was created with output set to null or undefined the query is not written.\n\nThe callback function passed to rl.question() does not follow the typical pattern of accepting an Error object or null as the first argument. The callback is called with the provided answer as the only argument.\n\nAn error will be thrown if calling rl.question() after rl.close().\n\nExample usage:\n\nrl.question('What is your favorite food? ', (answer) => {\n  console.log(`Oh, so your favorite food is ${answer}`);\n});\nUsing an AbortController to cancel a question.\n\nconst ac = new AbortController();\nconst signal = ac.signal;\n\nrl.question('What is your favorite", "doc_id": "1ac05ec4-e6ae-4a3c-8c88-86b4f4f20417", "embedding": null, "doc_hash": "2198549329a9f03f6ec2b4bbb9f20587065000e5626df2bc741cc18946482e42", "extra_info": null, "node_info": {"start": 2122738, "end": 2126532}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dc592ea2-d70b-4e52-b33c-71442c5586d5", "3": "874bd209-ce70-4314-b0d9-554121aa5dda"}}, "__type__": "1"}, "874bd209-ce70-4314-b0d9-554121aa5dda": {"__data__": {"text": "the first argument.\n\nWhen called, rl.question() will resume the input stream if it has been paused.\n\nIf the readline.Interface was created with output set to null or undefined the query is not written.\n\nThe callback function passed to rl.question() does not follow the typical pattern of accepting an Error object or null as the first argument. The callback is called with the provided answer as the only argument.\n\nAn error will be thrown if calling rl.question() after rl.close().\n\nExample usage:\n\nrl.question('What is your favorite food? ', (answer) => {\n  console.log(`Oh, so your favorite food is ${answer}`);\n});\nUsing an AbortController to cancel a question.\n\nconst ac = new AbortController();\nconst signal = ac.signal;\n\nrl.question('What is your favorite food? ', { signal }, (answer) => {\n  console.log(`Oh, so your favorite food is ${answer}`);\n});\n\nsignal.addEventListener('abort', () => {\n  console.log('The food question timed out');\n}, { once: true });\n\nsetTimeout(() => ac.abort(), 10000);\nreadline.clearLine(stream, dir[, callback])#\nHistory\nstream <stream.Writable>\ndir <number>\n-1: to the left from cursor\n1: to the right from cursor\n0: the entire line\ncallback <Function> Invoked once the operation completes.\nReturns: <boolean> false if stream wishes for the calling code to wait for the 'drain' event to be emitted before continuing to write additional data; otherwise true.\nThe readline.clearLine() method clears current line of given TTY stream in a specified direction identified by dir.\n\nreadline.clearScreenDown(stream[, callback])#\nHistory\nstream <stream.Writable>\ncallback <Function> Invoked once the operation completes.\nReturns: <boolean> false if stream wishes for the calling code to wait for the 'drain' event to be emitted before continuing to write additional data; otherwise true.\nThe readline.clearScreenDown() method clears the given TTY stream from the current position of the cursor down.\n\nreadline.createInterface(options)#\nHistory\noptions <Object>\ninput <stream.Readable> The Readable stream to listen to. This option is required.\noutput <stream.Writable> The Writable stream to write readline data to.\ncompleter <Function> An optional function used for Tab autocompletion.\nterminal <boolean> true if the input and output streams should be treated like a TTY, and have ANSI/VT100 escape codes written to it. Default: checking isTTY on the output stream upon instantiation.\nhistory <string[]> Initial list of history lines. This option makes sense only if terminal is set to true by the user or by an internal output check, otherwise the history caching mechanism is not initialized at all. Default: [].\nhistorySize <number> Maximum number of history lines retained. To disable the history set this value to 0. This option makes sense only if terminal is set to true by the user or by an internal output check, otherwise the history caching mechanism is not initialized at all. Default: 30.\nremoveHistoryDuplicates <boolean> If true, when a new input line added to the history list duplicates an older one, this removes the older line from the list. Default: false.\nprompt <string> The prompt string to use. Default: '> '.\ncrlfDelay <number> If the delay between \\r and \\n exceeds crlfDelay milliseconds, both \\r and \\n will be treated as separate end-of-line input. crlfDelay will be coerced to a number no less than 100. It can be set to Infinity, in which case \\r followed by \\n will always be considered a single newline (which may be reasonable for reading files with \\r\\n line delimiter). Default: 100.\nescapeCodeTimeout <number> The duration readline will wait for a character (when reading an ambiguous key sequence in milliseconds one that can both form a complete key sequence using the input read so far and can take additional input to complete a longer key sequence). Default: 500.\ntabSize <integer> The number of spaces a tab is equal to (minimum", "doc_id": "874bd209-ce70-4314-b0d9-554121aa5dda", "embedding": null, "doc_hash": "8a5c953589e19de21c94f87bd74854ec5f752b9518c32eb8179c46be0b60398b", "extra_info": null, "node_info": {"start": 2126564, "end": 2130465}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1ac05ec4-e6ae-4a3c-8c88-86b4f4f20417", "3": "488d2714-8e1d-4c55-a427-1a494c40ed52"}}, "__type__": "1"}, "488d2714-8e1d-4c55-a427-1a494c40ed52": {"__data__": {"text": "string to use. Default: '> '.\ncrlfDelay <number> If the delay between \\r and \\n exceeds crlfDelay milliseconds, both \\r and \\n will be treated as separate end-of-line input. crlfDelay will be coerced to a number no less than 100. It can be set to Infinity, in which case \\r followed by \\n will always be considered a single newline (which may be reasonable for reading files with \\r\\n line delimiter). Default: 100.\nescapeCodeTimeout <number> The duration readline will wait for a character (when reading an ambiguous key sequence in milliseconds one that can both form a complete key sequence using the input read so far and can take additional input to complete a longer key sequence). Default: 500.\ntabSize <integer> The number of spaces a tab is equal to (minimum 1). Default: 8.\nsignal <AbortSignal> Allows closing the interface using an AbortSignal. Aborting the signal will internally call close on the interface.\nReturns: <readline.Interface>\nThe readline.createInterface() method creates a new readline.Interface instance.\n\nconst readline = require('node:readline');\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\nOnce the readline.Interface instance is created, the most common case is to listen for the 'line' event:\n\nrl.on('line', (line) => {\n  console.log(`Received: ${line}`);\n});\nIf terminal is true for this instance then the output stream will get the best compatibility if it defines an output.columns property and emits a 'resize' event on the output if or when the columns ever change (process.stdout does this automatically when it is a TTY).\n\nWhen creating a readline.Interface using stdin as input, the program will not terminate until it receives an EOF character. To exit without waiting for user input, call process.stdin.unref().\n\nUse of the completer function#\nThe completer function takes the current line entered by the user as an argument, and returns an Array with 2 entries:\n\nAn Array with matching entries for the completion.\nThe substring that was used for the matching.\nFor instance: [[substr1, substr2, ...], originalsubstring].\n\nfunction completer(line) {\n  const completions = '.help .error .exit .quit .q'.split(' ');\n  const hits = completions.filter((c) => c.startsWith(line));\n  // Show all completions if none found\n  return [hits.length ? hits : completions, line];\n}\nThe completer function can be called asynchronously if it accepts two arguments:\n\nfunction completer(linePartial, callback) {\n  callback(null, [['123'], linePartial]);\n}\nreadline.cursorTo(stream, x[, y][, callback])#\nHistory\nstream <stream.Writable>\nx <number>\ny <number>\ncallback <Function> Invoked once the operation completes.\nReturns: <boolean> false if stream wishes for the calling code to wait for the 'drain' event to be emitted before continuing to write additional data; otherwise true.\nThe readline.cursorTo() method moves cursor to the specified position in a given TTY stream.\n\nreadline.moveCursor(stream, dx, dy[, callback])#\nHistory\nstream <stream.Writable>\ndx <number>\ndy <number>\ncallback <Function> Invoked once the operation completes.\nReturns: <boolean> false if stream wishes for the calling code to wait for the 'drain' event to be emitted before continuing to write additional data; otherwise true.\nThe readline.moveCursor() method moves the cursor relative to its current position in a given TTY stream.\n\nreadline.emitKeypressEvents(stream[, interface])#\nAdded in: v0.7.7\nstream <stream.Readable>\ninterface <readline.InterfaceConstructor>\nThe readline.emitKeypressEvents() method causes the given Readable stream to begin emitting 'keypress' events corresponding to received", "doc_id": "488d2714-8e1d-4c55-a427-1a494c40ed52", "embedding": null, "doc_hash": "736aa0f0468d5780dac2f3979e35c159386be11ca50b9b0e2b8c16875fa71dec", "extra_info": null, "node_info": {"start": 2130482, "end": 2134138}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "874bd209-ce70-4314-b0d9-554121aa5dda", "3": "c8d4ba5a-1b6e-410a-852f-9b929fc98fcb"}}, "__type__": "1"}, "c8d4ba5a-1b6e-410a-852f-9b929fc98fcb": {"__data__": {"text": "dx, dy[, callback])#\nHistory\nstream <stream.Writable>\ndx <number>\ndy <number>\ncallback <Function> Invoked once the operation completes.\nReturns: <boolean> false if stream wishes for the calling code to wait for the 'drain' event to be emitted before continuing to write additional data; otherwise true.\nThe readline.moveCursor() method moves the cursor relative to its current position in a given TTY stream.\n\nreadline.emitKeypressEvents(stream[, interface])#\nAdded in: v0.7.7\nstream <stream.Readable>\ninterface <readline.InterfaceConstructor>\nThe readline.emitKeypressEvents() method causes the given Readable stream to begin emitting 'keypress' events corresponding to received input.\n\nOptionally, interface specifies a readline.Interface instance for which autocompletion is disabled when copy-pasted input is detected.\n\nIf the stream is a TTY, then it must be in raw mode.\n\nThis is automatically called by any readline instance on its input if the input is a terminal. Closing the readline instance does not stop the input from emitting 'keypress' events.\n\nreadline.emitKeypressEvents(process.stdin);\nif (process.stdin.isTTY)\n  process.stdin.setRawMode(true);\nExample: Tiny CLI#\nThe following example illustrates the use of readline.Interface class to implement a small command-line interface:\n\nconst readline = require('node:readline');\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  prompt: 'OHAI> ',\n});\n\nrl.prompt();\n\nrl.on('line', (line) => {\n  switch (line.trim()) {\n    case 'hello':\n      console.log('world!');\n      break;\n    default:\n      console.log(`Say what? I might have heard '${line.trim()}'`);\n      break;\n  }\n  rl.prompt();\n}).on('close', () => {\n  console.log('Have a great day!');\n  process.exit(0);\n});\nExample: Read file stream line-by-Line#\nA common use case for readline is to consume an input file one line at a time. The easiest way to do so is leveraging the fs.ReadStream API as well as a for await...of loop:\n\nconst fs = require('node:fs');\nconst readline = require('node:readline');\n\nasync function processLineByLine() {\n  const fileStream = fs.createReadStream('input.txt');\n\n  const rl = readline.createInterface({\n    input: fileStream,\n    crlfDelay: Infinity,\n  });\n  // Note: we use the crlfDelay option to recognize all instances of CR LF\n  // ('\\r\\n') in input.txt as a single line break.\n\n  for await (const line of rl) {\n    // Each line in input.txt will be successively available here as `line`.\n    console.log(`Line from file: ${line}`);\n  }\n}\n\nprocessLineByLine();\nAlternatively, one could use the 'line' event:\n\nconst fs = require('node:fs');\nconst readline = require('node:readline');\n\nconst rl = readline.createInterface({\n  input: fs.createReadStream('sample.txt'),\n  crlfDelay: Infinity,\n});\n\nrl.on('line', (line) => {\n  console.log(`Line from file: ${line}`);\n});\nCurrently, for await...of loop can be a bit slower. If async / await flow and speed are both essential, a mixed approach can be applied:\n\nconst { once } = require('node:events');\nconst { createReadStream } = require('node:fs');\nconst { createInterface } = require('node:readline');\n\n(async function processLineByLine() {\n  try {\n    const rl = createInterface({\n      input:", "doc_id": "c8d4ba5a-1b6e-410a-852f-9b929fc98fcb", "embedding": null, "doc_hash": "9b8db5375c78d1a4230372aaae85dfa49e58795c28617c28ee6638b76d11d663", "extra_info": null, "node_info": {"start": 2134172, "end": 2137412}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "488d2714-8e1d-4c55-a427-1a494c40ed52", "3": "dc6fab6b-aed4-414f-8a3b-60ed4d36a822"}}, "__type__": "1"}, "dc6fab6b-aed4-414f-8a3b-60ed4d36a822": {"__data__": {"text": "require('node:fs');\nconst readline = require('node:readline');\n\nconst rl = readline.createInterface({\n  input: fs.createReadStream('sample.txt'),\n  crlfDelay: Infinity,\n});\n\nrl.on('line', (line) => {\n  console.log(`Line from file: ${line}`);\n});\nCurrently, for await...of loop can be a bit slower. If async / await flow and speed are both essential, a mixed approach can be applied:\n\nconst { once } = require('node:events');\nconst { createReadStream } = require('node:fs');\nconst { createInterface } = require('node:readline');\n\n(async function processLineByLine() {\n  try {\n    const rl = createInterface({\n      input: createReadStream('big-file.txt'),\n      crlfDelay: Infinity,\n    });\n\n    rl.on('line', (line) => {\n      // Process the line.\n    });\n\n    await once(rl, 'close');\n\n    console.log('File processed.');\n  } catch (err) {\n    console.error(err);\n  }\n})();\nTTY keybindings#\nKeybindings\tDescription\tNotes\nCtrl+Shift+Backspace\tDelete line left\tDoesn't work on Linux, Mac and Windows\nCtrl+Shift+Delete\tDelete line right\tDoesn't work on Mac\nCtrl+C\tEmit SIGINT or close the readline instance\t\nCtrl+H\tDelete left\t\nCtrl+D\tDelete right or close the readline instance in case the current line is empty / EOF\tDoesn't work on Windows\nCtrl+U\tDelete from the current position to the line start\t\nCtrl+K\tDelete from the current position to the end of line\t\nCtrl+Y\tYank (Recall) the previously deleted text\tOnly works with text deleted by Ctrl+U or Ctrl+K\nMeta+Y\tCycle among previously deleted lines\tOnly available when the last keystroke is Ctrl+Y\nCtrl+A\tGo to start of line\t\nCtrl+E\tGo to end of line\t\nCtrl+B\tBack one character\t\nCtrl+F\tForward one character\t\nCtrl+L\tClear screen\t\nCtrl+N\tNext history item\t\nCtrl+P\tPrevious history item\t\nCtrl+-\tUndo previous change\tAny keystroke that emits key code 0x1F will do this action. In many terminals, for example xterm, this is bound to Ctrl+-.\nCtrl+6\tRedo previous change\tMany terminals don't have a default redo keystroke. We choose key code 0x1E to perform redo. In xterm, it is bound to Ctrl+6 by default.\nCtrl+Z\tMoves running process into background. Type fg and press Enter to return.\tDoesn't work on Windows\nCtrl+W or Ctrl +Backspace\tDelete backward to a word boundary\tCtrl+Backspace Doesn't work on Linux, Mac and Windows\nCtrl+Delete\tDelete forward to a word boundary\tDoesn't work on Mac\nCtrl+Left arrow or Meta+B\tWord left\tCtrl+Left arrow Doesn't work on Mac\nCtrl+Right arrow or Meta+F\tWord right\tCtrl+Right arrow Doesn't work on Mac\nMeta+D or Meta +Delete\tDelete word right\tMeta+Delete Doesn't work on windows\nMeta+Backspace\tDelete word left\tDoesn't work on Mac\nREPL#\nStability: 2 - Stable\nSource Code: lib/repl.js\n\nThe node:repl module provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications. It can be accessed using:\n\nconst repl = require('node:repl');\nDesign and features#\nThe node:repl module exports the repl.REPLServer class. While running, instances of repl.REPLServer will accept individual lines of user input, evaluate those according to a user-defined evaluation function, then output the result. Input and output may be from stdin and stdout, respectively, or may be connected to any Node.js stream.\n\nInstances of repl.REPLServer support automatic completion of inputs, completion preview, simplistic", "doc_id": "dc6fab6b-aed4-414f-8a3b-60ed4d36a822", "embedding": null, "doc_hash": "fcf6b1516433a2ea6fab7dc069395ca403412dc0a935c2f3d2d65fe012761980", "extra_info": null, "node_info": {"start": 2137478, "end": 2140827}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c8d4ba5a-1b6e-410a-852f-9b929fc98fcb", "3": "5a30cd38-e618-4652-a89a-e56870fd0260"}}, "__type__": "1"}, "5a30cd38-e618-4652-a89a-e56870fd0260": {"__data__": {"text": "word left\tDoesn't work on Mac\nREPL#\nStability: 2 - Stable\nSource Code: lib/repl.js\n\nThe node:repl module provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications. It can be accessed using:\n\nconst repl = require('node:repl');\nDesign and features#\nThe node:repl module exports the repl.REPLServer class. While running, instances of repl.REPLServer will accept individual lines of user input, evaluate those according to a user-defined evaluation function, then output the result. Input and output may be from stdin and stdout, respectively, or may be connected to any Node.js stream.\n\nInstances of repl.REPLServer support automatic completion of inputs, completion preview, simplistic Emacs-style line editing, multi-line inputs, ZSH-like reverse-i-search, ZSH-like substring-based history search, ANSI-styled output, saving and restoring current REPL session state, error recovery, and customizable evaluation functions. Terminals that do not support ANSI styles and Emacs-style line editing automatically fall back to a limited feature set.\n\nCommands and special keys#\nThe following special commands are supported by all REPL instances:\n\n.break: When in the process of inputting a multi-line expression, enter the .break command (or press Ctrl+C) to abort further input or processing of that expression.\n.clear: Resets the REPL context to an empty object and clears any multi-line expression being input.\n.exit: Close the I/O stream, causing the REPL to exit.\n.help: Show this list of special commands.\n.save: Save the current REPL session to a file: > .save ./file/to/save.js\n.load: Load a file into the current REPL session. > .load ./file/to/load.js\n.editor: Enter editor mode (Ctrl+D to finish, Ctrl+C to cancel).\n> .editor\n// Entering editor mode (^D to finish, ^C to cancel)\nfunction welcome(name) {\n  return `Hello ${name}!`;\n}\n\nwelcome('Node.js User');\n\n// ^D\n'Hello Node.js User!'\n>\nThe following key combinations in the REPL have these special effects:\n\nCtrl+C: When pressed once, has the same effect as the .break command. When pressed twice on a blank line, has the same effect as the .exit command.\nCtrl+D: Has the same effect as the .exit command.\nTab: When pressed on a blank line, displays global and local (scope) variables. When pressed while entering other input, displays relevant autocompletion options.\nFor key bindings related to the reverse-i-search, see reverse-i-search. For all other key bindings, see TTY keybindings.\n\nDefault evaluation#\nBy default, all instances of repl.REPLServer use an evaluation function that evaluates JavaScript expressions and provides access to Node.js built-in modules. This default behavior can be overridden by passing in an alternative evaluation function when the repl.REPLServer instance is created.\n\nJavaScript expressions#\nThe default evaluator supports direct evaluation of JavaScript expressions:\n\n> 1 + 1\n2\n> const m = 2\nundefined\n> m + 1\n3\nUnless otherwise scoped within blocks or functions, variables declared either implicitly or using the const, let, or var keywords are declared at the global scope.\n\nGlobal and local scope#\nThe default evaluator provides access to any variables that exist in the global scope. It is possible to expose a variable to the REPL explicitly by assigning it to the context object associated with each REPLServer:\n\nconst repl = require('node:repl');\nconst msg = 'message';\n\nrepl.start('> ').context.m = msg;\nProperties in the context object appear as local within the REPL:\n\n$ node repl_test.js\n> m\n'message'\nContext properties are not read-only by default. To specify read-only globals, context properties must be defined using Object.defineProperty():\n\nconst repl = require('node:repl');\nconst", "doc_id": "5a30cd38-e618-4652-a89a-e56870fd0260", "embedding": null, "doc_hash": "05de5967b1c730be2536f285210f1f577af86ccb568e6de4d04679a5c296bc52", "extra_info": null, "node_info": {"start": 2140705, "end": 2144479}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dc6fab6b-aed4-414f-8a3b-60ed4d36a822", "3": "cb0dc0b4-5ada-4f50-b7f5-99696a42523c"}}, "__type__": "1"}, "cb0dc0b4-5ada-4f50-b7f5-99696a42523c": {"__data__": {"text": "within blocks or functions, variables declared either implicitly or using the const, let, or var keywords are declared at the global scope.\n\nGlobal and local scope#\nThe default evaluator provides access to any variables that exist in the global scope. It is possible to expose a variable to the REPL explicitly by assigning it to the context object associated with each REPLServer:\n\nconst repl = require('node:repl');\nconst msg = 'message';\n\nrepl.start('> ').context.m = msg;\nProperties in the context object appear as local within the REPL:\n\n$ node repl_test.js\n> m\n'message'\nContext properties are not read-only by default. To specify read-only globals, context properties must be defined using Object.defineProperty():\n\nconst repl = require('node:repl');\nconst msg = 'message';\n\nconst r = repl.start('> ');\nObject.defineProperty(r.context, 'm', {\n  configurable: false,\n  enumerable: true,\n  value: msg,\n});\nAccessing core Node.js modules#\nThe default evaluator will automatically load Node.js core modules into the REPL environment when used. For instance, unless otherwise declared as a global or scoped variable, the input fs will be evaluated on-demand as global.fs = require('node:fs').\n\n> fs.createReadStream('./some/file');\nGlobal uncaught exceptions#\nHistory\nThe REPL uses the domain module to catch all uncaught exceptions for that REPL session.\n\nThis use of the domain module in the REPL has these side effects:\n\nUncaught exceptions only emit the 'uncaughtException' event in the standalone REPL. Adding a listener for this event in a REPL within another Node.js program results in ERR_INVALID_REPL_INPUT.\n\nconst r = repl.start();\n\nr.write('process.on(\"uncaughtException\", () => console.log(\"Foobar\"));\\n');\n// Output stream includes:\n//   TypeError [ERR_INVALID_REPL_INPUT]: Listeners for `uncaughtException`\n//   cannot be used in the REPL\n\nr.close();\nTrying to use process.setUncaughtExceptionCaptureCallback() throws an ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE error.\n\nAssignment of the _ (underscore) variable#\nHistory\nThe default evaluator will, by default, assign the result of the most recently evaluated expression to the special variable _ (underscore). Explicitly setting _ to a value will disable this behavior.\n\n> [ 'a', 'b', 'c' ]\n[ 'a', 'b', 'c' ]\n> _.length\n3\n> _ += 1\nExpression assignment to _ now disabled.\n4\n> 1 + 1\n2\n> _\n4\nSimilarly, _error will refer to the last seen error, if there was any. Explicitly setting _error to a value will disable this behavior.\n\n> throw new Error('foo');\nUncaught Error: foo\n> _error.message\n'foo'\nawait keyword#\nSupport for the await keyword is enabled at the top level.\n\n> await Promise.resolve(123)\n123\n> await Promise.reject(new Error('REPL await'))\nUncaught Error: REPL await\n    at REPL2:1:54\n> const timeout = util.promisify(setTimeout);\nundefined\n> const old = Date.now(); await timeout(1000); console.log(Date.now() - old);\n1002\nundefined\nOne known limitation of using the await keyword in the REPL is that it will invalidate the lexical scoping of the const and let keywords.\n\nFor example:\n\n> const m = await Promise.resolve(123)\nundefined\n> m\n123\n> const m = await Promise.resolve(234)\nundefined\n> m\n234\n--no-experimental-repl-await shall disable top-level await in REPL.\n\nReverse-i-search#\nAdded in: v13.6.0, v12.17.0\nThe REPL supports bi-directional", "doc_id": "cb0dc0b4-5ada-4f50-b7f5-99696a42523c", "embedding": null, "doc_hash": "f3b5c12e5bb55eae2a1ae1a23eccd69ce69d68710e8c3ca0ab29fd3c736edbb6", "extra_info": null, "node_info": {"start": 2144483, "end": 2147818}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5a30cd38-e618-4652-a89a-e56870fd0260", "3": "d114c4d8-81e0-46dd-b0bc-fd602a7241ce"}}, "__type__": "1"}, "d114c4d8-81e0-46dd-b0bc-fd602a7241ce": {"__data__": {"text": "const timeout = util.promisify(setTimeout);\nundefined\n> const old = Date.now(); await timeout(1000); console.log(Date.now() - old);\n1002\nundefined\nOne known limitation of using the await keyword in the REPL is that it will invalidate the lexical scoping of the const and let keywords.\n\nFor example:\n\n> const m = await Promise.resolve(123)\nundefined\n> m\n123\n> const m = await Promise.resolve(234)\nundefined\n> m\n234\n--no-experimental-repl-await shall disable top-level await in REPL.\n\nReverse-i-search#\nAdded in: v13.6.0, v12.17.0\nThe REPL supports bi-directional reverse-i-search similar to ZSH. It is triggered with Ctrl+R to search backward and Ctrl+S to search forwards.\n\nDuplicated history entries will be skipped.\n\nEntries are accepted as soon as any key is pressed that doesn't correspond with the reverse search. Cancelling is possible by pressing Esc or Ctrl+C.\n\nChanging the direction immediately searches for the next entry in the expected direction from the current position on.\n\nCustom evaluation functions#\nWhen a new repl.REPLServer is created, a custom evaluation function may be provided. This can be used, for instance, to implement fully customized REPL applications.\n\nThe following illustrates a hypothetical example of a REPL that performs translation of text from one language to another:\n\nconst repl = require('node:repl');\nconst { Translator } = require('translator');\n\nconst myTranslator = new Translator('en', 'fr');\n\nfunction myEval(cmd, context, filename, callback) {\n  callback(null, myTranslator.translate(cmd));\n}\n\nrepl.start({ prompt: '> ', eval: myEval });\nRecoverable errors#\nAt the REPL prompt, pressing Enter sends the current line of input to the eval function. In order to support multi-line input, the eval function can return an instance of repl.Recoverable to the provided callback function:\n\nfunction myEval(cmd, context, filename, callback) {\n  let result;\n  try {\n    result = vm.runInThisContext(cmd);\n  } catch (e) {\n    if (isRecoverableError(e)) {\n      return callback(new repl.Recoverable(e));\n    }\n  }\n  callback(null, result);\n}\n\nfunction isRecoverableError(error) {\n  if (error.name === 'SyntaxError') {\n    return /^(Unexpected end of input|Unexpected token)/.test(error.message);\n  }\n  return false;\n}\nCustomizing REPL output#\nBy default, repl.REPLServer instances format output using the util.inspect() method before writing the output to the provided Writable stream (process.stdout by default). The showProxy inspection option is set to true by default and the colors option is set to true depending on the REPL's useColors option.\n\nThe useColors boolean option can be specified at construction to instruct the default writer to use ANSI style codes to colorize the output from the util.inspect() method.\n\nIf the REPL is run as standalone program, it is also possible to change the REPL's inspection defaults from inside the REPL by using the inspect.replDefaults property which mirrors the defaultOptions from util.inspect().\n\n> util.inspect.replDefaults.compact = false;\nfalse\n> [1]\n[\n  1\n]\n>\nTo fully customize the output of a repl.REPLServer instance pass in a new function for the writer option on construction. The following example, for instance, simply converts any input text to upper case:\n\nconst repl = require('node:repl');\n\nconst r = repl.start({ prompt: '> ', eval: myEval, writer: myWriter });\n\nfunction myEval(cmd, context, filename, callback) {\n  callback(null, cmd);\n}\n\nfunction myWriter(output) {\n  return", "doc_id": "d114c4d8-81e0-46dd-b0bc-fd602a7241ce", "embedding": null, "doc_hash": "f91b5b854aba54809642693db67a2ef55721214353b4614c19befecacc339863", "extra_info": null, "node_info": {"start": 2147981, "end": 2151462}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cb0dc0b4-5ada-4f50-b7f5-99696a42523c", "3": "a4cc352b-2e7d-4663-989d-f873e9003929"}}, "__type__": "1"}, "a4cc352b-2e7d-4663-989d-f873e9003929": {"__data__": {"text": "standalone program, it is also possible to change the REPL's inspection defaults from inside the REPL by using the inspect.replDefaults property which mirrors the defaultOptions from util.inspect().\n\n> util.inspect.replDefaults.compact = false;\nfalse\n> [1]\n[\n  1\n]\n>\nTo fully customize the output of a repl.REPLServer instance pass in a new function for the writer option on construction. The following example, for instance, simply converts any input text to upper case:\n\nconst repl = require('node:repl');\n\nconst r = repl.start({ prompt: '> ', eval: myEval, writer: myWriter });\n\nfunction myEval(cmd, context, filename, callback) {\n  callback(null, cmd);\n}\n\nfunction myWriter(output) {\n  return output.toUpperCase();\n}\nClass: REPLServer#\nAdded in: v0.1.91\noptions <Object> | <string> See repl.start()\nExtends: <readline.Interface>\nInstances of repl.REPLServer are created using the repl.start() method or directly using the JavaScript new keyword.\n\nconst repl = require('node:repl');\n\nconst options = { useColors: true };\n\nconst firstInstance = repl.start(options);\nconst secondInstance = new repl.REPLServer(options);\nEvent: 'exit'#\nAdded in: v0.7.7\nThe 'exit' event is emitted when the REPL is exited either by receiving the .exit command as input, the user pressing Ctrl+C twice to signal SIGINT, or by pressing Ctrl+D to signal 'end' on the input stream. The listener callback is invoked without any arguments.\n\nreplServer.on('exit', () => {\n  console.log('Received \"exit\" event from repl!');\n  process.exit();\n});\nEvent: 'reset'#\nAdded in: v0.11.0\nThe 'reset' event is emitted when the REPL's context is reset. This occurs whenever the .clear command is received as input unless the REPL is using the default evaluator and the repl.REPLServer instance was created with the useGlobal option set to true. The listener callback will be called with a reference to the context object as the only argument.\n\nThis can be used primarily to re-initialize REPL context to some pre-defined state:\n\nconst repl = require('node:repl');\n\nfunction initializeContext(context) {\n  context.m = 'test';\n}\n\nconst r = repl.start({ prompt: '> ' });\ninitializeContext(r.context);\n\nr.on('reset', initializeContext);\nWhen this code is executed, the global 'm' variable can be modified but then reset to its initial value using the .clear command:\n\n$ ./node example.js\n> m\n'test'\n> m = 1\n1\n> m\n1\n> .clear\nClearing context...\n> m\n'test'\n>\nreplServer.defineCommand(keyword, cmd)#\nAdded in: v0.3.0\nkeyword <string> The command keyword (without a leading . character).\ncmd <Object> | <Function> The function to invoke when the command is processed.\nThe replServer.defineCommand() method is used to add new .-prefixed commands to the REPL instance. Such commands are invoked by typing a . followed by the keyword. The cmd is either a Function or an Object with the following properties:\n\nhelp <string> Help text to be displayed when .help is entered (Optional).\naction <Function> The function to execute, optionally accepting a single string argument.\nThe following example shows two new commands added to the REPL instance:\n\nconst repl = require('node:repl');\n\nconst replServer = repl.start({ prompt: '> ' });\nreplServer.defineCommand('sayhello', {\n  help: 'Say hello',\n  action(name) {\n    this.clearBufferedCommand();\n    console.log(`Hello, ${name}!`);\n    this.displayPrompt();\n  },\n});\nreplServer.defineCommand('saybye', function saybye() {\n  console.log('Goodbye!');\n  this.close();\n});\nThe new", "doc_id": "a4cc352b-2e7d-4663-989d-f873e9003929", "embedding": null, "doc_hash": "443d0f9de6a0d41153df58c1055488b9f19baaf1e61952a64e0633a8741831c9", "extra_info": null, "node_info": {"start": 2151357, "end": 2154833}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d114c4d8-81e0-46dd-b0bc-fd602a7241ce", "3": "75219c29-cfb4-4da3-8d68-f654a9dd90a8"}}, "__type__": "1"}, "75219c29-cfb4-4da3-8d68-f654a9dd90a8": {"__data__": {"text": "a Function or an Object with the following properties:\n\nhelp <string> Help text to be displayed when .help is entered (Optional).\naction <Function> The function to execute, optionally accepting a single string argument.\nThe following example shows two new commands added to the REPL instance:\n\nconst repl = require('node:repl');\n\nconst replServer = repl.start({ prompt: '> ' });\nreplServer.defineCommand('sayhello', {\n  help: 'Say hello',\n  action(name) {\n    this.clearBufferedCommand();\n    console.log(`Hello, ${name}!`);\n    this.displayPrompt();\n  },\n});\nreplServer.defineCommand('saybye', function saybye() {\n  console.log('Goodbye!');\n  this.close();\n});\nThe new commands can then be used from within the REPL instance:\n\n> .sayhello Node.js User\nHello, Node.js User!\n> .saybye\nGoodbye!\nreplServer.displayPrompt([preserveCursor])#\nAdded in: v0.1.91\npreserveCursor <boolean>\nThe replServer.displayPrompt() method readies the REPL instance for input from the user, printing the configured prompt to a new line in the output and resuming the input to accept new input.\n\nWhen multi-line input is being entered, an ellipsis is printed rather than the 'prompt'.\n\nWhen preserveCursor is true, the cursor placement will not be reset to 0.\n\nThe replServer.displayPrompt method is primarily intended to be called from within the action function for commands registered using the replServer.defineCommand() method.\n\nreplServer.clearBufferedCommand()#\nAdded in: v9.0.0\nThe replServer.clearBufferedCommand() method clears any command that has been buffered but not yet executed. This method is primarily intended to be called from within the action function for commands registered using the replServer.defineCommand() method.\n\nreplServer.parseREPLKeyword(keyword[, rest])#\nAdded in: v0.8.9Deprecated since: v9.0.0\nStability: 0 - Deprecated.\nkeyword <string> the potential keyword to parse and execute\nrest <any> any parameters to the keyword command\nReturns: <boolean>\nAn internal method used to parse and execute REPLServer keywords. Returns true if keyword is a valid keyword, otherwise false.\n\nreplServer.setupHistory(historyPath, callback)#\nAdded in: v11.10.0\nhistoryPath <string> the path to the history file\ncallback <Function> called when history writes are ready or upon error\nerr <Error>\nrepl <repl.REPLServer>\nInitializes a history log file for the REPL instance. When executing the Node.js binary and using the command-line REPL, a history file is initialized by default. However, this is not the case when creating a REPL programmatically. Use this method to initialize a history log file when working with REPL instances programmatically.\n\nrepl.builtinModules#\nAdded in: v14.5.0\n<string[]>\nA list of the names of all Node.js modules, e.g., 'http'.\n\nrepl.start([options])#\nHistory\noptions <Object> | <string>\nprompt <string> The input prompt to display. Default: '> ' (with a trailing space).\ninput <stream.Readable> The Readable stream from which REPL input will be read. Default: process.stdin.\noutput <stream.Writable> The Writable stream to which REPL output will be written. Default: process.stdout.\nterminal <boolean> If true, specifies that the output should be treated as a TTY terminal. Default: checking the value of the isTTY property on the output stream upon instantiation.\neval <Function> The function to be used when evaluating each given line of input. Default: an async wrapper for the JavaScript eval() function. An eval function can error with repl.Recoverable to indicate the input was incomplete and prompt for additional lines.\nuseColors <boolean> If true, specifies that the default writer function should include ANSI color styling to REPL output. If a custom writer function is provided then this has no effect. Default:", "doc_id": "75219c29-cfb4-4da3-8d68-f654a9dd90a8", "embedding": null, "doc_hash": "f7c5a73d5be0a727ebd8554595a0cf7be75f7c8b91b54e547769bb9a8134e739", "extra_info": null, "node_info": {"start": 2154853, "end": 2158604}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a4cc352b-2e7d-4663-989d-f873e9003929", "3": "a58acca8-560e-45f4-bae3-b85e956723c8"}}, "__type__": "1"}, "a58acca8-560e-45f4-bae3-b85e956723c8": {"__data__": {"text": "The Readable stream from which REPL input will be read. Default: process.stdin.\noutput <stream.Writable> The Writable stream to which REPL output will be written. Default: process.stdout.\nterminal <boolean> If true, specifies that the output should be treated as a TTY terminal. Default: checking the value of the isTTY property on the output stream upon instantiation.\neval <Function> The function to be used when evaluating each given line of input. Default: an async wrapper for the JavaScript eval() function. An eval function can error with repl.Recoverable to indicate the input was incomplete and prompt for additional lines.\nuseColors <boolean> If true, specifies that the default writer function should include ANSI color styling to REPL output. If a custom writer function is provided then this has no effect. Default: checking color support on the output stream if the REPL instance's terminal value is true.\nuseGlobal <boolean> If true, specifies that the default evaluation function will use the JavaScript global as the context as opposed to creating a new separate context for the REPL instance. The node CLI REPL sets this value to true. Default: false.\nignoreUndefined <boolean> If true, specifies that the default writer will not output the return value of a command if it evaluates to undefined. Default: false.\nwriter <Function> The function to invoke to format the output of each command before writing to output. Default: util.inspect().\ncompleter <Function> An optional function used for custom Tab auto completion. See readline.InterfaceCompleter for an example.\nreplMode <symbol> A flag that specifies whether the default evaluator executes all JavaScript commands in strict mode or default (sloppy) mode. Acceptable values are:\nrepl.REPL_MODE_SLOPPY to evaluate expressions in sloppy mode.\nrepl.REPL_MODE_STRICT to evaluate expressions in strict mode. This is equivalent to prefacing every repl statement with 'use strict'.\nbreakEvalOnSigint <boolean> Stop evaluating the current piece of code when SIGINT is received, such as when Ctrl+C is pressed. This cannot be used together with a custom eval function. Default: false.\npreview <boolean> Defines if the repl prints autocomplete and output previews or not. Default: true with the default eval function and false in case a custom eval function is used. If terminal is falsy, then there are no previews and the value of preview has no effect.\nReturns: <repl.REPLServer>\nThe repl.start() method creates and starts a repl.REPLServer instance.\n\nIf options is a string, then it specifies the input prompt:\n\nconst repl = require('node:repl');\n\n// a Unix style prompt\nrepl.start('$ ');\nThe Node.js REPL#\nNode.js itself uses the node:repl module to provide its own interactive interface for executing JavaScript. This can be used by executing the Node.js binary without passing any arguments (or by passing the -i argument):\n\n$ node\n> const a = [1, 2, 3];\nundefined\n> a\n[ 1, 2, 3 ]\n> a.forEach((v) => {\n...   console.log(v);\n...   });\n1\n2\n3\nEnvironment variable options#\nVarious behaviors of the Node.js REPL can be customized using the following environment variables:\n\nNODE_REPL_HISTORY: When a valid path is given, persistent REPL history will be saved to the specified file rather than .node_repl_history in the user's home directory. Setting this value to '' (an empty string) will disable persistent REPL history. Whitespace will be trimmed from the value. On Windows platforms environment variables with empty values are invalid so set this variable to one or more spaces to disable persistent REPL history.\nNODE_REPL_HISTORY_SIZE: Controls how many lines of history will be persisted if history is available. Must be a positive number. Default: 1000.\nNODE_REPL_MODE: May be either 'sloppy' or 'strict'. Default: 'sloppy', which will allow non-strict mode code to be run.\nPersistent history#\nBy default, the Node.js REPL will persist history between node", "doc_id": "a58acca8-560e-45f4-bae3-b85e956723c8", "embedding": null, "doc_hash": "761dbb8d0257ae5c6b752e79196561a83e3cc51ec75107a2582b85eb1f28f85f", "extra_info": null, "node_info": {"start": 2158486, "end": 2162418}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "75219c29-cfb4-4da3-8d68-f654a9dd90a8", "3": "11567fbf-00a3-433d-9a00-b378439facb0"}}, "__type__": "1"}, "11567fbf-00a3-433d-9a00-b378439facb0": {"__data__": {"text": "When a valid path is given, persistent REPL history will be saved to the specified file rather than .node_repl_history in the user's home directory. Setting this value to '' (an empty string) will disable persistent REPL history. Whitespace will be trimmed from the value. On Windows platforms environment variables with empty values are invalid so set this variable to one or more spaces to disable persistent REPL history.\nNODE_REPL_HISTORY_SIZE: Controls how many lines of history will be persisted if history is available. Must be a positive number. Default: 1000.\nNODE_REPL_MODE: May be either 'sloppy' or 'strict'. Default: 'sloppy', which will allow non-strict mode code to be run.\nPersistent history#\nBy default, the Node.js REPL will persist history between node REPL sessions by saving inputs to a .node_repl_history file located in the user's home directory. This can be disabled by setting the environment variable NODE_REPL_HISTORY=''.\n\nUsing the Node.js REPL with advanced line-editors#\nFor advanced line-editors, start Node.js with the environment variable NODE_NO_READLINE=1. This will start the main and debugger REPL in canonical terminal settings, which will allow use with rlwrap.\n\nFor example, the following can be added to a .bashrc file:\n\nalias node=\"env NODE_NO_READLINE=1 rlwrap node\"\nStarting multiple REPL instances against a single running instance#\nIt is possible to create and run multiple REPL instances against a single running instance of Node.js that share a single global object but have separate I/O interfaces.\n\nThe following example, for instance, provides separate REPLs on stdin, a Unix socket, and a TCP socket:\n\nconst net = require('node:net');\nconst repl = require('node:repl');\nlet connections = 0;\n\nrepl.start({\n  prompt: 'Node.js via stdin> ',\n  input: process.stdin,\n  output: process.stdout,\n});\n\nnet.createServer((socket) => {\n  connections += 1;\n  repl.start({\n    prompt: 'Node.js via Unix socket> ',\n    input: socket,\n    output: socket,\n  }).on('exit', () => {\n    socket.end();\n  });\n}).listen('/tmp/node-repl-sock');\n\nnet.createServer((socket) => {\n  connections += 1;\n  repl.start({\n    prompt: 'Node.js via TCP socket> ',\n    input: socket,\n    output: socket,\n  }).on('exit', () => {\n    socket.end();\n  });\n}).listen(5001);\nRunning this application from the command line will start a REPL on stdin. Other REPL clients may connect through the Unix socket or TCP socket. telnet, for instance, is useful for connecting to TCP sockets, while socat can be used to connect to both Unix and TCP sockets.\n\nBy starting a REPL from a Unix socket-based server instead of stdin, it is possible to connect to a long-running Node.js process without restarting it.\n\nFor an example of running a \"full-featured\" (terminal) REPL over a net.Server and net.Socket instance, see: https://gist.github.com/TooTallNate/2209310.\n\nFor an example of running a REPL instance over curl(1), see: https://gist.github.com/TooTallNate/2053342.\n\nDiagnostic report#\nStability: 2 - Stable\nDelivers a JSON-formatted diagnostic summary, written to a file.\n\nThe report is intended for development, test, and production use, to capture and preserve information for problem determination. It includes JavaScript and native stack traces, heap statistics, platform information, resource usage etc. With the report option enabled, diagnostic reports can be triggered on unhandled exceptions, fatal errors and user signals, in addition to triggering programmatically through API calls.\n\nA complete example report that was generated on an uncaught exception is provided below for reference.\n\n{\n", "doc_id": "11567fbf-00a3-433d-9a00-b378439facb0", "embedding": null, "doc_hash": "35b00c728b8e9c039717cab180e8a7c875f6d2ebd437cffc447a60997da0728b", "extra_info": null, "node_info": {"start": 2162468, "end": 2166076}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a58acca8-560e-45f4-bae3-b85e956723c8", "3": "91ea5816-6359-4a6e-ab29-5809cf3676f9"}}, "__type__": "1"}, "91ea5816-6359-4a6e-ab29-5809cf3676f9": {"__data__": {"text": "an example of running a REPL instance over curl(1), see: https://gist.github.com/TooTallNate/2053342.\n\nDiagnostic report#\nStability: 2 - Stable\nDelivers a JSON-formatted diagnostic summary, written to a file.\n\nThe report is intended for development, test, and production use, to capture and preserve information for problem determination. It includes JavaScript and native stack traces, heap statistics, platform information, resource usage etc. With the report option enabled, diagnostic reports can be triggered on unhandled exceptions, fatal errors and user signals, in addition to triggering programmatically through API calls.\n\nA complete example report that was generated on an uncaught exception is provided below for reference.\n\n{\n  \"header\": {\n    \"reportVersion\": 3,\n    \"event\": \"exception\",\n    \"trigger\": \"Exception\",\n    \"filename\": \"report.20181221.005011.8974.0.001.json\",\n    \"dumpEventTime\": \"2018-12-21T00:50:11Z\",\n    \"dumpEventTimeStamp\": \"1545371411331\",\n    \"processId\": 8974,\n    \"cwd\": \"/home/nodeuser/project/node\",\n    \"commandLine\": [\n      \"/home/nodeuser/project/node/out/Release/node\",\n      \"--report-uncaught-exception\",\n      \"/home/nodeuser/project/node/test/report/test-exception.js\",\n      \"child\"\n    ],\n    \"nodejsVersion\": \"v12.0.0-pre\",\n    \"glibcVersionRuntime\": \"2.17\",\n    \"glibcVersionCompiler\": \"2.17\",\n    \"wordSize\": \"64 bit\",\n    \"arch\": \"x64\",\n    \"platform\": \"linux\",\n    \"componentVersions\": {\n      \"node\": \"12.0.0-pre\",\n      \"v8\": \"7.1.302.28-node.5\",\n      \"uv\": \"1.24.1\",\n      \"zlib\": \"1.2.11\",\n      \"ares\": \"1.15.0\",\n      \"modules\": \"68\",\n      \"nghttp2\": \"1.34.0\",\n      \"napi\": \"3\",\n      \"llhttp\": \"1.0.1\",\n      \"openssl\": \"1.1.0j\"\n    },\n    \"release\": {\n      \"name\": \"node\"\n    },\n    \"osName\": \"Linux\",\n    \"osRelease\": \"3.10.0-862.el7.x86_64\",\n    \"osVersion\": \"#1 SMP Wed Mar 21 18:14:51 EDT 2018\",\n    \"osMachine\": \"x86_64\",\n    \"cpus\": [\n      {\n        \"model\": \"Intel(R) Core(TM) i7-6820HQ CPU @ 2.70GHz\",\n        \"speed\": 2700,\n        \"user\": 88902660,\n        \"nice\": 0,\n        \"sys\": 50902570,\n        \"idle\": 241732220,\n        \"irq\": 0\n      },\n      {\n        \"model\": \"Intel(R) Core(TM) i7-6820HQ CPU @ 2.70GHz\",\n        \"speed\": 2700,\n        \"user\": 88902660,\n        \"nice\": 0,\n        \"sys\": 50902570,\n    ", "doc_id": "91ea5816-6359-4a6e-ab29-5809cf3676f9", "embedding": null, "doc_hash": "8bba9584bc5199c1717e969416bc8859a46e6f394dcd4f1c0f710e54e5885eb1", "extra_info": null, "node_info": {"start": 2166089, "end": 2168383}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "11567fbf-00a3-433d-9a00-b378439facb0", "3": "33ee83af-988d-4b9a-8639-59492373e4f2"}}, "__type__": "1"}, "33ee83af-988d-4b9a-8639-59492373e4f2": {"__data__": {"text": "       \"speed\": 2700,\n        \"user\": 88902660,\n        \"nice\": 0,\n        \"sys\": 50902570,\n        \"idle\": 241732220,\n        \"irq\": 0\n      },\n      {\n        \"model\": \"Intel(R) Core(TM) i7-6820HQ CPU @ 2.70GHz\",\n        \"speed\": 2700,\n        \"user\": 88902660,\n        \"nice\": 0,\n        \"sys\": 50902570,\n        \"idle\": 241732220,\n        \"irq\": 0\n      }\n    ],\n    \"networkInterfaces\": [\n      {\n        \"name\": \"en0\",\n        \"internal\": false,\n        \"mac\": \"13:10:de:ad:be:ef\",\n        \"address\": \"10.0.0.37\",\n        \"netmask\": \"255.255.255.0\",\n        \"family\": \"IPv4\"\n      }\n    ],\n    \"host\": \"test_machine\"\n  },\n  \"javascriptStack\": {\n    \"message\": \"Error: *** test-exception.js: throwing uncaught Error\",\n    \"stack\": [\n      \"at myException (/home/nodeuser/project/node/test/report/test-exception.js:9:11)\",\n      \"at Object.<anonymous> (/home/nodeuser/project/node/test/report/test-exception.js:12:3)\",\n      \"at Module._compile (internal/modules/cjs/loader.js:718:30)\",\n      \"at Object.Module._extensions..js (internal/modules/cjs/loader.js:729:10)\",\n      \"at Module.load (internal/modules/cjs/loader.js:617:32)\",\n      \"at tryModuleLoad (internal/modules/cjs/loader.js:560:12)\",\n      \"at Function.Module._load (internal/modules/cjs/loader.js:552:3)\",\n      \"at Function.Module.runMain (internal/modules/cjs/loader.js:771:12)\",\n      \"at executeUserCode (internal/bootstrap/node.js:332:15)\"\n    ]\n  },\n  \"nativeStack\": [\n    {\n      \"pc\": \"0x000055b57f07a9ef\",\n      \"symbol\": \"report::GetNodeReport(v8::Isolate*, node::Environment*, char const*, char const*, v8::Local<v8::String>, std::ostream&) [./node]\"\n    },\n    {\n      \"pc\": \"0x000055b57f07cf03\",\n      \"symbol\": \"report::GetReport(v8::FunctionCallbackInfo<v8::Value> const&) [./node]\"\n    },\n    {\n      \"pc\": \"0x000055b57f1bccfd\",\n      \"symbol\": \" [./node]\"\n    },\n    {\n      \"pc\": \"0x000055b57f1be048\",\n      \"symbol\": \"v8::internal::Builtin_HandleApiCall(int, v8::internal::Object**, v8::internal::Isolate*) [./node]\"\n    },\n    {\n      \"pc\": \"0x000055b57feeda0e\",\n     ", "doc_id": "33ee83af-988d-4b9a-8639-59492373e4f2", "embedding": null, "doc_hash": "288e82a258bd30e86bd204f6c92310d327222691ae03213566a40055b14116a5", "extra_info": null, "node_info": {"start": 2168836, "end": 2170894}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "91ea5816-6359-4a6e-ab29-5809cf3676f9", "3": "4615a3dd-99a9-48e5-b242-be6dba899086"}}, "__type__": "1"}, "4615a3dd-99a9-48e5-b242-be6dba899086": {"__data__": {"text": "     \"symbol\": \"report::GetReport(v8::FunctionCallbackInfo<v8::Value> const&) [./node]\"\n    },\n    {\n      \"pc\": \"0x000055b57f1bccfd\",\n      \"symbol\": \" [./node]\"\n    },\n    {\n      \"pc\": \"0x000055b57f1be048\",\n      \"symbol\": \"v8::internal::Builtin_HandleApiCall(int, v8::internal::Object**, v8::internal::Isolate*) [./node]\"\n    },\n    {\n      \"pc\": \"0x000055b57feeda0e\",\n      \"symbol\": \" [./node]\"\n    }\n  ],\n  \"javascriptHeap\": {\n    \"totalMemory\": 5660672,\n    \"executableMemory\": 524288,\n    \"totalCommittedMemory\": 5488640,\n    \"availableMemory\": 4341379928,\n    \"totalGlobalHandlesMemory\": 8192,\n    \"usedGlobalHandlesMemory\": 3136,\n    \"usedMemory\": 4816432,\n    \"memoryLimit\": 4345298944,\n    \"mallocedMemory\": 254128,\n    \"externalMemory\": 315644,\n    \"peakMallocedMemory\": 98752,\n    \"nativeContextCount\": 1,\n    \"detachedContextCount\": 0,\n    \"doesZapGarbage\": 0,\n    \"heapSpaces\": {\n      \"read_only_space\": {\n        \"memorySize\": 524288,\n        \"committedMemory\": 39208,\n        \"capacity\": 515584,\n        \"used\": 30504,\n        \"available\": 485080\n      },\n      \"new_space\": {\n        \"memorySize\": 2097152,\n        \"committedMemory\": 2019312,\n        \"capacity\": 1031168,\n        \"used\": 985496,\n        \"available\": 45672\n      },\n      \"old_space\": {\n        \"memorySize\": 2273280,\n        \"committedMemory\": 1769008,\n        \"capacity\": 1974640,\n        \"used\": 1725488,\n        \"available\": 249152\n      },\n      \"code_space\": {\n        \"memorySize\": 696320,\n        \"committedMemory\": 184896,\n        \"capacity\": 152128,\n        \"used\": 152128,\n        \"available\": 0\n      },\n      \"map_space\": {\n        \"memorySize\": 536576,\n        \"committedMemory\": 344928,\n        \"capacity\": 327520,\n        \"used\": 327520,\n        \"available\": 0\n      },\n      \"large_object_space\": {\n        \"memorySize\": 0,\n        \"committedMemory\": 0,\n        \"capacity\": 1520590336,\n        \"used\": 0,\n        \"available\": 1520590336\n      },\n      \"new_large_object_space\": {\n        \"memorySize\": 0,\n        \"committedMemory\": 0,\n", "doc_id": "4615a3dd-99a9-48e5-b242-be6dba899086", "embedding": null, "doc_hash": "37d38d5ad2d034fce7f373d982c2ee5f68b1c9516315773760d429feadeda291", "extra_info": null, "node_info": {"start": 2170786, "end": 2172825}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "33ee83af-988d-4b9a-8639-59492373e4f2", "3": "2fec37b5-4c9a-4fa1-b837-6a6c5ab3f1b1"}}, "__type__": "1"}, "2fec37b5-4c9a-4fa1-b837-6a6c5ab3f1b1": {"__data__": {"text": "344928,\n        \"capacity\": 327520,\n        \"used\": 327520,\n        \"available\": 0\n      },\n      \"large_object_space\": {\n        \"memorySize\": 0,\n        \"committedMemory\": 0,\n        \"capacity\": 1520590336,\n        \"used\": 0,\n        \"available\": 1520590336\n      },\n      \"new_large_object_space\": {\n        \"memorySize\": 0,\n        \"committedMemory\": 0,\n        \"capacity\": 0,\n        \"used\": 0,\n        \"available\": 0\n      }\n    }\n  },\n  \"resourceUsage\": {\n    \"rss\": \"35766272\",\n    \"free_memory\": \"1598337024\",\n    \"total_memory\": \"17179869184\",\n    \"available_memory\": \"1598337024\",\n    \"maxRss\": \"36624662528\",\n    \"constrained_memory\": \"36624662528\",\n    \"userCpuSeconds\": 0.040072,\n    \"kernelCpuSeconds\": 0.016029,\n    \"cpuConsumptionPercent\": 5.6101,\n    \"userCpuConsumptionPercent\": 4.0072,\n    \"kernelCpuConsumptionPercent\": 1.6029,\n    \"pageFaults\": {\n      \"IORequired\": 0,\n      \"IONotRequired\": 4610\n    },\n    \"fsActivity\": {\n      \"reads\": 0,\n      \"writes\": 0\n    }\n  },\n  \"uvthreadResourceUsage\": {\n    \"userCpuSeconds\": 0.039843,\n    \"kernelCpuSeconds\": 0.015937,\n    \"cpuConsumptionPercent\": 5.578,\n    \"userCpuConsumptionPercent\": 3.9843,\n    \"kernelCpuConsumptionPercent\": 1.5937,\n    \"fsActivity\": {\n      \"reads\": 0,\n      \"writes\": 0\n    }\n  },\n  \"libuv\": [\n    {\n      \"type\": \"async\",\n      \"is_active\": true,\n      \"is_referenced\": false,\n      \"address\": \"0x0000000102910900\",\n      \"details\": \"\"\n    },\n    {\n      \"type\": \"timer\",\n      \"is_active\": false,\n      \"is_referenced\": false,\n      \"address\": \"0x00007fff5fbfeab0\",\n      \"repeat\": 0,\n      \"firesInMsFromNow\": 94403548320796,\n      \"expired\": true\n    },\n    {\n      \"type\": \"check\",\n      \"is_active\": true,\n      \"is_referenced\": false,\n      \"address\": \"0x00007fff5fbfeb48\"\n    },\n    {\n      \"type\": \"idle\",\n      \"is_active\": false,\n      \"is_referenced\": true,\n      \"address\": \"0x00007fff5fbfebc0\"\n    },\n    {\n      \"type\": \"prepare\",\n      \"is_active\": false,\n     ", "doc_id": "2fec37b5-4c9a-4fa1-b837-6a6c5ab3f1b1", "embedding": null, "doc_hash": "074aa860c2cb79ca35a0f75c28d01aa57886b837459e19e194a9fdacb2dbca57", "extra_info": null, "node_info": {"start": 2172886, "end": 2174858}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4615a3dd-99a9-48e5-b242-be6dba899086", "3": "077eaf74-7a6e-4a89-a4f6-ba0b6cd254b3"}}, "__type__": "1"}, "077eaf74-7a6e-4a89-a4f6-ba0b6cd254b3": {"__data__": {"text": "     \"expired\": true\n    },\n    {\n      \"type\": \"check\",\n      \"is_active\": true,\n      \"is_referenced\": false,\n      \"address\": \"0x00007fff5fbfeb48\"\n    },\n    {\n      \"type\": \"idle\",\n      \"is_active\": false,\n      \"is_referenced\": true,\n      \"address\": \"0x00007fff5fbfebc0\"\n    },\n    {\n      \"type\": \"prepare\",\n      \"is_active\": false,\n      \"is_referenced\": false,\n      \"address\": \"0x00007fff5fbfec38\"\n    },\n    {\n      \"type\": \"check\",\n      \"is_active\": false,\n      \"is_referenced\": false,\n      \"address\": \"0x00007fff5fbfecb0\"\n    },\n    {\n      \"type\": \"async\",\n      \"is_active\": true,\n      \"is_referenced\": false,\n      \"address\": \"0x000000010188f2e0\"\n    },\n    {\n      \"type\": \"tty\",\n      \"is_active\": false,\n      \"is_referenced\": true,\n      \"address\": \"0x000055b581db0e18\",\n      \"width\": 204,\n      \"height\": 55,\n      \"fd\": 17,\n      \"writeQueueSize\": 0,\n      \"readable\": true,\n      \"writable\": true\n    },\n    {\n      \"type\": \"signal\",\n      \"is_active\": true,\n      \"is_referenced\": false,\n      \"address\": \"0x000055b581d80010\",\n      \"signum\": 28,\n      \"signal\": \"SIGWINCH\"\n    },\n    {\n      \"type\": \"tty\",\n      \"is_active\": true,\n      \"is_referenced\": true,\n      \"address\": \"0x000055b581df59f8\",\n      \"width\": 204,\n      \"height\": 55,\n      \"fd\": 19,\n      \"writeQueueSize\": 0,\n      \"readable\": true,\n      \"writable\": true\n    },\n    {\n      \"type\": \"loop\",\n      \"is_active\": true,\n      \"address\": \"0x000055fc7b2cb180\",\n      \"loopIdleTimeSeconds\": 22644.8\n    }\n  ],\n  \"workers\": [],\n  \"environmentVariables\": {\n    \"REMOTEHOST\": \"REMOVED\",\n    \"MANPATH\": \"/opt/rh/devtoolset-3/root/usr/share/man:\",\n    \"XDG_SESSION_ID\": \"66126\",\n    \"HOSTNAME\": \"test_machine\",\n    \"HOST\": \"test_machine\",\n    \"TERM\": \"xterm-256color\",\n    \"SHELL\": \"/bin/csh\",\n    \"SSH_CLIENT\": \"REMOVED\",\n    \"PERL5LIB\":", "doc_id": "077eaf74-7a6e-4a89-a4f6-ba0b6cd254b3", "embedding": null, "doc_hash": "a55058e7a467cd9f935c0e9a27b66106ff4bd3877ade066dbb8d9bbfcc9e6650", "extra_info": null, "node_info": {"start": 2174859, "end": 2176691}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2fec37b5-4c9a-4fa1-b837-6a6c5ab3f1b1", "3": "f6c3584a-f0e3-42c9-8d7e-0bba4457292e"}}, "__type__": "1"}, "f6c3584a-f0e3-42c9-8d7e-0bba4457292e": {"__data__": {"text": "     \"loopIdleTimeSeconds\": 22644.8\n    }\n  ],\n  \"workers\": [],\n  \"environmentVariables\": {\n    \"REMOTEHOST\": \"REMOVED\",\n    \"MANPATH\": \"/opt/rh/devtoolset-3/root/usr/share/man:\",\n    \"XDG_SESSION_ID\": \"66126\",\n    \"HOSTNAME\": \"test_machine\",\n    \"HOST\": \"test_machine\",\n    \"TERM\": \"xterm-256color\",\n    \"SHELL\": \"/bin/csh\",\n    \"SSH_CLIENT\": \"REMOVED\",\n    \"PERL5LIB\": \"/opt/rh/devtoolset-3/root//usr/lib64/perl5/vendor_perl:/opt/rh/devtoolset-3/root/usr/lib/perl5:/opt/rh/devtoolset-3/root//usr/share/perl5/vendor_perl\",\n    \"OLDPWD\": \"/home/nodeuser/project/node/src\",\n    \"JAVACONFDIRS\": \"/opt/rh/devtoolset-3/root/etc/java:/etc/java\",\n    \"SSH_TTY\": \"/dev/pts/0\",\n    \"PCP_DIR\": \"/opt/rh/devtoolset-3/root\",\n    \"GROUP\": \"normaluser\",\n    \"USER\": \"nodeuser\",\n    \"LD_LIBRARY_PATH\": \"/opt/rh/devtoolset-3/root/usr/lib64:/opt/rh/devtoolset-3/root/usr/lib\",\n    \"HOSTTYPE\": \"x86_64-linux\",\n    \"XDG_CONFIG_DIRS\": \"/opt/rh/devtoolset-3/root/etc/xdg:/etc/xdg\",\n    \"MAIL\": \"/var/spool/mail/nodeuser\",\n    \"PATH\": \"/home/nodeuser/project/node:/opt/rh/devtoolset-3/root/usr/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin\",\n    \"PWD\": \"/home/nodeuser/project/node\",\n    \"LANG\": \"en_US.UTF-8\",\n    \"PS1\": \"\\\\u@\\\\h : \\\\[\\\\e[31m\\\\]\\\\w\\\\[\\\\e[m\\\\] >  \",\n    \"SHLVL\": \"2\",\n    \"HOME\": \"/home/nodeuser\",\n    \"OSTYPE\": \"linux\",\n    \"VENDOR\": \"unknown\",\n    \"PYTHONPATH\": \"/opt/rh/devtoolset-3/root/usr/lib64/python2.7/site-packages:/opt/rh/devtoolset-3/root/usr/lib/python2.7/site-packages\",\n    \"MACHTYPE\": \"x86_64\",\n    \"LOGNAME\": \"nodeuser\",\n    \"XDG_DATA_DIRS\": \"/opt/rh/devtoolset-3/root/usr/share:/usr/local/share:/usr/share\",\n    \"LESSOPEN\": \"||/usr/bin/lesspipe.sh %s\",\n    \"INFOPATH\": \"/opt/rh/devtoolset-3/root/usr/share/info\",\n    \"XDG_RUNTIME_DIR\": \"/run/user/50141\",\n    \"_\": \"./node\"\n  },\n  \"userLimits\": {\n    \"core_file_size_blocks\": {\n      \"soft\": \"\",\n      \"hard\": \"unlimited\"\n    },\n    \"data_seg_size_kbytes\": {\n      \"soft\": \"unlimited\",\n      \"hard\": \"unlimited\"\n    },\n   ", "doc_id": "f6c3584a-f0e3-42c9-8d7e-0bba4457292e", "embedding": null, "doc_hash": "0e520b805af95bbe98152543165eb04416b1c031457cf2caafe36f111d271699", "extra_info": null, "node_info": {"start": 2176626, "end": 2178619}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "077eaf74-7a6e-4a89-a4f6-ba0b6cd254b3", "3": "e53598e6-ac9f-4da9-8238-99bb3f239ccd"}}, "__type__": "1"}, "e53598e6-ac9f-4da9-8238-99bb3f239ccd": {"__data__": {"text": "   \"LESSOPEN\": \"||/usr/bin/lesspipe.sh %s\",\n    \"INFOPATH\": \"/opt/rh/devtoolset-3/root/usr/share/info\",\n    \"XDG_RUNTIME_DIR\": \"/run/user/50141\",\n    \"_\": \"./node\"\n  },\n  \"userLimits\": {\n    \"core_file_size_blocks\": {\n      \"soft\": \"\",\n      \"hard\": \"unlimited\"\n    },\n    \"data_seg_size_kbytes\": {\n      \"soft\": \"unlimited\",\n      \"hard\": \"unlimited\"\n    },\n    \"file_size_blocks\": {\n      \"soft\": \"unlimited\",\n      \"hard\": \"unlimited\"\n    },\n    \"max_locked_memory_bytes\": {\n      \"soft\": \"unlimited\",\n      \"hard\": 65536\n    },\n    \"max_memory_size_kbytes\": {\n      \"soft\": \"unlimited\",\n      \"hard\": \"unlimited\"\n    },\n    \"open_files\": {\n      \"soft\": \"unlimited\",\n      \"hard\": 4096\n    },\n    \"stack_size_bytes\": {\n      \"soft\": \"unlimited\",\n      \"hard\": \"unlimited\"\n    },\n    \"cpu_time_seconds\": {\n      \"soft\": \"unlimited\",\n      \"hard\": \"unlimited\"\n    },\n    \"max_user_processes\": {\n      \"soft\": \"unlimited\",\n      \"hard\": 4127290\n    },\n    \"virtual_memory_kbytes\": {\n      \"soft\": \"unlimited\",\n      \"hard\": \"unlimited\"\n    }\n  },\n  \"sharedObjects\": [\n    \"/lib64/libdl.so.2\",\n    \"/lib64/librt.so.1\",\n    \"/lib64/libstdc++.so.6\",\n    \"/lib64/libm.so.6\",\n    \"/lib64/libgcc_s.so.1\",\n    \"/lib64/libpthread.so.0\",\n    \"/lib64/libc.so.6\",\n    \"/lib64/ld-linux-x86-64.so.2\"\n  ]\n}\nUsage#\nnode --report-uncaught-exception --report-on-signal \\\n--report-on-fatalerror app.js\n--report-uncaught-exception Enables report to be generated on un-caught exceptions. Useful when inspecting JavaScript stack in conjunction with native stack and other runtime environment data.\n\n--report-on-signal Enables report to be generated upon receiving the specified (or predefined) signal to the running Node.js process. (See below on how to modify the signal that triggers the report.) Default signal is SIGUSR2. Useful when a report needs to be triggered from another program. Application monitors may leverage this feature to collect report at regular intervals and plot rich set of internal runtime data to their views.\n\nSignal based report generation is not supported in Windows.\n\nUnder normal circumstances, there is no need to modify the report triggering signal. However, if SIGUSR2 is already used for other purposes, then this flag helps to change the signal for report generation and preserve the original meaning of SIGUSR2 for the said purposes.\n\n--report-on-fatalerror Enables the report to be triggered on fatal errors (internal errors within the Node.js runtime, such as out of memory) that leads to termination of the application. Useful to inspect various diagnostic data elements such as", "doc_id": "e53598e6-ac9f-4da9-8238-99bb3f239ccd", "embedding": null, "doc_hash": "a3689f23c2fa5ad1ff52e9e36ec7a0aec5456e73e2d6a53c3d4934dc78a20cf4", "extra_info": null, "node_info": {"start": 2178640, "end": 2181238}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f6c3584a-f0e3-42c9-8d7e-0bba4457292e", "3": "5e3c63db-6ee2-476f-98a9-546bade2dfb2"}}, "__type__": "1"}, "5e3c63db-6ee2-476f-98a9-546bade2dfb2": {"__data__": {"text": "is SIGUSR2. Useful when a report needs to be triggered from another program. Application monitors may leverage this feature to collect report at regular intervals and plot rich set of internal runtime data to their views.\n\nSignal based report generation is not supported in Windows.\n\nUnder normal circumstances, there is no need to modify the report triggering signal. However, if SIGUSR2 is already used for other purposes, then this flag helps to change the signal for report generation and preserve the original meaning of SIGUSR2 for the said purposes.\n\n--report-on-fatalerror Enables the report to be triggered on fatal errors (internal errors within the Node.js runtime, such as out of memory) that leads to termination of the application. Useful to inspect various diagnostic data elements such as heap, stack, event loop state, resource consumption etc. to reason about the fatal error.\n\n--report-compact Write reports in a compact format, single-line JSON, more easily consumable by log processing systems than the default multi-line format designed for human consumption.\n\n--report-directory Location at which the report will be generated.\n\n--report-filename Name of the file to which the report will be written.\n\n--report-signal Sets or resets the signal for report generation (not supported on Windows). Default signal is SIGUSR2.\n\nA report can also be triggered via an API call from a JavaScript application:\n\nprocess.report.writeReport();\nThis function takes an optional additional argument filename, which is the name of a file into which the report is written.\n\nprocess.report.writeReport('./foo.json');\nThis function takes an optional additional argument err which is an Error object that will be used as the context for the JavaScript stack printed in the report. When using report to handle errors in a callback or an exception handler, this allows the report to include the location of the original error as well as where it was handled.\n\ntry {\n  process.chdir('/non-existent-path');\n} catch (err) {\n  process.report.writeReport(err);\n}\n// Any other code\nIf both filename and error object are passed to writeReport() the error object must be the second parameter.\n\ntry {\n  process.chdir('/non-existent-path');\n} catch (err) {\n  process.report.writeReport(filename, err);\n}\n// Any other code\nThe content of the diagnostic report can be returned as a JavaScript Object via an API call from a JavaScript application:\n\nconst report = process.report.getReport();\nconsole.log(typeof report === 'object'); // true\n\n// Similar to process.report.writeReport() output\nconsole.log(JSON.stringify(report, null, 2));\nThis function takes an optional additional argument err, which is an Error object that will be used as the context for the JavaScript stack printed in the report.\n\nconst report = process.report.getReport(new Error('custom error'));\nconsole.log(typeof report === 'object'); // true\nThe API versions are useful when inspecting the runtime state from within the application, in expectation of self-adjusting the resource consumption, load balancing, monitoring etc.\n\nThe content of the report consists of a header section containing the event type, date, time, PID, and Node.js version, sections containing JavaScript and native stack traces, a section containing V8 heap information, a section containing libuv handle information, and an OS platform information section showing CPU and memory usage and system limits. An example report can be triggered using the Node.js REPL:\n\n$ node\n> process.report.writeReport();\nWriting Node.js report to file: report.20181126.091102.8480.0.001.json\nNode.js report completed\n>\nWhen a report is written, start and end messages are issued to stderr and the filename of the report is returned to the caller. The default filename includes the date, time, PID, and a sequence number. The sequence number helps in associating the report dump with the runtime state if generated multiple times for the same Node.js process.\n\nDiagnostic report has an associated single-digit version number (report.header.reportVersion), uniquely representing the report format. The version number is bumped when", "doc_id": "5e3c63db-6ee2-476f-98a9-546bade2dfb2", "embedding": null, "doc_hash": "d4b9344662500fb685d75310671538d79f70b4674ea362381d08174e6f145b51", "extra_info": null, "node_info": {"start": 2180845, "end": 2184992}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e53598e6-ac9f-4da9-8238-99bb3f239ccd", "3": "986f6386-364d-4e17-87c0-6b872b2da6d6"}}, "__type__": "1"}, "986f6386-364d-4e17-87c0-6b872b2da6d6": {"__data__": {"text": "and an OS platform information section showing CPU and memory usage and system limits. An example report can be triggered using the Node.js REPL:\n\n$ node\n> process.report.writeReport();\nWriting Node.js report to file: report.20181126.091102.8480.0.001.json\nNode.js report completed\n>\nWhen a report is written, start and end messages are issued to stderr and the filename of the report is returned to the caller. The default filename includes the date, time, PID, and a sequence number. The sequence number helps in associating the report dump with the runtime state if generated multiple times for the same Node.js process.\n\nDiagnostic report has an associated single-digit version number (report.header.reportVersion), uniquely representing the report format. The version number is bumped when new key is added or removed, or the data type of a value is changed. Report version definitions are consistent across LTS releases.\n\nConfiguration#\nAdditional runtime configuration of report generation is available via the following properties of process.report:\n\nreportOnFatalError triggers diagnostic reporting on fatal errors when true. Defaults to false.\n\nreportOnSignal triggers diagnostic reporting on signal when true. This is not supported on Windows. Defaults to false.\n\nreportOnUncaughtException triggers diagnostic reporting on uncaught exception when true. Defaults to false.\n\nsignal specifies the POSIX signal identifier that will be used to intercept external triggers for report generation. Defaults to 'SIGUSR2'.\n\nfilename specifies the name of the output file in the file system. Special meaning is attached to stdout and stderr. Usage of these will result in report being written to the associated standard streams. In cases where standard streams are used, the value in directory is ignored. URLs are not supported. Defaults to a composite filename that contains timestamp, PID, and sequence number.\n\ndirectory specifies the file system directory where the report will be written. URLs are not supported. Defaults to the current working directory of the Node.js process.\n\n// Trigger report only on uncaught exceptions.\nprocess.report.reportOnFatalError = false;\nprocess.report.reportOnSignal = false;\nprocess.report.reportOnUncaughtException = true;\n\n// Trigger report for both internal errors as well as external signal.\nprocess.report.reportOnFatalError = true;\nprocess.report.reportOnSignal = true;\nprocess.report.reportOnUncaughtException = false;\n\n// Change the default signal to 'SIGQUIT' and enable it.\nprocess.report.reportOnFatalError = false;\nprocess.report.reportOnUncaughtException = false;\nprocess.report.reportOnSignal = true;\nprocess.report.signal = 'SIGQUIT';\nConfiguration on module initialization is also available via environment variables:\n\nNODE_OPTIONS=\"--report-uncaught-exception \\\n  --report-on-fatalerror --report-on-signal \\\n  --report-signal=SIGUSR2  --report-filename=./report.json \\\n  --report-directory=/home/nodeuser\"\nSpecific API documentation can be found under process API documentation section.\n\nInteraction with workers#\nHistory\nWorker threads can create reports in the same way that the main thread does.\n\nReports will include information on any Workers that are children of the current thread as part of the workers section, with each Worker generating a report in the standard report format.\n\nThe thread which is generating the report will wait for the reports from Worker threads to finish. However, the latency for this will usually be low, as both running JavaScript and the event loop are interrupted to generate the report.\n\nSingle executable applications#\nStability: 1 - Experimental: This feature is being designed and will change.\nSource Code: lib/internal/main/single_executable_application.js\n\nThis feature allows the distribution of a Node.js application conveniently to a system that does not have Node.js installed.\n\nNode.js supports the creation of single executable applications by allowing the injection of a JavaScript file into the node binary. During start up, the program checks if anything has been injected. If the script is found,", "doc_id": "986f6386-364d-4e17-87c0-6b872b2da6d6", "embedding": null, "doc_hash": "96456ac62a659882adb27cf0f444b2948620c1451a56d025f1f6475e031c8470", "extra_info": null, "node_info": {"start": 2184989, "end": 2189095}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5e3c63db-6ee2-476f-98a9-546bade2dfb2", "3": "434c6f84-6a6f-4871-80b5-ba7421c8080f"}}, "__type__": "1"}, "434c6f84-6a6f-4871-80b5-ba7421c8080f": {"__data__": {"text": "with each Worker generating a report in the standard report format.\n\nThe thread which is generating the report will wait for the reports from Worker threads to finish. However, the latency for this will usually be low, as both running JavaScript and the event loop are interrupted to generate the report.\n\nSingle executable applications#\nStability: 1 - Experimental: This feature is being designed and will change.\nSource Code: lib/internal/main/single_executable_application.js\n\nThis feature allows the distribution of a Node.js application conveniently to a system that does not have Node.js installed.\n\nNode.js supports the creation of single executable applications by allowing the injection of a JavaScript file into the node binary. During start up, the program checks if anything has been injected. If the script is found, it executes its contents. Otherwise Node.js operates as it normally does.\n\nThe single executable application feature only supports running a single embedded CommonJS file.\n\nA bundled JavaScript file can be turned into a single executable application with any tool which can inject resources into the node binary.\n\nHere are the steps for creating a single executable application using one such tool, postject:\n\nCreate a JavaScript file:\n\n$ echo 'console.log(`Hello, ${process.argv[2]}!`);' > hello.js\nCreate a copy of the node executable and name it according to your needs:\n\n$ cp $(command -v node) hello\nInject the JavaScript file into the copied binary by running postject with the following options:\n\nhello - The name of the copy of the node executable created in step 2.\nNODE_JS_CODE - The name of the resource / note / section in the binary where the contents of the JavaScript file will be stored.\nhello.js - The name of the JavaScript file created in step 1.\n--sentinel-fuse NODE_JS_FUSE_fce680ab2cc467b6e072b8b5df1996b2 - The fuse used by the Node.js project to detect if a file has been injected.\n--macho-segment-name NODE_JS (only needed on macOS) - The name of the segment in the binary where the contents of the JavaScript file will be stored.\nTo summarize, here is the required command for each platform:\n\nOn systems other than macOS:\n\n$ npx postject hello NODE_JS_CODE hello.js \\\n    --sentinel-fuse NODE_JS_FUSE_fce680ab2cc467b6e072b8b5df1996b2\nOn macOS:\n\n$ npx postject hello NODE_JS_CODE hello.js \\\n    --sentinel-fuse NODE_JS_FUSE_fce680ab2cc467b6e072b8b5df1996b2 \\\n    --macho-segment-name NODE_JS\nRun the binary:\n\n$ ./hello world\nHello, world!\nNotes#\nrequire(id) in the injected module is not file based#\nrequire() in the injected module is not the same as the require() available to modules that are not injected. It also does not have any of the properties that non-injected require() has except require.main. It can only be used to load built-in modules. Attempting to load a module that can only be found in the file system will throw an error.\n\nInstead of relying on a file based require(), users can bundle their application into a standalone JavaScript file to inject into the executable. This also ensures a more deterministic dependency graph.\n\nHowever, if a file based require() is still needed, that can also be achieved:\n\nconst { createRequire } = require('node:module');\nrequire = createRequire(__filename);\n__filename and module.filename in the injected module#\nThe values of __filename and module.filename in the injected module are equal to process.execPath.\n\n__dirname in the injected module#\nThe value of __dirname in the injected module is equal to the directory name of process.execPath.\n\nSingle executable application creation process#\nA tool aiming to create a single executable Node.js application must inject the contents of a JavaScript file", "doc_id": "434c6f84-6a6f-4871-80b5-ba7421c8080f", "embedding": null, "doc_hash": "7e3394969ddc9a735be35ac331263fd95211ebb74d06ce5c96e538845e21459e", "extra_info": null, "node_info": {"start": 2189070, "end": 2192786}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "986f6386-364d-4e17-87c0-6b872b2da6d6", "3": "8dbdc791-3296-4096-8e6b-4f0cb635fe4b"}}, "__type__": "1"}, "8dbdc791-3296-4096-8e6b-4f0cb635fe4b": {"__data__": {"text": "relying on a file based require(), users can bundle their application into a standalone JavaScript file to inject into the executable. This also ensures a more deterministic dependency graph.\n\nHowever, if a file based require() is still needed, that can also be achieved:\n\nconst { createRequire } = require('node:module');\nrequire = createRequire(__filename);\n__filename and module.filename in the injected module#\nThe values of __filename and module.filename in the injected module are equal to process.execPath.\n\n__dirname in the injected module#\nThe value of __dirname in the injected module is equal to the directory name of process.execPath.\n\nSingle executable application creation process#\nA tool aiming to create a single executable Node.js application must inject the contents of a JavaScript file into:\n\na resource named NODE_JS_CODE if the node binary is a PE file\na section named NODE_JS_CODE in the NODE_JS segment if the node binary is a Mach-O file\na note named NODE_JS_CODE if the node binary is an ELF file\nSearch the binary for the NODE_JS_FUSE_fce680ab2cc467b6e072b8b5df1996b2:0 fuse string and flip the last character to 1 to indicate that a resource has been injected.\n\nPlatform support#\nSingle-executable support is tested regularly on CI only on the following platforms:\n\nWindows\nmacOS\nLinux (AMD64 only)\nThis is due to a lack of better tools to generate single-executables that can be used to test this feature on other platforms.\n\nSuggestions for other resource injection tools/workflows are welcomed. Please start a discussion at https://github.com/nodejs/single-executable/discussions to help us document them.\n\nStream[src]#\nStability: 2 - Stable\nSource Code: lib/stream.js\n\nA stream is an abstract interface for working with streaming data in Node.js. The node:stream module provides an API for implementing the stream interface.\n\nThere are many stream objects provided by Node.js. For instance, a request to an HTTP server and process.stdout are both stream instances.\n\nStreams can be readable, writable, or both. All streams are instances of EventEmitter.\n\nTo access the node:stream module:\n\nconst stream = require('node:stream');\nThe node:stream module is useful for creating new types of stream instances. It is usually not necessary to use the node:stream module to consume streams.\n\nOrganization of this document#\nThis document contains two primary sections and a third section for notes. The first section explains how to use existing streams within an application. The second section explains how to create new types of streams.\n\nTypes of streams#\nThere are four fundamental stream types within Node.js:\n\nWritable: streams to which data can be written (for example, fs.createWriteStream()).\nReadable: streams from which data can be read (for example, fs.createReadStream()).\nDuplex: streams that are both Readable and Writable (for example, net.Socket).\nTransform: Duplex streams that can modify or transform the data as it is written and read (for example, zlib.createDeflate()).\nAdditionally, this module includes the utility functions stream.pipeline(), stream.finished(), stream.Readable.from() and stream.addAbortSignal().\n\nStreams Promises API#\nAdded in: v15.0.0\nThe stream/promises API provides an alternative set of asynchronous utility functions for streams that return Promise objects rather than using callbacks. The API is accessible via require('node:stream/promises') or require('node:stream').promises.\n\nstream.pipeline(source[, ...transforms], destination[, options])#\nstream.pipeline(streams[, options])#\nAdded in: v15.0.0\nstreams <Stream[]> | <Iterable[]> | <AsyncIterable[]> | <Function[]>\nsource <Stream> | <Iterable> | <AsyncIterable> | <Function>\nReturns: <Promise> | <AsyncIterable>\n...transforms <Stream> |", "doc_id": "8dbdc791-3296-4096-8e6b-4f0cb635fe4b", "embedding": null, "doc_hash": "7ebfa228909c5d3175eeeb33582f828b744629b59794f2bc23529ca94aa84ac3", "extra_info": null, "node_info": {"start": 2192801, "end": 2196566}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "434c6f84-6a6f-4871-80b5-ba7421c8080f", "3": "61ba4d45-7b68-4bec-a789-333a186ab480"}}, "__type__": "1"}, "61ba4d45-7b68-4bec-a789-333a186ab480": {"__data__": {"text": "Promises API#\nAdded in: v15.0.0\nThe stream/promises API provides an alternative set of asynchronous utility functions for streams that return Promise objects rather than using callbacks. The API is accessible via require('node:stream/promises') or require('node:stream').promises.\n\nstream.pipeline(source[, ...transforms], destination[, options])#\nstream.pipeline(streams[, options])#\nAdded in: v15.0.0\nstreams <Stream[]> | <Iterable[]> | <AsyncIterable[]> | <Function[]>\nsource <Stream> | <Iterable> | <AsyncIterable> | <Function>\nReturns: <Promise> | <AsyncIterable>\n...transforms <Stream> | <Function>\nsource <AsyncIterable>\nReturns: <Promise> | <AsyncIterable>\ndestination <Stream> | <Function>\nsource <AsyncIterable>\nReturns: <Promise> | <AsyncIterable>\noptions <Object>\nsignal <AbortSignal>\nend <boolean>\nReturns: <Promise> Fulfills when the pipeline is complete.\nconst { pipeline } = require('node:stream/promises');\nconst fs = require('node:fs');\nconst zlib = require('node:zlib');\n\nasync function run() {\n  await pipeline(\n    fs.createReadStream('archive.tar'),\n    zlib.createGzip(),\n    fs.createWriteStream('archive.tar.gz'),\n  );\n  console.log('Pipeline succeeded.');\n}\n\nrun().catch(console.error);\nTo use an AbortSignal, pass it inside an options object, as the last argument. When the signal is aborted, destroy will be called on the underlying pipeline, with an AbortError.\n\nconst { pipeline } = require('node:stream/promises');\nconst fs = require('node:fs');\nconst zlib = require('node:zlib');\n\nasync function run() {\n  const ac = new AbortController();\n  const signal = ac.signal;\n\n  setImmediate(() => ac.abort());\n  await pipeline(\n    fs.createReadStream('archive.tar'),\n    zlib.createGzip(),\n    fs.createWriteStream('archive.tar.gz'),\n    { signal },\n  );\n}\n\nrun().catch(console.error); // AbortError\nThe pipeline API also supports async generators:\n\nconst { pipeline } = require('node:stream/promises');\nconst fs = require('node:fs');\n\nasync function run() {\n  await pipeline(\n    fs.createReadStream('lowercase.txt'),\n    async function* (source, { signal }) {\n      source.setEncoding('utf8');  // Work with strings rather than `Buffer`s.\n      for await (const chunk of source) {\n        yield await processChunk(chunk, { signal });\n      }\n    },\n    fs.createWriteStream('uppercase.txt'),\n  );\n  console.log('Pipeline succeeded.');\n}\n\nrun().catch(console.error);\nRemember to handle the signal argument passed into the async generator. Especially in the case where the async generator is the source for the pipeline (i.e. first argument) or the pipeline will never complete.\n\nconst { pipeline } = require('node:stream/promises');\nconst fs = require('node:fs');\n\nasync function run() {\n  await pipeline(\n    async function* ({ signal }) {\n      await someLongRunningfn({ signal });\n      yield 'asd';\n    },\n    fs.createWriteStream('uppercase.txt'),\n  );\n  console.log('Pipeline succeeded.');\n}\n\nrun().catch(console.error);\nThe pipeline API provides callback", "doc_id": "61ba4d45-7b68-4bec-a789-333a186ab480", "embedding": null, "doc_hash": "f9c582eeca3f10a083ed07781e3dbc06f84a79bd50f0c5e6754c2a61a24b615d", "extra_info": null, "node_info": {"start": 2196728, "end": 2199716}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8dbdc791-3296-4096-8e6b-4f0cb635fe4b", "3": "03910ff0-968c-42dd-a5c1-e6286a04c9ba"}}, "__type__": "1"}, "03910ff0-968c-42dd-a5c1-e6286a04c9ba": {"__data__": {"text": "handle the signal argument passed into the async generator. Especially in the case where the async generator is the source for the pipeline (i.e. first argument) or the pipeline will never complete.\n\nconst { pipeline } = require('node:stream/promises');\nconst fs = require('node:fs');\n\nasync function run() {\n  await pipeline(\n    async function* ({ signal }) {\n      await someLongRunningfn({ signal });\n      yield 'asd';\n    },\n    fs.createWriteStream('uppercase.txt'),\n  );\n  console.log('Pipeline succeeded.');\n}\n\nrun().catch(console.error);\nThe pipeline API provides callback version:\n\nstream.finished(stream[, options])#\nAdded in: v15.0.0\nstream <Stream>\noptions <Object>\nerror <boolean> | <undefined>\nreadable <boolean> | <undefined>\nwritable <boolean> | <undefined>\nsignal: <AbortSignal> | <undefined>\nReturns: <Promise> Fulfills when the stream is no longer readable or writable.\nconst { finished } = require('node:stream/promises');\nconst fs = require('node:fs');\n\nconst rs = fs.createReadStream('archive.tar');\n\nasync function run() {\n  await finished(rs);\n  console.log('Stream is done reading.');\n}\n\nrun().catch(console.error);\nrs.resume(); // Drain the stream.\nThe finished API provides callback version:\n\nObject mode#\nAll streams created by Node.js APIs operate exclusively on strings and Buffer (or Uint8Array) objects. It is possible, however, for stream implementations to work with other types of JavaScript values (with the exception of null, which serves a special purpose within streams). Such streams are considered to operate in \"object mode\".\n\nStream instances are switched into object mode using the objectMode option when the stream is created. Attempting to switch an existing stream into object mode is not safe.\n\nBuffering#\nBoth Writable and Readable streams will store data in an internal buffer.\n\nThe amount of data potentially buffered depends on the highWaterMark option passed into the stream's constructor. For normal streams, the highWaterMark option specifies a total number of bytes. For streams operating in object mode, the highWaterMark specifies a total number of objects.\n\nData is buffered in Readable streams when the implementation calls stream.push(chunk). If the consumer of the Stream does not call stream.read(), the data will sit in the internal queue until it is consumed.\n\nOnce the total size of the internal read buffer reaches the threshold specified by highWaterMark, the stream will temporarily stop reading data from the underlying resource until the data currently buffered can be consumed (that is, the stream will stop calling the internal readable._read() method that is used to fill the read buffer).\n\nData is buffered in Writable streams when the writable.write(chunk) method is called repeatedly. While the total size of the internal write buffer is below the threshold set by highWaterMark, calls to writable.write() will return true. Once the size of the internal buffer reaches or exceeds the highWaterMark, false will be returned.\n\nA key goal of the stream API, particularly the stream.pipe() method, is to limit the buffering of data to acceptable levels such that sources and destinations of differing speeds will not overwhelm the available memory.\n\nThe highWaterMark option is a threshold, not a limit: it dictates the amount of data that a stream buffers before it stops asking for more data. It does not enforce a strict memory limitation in general. Specific stream implementations may choose to enforce stricter limits but doing so is optional.\n\nBecause Duplex and Transform streams are both Readable and Writable, each maintains two separate internal buffers used for reading and writing, allowing each side to operate independently of the other while maintaining an appropriate and efficient flow of data. For example, net.Socket instances are Duplex streams whose Readable side allows", "doc_id": "03910ff0-968c-42dd-a5c1-e6286a04c9ba", "embedding": null, "doc_hash": "085a2c927ae60ec5ccc94929f9162e7010fe311f19854e06fd1e11d894326b0d", "extra_info": null, "node_info": {"start": 2199759, "end": 2203625}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "61ba4d45-7b68-4bec-a789-333a186ab480", "3": "d3d065d6-3471-4a44-9c99-408915752261"}}, "__type__": "1"}, "d3d065d6-3471-4a44-9c99-408915752261": {"__data__": {"text": "the stream API, particularly the stream.pipe() method, is to limit the buffering of data to acceptable levels such that sources and destinations of differing speeds will not overwhelm the available memory.\n\nThe highWaterMark option is a threshold, not a limit: it dictates the amount of data that a stream buffers before it stops asking for more data. It does not enforce a strict memory limitation in general. Specific stream implementations may choose to enforce stricter limits but doing so is optional.\n\nBecause Duplex and Transform streams are both Readable and Writable, each maintains two separate internal buffers used for reading and writing, allowing each side to operate independently of the other while maintaining an appropriate and efficient flow of data. For example, net.Socket instances are Duplex streams whose Readable side allows consumption of data received from the socket and whose Writable side allows writing data to the socket. Because data may be written to the socket at a faster or slower rate than data is received, each side should operate (and buffer) independently of the other.\n\nThe mechanics of the internal buffering are an internal implementation detail and may be changed at any time. However, for certain advanced implementations, the internal buffers can be retrieved using writable.writableBuffer or readable.readableBuffer. Use of these undocumented properties is discouraged.\n\nAPI for stream consumers#\nAlmost all Node.js applications, no matter how simple, use streams in some manner. The following is an example of using streams in a Node.js application that implements an HTTP server:\n\nconst http = require('node:http');\n\nconst server = http.createServer((req, res) => {\n  // `req` is an http.IncomingMessage, which is a readable stream.\n  // `res` is an http.ServerResponse, which is a writable stream.\n\n  let body = '';\n  // Get the data as utf8 strings.\n  // If an encoding is not set, Buffer objects will be received.\n  req.setEncoding('utf8');\n\n  // Readable streams emit 'data' events once a listener is added.\n  req.on('data', (chunk) => {\n    body += chunk;\n  });\n\n  // The 'end' event indicates that the entire body has been received.\n  req.on('end', () => {\n    try {\n      const data = JSON.parse(body);\n      // Write back something interesting to the user:\n      res.write(typeof data);\n      res.end();\n    } catch (er) {\n      // uh oh! bad json!\n      res.statusCode = 400;\n      return res.end(`error: ${er.message}`);\n    }\n  });\n});\n\nserver.listen(1337);\n\n// $ curl localhost:1337 -d \"{}\"\n// object\n// $ curl localhost:1337 -d \"\\\"foo\\\"\"\n// string\n// $ curl localhost:1337 -d \"not json\"\n// error: Unexpected token 'o', \"not json\" is not valid JSON\nWritable streams (such as res in the example) expose methods such as write() and end() that are used to write data onto the stream.\n\nReadable streams use the EventEmitter API for notifying application code when data is available to be read off the stream. That available data can be read from the stream in multiple ways.\n\nBoth Writable and Readable streams use the EventEmitter API in various ways to communicate the current state of the stream.\n\nDuplex and Transform streams are both Writable and Readable.\n\nApplications that are either writing data to or consuming data from a stream are not required to implement the stream interfaces directly and will generally have no reason to call require('node:stream').\n\nDevelopers wishing to implement new types of streams should refer to the section API for stream implementers.\n\nWritable streams#\nWritable streams are an abstraction for a destination to which data is written.\n\nExamples of Writable streams include:\n\nHTTP requests, on the client\nHTTP responses, on the server\nfs write", "doc_id": "d3d065d6-3471-4a44-9c99-408915752261", "embedding": null, "doc_hash": "25a3f55647cafed16f3f7c20e52956b3e7353b47ec58703aee872a036ef00156", "extra_info": null, "node_info": {"start": 2203400, "end": 2207143}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "03910ff0-968c-42dd-a5c1-e6286a04c9ba", "3": "6c47a3d6-6047-4a0c-8745-c2158bb78021"}}, "__type__": "1"}, "6c47a3d6-6047-4a0c-8745-c2158bb78021": {"__data__": {"text": "available to be read off the stream. That available data can be read from the stream in multiple ways.\n\nBoth Writable and Readable streams use the EventEmitter API in various ways to communicate the current state of the stream.\n\nDuplex and Transform streams are both Writable and Readable.\n\nApplications that are either writing data to or consuming data from a stream are not required to implement the stream interfaces directly and will generally have no reason to call require('node:stream').\n\nDevelopers wishing to implement new types of streams should refer to the section API for stream implementers.\n\nWritable streams#\nWritable streams are an abstraction for a destination to which data is written.\n\nExamples of Writable streams include:\n\nHTTP requests, on the client\nHTTP responses, on the server\nfs write streams\nzlib streams\ncrypto streams\nTCP sockets\nchild process stdin\nprocess.stdout, process.stderr\nSome of these examples are actually Duplex streams that implement the Writable interface.\n\nAll Writable streams implement the interface defined by the stream.Writable class.\n\nWhile specific instances of Writable streams may differ in various ways, all Writable streams follow the same fundamental usage pattern as illustrated in the example below:\n\nconst myStream = getWritableStreamSomehow();\nmyStream.write('some data');\nmyStream.write('some more data');\nmyStream.end('done writing data');\nClass: stream.Writable#\nAdded in: v0.9.4\nEvent: 'close'#\nHistory\nThe 'close' event is emitted when the stream and any of its underlying resources (a file descriptor, for example) have been closed. The event indicates that no more events will be emitted, and no further computation will occur.\n\nA Writable stream will always emit the 'close' event if it is created with the emitClose option.\n\nEvent: 'drain'#\nAdded in: v0.9.4\nIf a call to stream.write(chunk) returns false, the 'drain' event will be emitted when it is appropriate to resume writing data to the stream.\n\n// Write the data to the supplied writable stream one million times.\n// Be attentive to back-pressure.\nfunction writeOneMillionTimes(writer, data, encoding, callback) {\n  let i = 1000000;\n  write();\n  function write() {\n    let ok = true;\n    do {\n      i--;\n      if (i === 0) {\n        // Last time!\n        writer.write(data, encoding, callback);\n      } else {\n        // See if we should continue, or wait.\n        // Don't pass the callback, because we're not done yet.\n        ok = writer.write(data, encoding);\n      }\n    } while (i > 0 && ok);\n    if (i > 0) {\n      // Had to stop early!\n      // Write some more once it drains.\n      writer.once('drain', write);\n    }\n  }\n}\nEvent: 'error'#\nAdded in: v0.9.4\n<Error>\nThe 'error' event is emitted if an error occurred while writing or piping data. The listener callback is passed a single Error argument when called.\n\nThe stream is closed when the 'error' event is emitted unless the autoDestroy option was set to false when creating the stream.\n\nAfter 'error', no further events other than 'close' should be emitted (including 'error' events).\n\nEvent: 'finish'#\nAdded in: v0.9.4\nThe 'finish' event is emitted after the stream.end() method has been called, and all data has been flushed to the underlying system.\n\nconst writer = getWritableStreamSomehow();\nfor (let i = 0; i < 100; i++) {\n  writer.write(`hello,", "doc_id": "6c47a3d6-6047-4a0c-8745-c2158bb78021", "embedding": null, "doc_hash": "8529af9d479c97d0ec6004cf229cfbdc979d1449b064331bc397899cab288d92", "extra_info": null, "node_info": {"start": 2207170, "end": 2210514}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d3d065d6-3471-4a44-9c99-408915752261", "3": "c6a2ec23-91ed-4545-8f07-ad32667e138a"}}, "__type__": "1"}, "c6a2ec23-91ed-4545-8f07-ad32667e138a": {"__data__": {"text": "in: v0.9.4\n<Error>\nThe 'error' event is emitted if an error occurred while writing or piping data. The listener callback is passed a single Error argument when called.\n\nThe stream is closed when the 'error' event is emitted unless the autoDestroy option was set to false when creating the stream.\n\nAfter 'error', no further events other than 'close' should be emitted (including 'error' events).\n\nEvent: 'finish'#\nAdded in: v0.9.4\nThe 'finish' event is emitted after the stream.end() method has been called, and all data has been flushed to the underlying system.\n\nconst writer = getWritableStreamSomehow();\nfor (let i = 0; i < 100; i++) {\n  writer.write(`hello, #${i}!\\n`);\n}\nwriter.on('finish', () => {\n  console.log('All writes are now complete.');\n});\nwriter.end('This is the end\\n');\nEvent: 'pipe'#\nAdded in: v0.9.4\nsrc <stream.Readable> source stream that is piping to this writable\nThe 'pipe' event is emitted when the stream.pipe() method is called on a readable stream, adding this writable to its set of destinations.\n\nconst writer = getWritableStreamSomehow();\nconst reader = getReadableStreamSomehow();\nwriter.on('pipe', (src) => {\n  console.log('Something is piping into the writer.');\n  assert.equal(src, reader);\n});\nreader.pipe(writer);\nEvent: 'unpipe'#\nAdded in: v0.9.4\nsrc <stream.Readable> The source stream that unpiped this writable\nThe 'unpipe' event is emitted when the stream.unpipe() method is called on a Readable stream, removing this Writable from its set of destinations.\n\nThis is also emitted in case this Writable stream emits an error when a Readable stream pipes into it.\n\nconst writer = getWritableStreamSomehow();\nconst reader = getReadableStreamSomehow();\nwriter.on('unpipe', (src) => {\n  console.log('Something has stopped piping into the writer.');\n  assert.equal(src, reader);\n});\nreader.pipe(writer);\nreader.unpipe(writer);\nwritable.cork()#\nAdded in: v0.11.2\nThe writable.cork() method forces all written data to be buffered in memory. The buffered data will be flushed when either the stream.uncork() or stream.end() methods are called.\n\nThe primary intent of writable.cork() is to accommodate a situation in which several small chunks are written to the stream in rapid succession. Instead of immediately forwarding them to the underlying destination, writable.cork() buffers all the chunks until writable.uncork() is called, which will pass them all to writable._writev(), if present. This prevents a head-of-line blocking situation where data is being buffered while waiting for the first small chunk to be processed. However, use of writable.cork() without implementing writable._writev() may have an adverse effect on throughput.\n\nSee also: writable.uncork(), writable._writev().\n\nwritable.destroy([error])#\nHistory\nerror <Error> Optional, an error to emit with 'error' event.\nReturns: <this>\nDestroy the stream. Optionally emit an 'error' event, and emit a 'close' event (unless emitClose is set to false). After this call, the writable stream has ended and subsequent calls to write() or end() will result in an ERR_STREAM_DESTROYED error. This is a destructive and immediate way to destroy a stream. Previous calls to write() may not have drained, and may trigger an ERR_STREAM_DESTROYED error. Use end() instead of destroy if data should flush before close, or wait for the 'drain' event before destroying the stream.\n\nconst { Writable } = require('node:stream');\n\nconst myStream = new Writable();\n\nconst fooErr = new Error('foo", "doc_id": "c6a2ec23-91ed-4545-8f07-ad32667e138a", "embedding": null, "doc_hash": "99d1a28f227b613b9d239aad0a9814c24041b54de309114cdc47b9e6778220e3", "extra_info": null, "node_info": {"start": 2210645, "end": 2214123}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6c47a3d6-6047-4a0c-8745-c2158bb78021", "3": "adae52c7-5b3f-440f-9b3c-6cec913f1997"}}, "__type__": "1"}, "adae52c7-5b3f-440f-9b3c-6cec913f1997": {"__data__": {"text": "Optional, an error to emit with 'error' event.\nReturns: <this>\nDestroy the stream. Optionally emit an 'error' event, and emit a 'close' event (unless emitClose is set to false). After this call, the writable stream has ended and subsequent calls to write() or end() will result in an ERR_STREAM_DESTROYED error. This is a destructive and immediate way to destroy a stream. Previous calls to write() may not have drained, and may trigger an ERR_STREAM_DESTROYED error. Use end() instead of destroy if data should flush before close, or wait for the 'drain' event before destroying the stream.\n\nconst { Writable } = require('node:stream');\n\nconst myStream = new Writable();\n\nconst fooErr = new Error('foo error');\nmyStream.destroy(fooErr);\nmyStream.on('error', (fooErr) => console.error(fooErr.message)); // foo error\nconst { Writable } = require('node:stream');\n\nconst myStream = new Writable();\n\nmyStream.destroy();\nmyStream.on('error', function wontHappen() {});\nconst { Writable } = require('node:stream');\n\nconst myStream = new Writable();\nmyStream.destroy();\n\nmyStream.write('foo', (error) => console.error(error.code));\n// ERR_STREAM_DESTROYED\nOnce destroy() has been called any further calls will be a no-op and no further errors except from _destroy() may be emitted as 'error'.\n\nImplementors should not override this method, but instead implement writable._destroy().\n\nwritable.closed#\nAdded in: v18.0.0\n<boolean>\nIs true after 'close' has been emitted.\n\nwritable.destroyed#\nAdded in: v8.0.0\n<boolean>\nIs true after writable.destroy() has been called.\n\nconst { Writable } = require('node:stream');\n\nconst myStream = new Writable();\n\nconsole.log(myStream.destroyed); // false\nmyStream.destroy();\nconsole.log(myStream.destroyed); // true\nwritable.end([chunk[, encoding]][, callback])#\nHistory\nchunk <string> | <Buffer> | <Uint8Array> | <any> Optional data to write. For streams not operating in object mode, chunk must be a string, Buffer or Uint8Array. For object mode streams, chunk may be any JavaScript value other than null.\nencoding <string> The encoding if chunk is a string\ncallback <Function> Callback for when the stream is finished.\nReturns: <this>\nCalling the writable.end() method signals that no more data will be written to the Writable. The optional chunk and encoding arguments allow one final additional chunk of data to be written immediately before closing the stream.\n\nCalling the stream.write() method after calling stream.end() will raise an error.\n\n// Write 'hello, ' and then end with 'world!'.\nconst fs = require('node:fs');\nconst file = fs.createWriteStream('example.txt');\nfile.write('hello, ');\nfile.end('world!');\n// Writing more now is not allowed!\nwritable.setDefaultEncoding(encoding)#\nHistory\nencoding <string> The new default encoding\nReturns: <this>\nThe writable.setDefaultEncoding() method sets the default encoding for a Writable stream.\n\nwritable.uncork()#\nAdded in: v0.11.2\nThe writable.uncork() method flushes all data buffered since stream.cork() was called.\n\nWhen using writable.cork() and writable.uncork() to manage the buffering of writes to a stream, defer calls to writable.uncork() using process.nextTick(). Doing so allows batching of all writable.write() calls that occur within a given Node.js event loop phase.\n\nstream.cork();\nstream.write('some ');\nstream.write('data ');\nprocess.nextTick(() => stream.uncork());\nIf the writable.cork() method is called multiple times on a stream, the same number of calls to", "doc_id": "adae52c7-5b3f-440f-9b3c-6cec913f1997", "embedding": null, "doc_hash": "2c212b4745f50e8ae6c176105257749ee1241cb65142c38759a74f64674a52ec", "extra_info": null, "node_info": {"start": 2214093, "end": 2217561}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c6a2ec23-91ed-4545-8f07-ad32667e138a", "3": "1470bfa7-c72f-40ab-b138-c9b4fa724c3f"}}, "__type__": "1"}, "1470bfa7-c72f-40ab-b138-c9b4fa724c3f": {"__data__": {"text": "method sets the default encoding for a Writable stream.\n\nwritable.uncork()#\nAdded in: v0.11.2\nThe writable.uncork() method flushes all data buffered since stream.cork() was called.\n\nWhen using writable.cork() and writable.uncork() to manage the buffering of writes to a stream, defer calls to writable.uncork() using process.nextTick(). Doing so allows batching of all writable.write() calls that occur within a given Node.js event loop phase.\n\nstream.cork();\nstream.write('some ');\nstream.write('data ');\nprocess.nextTick(() => stream.uncork());\nIf the writable.cork() method is called multiple times on a stream, the same number of calls to writable.uncork() must be called to flush the buffered data.\n\nstream.cork();\nstream.write('some ');\nstream.cork();\nstream.write('data ');\nprocess.nextTick(() => {\n  stream.uncork();\n  // The data will not be flushed until uncork() is called a second time.\n  stream.uncork();\n});\nSee also: writable.cork().\n\nwritable.writable#\nAdded in: v11.4.0\n<boolean>\nIs true if it is safe to call writable.write(), which means the stream has not been destroyed, errored, or ended.\n\nwritable.writableAborted#\nAdded in: v18.0.0\nStability: 1 - Experimental\n<boolean>\nReturns whether the stream was destroyed or errored before emitting 'finish'.\n\nwritable.writableEnded#\nAdded in: v12.9.0\n<boolean>\nIs true after writable.end() has been called. This property does not indicate whether the data has been flushed, for this use writable.writableFinished instead.\n\nwritable.writableCorked#\nAdded in: v13.2.0, v12.16.0\n<integer>\nNumber of times writable.uncork() needs to be called in order to fully uncork the stream.\n\nwritable.errored#\nAdded in: v18.0.0\n<Error>\nReturns error if the stream has been destroyed with an error.\n\nwritable.writableFinished#\nAdded in: v12.6.0\n<boolean>\nIs set to true immediately before the 'finish' event is emitted.\n\nwritable.writableHighWaterMark#\nAdded in: v9.3.0\n<number>\nReturn the value of highWaterMark passed when creating this Writable.\n\nwritable.writableLength#\nAdded in: v9.4.0\n<number>\nThis property contains the number of bytes (or objects) in the queue ready to be written. The value provides introspection data regarding the status of the highWaterMark.\n\nwritable.writableNeedDrain#\nAdded in: v15.2.0, v14.17.0\n<boolean>\nIs true if the stream's buffer has been full and stream will emit 'drain'.\n\nwritable.writableObjectMode#\nAdded in: v12.3.0\n<boolean>\nGetter for the property objectMode of a given Writable stream.\n\nwritable.write(chunk[, encoding][, callback])#\nHistory\nchunk <string> | <Buffer> | <Uint8Array> | <any> Optional data to write. For streams not operating in object mode, chunk must be a string, Buffer or Uint8Array. For object mode streams, chunk may be any JavaScript value other than null.\nencoding <string> | <null> The encoding, if chunk is a string. Default: 'utf8'\ncallback <Function> Callback for when this chunk of data is flushed.\nReturns: <boolean> false if the stream wishes for the calling code to wait for the 'drain' event to be emitted before continuing to write additional data; otherwise true.\nThe writable.write() method writes some data to the stream, and calls the supplied callback once the data has been fully handled. If an error occurs, the callback will be called with the error as its first argument. The callback is called", "doc_id": "1470bfa7-c72f-40ab-b138-c9b4fa724c3f", "embedding": null, "doc_hash": "a17d7653f4da63c99e7ed8b292c962627e7d2de4ecf1eca2648d4fbc59e2c3f5", "extra_info": null, "node_info": {"start": 2217592, "end": 2220925}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "adae52c7-5b3f-440f-9b3c-6cec913f1997", "3": "e7b16ddd-a20b-4681-aef3-a544a7568816"}}, "__type__": "1"}, "e7b16ddd-a20b-4681-aef3-a544a7568816": {"__data__": {"text": "| <any> Optional data to write. For streams not operating in object mode, chunk must be a string, Buffer or Uint8Array. For object mode streams, chunk may be any JavaScript value other than null.\nencoding <string> | <null> The encoding, if chunk is a string. Default: 'utf8'\ncallback <Function> Callback for when this chunk of data is flushed.\nReturns: <boolean> false if the stream wishes for the calling code to wait for the 'drain' event to be emitted before continuing to write additional data; otherwise true.\nThe writable.write() method writes some data to the stream, and calls the supplied callback once the data has been fully handled. If an error occurs, the callback will be called with the error as its first argument. The callback is called asynchronously and before 'error' is emitted.\n\nThe return value is true if the internal buffer is less than the highWaterMark configured when the stream was created after admitting chunk. If false is returned, further attempts to write data to the stream should stop until the 'drain' event is emitted.\n\nWhile a stream is not draining, calls to write() will buffer chunk, and return false. Once all currently buffered chunks are drained (accepted for delivery by the operating system), the 'drain' event will be emitted. Once write() returns false, do not write more chunks until the 'drain' event is emitted. While calling write() on a stream that is not draining is allowed, Node.js will buffer all written chunks until maximum memory usage occurs, at which point it will abort unconditionally. Even before it aborts, high memory usage will cause poor garbage collector performance and high RSS (which is not typically released back to the system, even after the memory is no longer required). Since TCP sockets may never drain if the remote peer does not read the data, writing a socket that is not draining may lead to a remotely exploitable vulnerability.\n\nWriting data while the stream is not draining is particularly problematic for a Transform, because the Transform streams are paused by default until they are piped or a 'data' or 'readable' event handler is added.\n\nIf the data to be written can be generated or fetched on demand, it is recommended to encapsulate the logic into a Readable and use stream.pipe(). However, if calling write() is preferred, it is possible to respect backpressure and avoid memory issues using the 'drain' event:\n\nfunction write(data, cb) {\n  if (!stream.write(data)) {\n    stream.once('drain', cb);\n  } else {\n    process.nextTick(cb);\n  }\n}\n\n// Wait for cb to be called before doing any other write.\nwrite('hello', () => {\n  console.log('Write completed, do more writes now.');\n});\nA Writable stream in object mode will always ignore the encoding argument.\n\nReadable streams#\nReadable streams are an abstraction for a source from which data is consumed.\n\nExamples of Readable streams include:\n\nHTTP responses, on the client\nHTTP requests, on the server\nfs read streams\nzlib streams\ncrypto streams\nTCP sockets\nchild process stdout and stderr\nprocess.stdin\nAll Readable streams implement the interface defined by the stream.Readable class.\n\nTwo reading modes#\nReadable streams effectively operate in one of two modes: flowing and paused. These modes are separate from object mode. A Readable stream can be in object mode or not, regardless of whether it is in flowing mode or paused mode.\n\nIn flowing mode, data is read from the underlying system automatically and provided to an application as quickly as possible using events via the EventEmitter interface.\n\nIn paused mode, the stream.read() method must be called explicitly to read chunks of data from the stream.\n\nAll Readable streams begin in paused mode but can be switched to flowing mode in one of the following ways:\n\nAdding a 'data' event handler.\nCalling the stream.resume() method.\nCalling the stream.pipe() method to send the data to a Writable.\nThe Readable can switch back to paused mode using one of the", "doc_id": "e7b16ddd-a20b-4681-aef3-a544a7568816", "embedding": null, "doc_hash": "858cd5626b041020b174cf5fa66e1fbdcb7ff75e787269220611089b4748ea6b", "extra_info": null, "node_info": {"start": 2220861, "end": 2224826}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1470bfa7-c72f-40ab-b138-c9b4fa724c3f", "3": "5eee9f1a-e559-421c-ad6a-83d3cebe3292"}}, "__type__": "1"}, "5eee9f1a-e559-421c-ad6a-83d3cebe3292": {"__data__": {"text": "modes: flowing and paused. These modes are separate from object mode. A Readable stream can be in object mode or not, regardless of whether it is in flowing mode or paused mode.\n\nIn flowing mode, data is read from the underlying system automatically and provided to an application as quickly as possible using events via the EventEmitter interface.\n\nIn paused mode, the stream.read() method must be called explicitly to read chunks of data from the stream.\n\nAll Readable streams begin in paused mode but can be switched to flowing mode in one of the following ways:\n\nAdding a 'data' event handler.\nCalling the stream.resume() method.\nCalling the stream.pipe() method to send the data to a Writable.\nThe Readable can switch back to paused mode using one of the following:\n\nIf there are no pipe destinations, by calling the stream.pause() method.\nIf there are pipe destinations, by removing all pipe destinations. Multiple pipe destinations may be removed by calling the stream.unpipe() method.\nThe important concept to remember is that a Readable will not generate data until a mechanism for either consuming or ignoring that data is provided. If the consuming mechanism is disabled or taken away, the Readable will attempt to stop generating the data.\n\nFor backward compatibility reasons, removing 'data' event handlers will not automatically pause the stream. Also, if there are piped destinations, then calling stream.pause() will not guarantee that the stream will remain paused once those destinations drain and ask for more data.\n\nIf a Readable is switched into flowing mode and there are no consumers available to handle the data, that data will be lost. This can occur, for instance, when the readable.resume() method is called without a listener attached to the 'data' event, or when a 'data' event handler is removed from the stream.\n\nAdding a 'readable' event handler automatically makes the stream stop flowing, and the data has to be consumed via readable.read(). If the 'readable' event handler is removed, then the stream will start flowing again if there is a 'data' event handler.\n\nThree states#\nThe \"two modes\" of operation for a Readable stream are a simplified abstraction for the more complicated internal state management that is happening within the Readable stream implementation.\n\nSpecifically, at any given point in time, every Readable is in one of three possible states:\n\nreadable.readableFlowing === null\nreadable.readableFlowing === false\nreadable.readableFlowing === true\nWhen readable.readableFlowing is null, no mechanism for consuming the stream's data is provided. Therefore, the stream will not generate data. While in this state, attaching a listener for the 'data' event, calling the readable.pipe() method, or calling the readable.resume() method will switch readable.readableFlowing to true, causing the Readable to begin actively emitting events as data is generated.\n\nCalling readable.pause(), readable.unpipe(), or receiving backpressure will cause the readable.readableFlowing to be set as false, temporarily halting the flowing of events but not halting the generation of data. While in this state, attaching a listener for the 'data' event will not switch readable.readableFlowing to true.\n\nconst { PassThrough, Writable } = require('node:stream');\nconst pass = new PassThrough();\nconst writable = new Writable();\n\npass.pipe(writable);\npass.unpipe(writable);\n// readableFlowing is now false.\n\npass.on('data', (chunk) => { console.log(chunk.toString()); });\n// readableFlowing is still false.\npass.write('ok');  // Will not emit 'data'.\npass.resume();     // Must be called to make stream emit 'data'.\n// readableFlowing is now true.\nWhile readable.readableFlowing is false, data may be accumulating within the stream's internal buffer.\n\nChoose one API style#\nThe Readable stream API evolved across multiple Node.js versions and provides multiple methods of consuming stream data. In general, developers should choose one of the methods of consuming data and should never use multiple methods to consume data from a single stream. Specifically, using a", "doc_id": "5eee9f1a-e559-421c-ad6a-83d3cebe3292", "embedding": null, "doc_hash": "3201e5ea2762725d7983d693af69ea315a132e59dafc30a93f168252721caa80", "extra_info": null, "node_info": {"start": 2224819, "end": 2228915}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e7b16ddd-a20b-4681-aef3-a544a7568816", "3": "642ad60b-0459-498a-ae44-e8ecce2ef906"}}, "__type__": "1"}, "642ad60b-0459-498a-ae44-e8ecce2ef906": {"__data__": {"text": "readableFlowing is now false.\n\npass.on('data', (chunk) => { console.log(chunk.toString()); });\n// readableFlowing is still false.\npass.write('ok');  // Will not emit 'data'.\npass.resume();     // Must be called to make stream emit 'data'.\n// readableFlowing is now true.\nWhile readable.readableFlowing is false, data may be accumulating within the stream's internal buffer.\n\nChoose one API style#\nThe Readable stream API evolved across multiple Node.js versions and provides multiple methods of consuming stream data. In general, developers should choose one of the methods of consuming data and should never use multiple methods to consume data from a single stream. Specifically, using a combination of on('data'), on('readable'), pipe(), or async iterators could lead to unintuitive behavior.\n\nClass: stream.Readable#\nAdded in: v0.9.4\nEvent: 'close'#\nHistory\nThe 'close' event is emitted when the stream and any of its underlying resources (a file descriptor, for example) have been closed. The event indicates that no more events will be emitted, and no further computation will occur.\n\nA Readable stream will always emit the 'close' event if it is created with the emitClose option.\n\nEvent: 'data'#\nAdded in: v0.9.4\nchunk <Buffer> | <string> | <any> The chunk of data. For streams that are not operating in object mode, the chunk will be either a string or Buffer. For streams that are in object mode, the chunk can be any JavaScript value other than null.\nThe 'data' event is emitted whenever the stream is relinquishing ownership of a chunk of data to a consumer. This may occur whenever the stream is switched in flowing mode by calling readable.pipe(), readable.resume(), or by attaching a listener callback to the 'data' event. The 'data' event will also be emitted whenever the readable.read() method is called and a chunk of data is available to be returned.\n\nAttaching a 'data' event listener to a stream that has not been explicitly paused will switch the stream into flowing mode. Data will then be passed as soon as it is available.\n\nThe listener callback will be passed the chunk of data as a string if a default encoding has been specified for the stream using the readable.setEncoding() method; otherwise the data will be passed as a Buffer.\n\nconst readable = getReadableStreamSomehow();\nreadable.on('data', (chunk) => {\n  console.log(`Received ${chunk.length} bytes of data.`);\n});\nEvent: 'end'#\nAdded in: v0.9.4\nThe 'end' event is emitted when there is no more data to be consumed from the stream.\n\nThe 'end' event will not be emitted unless the data is completely consumed. This can be accomplished by switching the stream into flowing mode, or by calling stream.read() repeatedly until all data has been consumed.\n\nconst readable = getReadableStreamSomehow();\nreadable.on('data', (chunk) => {\n  console.log(`Received ${chunk.length} bytes of data.`);\n});\nreadable.on('end', () => {\n  console.log('There will be no more data.');\n});\nEvent: 'error'#\nAdded in: v0.9.4\n<Error>\nThe 'error' event may be emitted by a Readable implementation at any time. Typically, this may occur if the underlying stream is unable to generate data due to an underlying internal failure, or when a stream implementation attempts to push an invalid chunk of data.\n\nThe listener callback will be passed a single Error object.\n\nEvent: 'pause'#\nAdded in: v0.9.4\nThe 'pause' event is emitted when stream.pause() is called and readableFlowing is not false.\n\nEvent: 'readable'#\nHistory\nThe 'readable' event is emitted when there is data available to be read from the stream or when the end of the stream has been reached. Effectively, the 'readable' event indicates that the stream has new", "doc_id": "642ad60b-0459-498a-ae44-e8ecce2ef906", "embedding": null, "doc_hash": "29d180ca567e846eabd88bccf77b03e12f7790f7f55994dab10277234c52dc9f", "extra_info": null, "node_info": {"start": 2228960, "end": 2232642}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5eee9f1a-e559-421c-ad6a-83d3cebe3292", "3": "d3685227-1f39-44ef-a67b-865a0d83160b"}}, "__type__": "1"}, "d3685227-1f39-44ef-a67b-865a0d83160b": {"__data__": {"text": "v0.9.4\n<Error>\nThe 'error' event may be emitted by a Readable implementation at any time. Typically, this may occur if the underlying stream is unable to generate data due to an underlying internal failure, or when a stream implementation attempts to push an invalid chunk of data.\n\nThe listener callback will be passed a single Error object.\n\nEvent: 'pause'#\nAdded in: v0.9.4\nThe 'pause' event is emitted when stream.pause() is called and readableFlowing is not false.\n\nEvent: 'readable'#\nHistory\nThe 'readable' event is emitted when there is data available to be read from the stream or when the end of the stream has been reached. Effectively, the 'readable' event indicates that the stream has new information. If data is available, stream.read() will return that data.\n\nconst readable = getReadableStreamSomehow();\nreadable.on('readable', function() {\n  // There is some data to read now.\n  let data;\n\n  while ((data = this.read()) !== null) {\n    console.log(data);\n  }\n});\nIf the end of the stream has been reached, calling stream.read() will return null and trigger the 'end' event. This is also true if there never was any data to be read. For instance, in the following example, foo.txt is an empty file:\n\nconst fs = require('node:fs');\nconst rr = fs.createReadStream('foo.txt');\nrr.on('readable', () => {\n  console.log(`readable: ${rr.read()}`);\n});\nrr.on('end', () => {\n  console.log('end');\n});\nThe output of running this script is:\n\n$ node test.js\nreadable: null\nend\nIn some cases, attaching a listener for the 'readable' event will cause some amount of data to be read into an internal buffer.\n\nIn general, the readable.pipe() and 'data' event mechanisms are easier to understand than the 'readable' event. However, handling 'readable' might result in increased throughput.\n\nIf both 'readable' and 'data' are used at the same time, 'readable' takes precedence in controlling the flow, i.e. 'data' will be emitted only when stream.read() is called. The readableFlowing property would become false. If there are 'data' listeners when 'readable' is removed, the stream will start flowing, i.e. 'data' events will be emitted without calling .resume().\n\nEvent: 'resume'#\nAdded in: v0.9.4\nThe 'resume' event is emitted when stream.resume() is called and readableFlowing is not true.\n\nreadable.destroy([error])#\nHistory\nerror <Error> Error which will be passed as payload in 'error' event\nReturns: <this>\nDestroy the stream. Optionally emit an 'error' event, and emit a 'close' event (unless emitClose is set to false). After this call, the readable stream will release any internal resources and subsequent calls to push() will be ignored.\n\nOnce destroy() has been called any further calls will be a no-op and no further errors except from _destroy() may be emitted as 'error'.\n\nImplementors should not override this method, but instead implement readable._destroy().\n\nreadable.closed#\nAdded in: v18.0.0\n<boolean>\nIs true after 'close' has been emitted.\n\nreadable.destroyed#\nAdded in: v8.0.0\n<boolean>\nIs true after readable.destroy() has been called.\n\nreadable.isPaused()#\nAdded in: v0.11.14\nReturns: <boolean>\nThe readable.isPaused() method returns the current operating state of the Readable. This is used primarily by the mechanism that underlies the readable.pipe() method. In most typical cases, there will be no reason to use this method directly.\n\nconst readable = new stream.Readable();\n\nreadable.isPaused(); // === false\nreadable.pause();\nreadable.isPaused(); // === true\nreadable.resume();\nreadable.isPaused(); // ===", "doc_id": "d3685227-1f39-44ef-a67b-865a0d83160b", "embedding": null, "doc_hash": "57332478370eadaeaa315fffdcf6c8ad87c491c59b9f340e8fbaa0abcfb6d8c0", "extra_info": null, "node_info": {"start": 2232642, "end": 2236179}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "642ad60b-0459-498a-ae44-e8ecce2ef906", "3": "3b96a36d-0f9e-4b06-821a-287201bdf2fa"}}, "__type__": "1"}, "3b96a36d-0f9e-4b06-821a-287201bdf2fa": {"__data__": {"text": "v18.0.0\n<boolean>\nIs true after 'close' has been emitted.\n\nreadable.destroyed#\nAdded in: v8.0.0\n<boolean>\nIs true after readable.destroy() has been called.\n\nreadable.isPaused()#\nAdded in: v0.11.14\nReturns: <boolean>\nThe readable.isPaused() method returns the current operating state of the Readable. This is used primarily by the mechanism that underlies the readable.pipe() method. In most typical cases, there will be no reason to use this method directly.\n\nconst readable = new stream.Readable();\n\nreadable.isPaused(); // === false\nreadable.pause();\nreadable.isPaused(); // === true\nreadable.resume();\nreadable.isPaused(); // === false\nreadable.pause()#\nAdded in: v0.9.4\nReturns: <this>\nThe readable.pause() method will cause a stream in flowing mode to stop emitting 'data' events, switching out of flowing mode. Any data that becomes available will remain in the internal buffer.\n\nconst readable = getReadableStreamSomehow();\nreadable.on('data', (chunk) => {\n  console.log(`Received ${chunk.length} bytes of data.`);\n  readable.pause();\n  console.log('There will be no additional data for 1 second.');\n  setTimeout(() => {\n    console.log('Now data will start flowing again.');\n    readable.resume();\n  }, 1000);\n});\nThe readable.pause() method has no effect if there is a 'readable' event listener.\n\nreadable.pipe(destination[, options])#\nAdded in: v0.9.4\ndestination <stream.Writable> The destination for writing data\noptions <Object> Pipe options\nend <boolean> End the writer when the reader ends. Default: true.\nReturns: <stream.Writable> The destination, allowing for a chain of pipes if it is a Duplex or a Transform stream\nThe readable.pipe() method attaches a Writable stream to the readable, causing it to switch automatically into flowing mode and push all of its data to the attached Writable. The flow of data will be automatically managed so that the destination Writable stream is not overwhelmed by a faster Readable stream.\n\nThe following example pipes all of the data from the readable into a file named file.txt:\n\nconst fs = require('node:fs');\nconst readable = getReadableStreamSomehow();\nconst writable = fs.createWriteStream('file.txt');\n// All the data from readable goes into 'file.txt'.\nreadable.pipe(writable);\nIt is possible to attach multiple Writable streams to a single Readable stream.\n\nThe readable.pipe() method returns a reference to the destination stream making it possible to set up chains of piped streams:\n\nconst fs = require('node:fs');\nconst zlib = require('node:zlib');\nconst r = fs.createReadStream('file.txt');\nconst z = zlib.createGzip();\nconst w = fs.createWriteStream('file.txt.gz');\nr.pipe(z).pipe(w);\nBy default, stream.end() is called on the destination Writable stream when the source Readable stream emits 'end', so that the destination is no longer writable. To disable this default behavior, the end option can be passed as false, causing the destination stream to remain open:\n\nreader.pipe(writer, { end: false });\nreader.on('end', () => {\n  writer.end('Goodbye\\n');\n});\nOne important caveat is that if the Readable stream emits an error during processing, the Writable destination is not closed automatically. If an error occurs, it will be necessary to manually close each stream in order to prevent memory leaks.\n\nThe process.stderr and process.stdout Writable streams are never closed until the Node.js process exits, regardless of the specified options.\n\nreadable.read([size])#\nAdded in: v0.9.4\nsize <number> Optional argument to specify how much data to read.\nReturns: <string> | <Buffer> | <null>", "doc_id": "3b96a36d-0f9e-4b06-821a-287201bdf2fa", "embedding": null, "doc_hash": "1a9efbdc7933f69b434caaf963843ca698e99ae0feb28aed4939b4d5d5dc0794", "extra_info": null, "node_info": {"start": 2236209, "end": 2239771}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d3685227-1f39-44ef-a67b-865a0d83160b", "3": "4fcd6c31-87a7-45a8-a394-a5f58c465030"}}, "__type__": "1"}, "4fcd6c31-87a7-45a8-a394-a5f58c465030": {"__data__": {"text": "passed as false, causing the destination stream to remain open:\n\nreader.pipe(writer, { end: false });\nreader.on('end', () => {\n  writer.end('Goodbye\\n');\n});\nOne important caveat is that if the Readable stream emits an error during processing, the Writable destination is not closed automatically. If an error occurs, it will be necessary to manually close each stream in order to prevent memory leaks.\n\nThe process.stderr and process.stdout Writable streams are never closed until the Node.js process exits, regardless of the specified options.\n\nreadable.read([size])#\nAdded in: v0.9.4\nsize <number> Optional argument to specify how much data to read.\nReturns: <string> | <Buffer> | <null> | <any>\nThe readable.read() method reads data out of the internal buffer and returns it. If no data is available to be read, null is returned. By default, the data is returned as a Buffer object unless an encoding has been specified using the readable.setEncoding() method or the stream is operating in object mode.\n\nThe optional size argument specifies a specific number of bytes to read. If size bytes are not available to be read, null will be returned unless the stream has ended, in which case all of the data remaining in the internal buffer will be returned.\n\nIf the size argument is not specified, all of the data contained in the internal buffer will be returned.\n\nThe size argument must be less than or equal to 1 GiB.\n\nThe readable.read() method should only be called on Readable streams operating in paused mode. In flowing mode, readable.read() is called automatically until the internal buffer is fully drained.\n\nconst readable = getReadableStreamSomehow();\n\n// 'readable' may be triggered multiple times as data is buffered in\nreadable.on('readable', () => {\n  let chunk;\n  console.log('Stream is readable (new data received in buffer)');\n  // Use a loop to make sure we read all currently available data\n  while (null !== (chunk = readable.read())) {\n    console.log(`Read ${chunk.length} bytes of data...`);\n  }\n});\n\n// 'end' will be triggered once when there is no more data available\nreadable.on('end', () => {\n  console.log('Reached end of stream.');\n});\nEach call to readable.read() returns a chunk of data, or null. The chunks are not concatenated. A while loop is necessary to consume all data currently in the buffer. When reading a large file .read() may return null, having consumed all buffered content so far, but there is still more data to come not yet buffered. In this case a new 'readable' event will be emitted when there is more data in the buffer. Finally the 'end' event will be emitted when there is no more data to come.\n\nTherefore to read a file's whole contents from a readable, it is necessary to collect chunks across multiple 'readable' events:\n\nconst chunks = [];\n\nreadable.on('readable', () => {\n  let chunk;\n  while (null !== (chunk = readable.read())) {\n    chunks.push(chunk);\n  }\n});\n\nreadable.on('end', () => {\n  const content = chunks.join('');\n});\nA Readable stream in object mode will always return a single item from a call to readable.read(size), regardless of the value of the size argument.\n\nIf the readable.read() method returns a chunk of data, a 'data' event will also be emitted.\n\nCalling stream.read([size]) after the 'end' event has been emitted will return null. No runtime error will be raised.\n\nreadable.readable#\nAdded in: v11.4.0\n<boolean>\nIs true if it is safe to call readable.read(), which means the stream has not been destroyed or emitted 'error' or 'end'.\n\nreadable.readableAborted#\nAdded in: v16.8.0\nStability: 1 - Experimental\n<boolean>\nReturns whether the stream was destroyed or errored before emitting", "doc_id": "4fcd6c31-87a7-45a8-a394-a5f58c465030", "embedding": null, "doc_hash": "a162a994c7b2fde087d6ddc30da8c6f3920aca10c4daa03b6008612a99b86553", "extra_info": null, "node_info": {"start": 2239741, "end": 2243413}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3b96a36d-0f9e-4b06-821a-287201bdf2fa", "3": "94246ae5-ad1d-4792-9d68-55ec42dcb980"}}, "__type__": "1"}, "94246ae5-ad1d-4792-9d68-55ec42dcb980": {"__data__": {"text": "Readable stream in object mode will always return a single item from a call to readable.read(size), regardless of the value of the size argument.\n\nIf the readable.read() method returns a chunk of data, a 'data' event will also be emitted.\n\nCalling stream.read([size]) after the 'end' event has been emitted will return null. No runtime error will be raised.\n\nreadable.readable#\nAdded in: v11.4.0\n<boolean>\nIs true if it is safe to call readable.read(), which means the stream has not been destroyed or emitted 'error' or 'end'.\n\nreadable.readableAborted#\nAdded in: v16.8.0\nStability: 1 - Experimental\n<boolean>\nReturns whether the stream was destroyed or errored before emitting 'end'.\n\nreadable.readableDidRead#\nAdded in: v16.7.0, v14.18.0\nStability: 1 - Experimental\n<boolean>\nReturns whether 'data' has been emitted.\n\nreadable.readableEncoding#\nAdded in: v12.7.0\n<null> | <string>\nGetter for the property encoding of a given Readable stream. The encoding property can be set using the readable.setEncoding() method.\n\nreadable.readableEnded#\nAdded in: v12.9.0\n<boolean>\nBecomes true when 'end' event is emitted.\n\nreadable.errored#\nAdded in: v18.0.0\n<Error>\nReturns error if the stream has been destroyed with an error.\n\nreadable.readableFlowing#\nAdded in: v9.4.0\n<boolean>\nThis property reflects the current state of a Readable stream as described in the Three states section.\n\nreadable.readableHighWaterMark#\nAdded in: v9.3.0\n<number>\nReturns the value of highWaterMark passed when creating this Readable.\n\nreadable.readableLength#\nAdded in: v9.4.0\n<number>\nThis property contains the number of bytes (or objects) in the queue ready to be read. The value provides introspection data regarding the status of the highWaterMark.\n\nreadable.readableObjectMode#\nAdded in: v12.3.0\n<boolean>\nGetter for the property objectMode of a given Readable stream.\n\nreadable.resume()#\nHistory\nReturns: <this>\nThe readable.resume() method causes an explicitly paused Readable stream to resume emitting 'data' events, switching the stream into flowing mode.\n\nThe readable.resume() method can be used to fully consume the data from a stream without actually processing any of that data:\n\ngetReadableStreamSomehow()\n  .resume()\n  .on('end', () => {\n    console.log('Reached the end, but did not read anything.');\n  });\nThe readable.resume() method has no effect if there is a 'readable' event listener.\n\nreadable.setEncoding(encoding)#\nAdded in: v0.9.4\nencoding <string> The encoding to use.\nReturns: <this>\nThe readable.setEncoding() method sets the character encoding for data read from the Readable stream.\n\nBy default, no encoding is assigned and stream data will be returned as Buffer objects. Setting an encoding causes the stream data to be returned as strings of the specified encoding rather than as Buffer objects. For instance, calling readable.setEncoding('utf8') will cause the output data to be interpreted as UTF-8 data, and passed as strings. Calling readable.setEncoding('hex') will cause the data to be encoded in hexadecimal string format.\n\nThe Readable stream will properly handle multi-byte characters delivered through the stream that would otherwise become improperly decoded if simply pulled from the stream as Buffer objects.\n\nconst readable = getReadableStreamSomehow();\nreadable.setEncoding('utf8');\nreadable.on('data', (chunk) => {\n  assert.equal(typeof chunk, 'string');\n  console.log('Got %d characters of string data:', chunk.length);\n});\nreadable.unpipe([destination])#\nAdded in: v0.9.4\ndestination", "doc_id": "94246ae5-ad1d-4792-9d68-55ec42dcb980", "embedding": null, "doc_hash": "5cdac512356e8d8954e08045bec9b2c1ef558010c770cad46d89e269aac3a9a8", "extra_info": null, "node_info": {"start": 2243426, "end": 2246937}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4fcd6c31-87a7-45a8-a394-a5f58c465030", "3": "4c5cea20-5ef3-485d-a767-b16ff37c2bd0"}}, "__type__": "1"}, "4c5cea20-5ef3-485d-a767-b16ff37c2bd0": {"__data__": {"text": "will cause the output data to be interpreted as UTF-8 data, and passed as strings. Calling readable.setEncoding('hex') will cause the data to be encoded in hexadecimal string format.\n\nThe Readable stream will properly handle multi-byte characters delivered through the stream that would otherwise become improperly decoded if simply pulled from the stream as Buffer objects.\n\nconst readable = getReadableStreamSomehow();\nreadable.setEncoding('utf8');\nreadable.on('data', (chunk) => {\n  assert.equal(typeof chunk, 'string');\n  console.log('Got %d characters of string data:', chunk.length);\n});\nreadable.unpipe([destination])#\nAdded in: v0.9.4\ndestination <stream.Writable> Optional specific stream to unpipe\nReturns: <this>\nThe readable.unpipe() method detaches a Writable stream previously attached using the stream.pipe() method.\n\nIf the destination is not specified, then all pipes are detached.\n\nIf the destination is specified, but no pipe is set up for it, then the method does nothing.\n\nconst fs = require('node:fs');\nconst readable = getReadableStreamSomehow();\nconst writable = fs.createWriteStream('file.txt');\n// All the data from readable goes into 'file.txt',\n// but only for the first second.\nreadable.pipe(writable);\nsetTimeout(() => {\n  console.log('Stop writing to file.txt.');\n  readable.unpipe(writable);\n  console.log('Manually close the file stream.');\n  writable.end();\n}, 1000);\nreadable.unshift(chunk[, encoding])#\nHistory\nchunk <Buffer> | <Uint8Array> | <string> | <null> | <any> Chunk of data to unshift onto the read queue. For streams not operating in object mode, chunk must be a string, Buffer, Uint8Array, or null. For object mode streams, chunk may be any JavaScript value.\nencoding <string> Encoding of string chunks. Must be a valid Buffer encoding, such as 'utf8' or 'ascii'.\nPassing chunk as null signals the end of the stream (EOF) and behaves the same as readable.push(null), after which no more data can be written. The EOF signal is put at the end of the buffer and any buffered data will still be flushed.\n\nThe readable.unshift() method pushes a chunk of data back into the internal buffer. This is useful in certain situations where a stream is being consumed by code that needs to \"un-consume\" some amount of data that it has optimistically pulled out of the source, so that the data can be passed on to some other party.\n\nThe stream.unshift(chunk) method cannot be called after the 'end' event has been emitted or a runtime error will be thrown.\n\nDevelopers using stream.unshift() often should consider switching to use of a Transform stream instead. See the API for stream implementers section for more information.\n\n// Pull off a header delimited by \\n\\n.\n// Use unshift() if we get too much.\n// Call the callback with (error, header, stream).\nconst { StringDecoder } = require('node:string_decoder');\nfunction parseHeader(stream, callback) {\n  stream.on('error', callback);\n  stream.on('readable', onReadable);\n  const decoder = new StringDecoder('utf8');\n  let header = '';\n  function onReadable() {\n    let chunk;\n    while (null !== (chunk = stream.read())) {\n      const str = decoder.write(chunk);\n      if (str.includes('\\n\\n')) {\n        // Found the header boundary.\n        const split = str.split(/\\n\\n/);\n        header += split.shift();\n        const remaining = split.join('\\n\\n');\n        const buf = Buffer.from(remaining, 'utf8');\n     ", "doc_id": "4c5cea20-5ef3-485d-a767-b16ff37c2bd0", "embedding": null, "doc_hash": "53efb3fd6bece20758f64d50d0729fe4467df8e7084cd105133a1b99e3d666b2", "extra_info": null, "node_info": {"start": 2246943, "end": 2250342}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "94246ae5-ad1d-4792-9d68-55ec42dcb980", "3": "1d93b67d-1693-4a1e-a481-873ae7145fe1"}}, "__type__": "1"}, "1d93b67d-1693-4a1e-a481-873ae7145fe1": {"__data__": {"text": " const decoder = new StringDecoder('utf8');\n  let header = '';\n  function onReadable() {\n    let chunk;\n    while (null !== (chunk = stream.read())) {\n      const str = decoder.write(chunk);\n      if (str.includes('\\n\\n')) {\n        // Found the header boundary.\n        const split = str.split(/\\n\\n/);\n        header += split.shift();\n        const remaining = split.join('\\n\\n');\n        const buf = Buffer.from(remaining, 'utf8');\n        stream.removeListener('error', callback);\n        // Remove the 'readable' listener before unshifting.\n        stream.removeListener('readable', onReadable);\n        if (buf.length)\n          stream.unshift(buf);\n        // Now the body of the message can be read from the stream.\n        callback(null, header, stream);\n        return;\n      }\n      // Still reading the header.\n      header += str;\n    }\n  }\n}\nUnlike stream.push(chunk), stream.unshift(chunk) will not end the reading process by resetting the internal reading state of the stream. This can cause unexpected results if readable.unshift() is called during a read (i.e. from within a stream._read() implementation on a custom stream). Following the call to readable.unshift() with an immediate stream.push('') will reset the reading state appropriately, however it is best to simply avoid calling readable.unshift() while in the process of performing a read.\n\nreadable.wrap(stream)#\nAdded in: v0.9.4\nstream <Stream> An \"old style\" readable stream\nReturns: <this>\nPrior to Node.js 0.10, streams did not implement the entire node:stream module API as it is currently defined. (See Compatibility for more information.)\n\nWhen using an older Node.js library that emits 'data' events and has a stream.pause() method that is advisory only, the readable.wrap() method can be used to create a Readable stream that uses the old stream as its data source.\n\nIt will rarely be necessary to use readable.wrap() but the method has been provided as a convenience for interacting with older Node.js applications and libraries.\n\nconst { OldReader } = require('./old-api-module.js');\nconst { Readable } = require('node:stream');\nconst oreader = new OldReader();\nconst myReader = new Readable().wrap(oreader);\n\nmyReader.on('readable', () => {\n  myReader.read(); // etc.\n});\nreadable[Symbol.asyncIterator]()#\nHistory\nReturns: <AsyncIterator> to fully consume the stream.\nconst fs = require('node:fs');\n\nasync function print(readable) {\n  readable.setEncoding('utf8');\n  let data = '';\n  for await (const chunk of readable) {\n    data += chunk;\n  }\n  console.log(data);\n}\n\nprint(fs.createReadStream('file')).catch(console.error);\nIf the loop terminates with a break, return, or a throw, the stream will be destroyed. In other terms, iterating over a stream will consume the stream fully. The stream will be read in chunks of size equal to the highWaterMark option. In the code example above, data will be in a single chunk if the file has less then 64 KiB of data because no highWaterMark option is provided to fs.createReadStream().\n\nreadable.compose(stream[, options])#\nAdded in: v18.13.0\nStability: 1 - Experimental\nstream <Stream> | <Iterable> | <AsyncIterable> | <Function>\noptions <Object>\nsignal <AbortSignal> allows destroying the stream", "doc_id": "1d93b67d-1693-4a1e-a481-873ae7145fe1", "embedding": null, "doc_hash": "507fbce19aa0960579b9b4597f436f758cedb60b88a2029c523131d56689c90b", "extra_info": null, "node_info": {"start": 2250591, "end": 2253823}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4c5cea20-5ef3-485d-a767-b16ff37c2bd0", "3": "af9d7f56-51b7-4672-8420-0e92d45f1816"}}, "__type__": "1"}, "af9d7f56-51b7-4672-8420-0e92d45f1816": {"__data__": {"text": "the loop terminates with a break, return, or a throw, the stream will be destroyed. In other terms, iterating over a stream will consume the stream fully. The stream will be read in chunks of size equal to the highWaterMark option. In the code example above, data will be in a single chunk if the file has less then 64 KiB of data because no highWaterMark option is provided to fs.createReadStream().\n\nreadable.compose(stream[, options])#\nAdded in: v18.13.0\nStability: 1 - Experimental\nstream <Stream> | <Iterable> | <AsyncIterable> | <Function>\noptions <Object>\nsignal <AbortSignal> allows destroying the stream if the signal is aborted.\nReturns: <Duplex> a stream composed with the stream stream.\nimport { Readable } from 'node:stream';\n\nasync function* splitToWords(source) {\n  for await (const chunk of source) {\n    const words = String(chunk).split(' ');\n\n    for (const word of words) {\n      yield word;\n    }\n  }\n}\n\nconst wordsStream = Readable.from(['this is', 'compose as operator']).compose(splitToWords);\nconst words = await wordsStream.toArray();\n\nconsole.log(words); // prints ['this', 'is', 'compose', 'as', 'operator']\nSee stream.compose for more information.\n\nreadable.iterator([options])#\nAdded in: v16.3.0\nStability: 1 - Experimental\noptions <Object>\ndestroyOnReturn <boolean> When set to false, calling return on the async iterator, or exiting a for await...of iteration using a break, return, or throw will not destroy the stream. Default: true.\nReturns: <AsyncIterator> to consume the stream.\nThe iterator created by this method gives users the option to cancel the destruction of the stream if the for await...of loop is exited by return, break, or throw, or if the iterator should destroy the stream if the stream emitted an error during iteration.\n\nconst { Readable } = require('node:stream');\n\nasync function printIterator(readable) {\n  for await (const chunk of readable.iterator({ destroyOnReturn: false })) {\n    console.log(chunk); // 1\n    break;\n  }\n\n  console.log(readable.destroyed); // false\n\n  for await (const chunk of readable.iterator({ destroyOnReturn: false })) {\n    console.log(chunk); // Will print 2 and then 3\n  }\n\n  console.log(readable.destroyed); // True, stream was totally consumed\n}\n\nasync function printSymbolAsyncIterator(readable) {\n  for await (const chunk of readable) {\n    console.log(chunk); // 1\n    break;\n  }\n\n  console.log(readable.destroyed); // true\n}\n\nasync function showBoth() {\n  await printIterator(Readable.from([1, 2, 3]));\n  await printSymbolAsyncIterator(Readable.from([1, 2, 3]));\n}\n\nshowBoth();\nreadable.map(fn[, options])#\nAdded in: v17.4.0, v16.14.0\nStability: 1 - Experimental\nfn <Function> | <AsyncFunction> a function to map over every chunk in the stream.\ndata <any> a chunk of data from the stream.\noptions <Object>\nsignal <AbortSignal> aborted if the stream is destroyed allowing to abort the fn call early.\noptions <Object>\nconcurrency <number> the maximum concurrent invocation of fn to call on the stream at once. Default: 1.\nsignal <AbortSignal> allows destroying the stream if the signal is aborted.\nReturns: <Readable> a stream mapped with the function fn.\nThis method allows mapping over the stream. The fn function will be called for every chunk in the stream. If the fn function returns a promise - that promise will be awaited before being passed to the result stream.\n\nimport { Readable } from 'node:stream';\nimport { Resolver } from", "doc_id": "af9d7f56-51b7-4672-8420-0e92d45f1816", "embedding": null, "doc_hash": "ef8128faeab07b525678202708b1991ccb4b6c7e90afbda016289776dca0d64f", "extra_info": null, "node_info": {"start": 2253634, "end": 2257063}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1d93b67d-1693-4a1e-a481-873ae7145fe1", "3": "f87b72c8-52e8-4565-9fb3-5571515b0ad3"}}, "__type__": "1"}, "f87b72c8-52e8-4565-9fb3-5571515b0ad3": {"__data__": {"text": "to map over every chunk in the stream.\ndata <any> a chunk of data from the stream.\noptions <Object>\nsignal <AbortSignal> aborted if the stream is destroyed allowing to abort the fn call early.\noptions <Object>\nconcurrency <number> the maximum concurrent invocation of fn to call on the stream at once. Default: 1.\nsignal <AbortSignal> allows destroying the stream if the signal is aborted.\nReturns: <Readable> a stream mapped with the function fn.\nThis method allows mapping over the stream. The fn function will be called for every chunk in the stream. If the fn function returns a promise - that promise will be awaited before being passed to the result stream.\n\nimport { Readable } from 'node:stream';\nimport { Resolver } from 'node:dns/promises';\n\n// With a synchronous mapper.\nfor await (const chunk of Readable.from([1, 2, 3, 4]).map((x) => x * 2)) {\n  console.log(chunk); // 2, 4, 6, 8\n}\n// With an asynchronous mapper, making at most 2 queries at a time.\nconst resolver = new Resolver();\nconst dnsResults = Readable.from([\n  'nodejs.org',\n  'openjsf.org',\n  'www.linuxfoundation.org',\n]).map((domain) => resolver.resolve4(domain), { concurrency: 2 });\nfor await (const result of dnsResults) {\n  console.log(result); // Logs the DNS result of resolver.resolve4.\n}\nreadable.filter(fn[, options])#\nAdded in: v17.4.0, v16.14.0\nStability: 1 - Experimental\nfn <Function> | <AsyncFunction> a function to filter chunks from the stream.\ndata <any> a chunk of data from the stream.\noptions <Object>\nsignal <AbortSignal> aborted if the stream is destroyed allowing to abort the fn call early.\noptions <Object>\nconcurrency <number> the maximum concurrent invocation of fn to call on the stream at once. Default: 1.\nsignal <AbortSignal> allows destroying the stream if the signal is aborted.\nReturns: <Readable> a stream filtered with the predicate fn.\nThis method allows filtering the stream. For each chunk in the stream the fn function will be called and if it returns a truthy value, the chunk will be passed to the result stream. If the fn function returns a promise - that promise will be awaited.\n\nimport { Readable } from 'node:stream';\nimport { Resolver } from 'node:dns/promises';\n\n// With a synchronous predicate.\nfor await (const chunk of Readable.from([1, 2, 3, 4]).filter((x) => x > 2)) {\n  console.log(chunk); // 3, 4\n}\n// With an asynchronous predicate, making at most 2 queries at a time.\nconst resolver = new Resolver();\nconst dnsResults = Readable.from([\n  'nodejs.org',\n  'openjsf.org',\n  'www.linuxfoundation.org',\n]).filter(async (domain) => {\n  const { address } = await resolver.resolve4(domain, { ttl: true });\n  return address.ttl > 60;\n}, { concurrency: 2 });\nfor await (const result of dnsResults) {\n  // Logs domains with more than 60 seconds on the resolved dns record.\n  console.log(result);\n}\nreadable.forEach(fn[, options])#\nAdded in: v17.5.0\nStability: 1 - Experimental\nfn <Function> | <AsyncFunction> a function to call on each chunk of the stream.\ndata <any> a chunk of data from the stream.\noptions <Object>\nsignal <AbortSignal> aborted if the stream is destroyed allowing to abort the fn call early.\noptions <Object>\nconcurrency <number> the maximum concurrent invocation of fn to call on the stream at once. Default: 1.\nsignal <AbortSignal> allows destroying the stream if the", "doc_id": "f87b72c8-52e8-4565-9fb3-5571515b0ad3", "embedding": null, "doc_hash": "34fca228a909b0f98e9292a4c3aeeb23845ec610003817132d64ee431413b82a", "extra_info": null, "node_info": {"start": 2256970, "end": 2260280}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "af9d7f56-51b7-4672-8420-0e92d45f1816", "3": "c8c2f28f-1706-4e9f-a325-074f5434989f"}}, "__type__": "1"}, "c8c2f28f-1706-4e9f-a325-074f5434989f": {"__data__": {"text": "{ concurrency: 2 });\nfor await (const result of dnsResults) {\n  // Logs domains with more than 60 seconds on the resolved dns record.\n  console.log(result);\n}\nreadable.forEach(fn[, options])#\nAdded in: v17.5.0\nStability: 1 - Experimental\nfn <Function> | <AsyncFunction> a function to call on each chunk of the stream.\ndata <any> a chunk of data from the stream.\noptions <Object>\nsignal <AbortSignal> aborted if the stream is destroyed allowing to abort the fn call early.\noptions <Object>\nconcurrency <number> the maximum concurrent invocation of fn to call on the stream at once. Default: 1.\nsignal <AbortSignal> allows destroying the stream if the signal is aborted.\nReturns: <Promise> a promise for when the stream has finished.\nThis method allows iterating a stream. For each chunk in the stream the fn function will be called. If the fn function returns a promise - that promise will be awaited.\n\nThis method is different from for await...of loops in that it can optionally process chunks concurrently. In addition, a forEach iteration can only be stopped by having passed a signal option and aborting the related AbortController while for await...of can be stopped with break or return. In either case the stream will be destroyed.\n\nThis method is different from listening to the 'data' event in that it uses the readable event in the underlying machinary and can limit the number of concurrent fn calls.\n\nimport { Readable } from 'node:stream';\nimport { Resolver } from 'node:dns/promises';\n\n// With a synchronous predicate.\nfor await (const chunk of Readable.from([1, 2, 3, 4]).filter((x) => x > 2)) {\n  console.log(chunk); // 3, 4\n}\n// With an asynchronous predicate, making at most 2 queries at a time.\nconst resolver = new Resolver();\nconst dnsResults = Readable.from([\n  'nodejs.org',\n  'openjsf.org',\n  'www.linuxfoundation.org',\n]).map(async (domain) => {\n  const { address } = await resolver.resolve4(domain, { ttl: true });\n  return address;\n}, { concurrency: 2 });\nawait dnsResults.forEach((result) => {\n  // Logs result, similar to `for await (const result of dnsResults)`\n  console.log(result);\n});\nconsole.log('done'); // Stream has finished\nreadable.toArray([options])#\nAdded in: v17.5.0\nStability: 1 - Experimental\noptions <Object>\nsignal <AbortSignal> allows cancelling the toArray operation if the signal is aborted.\nReturns: <Promise> a promise containing an array with the contents of the stream.\nThis method allows easily obtaining the contents of a stream.\n\nAs this method reads the entire stream into memory, it negates the benefits of streams. It's intended for interoperability and convenience, not as the primary way to consume streams.\n\nimport { Readable } from 'node:stream';\nimport { Resolver } from 'node:dns/promises';\n\nawait Readable.from([1, 2, 3, 4]).toArray(); // [1, 2, 3, 4]\n\n// Make dns queries concurrently using .map and collect\n// the results into an array using toArray\nconst dnsResults = await Readable.from([\n  'nodejs.org',\n  'openjsf.org',\n  'www.linuxfoundation.org',\n]).map(async (domain) => {\n  const { address } = await resolver.resolve4(domain, { ttl: true });\n  return address;\n}, { concurrency: 2 }).toArray();\nreadable.some(fn[, options])#\nAdded in: v17.5.0\nStability: 1 - Experimental\nfn <Function> | <AsyncFunction> a function to call on each chunk of the stream.\ndata <any> a chunk of data from the", "doc_id": "c8c2f28f-1706-4e9f-a325-074f5434989f", "embedding": null, "doc_hash": "616cdc7a954bef66306e95a561bcb77bd45102fe4dcd60cccbc53dd594faaa66", "extra_info": null, "node_info": {"start": 2260340, "end": 2263701}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f87b72c8-52e8-4565-9fb3-5571515b0ad3", "3": "ead5c369-8142-442e-afb5-a7d0f96b4131"}}, "__type__": "1"}, "ead5c369-8142-442e-afb5-a7d0f96b4131": {"__data__": {"text": "// [1, 2, 3, 4]\n\n// Make dns queries concurrently using .map and collect\n// the results into an array using toArray\nconst dnsResults = await Readable.from([\n  'nodejs.org',\n  'openjsf.org',\n  'www.linuxfoundation.org',\n]).map(async (domain) => {\n  const { address } = await resolver.resolve4(domain, { ttl: true });\n  return address;\n}, { concurrency: 2 }).toArray();\nreadable.some(fn[, options])#\nAdded in: v17.5.0\nStability: 1 - Experimental\nfn <Function> | <AsyncFunction> a function to call on each chunk of the stream.\ndata <any> a chunk of data from the stream.\noptions <Object>\nsignal <AbortSignal> aborted if the stream is destroyed allowing to abort the fn call early.\noptions <Object>\nconcurrency <number> the maximum concurrent invocation of fn to call on the stream at once. Default: 1.\nsignal <AbortSignal> allows destroying the stream if the signal is aborted.\nReturns: <Promise> a promise evaluating to true if fn returned a truthy value for at least one of the chunks.\nThis method is similar to Array.prototype.some and calls fn on each chunk in the stream until the awaited return value is true (or any truthy value). Once an fn call on a chunk awaited return value is truthy, the stream is destroyed and the promise is fulfilled with true. If none of the fn calls on the chunks return a truthy value, the promise is fulfilled with false.\n\nimport { Readable } from 'node:stream';\nimport { stat } from 'node:fs/promises';\n\n// With a synchronous predicate.\nawait Readable.from([1, 2, 3, 4]).some((x) => x > 2); // true\nawait Readable.from([1, 2, 3, 4]).some((x) => x < 0); // false\n\n// With an asynchronous predicate, making at most 2 file checks at a time.\nconst anyBigFile = await Readable.from([\n  'file1',\n  'file2',\n  'file3',\n]).some(async (fileName) => {\n  const stats = await stat(fileName);\n  return stats.size > 1024 * 1024;\n}, { concurrency: 2 });\nconsole.log(anyBigFile); // `true` if any file in the list is bigger than 1MB\nconsole.log('done'); // Stream has finished\nreadable.find(fn[, options])#\nAdded in: v17.5.0\nStability: 1 - Experimental\nfn <Function> | <AsyncFunction> a function to call on each chunk of the stream.\ndata <any> a chunk of data from the stream.\noptions <Object>\nsignal <AbortSignal> aborted if the stream is destroyed allowing to abort the fn call early.\noptions <Object>\nconcurrency <number> the maximum concurrent invocation of fn to call on the stream at once. Default: 1.\nsignal <AbortSignal> allows destroying the stream if the signal is aborted.\nReturns: <Promise> a promise evaluating to the first chunk for which fn evaluated with a truthy value, or undefined if no element was found.\nThis method is similar to Array.prototype.find and calls fn on each chunk in the stream to find a chunk with a truthy value for fn. Once an fn call's awaited return value is truthy, the stream is destroyed and the promise is fulfilled with value for which fn returned a truthy value. If all of the fn calls on the chunks return a falsy value, the promise is fulfilled with undefined.\n\nimport { Readable } from 'node:stream';\nimport { stat } from 'node:fs/promises';\n\n// With a synchronous predicate.\nawait Readable.from([1, 2, 3, 4]).find((x) => x > 2); // 3\nawait Readable.from([1, 2, 3, 4]).find((x) => x > 0); // 1\nawait Readable.from([1, 2, 3,", "doc_id": "ead5c369-8142-442e-afb5-a7d0f96b4131", "embedding": null, "doc_hash": "92f624659138b04b4ee2ae9d8aceb826a3f0cae19899596e1dd9d7e0ec6a1c44", "extra_info": null, "node_info": {"start": 2263778, "end": 2267069}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c8c2f28f-1706-4e9f-a325-074f5434989f", "3": "8fca06c9-fac5-433d-9866-5f43feb388db"}}, "__type__": "1"}, "8fca06c9-fac5-433d-9866-5f43feb388db": {"__data__": {"text": "and calls fn on each chunk in the stream to find a chunk with a truthy value for fn. Once an fn call's awaited return value is truthy, the stream is destroyed and the promise is fulfilled with value for which fn returned a truthy value. If all of the fn calls on the chunks return a falsy value, the promise is fulfilled with undefined.\n\nimport { Readable } from 'node:stream';\nimport { stat } from 'node:fs/promises';\n\n// With a synchronous predicate.\nawait Readable.from([1, 2, 3, 4]).find((x) => x > 2); // 3\nawait Readable.from([1, 2, 3, 4]).find((x) => x > 0); // 1\nawait Readable.from([1, 2, 3, 4]).find((x) => x > 10); // undefined\n\n// With an asynchronous predicate, making at most 2 file checks at a time.\nconst foundBigFile = await Readable.from([\n  'file1',\n  'file2',\n  'file3',\n]).find(async (fileName) => {\n  const stats = await stat(fileName);\n  return stats.size > 1024 * 1024;\n}, { concurrency: 2 });\nconsole.log(foundBigFile); // File name of large file, if any file in the list is bigger than 1MB\nconsole.log('done'); // Stream has finished\nreadable.every(fn[, options])#\nAdded in: v17.5.0\nStability: 1 - Experimental\nfn <Function> | <AsyncFunction> a function to call on each chunk of the stream.\ndata <any> a chunk of data from the stream.\noptions <Object>\nsignal <AbortSignal> aborted if the stream is destroyed allowing to abort the fn call early.\noptions <Object>\nconcurrency <number> the maximum concurrent invocation of fn to call on the stream at once. Default: 1.\nsignal <AbortSignal> allows destroying the stream if the signal is aborted.\nReturns: <Promise> a promise evaluating to true if fn returned a truthy value for all of the chunks.\nThis method is similar to Array.prototype.every and calls fn on each chunk in the stream to check if all awaited return values are truthy value for fn. Once an fn call on a chunk awaited return value is falsy, the stream is destroyed and the promise is fulfilled with false. If all of the fn calls on the chunks return a truthy value, the promise is fulfilled with true.\n\nimport { Readable } from 'node:stream';\nimport { stat } from 'node:fs/promises';\n\n// With a synchronous predicate.\nawait Readable.from([1, 2, 3, 4]).every((x) => x > 2); // false\nawait Readable.from([1, 2, 3, 4]).every((x) => x > 0); // true\n\n// With an asynchronous predicate, making at most 2 file checks at a time.\nconst allBigFiles = await Readable.from([\n  'file1',\n  'file2',\n  'file3',\n]).every(async (fileName) => {\n  const stats = await stat(fileName);\n  return stats.size > 1024 * 1024;\n}, { concurrency: 2 });\n// `true` if all files in the list are bigger than 1MiB\nconsole.log(allBigFiles);\nconsole.log('done'); // Stream has finished\nreadable.flatMap(fn[, options])#\nAdded in: v17.5.0\nStability: 1 - Experimental\nfn <Function> | <AsyncGeneratorFunction> | <AsyncFunction> a function to map over every chunk in the stream.\ndata <any> a chunk of data from the stream.\noptions <Object>\nsignal <AbortSignal> aborted if the stream is destroyed allowing to abort the fn call early.\noptions <Object>\nconcurrency <number> the maximum concurrent invocation of fn to call on the stream at once. Default: 1.\nsignal <AbortSignal> allows destroying the stream if the signal is aborted.\nReturns: <Readable> a stream flat-mapped with the function fn.\nThis method returns", "doc_id": "8fca06c9-fac5-433d-9866-5f43feb388db", "embedding": null, "doc_hash": "0c79ce2bcac8d44db6fa6de406d80015719a34921a4dc3347e3989158413c0c1", "extra_info": null, "node_info": {"start": 2267053, "end": 2270362}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ead5c369-8142-442e-afb5-a7d0f96b4131", "3": "78b65d60-7067-4824-9f25-514ba0bd8c12"}}, "__type__": "1"}, "78b65d60-7067-4824-9f25-514ba0bd8c12": {"__data__": {"text": "// Stream has finished\nreadable.flatMap(fn[, options])#\nAdded in: v17.5.0\nStability: 1 - Experimental\nfn <Function> | <AsyncGeneratorFunction> | <AsyncFunction> a function to map over every chunk in the stream.\ndata <any> a chunk of data from the stream.\noptions <Object>\nsignal <AbortSignal> aborted if the stream is destroyed allowing to abort the fn call early.\noptions <Object>\nconcurrency <number> the maximum concurrent invocation of fn to call on the stream at once. Default: 1.\nsignal <AbortSignal> allows destroying the stream if the signal is aborted.\nReturns: <Readable> a stream flat-mapped with the function fn.\nThis method returns a new stream by applying the given callback to each chunk of the stream and then flattening the result.\n\nIt is possible to return a stream or another iterable or async iterable from fn and the result streams will be merged (flattened) into the returned stream.\n\nimport { Readable } from 'node:stream';\nimport { createReadStream } from 'node:fs';\n\n// With a synchronous mapper.\nfor await (const chunk of Readable.from([1, 2, 3, 4]).flatMap((x) => [x, x])) {\n  console.log(chunk); // 1, 1, 2, 2, 3, 3, 4, 4\n}\n// With an asynchronous mapper, combine the contents of 4 files\nconst concatResult = Readable.from([\n  './1.mjs',\n  './2.mjs',\n  './3.mjs',\n  './4.mjs',\n]).flatMap((fileName) => createReadStream(fileName));\nfor await (const result of concatResult) {\n  // This will contain the contents (all chunks) of all 4 files\n  console.log(result);\n}\nreadable.drop(limit[, options])#\nAdded in: v17.5.0\nStability: 1 - Experimental\nlimit <number> the number of chunks to drop from the readable.\noptions <Object>\nsignal <AbortSignal> allows destroying the stream if the signal is aborted.\nReturns: <Readable> a stream with limit chunks dropped.\nThis method returns a new stream with the first limit chunks dropped.\n\nimport { Readable } from 'node:stream';\n\nawait Readable.from([1, 2, 3, 4]).drop(2).toArray(); // [3, 4]\nreadable.take(limit[, options])#\nAdded in: v17.5.0\nStability: 1 - Experimental\nlimit <number> the number of chunks to take from the readable.\noptions <Object>\nsignal <AbortSignal> allows destroying the stream if the signal is aborted.\nReturns: <Readable> a stream with limit chunks taken.\nThis method returns a new stream with the first limit chunks.\n\nimport { Readable } from 'node:stream';\n\nawait Readable.from([1, 2, 3, 4]).take(2).toArray(); // [1, 2]\nreadable.asIndexedPairs([options])#\nAdded in: v17.5.0\nStability: 1 - Experimental\noptions <Object>\nsignal <AbortSignal> allows destroying the stream if the signal is aborted.\nReturns: <Readable> a stream of indexed pairs.\nThis method returns a new stream with chunks of the underlying stream paired with a counter in the form [index, chunk]. The first index value is 0 and it increases by 1 for each chunk produced.\n\nimport { Readable } from 'node:stream';\n\nconst pairs = await Readable.from(['a', 'b', 'c']).asIndexedPairs().toArray();\nconsole.log(pairs); // [[0, 'a'], [1, 'b'], [2, 'c']]\nreadable.reduce(fn[, initial[, options]])#\nAdded in: v17.5.0\nStability: 1 - Experimental\nfn <Function> | <AsyncFunction> a reducer function to call over every chunk in the", "doc_id": "78b65d60-7067-4824-9f25-514ba0bd8c12", "embedding": null, "doc_hash": "f688f85f61f0e8a1e3280c53102698a5fe4b86982e72ac65fad982ca63cd0ce3", "extra_info": null, "node_info": {"start": 2270302, "end": 2273477}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8fca06c9-fac5-433d-9866-5f43feb388db", "3": "529ebe19-48d1-4594-b39a-d1685ff656f8"}}, "__type__": "1"}, "529ebe19-48d1-4594-b39a-d1685ff656f8": {"__data__": {"text": "<Readable> a stream of indexed pairs.\nThis method returns a new stream with chunks of the underlying stream paired with a counter in the form [index, chunk]. The first index value is 0 and it increases by 1 for each chunk produced.\n\nimport { Readable } from 'node:stream';\n\nconst pairs = await Readable.from(['a', 'b', 'c']).asIndexedPairs().toArray();\nconsole.log(pairs); // [[0, 'a'], [1, 'b'], [2, 'c']]\nreadable.reduce(fn[, initial[, options]])#\nAdded in: v17.5.0\nStability: 1 - Experimental\nfn <Function> | <AsyncFunction> a reducer function to call over every chunk in the stream.\nprevious <any> the value obtained from the last call to fn or the initial value if specified or the first chunk of the stream otherwise.\ndata <any> a chunk of data from the stream.\noptions <Object>\nsignal <AbortSignal> aborted if the stream is destroyed allowing to abort the fn call early.\ninitial <any> the initial value to use in the reduction.\noptions <Object>\nsignal <AbortSignal> allows destroying the stream if the signal is aborted.\nReturns: <Promise> a promise for the final value of the reduction.\nThis method calls fn on each chunk of the stream in order, passing it the result from the calculation on the previous element. It returns a promise for the final value of the reduction.\n\nThe reducer function iterates the stream element-by-element which means that there is no concurrency parameter or parallelism. To perform a reduce concurrently, it can be chained to the readable.map method.\n\nIf no initial value is supplied the first chunk of the stream is used as the initial value. If the stream is empty, the promise is rejected with a TypeError with the ERR_INVALID_ARGS code property.\n\nimport { Readable } from 'node:stream';\n\nconst ten = await Readable.from([1, 2, 3, 4]).reduce((previous, data) => {\n  return previous + data;\n});\nconsole.log(ten); // 10\nDuplex and transform streams#\nClass: stream.Duplex#\nHistory\nDuplex streams are streams that implement both the Readable and Writable interfaces.\n\nExamples of Duplex streams include:\n\nTCP sockets\nzlib streams\ncrypto streams\nduplex.allowHalfOpen#\nAdded in: v0.9.4\n<boolean>\nIf false then the stream will automatically end the writable side when the readable side ends. Set initially by the allowHalfOpen constructor option, which defaults to true.\n\nThis can be changed manually to change the half-open behavior of an existing Duplex stream instance, but must be changed before the 'end' event is emitted.\n\nClass: stream.Transform#\nAdded in: v0.9.4\nTransform streams are Duplex streams where the output is in some way related to the input. Like all Duplex streams, Transform streams implement both the Readable and Writable interfaces.\n\nExamples of Transform streams include:\n\nzlib streams\ncrypto streams\ntransform.destroy([error])#\nHistory\nerror <Error>\nReturns: <this>\nDestroy the stream, and optionally emit an 'error' event. After this call, the transform stream would release any internal resources. Implementors should not override this method, but instead implement readable._destroy(). The default implementation of _destroy() for Transform also emit 'close' unless emitClose is set in false.\n\nOnce destroy() has been called, any further calls will be a no-op and no further errors except from _destroy() may be emitted as 'error'.\n\nstream.finished(stream[, options], callback)#\nHistory\nstream <Stream> A readable and/or writable stream.\n\noptions <Object>\n\nerror <boolean> If set to false, then a call to emit('error', err) is not treated as finished. Default: true.\nreadable <boolean> When set to false, the callback will be called when the stream ends", "doc_id": "529ebe19-48d1-4594-b39a-d1685ff656f8", "embedding": null, "doc_hash": "094dd278abfa18e206e7d7612d0c818a7d1e90ac24d9be5b330ba19d49fd7389", "extra_info": null, "node_info": {"start": 2273538, "end": 2277155}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "78b65d60-7067-4824-9f25-514ba0bd8c12", "3": "2a8290fd-e31b-4dcb-ac9f-099e3ea1c7c5"}}, "__type__": "1"}, "2a8290fd-e31b-4dcb-ac9f-099e3ea1c7c5": {"__data__": {"text": "and optionally emit an 'error' event. After this call, the transform stream would release any internal resources. Implementors should not override this method, but instead implement readable._destroy(). The default implementation of _destroy() for Transform also emit 'close' unless emitClose is set in false.\n\nOnce destroy() has been called, any further calls will be a no-op and no further errors except from _destroy() may be emitted as 'error'.\n\nstream.finished(stream[, options], callback)#\nHistory\nstream <Stream> A readable and/or writable stream.\n\noptions <Object>\n\nerror <boolean> If set to false, then a call to emit('error', err) is not treated as finished. Default: true.\nreadable <boolean> When set to false, the callback will be called when the stream ends even though the stream might still be readable. Default: true.\nwritable <boolean> When set to false, the callback will be called when the stream ends even though the stream might still be writable. Default: true.\nsignal <AbortSignal> allows aborting the wait for the stream finish. The underlying stream will not be aborted if the signal is aborted. The callback will get called with an AbortError. All registered listeners added by this function will also be removed.\ncleanup <boolean> remove all registered stream listeners. Default: false.\ncallback <Function> A callback function that takes an optional error argument.\n\nReturns: <Function> A cleanup function which removes all registered listeners.\n\nA function to get notified when a stream is no longer readable, writable or has experienced an error or a premature close event.\n\nconst { finished } = require('node:stream');\nconst fs = require('node:fs');\n\nconst rs = fs.createReadStream('archive.tar');\n\nfinished(rs, (err) => {\n  if (err) {\n    console.error('Stream failed.', err);\n  } else {\n    console.log('Stream is done reading.');\n  }\n});\n\nrs.resume(); // Drain the stream.\nEspecially useful in error handling scenarios where a stream is destroyed prematurely (like an aborted HTTP request), and will not emit 'end' or 'finish'.\n\nThe finished API provides promise version.\n\nstream.finished() leaves dangling event listeners (in particular 'error', 'end', 'finish' and 'close') after callback has been invoked. The reason for this is so that unexpected 'error' events (due to incorrect stream implementations) do not cause unexpected crashes. If this is unwanted behavior then the returned cleanup function needs to be invoked in the callback:\n\nconst cleanup = finished(rs, (err) => {\n  cleanup();\n  // ...\n});\nstream.pipeline(source[, ...transforms], destination, callback)#\nstream.pipeline(streams, callback)#\nHistory\nstreams <Stream[]> | <Iterable[]> | <AsyncIterable[]> | <Function[]> | <ReadableStream[]> | <WritableStream[]> | <TransformStream[]>\nsource <Stream> | <Iterable> | <AsyncIterable> | <Function> | <ReadableStream>\nReturns: <Iterable> | <AsyncIterable>\n...transforms <Stream> | <Function> | <TransformStream>\nsource <AsyncIterable>\nReturns: <AsyncIterable>\ndestination <Stream> | <Function> | <WritableStream>\nsource <AsyncIterable>\nReturns: <AsyncIterable> | <Promise>\ncallback <Function> Called when the pipeline is fully done.\nerr <Error>\nval Resolved value of Promise returned by destination.\nReturns: <Stream>\nA module method to pipe between streams and generators forwarding errors and properly cleaning up and provide a callback when the pipeline is complete.\n\nconst { pipeline } = require('node:stream');\nconst fs = require('node:fs');\nconst zlib = require('node:zlib');\n\n// Use the pipeline API to easily pipe a series of streams\n// together and get notified when the pipeline is fully done.\n\n// A pipeline to gzip a potentially huge tar file", "doc_id": "2a8290fd-e31b-4dcb-ac9f-099e3ea1c7c5", "embedding": null, "doc_hash": "e01f2da8e4f79ceb11d1e86f74ef25de22f359b60093e60610e136c6fc943455", "extra_info": null, "node_info": {"start": 2276992, "end": 2280691}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "529ebe19-48d1-4594-b39a-d1685ff656f8", "3": "a307986a-c285-4959-8d44-9e8a8ed15e8e"}}, "__type__": "1"}, "a307986a-c285-4959-8d44-9e8a8ed15e8e": {"__data__": {"text": "| <Function> | <WritableStream>\nsource <AsyncIterable>\nReturns: <AsyncIterable> | <Promise>\ncallback <Function> Called when the pipeline is fully done.\nerr <Error>\nval Resolved value of Promise returned by destination.\nReturns: <Stream>\nA module method to pipe between streams and generators forwarding errors and properly cleaning up and provide a callback when the pipeline is complete.\n\nconst { pipeline } = require('node:stream');\nconst fs = require('node:fs');\nconst zlib = require('node:zlib');\n\n// Use the pipeline API to easily pipe a series of streams\n// together and get notified when the pipeline is fully done.\n\n// A pipeline to gzip a potentially huge tar file efficiently:\n\npipeline(\n  fs.createReadStream('archive.tar'),\n  zlib.createGzip(),\n  fs.createWriteStream('archive.tar.gz'),\n  (err) => {\n    if (err) {\n      console.error('Pipeline failed.', err);\n    } else {\n      console.log('Pipeline succeeded.');\n    }\n  },\n);\nThe pipeline API provides a promise version.\n\nstream.pipeline() will call stream.destroy(err) on all streams except:\n\nReadable streams which have emitted 'end' or 'close'.\nWritable streams which have emitted 'finish' or 'close'.\nstream.pipeline() leaves dangling event listeners on the streams after the callback has been invoked. In the case of reuse of streams after failure, this can cause event listener leaks and swallowed errors. If the last stream is readable, dangling event listeners will be removed so that the last stream can be consumed later.\n\nstream.pipeline() closes all the streams when an error is raised. The IncomingRequest usage with pipeline could lead to an unexpected behavior once it would destroy the socket without sending the expected response. See the example below:\n\nconst fs = require('node:fs');\nconst http = require('node:http');\nconst { pipeline } = require('node:stream');\n\nconst server = http.createServer((req, res) => {\n  const fileStream = fs.createReadStream('./fileNotExist.txt');\n  pipeline(fileStream, res, (err) => {\n    if (err) {\n      console.log(err); // No such file\n      // this message can't be sent once `pipeline` already destroyed the socket\n      return res.end('error!!!');\n    }\n  });\n});\nstream.compose(...streams)#\nHistory\nStability: 1 - stream.compose is experimental.\nstreams <Stream[]> | <Iterable[]> | <AsyncIterable[]> | <Function[]> | <ReadableStream[]> | <WritableStream[]> | <TransformStream[]>\nReturns: <stream.Duplex>\nCombines two or more streams into a Duplex stream that writes to the first stream and reads from the last. Each provided stream is piped into the next, using stream.pipeline. If any of the streams error then all are destroyed, including the outer Duplex stream.\n\nBecause stream.compose returns a new stream that in turn can (and should) be piped into other streams, it enables composition. In contrast, when passing streams to stream.pipeline, typically the first stream is a readable stream and the last a writable stream, forming a closed circuit.\n\nIf passed a Function it must be a factory method taking a source Iterable.\n\nimport { compose, Transform } from 'node:stream';\n\nconst removeSpaces = new Transform({\n  transform(chunk, encoding, callback) {\n    callback(null, String(chunk).replace(' ', ''));\n  },\n});\n\nasync function* toUpper(source) {\n  for await (const chunk of source) {\n    yield String(chunk).toUpperCase();\n ", "doc_id": "a307986a-c285-4959-8d44-9e8a8ed15e8e", "embedding": null, "doc_hash": "0a5dd874acfdea0c55b70300657d9a8fddf4665098b60a17e1dbb345a367644d", "extra_info": null, "node_info": {"start": 2280771, "end": 2284130}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2a8290fd-e31b-4dcb-ac9f-099e3ea1c7c5", "3": "1491b303-f93e-49d2-9e09-afbe5012080c"}}, "__type__": "1"}, "1491b303-f93e-49d2-9e09-afbe5012080c": {"__data__": {"text": "stream.compose returns a new stream that in turn can (and should) be piped into other streams, it enables composition. In contrast, when passing streams to stream.pipeline, typically the first stream is a readable stream and the last a writable stream, forming a closed circuit.\n\nIf passed a Function it must be a factory method taking a source Iterable.\n\nimport { compose, Transform } from 'node:stream';\n\nconst removeSpaces = new Transform({\n  transform(chunk, encoding, callback) {\n    callback(null, String(chunk).replace(' ', ''));\n  },\n});\n\nasync function* toUpper(source) {\n  for await (const chunk of source) {\n    yield String(chunk).toUpperCase();\n  }\n}\n\nlet res = '';\nfor await (const buf of compose(removeSpaces, toUpper).end('hello world')) {\n  res += buf;\n}\n\nconsole.log(res); // prints 'HELLOWORLD'\nstream.compose can be used to convert async iterables, generators and functions into streams.\n\nAsyncIterable converts into a readable Duplex. Cannot yield null.\nAsyncGeneratorFunction converts into a readable/writable transform Duplex. Must take a source AsyncIterable as first parameter. Cannot yield null.\nAsyncFunction converts into a writable Duplex. Must return either null or undefined.\nimport { compose } from 'node:stream';\nimport { finished } from 'node:stream/promises';\n\n// Convert AsyncIterable into readable Duplex.\nconst s1 = compose(async function*() {\n  yield 'Hello';\n  yield 'World';\n}());\n\n// Convert AsyncGenerator into transform Duplex.\nconst s2 = compose(async function*(source) {\n  for await (const chunk of source) {\n    yield String(chunk).toUpperCase();\n  }\n});\n\nlet res = '';\n\n// Convert AsyncFunction into writable Duplex.\nconst s3 = compose(async function(source) {\n  for await (const chunk of source) {\n    res += chunk;\n  }\n});\n\nawait finished(compose(s1, s2, s3));\n\nconsole.log(res); // prints 'HELLOWORLD'\nSee readable.compose(stream) for stream.compose as operator.\n\nstream.Readable.from(iterable[, options])#\nAdded in: v12.3.0, v10.17.0\niterable <Iterable> Object implementing the Symbol.asyncIterator or Symbol.iterator iterable protocol. Emits an 'error' event if a null value is passed.\noptions <Object> Options provided to new stream.Readable([options]). By default, Readable.from() will set options.objectMode to true, unless this is explicitly opted out by setting options.objectMode to false.\nReturns: <stream.Readable>\nA utility method for creating readable streams out of iterators.\n\nconst { Readable } = require('node:stream');\n\nasync function * generate() {\n  yield 'hello';\n  yield 'streams';\n}\n\nconst readable = Readable.from(generate());\n\nreadable.on('data', (chunk) => {\n  console.log(chunk);\n});\n\nCalling Readable.from(string) or Readable.from(buffer) will not have the strings or buffers be iterated to match the other streams semantics for performance reasons.\n\nIf an Iterable object containing promises is passed as an argument, it might result in unhandled rejection.\n\nconst { Readable } = require('node:stream');\n\nReadable.from([\n  new Promise((resolve) => setTimeout(resolve('1'), 1500)),\n  new Promise((_, reject) => setTimeout(reject(new Error('2')), 1000)), // Unhandled rejection\n]);\nstream.Readable.fromWeb(readableStream[, options])#\nAdded in: v17.0.0\nStability: 1 - Experimental\nreadableStream", "doc_id": "1491b303-f93e-49d2-9e09-afbe5012080c", "embedding": null, "doc_hash": "50889502d8a8381baf7ddd641519f230edfdadfe3425e4ec7fcba63c4cf130c1", "extra_info": null, "node_info": {"start": 2284154, "end": 2287425}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a307986a-c285-4959-8d44-9e8a8ed15e8e", "3": "0a38c7ce-1f85-4ac1-9a2c-f99ee2381013"}}, "__type__": "1"}, "0a38c7ce-1f85-4ac1-9a2c-f99ee2381013": {"__data__": {"text": "=> {\n  console.log(chunk);\n});\n\nCalling Readable.from(string) or Readable.from(buffer) will not have the strings or buffers be iterated to match the other streams semantics for performance reasons.\n\nIf an Iterable object containing promises is passed as an argument, it might result in unhandled rejection.\n\nconst { Readable } = require('node:stream');\n\nReadable.from([\n  new Promise((resolve) => setTimeout(resolve('1'), 1500)),\n  new Promise((_, reject) => setTimeout(reject(new Error('2')), 1000)), // Unhandled rejection\n]);\nstream.Readable.fromWeb(readableStream[, options])#\nAdded in: v17.0.0\nStability: 1 - Experimental\nreadableStream <ReadableStream>\noptions <Object>\nencoding <string>\nhighWaterMark <number>\nobjectMode <boolean>\nsignal <AbortSignal>\nReturns: <stream.Readable>\nstream.Readable.isDisturbed(stream)#\nAdded in: v16.8.0\nStability: 1 - Experimental\nstream <stream.Readable> | <ReadableStream>\nReturns: boolean\nReturns whether the stream has been read from or cancelled.\n\nstream.isErrored(stream)#\nAdded in: v17.3.0, v16.14.0\nStability: 1 - Experimental\nstream <Readable> | <Writable> | <Duplex> | <WritableStream> | <ReadableStream>\nReturns: <boolean>\nReturns whether the stream has encountered an error.\n\nstream.isReadable(stream)#\nAdded in: v17.4.0, v16.14.0\nStability: 1 - Experimental\nstream <Readable> | <Duplex> | <ReadableStream>\nReturns: <boolean>\nReturns whether the stream is readable.\n\nstream.Readable.toWeb(streamReadable[, options])#\nAdded in: v17.0.0\nStability: 1 - Experimental\nstreamReadable <stream.Readable>\noptions <Object>\nstrategy <Object>\nhighWaterMark <number> The maximum internal queue size (of the created ReadableStream) before backpressure is applied in reading from the given stream.Readable. If no value is provided, it will be taken from the given stream.Readable.\nsize <Function> A function that size of the given chunk of data. If no value is provided, the size will be 1 for all the chunks.\nchunk <any>\nReturns: <number>\nReturns: <ReadableStream>\nstream.Writable.fromWeb(writableStream[, options])#\nAdded in: v17.0.0\nStability: 1 - Experimental\nwritableStream <WritableStream>\noptions <Object>\ndecodeStrings <boolean>\nhighWaterMark <number>\nobjectMode <boolean>\nsignal <AbortSignal>\nReturns: <stream.Writable>\nstream.Writable.toWeb(streamWritable)#\nAdded in: v17.0.0\nStability: 1 - Experimental\nstreamWritable <stream.Writable>\nReturns: <WritableStream>\nstream.Duplex.from(src)#\nAdded in: v16.8.0\nsrc <Stream> | <Blob> | <ArrayBuffer> | <string> | <Iterable> | <AsyncIterable> | <AsyncGeneratorFunction> | <AsyncFunction> | <Promise> | <Object>\nA utility method for creating duplex streams.\n\nStream converts writable stream into writable Duplex and readable stream to Duplex.\nBlob converts into readable Duplex.\nstring converts into readable Duplex.\nArrayBuffer converts into readable Duplex.\nAsyncIterable converts into a readable Duplex. Cannot yield null.\nAsyncGeneratorFunction converts into a readable/writable transform Duplex. Must take a source AsyncIterable as first parameter. Cannot yield null.\nAsyncFunction converts into a writable Duplex. Must return either null or undefined\nObject ({ writable, readable }) converts readable and writable into Stream and then combines them into Duplex where the Duplex will write to the writable and read from the", "doc_id": "0a38c7ce-1f85-4ac1-9a2c-f99ee2381013", "embedding": null, "doc_hash": "a8b0534f2a353429a93f4371b74c059f7ff9f501acb33b06d1c94ce8c3e9f3b7", "extra_info": null, "node_info": {"start": 2287415, "end": 2290730}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1491b303-f93e-49d2-9e09-afbe5012080c", "3": "0da0c754-f0fd-4667-b427-22a478831eea"}}, "__type__": "1"}, "0da0c754-f0fd-4667-b427-22a478831eea": {"__data__": {"text": "| <Promise> | <Object>\nA utility method for creating duplex streams.\n\nStream converts writable stream into writable Duplex and readable stream to Duplex.\nBlob converts into readable Duplex.\nstring converts into readable Duplex.\nArrayBuffer converts into readable Duplex.\nAsyncIterable converts into a readable Duplex. Cannot yield null.\nAsyncGeneratorFunction converts into a readable/writable transform Duplex. Must take a source AsyncIterable as first parameter. Cannot yield null.\nAsyncFunction converts into a writable Duplex. Must return either null or undefined\nObject ({ writable, readable }) converts readable and writable into Stream and then combines them into Duplex where the Duplex will write to the writable and read from the readable.\nPromise converts into readable Duplex. Value null is ignored.\nReturns: <stream.Duplex>\nIf an Iterable object containing promises is passed as an argument, it might result in unhandled rejection.\n\nconst { Duplex } = require('node:stream');\n\nDuplex.from([\n  new Promise((resolve) => setTimeout(resolve('1'), 1500)),\n  new Promise((_, reject) => setTimeout(reject(new Error('2')), 1000)), // Unhandled rejection\n]);\nstream.Duplex.fromWeb(pair[, options])#\nAdded in: v17.0.0\nStability: 1 - Experimental\npair <Object>\nreadable <ReadableStream>\nwritable <WritableStream>\noptions <Object>\nallowHalfOpen <boolean>\ndecodeStrings <boolean>\nencoding <string>\nhighWaterMark <number>\nobjectMode <boolean>\nsignal <AbortSignal>\nReturns: <stream.Duplex>\nimport { Duplex } from 'node:stream';\nimport {\n  ReadableStream,\n  WritableStream,\n} from 'node:stream/web';\n\nconst readable = new ReadableStream({\n  start(controller) {\n    controller.enqueue('world');\n  },\n});\n\nconst writable = new WritableStream({\n  write(chunk) {\n    console.log('writable', chunk);\n  },\n});\n\nconst pair = {\n  readable,\n  writable,\n};\nconst duplex = Duplex.fromWeb(pair, { encoding: 'utf8', objectMode: true });\n\nduplex.write('hello');\n\nfor await (const chunk of duplex) {\n  console.log('readable', chunk);\n}\nstream.Duplex.toWeb(streamDuplex)#\nAdded in: v17.0.0\nStability: 1 - Experimental\nstreamDuplex <stream.Duplex>\nReturns: <Object>\nreadable <ReadableStream>\nwritable <WritableStream>\nimport { Duplex } from 'node:stream';\n\nconst duplex = Duplex({\n  objectMode: true,\n  read() {\n    this.push('world');\n    this.push(null);\n  },\n  write(chunk, encoding, callback) {\n    console.log('writable', chunk);\n    callback();\n  },\n});\n\nconst { readable, writable } = Duplex.toWeb(duplex);\nwritable.getWriter().write('hello');\n\nconst { value } = await readable.getReader().read();\nconsole.log('readable', value);\nstream.addAbortSignal(signal, stream)#\nHistory\nsignal <AbortSignal> A signal representing possible cancellation\nstream <Stream> | <ReadableStream> | <WritableStream>\nA stream to attach a signal to.\n\nAttaches an AbortSignal to a readable or writeable stream. This lets code control stream destruction using an AbortController.\n\nCalling abort on the AbortController corresponding to the passed AbortSignal will behave the same way as calling .destroy(new AbortError()) on the stream, and controller.error(new AbortError()) for webstreams.\n\nconst fs = require('node:fs');\n\nconst controller = new AbortController();\nconst read", "doc_id": "0da0c754-f0fd-4667-b427-22a478831eea", "embedding": null, "doc_hash": "6cef0065e392d92dcff7acca20b1268eed3fbc2c37a6c593147b99a498d91902", "extra_info": null, "node_info": {"start": 2290661, "end": 2293900}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0a38c7ce-1f85-4ac1-9a2c-f99ee2381013", "3": "e1fa3ab2-cc42-4b2f-a3f0-bcbc13b25dd5"}}, "__type__": "1"}, "e1fa3ab2-cc42-4b2f-a3f0-bcbc13b25dd5": {"__data__": {"text": "} = await readable.getReader().read();\nconsole.log('readable', value);\nstream.addAbortSignal(signal, stream)#\nHistory\nsignal <AbortSignal> A signal representing possible cancellation\nstream <Stream> | <ReadableStream> | <WritableStream>\nA stream to attach a signal to.\n\nAttaches an AbortSignal to a readable or writeable stream. This lets code control stream destruction using an AbortController.\n\nCalling abort on the AbortController corresponding to the passed AbortSignal will behave the same way as calling .destroy(new AbortError()) on the stream, and controller.error(new AbortError()) for webstreams.\n\nconst fs = require('node:fs');\n\nconst controller = new AbortController();\nconst read = addAbortSignal(\n  controller.signal,\n  fs.createReadStream(('object.json')),\n);\n// Later, abort the operation closing the stream\ncontroller.abort();\nOr using an AbortSignal with a readable stream as an async iterable:\n\nconst controller = new AbortController();\nsetTimeout(() => controller.abort(), 10_000); // set a timeout\nconst stream = addAbortSignal(\n  controller.signal,\n  fs.createReadStream(('object.json')),\n);\n(async () => {\n  try {\n    for await (const chunk of stream) {\n      await process(chunk);\n    }\n  } catch (e) {\n    if (e.name === 'AbortError') {\n      // The operation was cancelled\n    } else {\n      throw e;\n    }\n  }\n})();\nOr using an AbortSignal with a ReadableStream:\n\nconst controller = new AbortController();\nconst rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue('hello');\n    controller.enqueue('world');\n    controller.close();\n  },\n});\n\naddAbortSignal(controller.signal, rs);\n\nfinished(rs, (err) => {\n  if (err) {\n    if (err.name === 'AbortError') {\n      // The operation was cancelled\n    }\n  }\n});\n\nconst reader = rs.getReader();\n\nreader.read().then(({ value, done }) => {\n  console.log(value); // hello\n  console.log(done); // false\n  controller.abort();\n});\nAPI for stream implementers#\nThe node:stream module API has been designed to make it possible to easily implement streams using JavaScript's prototypal inheritance model.\n\nFirst, a stream developer would declare a new JavaScript class that extends one of the four basic stream classes (stream.Writable, stream.Readable, stream.Duplex, or stream.Transform), making sure they call the appropriate parent class constructor:\n\nconst { Writable } = require('node:stream');\n\nclass MyWritable extends Writable {\n  constructor({ highWaterMark, ...options }) {\n    super({ highWaterMark });\n    // ...\n  }\n}\nWhen extending streams, keep in mind what options the user can and should provide before forwarding these to the base constructor. For example, if the implementation makes assumptions in regard to the autoDestroy and emitClose options, do not allow the user to override these. Be explicit about what options are forwarded instead of implicitly forwarding all options.\n\nThe new stream class must then implement one or more specific methods, depending on the type of stream being created, as detailed in the chart below:\n\nUse-case\tClass\tMethod(s) to implement\nReading only\tReadable\t_read()\nWriting only\tWritable\t_write(), _writev(), _final()\nReading and writing\tDuplex\t_read(), _write(), _writev(), _final()\nOperate on written data, then read the result\tTransform\t_transform(), _flush(), _final()\nThe implementation code for a stream should never call the \"public\" methods of a stream that are", "doc_id": "e1fa3ab2-cc42-4b2f-a3f0-bcbc13b25dd5", "embedding": null, "doc_hash": "6e4c6b0f2638da1deb4e2beed3117b27ade8237c5ed913bc40baf279399268c8", "extra_info": null, "node_info": {"start": 2293924, "end": 2297328}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0da0c754-f0fd-4667-b427-22a478831eea", "3": "e5e44e82-92ee-4e42-9870-8034e6e28c38"}}, "__type__": "1"}, "e5e44e82-92ee-4e42-9870-8034e6e28c38": {"__data__": {"text": "if the implementation makes assumptions in regard to the autoDestroy and emitClose options, do not allow the user to override these. Be explicit about what options are forwarded instead of implicitly forwarding all options.\n\nThe new stream class must then implement one or more specific methods, depending on the type of stream being created, as detailed in the chart below:\n\nUse-case\tClass\tMethod(s) to implement\nReading only\tReadable\t_read()\nWriting only\tWritable\t_write(), _writev(), _final()\nReading and writing\tDuplex\t_read(), _write(), _writev(), _final()\nOperate on written data, then read the result\tTransform\t_transform(), _flush(), _final()\nThe implementation code for a stream should never call the \"public\" methods of a stream that are intended for use by consumers (as described in the API for stream consumers section). Doing so may lead to adverse side effects in application code consuming the stream.\n\nAvoid overriding public methods such as write(), end(), cork(), uncork(), read() and destroy(), or emitting internal events such as 'error', 'data', 'end', 'finish' and 'close' through .emit(). Doing so can break current and future stream invariants leading to behavior and/or compatibility issues with other streams, stream utilities, and user expectations.\n\nSimplified construction#\nAdded in: v1.2.0\nFor many simple cases, it is possible to create a stream without relying on inheritance. This can be accomplished by directly creating instances of the stream.Writable, stream.Readable, stream.Duplex, or stream.Transform objects and passing appropriate methods as constructor options.\n\nconst { Writable } = require('node:stream');\n\nconst myWritable = new Writable({\n  construct(callback) {\n    // Initialize state and load resources...\n  },\n  write(chunk, encoding, callback) {\n    // ...\n  },\n  destroy() {\n    // Free resources...\n  },\n});\nImplementing a writable stream#\nThe stream.Writable class is extended to implement a Writable stream.\n\nCustom Writable streams must call the new stream.Writable([options]) constructor and implement the writable._write() and/or writable._writev() method.\n\nnew stream.Writable([options])#\nHistory\noptions <Object>\nhighWaterMark <number> Buffer level when stream.write() starts returning false. Default: 16384 (16 KiB), or 16 for objectMode streams.\ndecodeStrings <boolean> Whether to encode strings passed to stream.write() to Buffers (with the encoding specified in the stream.write() call) before passing them to stream._write(). Other types of data are not converted (i.e. Buffers are not decoded into strings). Setting to false will prevent strings from being converted. Default: true.\ndefaultEncoding <string> The default encoding that is used when no encoding is specified as an argument to stream.write(). Default: 'utf8'.\nobjectMode <boolean> Whether or not the stream.write(anyObj) is a valid operation. When set, it becomes possible to write JavaScript values other than string, Buffer or Uint8Array if supported by the stream implementation. Default: false.\nemitClose <boolean> Whether or not the stream should emit 'close' after it has been destroyed. Default: true.\nwrite <Function> Implementation for the stream._write() method.\nwritev <Function> Implementation for the stream._writev() method.\ndestroy <Function> Implementation for the stream._destroy() method.\nfinal <Function> Implementation for the stream._final() method.\nconstruct <Function> Implementation for the stream._construct() method.\nautoDestroy <boolean> Whether this stream should automatically call .destroy() on itself after ending. Default: true.\nsignal <AbortSignal> A signal representing possible cancellation.\nconst { Writable } = require('node:stream');\n\nclass MyWritable extends Writable {\n  constructor(options) {\n    // Calls the stream.Writable() constructor.\n    super(options);\n    // ...\n ", "doc_id": "e5e44e82-92ee-4e42-9870-8034e6e28c38", "embedding": null, "doc_hash": "0a490e36b9ea89f021ea4a3efb8412fb16a0b7a329eae8a192cd594e34046162", "extra_info": null, "node_info": {"start": 2297296, "end": 2301141}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e1fa3ab2-cc42-4b2f-a3f0-bcbc13b25dd5", "3": "60ea219f-bda3-43a9-a50b-d3158b458287"}}, "__type__": "1"}, "60ea219f-bda3-43a9-a50b-d3158b458287": {"__data__": {"text": "Default: true.\nwrite <Function> Implementation for the stream._write() method.\nwritev <Function> Implementation for the stream._writev() method.\ndestroy <Function> Implementation for the stream._destroy() method.\nfinal <Function> Implementation for the stream._final() method.\nconstruct <Function> Implementation for the stream._construct() method.\nautoDestroy <boolean> Whether this stream should automatically call .destroy() on itself after ending. Default: true.\nsignal <AbortSignal> A signal representing possible cancellation.\nconst { Writable } = require('node:stream');\n\nclass MyWritable extends Writable {\n  constructor(options) {\n    // Calls the stream.Writable() constructor.\n    super(options);\n    // ...\n  }\n}\nOr, when using pre-ES6 style constructors:\n\nconst { Writable } = require('node:stream');\nconst util = require('node:util');\n\nfunction MyWritable(options) {\n  if (!(this instanceof MyWritable))\n    return new MyWritable(options);\n  Writable.call(this, options);\n}\nutil.inherits(MyWritable, Writable);\nOr, using the simplified constructor approach:\n\nconst { Writable } = require('node:stream');\n\nconst myWritable = new Writable({\n  write(chunk, encoding, callback) {\n    // ...\n  },\n  writev(chunks, callback) {\n    // ...\n  },\n});\nCalling abort on the AbortController corresponding to the passed AbortSignal will behave the same way as calling .destroy(new AbortError()) on the writeable stream.\n\nconst { Writable } = require('node:stream');\n\nconst controller = new AbortController();\nconst myWritable = new Writable({\n  write(chunk, encoding, callback) {\n    // ...\n  },\n  writev(chunks, callback) {\n    // ...\n  },\n  signal: controller.signal,\n});\n// Later, abort the operation closing the stream\ncontroller.abort();\nwritable._construct(callback)#\nAdded in: v15.0.0\ncallback <Function> Call this function (optionally with an error argument) when the stream has finished initializing.\nThe _construct() method MUST NOT be called directly. It may be implemented by child classes, and if so, will be called by the internal Writable class methods only.\n\nThis optional function will be called in a tick after the stream constructor has returned, delaying any _write(), _final() and _destroy() calls until callback is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.\n\nconst { Writable } = require('node:stream');\nconst fs = require('node:fs');\n\nclass WriteStream extends Writable {\n  constructor(filename) {\n    super();\n    this.filename = filename;\n    this.fd = null;\n  }\n  _construct(callback) {\n    fs.open(this.filename, (err, fd) => {\n      if (err) {\n        callback(err);\n      } else {\n        this.fd = fd;\n        callback();\n      }\n    });\n  }\n  _write(chunk, encoding, callback) {\n    fs.write(this.fd, chunk, callback);\n  }\n  _destroy(err, callback) {\n    if (this.fd) {\n      fs.close(this.fd, (er) => callback(er || err));\n    } else {\n      callback(err);\n    }\n  }\n}\nwritable._write(chunk, encoding, callback)#\nHistory\nchunk <Buffer> | <string> | <any> The Buffer to be written, converted from the string passed to stream.write(). If the stream's decodeStrings option is false or the stream is operating in object mode, the", "doc_id": "60ea219f-bda3-43a9-a50b-d3158b458287", "embedding": null, "doc_hash": "e951ad1358d328b9fce1e9ead2ecc3e5cf1d844cb82adb5bfcef4f33d2d28d2f", "extra_info": null, "node_info": {"start": 2301156, "end": 2304383}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e5e44e82-92ee-4e42-9870-8034e6e28c38", "3": "ea315296-a041-4cfb-8a01-2d1d98bae8ff"}}, "__type__": "1"}, "ea315296-a041-4cfb-8a01-2d1d98bae8ff": {"__data__": {"text": "callback();\n      }\n    });\n  }\n  _write(chunk, encoding, callback) {\n    fs.write(this.fd, chunk, callback);\n  }\n  _destroy(err, callback) {\n    if (this.fd) {\n      fs.close(this.fd, (er) => callback(er || err));\n    } else {\n      callback(err);\n    }\n  }\n}\nwritable._write(chunk, encoding, callback)#\nHistory\nchunk <Buffer> | <string> | <any> The Buffer to be written, converted from the string passed to stream.write(). If the stream's decodeStrings option is false or the stream is operating in object mode, the chunk will not be converted & will be whatever was passed to stream.write().\nencoding <string> If the chunk is a string, then encoding is the character encoding of that string. If chunk is a Buffer, or if the stream is operating in object mode, encoding may be ignored.\ncallback <Function> Call this function (optionally with an error argument) when processing is complete for the supplied chunk.\nAll Writable stream implementations must provide a writable._write() and/or writable._writev() method to send data to the underlying resource.\n\nTransform streams provide their own implementation of the writable._write().\n\nThis function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal Writable class methods only.\n\nThe callback function must be called synchronously inside of writable._write() or asynchronously (i.e. different tick) to signal either that the write completed successfully or failed with an error. The first argument passed to the callback must be the Error object if the call failed or null if the write succeeded.\n\nAll calls to writable.write() that occur between the time writable._write() is called and the callback is called will cause the written data to be buffered. When the callback is invoked, the stream might emit a 'drain' event. If a stream implementation is capable of processing multiple chunks of data at once, the writable._writev() method should be implemented.\n\nIf the decodeStrings property is explicitly set to false in the constructor options, then chunk will remain the same object that is passed to .write(), and may be a string rather than a Buffer. This is to support implementations that have an optimized handling for certain string data encodings. In that case, the encoding argument will indicate the character encoding of the string. Otherwise, the encoding argument can be safely ignored.\n\nThe writable._write() method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.\n\nwritable._writev(chunks, callback)#\nchunks <Object[]> The data to be written. The value is an array of <Object> that each represent a discrete chunk of data to write. The properties of these objects are:\nchunk <Buffer> | <string> A buffer instance or string containing the data to be written. The chunk will be a string if the Writable was created with the decodeStrings option set to false and a string was passed to write().\nencoding <string> The character encoding of the chunk. If chunk is a Buffer, the encoding will be 'buffer'.\ncallback <Function> A callback function (optionally with an error argument) to be invoked when processing is complete for the supplied chunks.\nThis function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal Writable class methods only.\n\nThe writable._writev() method may be implemented in addition or alternatively to writable._write() in stream implementations that are capable of processing multiple chunks of data at once. If implemented and if there is buffered data from previous writes, _writev() will be called instead of _write().\n\nThe writable._writev() method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user", "doc_id": "ea315296-a041-4cfb-8a01-2d1d98bae8ff", "embedding": null, "doc_hash": "ed6c22adff90835a4fe646d1884a213f64535d2d955e04f41cd83cc0635d7944", "extra_info": null, "node_info": {"start": 2304605, "end": 2308498}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "60ea219f-bda3-43a9-a50b-d3158b458287", "3": "ba3f9ec9-cb02-4bc4-b680-99d4c32cc602"}}, "__type__": "1"}, "ba3f9ec9-cb02-4bc4-b680-99d4c32cc602": {"__data__": {"text": "chunk is a Buffer, the encoding will be 'buffer'.\ncallback <Function> A callback function (optionally with an error argument) to be invoked when processing is complete for the supplied chunks.\nThis function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal Writable class methods only.\n\nThe writable._writev() method may be implemented in addition or alternatively to writable._write() in stream implementations that are capable of processing multiple chunks of data at once. If implemented and if there is buffered data from previous writes, _writev() will be called instead of _write().\n\nThe writable._writev() method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.\n\nwritable._destroy(err, callback)#\nAdded in: v8.0.0\nerr <Error> A possible error.\ncallback <Function> A callback function that takes an optional error argument.\nThe _destroy() method is called by writable.destroy(). It can be overridden by child classes but it must not be called directly. Furthermore, the callback should not be mixed with async/await once it is executed when a promise is resolved.\n\nwritable._final(callback)#\nAdded in: v8.0.0\ncallback <Function> Call this function (optionally with an error argument) when finished writing any remaining data.\nThe _final() method must not be called directly. It may be implemented by child classes, and if so, will be called by the internal Writable class methods only.\n\nThis optional function will be called before the stream closes, delaying the 'finish' event until callback is called. This is useful to close resources or write buffered data before a stream ends.\n\nErrors while writing#\nErrors occurring during the processing of the writable._write(), writable._writev() and writable._final() methods must be propagated by invoking the callback and passing the error as the first argument. Throwing an Error from within these methods or manually emitting an 'error' event results in undefined behavior.\n\nIf a Readable stream pipes into a Writable stream when Writable emits an error, the Readable stream will be unpiped.\n\nconst { Writable } = require('node:stream');\n\nconst myWritable = new Writable({\n  write(chunk, encoding, callback) {\n    if (chunk.toString().indexOf('a') >= 0) {\n      callback(new Error('chunk is invalid'));\n    } else {\n      callback();\n    }\n  },\n});\nAn example writable stream#\nThe following illustrates a rather simplistic (and somewhat pointless) custom Writable stream implementation. While this specific Writable stream instance is not of any real particular usefulness, the example illustrates each of the required elements of a custom Writable stream instance:\n\nconst { Writable } = require('node:stream');\n\nclass MyWritable extends Writable {\n  _write(chunk, encoding, callback) {\n    if (chunk.toString().indexOf('a') >= 0) {\n      callback(new Error('chunk is invalid'));\n    } else {\n      callback();\n    }\n  }\n}\nDecoding buffers in a writable stream#\nDecoding buffers is a common task, for instance, when using transformers whose input is a string. This is not a trivial process when using multi-byte characters encoding, such as UTF-8. The following example shows how to decode multi-byte strings using StringDecoder and Writable.\n\nconst { Writable } = require('node:stream');\nconst { StringDecoder } = require('node:string_decoder');\n\nclass StringWritable extends Writable {\n  constructor(options) {\n    super(options);\n    this._decoder = new StringDecoder(options && options.defaultEncoding);\n    this.data = '';\n  }\n  _write(chunk, encoding, callback) {\n    if (encoding ===", "doc_id": "ba3f9ec9-cb02-4bc4-b680-99d4c32cc602", "embedding": null, "doc_hash": "ba51aafb26130133834110e06132c5ae339f96fecdb44143e6f62b53b7b0f840", "extra_info": null, "node_info": {"start": 2308222, "end": 2311925}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ea315296-a041-4cfb-8a01-2d1d98bae8ff", "3": "a687e957-e81e-43cd-a57b-f75eaa0ec11b"}}, "__type__": "1"}, "a687e957-e81e-43cd-a57b-f75eaa0ec11b": {"__data__": {"text": "buffers in a writable stream#\nDecoding buffers is a common task, for instance, when using transformers whose input is a string. This is not a trivial process when using multi-byte characters encoding, such as UTF-8. The following example shows how to decode multi-byte strings using StringDecoder and Writable.\n\nconst { Writable } = require('node:stream');\nconst { StringDecoder } = require('node:string_decoder');\n\nclass StringWritable extends Writable {\n  constructor(options) {\n    super(options);\n    this._decoder = new StringDecoder(options && options.defaultEncoding);\n    this.data = '';\n  }\n  _write(chunk, encoding, callback) {\n    if (encoding === 'buffer') {\n      chunk = this._decoder.write(chunk);\n    }\n    this.data += chunk;\n    callback();\n  }\n  _final(callback) {\n    this.data += this._decoder.end();\n    callback();\n  }\n}\n\nconst euro = [[0xE2, 0x82], [0xAC]].map(Buffer.from);\nconst w = new StringWritable();\n\nw.write('currency: ');\nw.write(euro[0]);\nw.end(euro[1]);\n\nconsole.log(w.data); // currency: \u20ac\nImplementing a readable stream#\nThe stream.Readable class is extended to implement a Readable stream.\n\nCustom Readable streams must call the new stream.Readable([options]) constructor and implement the readable._read() method.\n\nnew stream.Readable([options])#\nHistory\noptions <Object>\nhighWaterMark <number> The maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource. Default: 16384 (16 KiB), or 16 for objectMode streams.\nencoding <string> If specified, then buffers will be decoded to strings using the specified encoding. Default: null.\nobjectMode <boolean> Whether this stream should behave as a stream of objects. Meaning that stream.read(n) returns a single value instead of a Buffer of size n. Default: false.\nemitClose <boolean> Whether or not the stream should emit 'close' after it has been destroyed. Default: true.\nread <Function> Implementation for the stream._read() method.\ndestroy <Function> Implementation for the stream._destroy() method.\nconstruct <Function> Implementation for the stream._construct() method.\nautoDestroy <boolean> Whether this stream should automatically call .destroy() on itself after ending. Default: true.\nsignal <AbortSignal> A signal representing possible cancellation.\nconst { Readable } = require('node:stream');\n\nclass MyReadable extends Readable {\n  constructor(options) {\n    // Calls the stream.Readable(options) constructor.\n    super(options);\n    // ...\n  }\n}\nOr, when using pre-ES6 style constructors:\n\nconst { Readable } = require('node:stream');\nconst util = require('node:util');\n\nfunction MyReadable(options) {\n  if (!(this instanceof MyReadable))\n    return new MyReadable(options);\n  Readable.call(this, options);\n}\nutil.inherits(MyReadable, Readable);\nOr, using the simplified constructor approach:\n\nconst { Readable } = require('node:stream');\n\nconst myReadable = new Readable({\n  read(size) {\n    // ...\n  },\n});\nCalling abort on the AbortController corresponding to the passed AbortSignal will behave the same way as calling .destroy(new AbortError()) on the readable created.\n\nconst { Readable } = require('node:stream');\nconst controller = new AbortController();\nconst read = new Readable({\n  read(size) {\n    // ...\n  },\n  signal: controller.signal,\n});\n// Later, abort the operation closing the", "doc_id": "a687e957-e81e-43cd-a57b-f75eaa0ec11b", "embedding": null, "doc_hash": "cb9b6ed5ba1b0f90fc4ac0bfeae0c2b1cbc58cb2f0dc1047e97e032ed5c642d5", "extra_info": null, "node_info": {"start": 2312058, "end": 2315398}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ba3f9ec9-cb02-4bc4-b680-99d4c32cc602", "3": "2873721f-37f6-4181-b991-6ddfeb8b70d3"}}, "__type__": "1"}, "2873721f-37f6-4181-b991-6ddfeb8b70d3": {"__data__": {"text": " Readable.call(this, options);\n}\nutil.inherits(MyReadable, Readable);\nOr, using the simplified constructor approach:\n\nconst { Readable } = require('node:stream');\n\nconst myReadable = new Readable({\n  read(size) {\n    // ...\n  },\n});\nCalling abort on the AbortController corresponding to the passed AbortSignal will behave the same way as calling .destroy(new AbortError()) on the readable created.\n\nconst { Readable } = require('node:stream');\nconst controller = new AbortController();\nconst read = new Readable({\n  read(size) {\n    // ...\n  },\n  signal: controller.signal,\n});\n// Later, abort the operation closing the stream\ncontroller.abort();\nreadable._construct(callback)#\nAdded in: v15.0.0\ncallback <Function> Call this function (optionally with an error argument) when the stream has finished initializing.\nThe _construct() method MUST NOT be called directly. It may be implemented by child classes, and if so, will be called by the internal Readable class methods only.\n\nThis optional function will be scheduled in the next tick by the stream constructor, delaying any _read() and _destroy() calls until callback is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.\n\nconst { Readable } = require('node:stream');\nconst fs = require('node:fs');\n\nclass ReadStream extends Readable {\n  constructor(filename) {\n    super();\n    this.filename = filename;\n    this.fd = null;\n  }\n  _construct(callback) {\n    fs.open(this.filename, (err, fd) => {\n      if (err) {\n        callback(err);\n      } else {\n        this.fd = fd;\n        callback();\n      }\n    });\n  }\n  _read(n) {\n    const buf = Buffer.alloc(n);\n    fs.read(this.fd, buf, 0, n, null, (err, bytesRead) => {\n      if (err) {\n        this.destroy(err);\n      } else {\n        this.push(bytesRead > 0 ? buf.slice(0, bytesRead) : null);\n      }\n    });\n  }\n  _destroy(err, callback) {\n    if (this.fd) {\n      fs.close(this.fd, (er) => callback(er || err));\n    } else {\n      callback(err);\n    }\n  }\n}\nreadable._read(size)#\nAdded in: v0.9.4\nsize <number> Number of bytes to read asynchronously\nThis function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal Readable class methods only.\n\nAll Readable stream implementations must provide an implementation of the readable._read() method to fetch data from the underlying resource.\n\nWhen readable._read() is called, if data is available from the resource, the implementation should begin pushing that data into the read queue using the this.push(dataChunk) method. _read() will be called again after each call to this.push(dataChunk) once the stream is ready to accept more data. _read() may continue reading from the resource and pushing data until readable.push() returns false. Only when _read() is called again after it has stopped should it resume pushing additional data into the queue.\n\nOnce the readable._read() method has been called, it will not be called again until more data is pushed through the readable.push() method. Empty data such as empty buffers and strings will not cause readable._read() to be called.\n\nThe size argument is advisory. For implementations where a \"read\" is a single operation that returns data can use the size argument to determine how", "doc_id": "2873721f-37f6-4181-b991-6ddfeb8b70d3", "embedding": null, "doc_hash": "2ad827048a1e1b9958c388fe4857eb476c2f6e0f35bb46d9035f976c0c3e8506", "extra_info": null, "node_info": {"start": 2315424, "end": 2318740}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a687e957-e81e-43cd-a57b-f75eaa0ec11b", "3": "4704d167-f5f5-49bb-ad16-f193475c21e8"}}, "__type__": "1"}, "4704d167-f5f5-49bb-ad16-f193475c21e8": {"__data__": {"text": "the resource, the implementation should begin pushing that data into the read queue using the this.push(dataChunk) method. _read() will be called again after each call to this.push(dataChunk) once the stream is ready to accept more data. _read() may continue reading from the resource and pushing data until readable.push() returns false. Only when _read() is called again after it has stopped should it resume pushing additional data into the queue.\n\nOnce the readable._read() method has been called, it will not be called again until more data is pushed through the readable.push() method. Empty data such as empty buffers and strings will not cause readable._read() to be called.\n\nThe size argument is advisory. For implementations where a \"read\" is a single operation that returns data can use the size argument to determine how much data to fetch. Other implementations may ignore this argument and simply provide data whenever it becomes available. There is no need to \"wait\" until size bytes are available before calling stream.push(chunk).\n\nThe readable._read() method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.\n\nreadable._destroy(err, callback)#\nAdded in: v8.0.0\nerr <Error> A possible error.\ncallback <Function> A callback function that takes an optional error argument.\nThe _destroy() method is called by readable.destroy(). It can be overridden by child classes but it must not be called directly.\n\nreadable.push(chunk[, encoding])#\nHistory\nchunk <Buffer> | <Uint8Array> | <string> | <null> | <any> Chunk of data to push into the read queue. For streams not operating in object mode, chunk must be a string, Buffer or Uint8Array. For object mode streams, chunk may be any JavaScript value.\nencoding <string> Encoding of string chunks. Must be a valid Buffer encoding, such as 'utf8' or 'ascii'.\nReturns: <boolean> true if additional chunks of data may continue to be pushed; false otherwise.\nWhen chunk is a Buffer, Uint8Array, or string, the chunk of data will be added to the internal queue for users of the stream to consume. Passing chunk as null signals the end of the stream (EOF), after which no more data can be written.\n\nWhen the Readable is operating in paused mode, the data added with readable.push() can be read out by calling the readable.read() method when the 'readable' event is emitted.\n\nWhen the Readable is operating in flowing mode, the data added with readable.push() will be delivered by emitting a 'data' event.\n\nThe readable.push() method is designed to be as flexible as possible. For example, when wrapping a lower-level source that provides some form of pause/resume mechanism, and a data callback, the low-level source can be wrapped by the custom Readable instance:\n\n// `_source` is an object with readStop() and readStart() methods,\n// and an `ondata` member that gets called when it has data, and\n// an `onend` member that gets called when the data is over.\n\nclass SourceWrapper extends Readable {\n  constructor(options) {\n    super(options);\n\n    this._source = getLowLevelSourceObject();\n\n    // Every time there's data, push it into the internal buffer.\n    this._source.ondata = (chunk) => {\n      // If push() returns false, then stop reading from source.\n      if (!this.push(chunk))\n        this._source.readStop();\n    };\n\n    // When the source ends, push the EOF-signaling `null` chunk.\n    this._source.onend = () => {\n      this.push(null);\n    };\n  }\n  // _read() will be called when the stream wants to pull more data in.\n  // The advisory size argument is ignored in this case.\n  _read(size) {\n    this._source.readStart();\n ", "doc_id": "4704d167-f5f5-49bb-ad16-f193475c21e8", "embedding": null, "doc_hash": "1c559e40e2dec58f3d9aa29d58eb904a89d33cfc02148b48a9073fbf500994e2", "extra_info": null, "node_info": {"start": 2318575, "end": 2322254}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2873721f-37f6-4181-b991-6ddfeb8b70d3", "3": "b5d72976-091a-41ad-a2aa-04a096cf423b"}}, "__type__": "1"}, "b5d72976-091a-41ad-a2aa-04a096cf423b": {"__data__": {"text": "push it into the internal buffer.\n    this._source.ondata = (chunk) => {\n      // If push() returns false, then stop reading from source.\n      if (!this.push(chunk))\n        this._source.readStop();\n    };\n\n    // When the source ends, push the EOF-signaling `null` chunk.\n    this._source.onend = () => {\n      this.push(null);\n    };\n  }\n  // _read() will be called when the stream wants to pull more data in.\n  // The advisory size argument is ignored in this case.\n  _read(size) {\n    this._source.readStart();\n  }\n}\nThe readable.push() method is used to push the content into the internal buffer. It can be driven by the readable._read() method.\n\nFor streams not operating in object mode, if the chunk parameter of readable.push() is undefined, it will be treated as empty string or buffer. See readable.push('') for more information.\n\nErrors while reading#\nErrors occurring during processing of the readable._read() must be propagated through the readable.destroy(err) method. Throwing an Error from within readable._read() or manually emitting an 'error' event results in undefined behavior.\n\nconst { Readable } = require('node:stream');\n\nconst myReadable = new Readable({\n  read(size) {\n    const err = checkSomeErrorCondition();\n    if (err) {\n      this.destroy(err);\n    } else {\n      // Do some work.\n    }\n  },\n});\nAn example counting stream#\nThe following is a basic example of a Readable stream that emits the numerals from 1 to 1,000,000 in ascending order, and then ends.\n\nconst { Readable } = require('node:stream');\n\nclass Counter extends Readable {\n  constructor(opt) {\n    super(opt);\n    this._max = 1000000;\n    this._index = 1;\n  }\n\n  _read() {\n    const i = this._index++;\n    if (i > this._max)\n      this.push(null);\n    else {\n      const str = String(i);\n      const buf = Buffer.from(str, 'ascii');\n      this.push(buf);\n    }\n  }\n}\nImplementing a duplex stream#\nA Duplex stream is one that implements both Readable and Writable, such as a TCP socket connection.\n\nBecause JavaScript does not have support for multiple inheritance, the stream.Duplex class is extended to implement a Duplex stream (as opposed to extending the stream.Readable and stream.Writable classes).\n\nThe stream.Duplex class prototypically inherits from stream.Readable and parasitically from stream.Writable, but instanceof will work properly for both base classes due to overriding Symbol.hasInstance on stream.Writable.\n\nCustom Duplex streams must call the new stream.Duplex([options]) constructor and implement both the readable._read() and writable._write() methods.\n\nnew stream.Duplex(options)#\nHistory\noptions <Object> Passed to both Writable and Readable constructors. Also has the following fields:\nallowHalfOpen <boolean> If set to false, then the stream will automatically end the writable side when the readable side ends. Default: true.\nreadable <boolean> Sets whether the Duplex should be readable. Default: true.\nwritable <boolean> Sets whether the Duplex should be writable. Default: true.\nreadableObjectMode <boolean> Sets objectMode for readable side of the stream. Has no effect if objectMode is true. Default: false.\nwritableObjectMode <boolean> Sets objectMode for writable side of the stream. Has no effect if objectMode is true. Default: false.\nreadableHighWaterMark <number> Sets", "doc_id": "b5d72976-091a-41ad-a2aa-04a096cf423b", "embedding": null, "doc_hash": "8b2e35cc56a2b4eaa9e86a76c3fa2a99436887d33e23157cd501b84bb50f82e5", "extra_info": null, "node_info": {"start": 2322556, "end": 2325862}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4704d167-f5f5-49bb-ad16-f193475c21e8", "3": "0dc87b76-6110-4bae-a014-216d60d40b88"}}, "__type__": "1"}, "0dc87b76-6110-4bae-a014-216d60d40b88": {"__data__": {"text": "stream.Duplex(options)#\nHistory\noptions <Object> Passed to both Writable and Readable constructors. Also has the following fields:\nallowHalfOpen <boolean> If set to false, then the stream will automatically end the writable side when the readable side ends. Default: true.\nreadable <boolean> Sets whether the Duplex should be readable. Default: true.\nwritable <boolean> Sets whether the Duplex should be writable. Default: true.\nreadableObjectMode <boolean> Sets objectMode for readable side of the stream. Has no effect if objectMode is true. Default: false.\nwritableObjectMode <boolean> Sets objectMode for writable side of the stream. Has no effect if objectMode is true. Default: false.\nreadableHighWaterMark <number> Sets highWaterMark for the readable side of the stream. Has no effect if highWaterMark is provided.\nwritableHighWaterMark <number> Sets highWaterMark for the writable side of the stream. Has no effect if highWaterMark is provided.\nconst { Duplex } = require('node:stream');\n\nclass MyDuplex extends Duplex {\n  constructor(options) {\n    super(options);\n    // ...\n  }\n}\nOr, when using pre-ES6 style constructors:\n\nconst { Duplex } = require('node:stream');\nconst util = require('node:util');\n\nfunction MyDuplex(options) {\n  if (!(this instanceof MyDuplex))\n    return new MyDuplex(options);\n  Duplex.call(this, options);\n}\nutil.inherits(MyDuplex, Duplex);\nOr, using the simplified constructor approach:\n\nconst { Duplex } = require('node:stream');\n\nconst myDuplex = new Duplex({\n  read(size) {\n    // ...\n  },\n  write(chunk, encoding, callback) {\n    // ...\n  },\n});\nWhen using pipeline:\n\nconst { Transform, pipeline } = require('node:stream');\nconst fs = require('node:fs');\n\npipeline(\n  fs.createReadStream('object.json')\n    .setEncoding('utf8'),\n  new Transform({\n    decodeStrings: false, // Accept string input rather than Buffers\n    construct(callback) {\n      this.data = '';\n      callback();\n    },\n    transform(chunk, encoding, callback) {\n      this.data += chunk;\n      callback();\n    },\n    flush(callback) {\n      try {\n        // Make sure is valid json.\n        JSON.parse(this.data);\n        this.push(this.data);\n        callback();\n      } catch (err) {\n        callback(err);\n      }\n    },\n  }),\n  fs.createWriteStream('valid-object.json'),\n  (err) => {\n    if (err) {\n      console.error('failed', err);\n    } else {\n      console.log('completed');\n    }\n  },\n);\nAn example duplex stream#\nThe following illustrates a simple example of a Duplex stream that wraps a hypothetical lower-level source object to which data can be written, and from which data can be read, albeit using an API that is not compatible with Node.js streams. The following illustrates a simple example of a Duplex stream that buffers incoming written data via the Writable interface that is read back out via the Readable interface.\n\nconst { Duplex } = require('node:stream');\nconst kSource = Symbol('source');\n\nclass MyDuplex extends Duplex {\n  constructor(source, options) {\n    super(options);\n    this[kSource] = source;\n  }\n\n  _write(chunk,", "doc_id": "0dc87b76-6110-4bae-a014-216d60d40b88", "embedding": null, "doc_hash": "9af4205428c459045cda44e41ac1612c603ec3f90a664e0c79c4f9f066483def", "extra_info": null, "node_info": {"start": 2325632, "end": 2328695}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b5d72976-091a-41ad-a2aa-04a096cf423b", "3": "fc81db04-edc6-4116-9857-ea2931fd07bd"}}, "__type__": "1"}, "fc81db04-edc6-4116-9857-ea2931fd07bd": {"__data__": {"text": "   }\n  },\n);\nAn example duplex stream#\nThe following illustrates a simple example of a Duplex stream that wraps a hypothetical lower-level source object to which data can be written, and from which data can be read, albeit using an API that is not compatible with Node.js streams. The following illustrates a simple example of a Duplex stream that buffers incoming written data via the Writable interface that is read back out via the Readable interface.\n\nconst { Duplex } = require('node:stream');\nconst kSource = Symbol('source');\n\nclass MyDuplex extends Duplex {\n  constructor(source, options) {\n    super(options);\n    this[kSource] = source;\n  }\n\n  _write(chunk, encoding, callback) {\n    // The underlying source only deals with strings.\n    if (Buffer.isBuffer(chunk))\n      chunk = chunk.toString();\n    this[kSource].writeSomeData(chunk);\n    callback();\n  }\n\n  _read(size) {\n    this[kSource].fetchSomeData(size, (data, encoding) => {\n      this.push(Buffer.from(data, encoding));\n    });\n  }\n}\nThe most important aspect of a Duplex stream is that the Readable and Writable sides operate independently of one another despite co-existing within a single object instance.\n\nObject mode duplex streams#\nFor Duplex streams, objectMode can be set exclusively for either the Readable or Writable side using the readableObjectMode and writableObjectMode options respectively.\n\nIn the following example, for instance, a new Transform stream (which is a type of Duplex stream) is created that has an object mode Writable side that accepts JavaScript numbers that are converted to hexadecimal strings on the Readable side.\n\nconst { Transform } = require('node:stream');\n\n// All Transform streams are also Duplex Streams.\nconst myTransform = new Transform({\n  writableObjectMode: true,\n\n  transform(chunk, encoding, callback) {\n    // Coerce the chunk to a number if necessary.\n    chunk |= 0;\n\n    // Transform the chunk into something else.\n    const data = chunk.toString(16);\n\n    // Push the data onto the readable queue.\n    callback(null, '0'.repeat(data.length % 2) + data);\n  },\n});\n\nmyTransform.setEncoding('ascii');\nmyTransform.on('data', (chunk) => console.log(chunk));\n\nmyTransform.write(1);\n// Prints: 01\nmyTransform.write(10);\n// Prints: 0a\nmyTransform.write(100);\n// Prints: 64\nImplementing a transform stream#\nA Transform stream is a Duplex stream where the output is computed in some way from the input. Examples include zlib streams or crypto streams that compress, encrypt, or decrypt data.\n\nThere is no requirement that the output be the same size as the input, the same number of chunks, or arrive at the same time. For example, a Hash stream will only ever have a single chunk of output which is provided when the input is ended. A zlib stream will produce output that is either much smaller or much larger than its input.\n\nThe stream.Transform class is extended to implement a Transform stream.\n\nThe stream.Transform class prototypically inherits from stream.Duplex and implements its own versions of the writable._write() and readable._read() methods. Custom Transform implementations must implement the transform._transform() method and may also implement the transform._flush() method.\n\nCare must be taken when using Transform streams in that data written to the stream can cause the Writable side of the stream to become paused if the output on the Readable side is not consumed.\n\nnew stream.Transform([options])#\noptions <Object> Passed to both Writable and Readable constructors. Also has the following fields:\ntransform <Function> Implementation for the stream._transform() method.\nflush", "doc_id": "fc81db04-edc6-4116-9857-ea2931fd07bd", "embedding": null, "doc_hash": "4dd19f53ec3390933daf27d22db9782bcbe32048a170edc3b9f05714dfe09b79", "extra_info": null, "node_info": {"start": 2328769, "end": 2332385}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0dc87b76-6110-4bae-a014-216d60d40b88", "3": "e3286f1e-f608-48e0-bd7e-07d001f03676"}}, "__type__": "1"}, "e3286f1e-f608-48e0-bd7e-07d001f03676": {"__data__": {"text": "is either much smaller or much larger than its input.\n\nThe stream.Transform class is extended to implement a Transform stream.\n\nThe stream.Transform class prototypically inherits from stream.Duplex and implements its own versions of the writable._write() and readable._read() methods. Custom Transform implementations must implement the transform._transform() method and may also implement the transform._flush() method.\n\nCare must be taken when using Transform streams in that data written to the stream can cause the Writable side of the stream to become paused if the output on the Readable side is not consumed.\n\nnew stream.Transform([options])#\noptions <Object> Passed to both Writable and Readable constructors. Also has the following fields:\ntransform <Function> Implementation for the stream._transform() method.\nflush <Function> Implementation for the stream._flush() method.\nconst { Transform } = require('node:stream');\n\nclass MyTransform extends Transform {\n  constructor(options) {\n    super(options);\n    // ...\n  }\n}\nOr, when using pre-ES6 style constructors:\n\nconst { Transform } = require('node:stream');\nconst util = require('node:util');\n\nfunction MyTransform(options) {\n  if (!(this instanceof MyTransform))\n    return new MyTransform(options);\n  Transform.call(this, options);\n}\nutil.inherits(MyTransform, Transform);\nOr, using the simplified constructor approach:\n\nconst { Transform } = require('node:stream');\n\nconst myTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    // ...\n  },\n});\nEvent: 'end'#\nThe 'end' event is from the stream.Readable class. The 'end' event is emitted after all data has been output, which occurs after the callback in transform._flush() has been called. In the case of an error, 'end' should not be emitted.\n\nEvent: 'finish'#\nThe 'finish' event is from the stream.Writable class. The 'finish' event is emitted after stream.end() is called and all chunks have been processed by stream._transform(). In the case of an error, 'finish' should not be emitted.\n\ntransform._flush(callback)#\ncallback <Function> A callback function (optionally with an error argument and data) to be called when remaining data has been flushed.\nThis function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal Readable class methods only.\n\nIn some cases, a transform operation may need to emit an additional bit of data at the end of the stream. For example, a zlib compression stream will store an amount of internal state used to optimally compress the output. When the stream ends, however, that additional data needs to be flushed so that the compressed data will be complete.\n\nCustom Transform implementations may implement the transform._flush() method. This will be called when there is no more written data to be consumed, but before the 'end' event is emitted signaling the end of the Readable stream.\n\nWithin the transform._flush() implementation, the transform.push() method may be called zero or more times, as appropriate. The callback function must be called when the flush operation is complete.\n\nThe transform._flush() method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.\n\ntransform._transform(chunk, encoding, callback)#\nchunk <Buffer> | <string> | <any> The Buffer to be transformed, converted from the string passed to stream.write(). If the stream's decodeStrings option is false or the stream is operating in object mode, the chunk will not be converted & will be whatever was passed to stream.write().\nencoding <string> If the chunk is a string, then this is the encoding type. If chunk is a buffer, then this is the special value 'buffer'. Ignore it in that case.\ncallback <Function> A callback function (optionally with an error argument and data) to be called after the supplied chunk has been processed.\nThis function MUST NOT be called by application code directly. It should be implemented", "doc_id": "e3286f1e-f608-48e0-bd7e-07d001f03676", "embedding": null, "doc_hash": "e3ec2d6a67421fe94fff855f0be34098a40e958132b4308f6115aaeebfda229a", "extra_info": null, "node_info": {"start": 2332226, "end": 2336250}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fc81db04-edc6-4116-9857-ea2931fd07bd", "3": "4cecb6d2-f2c8-4a08-bfb5-8ece52415cbc"}}, "__type__": "1"}, "4cecb6d2-f2c8-4a08-bfb5-8ece52415cbc": {"__data__": {"text": "called directly by user programs.\n\ntransform._transform(chunk, encoding, callback)#\nchunk <Buffer> | <string> | <any> The Buffer to be transformed, converted from the string passed to stream.write(). If the stream's decodeStrings option is false or the stream is operating in object mode, the chunk will not be converted & will be whatever was passed to stream.write().\nencoding <string> If the chunk is a string, then this is the encoding type. If chunk is a buffer, then this is the special value 'buffer'. Ignore it in that case.\ncallback <Function> A callback function (optionally with an error argument and data) to be called after the supplied chunk has been processed.\nThis function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal Readable class methods only.\n\nAll Transform stream implementations must provide a _transform() method to accept input and produce output. The transform._transform() implementation handles the bytes being written, computes an output, then passes that output off to the readable portion using the transform.push() method.\n\nThe transform.push() method may be called zero or more times to generate output from a single input chunk, depending on how much is to be output as a result of the chunk.\n\nIt is possible that no output is generated from any given chunk of input data.\n\nThe callback function must be called only when the current chunk is completely consumed. The first argument passed to the callback must be an Error object if an error occurred while processing the input or null otherwise. If a second argument is passed to the callback, it will be forwarded on to the transform.push() method. In other words, the following are equivalent:\n\ntransform.prototype._transform = function(data, encoding, callback) {\n  this.push(data);\n  callback();\n};\n\ntransform.prototype._transform = function(data, encoding, callback) {\n  callback(null, data);\n};\nThe transform._transform() method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.\n\ntransform._transform() is never called in parallel; streams implement a queue mechanism, and to receive the next chunk, callback must be called, either synchronously or asynchronously.\n\nClass: stream.PassThrough#\nThe stream.PassThrough class is a trivial implementation of a Transform stream that simply passes the input bytes across to the output. Its purpose is primarily for examples and testing, but there are some use cases where stream.PassThrough is useful as a building block for novel sorts of streams.\n\nAdditional notes#\nStreams compatibility with async generators and async iterators#\nWith the support of async generators and iterators in JavaScript, async generators are effectively a first-class language-level stream construct at this point.\n\nSome common interop cases of using Node.js streams with async generators and async iterators are provided below.\n\nConsuming readable streams with async iterators#\n(async function() {\n  for await (const chunk of readable) {\n    console.log(chunk);\n  }\n})();\nAsync iterators register a permanent error handler on the stream to prevent any unhandled post-destroy errors.\n\nCreating readable streams with async generators#\nA Node.js readable stream can be created from an asynchronous generator using the Readable.from() utility method:\n\nconst { Readable } = require('node:stream');\n\nconst ac = new AbortController();\nconst signal = ac.signal;\n\nasync function * generate() {\n  yield 'a';\n  await someLongRunningFn({ signal });\n  yield 'b';\n  yield 'c';\n}\n\nconst readable = Readable.from(generate());\nreadable.on('close', () => {\n  ac.abort();\n});\n\nreadable.on('data', (chunk) => {\n  console.log(chunk);\n});\nPiping to writable streams from async iterators#\nWhen writing to a writable stream from an async iterator, ensure correct handling of backpressure and errors.", "doc_id": "4cecb6d2-f2c8-4a08-bfb5-8ece52415cbc", "embedding": null, "doc_hash": "f88a01678e38bc3443143e85c55ab11fa2faaf83020f73ffba119bb94d9c144a", "extra_info": null, "node_info": {"start": 2336325, "end": 2340274}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e3286f1e-f608-48e0-bd7e-07d001f03676", "3": "cd18d4a9-67b1-430d-a5e1-0c0b0d5756a1"}}, "__type__": "1"}, "cd18d4a9-67b1-430d-a5e1-0c0b0d5756a1": {"__data__": {"text": "created from an asynchronous generator using the Readable.from() utility method:\n\nconst { Readable } = require('node:stream');\n\nconst ac = new AbortController();\nconst signal = ac.signal;\n\nasync function * generate() {\n  yield 'a';\n  await someLongRunningFn({ signal });\n  yield 'b';\n  yield 'c';\n}\n\nconst readable = Readable.from(generate());\nreadable.on('close', () => {\n  ac.abort();\n});\n\nreadable.on('data', (chunk) => {\n  console.log(chunk);\n});\nPiping to writable streams from async iterators#\nWhen writing to a writable stream from an async iterator, ensure correct handling of backpressure and errors. stream.pipeline() abstracts away the handling of backpressure and backpressure-related errors:\n\nconst fs = require('node:fs');\nconst { pipeline } = require('node:stream');\nconst { pipeline: pipelinePromise } = require('node:stream/promises');\n\nconst writable = fs.createWriteStream('./file');\n\nconst ac = new AbortController();\nconst signal = ac.signal;\n\nconst iterator = createIterator({ signal });\n\n// Callback Pattern\npipeline(iterator, writable, (err, value) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(value, 'value returned');\n  }\n}).on('close', () => {\n  ac.abort();\n});\n\n// Promise Pattern\npipelinePromise(iterator, writable)\n  .then((value) => {\n    console.log(value, 'value returned');\n  })\n  .catch((err) => {\n    console.error(err);\n    ac.abort();\n  });\nCompatibility with older Node.js versions#\nPrior to Node.js 0.10, the Readable stream interface was simpler, but also less powerful and less useful.\n\nRather than waiting for calls to the stream.read() method, 'data' events would begin emitting immediately. Applications that would need to perform some amount of work to decide how to handle data were required to store read data into buffers so the data would not be lost.\nThe stream.pause() method was advisory, rather than guaranteed. This meant that it was still necessary to be prepared to receive 'data' events even when the stream was in a paused state.\nIn Node.js 0.10, the Readable class was added. For backward compatibility with older Node.js programs, Readable streams switch into \"flowing mode\" when a 'data' event handler is added, or when the stream.resume() method is called. The effect is that, even when not using the new stream.read() method and 'readable' event, it is no longer necessary to worry about losing 'data' chunks.\n\nWhile most applications will continue to function normally, this introduces an edge case in the following conditions:\n\nNo 'data' event listener is added.\nThe stream.resume() method is never called.\nThe stream is not piped to any writable destination.\nFor example, consider the following code:\n\n// WARNING!  BROKEN!\nnet.createServer((socket) => {\n\n  // We add an 'end' listener, but never consume the data.\n  socket.on('end', () => {\n    // It will never get here.\n    socket.end('The message was received but was not processed.\\n');\n  });\n\n}).listen(1337);\nPrior to Node.js 0.10, the incoming message data would be simply discarded. However, in Node.js 0.10 and beyond, the socket remains paused forever.\n\nThe workaround in this situation is to call the stream.resume() method to begin the flow of data:\n\n// Workaround.\nnet.createServer((socket) => {\n  socket.on('end', () => {\n    socket.end('The message was received but was not processed.\\n');\n  });\n\n  // Start the flow of", "doc_id": "cd18d4a9-67b1-430d-a5e1-0c0b0d5756a1", "embedding": null, "doc_hash": "018a850169c0c9a6d73dbe5f3d7edeb71d79343828a8c2aef715805d82397a05", "extra_info": null, "node_info": {"start": 2340387, "end": 2343762}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4cecb6d2-f2c8-4a08-bfb5-8ece52415cbc", "3": "2da48d2f-a23a-40c1-90f3-e07ec6250e26"}}, "__type__": "1"}, "2da48d2f-a23a-40c1-90f3-e07ec6250e26": {"__data__": {"text": "listener, but never consume the data.\n  socket.on('end', () => {\n    // It will never get here.\n    socket.end('The message was received but was not processed.\\n');\n  });\n\n}).listen(1337);\nPrior to Node.js 0.10, the incoming message data would be simply discarded. However, in Node.js 0.10 and beyond, the socket remains paused forever.\n\nThe workaround in this situation is to call the stream.resume() method to begin the flow of data:\n\n// Workaround.\nnet.createServer((socket) => {\n  socket.on('end', () => {\n    socket.end('The message was received but was not processed.\\n');\n  });\n\n  // Start the flow of data, discarding it.\n  socket.resume();\n}).listen(1337);\nIn addition to new Readable streams switching into flowing mode, pre-0.10 style streams can be wrapped in a Readable class using the readable.wrap() method.\n\nreadable.read(0)#\nThere are some cases where it is necessary to trigger a refresh of the underlying readable stream mechanisms, without actually consuming any data. In such cases, it is possible to call readable.read(0), which will always return null.\n\nIf the internal read buffer is below the highWaterMark, and the stream is not currently reading, then calling stream.read(0) will trigger a low-level stream._read() call.\n\nWhile most applications will almost never need to do this, there are situations within Node.js where this is done, particularly in the Readable stream class internals.\n\nreadable.push('')#\nUse of readable.push('') is not recommended.\n\nPushing a zero-byte string, Buffer, or Uint8Array to a stream that is not in object mode has an interesting side effect. Because it is a call to readable.push(), the call will end the reading process. However, because the argument is an empty string, no data is added to the readable buffer so there is nothing for a user to consume.\n\nhighWaterMark discrepancy after calling readable.setEncoding()#\nThe use of readable.setEncoding() will change the behavior of how the highWaterMark operates in non-object mode.\n\nTypically, the size of the current buffer is measured against the highWaterMark in bytes. However, after setEncoding() is called, the comparison function will begin to measure the buffer's size in characters.\n\nThis is not a problem in common cases with latin1 or ascii. But it is advised to be mindful about this behavior when working with strings that could contain multi-byte characters.\n\nString decoder#\nStability: 2 - Stable\nSource Code: lib/string_decoder.js\n\nThe node:string_decoder module provides an API for decoding Buffer objects into strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16 characters. It can be accessed using:\n\nconst { StringDecoder } = require('node:string_decoder');\nThe following example shows the basic use of the StringDecoder class.\n\nconst { StringDecoder } = require('node:string_decoder');\nconst decoder = new StringDecoder('utf8');\n\nconst cent = Buffer.from([0xC2, 0xA2]);\nconsole.log(decoder.write(cent));\n\nconst euro = Buffer.from([0xE2, 0x82, 0xAC]);\nconsole.log(decoder.write(euro));\nWhen a Buffer instance is written to the StringDecoder instance, an internal buffer is used to ensure that the decoded string does not contain any incomplete multibyte characters. These are held in the buffer until the next call to stringDecoder.write() or until stringDecoder.end() is called.\n\nIn the following example, the three UTF-8 encoded bytes of the European Euro symbol (\u20ac) are written over three separate operations:\n\nconst { StringDecoder } = require('node:string_decoder');\nconst decoder = new", "doc_id": "2da48d2f-a23a-40c1-90f3-e07ec6250e26", "embedding": null, "doc_hash": "950a242d27ac5250387ddcd98c3075b0ca493ad01af765c8af78a42736af1ae7", "extra_info": null, "node_info": {"start": 2343787, "end": 2347329}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cd18d4a9-67b1-430d-a5e1-0c0b0d5756a1", "3": "8c82172b-9a6e-4d67-8dc6-dcc6678fc9f7"}}, "__type__": "1"}, "8c82172b-9a6e-4d67-8dc6-dcc6678fc9f7": {"__data__": {"text": "cent = Buffer.from([0xC2, 0xA2]);\nconsole.log(decoder.write(cent));\n\nconst euro = Buffer.from([0xE2, 0x82, 0xAC]);\nconsole.log(decoder.write(euro));\nWhen a Buffer instance is written to the StringDecoder instance, an internal buffer is used to ensure that the decoded string does not contain any incomplete multibyte characters. These are held in the buffer until the next call to stringDecoder.write() or until stringDecoder.end() is called.\n\nIn the following example, the three UTF-8 encoded bytes of the European Euro symbol (\u20ac) are written over three separate operations:\n\nconst { StringDecoder } = require('node:string_decoder');\nconst decoder = new StringDecoder('utf8');\n\ndecoder.write(Buffer.from([0xE2]));\ndecoder.write(Buffer.from([0x82]));\nconsole.log(decoder.end(Buffer.from([0xAC])));\nClass: StringDecoder#\nnew StringDecoder([encoding])#\nAdded in: v0.1.99\nencoding <string> The character encoding the StringDecoder will use. Default: 'utf8'.\nCreates a new StringDecoder instance.\n\nstringDecoder.end([buffer])#\nAdded in: v0.9.3\nbuffer <Buffer> | <TypedArray> | <DataView> A Buffer, or TypedArray, or DataView containing the bytes to decode.\nReturns: <string>\nReturns any remaining input stored in the internal buffer as a string. Bytes representing incomplete UTF-8 and UTF-16 characters will be replaced with substitution characters appropriate for the character encoding.\n\nIf the buffer argument is provided, one final call to stringDecoder.write() is performed before returning the remaining input. After end() is called, the stringDecoder object can be reused for new input.\n\nstringDecoder.write(buffer)#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> A Buffer, or TypedArray, or DataView containing the bytes to decode.\nReturns: <string>\nReturns a decoded string, ensuring that any incomplete multibyte characters at the end of the Buffer, or TypedArray, or DataView are omitted from the returned string and stored in an internal buffer for the next call to stringDecoder.write() or stringDecoder.end().\n\nTest runner#\nAdded in: v18.0.0, v16.17.0\nStability: 1 - Experimental\nSource Code: lib/test.js\n\nThe node:test module facilitates the creation of JavaScript tests. To access it:\n\nimport test from 'node:test';\nThis module is only available under the node: scheme. The following will not work:\n\nimport test from 'test';\nTests created via the test module consist of a single function that is processed in one of three ways:\n\nA synchronous function that is considered failing if it throws an exception, and is considered passing otherwise.\nA function that returns a Promise that is considered failing if the Promise rejects, and is considered passing if the Promise resolves.\nA function that receives a callback function. If the callback receives any truthy value as its first argument, the test is considered failing. If a falsy value is passed as the first argument to the callback, the test is considered passing. If the test function receives a callback function and also returns a Promise, the test will fail.\nThe following example illustrates how tests are written using the test module.\n\ntest('synchronous passing test', (t) => {\n  // This test passes because it does not throw an exception.\n  assert.strictEqual(1, 1);\n});\n\ntest('synchronous failing test', (t) => {\n  // This test fails because it throws an exception.\n  assert.strictEqual(1, 2);\n});\n\ntest('asynchronous passing test', async (t) => {\n  // This test passes because the Promise returned by the async\n  // function is not rejected.\n ", "doc_id": "8c82172b-9a6e-4d67-8dc6-dcc6678fc9f7", "embedding": null, "doc_hash": "62b0806ebcf6f7ead36b17ce3fbeacb5f2a44ada9a053b3e612116a5b8583a15", "extra_info": null, "node_info": {"start": 2347267, "end": 2350793}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2da48d2f-a23a-40c1-90f3-e07ec6250e26", "3": "588a4467-c21e-4fa7-9cda-96d0f1a99f27"}}, "__type__": "1"}, "588a4467-c21e-4fa7-9cda-96d0f1a99f27": {"__data__": {"text": "as the first argument to the callback, the test is considered passing. If the test function receives a callback function and also returns a Promise, the test will fail.\nThe following example illustrates how tests are written using the test module.\n\ntest('synchronous passing test', (t) => {\n  // This test passes because it does not throw an exception.\n  assert.strictEqual(1, 1);\n});\n\ntest('synchronous failing test', (t) => {\n  // This test fails because it throws an exception.\n  assert.strictEqual(1, 2);\n});\n\ntest('asynchronous passing test', async (t) => {\n  // This test passes because the Promise returned by the async\n  // function is not rejected.\n  assert.strictEqual(1, 1);\n});\n\ntest('asynchronous failing test', async (t) => {\n  // This test fails because the Promise returned by the async\n  // function is rejected.\n  assert.strictEqual(1, 2);\n});\n\ntest('failing test using Promises', (t) => {\n  // Promises can be used directly as well.\n  return new Promise((resolve, reject) => {\n    setImmediate(() => {\n      reject(new Error('this will cause the test to fail'));\n    });\n  });\n});\n\ntest('callback passing test', (t, done) => {\n  // done() is the callback function. When the setImmediate() runs, it invokes\n  // done() with no arguments.\n  setImmediate(done);\n});\n\ntest('callback failing test', (t, done) => {\n  // When the setImmediate() runs, done() is invoked with an Error object and\n  // the test fails.\n  setImmediate(() => {\n    done(new Error('callback failure'));\n  });\n});\nIf any tests fail, the process exit code is set to 1.\n\nSubtests#\nThe test context's test() method allows subtests to be created. This method behaves identically to the top level test() function. The following example demonstrates the creation of a top level test with two subtests.\n\ntest('top level test', async (t) => {\n  await t.test('subtest 1', (t) => {\n    assert.strictEqual(1, 1);\n  });\n\n  await t.test('subtest 2', (t) => {\n    assert.strictEqual(2, 2);\n  });\n});\nIn this example, await is used to ensure that both subtests have completed. This is necessary because parent tests do not wait for their subtests to complete. Any subtests that are still outstanding when their parent finishes are cancelled and treated as failures. Any subtest failures cause the parent test to fail.\n\nSkipping tests#\nIndividual tests can be skipped by passing the skip option to the test, or by calling the test context's skip() method as shown in the following example.\n\n// The skip option is used, but no message is provided.\ntest('skip option', { skip: true }, (t) => {\n  // This code is never executed.\n});\n\n// The skip option is used, and a message is provided.\ntest('skip option with message', { skip: 'this is skipped' }, (t) => {\n  // This code is never executed.\n});\n\ntest('skip() method', (t) => {\n  // Make sure to return here as well if the test contains additional logic.\n  t.skip();\n});\n\ntest('skip() method with message', (t) => {\n  // Make sure to return here as well if the test contains additional logic.\n  t.skip('this is skipped');\n});\ndescribe/it syntax#\nRunning tests can also be done using describe to declare a suite and it to declare a test. A suite is used to organize and group related tests together. it is a shorthand for test().\n\ndescribe('A thing', () => {\n  it('should work', () => {\n   ", "doc_id": "588a4467-c21e-4fa7-9cda-96d0f1a99f27", "embedding": null, "doc_hash": "12803653ed286628417ddb15d157c0fac46469e9387afafc58f9754780631e65", "extra_info": null, "node_info": {"start": 2350811, "end": 2354120}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8c82172b-9a6e-4d67-8dc6-dcc6678fc9f7", "3": "e637231c-04dd-43d6-a857-700a0c1e8d3b"}}, "__type__": "1"}, "e637231c-04dd-43d6-a857-700a0c1e8d3b": {"__data__": {"text": "'this is skipped' }, (t) => {\n  // This code is never executed.\n});\n\ntest('skip() method', (t) => {\n  // Make sure to return here as well if the test contains additional logic.\n  t.skip();\n});\n\ntest('skip() method with message', (t) => {\n  // Make sure to return here as well if the test contains additional logic.\n  t.skip('this is skipped');\n});\ndescribe/it syntax#\nRunning tests can also be done using describe to declare a suite and it to declare a test. A suite is used to organize and group related tests together. it is a shorthand for test().\n\ndescribe('A thing', () => {\n  it('should work', () => {\n    assert.strictEqual(1, 1);\n  });\n\n  it('should be ok', () => {\n    assert.strictEqual(2, 2);\n  });\n\n  describe('a nested thing', () => {\n    it('should work', () => {\n      assert.strictEqual(3, 3);\n    });\n  });\n});\ndescribe and it are imported from the node:test module.\n\nimport { describe, it } from 'node:test';\nonly tests#\nIf Node.js is started with the --test-only command-line option, it is possible to skip all top level tests except for a selected subset by passing the only option to the tests that should be run. When a test with the only option set is run, all subtests are also run. The test context's runOnly() method can be used to implement the same behavior at the subtest level.\n\n// Assume Node.js is run with the --test-only command-line option.\n// The 'only' option is set, so this test is run.\ntest('this test is run', { only: true }, async (t) => {\n  // Within this test, all subtests are run by default.\n  await t.test('running subtest');\n\n  // The test context can be updated to run subtests with the 'only' option.\n  t.runOnly(true);\n  await t.test('this subtest is now skipped');\n  await t.test('this subtest is run', { only: true });\n\n  // Switch the context back to execute all tests.\n  t.runOnly(false);\n  await t.test('this subtest is now run');\n\n  // Explicitly do not run these tests.\n  await t.test('skipped subtest 3', { only: false });\n  await t.test('skipped subtest 4', { skip: true });\n});\n\n// The 'only' option is not set, so this test is skipped.\ntest('this test is not run', () => {\n  // This code is not run.\n  throw new Error('fail');\n});\nFiltering tests by name#\nThe --test-name-pattern command-line option can be used to only run tests whose name matches the provided pattern. Test name patterns are interpreted as JavaScript regular expressions. The --test-name-pattern option can be specified multiple times in order to run nested tests. For each test that is executed, any corresponding test hooks, such as beforeEach(), are also run.\n\nGiven the following test file, starting Node.js with the --test-name-pattern=\"test [1-3]\" option would cause the test runner to execute test 1, test 2, and test 3. If test 1 did not match the test name pattern, then its subtests would not execute, despite matching the pattern. The same set of tests could also be executed by passing --test-name-pattern multiple times (e.g. --test-name-pattern=\"test 1\", --test-name-pattern=\"test 2\", etc.).\n\ntest('test 1', async (t) => {\n  await t.test('test 2');\n  await t.test('test 3');\n});\n\ntest('Test 4', async (t) => {\n  await t.test('Test 5');\n  await t.test('test 6');\n});\nTest name patterns can also be specified using regular expression literals. This allows regular expression flags to be used. In the previous example, starting", "doc_id": "e637231c-04dd-43d6-a857-700a0c1e8d3b", "embedding": null, "doc_hash": "eeef601260d9d2de3d51750040d2d23f56ab9244362b3c5ab1ac2810fe3d4d0d", "extra_info": null, "node_info": {"start": 2354174, "end": 2357543}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "588a4467-c21e-4fa7-9cda-96d0f1a99f27", "3": "ab028029-cc14-440f-ae5b-f64a9cc75c26"}}, "__type__": "1"}, "ab028029-cc14-440f-ae5b-f64a9cc75c26": {"__data__": {"text": "test runner to execute test 1, test 2, and test 3. If test 1 did not match the test name pattern, then its subtests would not execute, despite matching the pattern. The same set of tests could also be executed by passing --test-name-pattern multiple times (e.g. --test-name-pattern=\"test 1\", --test-name-pattern=\"test 2\", etc.).\n\ntest('test 1', async (t) => {\n  await t.test('test 2');\n  await t.test('test 3');\n});\n\ntest('Test 4', async (t) => {\n  await t.test('Test 5');\n  await t.test('test 6');\n});\nTest name patterns can also be specified using regular expression literals. This allows regular expression flags to be used. In the previous example, starting Node.js with --test-name-pattern=\"/test [4-5]/i\" would match Test 4 and Test 5 because the pattern is case-insensitive.\n\nTest name patterns do not change the set of files that the test runner executes.\n\nExtraneous asynchronous activity#\nOnce a test function finishes executing, the results are reported as quickly as possible while maintaining the order of the tests. However, it is possible for the test function to generate asynchronous activity that outlives the test itself. The test runner handles this type of activity, but does not delay the reporting of test results in order to accommodate it.\n\nIn the following example, a test completes with two setImmediate() operations still outstanding. The first setImmediate() attempts to create a new subtest. Because the parent test has already finished and output its results, the new subtest is immediately marked as failed, and reported later to the <TestsStream>.\n\nThe second setImmediate() creates an uncaughtException event. uncaughtException and unhandledRejection events originating from a completed test are marked as failed by the test module and reported as diagnostic warnings at the top level by the <TestsStream>.\n\ntest('a test that creates asynchronous activity', (t) => {\n  setImmediate(() => {\n    t.test('subtest that is created too late', (t) => {\n      throw new Error('error1');\n    });\n  });\n\n  setImmediate(() => {\n    throw new Error('error2');\n  });\n\n  // The test finishes after this line.\n});\nWatch mode#\nAdded in: v18.13.0\nStability: 1 - Experimental\nThe Node.js test runner supports running in watch mode by passing the --watch flag:\n\nnode --test --watch\nIn watch mode, the test runner will watch for changes to test files and their dependencies. When a change is detected, the test runner will rerun the tests affected by the change. The test runner will continue to run until the process is terminated.\n\nRunning tests from the command line#\nThe Node.js test runner can be invoked from the command line by passing the --test flag:\n\nnode --test\nBy default, Node.js will recursively search the current directory for JavaScript source files matching a specific naming convention. Matching files are executed as test files. More information on the expected test file naming convention and behavior can be found in the test runner execution model section.\n\nAlternatively, one or more paths can be provided as the final argument(s) to the Node.js command, as shown below.\n\nnode --test test1.js test2.mjs custom_test_dir/\nIn this example, the test runner will execute the files test1.js and test2.mjs. The test runner will also recursively search the custom_test_dir/ directory for test files to execute.\n\nTest runner execution model#\nWhen searching for test files to execute, the test runner behaves as follows:\n\nAny files explicitly provided by the user are executed.\nIf the user did not explicitly specify any paths, the current working directory is recursively searched for files as specified in the following steps.\nnode_modules directories are skipped unless explicitly provided by the user.\nIf a directory named test is encountered, the test runner will search it recursively for all all .js, .cjs, and .mjs files. All of these files are", "doc_id": "ab028029-cc14-440f-ae5b-f64a9cc75c26", "embedding": null, "doc_hash": "385d7437e5f94e37adc862edd614367acdd038cbb7e971927bdc25445f957ce8", "extra_info": null, "node_info": {"start": 2357486, "end": 2361366}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e637231c-04dd-43d6-a857-700a0c1e8d3b", "3": "b109de20-d727-4481-9e33-ad25048f984b"}}, "__type__": "1"}, "b109de20-d727-4481-9e33-ad25048f984b": {"__data__": {"text": "test2.mjs custom_test_dir/\nIn this example, the test runner will execute the files test1.js and test2.mjs. The test runner will also recursively search the custom_test_dir/ directory for test files to execute.\n\nTest runner execution model#\nWhen searching for test files to execute, the test runner behaves as follows:\n\nAny files explicitly provided by the user are executed.\nIf the user did not explicitly specify any paths, the current working directory is recursively searched for files as specified in the following steps.\nnode_modules directories are skipped unless explicitly provided by the user.\nIf a directory named test is encountered, the test runner will search it recursively for all all .js, .cjs, and .mjs files. All of these files are treated as test files, and do not need to match the specific naming convention detailed below. This is to accommodate projects that place all of their tests in a single test directory.\nIn all other directories, .js, .cjs, and .mjs files matching the following patterns are treated as test files:\n^test$ - Files whose basename is the string 'test'. Examples: test.js, test.cjs, test.mjs.\n^test-.+ - Files whose basename starts with the string 'test-' followed by one or more characters. Examples: test-example.js, test-another-example.mjs.\n.+[\\.\\-\\_]test$ - Files whose basename ends with .test, -test, or _test, preceded by one or more characters. Examples: example.test.js, example-test.cjs, example_test.mjs.\nOther file types understood by Node.js such as .node and .json are not automatically executed by the test runner, but are supported if explicitly provided on the command line.\nEach matching test file is executed in a separate child process. If the child process finishes with an exit code of 0, the test is considered passing. Otherwise, the test is considered to be a failure. Test files must be executable by Node.js, but are not required to use the node:test module internally.\n\nCollecting code coverage#\nWhen Node.js is started with the --experimental-test-coverage command-line flag, code coverage is collected and statistics are reported once all tests have completed. If the NODE_V8_COVERAGE environment variable is used to specify a code coverage directory, the generated V8 coverage files are written to that directory. Node.js core modules and files within node_modules/ directories are not included in the coverage report. If coverage is enabled, the coverage report is sent to any test reporters via the 'test:coverage' event.\n\nCoverage can be disabled on a series of lines using the following comment syntax:\n\n/* node:coverage disable */\nif (anAlwaysFalseCondition) {\n  // Code in this branch will never be executed, but the lines are ignored for\n  // coverage purposes. All lines following the 'disable' comment are ignored\n  // until a corresponding 'enable' comment is encountered.\n  console.log('this is never executed');\n}\n/* node:coverage enable */\nCoverage can also be disabled for a specified number of lines. After the specified number of lines, coverage will be automatically reenabled. If the number of lines is not explicitly provided, a single line is ignored.\n\n/* node:coverage ignore next */\nif (anAlwaysFalseCondition) { console.log('this is never executed'); }\n\n/* node:coverage ignore next 3 */\nif (anAlwaysFalseCondition) {\n  console.log('this is never executed');\n}\nThe test runner's code coverage functionality has the following limitations, which will be addressed in a future Node.js release:\n\nAlthough coverage data is collected for child processes, this information is not included in the coverage report. Because the command line test runner uses child processes to execute test files, it cannot be used with --experimental-test-coverage.\nSource maps are not supported.\nExcluding specific files or directories from the coverage report is not supported.\nMocking#\nThe node:test module supports mocking during testing via a", "doc_id": "b109de20-d727-4481-9e33-ad25048f984b", "embedding": null, "doc_hash": "0bf1abcf3d500e9b3d93e3718c38b4e6242b5479cc4ed8a925fd22581cf7c3d0", "extra_info": null, "node_info": {"start": 2361289, "end": 2365209}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ab028029-cc14-440f-ae5b-f64a9cc75c26", "3": "9d6ced0a-a520-4d9e-961d-e04e0c6691b5"}}, "__type__": "1"}, "9d6ced0a-a520-4d9e-961d-e04e0c6691b5": {"__data__": {"text": "node:coverage ignore next */\nif (anAlwaysFalseCondition) { console.log('this is never executed'); }\n\n/* node:coverage ignore next 3 */\nif (anAlwaysFalseCondition) {\n  console.log('this is never executed');\n}\nThe test runner's code coverage functionality has the following limitations, which will be addressed in a future Node.js release:\n\nAlthough coverage data is collected for child processes, this information is not included in the coverage report. Because the command line test runner uses child processes to execute test files, it cannot be used with --experimental-test-coverage.\nSource maps are not supported.\nExcluding specific files or directories from the coverage report is not supported.\nMocking#\nThe node:test module supports mocking during testing via a top-level mock object. The following example creates a spy on a function that adds two numbers together. The spy is then used to assert that the function was called as expected.\n\nimport assert from 'node:assert';\nimport { mock, test } from 'node:test';\n\ntest('spies on a function', () => {\n  const sum = mock.fn((a, b) => {\n    return a + b;\n  });\n\n  assert.strictEqual(sum.mock.calls.length, 0);\n  assert.strictEqual(sum(3, 4), 7);\n  assert.strictEqual(sum.mock.calls.length, 1);\n\n  const call = sum.mock.calls[0];\n  assert.deepStrictEqual(call.arguments, [3, 4]);\n  assert.strictEqual(call.result, 7);\n  assert.strictEqual(call.error, undefined);\n\n  // Reset the globally tracked mocks.\n  mock.reset();\n});\nThe same mocking functionality is also exposed on the TestContext object of each test. The following example creates a spy on an object method using the API exposed on the TestContext. The benefit of mocking via the test context is that the test runner will automatically restore all mocked functionality once the test finishes.\n\ntest('spies on an object method', (t) => {\n  const number = {\n    value: 5,\n    add(a) {\n      return this.value + a;\n    },\n  };\n\n  t.mock.method(number, 'add');\n  assert.strictEqual(number.add.mock.calls.length, 0);\n  assert.strictEqual(number.add(3), 8);\n  assert.strictEqual(number.add.mock.calls.length, 1);\n\n  const call = number.add.mock.calls[0];\n\n  assert.deepStrictEqual(call.arguments, [3]);\n  assert.strictEqual(call.result, 8);\n  assert.strictEqual(call.target, undefined);\n  assert.strictEqual(call.this, number);\n});\nTest reporters#\nAdded in: v18.15.0\nThe node:test module supports passing --test-reporter flags for the test runner to use a specific reporter.\n\nThe following built-reporters are supported:\n\ntap The tap reporter outputs the test results in the TAP format.\n\nspec The spec reporter outputs the test results in a human-readable format.\n\ndot The dot reporter outputs the test results in a compact format, where each passing test is represented by a ., and each failing test is represented by a X.\n\nWhen stdout is a TTY, the spec reporter is used by default. Otherwise, the tap reporter is used by default.\n\nCustom reporters#\n--test-reporter can be used to specify a path to custom reporter. A custom reporter is a module that exports a value accepted by stream.compose. Reporters should transform events emitted by a <TestsStream>\n\nExample of a custom reporter using <stream.Transform>:\n\nimport { Transform } from 'node:stream';\n\nconst customReporter = new Transform({\n  writableObjectMode: true,\n  transform(event, encoding, callback)", "doc_id": "9d6ced0a-a520-4d9e-961d-e04e0c6691b5", "embedding": null, "doc_hash": "6549ec42f3560cd174efc2ccfd356fe8a8d5adcdf612fdac594cecfbb42a4925", "extra_info": null, "node_info": {"start": 2365180, "end": 2368550}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b109de20-d727-4481-9e33-ad25048f984b", "3": "dd53c56e-9a77-492e-ad27-23bdb3298cf5"}}, "__type__": "1"}, "dd53c56e-9a77-492e-ad27-23bdb3298cf5": {"__data__": {"text": "test results in a human-readable format.\n\ndot The dot reporter outputs the test results in a compact format, where each passing test is represented by a ., and each failing test is represented by a X.\n\nWhen stdout is a TTY, the spec reporter is used by default. Otherwise, the tap reporter is used by default.\n\nCustom reporters#\n--test-reporter can be used to specify a path to custom reporter. A custom reporter is a module that exports a value accepted by stream.compose. Reporters should transform events emitted by a <TestsStream>\n\nExample of a custom reporter using <stream.Transform>:\n\nimport { Transform } from 'node:stream';\n\nconst customReporter = new Transform({\n  writableObjectMode: true,\n  transform(event, encoding, callback) {\n    switch (event.type) {\n      case 'test:start':\n        callback(null, `test ${event.data.name} started`);\n        break;\n      case 'test:pass':\n        callback(null, `test ${event.data.name} passed`);\n        break;\n      case 'test:fail':\n        callback(null, `test ${event.data.name} failed`);\n        break;\n      case 'test:plan':\n        callback(null, 'test plan');\n        break;\n      case 'test:diagnostic':\n        callback(null, event.data.message);\n        break;\n      case 'test:coverage': {\n        const { totalLineCount } = event.data.summary.totals;\n        callback(null, `total line count: ${totalLineCount}\\n`);\n        break;\n      }\n    }\n  },\n});\n\nexport default customReporter;\nExample of a custom reporter using a generator function:\n\nexport default async function * customReporter(source) {\n  for await (const event of source) {\n    switch (event.type) {\n      case 'test:start':\n        yield `test ${event.data.name} started\\n`;\n        break;\n      case 'test:pass':\n        yield `test ${event.data.name} passed\\n`;\n        break;\n      case 'test:fail':\n        yield `test ${event.data.name} failed\\n`;\n        break;\n      case 'test:plan':\n        yield 'test plan';\n        break;\n      case 'test:diagnostic':\n        yield `${event.data.message}\\n`;\n        break;\n      case 'test:coverage': {\n        const { totalLineCount } = event.data.summary.totals;\n        yield `total line count: ${totalLineCount}\\n`;\n        break;\n      }\n    }\n  }\n}\nThe value provided to --test-reporter should be a string like one used in an import() in JavaScript code.\n\nMultiple reporters#\nThe --test-reporter flag can be specified multiple times to report test results in several formats. In this situation it is required to specify a destination for each reporter using --test-reporter-destination. Destination can be stdout, stderr, or a file path. Reporters and destinations are paired according to the order they were specified.\n\nIn the following example, the spec reporter will output to stdout, and the dot", "doc_id": "dd53c56e-9a77-492e-ad27-23bdb3298cf5", "embedding": null, "doc_hash": "4567796c63cb485d522e500cf8e5d804b383d01a64490ec072ec16e118916b1f", "extra_info": null, "node_info": {"start": 2368589, "end": 2371374}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9d6ced0a-a520-4d9e-961d-e04e0c6691b5", "3": "89d8d47e-ccf2-4765-99ae-dc9bb07ac0ef"}}, "__type__": "1"}, "89d8d47e-ccf2-4765-99ae-dc9bb07ac0ef": {"__data__": {"text": "       yield `total line count: ${totalLineCount}\\n`;\n        break;\n      }\n    }\n  }\n}\nThe value provided to --test-reporter should be a string like one used in an import() in JavaScript code.\n\nMultiple reporters#\nThe --test-reporter flag can be specified multiple times to report test results in several formats. In this situation it is required to specify a destination for each reporter using --test-reporter-destination. Destination can be stdout, stderr, or a file path. Reporters and destinations are paired according to the order they were specified.\n\nIn the following example, the spec reporter will output to stdout, and the dot reporter will output to file.txt:\n\nnode --test-reporter=spec --test-reporter=dot --test-reporter-destination=stdout --test-reporter-destination=file.txt\nWhen a single reporter is specified, the destination will default to stdout, unless a destination is explicitly provided.\n\nrun([options])#\nAdded in: v18.9.0\noptions <Object> Configuration options for running tests. The following properties are supported:\nconcurrency <number> | <boolean> If a number is provided, then that many files would run in parallel. If true, it would run os.availableParallelism() - 1 test files in parallel. If false, it would only run one test file at a time. Default: false.\nfiles: <Array> An array containing the list of files to run. Default matching files from test runner execution model.\nsetup <Function> A function that accepts the TestsStream instance and can be used to setup listeners before any tests are run. Default: undefined.\nsignal <AbortSignal> Allows aborting an in-progress test execution.\ntimeout <number> A number of milliseconds the test execution will fail after. If unspecified, subtests inherit this value from their parent. Default: Infinity.\ninspectPort <number> | <Function> Sets inspector port of test child process. This can be a number, or a function that takes no arguments and returns a number. If a nullish value is provided, each process gets its own port, incremented from the primary's process.debugPort. Default: undefined.\nReturns: <TestsStream>\nrun({ files: [path.resolve('./tests/test.js')] })\n  .pipe(process.stdout);\ntest([name][, options][, fn])#\nHistory\nname <string> The name of the test, which is displayed when reporting test results. Default: The name property of fn, or '<anonymous>' if fn does not have a name.\noptions <Object> Configuration options for the test. The following properties are supported:\nconcurrency <number> | <boolean> If a number is provided, then that many tests would run in parallel. If true, it would run os.availableParallelism() - 1 tests in parallel. For subtests, it will be Infinity tests in parallel. If false, it would only run one test at a time. If unspecified, subtests inherit this value from their parent. Default: false.\nonly <boolean> If truthy, and the test context is configured to run only tests, then this test will be run. Otherwise, the test is skipped. Default: false.\nsignal <AbortSignal> Allows aborting an in-progress test.\nskip <boolean> | <string> If truthy, the test is skipped. If a string is provided, that string is displayed in the test results as the reason for skipping the test. Default: false.\ntodo <boolean> | <string> If truthy, the test marked as TODO. If a string is provided, that string is displayed in the test results as the reason why the test is TODO. Default: false.\ntimeout <number> A number of milliseconds the test will fail after. If unspecified, subtests inherit this value from their parent. Default: Infinity.\nfn <Function> | <AsyncFunction> The function under test. The first argument to this function is a TestContext object. If the test uses callbacks, the callback function is passed as the second argument. Default: A no-op function.\nReturns:", "doc_id": "89d8d47e-ccf2-4765-99ae-dc9bb07ac0ef", "embedding": null, "doc_hash": "7780c7ecf1453eeb2d435d2c685acca0c325604edfae58c049f184c177730169", "extra_info": null, "node_info": {"start": 2371480, "end": 2375273}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dd53c56e-9a77-492e-ad27-23bdb3298cf5", "3": "c8690a61-831a-4a56-98dc-0842eeb30131"}}, "__type__": "1"}, "c8690a61-831a-4a56-98dc-0842eeb30131": {"__data__": {"text": "<boolean> | <string> If truthy, the test is skipped. If a string is provided, that string is displayed in the test results as the reason for skipping the test. Default: false.\ntodo <boolean> | <string> If truthy, the test marked as TODO. If a string is provided, that string is displayed in the test results as the reason why the test is TODO. Default: false.\ntimeout <number> A number of milliseconds the test will fail after. If unspecified, subtests inherit this value from their parent. Default: Infinity.\nfn <Function> | <AsyncFunction> The function under test. The first argument to this function is a TestContext object. If the test uses callbacks, the callback function is passed as the second argument. Default: A no-op function.\nReturns: <Promise> Resolved with undefined once the test completes, or immediately if the test runs within describe().\nThe test() function is the value imported from the test module. Each invocation of this function results in reporting the test to the <TestsStream>.\n\nThe TestContext object passed to the fn argument can be used to perform actions related to the current test. Examples include skipping the test, adding additional diagnostic information, or creating subtests.\n\ntest() returns a Promise that resolves once the test completes. if test() is called within a describe() block, it resolve immediately. The return value can usually be discarded for top level tests. However, the return value from subtests should be used to prevent the parent test from finishing first and cancelling the subtest as shown in the following example.\n\ntest('top level test', async (t) => {\n  // The setTimeout() in the following subtest would cause it to outlive its\n  // parent test if 'await' is removed on the next line. Once the parent test\n  // completes, it will cancel any outstanding subtests.\n  await t.test('longer running subtest', async (t) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(resolve, 1000);\n    });\n  });\n});\nThe timeout option can be used to fail the test if it takes longer than timeout milliseconds to complete. However, it is not a reliable mechanism for canceling tests because a running test might block the application thread and thus prevent the scheduled cancellation.\n\ndescribe([name][, options][, fn])#\nname <string> The name of the suite, which is displayed when reporting test results. Default: The name property of fn, or '<anonymous>' if fn does not have a name.\noptions <Object> Configuration options for the suite. supports the same options as test([name][, options][, fn]).\nfn <Function> | <AsyncFunction> The function under suite declaring all subtests and subsuites. The first argument to this function is a SuiteContext object. Default: A no-op function.\nReturns: undefined.\nThe describe() function imported from the node:test module. Each invocation of this function results in the creation of a Subtest. After invocation of top level describe functions, all top level tests and suites will execute.\n\ndescribe.skip([name][, options][, fn])#\nShorthand for skipping a suite, same as describe([name], { skip: true }[, fn]).\n\ndescribe.todo([name][, options][, fn])#\nShorthand for marking a suite as TODO, same as describe([name], { todo: true }[, fn]).\n\ndescribe.only([name][, options][, fn])#\nAdded in: v18.15.0\nShorthand for marking a suite as only, same as describe([name], { only: true }[, fn]).\n\nit([name][, options][, fn])#\nHistory\nShorthand for test().\n\nThe it() function is imported from the node:test module.\n\nit.skip([name][, options][, fn])#\nShorthand for skipping a test, same as it([name], { skip: true }[, fn]).\n\nit.todo([name][, options][, fn])#\nShorthand for", "doc_id": "c8690a61-831a-4a56-98dc-0842eeb30131", "embedding": null, "doc_hash": "fac6ce6d70b44ccf1fafdcf67c44732f464748572aed7a640772f75e35e06420", "extra_info": null, "node_info": {"start": 2375173, "end": 2378841}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "89d8d47e-ccf2-4765-99ae-dc9bb07ac0ef", "3": "c530cf2e-8df2-499d-b4c5-cfefd97c112a"}}, "__type__": "1"}, "c530cf2e-8df2-499d-b4c5-cfefd97c112a": {"__data__": {"text": "options][, fn])#\nShorthand for marking a suite as TODO, same as describe([name], { todo: true }[, fn]).\n\ndescribe.only([name][, options][, fn])#\nAdded in: v18.15.0\nShorthand for marking a suite as only, same as describe([name], { only: true }[, fn]).\n\nit([name][, options][, fn])#\nHistory\nShorthand for test().\n\nThe it() function is imported from the node:test module.\n\nit.skip([name][, options][, fn])#\nShorthand for skipping a test, same as it([name], { skip: true }[, fn]).\n\nit.todo([name][, options][, fn])#\nShorthand for marking a test as TODO, same as it([name], { todo: true }[, fn]).\n\nit.only([name][, options][, fn])#\nAdded in: v18.15.0\nShorthand for marking a test as only, same as it([name], { only: true }[, fn]).\n\nbefore([fn][, options])#\nAdded in: v18.8.0\nfn <Function> | <AsyncFunction> The hook function. If the hook uses callbacks, the callback function is passed as the second argument. Default: A no-op function.\noptions <Object> Configuration options for the hook. The following properties are supported:\nsignal <AbortSignal> Allows aborting an in-progress hook.\ntimeout <number> A number of milliseconds the hook will fail after. If unspecified, subtests inherit this value from their parent. Default: Infinity.\nThis function is used to create a hook running before running a suite.\n\ndescribe('tests', async () => {\n  before(() => console.log('about to run some test'));\n  it('is a subtest', () => {\n    assert.ok('some relevant assertion here');\n  });\n});\nafter([fn][, options])#\nAdded in: v18.8.0\nfn <Function> | <AsyncFunction> The hook function. If the hook uses callbacks, the callback function is passed as the second argument. Default: A no-op function.\noptions <Object> Configuration options for the hook. The following properties are supported:\nsignal <AbortSignal> Allows aborting an in-progress hook.\ntimeout <number> A number of milliseconds the hook will fail after. If unspecified, subtests inherit this value from their parent. Default: Infinity.\nThis function is used to create a hook running after running a suite.\n\ndescribe('tests', async () => {\n  after(() => console.log('finished running tests'));\n  it('is a subtest', () => {\n    assert.ok('some relevant assertion here');\n  });\n});\nbeforeEach([fn][, options])#\nAdded in: v18.8.0\nfn <Function> | <AsyncFunction> The hook function. If the hook uses callbacks, the callback function is passed as the second argument. Default: A no-op function.\noptions <Object> Configuration options for the hook. The following properties are supported:\nsignal <AbortSignal> Allows aborting an in-progress hook.\ntimeout <number> A number of milliseconds the hook will fail after. If unspecified, subtests inherit this value from their parent. Default: Infinity.\nThis function is used to create a hook running before each subtest of the current suite.\n\ndescribe('tests', async () => {\n  beforeEach(() => console.log('about to run a test'));\n  it('is a subtest', () => {\n    assert.ok('some relevant assertion here');\n  });\n});\nafterEach([fn][, options])#\nAdded in: v18.8.0\nfn <Function> | <AsyncFunction> The hook function. If the hook uses callbacks, the callback function is passed as the second argument. Default: A no-op function.\noptions <Object> Configuration options for the hook. The following properties are supported:\nsignal <AbortSignal> Allows aborting an in-progress hook.\ntimeout <number> A number of milliseconds the hook will fail after. If unspecified, subtests", "doc_id": "c530cf2e-8df2-499d-b4c5-cfefd97c112a", "embedding": null, "doc_hash": "94ec5a715dfa83e49478ed2dfe5d3207b29c1478554855ee728938d4a64223e6", "extra_info": null, "node_info": {"start": 2379007, "end": 2382458}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c8690a61-831a-4a56-98dc-0842eeb30131", "3": "23d19efe-a7d9-4654-9ad6-630d77264703"}}, "__type__": "1"}, "23d19efe-a7d9-4654-9ad6-630d77264703": {"__data__": {"text": "create a hook running before each subtest of the current suite.\n\ndescribe('tests', async () => {\n  beforeEach(() => console.log('about to run a test'));\n  it('is a subtest', () => {\n    assert.ok('some relevant assertion here');\n  });\n});\nafterEach([fn][, options])#\nAdded in: v18.8.0\nfn <Function> | <AsyncFunction> The hook function. If the hook uses callbacks, the callback function is passed as the second argument. Default: A no-op function.\noptions <Object> Configuration options for the hook. The following properties are supported:\nsignal <AbortSignal> Allows aborting an in-progress hook.\ntimeout <number> A number of milliseconds the hook will fail after. If unspecified, subtests inherit this value from their parent. Default: Infinity.\nThis function is used to create a hook running after each subtest of the current test.\n\ndescribe('tests', async () => {\n  afterEach(() => console.log('finished running a test'));\n  it('is a subtest', () => {\n    assert.ok('some relevant assertion here');\n  });\n});\nClass: MockFunctionContext#\nAdded in: v18.13.0\nThe MockFunctionContext class is used to inspect or manipulate the behavior of mocks created via the MockTracker APIs.\n\nctx.calls#\nAdded in: v18.13.0\n<Array>\nA getter that returns a copy of the internal array used to track calls to the mock. Each entry in the array is an object with the following properties.\n\narguments <Array> An array of the arguments passed to the mock function.\nerror <any> If the mocked function threw then this property contains the thrown value. Default: undefined.\nresult <any> The value returned by the mocked function.\nstack <Error> An Error object whose stack can be used to determine the callsite of the mocked function invocation.\ntarget <Function> | <undefined> If the mocked function is a constructor, this field contains the class being constructed. Otherwise this will be undefined.\nthis <any> The mocked function's this value.\nctx.callCount()#\nAdded in: v18.13.0\nReturns: <integer> The number of times that this mock has been invoked.\nThis function returns the number of times that this mock has been invoked. This function is more efficient than checking ctx.calls.length because ctx.calls is a getter that creates a copy of the internal call tracking array.\n\nctx.mockImplementation(implementation)#\nAdded in: v18.13.0\nimplementation <Function> | <AsyncFunction> The function to be used as the mock's new implementation.\nThis function is used to change the behavior of an existing mock.\n\nThe following example creates a mock function using t.mock.fn(), calls the mock function, and then changes the mock implementation to a different function.\n\ntest('changes a mock behavior', (t) => {\n  let cnt = 0;\n\n  function addOne() {\n    cnt++;\n    return cnt;\n  }\n\n  function addTwo() {\n    cnt += 2;\n    return cnt;\n  }\n\n  const fn = t.mock.fn(addOne);\n\n  assert.strictEqual(fn(), 1);\n  fn.mock.mockImplementation(addTwo);\n  assert.strictEqual(fn(), 3);\n  assert.strictEqual(fn(), 5);\n});\nctx.mockImplementationOnce(implementation[, onCall])#\nAdded in: v18.13.0\nimplementation <Function> | <AsyncFunction> The function to be used as the mock's implementation for the invocation number specified by onCall.\nonCall <integer> The invocation number that will use implementation. If the specified invocation has already occurred then an exception is thrown. Default: The number of the next invocation.\nThis function is used to change the behavior of an existing mock for a single invocation. Once invocation onCall has occurred, the mock will revert to whatever behavior it would have used", "doc_id": "23d19efe-a7d9-4654-9ad6-630d77264703", "embedding": null, "doc_hash": "99a06b3eeed3d86ddf27befc732739e3ba90bf182bed196b6c2885929affeb08", "extra_info": null, "node_info": {"start": 2382327, "end": 2385900}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c530cf2e-8df2-499d-b4c5-cfefd97c112a", "3": "d017ad32-0c88-4f29-90cf-e4b2d1f80ab7"}}, "__type__": "1"}, "d017ad32-0c88-4f29-90cf-e4b2d1f80ab7": {"__data__": {"text": "1);\n  fn.mock.mockImplementation(addTwo);\n  assert.strictEqual(fn(), 3);\n  assert.strictEqual(fn(), 5);\n});\nctx.mockImplementationOnce(implementation[, onCall])#\nAdded in: v18.13.0\nimplementation <Function> | <AsyncFunction> The function to be used as the mock's implementation for the invocation number specified by onCall.\nonCall <integer> The invocation number that will use implementation. If the specified invocation has already occurred then an exception is thrown. Default: The number of the next invocation.\nThis function is used to change the behavior of an existing mock for a single invocation. Once invocation onCall has occurred, the mock will revert to whatever behavior it would have used had mockImplementationOnce() not been called.\n\nThe following example creates a mock function using t.mock.fn(), calls the mock function, changes the mock implementation to a different function for the next invocation, and then resumes its previous behavior.\n\ntest('changes a mock behavior once', (t) => {\n  let cnt = 0;\n\n  function addOne() {\n    cnt++;\n    return cnt;\n  }\n\n  function addTwo() {\n    cnt += 2;\n    return cnt;\n  }\n\n  const fn = t.mock.fn(addOne);\n\n  assert.strictEqual(fn(), 1);\n  fn.mock.mockImplementationOnce(addTwo);\n  assert.strictEqual(fn(), 3);\n  assert.strictEqual(fn(), 4);\n});\nctx.resetCalls()#\nAdded in: v18.13.0\nResets the call history of the mock function.\n\nctx.restore()#\nAdded in: v18.13.0\nResets the implementation of the mock function to its original behavior. The mock can still be used after calling this function.\n\nClass: MockTracker#\nAdded in: v18.13.0\nThe MockTracker class is used to manage mocking functionality. The test runner module provides a top level mock export which is a MockTracker instance. Each test also provides its own MockTracker instance via the test context's mock property.\n\nmock.fn([original[, implementation]][, options])#\nAdded in: v18.13.0\noriginal <Function> | <AsyncFunction> An optional function to create a mock on. Default: A no-op function.\nimplementation <Function> | <AsyncFunction> An optional function used as the mock implementation for original. This is useful for creating mocks that exhibit one behavior for a specified number of calls and then restore the behavior of original. Default: The function specified by original.\noptions <Object> Optional configuration options for the mock function. The following properties are supported:\ntimes <integer> The number of times that the mock will use the behavior of implementation. Once the mock function has been called times times, it will automatically restore the behavior of original. This value must be an integer greater than zero. Default: Infinity.\nReturns: <Proxy> The mocked function. The mocked function contains a special mock property, which is an instance of MockFunctionContext, and can be used for inspecting and changing the behavior of the mocked function.\nThis function is used to create a mock function.\n\nThe following example creates a mock function that increments a counter by one on each invocation. The times option is used to modify the mock behavior such that the first two invocations add two to the counter instead of one.\n\ntest('mocks a counting function', (t) => {\n  let cnt = 0;\n\n  function addOne() {\n    cnt++;\n    return cnt;\n  }\n\n  function addTwo() {\n    cnt += 2;\n    return cnt;\n  }\n\n  const fn = t.mock.fn(addOne, addTwo, { times: 2 });\n\n  assert.strictEqual(fn(), 2);\n  assert.strictEqual(fn(), 4);\n  assert.strictEqual(fn(), 5);\n  assert.strictEqual(fn(),", "doc_id": "d017ad32-0c88-4f29-90cf-e4b2d1f80ab7", "embedding": null, "doc_hash": "59d0113c39d0c3e11ef2c457b534181e53d15f150b0ad3f3c1a3d8f85673e3e0", "extra_info": null, "node_info": {"start": 2385881, "end": 2389405}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "23d19efe-a7d9-4654-9ad6-630d77264703", "3": "062cd079-4e4e-4026-b2b4-6323e7e665c5"}}, "__type__": "1"}, "062cd079-4e4e-4026-b2b4-6323e7e665c5": {"__data__": {"text": "a mock function that increments a counter by one on each invocation. The times option is used to modify the mock behavior such that the first two invocations add two to the counter instead of one.\n\ntest('mocks a counting function', (t) => {\n  let cnt = 0;\n\n  function addOne() {\n    cnt++;\n    return cnt;\n  }\n\n  function addTwo() {\n    cnt += 2;\n    return cnt;\n  }\n\n  const fn = t.mock.fn(addOne, addTwo, { times: 2 });\n\n  assert.strictEqual(fn(), 2);\n  assert.strictEqual(fn(), 4);\n  assert.strictEqual(fn(), 5);\n  assert.strictEqual(fn(), 6);\n});\nmock.getter(object, methodName[, implementation][, options])#\nAdded in: v18.13.0\nThis function is syntax sugar for MockTracker.method with options.getter set to true.\n\nmock.method(object, methodName[, implementation][, options])#\nAdded in: v18.13.0\nobject <Object> The object whose method is being mocked.\nmethodName <string> | <symbol> The identifier of the method on object to mock. If object[methodName] is not a function, an error is thrown.\nimplementation <Function> | <AsyncFunction> An optional function used as the mock implementation for object[methodName]. Default: The original method specified by object[methodName].\noptions <Object> Optional configuration options for the mock method. The following properties are supported:\ngetter <boolean> If true, object[methodName] is treated as a getter. This option cannot be used with the setter option. Default: false.\nsetter <boolean> If true, object[methodName] is treated as a setter. This option cannot be used with the getter option. Default: false.\ntimes <integer> The number of times that the mock will use the behavior of implementation. Once the mocked method has been called times times, it will automatically restore the original behavior. This value must be an integer greater than zero. Default: Infinity.\nReturns: <Proxy> The mocked method. The mocked method contains a special mock property, which is an instance of MockFunctionContext, and can be used for inspecting and changing the behavior of the mocked method.\nThis function is used to create a mock on an existing object method. The following example demonstrates how a mock is created on an existing object method.\n\ntest('spies on an object method', (t) => {\n  const number = {\n    value: 5,\n    subtract(a) {\n      return this.value - a;\n    },\n  };\n\n  t.mock.method(number, 'subtract');\n  assert.strictEqual(number.subtract.mock.calls.length, 0);\n  assert.strictEqual(number.subtract(3), 2);\n  assert.strictEqual(number.subtract.mock.calls.length, 1);\n\n  const call = number.subtract.mock.calls[0];\n\n  assert.deepStrictEqual(call.arguments, [3]);\n  assert.strictEqual(call.result, 2);\n  assert.strictEqual(call.error, undefined);\n  assert.strictEqual(call.target, undefined);\n  assert.strictEqual(call.this, number);\n});\nmock.reset()#\nAdded in: v18.13.0\nThis function restores the default behavior of all mocks that were previously created by this MockTracker and disassociates the mocks from the MockTracker instance. Once disassociated, the mocks can still be used, but the MockTracker instance can no longer be used to reset their behavior or otherwise interact with them.\n\nAfter each test completes, this function is called on the test context's MockTracker. If the global MockTracker is used extensively, calling this function manually is recommended.\n\nmock.restoreAll()#\nAdded in: v18.13.0\nThis", "doc_id": "062cd079-4e4e-4026-b2b4-6323e7e665c5", "embedding": null, "doc_hash": "c50d1c5418ca855c9d08664f3b42d14d28259a3a0b7462415370d89cfba97df4", "extra_info": null, "node_info": {"start": 2389578, "end": 2392958}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d017ad32-0c88-4f29-90cf-e4b2d1f80ab7", "3": "ae4c8c66-0e89-43f4-9500-f237c12b3601"}}, "__type__": "1"}, "ae4c8c66-0e89-43f4-9500-f237c12b3601": {"__data__": {"text": "undefined);\n  assert.strictEqual(call.target, undefined);\n  assert.strictEqual(call.this, number);\n});\nmock.reset()#\nAdded in: v18.13.0\nThis function restores the default behavior of all mocks that were previously created by this MockTracker and disassociates the mocks from the MockTracker instance. Once disassociated, the mocks can still be used, but the MockTracker instance can no longer be used to reset their behavior or otherwise interact with them.\n\nAfter each test completes, this function is called on the test context's MockTracker. If the global MockTracker is used extensively, calling this function manually is recommended.\n\nmock.restoreAll()#\nAdded in: v18.13.0\nThis function restores the default behavior of all mocks that were previously created by this MockTracker. Unlike mock.reset(), mock.restoreAll() does not disassociate the mocks from the MockTracker instance.\n\nmock.setter(object, methodName[, implementation][, options])#\nAdded in: v18.13.0\nThis function is syntax sugar for MockTracker.method with options.setter set to true.\n\nClass: TestsStream#\nAdded in: v18.9.0\nExtends <ReadableStream>\nA successful call to run() method will return a new <TestsStream> object, streaming a series of events representing the execution of the tests. TestsStream will emit events, in the order of the tests definition\n\nEvent: 'test:coverage'#\ndata <Object>\nsummary <Object> An object containing the coverage report.\nfiles <Array> An array of coverage reports for individual files. Each report is an object with the following schema:\npath <string> The absolute path of the file.\ntotalLineCount <number> The total number of lines.\ntotalBranchCount <number> The total number of branches.\ntotalFunctionCount <number> The total number of functions.\ncoveredLineCount <number> The number of covered lines.\ncoveredBranchCount <number> The number of covered branches.\ncoveredFunctionCount <number> The number of covered functions.\ncoveredLinePercent <number> The percentage of lines covered.\ncoveredBranchPercent <number> The percentage of branches covered.\ncoveredFunctionPercent <number> The percentage of functions covered.\nuncoveredLineNumbers <Array> An array of integers representing line numbers that are uncovered.\ntotals <Object> An object containing a summary of coverage for all files.\ntotalLineCount <number> The total number of lines.\ntotalBranchCount <number> The total number of branches.\ntotalFunctionCount <number> The total number of functions.\ncoveredLineCount <number> The number of covered lines.\ncoveredBranchCount <number> The number of covered branches.\ncoveredFunctionCount <number> The number of covered functions.\ncoveredLinePercent <number> The percentage of lines covered.\ncoveredBranchPercent <number> The percentage of branches covered.\ncoveredFunctionPercent <number> The percentage of functions covered.\nworkingDirectory <string> The working directory when code coverage began. This is useful for displaying relative path names in case the tests changed the working directory of the Node.js process.\nnesting <number> The nesting level of the test.\nEmitted when code coverage is enabled and all tests have completed.\n\nEvent: 'test:diagnostic'#\ndata <Object>\nfile <string> | <undefined> The path of the test file, undefined if test is not ran through a file.\nmessage <string> The diagnostic message.\nnesting <number> The nesting level of the test.\nEmitted when context.diagnostic is called.\n\nEvent: 'test:fail'#\ndata <Object>\ndetails <Object> Additional execution metadata.\nduration <number> The duration of the test in milliseconds.\nerror <Error> The error thrown by the test.\nfile <string> | <undefined> The path of the test file, undefined if test is not ran through a file.\nname <string> The test name.\nnesting <number> The nesting level of the test.\ntestNumber <number> The ordinal number of the test.\ntodo <string> | <boolean> |", "doc_id": "ae4c8c66-0e89-43f4-9500-f237c12b3601", "embedding": null, "doc_hash": "4f1a73261090ef73a4cee681e8bd5501445e85898b55208b66e734d575a0adbd", "extra_info": null, "node_info": {"start": 2392804, "end": 2396672}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "062cd079-4e4e-4026-b2b4-6323e7e665c5", "3": "e951c3f9-0e10-44c4-b2c3-0194421798ad"}}, "__type__": "1"}, "e951c3f9-0e10-44c4-b2c3-0194421798ad": {"__data__": {"text": "<string> | <undefined> The path of the test file, undefined if test is not ran through a file.\nmessage <string> The diagnostic message.\nnesting <number> The nesting level of the test.\nEmitted when context.diagnostic is called.\n\nEvent: 'test:fail'#\ndata <Object>\ndetails <Object> Additional execution metadata.\nduration <number> The duration of the test in milliseconds.\nerror <Error> The error thrown by the test.\nfile <string> | <undefined> The path of the test file, undefined if test is not ran through a file.\nname <string> The test name.\nnesting <number> The nesting level of the test.\ntestNumber <number> The ordinal number of the test.\ntodo <string> | <boolean> | <undefined> Present if context.todo is called\nskip <string> | <boolean> | <undefined> Present if context.skip is called\nEmitted when a test fails.\n\nEvent: 'test:pass'#\ndata <Object>\ndetails <Object> Additional execution metadata.\nduration <number> The duration of the test in milliseconds.\nfile <string> | <undefined> The path of the test file, undefined if test is not ran through a file.\nname <string> The test name.\nnesting <number> The nesting level of the test.\ntestNumber <number> The ordinal number of the test.\ntodo <string> | <boolean> | <undefined> Present if context.todo is called\nskip <string> | <boolean> | <undefined> Present if context.skip is called\nEmitted when a test passes.\n\nEvent: 'test:plan'#\ndata <Object>\nfile <string> | <undefined> The path of the test file, undefined if test is not ran through a file.\nnesting <number> The nesting level of the test.\ncount <number> The number of subtests that have ran.\nEmitted when all subtests have completed for a given test.\n\nEvent: 'test:start'#\ndata <Object>\nfile <string> | <undefined> The path of the test file, undefined if test is not ran through a file.\nname <string> The test name.\nnesting <number> The nesting level of the test.\nEmitted when a test starts.\n\nClass: TestContext#\nAdded in: v18.0.0\nAn instance of TestContext is passed to each test function in order to interact with the test runner. However, the TestContext constructor is not exposed as part of the API.\n\ncontext.beforeEach([fn][, options])#\nAdded in: v18.8.0\nfn <Function> | <AsyncFunction> The hook function. The first argument to this function is a TestContext object. If the hook uses callbacks, the callback function is passed as the second argument. Default: A no-op function.\noptions <Object> Configuration options for the hook. The following properties are supported:\nsignal <AbortSignal> Allows aborting an in-progress hook.\ntimeout <number> A number of milliseconds the hook will fail after. If unspecified, subtests inherit this value from their parent. Default: Infinity.\nThis function is used to create a hook running before each subtest of the current test.\n\ntest('top level test', async (t) => {\n  t.beforeEach((t) => t.diagnostic(`about to run ${t.name}`));\n  await t.test(\n    'This is a subtest',\n    (t) => {\n      assert.ok('some relevant assertion here');\n    },\n  );\n});\ncontext.after([fn][, options])#\nAdded in: v18.13.0\nfn <Function> | <AsyncFunction> The hook function. The first argument to this function is a TestContext object. If the hook uses callbacks, the callback function is passed as the second argument. Default: A no-op function.\noptions <Object> Configuration options for the hook. The following properties are supported:\nsignal <AbortSignal> Allows aborting an in-progress hook.\ntimeout <number> A number of milliseconds the hook will fail after. If unspecified, subtests inherit this value from their parent. Default:", "doc_id": "e951c3f9-0e10-44c4-b2c3-0194421798ad", "embedding": null, "doc_hash": "945eb5bc220cafc03e0eddcacfcc66d24ab6ad2f71863b5b2f72cdff135e9e07", "extra_info": null, "node_info": {"start": 2396694, "end": 2400262}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ae4c8c66-0e89-43f4-9500-f237c12b3601", "3": "dc2e1e8b-5171-4eed-95bd-aef7d467810e"}}, "__type__": "1"}, "dc2e1e8b-5171-4eed-95bd-aef7d467810e": {"__data__": {"text": "t.test(\n    'This is a subtest',\n    (t) => {\n      assert.ok('some relevant assertion here');\n    },\n  );\n});\ncontext.after([fn][, options])#\nAdded in: v18.13.0\nfn <Function> | <AsyncFunction> The hook function. The first argument to this function is a TestContext object. If the hook uses callbacks, the callback function is passed as the second argument. Default: A no-op function.\noptions <Object> Configuration options for the hook. The following properties are supported:\nsignal <AbortSignal> Allows aborting an in-progress hook.\ntimeout <number> A number of milliseconds the hook will fail after. If unspecified, subtests inherit this value from their parent. Default: Infinity.\nThis function is used to create a hook that runs after the current test finishes.\n\ntest('top level test', async (t) => {\n  t.after((t) => t.diagnostic(`finished running ${t.name}`));\n  assert.ok('some relevant assertion here');\n});\ncontext.afterEach([fn][, options])#\nAdded in: v18.8.0\nfn <Function> | <AsyncFunction> The hook function. The first argument to this function is a TestContext object. If the hook uses callbacks, the callback function is passed as the second argument. Default: A no-op function.\noptions <Object> Configuration options for the hook. The following properties are supported:\nsignal <AbortSignal> Allows aborting an in-progress hook.\ntimeout <number> A number of milliseconds the hook will fail after. If unspecified, subtests inherit this value from their parent. Default: Infinity.\nThis function is used to create a hook running after each subtest of the current test.\n\ntest('top level test', async (t) => {\n  t.afterEach((t) => t.diagnostic(`finished running ${t.name}`));\n  await t.test(\n    'This is a subtest',\n    (t) => {\n      assert.ok('some relevant assertion here');\n    },\n  );\n});\ncontext.diagnostic(message)#\nAdded in: v18.0.0\nmessage <string> Message to be reported.\nThis function is used to write diagnostics to the output. Any diagnostic information is included at the end of the test's results. This function does not return a value.\n\ntest('top level test', (t) => {\n  t.diagnostic('A diagnostic message');\n});\ncontext.name#\nAdded in: v18.8.0\nThe name of the test.\n\ncontext.runOnly(shouldRunOnlyTests)#\nAdded in: v18.0.0\nshouldRunOnlyTests <boolean> Whether or not to run only tests.\nIf shouldRunOnlyTests is truthy, the test context will only run tests that have the only option set. Otherwise, all tests are run. If Node.js was not started with the --test-only command-line option, this function is a no-op.\n\ntest('top level test', (t) => {\n  // The test context can be set to run subtests with the 'only' option.\n  t.runOnly(true);\n  return Promise.all([\n    t.test('this subtest is now skipped'),\n    t.test('this subtest is run', { only: true }),\n  ]);\n});\ncontext.signal#\nAdded in: v18.7.0\n<AbortSignal> Can be used to abort test subtasks when the test has been aborted.\ntest('top level test', async (t) => {\n  await fetch('some/uri', { signal: t.signal });\n});\ncontext.skip([message])#\nAdded in: v18.0.0\nmessage <string> Optional skip message.\nThis function causes the test's output to indicate the test as skipped. If message is provided, it is included in the output. Calling skip() does not terminate execution of the test function. This function does not return a value.\n\ntest('top level test', (t) => {\n  // Make sure to return here as well if the test contains", "doc_id": "dc2e1e8b-5171-4eed-95bd-aef7d467810e", "embedding": null, "doc_hash": "a4a999b717ea213e8d01092822bb083be1c624bde6c8ed0179e7a04ec7b3206e", "extra_info": null, "node_info": {"start": 2400267, "end": 2403671}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e951c3f9-0e10-44c4-b2c3-0194421798ad", "3": "bfc5be4b-78c2-4b9a-91c3-7addeee44c54"}}, "__type__": "1"}, "bfc5be4b-78c2-4b9a-91c3-7addeee44c54": {"__data__": {"text": "true }),\n  ]);\n});\ncontext.signal#\nAdded in: v18.7.0\n<AbortSignal> Can be used to abort test subtasks when the test has been aborted.\ntest('top level test', async (t) => {\n  await fetch('some/uri', { signal: t.signal });\n});\ncontext.skip([message])#\nAdded in: v18.0.0\nmessage <string> Optional skip message.\nThis function causes the test's output to indicate the test as skipped. If message is provided, it is included in the output. Calling skip() does not terminate execution of the test function. This function does not return a value.\n\ntest('top level test', (t) => {\n  // Make sure to return here as well if the test contains additional logic.\n  t.skip('this is skipped');\n});\ncontext.todo([message])#\nAdded in: v18.0.0\nmessage <string> Optional TODO message.\nThis function adds a TODO directive to the test's output. If message is provided, it is included in the output. Calling todo() does not terminate execution of the test function. This function does not return a value.\n\ntest('top level test', (t) => {\n  // This test is marked as `TODO`\n  t.todo('this is a todo');\n});\ncontext.test([name][, options][, fn])#\nHistory\nname <string> The name of the subtest, which is displayed when reporting test results. Default: The name property of fn, or '<anonymous>' if fn does not have a name.\noptions <Object> Configuration options for the subtest. The following properties are supported:\nconcurrency <number> | <boolean> | <null> If a number is provided, then that many tests would run in parallel. If true, it would run all subtests in parallel. If false, it would only run one test at a time. If unspecified, subtests inherit this value from their parent. Default: null.\nonly <boolean> If truthy, and the test context is configured to run only tests, then this test will be run. Otherwise, the test is skipped. Default: false.\nsignal <AbortSignal> Allows aborting an in-progress test.\nskip <boolean> | <string> If truthy, the test is skipped. If a string is provided, that string is displayed in the test results as the reason for skipping the test. Default: false.\ntodo <boolean> | <string> If truthy, the test marked as TODO. If a string is provided, that string is displayed in the test results as the reason why the test is TODO. Default: false.\ntimeout <number> A number of milliseconds the test will fail after. If unspecified, subtests inherit this value from their parent. Default: Infinity.\nfn <Function> | <AsyncFunction> The function under test. The first argument to this function is a TestContext object. If the test uses callbacks, the callback function is passed as the second argument. Default: A no-op function.\nReturns: <Promise> Resolved with undefined once the test completes.\nThis function is used to create subtests under the current test. This function behaves in the same fashion as the top level test() function.\n\ntest('top level test', async (t) => {\n  await t.test(\n    'This is a subtest',\n    { only: false, skip: false, concurrency: 1, todo: false },\n    (t) => {\n      assert.ok('some relevant assertion here');\n    },\n  );\n});\nClass: SuiteContext#\nAdded in: v18.7.0\nAn instance of SuiteContext is passed to each suite function in order to interact with the test runner. However, the SuiteContext constructor is not exposed as part of the API.\n\ncontext.name#\nAdded in: v18.8.0\nThe name of the suite.\n\ncontext.signal#\nAdded in: v18.7.0\n<AbortSignal> Can be used to abort test subtasks when the test has been aborted.\nTimers#\nStability: 2 -", "doc_id": "bfc5be4b-78c2-4b9a-91c3-7addeee44c54", "embedding": null, "doc_hash": "6208c85bc9d5e58a47bd87ecef13243655b9f14a53cabb7a5c5cca01e5973ef8", "extra_info": null, "node_info": {"start": 2403708, "end": 2407182}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dc2e1e8b-5171-4eed-95bd-aef7d467810e", "3": "2a02800a-7491-4ec4-a04d-26ac28ef184d"}}, "__type__": "1"}, "2a02800a-7491-4ec4-a04d-26ac28ef184d": {"__data__": {"text": "   { only: false, skip: false, concurrency: 1, todo: false },\n    (t) => {\n      assert.ok('some relevant assertion here');\n    },\n  );\n});\nClass: SuiteContext#\nAdded in: v18.7.0\nAn instance of SuiteContext is passed to each suite function in order to interact with the test runner. However, the SuiteContext constructor is not exposed as part of the API.\n\ncontext.name#\nAdded in: v18.8.0\nThe name of the suite.\n\ncontext.signal#\nAdded in: v18.7.0\n<AbortSignal> Can be used to abort test subtasks when the test has been aborted.\nTimers#\nStability: 2 - Stable\nSource Code: lib/timers.js\n\nThe timer module exposes a global API for scheduling functions to be called at some future period of time. Because the timer functions are globals, there is no need to call require('node:timers') to use the API.\n\nThe timer functions within Node.js implement a similar API as the timers API provided by Web Browsers but use a different internal implementation that is built around the Node.js Event Loop.\n\nClass: Immediate#\nThis object is created internally and is returned from setImmediate(). It can be passed to clearImmediate() in order to cancel the scheduled actions.\n\nBy default, when an immediate is scheduled, the Node.js event loop will continue running as long as the immediate is active. The Immediate object returned by setImmediate() exports both immediate.ref() and immediate.unref() functions that can be used to control this default behavior.\n\nimmediate.hasRef()#\nAdded in: v11.0.0\nReturns: <boolean>\nIf true, the Immediate object will keep the Node.js event loop active.\n\nimmediate.ref()#\nAdded in: v9.7.0\nReturns: <Immediate> a reference to immediate\nWhen called, requests that the Node.js event loop not exit so long as the Immediate is active. Calling immediate.ref() multiple times will have no effect.\n\nBy default, all Immediate objects are \"ref'ed\", making it normally unnecessary to call immediate.ref() unless immediate.unref() had been called previously.\n\nimmediate.unref()#\nAdded in: v9.7.0\nReturns: <Immediate> a reference to immediate\nWhen called, the active Immediate object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the Immediate object's callback is invoked. Calling immediate.unref() multiple times will have no effect.\n\nClass: Timeout#\nThis object is created internally and is returned from setTimeout() and setInterval(). It can be passed to either clearTimeout() or clearInterval() in order to cancel the scheduled actions.\n\nBy default, when a timer is scheduled using either setTimeout() or setInterval(), the Node.js event loop will continue running as long as the timer is active. Each of the Timeout objects returned by these functions export both timeout.ref() and timeout.unref() functions that can be used to control this default behavior.\n\ntimeout.close()#\nAdded in: v0.9.1\nStability: 3 - Legacy: Use clearTimeout() instead.\nReturns: <Timeout> a reference to timeout\nCancels the timeout.\n\ntimeout.hasRef()#\nAdded in: v11.0.0\nReturns: <boolean>\nIf true, the Timeout object will keep the Node.js event loop active.\n\ntimeout.ref()#\nAdded in: v0.9.1\nReturns: <Timeout> a reference to timeout\nWhen called, requests that the Node.js event loop not exit so long as the Timeout is active. Calling timeout.ref() multiple times will have no effect.\n\nBy default, all Timeout objects are \"ref'ed\", making it normally unnecessary to call timeout.ref() unless timeout.unref() had been called previously.\n\ntimeout.refresh()#\nAdded in: v10.2.0\nReturns: <Timeout> a reference to timeout\nSets the timer's start time to", "doc_id": "2a02800a-7491-4ec4-a04d-26ac28ef184d", "embedding": null, "doc_hash": "e139644bb5ae455c2143aed27c506be45d5b3e5bed81138e2e23a42bb886f282", "extra_info": null, "node_info": {"start": 2407258, "end": 2410894}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "bfc5be4b-78c2-4b9a-91c3-7addeee44c54", "3": "cd2ad020-c056-4d0e-95f9-20bbeb04a3de"}}, "__type__": "1"}, "cd2ad020-c056-4d0e-95f9-20bbeb04a3de": {"__data__": {"text": "<Timeout> a reference to timeout\nCancels the timeout.\n\ntimeout.hasRef()#\nAdded in: v11.0.0\nReturns: <boolean>\nIf true, the Timeout object will keep the Node.js event loop active.\n\ntimeout.ref()#\nAdded in: v0.9.1\nReturns: <Timeout> a reference to timeout\nWhen called, requests that the Node.js event loop not exit so long as the Timeout is active. Calling timeout.ref() multiple times will have no effect.\n\nBy default, all Timeout objects are \"ref'ed\", making it normally unnecessary to call timeout.ref() unless timeout.unref() had been called previously.\n\ntimeout.refresh()#\nAdded in: v10.2.0\nReturns: <Timeout> a reference to timeout\nSets the timer's start time to the current time, and reschedules the timer to call its callback at the previously specified duration adjusted to the current time. This is useful for refreshing a timer without allocating a new JavaScript object.\n\nUsing this on a timer that has already called its callback will reactivate the timer.\n\ntimeout.unref()#\nAdded in: v0.9.1\nReturns: <Timeout> a reference to timeout\nWhen called, the active Timeout object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the Timeout object's callback is invoked. Calling timeout.unref() multiple times will have no effect.\n\ntimeout[Symbol.toPrimitive]()#\nAdded in: v14.9.0, v12.19.0\nReturns: <integer> a number that can be used to reference this timeout\nCoerce a Timeout to a primitive. The primitive can be used to clear the Timeout. The primitive can only be used in the same thread where the timeout was created. Therefore, to use it across worker_threads it must first be passed to the correct thread. This allows enhanced compatibility with browser setTimeout() and setInterval() implementations.\n\nScheduling timers#\nA timer in Node.js is an internal construct that calls a given function after a certain period of time. When a timer's function is called varies depending on which method was used to create the timer and what other work the Node.js event loop is doing.\n\nsetImmediate(callback[, ...args])#\nHistory\ncallback <Function> The function to call at the end of this turn of the Node.js Event Loop\n...args <any> Optional arguments to pass when the callback is called.\nReturns: <Immediate> for use with clearImmediate()\nSchedules the \"immediate\" execution of the callback after I/O events' callbacks.\n\nWhen multiple calls to setImmediate() are made, the callback functions are queued for execution in the order in which they are created. The entire callback queue is processed every event loop iteration. If an immediate timer is queued from inside an executing callback, that timer will not be triggered until the next event loop iteration.\n\nIf callback is not a function, a TypeError will be thrown.\n\nThis method has a custom variant for promises that is available using timersPromises.setImmediate().\n\nsetInterval(callback[, delay[, ...args]])#\nHistory\ncallback <Function> The function to call when the timer elapses.\ndelay <number> The number of milliseconds to wait before calling the callback. Default: 1.\n...args <any> Optional arguments to pass when the callback is called.\nReturns: <Timeout> for use with clearInterval()\nSchedules repeated execution of callback every delay milliseconds.\n\nWhen delay is larger than 2147483647 or less than 1, the delay will be set to 1. Non-integer delays are truncated to an integer.\n\nIf callback is not a function, a TypeError will be thrown.\n\nThis method has a custom variant for promises that is available using timersPromises.setInterval().\n\nsetTimeout(callback[, delay[, ...args]])#\nHistory\ncallback <Function> The function to call when the timer elapses.\ndelay <number> The number of milliseconds to wait before calling the callback. Default: 1.\n...args <any> Optional arguments to pass when the callback is called.\nReturns: <Timeout> for use with", "doc_id": "cd2ad020-c056-4d0e-95f9-20bbeb04a3de", "embedding": null, "doc_hash": "914c350a7b12dc4b287a3dc6bdbea2ea8a982f907341f8344d0d25fd93761c1a", "extra_info": null, "node_info": {"start": 2410773, "end": 2414691}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2a02800a-7491-4ec4-a04d-26ac28ef184d", "3": "c0978359-2ad3-4b07-976f-ccc867a589f8"}}, "__type__": "1"}, "c0978359-2ad3-4b07-976f-ccc867a589f8": {"__data__": {"text": "is called.\nReturns: <Timeout> for use with clearInterval()\nSchedules repeated execution of callback every delay milliseconds.\n\nWhen delay is larger than 2147483647 or less than 1, the delay will be set to 1. Non-integer delays are truncated to an integer.\n\nIf callback is not a function, a TypeError will be thrown.\n\nThis method has a custom variant for promises that is available using timersPromises.setInterval().\n\nsetTimeout(callback[, delay[, ...args]])#\nHistory\ncallback <Function> The function to call when the timer elapses.\ndelay <number> The number of milliseconds to wait before calling the callback. Default: 1.\n...args <any> Optional arguments to pass when the callback is called.\nReturns: <Timeout> for use with clearTimeout()\nSchedules execution of a one-time callback after delay milliseconds.\n\nThe callback will likely not be invoked in precisely delay milliseconds. Node.js makes no guarantees about the exact timing of when callbacks will fire, nor of their ordering. The callback will be called as close as possible to the time specified.\n\nWhen delay is larger than 2147483647 or less than 1, the delay will be set to 1. Non-integer delays are truncated to an integer.\n\nIf callback is not a function, a TypeError will be thrown.\n\nThis method has a custom variant for promises that is available using timersPromises.setTimeout().\n\nCancelling timers#\nThe setImmediate(), setInterval(), and setTimeout() methods each return objects that represent the scheduled timers. These can be used to cancel the timer and prevent it from triggering.\n\nFor the promisified variants of setImmediate() and setTimeout(), an AbortController may be used to cancel the timer. When canceled, the returned Promises will be rejected with an 'AbortError'.\n\nFor setImmediate():\n\nconst { setImmediate: setImmediatePromise } = require('node:timers/promises');\n\nconst ac = new AbortController();\nconst signal = ac.signal;\n\nsetImmediatePromise('foobar', { signal })\n  .then(console.log)\n  .catch((err) => {\n    if (err.name === 'AbortError')\n      console.error('The immediate was aborted');\n  });\n\nac.abort();\nFor setTimeout():\n\nconst { setTimeout: setTimeoutPromise } = require('node:timers/promises');\n\nconst ac = new AbortController();\nconst signal = ac.signal;\n\nsetTimeoutPromise(1000, 'foobar', { signal })\n  .then(console.log)\n  .catch((err) => {\n    if (err.name === 'AbortError')\n      console.error('The timeout was aborted');\n  });\n\nac.abort();\nclearImmediate(immediate)#\nAdded in: v0.9.1\nimmediate <Immediate> An Immediate object as returned by setImmediate().\nCancels an Immediate object created by setImmediate().\n\nclearInterval(timeout)#\nAdded in: v0.0.1\ntimeout <Timeout> | <string> | <number> A Timeout object as returned by setInterval() or the primitive of the Timeout object as a string or a number.\nCancels a Timeout object created by setInterval().\n\nclearTimeout(timeout)#\nAdded in: v0.0.1\ntimeout <Timeout> | <string> | <number> A Timeout object as returned by setTimeout() or the primitive of the Timeout object as a string or a number.\nCancels a Timeout object created by setTimeout().\n\nTimers Promises API#\nHistory\nThe timers/promises API provides an alternative set of timer functions that return Promise objects. The API is accessible via require('node:timers/promises').\n\nimport {\n  setTimeout,\n  setImmediate,\n  setInterval,\n} from 'timers/promises';\ntimersPromises.setTimeout([delay[, value[, options]]])#\nAdded in: v15.0.0\ndelay <number> The number", "doc_id": "c0978359-2ad3-4b07-976f-ccc867a589f8", "embedding": null, "doc_hash": "4c38ffe6ba48c9944e41917054c8826cfb881c5a3af6b59f4a3e5400e2ee8265", "extra_info": null, "node_info": {"start": 2414647, "end": 2418116}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "cd2ad020-c056-4d0e-95f9-20bbeb04a3de", "3": "90af0c58-811a-4ad5-994b-473d0ee72bed"}}, "__type__": "1"}, "90af0c58-811a-4ad5-994b-473d0ee72bed": {"__data__": {"text": "a Timeout object created by setInterval().\n\nclearTimeout(timeout)#\nAdded in: v0.0.1\ntimeout <Timeout> | <string> | <number> A Timeout object as returned by setTimeout() or the primitive of the Timeout object as a string or a number.\nCancels a Timeout object created by setTimeout().\n\nTimers Promises API#\nHistory\nThe timers/promises API provides an alternative set of timer functions that return Promise objects. The API is accessible via require('node:timers/promises').\n\nimport {\n  setTimeout,\n  setImmediate,\n  setInterval,\n} from 'timers/promises';\ntimersPromises.setTimeout([delay[, value[, options]]])#\nAdded in: v15.0.0\ndelay <number> The number of milliseconds to wait before fulfilling the promise. Default: 1.\nvalue <any> A value with which the promise is fulfilled.\noptions <Object>\nref <boolean> Set to false to indicate that the scheduled Timeout should not require the Node.js event loop to remain active. Default: true.\nsignal <AbortSignal> An optional AbortSignal that can be used to cancel the scheduled Timeout.\nimport {\n  setTimeout,\n} from 'timers/promises';\n\nconst res = await setTimeout(100, 'result');\n\nconsole.log(res);  // Prints 'result'\ntimersPromises.setImmediate([value[, options]])#\nAdded in: v15.0.0\nvalue <any> A value with which the promise is fulfilled.\noptions <Object>\nref <boolean> Set to false to indicate that the scheduled Immediate should not require the Node.js event loop to remain active. Default: true.\nsignal <AbortSignal> An optional AbortSignal that can be used to cancel the scheduled Immediate.\nimport {\n  setImmediate,\n} from 'timers/promises';\n\nconst res = await setImmediate('result');\n\nconsole.log(res);  // Prints 'result'\ntimersPromises.setInterval([delay[, value[, options]]])#\nAdded in: v15.9.0\nReturns an async iterator that generates values in an interval of delay ms. If ref is true, you need to call next() of async iterator explicitly or implicitly to keep the event loop alive.\n\ndelay <number> The number of milliseconds to wait between iterations. Default: 1.\nvalue <any> A value with which the iterator returns.\noptions <Object>\nref <boolean> Set to false to indicate that the scheduled Timeout between iterations should not require the Node.js event loop to remain active. Default: true.\nsignal <AbortSignal> An optional AbortSignal that can be used to cancel the scheduled Timeout between operations.\nimport {\n  setInterval,\n} from 'timers/promises';\n\nconst interval = 100;\nfor await (const startTime of setInterval(interval, Date.now())) {\n  const now = Date.now();\n  console.log(now);\n  if ((now - startTime) > 1000)\n    break;\n}\nconsole.log(Date.now());\ntimersPromises.scheduler.wait(delay[, options])#\nAdded in: v17.3.0, v16.14.0\nStability: 1 - Experimental\ndelay <number> The number of milliseconds to wait before resolving the promise.\noptions <Object>\nsignal <AbortSignal> An optional AbortSignal that can be used to cancel waiting.\nReturns: <Promise>\nAn experimental API defined by the Scheduling APIs draft specification being developed as a standard Web Platform API.\n\nCalling timersPromises.scheduler.wait(delay, options) is roughly equivalent to calling timersPromises.setTimeout(delay, undefined, options) except that the ref option is not supported.\n\nimport { scheduler } from 'node:timers/promises';\n\nawait scheduler.wait(1000); // Wait one second before", "doc_id": "90af0c58-811a-4ad5-994b-473d0ee72bed", "embedding": null, "doc_hash": "bfbd2fae57c1c84d582a95a725fc73fd29014f8b0337ded0a95f8d8058846fc9", "extra_info": null, "node_info": {"start": 2418169, "end": 2421506}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c0978359-2ad3-4b07-976f-ccc867a589f8", "3": "2f4e1eef-93d9-473b-a5e3-39c1af513eb1"}}, "__type__": "1"}, "2f4e1eef-93d9-473b-a5e3-39c1af513eb1": {"__data__": {"text": "options])#\nAdded in: v17.3.0, v16.14.0\nStability: 1 - Experimental\ndelay <number> The number of milliseconds to wait before resolving the promise.\noptions <Object>\nsignal <AbortSignal> An optional AbortSignal that can be used to cancel waiting.\nReturns: <Promise>\nAn experimental API defined by the Scheduling APIs draft specification being developed as a standard Web Platform API.\n\nCalling timersPromises.scheduler.wait(delay, options) is roughly equivalent to calling timersPromises.setTimeout(delay, undefined, options) except that the ref option is not supported.\n\nimport { scheduler } from 'node:timers/promises';\n\nawait scheduler.wait(1000); // Wait one second before continuing\ntimersPromises.scheduler.yield()#\nAdded in: v17.3.0, v16.14.0\nStability: 1 - Experimental\nReturns: <Promise>\nAn experimental API defined by the Scheduling APIs draft specification being developed as a standard Web Platform API.\n\nCalling timersPromises.scheduler.yield() is equivalent to calling timersPromises.setImmediate() with no arguments.\n\nTLS (SSL)#\nStability: 2 - Stable\nSource Code: lib/tls.js\n\nThe node:tls module provides an implementation of the Transport Layer Security (TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL. The module can be accessed using:\n\nconst tls = require('node:tls');\nDetermining if crypto support is unavailable#\nIt is possible for Node.js to be built without including support for the node:crypto module. In such cases, attempting to import from tls or calling require('node:tls') will result in an error being thrown.\n\nWhen using CommonJS, the error thrown can be caught using try/catch:\n\nlet tls;\ntry {\n  tls = require('node:tls');\n} catch (err) {\n  console.error('tls support is disabled!');\n}\nWhen using the lexical ESM import keyword, the error can only be caught if a handler for process.on('uncaughtException') is registered before any attempt to load the module is made (using, for instance, a preload module).\n\nWhen using ESM, if there is a chance that the code may be run on a build of Node.js where crypto support is not enabled, consider using the import() function instead of the lexical import keyword:\n\nlet tls;\ntry {\n  tls = await import('node:tls');\n} catch (err) {\n  console.error('tls support is disabled!');\n}\nTLS/SSL concepts#\nTLS/SSL is a set of protocols that rely on a public key infrastructure (PKI) to enable secure communication between a client and a server. For most common cases, each server must have a private key.\n\nPrivate keys can be generated in multiple ways. The example below illustrates use of the OpenSSL command-line interface to generate a 2048-bit RSA private key:\n\nopenssl genrsa -out ryans-key.pem 2048\nWith TLS/SSL, all servers (and some clients) must have a certificate. Certificates are public keys that correspond to a private key, and that are digitally signed either by a Certificate Authority or by the owner of the private key (such certificates are referred to as \"self-signed\"). The first step to obtaining a certificate is to create a Certificate Signing Request (CSR) file.\n\nThe OpenSSL command-line interface can be used to generate a CSR for a private key:\n\nopenssl req -new -sha256 -key ryans-key.pem -out ryans-csr.pem\nOnce the CSR file is generated, it can either be sent to a Certificate Authority for signing or used to generate a self-signed certificate.\n\nCreating a self-signed certificate using the OpenSSL command-line interface is illustrated in the example below:\n\nopenssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out", "doc_id": "2f4e1eef-93d9-473b-a5e3-39c1af513eb1", "embedding": null, "doc_hash": "13dfe2ddb83d7e1c432b456d4d793deba42c811739ef121a1979de76d509c889", "extra_info": null, "node_info": {"start": 2421486, "end": 2425033}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "90af0c58-811a-4ad5-994b-473d0ee72bed", "3": "3ea45ace-3643-432a-bb80-ce54e41e21e3"}}, "__type__": "1"}, "3ea45ace-3643-432a-bb80-ce54e41e21e3": {"__data__": {"text": "Certificate Authority or by the owner of the private key (such certificates are referred to as \"self-signed\"). The first step to obtaining a certificate is to create a Certificate Signing Request (CSR) file.\n\nThe OpenSSL command-line interface can be used to generate a CSR for a private key:\n\nopenssl req -new -sha256 -key ryans-key.pem -out ryans-csr.pem\nOnce the CSR file is generated, it can either be sent to a Certificate Authority for signing or used to generate a self-signed certificate.\n\nCreating a self-signed certificate using the OpenSSL command-line interface is illustrated in the example below:\n\nopenssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out ryans-cert.pem\nOnce the certificate is generated, it can be used to generate a .pfx or .p12 file:\n\nopenssl pkcs12 -export -in ryans-cert.pem -inkey ryans-key.pem \\\n      -certfile ca-cert.pem -out ryans.pfx\nWhere:\n\nin: is the signed certificate\ninkey: is the associated private key\ncertfile: is a concatenation of all Certificate Authority (CA) certs into a single file, e.g. cat ca1-cert.pem ca2-cert.pem > ca-cert.pem\nPerfect forward secrecy#\nThe term forward secrecy or perfect forward secrecy describes a feature of key-agreement (i.e., key-exchange) methods. That is, the server and client keys are used to negotiate new temporary keys that are used specifically and only for the current communication session. Practically, this means that even if the server's private key is compromised, communication can only be decrypted by eavesdroppers if the attacker manages to obtain the key-pair specifically generated for the session.\n\nPerfect forward secrecy is achieved by randomly generating a key pair for key-agreement on every TLS/SSL handshake (in contrast to using the same key for all sessions). Methods implementing this technique are called \"ephemeral\".\n\nCurrently two methods are commonly used to achieve perfect forward secrecy (note the character \"E\" appended to the traditional abbreviations):\n\nECDHE: An ephemeral version of the Elliptic Curve Diffie-Hellman key-agreement protocol.\nDHE: An ephemeral version of the Diffie-Hellman key-agreement protocol.\nPerfect forward secrecy using ECDHE is enabled by default. The ecdhCurve option can be used when creating a TLS server to customize the list of supported ECDH curves to use. See tls.createServer() for more info.\n\nDHE is disabled by default but can be enabled alongside ECDHE by setting the dhparam option to 'auto'. Custom DHE parameters are also supported but discouraged in favor of automatically selected, well-known parameters.\n\nPerfect forward secrecy was optional up to TLSv1.2. As of TLSv1.3, (EC)DHE is always used (with the exception of PSK-only connections).\n\nALPN and SNI#\nALPN (Application-Layer Protocol Negotiation Extension) and SNI (Server Name Indication) are TLS handshake extensions:\n\nALPN: Allows the use of one TLS server for multiple protocols (HTTP, HTTP/2)\nSNI: Allows the use of one TLS server for multiple hostnames with different certificates.\nPre-shared keys#\nTLS-PSK support is available as an alternative to normal certificate-based authentication. It uses a pre-shared key instead of certificates to authenticate a TLS connection, providing mutual authentication. TLS-PSK and public key infrastructure are not mutually exclusive. Clients and servers can accommodate both, choosing either of them during the normal cipher negotiation step.\n\nTLS-PSK is only a good choice where means exist to securely share a key with every connecting machine, so it does not replace the public key infrastructure (PKI) for the majority of TLS uses. The TLS-PSK implementation in OpenSSL has seen many security", "doc_id": "3ea45ace-3643-432a-bb80-ce54e41e21e3", "embedding": null, "doc_hash": "286c22310feb1ef97685d12335340c80da837b3c9c1f28423376bc313f56eac8", "extra_info": null, "node_info": {"start": 2425054, "end": 2428723}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2f4e1eef-93d9-473b-a5e3-39c1af513eb1", "3": "275357e0-dd39-4c48-a3b9-6d51db67cb28"}}, "__type__": "1"}, "275357e0-dd39-4c48-a3b9-6d51db67cb28": {"__data__": {"text": "protocols (HTTP, HTTP/2)\nSNI: Allows the use of one TLS server for multiple hostnames with different certificates.\nPre-shared keys#\nTLS-PSK support is available as an alternative to normal certificate-based authentication. It uses a pre-shared key instead of certificates to authenticate a TLS connection, providing mutual authentication. TLS-PSK and public key infrastructure are not mutually exclusive. Clients and servers can accommodate both, choosing either of them during the normal cipher negotiation step.\n\nTLS-PSK is only a good choice where means exist to securely share a key with every connecting machine, so it does not replace the public key infrastructure (PKI) for the majority of TLS uses. The TLS-PSK implementation in OpenSSL has seen many security flaws in recent years, mostly because it is used only by a minority of applications. Please consider all alternative solutions before switching to PSK ciphers. Upon generating PSK it is of critical importance to use sufficient entropy as discussed in RFC 4086. Deriving a shared secret from a password or other low-entropy sources is not secure.\n\nPSK ciphers are disabled by default, and using TLS-PSK thus requires explicitly specifying a cipher suite with the ciphers option. The list of available ciphers can be retrieved via openssl ciphers -v 'PSK'. All TLS 1.3 ciphers are eligible for PSK but currently only those that use SHA256 digest are supported they can be retrieved via openssl ciphers -v -s -tls1_3 -psk.\n\nAccording to the RFC 4279, PSK identities up to 128 bytes in length and PSKs up to 64 bytes in length must be supported. As of OpenSSL 1.1.0 maximum identity size is 128 bytes, and maximum PSK length is 256 bytes.\n\nThe current implementation doesn't support asynchronous PSK callbacks due to the limitations of the underlying OpenSSL API.\n\nClient-initiated renegotiation attack mitigation#\nThe TLS protocol allows clients to renegotiate certain aspects of the TLS session. Unfortunately, session renegotiation requires a disproportionate amount of server-side resources, making it a potential vector for denial-of-service attacks.\n\nTo mitigate the risk, renegotiation is limited to three times every ten minutes. An 'error' event is emitted on the tls.TLSSocket instance when this threshold is exceeded. The limits are configurable:\n\ntls.CLIENT_RENEG_LIMIT <number> Specifies the number of renegotiation requests. Default: 3.\ntls.CLIENT_RENEG_WINDOW <number> Specifies the time renegotiation window in seconds. Default: 600 (10 minutes).\nThe default renegotiation limits should not be modified without a full understanding of the implications and risks.\n\nTLSv1.3 does not support renegotiation.\n\nSession resumption#\nEstablishing a TLS session can be relatively slow. The process can be sped up by saving and later reusing the session state. There are several mechanisms to do so, discussed here from oldest to newest (and preferred).\n\nSession identifiers#\nServers generate a unique ID for new connections and send it to the client. Clients and servers save the session state. When reconnecting, clients send the ID of their saved session state and if the server also has the state for that ID, it can agree to use it. Otherwise, the server will create a new session. See RFC 2246 for more information, page 23 and 30.\n\nResumption using session identifiers is supported by most web browsers when making HTTPS requests.\n\nFor Node.js, clients wait for the 'session' event to get the session data, and provide the data to the session option of a subsequent tls.connect() to reuse the session. Servers must implement handlers for the 'newSession' and 'resumeSession' events to save and restore the session data using the session ID as the lookup key to reuse sessions. To reuse sessions across load balancers or cluster workers, servers must use a shared session cache (such as Redis) in their session handlers.\n\nSession tickets#\nThe servers", "doc_id": "275357e0-dd39-4c48-a3b9-6d51db67cb28", "embedding": null, "doc_hash": "4a8a6bc0d7fb11e9fb1c43d6cb615d0be7ea41aaae838a9eb652bd97c379570b", "extra_info": null, "node_info": {"start": 2428644, "end": 2432569}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3ea45ace-3643-432a-bb80-ce54e41e21e3", "3": "af4bb0a2-f70c-4673-b097-60708f757992"}}, "__type__": "1"}, "af4bb0a2-f70c-4673-b097-60708f757992": {"__data__": {"text": "has the state for that ID, it can agree to use it. Otherwise, the server will create a new session. See RFC 2246 for more information, page 23 and 30.\n\nResumption using session identifiers is supported by most web browsers when making HTTPS requests.\n\nFor Node.js, clients wait for the 'session' event to get the session data, and provide the data to the session option of a subsequent tls.connect() to reuse the session. Servers must implement handlers for the 'newSession' and 'resumeSession' events to save and restore the session data using the session ID as the lookup key to reuse sessions. To reuse sessions across load balancers or cluster workers, servers must use a shared session cache (such as Redis) in their session handlers.\n\nSession tickets#\nThe servers encrypt the entire session state and send it to the client as a \"ticket\". When reconnecting, the state is sent to the server in the initial connection. This mechanism avoids the need for a server-side session cache. If the server doesn't use the ticket, for any reason (failure to decrypt it, it's too old, etc.), it will create a new session and send a new ticket. See RFC 5077 for more information.\n\nResumption using session tickets is becoming commonly supported by many web browsers when making HTTPS requests.\n\nFor Node.js, clients use the same APIs for resumption with session identifiers as for resumption with session tickets. For debugging, if tls.TLSSocket.getTLSTicket() returns a value, the session data contains a ticket, otherwise it contains client-side session state.\n\nWith TLSv1.3, be aware that multiple tickets may be sent by the server, resulting in multiple 'session' events, see 'session' for more information.\n\nSingle process servers need no specific implementation to use session tickets. To use session tickets across server restarts or load balancers, servers must all have the same ticket keys. There are three 16-byte keys internally, but the tls API exposes them as a single 48-byte buffer for convenience.\n\nIt's possible to get the ticket keys by calling server.getTicketKeys() on one server instance and then distribute them, but it is more reasonable to securely generate 48 bytes of secure random data and set them with the ticketKeys option of tls.createServer(). The keys should be regularly regenerated and server's keys can be reset with server.setTicketKeys().\n\nSession ticket keys are cryptographic keys, and they must be stored securely. With TLS 1.2 and below, if they are compromised all sessions that used tickets encrypted with them can be decrypted. They should not be stored on disk, and they should be regenerated regularly.\n\nIf clients advertise support for tickets, the server will send them. The server can disable tickets by supplying require('node:constants').SSL_OP_NO_TICKET in secureOptions.\n\nBoth session identifiers and session tickets timeout, causing the server to create new sessions. The timeout can be configured with the sessionTimeout option of tls.createServer().\n\nFor all the mechanisms, when resumption fails, servers will create new sessions. Since failing to resume the session does not cause TLS/HTTPS connection failures, it is easy to not notice unnecessarily poor TLS performance. The OpenSSL CLI can be used to verify that servers are resuming sessions. Use the -reconnect option to openssl s_client, for example:\n\n$ openssl s_client -connect localhost:443 -reconnect\nRead through the debug output. The first connection should say \"New\", for example:\n\nNew, TLSv1.2, Cipher is ECDHE-RSA-AES128-GCM-SHA256\nSubsequent connections should say \"Reused\", for example:\n\nReused, TLSv1.2, Cipher is ECDHE-RSA-AES128-GCM-SHA256\nModifying the default TLS cipher suite#\nNode.js is built with a default suite of enabled and disabled TLS ciphers. This default cipher list can be configured when building Node.js to allow distributions to provide their own default list.\n\nThe following command can be used to show the default cipher", "doc_id": "af4bb0a2-f70c-4673-b097-60708f757992", "embedding": null, "doc_hash": "59cb2603238fce087aad4b756a3d04ba7841daa3db1add56457f4ff983bfb497", "extra_info": null, "node_info": {"start": 2432582, "end": 2436542}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "275357e0-dd39-4c48-a3b9-6d51db67cb28", "3": "321f6854-b985-465d-89f5-323ffac96eb8"}}, "__type__": "1"}, "321f6854-b985-465d-89f5-323ffac96eb8": {"__data__": {"text": "option to openssl s_client, for example:\n\n$ openssl s_client -connect localhost:443 -reconnect\nRead through the debug output. The first connection should say \"New\", for example:\n\nNew, TLSv1.2, Cipher is ECDHE-RSA-AES128-GCM-SHA256\nSubsequent connections should say \"Reused\", for example:\n\nReused, TLSv1.2, Cipher is ECDHE-RSA-AES128-GCM-SHA256\nModifying the default TLS cipher suite#\nNode.js is built with a default suite of enabled and disabled TLS ciphers. This default cipher list can be configured when building Node.js to allow distributions to provide their own default list.\n\nThe following command can be used to show the default cipher suite:\n\nnode -p crypto.constants.defaultCoreCipherList | tr ':' '\\n'\nTLS_AES_256_GCM_SHA384\nTLS_CHACHA20_POLY1305_SHA256\nTLS_AES_128_GCM_SHA256\nECDHE-RSA-AES128-GCM-SHA256\nECDHE-ECDSA-AES128-GCM-SHA256\nECDHE-RSA-AES256-GCM-SHA384\nECDHE-ECDSA-AES256-GCM-SHA384\nDHE-RSA-AES128-GCM-SHA256\nECDHE-RSA-AES128-SHA256\nDHE-RSA-AES128-SHA256\nECDHE-RSA-AES256-SHA384\nDHE-RSA-AES256-SHA384\nECDHE-RSA-AES256-SHA256\nDHE-RSA-AES256-SHA256\nHIGH\n!aNULL\n!eNULL\n!EXPORT\n!DES\n!RC4\n!MD5\n!PSK\n!SRP\n!CAMELLIA\nThis default can be replaced entirely using the --tls-cipher-list command-line switch (directly, or via the NODE_OPTIONS environment variable). For instance, the following makes ECDHE-RSA-AES128-GCM-SHA256:!RC4 the default TLS cipher suite:\n\nnode --tls-cipher-list='ECDHE-RSA-AES128-GCM-SHA256:!RC4' server.js\n\nexport NODE_OPTIONS=--tls-cipher-list='ECDHE-RSA-AES128-GCM-SHA256:!RC4'\nnode server.js\nTo verify, use the following command to show the set cipher list, note the difference between defaultCoreCipherList and defaultCipherList:\n\nnode --tls-cipher-list='ECDHE-RSA-AES128-GCM-SHA256:!RC4' -p crypto.constants.defaultCipherList | tr ':' '\\n'\nECDHE-RSA-AES128-GCM-SHA256\n!RC4\ni.e. the defaultCoreCipherList list is set at compilation time and the defaultCipherList is set at runtime.\n\nTo modify the default cipher suites from within the runtime, modify the tls.DEFAULT_CIPHERS variable, this must be performed before listening on any sockets, it will not affect sockets already opened. For example:\n\n// Remove Obsolete CBC Ciphers and RSA Key Exchange based Ciphers as they don't provide Forward Secrecy\ntls.DEFAULT_CIPHERS +=\n  ':!ECDHE-RSA-AES128-SHA:!ECDHE-RSA-AES128-SHA256:!ECDHE-RSA-AES256-SHA:!ECDHE-RSA-AES256-SHA384' +\n  ':!ECDHE-ECDSA-AES128-SHA:!ECDHE-ECDSA-AES128-SHA256:!ECDHE-ECDSA-AES256-SHA:!ECDHE-ECDSA-AES256-SHA384' +\n  ':!kRSA';\nThe default can also be replaced on a per client or server basis using the ciphers option from tls.createSecureContext(), which is also available in tls.createServer(),", "doc_id": "321f6854-b985-465d-89f5-323ffac96eb8", "embedding": null, "doc_hash": "61e4ea48ed921b48dc1938e14a2b219183cbbde2dcbe249abe902febf7a5d9b6", "extra_info": null, "node_info": {"start": 2436628, "end": 2439281}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "af4bb0a2-f70c-4673-b097-60708f757992", "3": "bf41b33d-8b63-44dd-a3bf-21313d7f95c8"}}, "__type__": "1"}, "bf41b33d-8b63-44dd-a3bf-21313d7f95c8": {"__data__": {"text": "Key Exchange based Ciphers as they don't provide Forward Secrecy\ntls.DEFAULT_CIPHERS +=\n  ':!ECDHE-RSA-AES128-SHA:!ECDHE-RSA-AES128-SHA256:!ECDHE-RSA-AES256-SHA:!ECDHE-RSA-AES256-SHA384' +\n  ':!ECDHE-ECDSA-AES128-SHA:!ECDHE-ECDSA-AES128-SHA256:!ECDHE-ECDSA-AES256-SHA:!ECDHE-ECDSA-AES256-SHA384' +\n  ':!kRSA';\nThe default can also be replaced on a per client or server basis using the ciphers option from tls.createSecureContext(), which is also available in tls.createServer(), tls.connect(), and when creating new tls.TLSSockets.\n\nThe ciphers list can contain a mixture of TLSv1.3 cipher suite names, the ones that start with 'TLS_', and specifications for TLSv1.2 and below cipher suites. The TLSv1.2 ciphers support a legacy specification format, consult the OpenSSL cipher list format documentation for details, but those specifications do not apply to TLSv1.3 ciphers. The TLSv1.3 suites can only be enabled by including their full name in the cipher list. They cannot, for example, be enabled or disabled by using the legacy TLSv1.2 'EECDH' or '!EECDH' specification.\n\nDespite the relative order of TLSv1.3 and TLSv1.2 cipher suites, the TLSv1.3 protocol is significantly more secure than TLSv1.2, and will always be chosen over TLSv1.2 if the handshake indicates it is supported, and if any TLSv1.3 cipher suites are enabled.\n\nThe default cipher suite included within Node.js has been carefully selected to reflect current security best practices and risk mitigation. Changing the default cipher suite can have a significant impact on the security of an application. The --tls-cipher-list switch and ciphers option should by used only if absolutely necessary.\n\nThe default cipher suite prefers GCM ciphers for Chrome's 'modern cryptography' setting and also prefers ECDHE and DHE ciphers for perfect forward secrecy, while offering some backward compatibility.\n\nOld clients that rely on insecure and deprecated RC4 or DES-based ciphers (like Internet Explorer 6) cannot complete the handshaking process with the default configuration. If these clients must be supported, the TLS recommendations may offer a compatible cipher suite. For more details on the format, see the OpenSSL cipher list format documentation.\n\nThere are only five TLSv1.3 cipher suites:\n\n'TLS_AES_256_GCM_SHA384'\n'TLS_CHACHA20_POLY1305_SHA256'\n'TLS_AES_128_GCM_SHA256'\n'TLS_AES_128_CCM_SHA256'\n'TLS_AES_128_CCM_8_SHA256'\nThe first three are enabled by default. The two CCM-based suites are supported by TLSv1.3 because they may be more performant on constrained systems, but they are not enabled by default since they offer less security.\n\nX509 certificate error codes#\nMultiple functions can fail due to certificate errors that are reported by OpenSSL. In such a case, the function provides an <Error> via its callback that has the property code which can take one of the following values:\n\n'UNABLE_TO_GET_ISSUER_CERT': Unable to get issuer certificate.\n'UNABLE_TO_GET_CRL': Unable to get certificate CRL.\n'UNABLE_TO_DECRYPT_CERT_SIGNATURE': Unable to decrypt certificate's signature.\n'UNABLE_TO_DECRYPT_CRL_SIGNATURE': Unable to decrypt CRL's signature.\n'UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY': Unable to decode", "doc_id": "bf41b33d-8b63-44dd-a3bf-21313d7f95c8", "embedding": null, "doc_hash": "e59c6c984145554b8f061b91ab3ba0b17fd7a95b36ec5a382994b97ba57804a0", "extra_info": null, "node_info": {"start": 2439407, "end": 2442596}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "321f6854-b985-465d-89f5-323ffac96eb8", "3": "3f769631-6159-4deb-9ba5-57b369ff1bf3"}}, "__type__": "1"}, "3f769631-6159-4deb-9ba5-57b369ff1bf3": {"__data__": {"text": "offer less security.\n\nX509 certificate error codes#\nMultiple functions can fail due to certificate errors that are reported by OpenSSL. In such a case, the function provides an <Error> via its callback that has the property code which can take one of the following values:\n\n'UNABLE_TO_GET_ISSUER_CERT': Unable to get issuer certificate.\n'UNABLE_TO_GET_CRL': Unable to get certificate CRL.\n'UNABLE_TO_DECRYPT_CERT_SIGNATURE': Unable to decrypt certificate's signature.\n'UNABLE_TO_DECRYPT_CRL_SIGNATURE': Unable to decrypt CRL's signature.\n'UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY': Unable to decode issuer public key.\n'CERT_SIGNATURE_FAILURE': Certificate signature failure.\n'CRL_SIGNATURE_FAILURE': CRL signature failure.\n'CERT_NOT_YET_VALID': Certificate is not yet valid.\n'CERT_HAS_EXPIRED': Certificate has expired.\n'CRL_NOT_YET_VALID': CRL is not yet valid.\n'CRL_HAS_EXPIRED': CRL has expired.\n'ERROR_IN_CERT_NOT_BEFORE_FIELD': Format error in certificate's notBefore field.\n'ERROR_IN_CERT_NOT_AFTER_FIELD': Format error in certificate's notAfter field.\n'ERROR_IN_CRL_LAST_UPDATE_FIELD': Format error in CRL's lastUpdate field.\n'ERROR_IN_CRL_NEXT_UPDATE_FIELD': Format error in CRL's nextUpdate field.\n'OUT_OF_MEM': Out of memory.\n'DEPTH_ZERO_SELF_SIGNED_CERT': Self signed certificate.\n'SELF_SIGNED_CERT_IN_CHAIN': Self signed certificate in certificate chain.\n'UNABLE_TO_GET_ISSUER_CERT_LOCALLY': Unable to get local issuer certificate.\n'UNABLE_TO_VERIFY_LEAF_SIGNATURE': Unable to verify the first certificate.\n'CERT_CHAIN_TOO_LONG': Certificate chain too long.\n'CERT_REVOKED': Certificate revoked.\n'INVALID_CA': Invalid CA certificate.\n'PATH_LENGTH_EXCEEDED': Path length constraint exceeded.\n'INVALID_PURPOSE': Unsupported certificate purpose.\n'CERT_UNTRUSTED': Certificate not trusted.\n'CERT_REJECTED': Certificate rejected.\n'HOSTNAME_MISMATCH': Hostname mismatch.\nClass: tls.CryptoStream#\nAdded in: v0.3.4Deprecated since: v0.11.3\nStability: 0 - Deprecated: Use tls.TLSSocket instead.\nThe tls.CryptoStream class represents a stream of encrypted data. This class is deprecated and should no longer be used.\n\ncryptoStream.bytesWritten#\nAdded in: v0.3.4Deprecated since: v0.11.3\nThe cryptoStream.bytesWritten property returns the total number of bytes written to the underlying socket including the bytes required for the implementation of the TLS protocol.\n\nClass: tls.SecurePair#\nAdded in: v0.3.2Deprecated since: v0.11.3\nStability: 0 - Deprecated: Use tls.TLSSocket instead.\nReturned by tls.createSecurePair().\n\nEvent: 'secure'#\nAdded in: v0.3.2Deprecated since: v0.11.3\nThe 'secure' event is emitted by the SecurePair object once a secure connection has been established.\n\nAs with checking for the server 'secureConnection' event, pair.cleartext.authorized should be inspected to confirm whether the certificate used is properly authorized.\n\nClass: tls.Server#\nAdded in: v0.3.2\nExtends: <net.Server>\nAccepts encrypted connections using TLS or SSL.\n\nEvent: 'connection'#\nAdded in:", "doc_id": "3f769631-6159-4deb-9ba5-57b369ff1bf3", "embedding": null, "doc_hash": "a627f63f90fea145d5ec531d9b88ae9c6352ac5a6fdd9c263497cfda485dc61e", "extra_info": null, "node_info": {"start": 2442506, "end": 2445492}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "bf41b33d-8b63-44dd-a3bf-21313d7f95c8", "3": "f0960cab-a321-4042-abcb-811fe6f01e4c"}}, "__type__": "1"}, "f0960cab-a321-4042-abcb-811fe6f01e4c": {"__data__": {"text": "in: v0.3.2Deprecated since: v0.11.3\nStability: 0 - Deprecated: Use tls.TLSSocket instead.\nReturned by tls.createSecurePair().\n\nEvent: 'secure'#\nAdded in: v0.3.2Deprecated since: v0.11.3\nThe 'secure' event is emitted by the SecurePair object once a secure connection has been established.\n\nAs with checking for the server 'secureConnection' event, pair.cleartext.authorized should be inspected to confirm whether the certificate used is properly authorized.\n\nClass: tls.Server#\nAdded in: v0.3.2\nExtends: <net.Server>\nAccepts encrypted connections using TLS or SSL.\n\nEvent: 'connection'#\nAdded in: v0.3.2\nsocket <stream.Duplex>\nThis event is emitted when a new TCP stream is established, before the TLS handshake begins. socket is typically an object of type net.Socket but will not receive events unlike the socket created from the net.Server 'connection' event. Usually users will not want to access this event.\n\nThis event can also be explicitly emitted by users to inject connections into the TLS server. In that case, any Duplex stream can be passed.\n\nEvent: 'keylog'#\nAdded in: v12.3.0, v10.20.0\nline <Buffer> Line of ASCII text, in NSS SSLKEYLOGFILE format.\ntlsSocket <tls.TLSSocket> The tls.TLSSocket instance on which it was generated.\nThe keylog event is emitted when key material is generated or received by a connection to this server (typically before handshake has completed, but not necessarily). This keying material can be stored for debugging, as it allows captured TLS traffic to be decrypted. It may be emitted multiple times for each socket.\n\nA typical use case is to append received lines to a common text file, which is later used by software (such as Wireshark) to decrypt the traffic:\n\nconst logFile = fs.createWriteStream('/tmp/ssl-keys.log', { flags: 'a' });\n// ...\nserver.on('keylog', (line, tlsSocket) => {\n  if (tlsSocket.remoteAddress !== '...')\n    return; // Only log keys for a particular IP\n  logFile.write(line);\n});\nEvent: 'newSession'#\nHistory\nThe 'newSession' event is emitted upon creation of a new TLS session. This may be used to store sessions in external storage. The data should be provided to the 'resumeSession' callback.\n\nThe listener callback is passed three arguments when called:\n\nsessionId <Buffer> The TLS session identifier\nsessionData <Buffer> The TLS session data\ncallback <Function> A callback function taking no arguments that must be invoked in order for data to be sent or received over the secure connection.\nListening for this event will have an effect only on connections established after the addition of the event listener.\n\nEvent: 'OCSPRequest'#\nAdded in: v0.11.13\nThe 'OCSPRequest' event is emitted when the client sends a certificate status request. The listener callback is passed three arguments when called:\n\ncertificate <Buffer> The server certificate\nissuer <Buffer> The issuer's certificate\ncallback <Function> A callback function that must be invoked to provide the results of the OCSP request.\nThe server's current certificate can be parsed to obtain the OCSP URL and certificate ID; after obtaining an OCSP response, callback(null, resp) is then invoked, where resp is a Buffer instance containing the OCSP response. Both certificate and issuer are Buffer DER-representations of the primary and issuer's certificates. These can be used to obtain the OCSP certificate ID and OCSP endpoint URL.\n\nAlternatively, callback(null, null) may be called, indicating that there was no OCSP response.\n\nCalling callback(err) will result in a socket.destroy(err) call.\n\nThe typical flow of an OCSP request is as follows:\n\nClient connects to the server and sends an 'OCSPRequest' (via the status info extension in", "doc_id": "f0960cab-a321-4042-abcb-811fe6f01e4c", "embedding": null, "doc_hash": "ebc39a1cf05bfb220758b53d26113f0daf9e13936054840c8f6f0fedaf09bc49", "extra_info": null, "node_info": {"start": 2445488, "end": 2449161}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3f769631-6159-4deb-9ba5-57b369ff1bf3", "3": "94fd537a-2814-4a1d-aaac-6c4c702a9e0b"}}, "__type__": "1"}, "94fd537a-2814-4a1d-aaac-6c4c702a9e0b": {"__data__": {"text": "to provide the results of the OCSP request.\nThe server's current certificate can be parsed to obtain the OCSP URL and certificate ID; after obtaining an OCSP response, callback(null, resp) is then invoked, where resp is a Buffer instance containing the OCSP response. Both certificate and issuer are Buffer DER-representations of the primary and issuer's certificates. These can be used to obtain the OCSP certificate ID and OCSP endpoint URL.\n\nAlternatively, callback(null, null) may be called, indicating that there was no OCSP response.\n\nCalling callback(err) will result in a socket.destroy(err) call.\n\nThe typical flow of an OCSP request is as follows:\n\nClient connects to the server and sends an 'OCSPRequest' (via the status info extension in ClientHello).\nServer receives the request and emits the 'OCSPRequest' event, calling the listener if registered.\nServer extracts the OCSP URL from either the certificate or issuer and performs an OCSP request to the CA.\nServer receives 'OCSPResponse' from the CA and sends it back to the client via the callback argument\nClient validates the response and either destroys the socket or performs a handshake.\nThe issuer can be null if the certificate is either self-signed or the issuer is not in the root certificates list. (An issuer may be provided via the ca option when establishing the TLS connection.)\n\nListening for this event will have an effect only on connections established after the addition of the event listener.\n\nAn npm module like asn1.js may be used to parse the certificates.\n\nEvent: 'resumeSession'#\nAdded in: v0.9.2\nThe 'resumeSession' event is emitted when the client requests to resume a previous TLS session. The listener callback is passed two arguments when called:\n\nsessionId <Buffer> The TLS session identifier\ncallback <Function> A callback function to be called when the prior session has been recovered: callback([err[, sessionData]])\nerr <Error>\nsessionData <Buffer>\nThe event listener should perform a lookup in external storage for the sessionData saved by the 'newSession' event handler using the given sessionId. If found, call callback(null, sessionData) to resume the session. If not found, the session cannot be resumed. callback() must be called without sessionData so that the handshake can continue and a new session can be created. It is possible to call callback(err) to terminate the incoming connection and destroy the socket.\n\nListening for this event will have an effect only on connections established after the addition of the event listener.\n\nThe following illustrates resuming a TLS session:\n\nconst tlsSessionStore = {};\nserver.on('newSession', (id, data, cb) => {\n  tlsSessionStore[id.toString('hex')] = data;\n  cb();\n});\nserver.on('resumeSession', (id, cb) => {\n  cb(null, tlsSessionStore[id.toString('hex')] || null);\n});\nEvent: 'secureConnection'#\nAdded in: v0.3.2\nThe 'secureConnection' event is emitted after the handshaking process for a new connection has successfully completed. The listener callback is passed a single argument when called:\n\ntlsSocket <tls.TLSSocket> The established TLS socket.\nThe tlsSocket.authorized property is a boolean indicating whether the client has been verified by one of the supplied Certificate Authorities for the server. If tlsSocket.authorized is false, then socket.authorizationError is set to describe how authorization failed. Depending on the settings of the TLS server, unauthorized connections may still be accepted.\n\nThe tlsSocket.alpnProtocol property is a string that contains the selected ALPN protocol. When ALPN has no selected protocol, tlsSocket.alpnProtocol equals false.\n\nThe tlsSocket.servername property is a string containing the server name requested via SNI.\n\nEvent: 'tlsClientError'#\nAdded in: v6.0.0\nThe 'tlsClientError' event is emitted when an error occurs before a secure connection is established. The listener callback is", "doc_id": "94fd537a-2814-4a1d-aaac-6c4c702a9e0b", "embedding": null, "doc_hash": "967d2ce3bd835295d2ed673fd85cfab569f88209a3145e76daeffb8fc78e5f4a", "extra_info": null, "node_info": {"start": 2449055, "end": 2452949}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f0960cab-a321-4042-abcb-811fe6f01e4c", "3": "e948a1f4-ec7a-4b6e-9905-6694b5d01514"}}, "__type__": "1"}, "e948a1f4-ec7a-4b6e-9905-6694b5d01514": {"__data__": {"text": "property is a boolean indicating whether the client has been verified by one of the supplied Certificate Authorities for the server. If tlsSocket.authorized is false, then socket.authorizationError is set to describe how authorization failed. Depending on the settings of the TLS server, unauthorized connections may still be accepted.\n\nThe tlsSocket.alpnProtocol property is a string that contains the selected ALPN protocol. When ALPN has no selected protocol, tlsSocket.alpnProtocol equals false.\n\nThe tlsSocket.servername property is a string containing the server name requested via SNI.\n\nEvent: 'tlsClientError'#\nAdded in: v6.0.0\nThe 'tlsClientError' event is emitted when an error occurs before a secure connection is established. The listener callback is passed two arguments when called:\n\nexception <Error> The Error object describing the error\ntlsSocket <tls.TLSSocket> The tls.TLSSocket instance from which the error originated.\nserver.addContext(hostname, context)#\nAdded in: v0.5.3\nhostname <string> A SNI host name or wildcard (e.g. '*')\ncontext <Object> An object containing any of the possible properties from the tls.createSecureContext() options arguments (e.g. key, cert, ca, etc).\nThe server.addContext() method adds a secure context that will be used if the client request's SNI name matches the supplied hostname (or wildcard).\n\nWhen there are multiple matching contexts, the most recently added one is used.\n\nserver.address()#\nAdded in: v0.6.0\nReturns: <Object>\nReturns the bound address, the address family name, and port of the server as reported by the operating system. See net.Server.address() for more information.\n\nserver.close([callback])#\nAdded in: v0.3.2\ncallback <Function> A listener callback that will be registered to listen for the server instance's 'close' event.\nReturns: <tls.Server>\nThe server.close() method stops the server from accepting new connections.\n\nThis function operates asynchronously. The 'close' event will be emitted when the server has no more open connections.\n\nserver.getTicketKeys()#\nAdded in: v3.0.0\nReturns: <Buffer> A 48-byte buffer containing the session ticket keys.\nReturns the session ticket keys.\n\nSee Session Resumption for more information.\n\nserver.listen()#\nStarts the server listening for encrypted connections. This method is identical to server.listen() from net.Server.\n\nserver.setSecureContext(options)#\nAdded in: v11.0.0\noptions <Object> An object containing any of the possible properties from the tls.createSecureContext() options arguments (e.g. key, cert, ca, etc).\nThe server.setSecureContext() method replaces the secure context of an existing server. Existing connections to the server are not interrupted.\n\nserver.setTicketKeys(keys)#\nAdded in: v3.0.0\nkeys <Buffer> | <TypedArray> | <DataView> A 48-byte buffer containing the session ticket keys.\nSets the session ticket keys.\n\nChanges to the ticket keys are effective only for future server connections. Existing or currently pending server connections will use the previous keys.\n\nSee Session Resumption for more information.\n\nClass: tls.TLSSocket#\nAdded in: v0.11.4\nExtends: <net.Socket>\nPerforms transparent encryption of written data and all required TLS negotiation.\n\nInstances of tls.TLSSocket implement the duplex Stream interface.\n\nMethods that return TLS connection metadata (e.g. tls.TLSSocket.getPeerCertificate()) will only return data while the connection is open.\n\nnew tls.TLSSocket(socket[, options])#\nHistory\nsocket <net.Socket> | <stream.Duplex> On the server side, any Duplex stream. On the client side, any instance of net.Socket (for generic Duplex stream support on the client side, tls.connect() must be used).\noptions <Object>\nenableTrace: See", "doc_id": "e948a1f4-ec7a-4b6e-9905-6694b5d01514", "embedding": null, "doc_hash": "4f33bc306a81ed3c46133706a99018a131889385204505b7fb3cb52abf501733", "extra_info": null, "node_info": {"start": 2452927, "end": 2456630}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "94fd537a-2814-4a1d-aaac-6c4c702a9e0b", "3": "b56a46fe-d22d-48de-b632-2115f8a48662"}}, "__type__": "1"}, "b56a46fe-d22d-48de-b632-2115f8a48662": {"__data__": {"text": "information.\n\nClass: tls.TLSSocket#\nAdded in: v0.11.4\nExtends: <net.Socket>\nPerforms transparent encryption of written data and all required TLS negotiation.\n\nInstances of tls.TLSSocket implement the duplex Stream interface.\n\nMethods that return TLS connection metadata (e.g. tls.TLSSocket.getPeerCertificate()) will only return data while the connection is open.\n\nnew tls.TLSSocket(socket[, options])#\nHistory\nsocket <net.Socket> | <stream.Duplex> On the server side, any Duplex stream. On the client side, any instance of net.Socket (for generic Duplex stream support on the client side, tls.connect() must be used).\noptions <Object>\nenableTrace: See tls.createServer()\nisServer: The SSL/TLS protocol is asymmetrical, TLSSockets must know if they are to behave as a server or a client. If true the TLS socket will be instantiated as a server. Default: false.\nserver <net.Server> A net.Server instance.\nrequestCert: Whether to authenticate the remote peer by requesting a certificate. Clients always request a server certificate. Servers (isServer is true) may set requestCert to true to request a client certificate.\nrejectUnauthorized: See tls.createServer()\nALPNProtocols: See tls.createServer()\nSNICallback: See tls.createServer()\nsession <Buffer> A Buffer instance containing a TLS session.\nrequestOCSP <boolean> If true, specifies that the OCSP status request extension will be added to the client hello and an 'OCSPResponse' event will be emitted on the socket before establishing a secure communication\nsecureContext: TLS context object created with tls.createSecureContext(). If a secureContext is not provided, one will be created by passing the entire options object to tls.createSecureContext().\n...: tls.createSecureContext() options that are used if the secureContext option is missing. Otherwise, they are ignored.\nConstruct a new tls.TLSSocket object from an existing TCP socket.\n\nEvent: 'keylog'#\nAdded in: v12.3.0, v10.20.0\nline <Buffer> Line of ASCII text, in NSS SSLKEYLOGFILE format.\nThe keylog event is emitted on a tls.TLSSocket when key material is generated or received by the socket. This keying material can be stored for debugging, as it allows captured TLS traffic to be decrypted. It may be emitted multiple times, before or after the handshake completes.\n\nA typical use case is to append received lines to a common text file, which is later used by software (such as Wireshark) to decrypt the traffic:\n\nconst logFile = fs.createWriteStream('/tmp/ssl-keys.log', { flags: 'a' });\n// ...\ntlsSocket.on('keylog', (line) => logFile.write(line));\nEvent: 'OCSPResponse'#\nAdded in: v0.11.13\nThe 'OCSPResponse' event is emitted if the requestOCSP option was set when the tls.TLSSocket was created and an OCSP response has been received. The listener callback is passed a single argument when called:\n\nresponse <Buffer> The server's OCSP response\nTypically, the response is a digitally signed object from the server's CA that contains information about server's certificate revocation status.\n\nEvent: 'secureConnect'#\nAdded in: v0.11.4\nThe 'secureConnect' event is emitted after the handshaking process for a new connection has successfully completed. The listener callback will be called regardless of whether or not the server's certificate has been authorized. It is the client's responsibility to check the tlsSocket.authorized property to determine if the server certificate was signed by one of the specified CAs. If tlsSocket.authorized === false, then the error can be found by examining the tlsSocket.authorizationError property. If ALPN was used, the tlsSocket.alpnProtocol property can be checked to determine the negotiated protocol.\n\nThe 'secureConnect' event is not emitted when a <tls.TLSSocket> is created using", "doc_id": "b56a46fe-d22d-48de-b632-2115f8a48662", "embedding": null, "doc_hash": "8511def9c835af98f8ba3df94c6531adec1d0b79ad4197c08e23ae398b7655fa", "extra_info": null, "node_info": {"start": 2456713, "end": 2460461}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e948a1f4-ec7a-4b6e-9905-6694b5d01514", "3": "19564b9e-2bf3-4ef4-8590-90d7b3c547a7"}}, "__type__": "1"}, "19564b9e-2bf3-4ef4-8590-90d7b3c547a7": {"__data__": {"text": "certificate revocation status.\n\nEvent: 'secureConnect'#\nAdded in: v0.11.4\nThe 'secureConnect' event is emitted after the handshaking process for a new connection has successfully completed. The listener callback will be called regardless of whether or not the server's certificate has been authorized. It is the client's responsibility to check the tlsSocket.authorized property to determine if the server certificate was signed by one of the specified CAs. If tlsSocket.authorized === false, then the error can be found by examining the tlsSocket.authorizationError property. If ALPN was used, the tlsSocket.alpnProtocol property can be checked to determine the negotiated protocol.\n\nThe 'secureConnect' event is not emitted when a <tls.TLSSocket> is created using the new tls.TLSSocket() constructor.\n\nEvent: 'session'#\nAdded in: v11.10.0\nsession <Buffer>\nThe 'session' event is emitted on a client tls.TLSSocket when a new session or TLS ticket is available. This may or may not be before the handshake is complete, depending on the TLS protocol version that was negotiated. The event is not emitted on the server, or if a new session was not created, for example, when the connection was resumed. For some TLS protocol versions the event may be emitted multiple times, in which case all the sessions can be used for resumption.\n\nOn the client, the session can be provided to the session option of tls.connect() to resume the connection.\n\nSee Session Resumption for more information.\n\nFor TLSv1.2 and below, tls.TLSSocket.getSession() can be called once the handshake is complete. For TLSv1.3, only ticket-based resumption is allowed by the protocol, multiple tickets are sent, and the tickets aren't sent until after the handshake completes. So it is necessary to wait for the 'session' event to get a resumable session. Applications should use the 'session' event instead of getSession() to ensure they will work for all TLS versions. Applications that only expect to get or use one session should listen for this event only once:\n\ntlsSocket.once('session', (session) => {\n  // The session can be used immediately or later.\n  tls.connect({\n    session: session,\n    // Other connect options...\n  });\n});\ntlsSocket.address()#\nHistory\nReturns: <Object>\nReturns the bound address, the address family name, and port of the underlying socket as reported by the operating system: { port: 12346, family: 'IPv4', address: '127.0.0.1' }.\n\ntlsSocket.authorizationError#\nAdded in: v0.11.4\nReturns the reason why the peer's certificate was not been verified. This property is set only when tlsSocket.authorized === false.\n\ntlsSocket.authorized#\nAdded in: v0.11.4\n<boolean>\nThis property is true if the peer certificate was signed by one of the CAs specified when creating the tls.TLSSocket instance, otherwise false.\n\ntlsSocket.disableRenegotiation()#\nAdded in: v8.4.0\nDisables TLS renegotiation for this TLSSocket instance. Once called, attempts to renegotiate will trigger an 'error' event on the TLSSocket.\n\ntlsSocket.enableTrace()#\nAdded in: v12.2.0\nWhen enabled, TLS packet trace information is written to stderr. This can be used to debug TLS connection problems.\n\nThe format of the output is identical to the output of openssl s_client -trace or openssl s_server -trace. While it is produced by OpenSSL's SSL_trace() function, the format is undocumented, can change without notice, and should not be relied on.\n\ntlsSocket.encrypted#\nAdded in: v0.11.4\nAlways returns true. This may be used to distinguish TLS sockets from regular net.Socket instances.\n\ntlsSocket.exportKeyingMaterial(length, label[, context])#\nAdded in: v13.10.0, v12.17.0\nlength <number> number of bytes to retrieve from", "doc_id": "19564b9e-2bf3-4ef4-8590-90d7b3c547a7", "embedding": null, "doc_hash": "2692c65bae4ad15806182de97259302fcda4c66dd3c87270044a976f4f0d7ead", "extra_info": null, "node_info": {"start": 2460379, "end": 2464066}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b56a46fe-d22d-48de-b632-2115f8a48662", "3": "1a800b79-316f-4abf-91ec-e06f3791c39c"}}, "__type__": "1"}, "1a800b79-316f-4abf-91ec-e06f3791c39c": {"__data__": {"text": "in: v12.2.0\nWhen enabled, TLS packet trace information is written to stderr. This can be used to debug TLS connection problems.\n\nThe format of the output is identical to the output of openssl s_client -trace or openssl s_server -trace. While it is produced by OpenSSL's SSL_trace() function, the format is undocumented, can change without notice, and should not be relied on.\n\ntlsSocket.encrypted#\nAdded in: v0.11.4\nAlways returns true. This may be used to distinguish TLS sockets from regular net.Socket instances.\n\ntlsSocket.exportKeyingMaterial(length, label[, context])#\nAdded in: v13.10.0, v12.17.0\nlength <number> number of bytes to retrieve from keying material\n\nlabel <string> an application specific label, typically this will be a value from the IANA Exporter Label Registry.\n\ncontext <Buffer> Optionally provide a context.\n\nReturns: <Buffer> requested bytes of the keying material\n\nKeying material is used for validations to prevent different kind of attacks in network protocols, for example in the specifications of IEEE 802.1X.\n\nExample\n\nconst keyingMaterial = tlsSocket.exportKeyingMaterial(\n  128,\n  'client finished');\n\n/*\n Example return value of keyingMaterial:\n <Buffer 76 26 af 99 c5 56 8e 42 09 91 ef 9f 93 cb ad 6c 7b 65 f8 53 f1 d8 d9\n    12 5a 33 b8 b5 25 df 7b 37 9f e0 e2 4f b8 67 83 a3 2f cd 5d 41 42 4c 91\n    74 ef 2c ... 78 more bytes>\n*/\nSee the OpenSSL SSL_export_keying_material documentation for more information.\n\ntlsSocket.getCertificate()#\nAdded in: v11.2.0\nReturns: <Object>\nReturns an object representing the local certificate. The returned object has some properties corresponding to the fields of the certificate.\n\nSee tls.TLSSocket.getPeerCertificate() for an example of the certificate structure.\n\nIf there is no local certificate, an empty object will be returned. If the socket has been destroyed, null will be returned.\n\ntlsSocket.getCipher()#\nHistory\nReturns: <Object>\nname <string> OpenSSL name for the cipher suite.\nstandardName <string> IETF name for the cipher suite.\nversion <string> The minimum TLS protocol version supported by this cipher suite. For the actual negotiated protocol, see tls.TLSSocket.getProtocol().\nReturns an object containing information on the negotiated cipher suite.\n\nFor example, a TLSv1.2 protocol with AES256-SHA cipher:\n\n{\n    \"name\": \"AES256-SHA\",\n    \"standardName\": \"TLS_RSA_WITH_AES_256_CBC_SHA\",\n    \"version\": \"SSLv3\"\n}\nSee SSL_CIPHER_get_name for more information.\n\ntlsSocket.getEphemeralKeyInfo()#\nAdded in: v5.0.0\nReturns: <Object>\nReturns an object representing the type, name, and size of parameter of an ephemeral key exchange in perfect forward secrecy on a client connection. It returns an empty object when the key exchange is not ephemeral. As this is only supported on a client socket; null is returned if called on a server socket. The supported types are 'DH' and 'ECDH'. The name property is available only when type is 'ECDH'.\n\nFor example: { type: 'ECDH', name: 'prime256v1', size: 256 }.\n\ntlsSocket.getFinished()#\nAdded in: v9.9.0\nReturns: <Buffer> | <undefined> The latest Finished message that has been sent to the socket as part of a SSL/TLS handshake, or undefined if no Finished message has been sent yet.\nAs the Finished messages are message digests of the complete handshake (with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can be used for external", "doc_id": "1a800b79-316f-4abf-91ec-e06f3791c39c", "embedding": null, "doc_hash": "26a6fd51dba6ea23d98ade6d01bdf4b62ecc0042b02cafb9fbdd92b9a7871498", "extra_info": null, "node_info": {"start": 2464164, "end": 2467540}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "19564b9e-2bf3-4ef4-8590-90d7b3c547a7", "3": "60c92978-bbb9-42ca-948e-8dee1647a031"}}, "__type__": "1"}, "60c92978-bbb9-42ca-948e-8dee1647a031": {"__data__": {"text": "empty object when the key exchange is not ephemeral. As this is only supported on a client socket; null is returned if called on a server socket. The supported types are 'DH' and 'ECDH'. The name property is available only when type is 'ECDH'.\n\nFor example: { type: 'ECDH', name: 'prime256v1', size: 256 }.\n\ntlsSocket.getFinished()#\nAdded in: v9.9.0\nReturns: <Buffer> | <undefined> The latest Finished message that has been sent to the socket as part of a SSL/TLS handshake, or undefined if no Finished message has been sent yet.\nAs the Finished messages are message digests of the complete handshake (with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can be used for external authentication procedures when the authentication provided by SSL/TLS is not desired or is not enough.\n\nCorresponds to the SSL_get_finished routine in OpenSSL and may be used to implement the tls-unique channel binding from RFC 5929.\n\ntlsSocket.getPeerCertificate([detailed])#\nAdded in: v0.11.4\ndetailed <boolean> Include the full certificate chain if true, otherwise include just the peer's certificate.\nReturns: <Object> A certificate object.\nReturns an object representing the peer's certificate. If the peer does not provide a certificate, an empty object will be returned. If the socket has been destroyed, null will be returned.\n\nIf the full certificate chain was requested, each certificate will include an issuerCertificate property containing an object representing its issuer's certificate.\n\nCertificate object#\nHistory\nA certificate object has properties corresponding to the fields of the certificate.\n\nca <boolean> true if a Certificate Authority (CA), false otherwise.\nraw <Buffer> The DER encoded X.509 certificate data.\nsubject <Object> The certificate subject, described in terms of Country (C), StateOrProvince (ST), Locality (L), Organization (O), OrganizationalUnit (OU), and CommonName (CN). The CommonName is typically a DNS name with TLS certificates. Example: {C: 'UK', ST: 'BC', L: 'Metro', O: 'Node Fans', OU: 'Docs', CN: 'example.com'}.\nissuer <Object> The certificate issuer, described in the same terms as the subject.\nvalid_from <string> The date-time the certificate is valid from.\nvalid_to <string> The date-time the certificate is valid to.\nserialNumber <string> The certificate serial number, as a hex string. Example: 'B9B0D332A1AA5635'.\nfingerprint <string> The SHA-1 digest of the DER encoded certificate. It is returned as a : separated hexadecimal string. Example: '2A:7A:C2:DD:...'.\nfingerprint256 <string> The SHA-256 digest of the DER encoded certificate. It is returned as a : separated hexadecimal string. Example: '2A:7A:C2:DD:...'.\nfingerprint512 <string> The SHA-512 digest of the DER encoded certificate. It is returned as a : separated hexadecimal string. Example: '2A:7A:C2:DD:...'.\next_key_usage <Array> (Optional) The extended key usage, a set of OIDs.\nsubjectaltname <string> (Optional) A string containing concatenated names for the subject, an alternative to the subject names.\ninfoAccess <Array> (Optional) An array describing the AuthorityInfoAccess, used with OCSP.\nissuerCertificate <Object> (Optional) The issuer certificate object. For self-signed certificates, this may be a circular reference.\nThe certificate may contain information about the public key, depending on the key type.\n\nFor RSA keys, the following properties may be defined:\n\nbits <number> The RSA bit size. Example: 1024.\nexponent <string> The RSA exponent, as a string in hexadecimal number notation. Example: '0x010001'.\nmodulus <string> The RSA modulus, as a hexadecimal", "doc_id": "60c92978-bbb9-42ca-948e-8dee1647a031", "embedding": null, "doc_hash": "96a883bbc3204e935b2160757ecd2139a56f3c8f5522dd53baf53b430047bac2", "extra_info": null, "node_info": {"start": 2467530, "end": 2471123}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1a800b79-316f-4abf-91ec-e06f3791c39c", "3": "e4be4985-4247-45c6-8261-6fbcdaae509c"}}, "__type__": "1"}, "e4be4985-4247-45c6-8261-6fbcdaae509c": {"__data__": {"text": "a set of OIDs.\nsubjectaltname <string> (Optional) A string containing concatenated names for the subject, an alternative to the subject names.\ninfoAccess <Array> (Optional) An array describing the AuthorityInfoAccess, used with OCSP.\nissuerCertificate <Object> (Optional) The issuer certificate object. For self-signed certificates, this may be a circular reference.\nThe certificate may contain information about the public key, depending on the key type.\n\nFor RSA keys, the following properties may be defined:\n\nbits <number> The RSA bit size. Example: 1024.\nexponent <string> The RSA exponent, as a string in hexadecimal number notation. Example: '0x010001'.\nmodulus <string> The RSA modulus, as a hexadecimal string. Example: 'B56CE45CB7...'.\npubkey <Buffer> The public key.\nFor EC keys, the following properties may be defined:\n\npubkey <Buffer> The public key.\nbits <number> The key size in bits. Example: 256.\nasn1Curve <string> (Optional) The ASN.1 name of the OID of the elliptic curve. Well-known curves are identified by an OID. While it is unusual, it is possible that the curve is identified by its mathematical properties, in which case it will not have an OID. Example: 'prime256v1'.\nnistCurve <string> (Optional) The NIST name for the elliptic curve, if it has one (not all well-known curves have been assigned names by NIST). Example: 'P-256'.\nExample certificate:\n\n{ subject:\n   { OU: [ 'Domain Control Validated', 'PositiveSSL Wildcard' ],\n     CN: '*.nodejs.org' },\n  issuer:\n   { C: 'GB',\n     ST: 'Greater Manchester',\n     L: 'Salford',\n     O: 'COMODO CA Limited',\n     CN: 'COMODO RSA Domain Validation Secure Server CA' },\n  subjectaltname: 'DNS:*.nodejs.org, DNS:nodejs.org',\n  infoAccess:\n   { 'CA Issuers - URI':\n      [ 'http://crt.comodoca.com/COMODORSADomainValidationSecureServerCA.crt' ],\n     'OCSP - URI': [ 'http://ocsp.comodoca.com' ] },\n  modulus:", "doc_id": "e4be4985-4247-45c6-8261-6fbcdaae509c", "embedding": null, "doc_hash": "8ccabda51fed3442caf4601e3bfeb9dd5b72304eaa7c47a4f32906d3791ba13c", "extra_info": null, "node_info": {"start": 2471082, "end": 2472966}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "60c92978-bbb9-42ca-948e-8dee1647a031", "3": "c57b9855-4cfe-4412-a922-49a3aa16ee4c"}}, "__type__": "1"}, "c57b9855-4cfe-4412-a922-49a3aa16ee4c": {"__data__": {"text": "    CN: '*.nodejs.org' },\n  issuer:\n   { C: 'GB',\n     ST: 'Greater Manchester',\n     L: 'Salford',\n     O: 'COMODO CA Limited',\n     CN: 'COMODO RSA Domain Validation Secure Server CA' },\n  subjectaltname: 'DNS:*.nodejs.org, DNS:nodejs.org',\n  infoAccess:\n   { 'CA Issuers - URI':\n      [ 'http://crt.comodoca.com/COMODORSADomainValidationSecureServerCA.crt' ],\n     'OCSP - URI': [ 'http://ocsp.comodoca.com' ] },\n  modulus: 'B56CE45CB740B09A13F64AC543B712FF9EE8E4C284B542A1708A27E82A8D151CA178153E12E6DDA15BF70FFD96CB8A88618641BDFCCA03527E665B70D779C8A349A6F88FD4EF6557180BD4C98192872BCFE3AF56E863C09DDD8BC1EC58DF9D94F914F0369102B2870BECFA1348A0838C9C49BD1C20124B442477572347047506B1FCD658A80D0C44BCC16BC5C5496CFE6E4A8428EF654CD3D8972BF6E5BFAD59C93006830B5EB1056BBB38B53D1464FA6E02BFDF2FF66CD949486F0775EC43034EC2602AEFBF1703AD221DAA2A88353C3B6A688EFE8387811F645CEED7B3FE46E1F8B9F59FAD028F349B9BC14211D5830994D055EEA3D547911E07A0ADDEB8A82B9188E58720D95CD478EEC9AF1F17BE8141BE80906F1A339445A7EB5B285F68039B0F294598A7D1C0005FC22B5271B0752F58CCDEF8C8FD856FB7AE21C80B8A2CE983AE94046E53EDE4CB89F42502D31B5360771C01C80155918637490550E3F555E2EE75CC8C636DDE3633CFEDD62E91BF0F7688273694EEEBA20C2FC9F14A2A435517BC1D7373922463409AB603295CEB0BB53787A334C9CA3CA8B30005C5A62FC0715083462E00719A8FA3ED0A9828C3871360A73F8B04A4FC1E71302844E9BB9940B77E745C9D91F226D71AFCAD4B113AAF68D92B24DDB4A2136B55A1CD1ADF39605B63CB639038ED0F4C987689866743A68769CC55847E4A06D6E2E3F1',\n  exponent: '0x10001',\n  pubkey: <Buffer ... >,\n  valid_from: 'Aug 14 00:00:00 2017 GMT',\n  valid_to: 'Nov 20 23:59:59 2019 GMT',\n  fingerprint: '01:02:59:D9:C3:D2:0D:08:F7:82:4E:44:A4:B4:53:C5:E2:3A:87:4D',\n  fingerprint256: '69:AE:1A:6A:D4:3D:C6:C1:1B:EA:C6:23:DE:BA:2A:14:62:62:93:5C:7A:EA:06:41:9B:0B:BC:87:CE:48:4E:02',\n  fingerprint512:", "doc_id": "c57b9855-4cfe-4412-a922-49a3aa16ee4c", "embedding": null, "doc_hash": "74d1e0d753b67949979302e6d8f714393c6d98c5e925bf5e2f436b0fcca63178", "extra_info": null, "node_info": {"start": 2473241, "end": 2475038}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e4be4985-4247-45c6-8261-6fbcdaae509c", "3": "2ee7ec9e-c484-455a-8b1c-facd32dfb71d"}}, "__type__": "1"}, "2ee7ec9e-c484-455a-8b1c-facd32dfb71d": {"__data__": {"text": " pubkey: <Buffer ... >,\n  valid_from: 'Aug 14 00:00:00 2017 GMT',\n  valid_to: 'Nov 20 23:59:59 2019 GMT',\n  fingerprint: '01:02:59:D9:C3:D2:0D:08:F7:82:4E:44:A4:B4:53:C5:E2:3A:87:4D',\n  fingerprint256: '69:AE:1A:6A:D4:3D:C6:C1:1B:EA:C6:23:DE:BA:2A:14:62:62:93:5C:7A:EA:06:41:9B:0B:BC:87:CE:48:4E:02',\n  fingerprint512: '19:2B:3E:C3:B3:5B:32:E8:AE:BB:78:97:27:E4:BA:6C:39:C9:92:79:4F:31:46:39:E2:70:E5:5F:89:42:17:C9:E8:64:CA:FF:BB:72:56:73:6E:28:8A:92:7E:A3:2A:15:8B:C2:E0:45:CA:C3:BC:EA:40:52:EC:CA:A2:68:CB:32',\n  ext_key_usage: [ '1.3.6.1.5.5.7.3.1', '1.3.6.1.5.5.7.3.2' ],\n  serialNumber: '66593D57F20CBC573E433381B5FEC280',\n  raw: <Buffer ... > }\ntlsSocket.getPeerFinished()#\nAdded in: v9.9.0\nReturns: <Buffer> | <undefined> The latest Finished message that is expected or has actually been received from the socket as part of a SSL/TLS handshake, or undefined if there is no Finished message so far.\nAs the Finished messages are message digests of the complete handshake (with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can be used for external authentication procedures when the authentication provided by SSL/TLS is not desired or is not enough.\n\nCorresponds to the SSL_get_peer_finished routine in OpenSSL and may be used to implement the tls-unique channel binding from RFC 5929.\n\ntlsSocket.getPeerX509Certificate()#\nAdded in: v15.9.0\nReturns: <X509Certificate>\nReturns the peer certificate as an <X509Certificate> object.\n\nIf there is no peer certificate, or the socket has been destroyed, undefined will be returned.\n\ntlsSocket.getProtocol()#\nAdded in: v5.7.0\nReturns: <string> | <null>\nReturns a string containing the negotiated SSL/TLS protocol version of the current connection. The value 'unknown' will be returned for connected sockets that have not completed the handshaking process. The value null will be returned for server sockets or disconnected client sockets.\n\nProtocol versions are:\n\n'SSLv3'\n'TLSv1'\n'TLSv1.1'\n'TLSv1.2'\n'TLSv1.3'\nSee the OpenSSL SSL_get_version documentation for more information.\n\ntlsSocket.getSession()#\nAdded in: v0.11.4\n<Buffer>\nReturns the TLS session data or undefined if no session was negotiated. On the client, the data can be provided to the session option of tls.connect() to resume the connection. On the server, it may be useful for debugging.\n\nSee Session Resumption for more information.\n\nNote: getSession() works only for TLSv1.2 and below. For TLSv1.3, applications must use the 'session' event (it also works for TLSv1.2 and below).\n\ntlsSocket.getSharedSigalgs()#\nAdded in: v12.11.0\nReturns: <Array> List of signature algorithms shared between the", "doc_id": "2ee7ec9e-c484-455a-8b1c-facd32dfb71d", "embedding": null, "doc_hash": "fae2fc252babc5ae106b1e70be7254b37409f7fbbacf395799fd4bcc32a96876", "extra_info": null, "node_info": {"start": 2475092, "end": 2477717}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c57b9855-4cfe-4412-a922-49a3aa16ee4c", "3": "89324b9f-70dc-47db-b2cf-9515b1e12059"}}, "__type__": "1"}, "89324b9f-70dc-47db-b2cf-9515b1e12059": {"__data__": {"text": "SSL_get_version documentation for more information.\n\ntlsSocket.getSession()#\nAdded in: v0.11.4\n<Buffer>\nReturns the TLS session data or undefined if no session was negotiated. On the client, the data can be provided to the session option of tls.connect() to resume the connection. On the server, it may be useful for debugging.\n\nSee Session Resumption for more information.\n\nNote: getSession() works only for TLSv1.2 and below. For TLSv1.3, applications must use the 'session' event (it also works for TLSv1.2 and below).\n\ntlsSocket.getSharedSigalgs()#\nAdded in: v12.11.0\nReturns: <Array> List of signature algorithms shared between the server and the client in the order of decreasing preference.\nSee SSL_get_shared_sigalgs for more information.\n\ntlsSocket.getTLSTicket()#\nAdded in: v0.11.4\n<Buffer>\nFor a client, returns the TLS session ticket if one is available, or undefined. For a server, always returns undefined.\n\nIt may be useful for debugging.\n\nSee Session Resumption for more information.\n\ntlsSocket.getX509Certificate()#\nAdded in: v15.9.0\nReturns: <X509Certificate>\nReturns the local certificate as an <X509Certificate> object.\n\nIf there is no local certificate, or the socket has been destroyed, undefined will be returned.\n\ntlsSocket.isSessionReused()#\nAdded in: v0.5.6\nReturns: <boolean> true if the session was reused, false otherwise.\nSee Session Resumption for more information.\n\ntlsSocket.localAddress#\nAdded in: v0.11.4\n<string>\nReturns the string representation of the local IP address.\n\ntlsSocket.localPort#\nAdded in: v0.11.4\n<integer>\nReturns the numeric representation of the local port.\n\ntlsSocket.remoteAddress#\nAdded in: v0.11.4\n<string>\nReturns the string representation of the remote IP address. For example, '74.125.127.100' or '2001:4860:a005::68'.\n\ntlsSocket.remoteFamily#\nAdded in: v0.11.4\n<string>\nReturns the string representation of the remote IP family. 'IPv4' or 'IPv6'.\n\ntlsSocket.remotePort#\nAdded in: v0.11.4\n<integer>\nReturns the numeric representation of the remote port. For example, 443.\n\ntlsSocket.renegotiate(options, callback)#\nHistory\noptions <Object>\n\nrejectUnauthorized <boolean> If not false, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification fails; err.code contains the OpenSSL error code. Default: true.\nrequestCert\ncallback <Function> If renegotiate() returned true, callback is attached once to the 'secure' event. If renegotiate() returned false, callback will be called in the next tick with an error, unless the tlsSocket has been destroyed, in which case callback will not be called at all.\n\nReturns: <boolean> true if renegotiation was initiated, false otherwise.\n\nThe tlsSocket.renegotiate() method initiates a TLS renegotiation process. Upon completion, the callback function will be passed a single argument that is either an Error (if the request failed) or null.\n\nThis method can be used to request a peer's certificate after the secure connection has been established.\n\nWhen running as the server, the socket will be destroyed with an error after handshakeTimeout timeout.\n\nFor TLSv1.3, renegotiation cannot be initiated, it is not supported by the protocol.\n\ntlsSocket.setMaxSendFragment(size)#\nAdded in: v0.11.11\nsize <number> The maximum TLS fragment size. The maximum value is 16384. Default: 16384.\nReturns: <boolean>\nThe tlsSocket.setMaxSendFragment() method sets the maximum", "doc_id": "89324b9f-70dc-47db-b2cf-9515b1e12059", "embedding": null, "doc_hash": "1b3085770049a544a9fffa02b7a9c354834a9bf3df04acd098d8b5639922813f", "extra_info": null, "node_info": {"start": 2477455, "end": 2480867}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2ee7ec9e-c484-455a-8b1c-facd32dfb71d", "3": "e0a98a36-eed8-49b4-be2d-a7c9a2ce368d"}}, "__type__": "1"}, "e0a98a36-eed8-49b4-be2d-a7c9a2ce368d": {"__data__": {"text": "method initiates a TLS renegotiation process. Upon completion, the callback function will be passed a single argument that is either an Error (if the request failed) or null.\n\nThis method can be used to request a peer's certificate after the secure connection has been established.\n\nWhen running as the server, the socket will be destroyed with an error after handshakeTimeout timeout.\n\nFor TLSv1.3, renegotiation cannot be initiated, it is not supported by the protocol.\n\ntlsSocket.setMaxSendFragment(size)#\nAdded in: v0.11.11\nsize <number> The maximum TLS fragment size. The maximum value is 16384. Default: 16384.\nReturns: <boolean>\nThe tlsSocket.setMaxSendFragment() method sets the maximum TLS fragment size. Returns true if setting the limit succeeded; false otherwise.\n\nSmaller fragment sizes decrease the buffering latency on the client: larger fragments are buffered by the TLS layer until the entire fragment is received and its integrity is verified; large fragments can span multiple roundtrips and their processing can be delayed due to packet loss or reordering. However, smaller fragments add extra TLS framing bytes and CPU overhead, which may decrease overall server throughput.\n\ntls.checkServerIdentity(hostname, cert)#\nHistory\nhostname <string> The host name or IP address to verify the certificate against.\ncert <Object> A certificate object representing the peer's certificate.\nReturns: <Error> | <undefined>\nVerifies the certificate cert is issued to hostname.\n\nReturns <Error> object, populating it with reason, host, and cert on failure. On success, returns <undefined>.\n\nThis function is intended to be used in combination with the checkServerIdentity option that can be passed to tls.connect() and as such operates on a certificate object. For other purposes, consider using x509.checkHost() instead.\n\nThis function can be overwritten by providing an alternative function as the options.checkServerIdentity option that is passed to tls.connect(). The overwriting function can call tls.checkServerIdentity() of course, to augment the checks done with additional verification.\n\nThis function is only called if the certificate passed all other checks, such as being issued by trusted CA (options.ca).\n\nEarlier versions of Node.js incorrectly accepted certificates for a given hostname if a matching uniformResourceIdentifier subject alternative name was present (see CVE-2021-44531). Applications that wish to accept uniformResourceIdentifier subject alternative names can use a custom options.checkServerIdentity function that implements the desired behavior.\n\ntls.connect(options[, callback])#\nHistory\noptions <Object>\nenableTrace: See tls.createServer()\n\nhost <string> Host the client should connect to. Default: 'localhost'.\n\nport <number> Port the client should connect to.\n\npath <string> Creates Unix socket connection to path. If this option is specified, host and port are ignored.\n\nsocket <stream.Duplex> Establish secure connection on a given socket rather than creating a new socket. Typically, this is an instance of net.Socket, but any Duplex stream is allowed. If this option is specified, path, host, and port are ignored, except for certificate validation. Usually, a socket is already connected when passed to tls.connect(), but it can be connected later. Connection/disconnection/destruction of socket is the user's responsibility; calling tls.connect() will not cause net.connect() to be called.\n\nallowHalfOpen <boolean> If set to false, then the socket will automatically end the writable side when the readable side ends. If the socket option is set, this option has no effect. See the allowHalfOpen option of net.Socket for details. Default: false.\n\nrejectUnauthorized <boolean> If not false, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification fails; err.code contains the OpenSSL error code. Default: true.\n\npskCallback <Function>\n\nhint: <string> optional message sent from the server to", "doc_id": "e0a98a36-eed8-49b4-be2d-a7c9a2ce368d", "embedding": null, "doc_hash": "274fa6427a75fd57d33c6d08574729317365f7b950a5ae27c9516a85742e3c5f", "extra_info": null, "node_info": {"start": 2480820, "end": 2484815}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "89324b9f-70dc-47db-b2cf-9515b1e12059", "3": "c68dbbf2-b165-4442-bedd-1b195a67cff0"}}, "__type__": "1"}, "c68dbbf2-b165-4442-bedd-1b195a67cff0": {"__data__": {"text": "when passed to tls.connect(), but it can be connected later. Connection/disconnection/destruction of socket is the user's responsibility; calling tls.connect() will not cause net.connect() to be called.\n\nallowHalfOpen <boolean> If set to false, then the socket will automatically end the writable side when the readable side ends. If the socket option is set, this option has no effect. See the allowHalfOpen option of net.Socket for details. Default: false.\n\nrejectUnauthorized <boolean> If not false, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification fails; err.code contains the OpenSSL error code. Default: true.\n\npskCallback <Function>\n\nhint: <string> optional message sent from the server to help client decide which identity to use during negotiation. Always null if TLS 1.3 is used.\nReturns: <Object> in the form { psk: <Buffer|TypedArray|DataView>, identity: <string> } or null to stop the negotiation process. psk must be compatible with the selected cipher's digest. identity must use UTF-8 encoding.\nWhen negotiating TLS-PSK (pre-shared keys), this function is called with optional identity hint provided by the server or null in case of TLS 1.3 where hint was removed. It will be necessary to provide a custom tls.checkServerIdentity() for the connection as the default one will try to check host name/IP of the server against the certificate but that's not applicable for PSK because there won't be a certificate present. More information can be found in the RFC 4279.\n\nALPNProtocols: <string[]> | <Buffer[]> | <TypedArray[]> | <DataView[]> | <Buffer> | <TypedArray> | <DataView> An array of strings, Buffers, TypedArrays, or DataViews, or a single Buffer, TypedArray, or DataView containing the supported ALPN protocols. Buffers should have the format [len][name][len][name]... e.g. '\\x08http/1.1\\x08http/1.0', where the len byte is the length of the next protocol name. Passing an array is usually much simpler, e.g. ['http/1.1', 'http/1.0']. Protocols earlier in the list have higher preference than those later.\n\nservername: <string> Server name for the SNI (Server Name Indication) TLS extension. It is the name of the host being connected to, and must be a host name, and not an IP address. It can be used by a multi-homed server to choose the correct certificate to present to the client, see the SNICallback option to tls.createServer().\n\ncheckServerIdentity(servername, cert) <Function> A callback function to be used (instead of the builtin tls.checkServerIdentity() function) when checking the server's host name (or the provided servername when explicitly set) against the certificate. This should return an <Error> if verification fails. The method should return undefined if the servername and cert are verified.\n\nsession <Buffer> A Buffer instance, containing TLS session.\n\nminDHSize <number> Minimum size of the DH parameter in bits to accept a TLS connection. When a server offers a DH parameter with a size less than minDHSize, the TLS connection is destroyed and an error is thrown. Default: 1024.\n\nhighWaterMark: <number> Consistent with the readable stream highWaterMark parameter. Default: 16 * 1024.\n\nsecureContext: TLS context object created with tls.createSecureContext(). If a secureContext is not provided, one will be created by passing the entire options object to tls.createSecureContext().\n\nonread <Object> If the socket option is missing, incoming data is stored in a single buffer and passed to the supplied callback when data arrives on the socket, otherwise the option is ignored. See the onread option of net.Socket for details.\n\n...: tls.createSecureContext() options that are used if the secureContext option is missing, otherwise they are ignored.\n\n...: Any socket.connect() option not already listed.\n\ncallback", "doc_id": "c68dbbf2-b165-4442-bedd-1b195a67cff0", "embedding": null, "doc_hash": "df27df0038c6da1bb03387dc81561cf7e7f2fcb8a4d20e0ffff55ba5c9cc568b", "extra_info": null, "node_info": {"start": 2484764, "end": 2488591}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e0a98a36-eed8-49b4-be2d-a7c9a2ce368d", "3": "132fc77b-5382-4efa-a632-55cf1f25db12"}}, "__type__": "1"}, "132fc77b-5382-4efa-a632-55cf1f25db12": {"__data__": {"text": "and an error is thrown. Default: 1024.\n\nhighWaterMark: <number> Consistent with the readable stream highWaterMark parameter. Default: 16 * 1024.\n\nsecureContext: TLS context object created with tls.createSecureContext(). If a secureContext is not provided, one will be created by passing the entire options object to tls.createSecureContext().\n\nonread <Object> If the socket option is missing, incoming data is stored in a single buffer and passed to the supplied callback when data arrives on the socket, otherwise the option is ignored. See the onread option of net.Socket for details.\n\n...: tls.createSecureContext() options that are used if the secureContext option is missing, otherwise they are ignored.\n\n...: Any socket.connect() option not already listed.\n\ncallback <Function>\nReturns: <tls.TLSSocket>\nThe callback function, if specified, will be added as a listener for the 'secureConnect' event.\n\ntls.connect() returns a tls.TLSSocket object.\n\nUnlike the https API, tls.connect() does not enable the SNI (Server Name Indication) extension by default, which may cause some servers to return an incorrect certificate or reject the connection altogether. To enable SNI, set the servername option in addition to host.\n\nThe following illustrates a client for the echo server example from tls.createServer():\n\n// Assumes an echo server that is listening on port 8000.\nconst tls = require('node:tls');\nconst fs = require('node:fs');\n\nconst options = {\n  // Necessary only if the server requires client certificate authentication.\n  key: fs.readFileSync('client-key.pem'),\n  cert: fs.readFileSync('client-cert.pem'),\n\n  // Necessary only if the server uses a self-signed certificate.\n  ca: [ fs.readFileSync('server-cert.pem') ],\n\n  // Necessary only if the server's cert isn't for \"localhost\".\n  checkServerIdentity: () => { return null; },\n};\n\nconst socket = tls.connect(8000, options, () => {\n  console.log('client connected',\n              socket.authorized ? 'authorized' : 'unauthorized');\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\nsocket.setEncoding('utf8');\nsocket.on('data', (data) => {\n  console.log(data);\n});\nsocket.on('end', () => {\n  console.log('server ends connection');\n});\ntls.connect(path[, options][, callback])#\nAdded in: v0.11.3\npath <string> Default value for options.path.\noptions <Object> See tls.connect().\ncallback <Function> See tls.connect().\nReturns: <tls.TLSSocket>\nSame as tls.connect() except that path can be provided as an argument instead of an option.\n\nA path option, if specified, will take precedence over the path argument.\n\ntls.connect(port[, host][, options][, callback])#\nAdded in: v0.11.3\nport <number> Default value for options.port.\nhost <string> Default value for options.host.\noptions <Object> See tls.connect().\ncallback <Function> See tls.connect().\nReturns: <tls.TLSSocket>\nSame as tls.connect() except that port and host can be provided as arguments instead of options.\n\nA port or host option, if specified, will take precedence over any port or host argument.\n\ntls.createSecureContext([options])#\nHistory\noptions <Object>\nca <string> | <string[]> | <Buffer> | <Buffer[]> Optionally override the trusted CA certificates. Default is to trust the well-known CAs curated by Mozilla. Mozilla's CAs are completely replaced when CAs are explicitly specified using this option. The value can be a string or Buffer, or an Array of strings and/or Buffers. Any string or Buffer can contain multiple PEM CAs concatenated together. The peer's certificate must be chainable to", "doc_id": "132fc77b-5382-4efa-a632-55cf1f25db12", "embedding": null, "doc_hash": "bc546c22f5cd330fbce5ebf3c19ab0e86ce99afb5a51bed73c03ba24de997441", "extra_info": null, "node_info": {"start": 2488578, "end": 2492112}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c68dbbf2-b165-4442-bedd-1b195a67cff0", "3": "6e648e46-fb93-4391-9518-0c2dffac5f54"}}, "__type__": "1"}, "6e648e46-fb93-4391-9518-0c2dffac5f54": {"__data__": {"text": "<tls.TLSSocket>\nSame as tls.connect() except that port and host can be provided as arguments instead of options.\n\nA port or host option, if specified, will take precedence over any port or host argument.\n\ntls.createSecureContext([options])#\nHistory\noptions <Object>\nca <string> | <string[]> | <Buffer> | <Buffer[]> Optionally override the trusted CA certificates. Default is to trust the well-known CAs curated by Mozilla. Mozilla's CAs are completely replaced when CAs are explicitly specified using this option. The value can be a string or Buffer, or an Array of strings and/or Buffers. Any string or Buffer can contain multiple PEM CAs concatenated together. The peer's certificate must be chainable to a CA trusted by the server for the connection to be authenticated. When using certificates that are not chainable to a well-known CA, the certificate's CA must be explicitly specified as a trusted or the connection will fail to authenticate. If the peer uses a certificate that doesn't match or chain to one of the default CAs, use the ca option to provide a CA certificate that the peer's certificate can match or chain to. For self-signed certificates, the certificate is its own CA, and must be provided. For PEM encoded certificates, supported types are \"TRUSTED CERTIFICATE\", \"X509 CERTIFICATE\", and \"CERTIFICATE\". See also tls.rootCertificates.\ncert <string> | <string[]> | <Buffer> | <Buffer[]> Cert chains in PEM format. One cert chain should be provided per private key. Each cert chain should consist of the PEM formatted certificate for a provided private key, followed by the PEM formatted intermediate certificates (if any), in order, and not including the root CA (the root CA must be pre-known to the peer, see ca). When providing multiple cert chains, they do not have to be in the same order as their private keys in key. If the intermediate certificates are not provided, the peer will not be able to validate the certificate, and the handshake will fail.\nsigalgs <string> Colon-separated list of supported signature algorithms. The list can contain digest algorithms (SHA256, MD5 etc.), public key algorithms (RSA-PSS, ECDSA etc.), combination of both (e.g 'RSA+SHA384') or TLS v1.3 scheme names (e.g. rsa_pss_pss_sha512). See OpenSSL man pages for more info.\nciphers <string> Cipher suite specification, replacing the default. For more information, see Modifying the default TLS cipher suite. Permitted ciphers can be obtained via tls.getCiphers(). Cipher names must be uppercased in order for OpenSSL to accept them.\nclientCertEngine <string> Name of an OpenSSL engine which can provide the client certificate.\ncrl <string> | <string[]> | <Buffer> | <Buffer[]> PEM formatted CRLs (Certificate Revocation Lists).\ndhparam <string> | <Buffer> 'auto' or custom Diffie-Hellman parameters, required for non-ECDHE perfect forward secrecy. If omitted or invalid, the parameters are silently discarded and DHE ciphers will not be available. ECDHE-based perfect forward secrecy will still be available.\necdhCurve <string> A string describing a named curve or a colon separated list of curve NIDs or names, for example P-521:P-384:P-256, to use for ECDH key agreement. Set to auto to select the curve automatically. Use crypto.getCurves() to obtain a list of available curve names. On recent releases, openssl ecparam -list_curves will also display the name and description of each available elliptic curve. Default: tls.DEFAULT_ECDH_CURVE.\nhonorCipherOrder <boolean> Attempt to use the server's cipher suite preferences instead of the client's. When true, causes SSL_OP_CIPHER_SERVER_PREFERENCE to be set in secureOptions, see OpenSSL Options for more information.\nkey <string> |", "doc_id": "6e648e46-fb93-4391-9518-0c2dffac5f54", "embedding": null, "doc_hash": "c85ea1e802152b01bc10e4be4e4f52e393c4e257c0123b51625a0a809594057a", "extra_info": null, "node_info": {"start": 2492176, "end": 2495873}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "132fc77b-5382-4efa-a632-55cf1f25db12", "3": "ea53a369-133a-4fc3-beac-a6448e403cd9"}}, "__type__": "1"}, "ea53a369-133a-4fc3-beac-a6448e403cd9": {"__data__": {"text": "A string describing a named curve or a colon separated list of curve NIDs or names, for example P-521:P-384:P-256, to use for ECDH key agreement. Set to auto to select the curve automatically. Use crypto.getCurves() to obtain a list of available curve names. On recent releases, openssl ecparam -list_curves will also display the name and description of each available elliptic curve. Default: tls.DEFAULT_ECDH_CURVE.\nhonorCipherOrder <boolean> Attempt to use the server's cipher suite preferences instead of the client's. When true, causes SSL_OP_CIPHER_SERVER_PREFERENCE to be set in secureOptions, see OpenSSL Options for more information.\nkey <string> | <string[]> | <Buffer> | <Buffer[]> | <Object[]> Private keys in PEM format. PEM allows the option of private keys being encrypted. Encrypted keys will be decrypted with options.passphrase. Multiple keys using different algorithms can be provided either as an array of unencrypted key strings or buffers, or an array of objects in the form {pem: <string|buffer>[, passphrase: <string>]}. The object form can only occur in an array. object.passphrase is optional. Encrypted keys will be decrypted with object.passphrase if provided, or options.passphrase if it is not.\nprivateKeyEngine <string> Name of an OpenSSL engine to get private key from. Should be used together with privateKeyIdentifier.\nprivateKeyIdentifier <string> Identifier of a private key managed by an OpenSSL engine. Should be used together with privateKeyEngine. Should not be set together with key, because both options define a private key in different ways.\nmaxVersion <string> Optionally set the maximum TLS version to allow. One of 'TLSv1.3', 'TLSv1.2', 'TLSv1.1', or 'TLSv1'. Cannot be specified along with the secureProtocol option; use one or the other. Default: tls.DEFAULT_MAX_VERSION.\nminVersion <string> Optionally set the minimum TLS version to allow. One of 'TLSv1.3', 'TLSv1.2', 'TLSv1.1', or 'TLSv1'. Cannot be specified along with the secureProtocol option; use one or the other. Avoid setting to less than TLSv1.2, but it may be required for interoperability. Default: tls.DEFAULT_MIN_VERSION.\npassphrase <string> Shared passphrase used for a single private key and/or a PFX.\npfx <string> | <string[]> | <Buffer> | <Buffer[]> | <Object[]> PFX or PKCS12 encoded private key and certificate chain. pfx is an alternative to providing key and cert individually. PFX is usually encrypted, if it is, passphrase will be used to decrypt it. Multiple PFX can be provided either as an array of unencrypted PFX buffers, or an array of objects in the form {buf: <string|buffer>[, passphrase: <string>]}. The object form can only occur in an array. object.passphrase is optional. Encrypted PFX will be decrypted with object.passphrase if provided, or options.passphrase if it is not.\nsecureOptions <number> Optionally affect the OpenSSL protocol behavior, which is not usually necessary. This should be used carefully if at all! Value is a numeric bitmask of the SSL_OP_* options from OpenSSL Options.\nsecureProtocol <string> Legacy mechanism to select the TLS protocol version to use, it does not support independent control of the minimum and maximum version, and does not support limiting the protocol to TLSv1.3. Use minVersion and maxVersion instead. The possible values are listed as SSL_METHODS, use the function names as strings. For example, use 'TLSv1_1_method' to force TLS version 1.1, or 'TLS_method' to allow any TLS protocol version up to TLSv1.3. It is not recommended to use TLS versions less than 1.2, but it may be required for interoperability. Default: none, see minVersion.\nsessionIdContext <string> Opaque identifier used by servers to ensure session state is not shared between", "doc_id": "ea53a369-133a-4fc3-beac-a6448e403cd9", "embedding": null, "doc_hash": "494189141f260cc7ba68b030a9256888c523bc6d7db6943ab71b345e3318c66c", "extra_info": null, "node_info": {"start": 2495915, "end": 2499646}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6e648e46-fb93-4391-9518-0c2dffac5f54", "3": "aa4e7791-3cff-49ac-a609-be2aba3133ae"}}, "__type__": "1"}, "aa4e7791-3cff-49ac-a609-be2aba3133ae": {"__data__": {"text": "options from OpenSSL Options.\nsecureProtocol <string> Legacy mechanism to select the TLS protocol version to use, it does not support independent control of the minimum and maximum version, and does not support limiting the protocol to TLSv1.3. Use minVersion and maxVersion instead. The possible values are listed as SSL_METHODS, use the function names as strings. For example, use 'TLSv1_1_method' to force TLS version 1.1, or 'TLS_method' to allow any TLS protocol version up to TLSv1.3. It is not recommended to use TLS versions less than 1.2, but it may be required for interoperability. Default: none, see minVersion.\nsessionIdContext <string> Opaque identifier used by servers to ensure session state is not shared between applications. Unused by clients.\nticketKeys: <Buffer> 48-bytes of cryptographically strong pseudorandom data. See Session Resumption for more information.\nsessionTimeout <number> The number of seconds after which a TLS session created by the server will no longer be resumable. See Session Resumption for more information. Default: 300.\ntls.createServer() sets the default value of the honorCipherOrder option to true, other APIs that create secure contexts leave it unset.\n\ntls.createServer() uses a 128 bit truncated SHA1 hash value generated from process.argv as the default value of the sessionIdContext option, other APIs that create secure contexts have no default value.\n\nThe tls.createSecureContext() method creates a SecureContext object. It is usable as an argument to several tls APIs, such as server.addContext(), but has no public methods. The tls.Server constructor and the tls.createServer() method do not support the secureContext option.\n\nA key is required for ciphers that use certificates. Either key or pfx can be used to provide it.\n\nIf the ca option is not given, then Node.js will default to using Mozilla's publicly trusted list of CAs.\n\nCustom DHE parameters are discouraged in favor of the new dhparam: 'auto' option. When set to 'auto', well-known DHE parameters of sufficient strength will be selected automatically. Otherwise, if necessary, openssl dhparam can be used to create custom parameters. The key length must be greater than or equal to 1024 bits or else an error will be thrown. Although 1024 bits is permissible, use 2048 bits or larger for stronger security.\n\ntls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized][, options])#\nHistory\nStability: 0 - Deprecated: Use tls.TLSSocket instead.\ncontext <Object> A secure context object as returned by tls.createSecureContext()\nisServer <boolean> true to specify that this TLS connection should be opened as a server.\nrequestCert <boolean> true to specify whether a server should request a certificate from a connecting client. Only applies when isServer is true.\nrejectUnauthorized <boolean> If not false a server automatically reject clients with invalid certificates. Only applies when isServer is true.\noptions\nenableTrace: See tls.createServer()\nsecureContext: A TLS context object from tls.createSecureContext()\nisServer: If true the TLS socket will be instantiated in server-mode. Default: false.\nserver <net.Server> A net.Server instance\nrequestCert: See tls.createServer()\nrejectUnauthorized: See tls.createServer()\nALPNProtocols: See tls.createServer()\nSNICallback: See tls.createServer()\nsession <Buffer> A Buffer instance containing a TLS session.\nrequestOCSP <boolean> If true, specifies that the OCSP status request extension will be added to the client hello and an 'OCSPResponse' event will be emitted on the socket before establishing a secure communication.\nCreates a new secure pair object with two streams, one of which reads and writes the encrypted data and the other of which reads and writes the cleartext data. Generally, the encrypted stream is piped to/from an incoming encrypted data stream and the cleartext one is used as a replacement for the initial encrypted", "doc_id": "aa4e7791-3cff-49ac-a609-be2aba3133ae", "embedding": null, "doc_hash": "aacfdf75b0e4bee9f22033bcf9d02790dd6b415c0c9929deddab9b0652144273", "extra_info": null, "node_info": {"start": 2499592, "end": 2503523}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ea53a369-133a-4fc3-beac-a6448e403cd9", "3": "b988ccb0-1f15-4ef9-a527-a1984fb77bcf"}}, "__type__": "1"}, "b988ccb0-1f15-4ef9-a527-a1984fb77bcf": {"__data__": {"text": "A net.Server instance\nrequestCert: See tls.createServer()\nrejectUnauthorized: See tls.createServer()\nALPNProtocols: See tls.createServer()\nSNICallback: See tls.createServer()\nsession <Buffer> A Buffer instance containing a TLS session.\nrequestOCSP <boolean> If true, specifies that the OCSP status request extension will be added to the client hello and an 'OCSPResponse' event will be emitted on the socket before establishing a secure communication.\nCreates a new secure pair object with two streams, one of which reads and writes the encrypted data and the other of which reads and writes the cleartext data. Generally, the encrypted stream is piped to/from an incoming encrypted data stream and the cleartext one is used as a replacement for the initial encrypted stream.\n\ntls.createSecurePair() returns a tls.SecurePair object with cleartext and encrypted stream properties.\n\nUsing cleartext has the same API as tls.TLSSocket.\n\nThe tls.createSecurePair() method is now deprecated in favor of tls.TLSSocket(). For example, the code:\n\npair = tls.createSecurePair(/* ... */);\npair.encrypted.pipe(socket);\nsocket.pipe(pair.encrypted);\ncan be replaced by:\n\nsecureSocket = tls.TLSSocket(socket, options);\nwhere secureSocket has the same API as pair.cleartext.\n\ntls.createServer([options][, secureConnectionListener])#\nHistory\noptions <Object>\nALPNProtocols: <string[]> | <Buffer[]> | <TypedArray[]> | <DataView[]> | <Buffer> | <TypedArray> | <DataView> An array of strings, Buffers, TypedArrays, or DataViews, or a single Buffer, TypedArray, or DataView containing the supported ALPN protocols. Buffers should have the format [len][name][len][name]... e.g. 0x05hello0x05world, where the first byte is the length of the next protocol name. Passing an array is usually much simpler, e.g. ['hello', 'world']. (Protocols should be ordered by their priority.)\n\nclientCertEngine <string> Name of an OpenSSL engine which can provide the client certificate.\n\nenableTrace <boolean> If true, tls.TLSSocket.enableTrace() will be called on new connections. Tracing can be enabled after the secure connection is established, but this option must be used to trace the secure connection setup. Default: false.\n\nhandshakeTimeout <number> Abort the connection if the SSL/TLS handshake does not finish in the specified number of milliseconds. A 'tlsClientError' is emitted on the tls.Server object whenever a handshake times out. Default: 120000 (120 seconds).\n\nrejectUnauthorized <boolean> If not false the server will reject any connection which is not authorized with the list of supplied CAs. This option only has an effect if requestCert is true. Default: true.\n\nrequestCert <boolean> If true the server will request a certificate from clients that connect and attempt to verify that certificate. Default: false.\n\nsessionTimeout <number> The number of seconds after which a TLS session created by the server will no longer be resumable. See Session Resumption for more information. Default: 300.\n\nSNICallback(servername, callback) <Function> A function that will be called if the client supports SNI TLS extension. Two arguments will be passed when called: servername and callback. callback is an error-first callback that takes two optional arguments: error and ctx. ctx, if provided, is a SecureContext instance. tls.createSecureContext() can be used to get a proper SecureContext. If callback is called with a falsy ctx argument, the default secure context of the server will be used. If SNICallback wasn't provided the default callback with high-level API will be used (see below).\n\nticketKeys: <Buffer> 48-bytes of cryptographically strong pseudorandom data. See Session Resumption for more information.\n\npskCallback <Function>\n\nsocket: <tls.TLSSocket> the server tls.TLSSocket instance for this connection.\nidentity:", "doc_id": "b988ccb0-1f15-4ef9-a527-a1984fb77bcf", "embedding": null, "doc_hash": "61d58ccbfb8b11cb439c1ddf9e45c8c58e06bb270565734be2c68c7d106063eb", "extra_info": null, "node_info": {"start": 2503480, "end": 2507288}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "aa4e7791-3cff-49ac-a609-be2aba3133ae", "3": "4e01b4fc-d9ad-4dbc-a342-753c8fa3fd7c"}}, "__type__": "1"}, "4e01b4fc-d9ad-4dbc-a342-753c8fa3fd7c": {"__data__": {"text": "function that will be called if the client supports SNI TLS extension. Two arguments will be passed when called: servername and callback. callback is an error-first callback that takes two optional arguments: error and ctx. ctx, if provided, is a SecureContext instance. tls.createSecureContext() can be used to get a proper SecureContext. If callback is called with a falsy ctx argument, the default secure context of the server will be used. If SNICallback wasn't provided the default callback with high-level API will be used (see below).\n\nticketKeys: <Buffer> 48-bytes of cryptographically strong pseudorandom data. See Session Resumption for more information.\n\npskCallback <Function>\n\nsocket: <tls.TLSSocket> the server tls.TLSSocket instance for this connection.\nidentity: <string> identity parameter sent from the client.\nReturns: <Buffer> | <TypedArray> | <DataView> pre-shared key that must either be a buffer or null to stop the negotiation process. Returned PSK must be compatible with the selected cipher's digest.\nWhen negotiating TLS-PSK (pre-shared keys), this function is called with the identity provided by the client. If the return value is null the negotiation process will stop and an \"unknown_psk_identity\" alert message will be sent to the other party. If the server wishes to hide the fact that the PSK identity was not known, the callback must provide some random data as psk to make the connection fail with \"decrypt_error\" before negotiation is finished. PSK ciphers are disabled by default, and using TLS-PSK thus requires explicitly specifying a cipher suite with the ciphers option. More information can be found in the RFC 4279.\n\npskIdentityHint <string> optional hint to send to a client to help with selecting the identity during TLS-PSK negotiation. Will be ignored in TLS 1.3. Upon failing to set pskIdentityHint 'tlsClientError' will be emitted with 'ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED' code.\n\n...: Any tls.createSecureContext() option can be provided. For servers, the identity options (pfx, key/cert, or pskCallback) are usually required.\n\n...: Any net.createServer() option can be provided.\n\nsecureConnectionListener <Function>\nReturns: <tls.Server>\nCreates a new tls.Server. The secureConnectionListener, if provided, is automatically set as a listener for the 'secureConnection' event.\n\nThe ticketKeys options is automatically shared between node:cluster module workers.\n\nThe following illustrates a simple echo server:\n\nconst tls = require('node:tls');\nconst fs = require('node:fs');\n\nconst options = {\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem'),\n\n  // This is necessary only if using client certificate authentication.\n  requestCert: true,\n\n  // This is necessary only if the client uses a self-signed certificate.\n  ca: [ fs.readFileSync('client-cert.pem') ],\n};\n\nconst server = tls.createServer(options, (socket) => {\n  console.log('server connected',\n              socket.authorized ? 'authorized' : 'unauthorized');\n  socket.write('welcome!\\n');\n  socket.setEncoding('utf8');\n  socket.pipe(socket);\n});\nserver.listen(8000, () => {\n  console.log('server bound');\n});\nThe server can be tested by connecting to it using the example client from tls.connect().\n\ntls.getCiphers()#\nAdded in: v0.10.2\nReturns: <string[]>\nReturns an array with the names of the supported TLS ciphers. The names are lower-case for historical reasons, but must be uppercased to be used in the ciphers option of tls.createSecureContext().\n\nNot all supported ciphers are enabled by default. See Modifying the default TLS cipher suite.\n\nCipher names that start with", "doc_id": "4e01b4fc-d9ad-4dbc-a342-753c8fa3fd7c", "embedding": null, "doc_hash": "2b216bf002965218481c18fd796dd6d6eae5c33196521fc679413ed78ae511c1", "extra_info": null, "node_info": {"start": 2507281, "end": 2510905}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b988ccb0-1f15-4ef9-a527-a1984fb77bcf", "3": "526ca6c3-3dd0-4832-877a-b5ebb9936fe9"}}, "__type__": "1"}, "526ca6c3-3dd0-4832-877a-b5ebb9936fe9": {"__data__": {"text": ": 'unauthorized');\n  socket.write('welcome!\\n');\n  socket.setEncoding('utf8');\n  socket.pipe(socket);\n});\nserver.listen(8000, () => {\n  console.log('server bound');\n});\nThe server can be tested by connecting to it using the example client from tls.connect().\n\ntls.getCiphers()#\nAdded in: v0.10.2\nReturns: <string[]>\nReturns an array with the names of the supported TLS ciphers. The names are lower-case for historical reasons, but must be uppercased to be used in the ciphers option of tls.createSecureContext().\n\nNot all supported ciphers are enabled by default. See Modifying the default TLS cipher suite.\n\nCipher names that start with 'tls_' are for TLSv1.3, all the others are for TLSv1.2 and below.\n\nconsole.log(tls.getCiphers()); // ['aes128-gcm-sha256', 'aes128-sha', ...]\ntls.rootCertificates#\nAdded in: v12.3.0\n<string[]>\nAn immutable array of strings representing the root certificates (in PEM format) from the bundled Mozilla CA store as supplied by the current Node.js version.\n\nThe bundled CA store, as supplied by Node.js, is a snapshot of Mozilla CA store that is fixed at release time. It is identical on all supported platforms.\n\ntls.DEFAULT_ECDH_CURVE#\nHistory\nThe default curve name to use for ECDH key agreement in a tls server. The default value is 'auto'. See tls.createSecureContext() for further information.\n\ntls.DEFAULT_MAX_VERSION#\nAdded in: v11.4.0\n<string> The default value of the maxVersion option of tls.createSecureContext(). It can be assigned any of the supported TLS protocol versions, 'TLSv1.3', 'TLSv1.2', 'TLSv1.1', or 'TLSv1'. Default: 'TLSv1.3', unless changed using CLI options. Using --tls-max-v1.2 sets the default to 'TLSv1.2'. Using --tls-max-v1.3 sets the default to 'TLSv1.3'. If multiple of the options are provided, the highest maximum is used.\ntls.DEFAULT_MIN_VERSION#\nAdded in: v11.4.0\n<string> The default value of the minVersion option of tls.createSecureContext(). It can be assigned any of the supported TLS protocol versions, 'TLSv1.3', 'TLSv1.2', 'TLSv1.1', or 'TLSv1'. Default: 'TLSv1.2', unless changed using CLI options. Using --tls-min-v1.0 sets the default to 'TLSv1'. Using --tls-min-v1.1 sets the default to 'TLSv1.1'. Using --tls-min-v1.3 sets the default to 'TLSv1.3'. If multiple of the options are provided, the lowest minimum is used.\ntls.DEFAULT_CIPHERS#\nAdded in: v18.16.0\n<string> The default value of the ciphers option of tls.createSecureContext(). It can be assigned any of the supported OpenSSL ciphers. Defaults to the content of crypto.constants.defaultCoreCipherList, unless changed using CLI options using --tls-default-ciphers.\nTrace events#\nStability: 1 - Experimental\nSource Code: lib/trace_events.js\n\nThe node:trace_events module provides a mechanism to centralize tracing information generated by V8, Node.js core, and userspace code.\n\nTracing can be enabled with the --trace-event-categories command-line flag or by using the node:trace_events module. The --trace-event-categories flag accepts a list of comma-separated category names.\n\nThe available categories are:\n\nnode: An empty placeholder.\nnode.async_hooks: Enables capture of detailed async_hooks trace", "doc_id": "526ca6c3-3dd0-4832-877a-b5ebb9936fe9", "embedding": null, "doc_hash": "697501662d731862626fa4df8cc0154a884f0826ee61ddd5e0a6a445365dd0c3", "extra_info": null, "node_info": {"start": 2511019, "end": 2514165}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4e01b4fc-d9ad-4dbc-a342-753c8fa3fd7c", "3": "c0260e24-dc30-4226-9097-1663702ab0d4"}}, "__type__": "1"}, "c0260e24-dc30-4226-9097-1663702ab0d4": {"__data__": {"text": "supported OpenSSL ciphers. Defaults to the content of crypto.constants.defaultCoreCipherList, unless changed using CLI options using --tls-default-ciphers.\nTrace events#\nStability: 1 - Experimental\nSource Code: lib/trace_events.js\n\nThe node:trace_events module provides a mechanism to centralize tracing information generated by V8, Node.js core, and userspace code.\n\nTracing can be enabled with the --trace-event-categories command-line flag or by using the node:trace_events module. The --trace-event-categories flag accepts a list of comma-separated category names.\n\nThe available categories are:\n\nnode: An empty placeholder.\nnode.async_hooks: Enables capture of detailed async_hooks trace data. The async_hooks events have a unique asyncId and a special triggerId triggerAsyncId property.\nnode.bootstrap: Enables capture of Node.js bootstrap milestones.\nnode.console: Enables capture of console.time() and console.count() output.\nnode.threadpoolwork.sync: Enables capture of trace data for threadpool synchronous operations, such as blob, zlib, crypto and node_api.\nnode.threadpoolwork.async: Enables capture of trace data for threadpool asynchronous operations, such as blob, zlib, crypto and node_api.\nnode.dns.native: Enables capture of trace data for DNS queries.\nnode.net.native: Enables capture of trace data for network.\nnode.environment: Enables capture of Node.js Environment milestones.\nnode.fs.sync: Enables capture of trace data for file system sync methods.\nnode.fs_dir.sync: Enables capture of trace data for file system sync directory methods.\nnode.fs.async: Enables capture of trace data for file system async methods.\nnode.fs_dir.async: Enables capture of trace data for file system async directory methods.\nnode.perf: Enables capture of Performance API measurements.\nnode.perf.usertiming: Enables capture of only Performance API User Timing measures and marks.\nnode.perf.timerify: Enables capture of only Performance API timerify measurements.\nnode.promises.rejections: Enables capture of trace data tracking the number of unhandled Promise rejections and handled-after-rejections.\nnode.vm.script: Enables capture of trace data for the node:vm module's runInNewContext(), runInContext(), and runInThisContext() methods.\nv8: The V8 events are GC, compiling, and execution related.\nnode.http: Enables capture of trace data for http request / response.\nBy default the node, node.async_hooks, and v8 categories are enabled.\n\nnode --trace-event-categories v8,node,node.async_hooks server.js\nPrior versions of Node.js required the use of the --trace-events-enabled flag to enable trace events. This requirement has been removed. However, the --trace-events-enabled flag may still be used and will enable the node, node.async_hooks, and v8 trace event categories by default.\n\nnode --trace-events-enabled\n\n# is equivalent to\n\nnode --trace-event-categories v8,node,node.async_hooks\nAlternatively, trace events may be enabled using the node:trace_events module:\n\nconst trace_events = require('node:trace_events');\nconst tracing = trace_events.createTracing({ categories: ['node.perf'] });\ntracing.enable();  // Enable trace event capture for the 'node.perf' category\n\n// do work\n\ntracing.disable();  // Disable trace event capture for the 'node.perf' category\nRunning Node.js with tracing enabled will produce log files that can be opened in the chrome://tracing tab of Chrome.\n\nThe logging file is by default called node_trace.${rotation}.log, where ${rotation} is an incrementing log-rotation id. The filepath pattern can be specified with --trace-event-file-pattern that accepts a template string that supports", "doc_id": "c0260e24-dc30-4226-9097-1663702ab0d4", "embedding": null, "doc_hash": "af543c1317d43bf297dbc8a20c3946042e514dc817116b750fe86b1ea0d6cfe2", "extra_info": null, "node_info": {"start": 2514107, "end": 2517732}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "526ca6c3-3dd0-4832-877a-b5ebb9936fe9", "3": "792be52d-5f81-435a-b1f2-9d3bdbb72c9d"}}, "__type__": "1"}, "792be52d-5f81-435a-b1f2-9d3bdbb72c9d": {"__data__": {"text": "trace events may be enabled using the node:trace_events module:\n\nconst trace_events = require('node:trace_events');\nconst tracing = trace_events.createTracing({ categories: ['node.perf'] });\ntracing.enable();  // Enable trace event capture for the 'node.perf' category\n\n// do work\n\ntracing.disable();  // Disable trace event capture for the 'node.perf' category\nRunning Node.js with tracing enabled will produce log files that can be opened in the chrome://tracing tab of Chrome.\n\nThe logging file is by default called node_trace.${rotation}.log, where ${rotation} is an incrementing log-rotation id. The filepath pattern can be specified with --trace-event-file-pattern that accepts a template string that supports ${rotation} and ${pid}:\n\nnode --trace-event-categories v8 --trace-event-file-pattern '${pid}-${rotation}.log' server.js\nTo guarantee that the log file is properly generated after signal events like SIGINT, SIGTERM, or SIGBREAK, make sure to have the appropriate handlers in your code, such as:\n\nprocess.on('SIGINT', function onSigint() {\n  console.info('Received SIGINT.');\n  process.exit(130);  // Or applicable exit code depending on OS and signal\n});\nThe tracing system uses the same time source as the one used by process.hrtime(). However the trace-event timestamps are expressed in microseconds, unlike process.hrtime() which returns nanoseconds.\n\nThe features from this module are not available in Worker threads.\n\nThe node:trace_events module#\nAdded in: v10.0.0\nTracing object#\nAdded in: v10.0.0\nThe Tracing object is used to enable or disable tracing for sets of categories. Instances are created using the trace_events.createTracing() method.\n\nWhen created, the Tracing object is disabled. Calling the tracing.enable() method adds the categories to the set of enabled trace event categories. Calling tracing.disable() will remove the categories from the set of enabled trace event categories.\n\ntracing.categories#\nAdded in: v10.0.0\n<string>\nA comma-separated list of the trace event categories covered by this Tracing object.\n\ntracing.disable()#\nAdded in: v10.0.0\nDisables this Tracing object.\n\nOnly trace event categories not covered by other enabled Tracing objects and not specified by the --trace-event-categories flag will be disabled.\n\nconst trace_events = require('node:trace_events');\nconst t1 = trace_events.createTracing({ categories: ['node', 'v8'] });\nconst t2 = trace_events.createTracing({ categories: ['node.perf', 'node'] });\nt1.enable();\nt2.enable();\n\n// Prints 'node,node.perf,v8'\nconsole.log(trace_events.getEnabledCategories());\n\nt2.disable(); // Will only disable emission of the 'node.perf' category\n\n// Prints 'node,v8'\nconsole.log(trace_events.getEnabledCategories());\ntracing.enable()#\nAdded in: v10.0.0\nEnables this Tracing object for the set of categories covered by the Tracing object.\n\ntracing.enabled#\nAdded in: v10.0.0\n<boolean> true only if the Tracing object has been enabled.\ntrace_events.createTracing(options)#\nAdded in: v10.0.0\noptions <Object>\ncategories <string[]> An array of trace category names. Values included in the array are coerced to a string when possible. An error will be thrown if the value cannot be coerced.\nReturns: <Tracing>.\nCreates and returns a Tracing object for the given set of categories.\n\nconst trace_events = require('node:trace_events');\nconst categories = ['node.perf', 'node.async_hooks'];\nconst tracing = trace_events.createTracing({ categories });\ntracing.enable();\n// do", "doc_id": "792be52d-5f81-435a-b1f2-9d3bdbb72c9d", "embedding": null, "doc_hash": "d8aa8dc572a1a3ac97e6484dd024ea4ff9a03a167568f40ebddf36c981af8e2f", "extra_info": null, "node_info": {"start": 2517722, "end": 2521189}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c0260e24-dc30-4226-9097-1663702ab0d4", "3": "0d423703-fcb3-4c86-aea5-3b479c304f58"}}, "__type__": "1"}, "0d423703-fcb3-4c86-aea5-3b479c304f58": {"__data__": {"text": "in: v10.0.0\n<boolean> true only if the Tracing object has been enabled.\ntrace_events.createTracing(options)#\nAdded in: v10.0.0\noptions <Object>\ncategories <string[]> An array of trace category names. Values included in the array are coerced to a string when possible. An error will be thrown if the value cannot be coerced.\nReturns: <Tracing>.\nCreates and returns a Tracing object for the given set of categories.\n\nconst trace_events = require('node:trace_events');\nconst categories = ['node.perf', 'node.async_hooks'];\nconst tracing = trace_events.createTracing({ categories });\ntracing.enable();\n// do stuff\ntracing.disable();\ntrace_events.getEnabledCategories()#\nAdded in: v10.0.0\nReturns: <string>\nReturns a comma-separated list of all currently-enabled trace event categories. The current set of enabled trace event categories is determined by the union of all currently-enabled Tracing objects and any categories enabled using the --trace-event-categories flag.\n\nGiven the file test.js below, the command node --trace-event-categories node.perf test.js will print 'node.async_hooks,node.perf' to the console.\n\nconst trace_events = require('node:trace_events');\nconst t1 = trace_events.createTracing({ categories: ['node.async_hooks'] });\nconst t2 = trace_events.createTracing({ categories: ['node.perf'] });\nconst t3 = trace_events.createTracing({ categories: ['v8'] });\n\nt1.enable();\nt2.enable();\n\nconsole.log(trace_events.getEnabledCategories());\nExamples#\nCollect trace events data by inspector#\n'use strict';\n\nconst { Session } = require('inspector');\nconst session = new Session();\nsession.connect();\n\nfunction post(message, data) {\n  return new Promise((resolve, reject) => {\n    session.post(message, data, (err, result) => {\n      if (err)\n        reject(new Error(JSON.stringify(err)));\n      else\n        resolve(result);\n    });\n  });\n}\n\nasync function collect() {\n  const data = [];\n  session.on('NodeTracing.dataCollected', (chunk) => data.push(chunk));\n  session.on('NodeTracing.tracingComplete', () => {\n    // done\n  });\n  const traceConfig = { includedCategories: ['v8'] };\n  await post('NodeTracing.start', { traceConfig });\n  // do something\n  setTimeout(() => {\n    post('NodeTracing.stop').then(() => {\n      session.disconnect();\n      console.log(data);\n    });\n  }, 1000);\n}\n\ncollect();\nTTY#\nStability: 2 - Stable\nSource Code: lib/tty.js\n\nThe node:tty module provides the tty.ReadStream and tty.WriteStream classes. In most cases, it will not be necessary or possible to use this module directly. However, it can be accessed using:\n\nconst tty = require('node:tty');\nWhen Node.js detects that it is being run with a text terminal (\"TTY\") attached, process.stdin will, by default, be initialized as an instance of tty.ReadStream and both process.stdout and process.stderr will, by default, be instances of tty.WriteStream. The preferred method of determining whether Node.js is being run within a TTY context is to check that the value of the process.stdout.isTTY property is true:\n\n$ node -p -e \"Boolean(process.stdout.isTTY)\"\ntrue\n$ node -p -e \"Boolean(process.stdout.isTTY)\" | cat\nfalse\nIn most cases, there should be little to no reason for an application to manually create instances of the", "doc_id": "0d423703-fcb3-4c86-aea5-3b479c304f58", "embedding": null, "doc_hash": "20807b706ccf77814339f37d147dc74eb0914dc08b52dbb6dcb0732327fe42b9", "extra_info": null, "node_info": {"start": 2521284, "end": 2524507}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "792be52d-5f81-435a-b1f2-9d3bdbb72c9d", "3": "868a5167-7dbe-46db-b253-a21ac05b29b7"}}, "__type__": "1"}, "868a5167-7dbe-46db-b253-a21ac05b29b7": {"__data__": {"text": "using:\n\nconst tty = require('node:tty');\nWhen Node.js detects that it is being run with a text terminal (\"TTY\") attached, process.stdin will, by default, be initialized as an instance of tty.ReadStream and both process.stdout and process.stderr will, by default, be instances of tty.WriteStream. The preferred method of determining whether Node.js is being run within a TTY context is to check that the value of the process.stdout.isTTY property is true:\n\n$ node -p -e \"Boolean(process.stdout.isTTY)\"\ntrue\n$ node -p -e \"Boolean(process.stdout.isTTY)\" | cat\nfalse\nIn most cases, there should be little to no reason for an application to manually create instances of the tty.ReadStream and tty.WriteStream classes.\n\nClass: tty.ReadStream#\nAdded in: v0.5.8\nExtends: <net.Socket>\nRepresents the readable side of a TTY. In normal circumstances process.stdin will be the only tty.ReadStream instance in a Node.js process and there should be no reason to create additional instances.\n\nreadStream.isRaw#\nAdded in: v0.7.7\nA boolean that is true if the TTY is currently configured to operate as a raw device. Defaults to false.\n\nreadStream.isTTY#\nAdded in: v0.5.8\nA boolean that is always true for tty.ReadStream instances.\n\nreadStream.setRawMode(mode)#\nAdded in: v0.7.7\nmode <boolean> If true, configures the tty.ReadStream to operate as a raw device. If false, configures the tty.ReadStream to operate in its default mode. The readStream.isRaw property will be set to the resulting mode.\nReturns: <this> The read stream instance.\nAllows configuration of tty.ReadStream so that it operates as a raw device.\n\nWhen in raw mode, input is always available character-by-character, not including modifiers. Additionally, all special processing of characters by the terminal is disabled, including echoing input characters. Ctrl+C will no longer cause a SIGINT when in this mode.\n\nClass: tty.WriteStream#\nAdded in: v0.5.8\nExtends: <net.Socket>\nRepresents the writable side of a TTY. In normal circumstances, process.stdout and process.stderr will be the only tty.WriteStream instances created for a Node.js process and there should be no reason to create additional instances.\n\nEvent: 'resize'#\nAdded in: v0.7.7\nThe 'resize' event is emitted whenever either of the writeStream.columns or writeStream.rows properties have changed. No arguments are passed to the listener callback when called.\n\nprocess.stdout.on('resize', () => {\n  console.log('screen size has changed!');\n  console.log(`${process.stdout.columns}x${process.stdout.rows}`);\n});\nwriteStream.clearLine(dir[, callback])#\nHistory\ndir <number>\n-1: to the left from cursor\n1: to the right from cursor\n0: the entire line\ncallback <Function> Invoked once the operation completes.\nReturns: <boolean> false if the stream wishes for the calling code to wait for the 'drain' event to be emitted before continuing to write additional data; otherwise true.\nwriteStream.clearLine() clears the current line of this WriteStream in a direction identified by dir.\n\nwriteStream.clearScreenDown([callback])#\nHistory\ncallback <Function> Invoked once the operation completes.\nReturns: <boolean> false if the stream wishes for the calling code to wait for the 'drain' event to be emitted before continuing to write additional data; otherwise true.\nwriteStream.clearScreenDown() clears this WriteStream from the current cursor down.\n\nwriteStream.columns#\nAdded in: v0.7.7\nA number specifying the number of columns the TTY currently has. This property is updated whenever the 'resize' event is emitted.\n\nwriteStream.cursorTo(x[, y][,", "doc_id": "868a5167-7dbe-46db-b253-a21ac05b29b7", "embedding": null, "doc_hash": "9de1d8299c7ee775cef71885f85c40566a1d743819b65021f886e76420d8c43f", "extra_info": null, "node_info": {"start": 2524468, "end": 2528024}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0d423703-fcb3-4c86-aea5-3b479c304f58", "3": "17649369-9cf1-4353-a573-c8f7c5c62a50"}}, "__type__": "1"}, "17649369-9cf1-4353-a573-c8f7c5c62a50": {"__data__": {"text": "to be emitted before continuing to write additional data; otherwise true.\nwriteStream.clearLine() clears the current line of this WriteStream in a direction identified by dir.\n\nwriteStream.clearScreenDown([callback])#\nHistory\ncallback <Function> Invoked once the operation completes.\nReturns: <boolean> false if the stream wishes for the calling code to wait for the 'drain' event to be emitted before continuing to write additional data; otherwise true.\nwriteStream.clearScreenDown() clears this WriteStream from the current cursor down.\n\nwriteStream.columns#\nAdded in: v0.7.7\nA number specifying the number of columns the TTY currently has. This property is updated whenever the 'resize' event is emitted.\n\nwriteStream.cursorTo(x[, y][, callback])#\nHistory\nx <number>\ny <number>\ncallback <Function> Invoked once the operation completes.\nReturns: <boolean> false if the stream wishes for the calling code to wait for the 'drain' event to be emitted before continuing to write additional data; otherwise true.\nwriteStream.cursorTo() moves this WriteStream's cursor to the specified position.\n\nwriteStream.getColorDepth([env])#\nAdded in: v9.9.0\nenv <Object> An object containing the environment variables to check. This enables simulating the usage of a specific terminal. Default: process.env.\nReturns: <number>\nReturns:\n\n1 for 2,\n4 for 16,\n8 for 256,\n24 for 16,777,216 colors supported.\nUse this to determine what colors the terminal supports. Due to the nature of colors in terminals it is possible to either have false positives or false negatives. It depends on process information and the environment variables that may lie about what terminal is used. It is possible to pass in an env object to simulate the usage of a specific terminal. This can be useful to check how specific environment settings behave.\n\nTo enforce a specific color support, use one of the below environment settings.\n\n2 colors: FORCE_COLOR = 0 (Disables colors)\n16 colors: FORCE_COLOR = 1\n256 colors: FORCE_COLOR = 2\n16,777,216 colors: FORCE_COLOR = 3\nDisabling color support is also possible by using the NO_COLOR and NODE_DISABLE_COLORS environment variables.\n\nwriteStream.getWindowSize()#\nAdded in: v0.7.7\nReturns: <number[]>\nwriteStream.getWindowSize() returns the size of the TTY corresponding to this WriteStream. The array is of the type [numColumns, numRows] where numColumns and numRows represent the number of columns and rows in the corresponding TTY.\n\nwriteStream.hasColors([count][, env])#\nAdded in: v11.13.0, v10.16.0\ncount <integer> The number of colors that are requested (minimum 2). Default: 16.\nenv <Object> An object containing the environment variables to check. This enables simulating the usage of a specific terminal. Default: process.env.\nReturns: <boolean>\nReturns true if the writeStream supports at least as many colors as provided in count. Minimum support is 2 (black and white).\n\nThis has the same false positives and negatives as described in writeStream.getColorDepth().\n\nprocess.stdout.hasColors();\n// Returns true or false depending on if `stdout` supports at least 16 colors.\nprocess.stdout.hasColors(256);\n// Returns true or false depending on if `stdout` supports at least 256 colors.\nprocess.stdout.hasColors({ TMUX: '1' });\n// Returns true.\nprocess.stdout.hasColors(2 ** 24, { TMUX: '1' });\n// Returns false (the environment setting pretends to support 2 ** 8 colors).\nwriteStream.isTTY#\nAdded in: v0.5.8\nA boolean that is always true.\n\nwriteStream.moveCursor(dx, dy[, callback])#\nHistory\ndx <number>\ndy <number>\ncallback <Function> Invoked once the operation completes.\nReturns:", "doc_id": "17649369-9cf1-4353-a573-c8f7c5c62a50", "embedding": null, "doc_hash": "7106f90ee7360d416d096ac4e27b7b79b60776b0768c2f700a2054a19f1263a4", "extra_info": null, "node_info": {"start": 2527949, "end": 2531546}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "868a5167-7dbe-46db-b253-a21ac05b29b7", "3": "b9bf9179-5546-44cb-bedc-6a50ee45b101"}}, "__type__": "1"}, "b9bf9179-5546-44cb-bedc-6a50ee45b101": {"__data__": {"text": "Returns true or false depending on if `stdout` supports at least 16 colors.\nprocess.stdout.hasColors(256);\n// Returns true or false depending on if `stdout` supports at least 256 colors.\nprocess.stdout.hasColors({ TMUX: '1' });\n// Returns true.\nprocess.stdout.hasColors(2 ** 24, { TMUX: '1' });\n// Returns false (the environment setting pretends to support 2 ** 8 colors).\nwriteStream.isTTY#\nAdded in: v0.5.8\nA boolean that is always true.\n\nwriteStream.moveCursor(dx, dy[, callback])#\nHistory\ndx <number>\ndy <number>\ncallback <Function> Invoked once the operation completes.\nReturns: <boolean> false if the stream wishes for the calling code to wait for the 'drain' event to be emitted before continuing to write additional data; otherwise true.\nwriteStream.moveCursor() moves this WriteStream's cursor relative to its current position.\n\nwriteStream.rows#\nAdded in: v0.7.7\nA number specifying the number of rows the TTY currently has. This property is updated whenever the 'resize' event is emitted.\n\ntty.isatty(fd)#\nAdded in: v0.5.8\nfd <number> A numeric file descriptor\nReturns: <boolean>\nThe tty.isatty() method returns true if the given fd is associated with a TTY and false if it is not, including whenever fd is not a non-negative integer.\n\nUDP/datagram sockets#\nStability: 2 - Stable\nSource Code: lib/dgram.js\n\nThe node:dgram module provides an implementation of UDP datagram sockets.\n\nimport dgram from 'node:dgram';\n\nconst server = dgram.createSocket('udp4');\n\nserver.on('error', (err) => {\n  console.error(`server error:\\n${err.stack}`);\n  server.close();\n});\n\nserver.on('message', (msg, rinfo) => {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on('listening', () => {\n  const address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// Prints: server listening 0.0.0.0:41234\nClass: dgram.Socket#\nAdded in: v0.1.99\nExtends: <EventEmitter>\nEncapsulates the datagram functionality.\n\nNew instances of dgram.Socket are created using dgram.createSocket(). The new keyword is not to be used to create dgram.Socket instances.\n\nEvent: 'close'#\nAdded in: v0.1.99\nThe 'close' event is emitted after a socket is closed with close(). Once triggered, no new 'message' events will be emitted on this socket.\n\nEvent: 'connect'#\nAdded in: v12.0.0\nThe 'connect' event is emitted after a socket is associated to a remote address as a result of a successful connect() call.\n\nEvent: 'error'#\nAdded in: v0.1.99\nexception <Error>\nThe 'error' event is emitted whenever any error occurs. The event handler function is passed a single Error object.\n\nEvent: 'listening'#\nAdded in: v0.1.99\nThe 'listening' event is emitted once the dgram.Socket is addressable and can receive data. This happens either explicitly with socket.bind() or implicitly the first time data is sent using socket.send(). Until the dgram.Socket is listening, the underlying system resources do not exist and calls such as socket.address() and socket.setTTL() will fail.\n\nEvent: 'message'#\nHistory\nThe 'message' event is emitted when a new datagram is available on a socket. The event handler function is passed two arguments: msg and rinfo.\n\nmsg <Buffer> The message.\nrinfo <Object> Remote address information.\naddress <string> The", "doc_id": "b9bf9179-5546-44cb-bedc-6a50ee45b101", "embedding": null, "doc_hash": "8322acf41636b3dab64da4178bd2f87260f067aed51a1f95e2a4a90f370f546c", "extra_info": null, "node_info": {"start": 2531680, "end": 2534973}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "17649369-9cf1-4353-a573-c8f7c5c62a50", "3": "43bcd484-6c23-4db3-8598-ca885aa66ce3"}}, "__type__": "1"}, "43bcd484-6c23-4db3-8598-ca885aa66ce3": {"__data__": {"text": "The event handler function is passed a single Error object.\n\nEvent: 'listening'#\nAdded in: v0.1.99\nThe 'listening' event is emitted once the dgram.Socket is addressable and can receive data. This happens either explicitly with socket.bind() or implicitly the first time data is sent using socket.send(). Until the dgram.Socket is listening, the underlying system resources do not exist and calls such as socket.address() and socket.setTTL() will fail.\n\nEvent: 'message'#\nHistory\nThe 'message' event is emitted when a new datagram is available on a socket. The event handler function is passed two arguments: msg and rinfo.\n\nmsg <Buffer> The message.\nrinfo <Object> Remote address information.\naddress <string> The sender address.\nfamily <string> The address family ('IPv4' or 'IPv6').\nport <number> The sender port.\nsize <number> The message size.\nIf the source address of the incoming packet is an IPv6 link-local address, the interface name is added to the address. For example, a packet received on the en0 interface might have the address field set to 'fe80::2618:1234:ab11:3b9c%en0', where '%en0' is the interface name as a zone ID suffix.\n\nsocket.addMembership(multicastAddress[, multicastInterface])#\nAdded in: v0.6.9\nmulticastAddress <string>\nmulticastInterface <string>\nTells the kernel to join a multicast group at the given multicastAddress and multicastInterface using the IP_ADD_MEMBERSHIP socket option. If the multicastInterface argument is not specified, the operating system will choose one interface and will add membership to it. To add membership to every available interface, call addMembership multiple times, once per interface.\n\nWhen called on an unbound socket, this method will implicitly bind to a random port, listening on all interfaces.\n\nWhen sharing a UDP socket across multiple cluster workers, the socket.addMembership() function must be called only once or an EADDRINUSE error will occur:\n\nimport cluster from 'node:cluster';\nimport dgram from 'node:dgram';\n\nif (cluster.isPrimary) {\n  cluster.fork(); // Works ok.\n  cluster.fork(); // Fails with EADDRINUSE.\n} else {\n  const s = dgram.createSocket('udp4');\n  s.bind(1234, () => {\n    s.addMembership('224.0.0.114');\n  });\n}\nsocket.addSourceSpecificMembership(sourceAddress, groupAddress[, multicastInterface])#\nAdded in: v13.1.0, v12.16.0\nsourceAddress <string>\ngroupAddress <string>\nmulticastInterface <string>\nTells the kernel to join a source-specific multicast channel at the given sourceAddress and groupAddress, using the multicastInterface with the IP_ADD_SOURCE_MEMBERSHIP socket option. If the multicastInterface argument is not specified, the operating system will choose one interface and will add membership to it. To add membership to every available interface, call socket.addSourceSpecificMembership() multiple times, once per interface.\n\nWhen called on an unbound socket, this method will implicitly bind to a random port, listening on all interfaces.\n\nsocket.address()#\nAdded in: v0.1.99\nReturns: <Object>\nReturns an object containing the address information for a socket. For UDP sockets, this object will contain address, family, and port properties.\n\nThis method throws EBADF if called on an unbound socket.\n\nsocket.bind([port][, address][, callback])#\nHistory\nport <integer>\naddress <string>\ncallback <Function> with no parameters. Called when binding is complete.\nFor UDP sockets, causes the dgram.Socket to listen for datagram messages on a named port and optional address. If port is not specified or is 0, the operating system will attempt to bind to a random port. If address is not specified, the operating system will attempt to listen on all addresses. Once binding", "doc_id": "43bcd484-6c23-4db3-8598-ca885aa66ce3", "embedding": null, "doc_hash": "b20d821f1cdba732bb3491f8fff0eea5cc0719a5b776a03275b3ed341acb1559", "extra_info": null, "node_info": {"start": 2534875, "end": 2538554}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b9bf9179-5546-44cb-bedc-6a50ee45b101", "3": "eb21a1c6-831f-4ae8-840c-583fd6602758"}}, "__type__": "1"}, "eb21a1c6-831f-4ae8-840c-583fd6602758": {"__data__": {"text": "interfaces.\n\nsocket.address()#\nAdded in: v0.1.99\nReturns: <Object>\nReturns an object containing the address information for a socket. For UDP sockets, this object will contain address, family, and port properties.\n\nThis method throws EBADF if called on an unbound socket.\n\nsocket.bind([port][, address][, callback])#\nHistory\nport <integer>\naddress <string>\ncallback <Function> with no parameters. Called when binding is complete.\nFor UDP sockets, causes the dgram.Socket to listen for datagram messages on a named port and optional address. If port is not specified or is 0, the operating system will attempt to bind to a random port. If address is not specified, the operating system will attempt to listen on all addresses. Once binding is complete, a 'listening' event is emitted and the optional callback function is called.\n\nSpecifying both a 'listening' event listener and passing a callback to the socket.bind() method is not harmful but not very useful.\n\nA bound datagram socket keeps the Node.js process running to receive datagram messages.\n\nIf binding fails, an 'error' event is generated. In rare case (e.g. attempting to bind with a closed socket), an Error may be thrown.\n\nExample of a UDP server listening on port 41234:\n\nimport dgram from 'node:dgram';\n\nconst server = dgram.createSocket('udp4');\n\nserver.on('error', (err) => {\n  console.error(`server error:\\n${err.stack}`);\n  server.close();\n});\n\nserver.on('message', (msg, rinfo) => {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on('listening', () => {\n  const address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// Prints: server listening 0.0.0.0:41234\nsocket.bind(options[, callback])#\nAdded in: v0.11.14\noptions <Object> Required. Supports the following properties:\nport <integer>\naddress <string>\nexclusive <boolean>\nfd <integer>\ncallback <Function>\nFor UDP sockets, causes the dgram.Socket to listen for datagram messages on a named port and optional address that are passed as properties of an options object passed as the first argument. If port is not specified or is 0, the operating system will attempt to bind to a random port. If address is not specified, the operating system will attempt to listen on all addresses. Once binding is complete, a 'listening' event is emitted and the optional callback function is called.\n\nThe options object may contain a fd property. When a fd greater than 0 is set, it will wrap around an existing socket with the given file descriptor. In this case, the properties of port and address will be ignored.\n\nSpecifying both a 'listening' event listener and passing a callback to the socket.bind() method is not harmful but not very useful.\n\nThe options object may contain an additional exclusive property that is used when using dgram.Socket objects with the cluster module. When exclusive is set to false (the default), cluster workers will use the same underlying socket handle allowing connection handling duties to be shared. When exclusive is true, however, the handle is not shared and attempted port sharing results in an error.\n\nA bound datagram socket keeps the Node.js process running to receive datagram messages.\n\nIf binding fails, an 'error' event is generated. In rare case (e.g. attempting to bind with a closed socket), an Error may be thrown.\n\nAn example socket listening on an exclusive port is shown below.\n\nsocket.bind({\n  address: 'localhost',\n  port: 8000,\n  exclusive: true,\n});\nsocket.close([callback])#\nAdded in: v0.1.99\ncallback <Function> Called when the socket has been closed.\nClose the underlying socket and stop listening for data on it. If a callback is provided, it is", "doc_id": "eb21a1c6-831f-4ae8-840c-583fd6602758", "embedding": null, "doc_hash": "9bbe6577f14a622b9ec50554ee3576b8731d5cebbd39f7ef595e93ef071a5d1a", "extra_info": null, "node_info": {"start": 2538533, "end": 2542259}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "43bcd484-6c23-4db3-8598-ca885aa66ce3", "3": "1dd30100-91b9-46ff-a7b7-489af0113098"}}, "__type__": "1"}, "1dd30100-91b9-46ff-a7b7-489af0113098": {"__data__": {"text": "connection handling duties to be shared. When exclusive is true, however, the handle is not shared and attempted port sharing results in an error.\n\nA bound datagram socket keeps the Node.js process running to receive datagram messages.\n\nIf binding fails, an 'error' event is generated. In rare case (e.g. attempting to bind with a closed socket), an Error may be thrown.\n\nAn example socket listening on an exclusive port is shown below.\n\nsocket.bind({\n  address: 'localhost',\n  port: 8000,\n  exclusive: true,\n});\nsocket.close([callback])#\nAdded in: v0.1.99\ncallback <Function> Called when the socket has been closed.\nClose the underlying socket and stop listening for data on it. If a callback is provided, it is added as a listener for the 'close' event.\n\nsocket.connect(port[, address][, callback])#\nAdded in: v12.0.0\nport <integer>\naddress <string>\ncallback <Function> Called when the connection is completed or on error.\nAssociates the dgram.Socket to a remote address and port. Every message sent by this handle is automatically sent to that destination. Also, the socket will only receive messages from that remote peer. Trying to call connect() on an already connected socket will result in an ERR_SOCKET_DGRAM_IS_CONNECTED exception. If address is not provided, '127.0.0.1' (for udp4 sockets) or '::1' (for udp6 sockets) will be used by default. Once the connection is complete, a 'connect' event is emitted and the optional callback function is called. In case of failure, the callback is called or, failing this, an 'error' event is emitted.\n\nsocket.disconnect()#\nAdded in: v12.0.0\nA synchronous function that disassociates a connected dgram.Socket from its remote address. Trying to call disconnect() on an unbound or already disconnected socket will result in an ERR_SOCKET_DGRAM_NOT_CONNECTED exception.\n\nsocket.dropMembership(multicastAddress[, multicastInterface])#\nAdded in: v0.6.9\nmulticastAddress <string>\nmulticastInterface <string>\nInstructs the kernel to leave a multicast group at multicastAddress using the IP_DROP_MEMBERSHIP socket option. This method is automatically called by the kernel when the socket is closed or the process terminates, so most apps will never have reason to call this.\n\nIf multicastInterface is not specified, the operating system will attempt to drop membership on all valid interfaces.\n\nsocket.dropSourceSpecificMembership(sourceAddress, groupAddress[, multicastInterface])#\nAdded in: v13.1.0, v12.16.0\nsourceAddress <string>\ngroupAddress <string>\nmulticastInterface <string>\nInstructs the kernel to leave a source-specific multicast channel at the given sourceAddress and groupAddress using the IP_DROP_SOURCE_MEMBERSHIP socket option. This method is automatically called by the kernel when the socket is closed or the process terminates, so most apps will never have reason to call this.\n\nIf multicastInterface is not specified, the operating system will attempt to drop membership on all valid interfaces.\n\nsocket.getRecvBufferSize()#\nAdded in: v8.7.0\nReturns: <number> the SO_RCVBUF socket receive buffer size in bytes.\nThis method throws ERR_SOCKET_BUFFER_SIZE if called on an unbound socket.\n\nsocket.getSendBufferSize()#\nAdded in: v8.7.0\nReturns: <number> the SO_SNDBUF socket send buffer size in bytes.\nThis method throws ERR_SOCKET_BUFFER_SIZE if called on an unbound socket.\n\nsocket.getSendQueueSize()#\nAdded in: v18.8.0\nReturns: <number> Number of bytes queued for sending.\nsocket.getSendQueueCount()#\nAdded in: v18.8.0\nReturns: <number> Number of send requests currently in the queue awaiting to be", "doc_id": "1dd30100-91b9-46ff-a7b7-489af0113098", "embedding": null, "doc_hash": "9083646cc8e085f293774a5d03f8787bc17b22ada76ccc4a43ce4b20504f818c", "extra_info": null, "node_info": {"start": 2542291, "end": 2545850}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "eb21a1c6-831f-4ae8-840c-583fd6602758", "3": "7fc02c10-c46c-4c67-ba14-b120db61a040"}}, "__type__": "1"}, "7fc02c10-c46c-4c67-ba14-b120db61a040": {"__data__": {"text": "in: v8.7.0\nReturns: <number> the SO_RCVBUF socket receive buffer size in bytes.\nThis method throws ERR_SOCKET_BUFFER_SIZE if called on an unbound socket.\n\nsocket.getSendBufferSize()#\nAdded in: v8.7.0\nReturns: <number> the SO_SNDBUF socket send buffer size in bytes.\nThis method throws ERR_SOCKET_BUFFER_SIZE if called on an unbound socket.\n\nsocket.getSendQueueSize()#\nAdded in: v18.8.0\nReturns: <number> Number of bytes queued for sending.\nsocket.getSendQueueCount()#\nAdded in: v18.8.0\nReturns: <number> Number of send requests currently in the queue awaiting to be processed.\nsocket.ref()#\nAdded in: v0.9.1\nReturns: <dgram.Socket>\nBy default, binding a socket will cause it to block the Node.js process from exiting as long as the socket is open. The socket.unref() method can be used to exclude the socket from the reference counting that keeps the Node.js process active. The socket.ref() method adds the socket back to the reference counting and restores the default behavior.\n\nCalling socket.ref() multiples times will have no additional effect.\n\nThe socket.ref() method returns a reference to the socket so calls can be chained.\n\nsocket.remoteAddress()#\nAdded in: v12.0.0\nReturns: <Object>\nReturns an object containing the address, family, and port of the remote endpoint. This method throws an ERR_SOCKET_DGRAM_NOT_CONNECTED exception if the socket is not connected.\n\nsocket.send(msg[, offset, length][, port][, address][, callback])#\nHistory\nmsg <Buffer> | <TypedArray> | <DataView> | <string> | <Array> Message to be sent.\noffset <integer> Offset in the buffer where the message starts.\nlength <integer> Number of bytes in the message.\nport <integer> Destination port.\naddress <string> Destination host name or IP address.\ncallback <Function> Called when the message has been sent.\nBroadcasts a datagram on the socket. For connectionless sockets, the destination port and address must be specified. Connected sockets, on the other hand, will use their associated remote endpoint, so the port and address arguments must not be set.\n\nThe msg argument contains the message to be sent. Depending on its type, different behavior can apply. If msg is a Buffer, any TypedArray or a DataView, the offset and length specify the offset within the Buffer where the message begins and the number of bytes in the message, respectively. If msg is a String, then it is automatically converted to a Buffer with 'utf8' encoding. With messages that contain multi-byte characters, offset and length will be calculated with respect to byte length and not the character position. If msg is an array, offset and length must not be specified.\n\nThe address argument is a string. If the value of address is a host name, DNS will be used to resolve the address of the host. If address is not provided or otherwise nullish, '127.0.0.1' (for udp4 sockets) or '::1' (for udp6 sockets) will be used by default.\n\nIf the socket has not been previously bound with a call to bind, the socket is assigned a random port number and is bound to the \"all interfaces\" address ('0.0.0.0' for udp4 sockets, '::0' for udp6 sockets.)\n\nAn optional callback function may be specified to as a way of reporting DNS errors or for determining when it is safe to reuse the buf object. DNS lookups delay the time to send for at least one tick of the Node.js event loop.\n\nThe only way to know for sure that the datagram has been sent is by using a callback. If an error occurs and a callback is given, the error will be passed as the first argument to the callback. If a callback is not given, the error is emitted as an 'error' event on the socket object.\n\nOffset and length are optional but both must be set if either are used. They are supported only when the first argument is a", "doc_id": "7fc02c10-c46c-4c67-ba14-b120db61a040", "embedding": null, "doc_hash": "ba3082b318c50cf427da50922883a1b233d6fd08f80726ec54bbbc45589e73f6", "extra_info": null, "node_info": {"start": 2545956, "end": 2549694}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1dd30100-91b9-46ff-a7b7-489af0113098", "3": "8635794b-809c-42ca-8257-bb1528316aca"}}, "__type__": "1"}, "8635794b-809c-42ca-8257-bb1528316aca": {"__data__": {"text": "port number and is bound to the \"all interfaces\" address ('0.0.0.0' for udp4 sockets, '::0' for udp6 sockets.)\n\nAn optional callback function may be specified to as a way of reporting DNS errors or for determining when it is safe to reuse the buf object. DNS lookups delay the time to send for at least one tick of the Node.js event loop.\n\nThe only way to know for sure that the datagram has been sent is by using a callback. If an error occurs and a callback is given, the error will be passed as the first argument to the callback. If a callback is not given, the error is emitted as an 'error' event on the socket object.\n\nOffset and length are optional but both must be set if either are used. They are supported only when the first argument is a Buffer, a TypedArray, or a DataView.\n\nThis method throws ERR_SOCKET_BAD_PORT if called on an unbound socket.\n\nExample of sending a UDP packet to a port on localhost;\n\nimport dgram from 'node:dgram';\nimport { Buffer } from 'node:buffer';\n\nconst message = Buffer.from('Some bytes');\nconst client = dgram.createSocket('udp4');\nclient.send(message, 41234, 'localhost', (err) => {\n  client.close();\n});\nExample of sending a UDP packet composed of multiple buffers to a port on 127.0.0.1;\n\nimport dgram from 'node:dgram';\nimport { Buffer } from 'node:buffer';\n\nconst buf1 = Buffer.from('Some ');\nconst buf2 = Buffer.from('bytes');\nconst client = dgram.createSocket('udp4');\nclient.send([buf1, buf2], 41234, (err) => {\n  client.close();\n});\nSending multiple buffers might be faster or slower depending on the application and operating system. Run benchmarks to determine the optimal strategy on a case-by-case basis. Generally speaking, however, sending multiple buffers is faster.\n\nExample of sending a UDP packet using a socket connected to a port on localhost:\n\nimport dgram from 'node:dgram';\nimport { Buffer } from 'node:buffer';\n\nconst message = Buffer.from('Some bytes');\nconst client = dgram.createSocket('udp4');\nclient.connect(41234, 'localhost', (err) => {\n  client.send(message, (err) => {\n    client.close();\n  });\n});\nNote about UDP datagram size#\nThe maximum size of an IPv4/v6 datagram depends on the MTU (Maximum Transmission Unit) and on the Payload Length field size.\n\nThe Payload Length field is 16 bits wide, which means that a normal payload cannot exceed 64K octets including the internet header and data (65,507 bytes = 65,535 \u2212 8 bytes UDP header \u2212 20 bytes IP header); this is generally true for loopback interfaces, but such long datagram messages are impractical for most hosts and networks.\n\nThe MTU is the largest size a given link layer technology can support for datagram messages. For any link, IPv4 mandates a minimum MTU of 68 octets, while the recommended MTU for IPv4 is 576 (typically recommended as the MTU for dial-up type applications), whether they arrive whole or in fragments.\n\nFor IPv6, the minimum MTU is 1280 octets. However, the mandatory minimum fragment reassembly buffer size is 1500 octets. The value of 68 octets is very small, since most current link layer technologies, like Ethernet, have a minimum MTU of 1500.\n\nIt is impossible to know in advance the MTU of each link through which a packet might travel. Sending a datagram greater than the receiver MTU will not work because the packet will get silently dropped without informing the source that the data did not reach its intended recipient.\n\nsocket.setBroadcast(flag)#\nAdded in: v0.6.9\nflag <boolean>\nSets or clears the SO_BROADCAST socket option. When set to true, UDP packets may be sent to a local interface's broadcast address.\n\nThis", "doc_id": "8635794b-809c-42ca-8257-bb1528316aca", "embedding": null, "doc_hash": "aacc9fd2e07d166fb538beb64288426fa65d87f54252ec3e0c84fc9530498391", "extra_info": null, "node_info": {"start": 2549587, "end": 2553179}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7fc02c10-c46c-4c67-ba14-b120db61a040", "3": "f0008f03-fb03-4545-8173-6fad740d37d7"}}, "__type__": "1"}, "f0008f03-fb03-4545-8173-6fad740d37d7": {"__data__": {"text": "the minimum MTU is 1280 octets. However, the mandatory minimum fragment reassembly buffer size is 1500 octets. The value of 68 octets is very small, since most current link layer technologies, like Ethernet, have a minimum MTU of 1500.\n\nIt is impossible to know in advance the MTU of each link through which a packet might travel. Sending a datagram greater than the receiver MTU will not work because the packet will get silently dropped without informing the source that the data did not reach its intended recipient.\n\nsocket.setBroadcast(flag)#\nAdded in: v0.6.9\nflag <boolean>\nSets or clears the SO_BROADCAST socket option. When set to true, UDP packets may be sent to a local interface's broadcast address.\n\nThis method throws EBADF if called on an unbound socket.\n\nsocket.setMulticastInterface(multicastInterface)#\nAdded in: v8.6.0\nmulticastInterface <string>\nAll references to scope in this section are referring to IPv6 Zone Indices, which are defined by RFC 4007. In string form, an IP with a scope index is written as 'IP%scope' where scope is an interface name or interface number.\n\nSets the default outgoing multicast interface of the socket to a chosen interface or back to system interface selection. The multicastInterface must be a valid string representation of an IP from the socket's family.\n\nFor IPv4 sockets, this should be the IP configured for the desired physical interface. All packets sent to multicast on the socket will be sent on the interface determined by the most recent successful use of this call.\n\nFor IPv6 sockets, multicastInterface should include a scope to indicate the interface as in the examples that follow. In IPv6, individual send calls can also use explicit scope in addresses, so only packets sent to a multicast address without specifying an explicit scope are affected by the most recent successful use of this call.\n\nThis method throws EBADF if called on an unbound socket.\n\nExample: IPv6 outgoing multicast interface#\nOn most systems, where scope format uses the interface name:\n\nconst socket = dgram.createSocket('udp6');\n\nsocket.bind(1234, () => {\n  socket.setMulticastInterface('::%eth1');\n});\nOn Windows, where scope format uses an interface number:\n\nconst socket = dgram.createSocket('udp6');\n\nsocket.bind(1234, () => {\n  socket.setMulticastInterface('::%2');\n});\nExample: IPv4 outgoing multicast interface#\nAll systems use an IP of the host on the desired physical interface:\n\nconst socket = dgram.createSocket('udp4');\n\nsocket.bind(1234, () => {\n  socket.setMulticastInterface('10.0.0.2');\n});\nCall results#\nA call on a socket that is not ready to send or no longer open may throw a Not running Error.\n\nIf multicastInterface can not be parsed into an IP then an EINVAL System Error is thrown.\n\nOn IPv4, if multicastInterface is a valid address but does not match any interface, or if the address does not match the family then a System Error such as EADDRNOTAVAIL or EPROTONOSUP is thrown.\n\nOn IPv6, most errors with specifying or omitting scope will result in the socket continuing to use (or returning to) the system's default interface selection.\n\nA socket's address family's ANY address (IPv4 '0.0.0.0' or IPv6 '::') can be used to return control of the sockets default outgoing interface to the system for future multicast packets.\n\nsocket.setMulticastLoopback(flag)#\nAdded in: v0.3.8\nflag <boolean>\nSets or clears the IP_MULTICAST_LOOP socket option. When set to true, multicast packets will also be received on the local interface.\n\nThis method throws EBADF if called on an unbound socket.\n\nsocket.setMulticastTTL(ttl)#\nAdded in: v0.3.8\nttl", "doc_id": "f0008f03-fb03-4545-8173-6fad740d37d7", "embedding": null, "doc_hash": "d30eb7e12bd8b240fdcaf34b487e7fd78cd38c347e44d000e38e45e6b5e25c8b", "extra_info": null, "node_info": {"start": 2553185, "end": 2556789}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8635794b-809c-42ca-8257-bb1528316aca", "3": "8c266d43-bccf-4ab6-a2df-a33f031931c7"}}, "__type__": "1"}, "8c266d43-bccf-4ab6-a2df-a33f031931c7": {"__data__": {"text": "or omitting scope will result in the socket continuing to use (or returning to) the system's default interface selection.\n\nA socket's address family's ANY address (IPv4 '0.0.0.0' or IPv6 '::') can be used to return control of the sockets default outgoing interface to the system for future multicast packets.\n\nsocket.setMulticastLoopback(flag)#\nAdded in: v0.3.8\nflag <boolean>\nSets or clears the IP_MULTICAST_LOOP socket option. When set to true, multicast packets will also be received on the local interface.\n\nThis method throws EBADF if called on an unbound socket.\n\nsocket.setMulticastTTL(ttl)#\nAdded in: v0.3.8\nttl <integer>\nSets the IP_MULTICAST_TTL socket option. While TTL generally stands for \"Time to Live\", in this context it specifies the number of IP hops that a packet is allowed to travel through, specifically for multicast traffic. Each router or gateway that forwards a packet decrements the TTL. If the TTL is decremented to 0 by a router, it will not be forwarded.\n\nThe ttl argument may be between 0 and 255. The default on most systems is 1.\n\nThis method throws EBADF if called on an unbound socket.\n\nsocket.setRecvBufferSize(size)#\nAdded in: v8.7.0\nsize <integer>\nSets the SO_RCVBUF socket option. Sets the maximum socket receive buffer in bytes.\n\nThis method throws ERR_SOCKET_BUFFER_SIZE if called on an unbound socket.\n\nsocket.setSendBufferSize(size)#\nAdded in: v8.7.0\nsize <integer>\nSets the SO_SNDBUF socket option. Sets the maximum socket send buffer in bytes.\n\nThis method throws ERR_SOCKET_BUFFER_SIZE if called on an unbound socket.\n\nsocket.setTTL(ttl)#\nAdded in: v0.1.101\nttl <integer>\nSets the IP_TTL socket option. While TTL generally stands for \"Time to Live\", in this context it specifies the number of IP hops that a packet is allowed to travel through. Each router or gateway that forwards a packet decrements the TTL. If the TTL is decremented to 0 by a router, it will not be forwarded. Changing TTL values is typically done for network probes or when multicasting.\n\nThe ttl argument may be between 1 and 255. The default on most systems is 64.\n\nThis method throws EBADF if called on an unbound socket.\n\nsocket.unref()#\nAdded in: v0.9.1\nReturns: <dgram.Socket>\nBy default, binding a socket will cause it to block the Node.js process from exiting as long as the socket is open. The socket.unref() method can be used to exclude the socket from the reference counting that keeps the Node.js process active, allowing the process to exit even if the socket is still listening.\n\nCalling socket.unref() multiple times will have no addition effect.\n\nThe socket.unref() method returns a reference to the socket so calls can be chained.\n\nnode:dgram module functions#\ndgram.createSocket(options[, callback])#\nHistory\noptions <Object> Available options are:\ntype <string> The family of socket. Must be either 'udp4' or 'udp6'. Required.\nreuseAddr <boolean> When true socket.bind() will reuse the address, even if another process has already bound a socket on it. Default: false.\nipv6Only <boolean> Setting ipv6Only to true will disable dual-stack support, i.e., binding to address :: won't make 0.0.0.0 be bound. Default: false.\nrecvBufferSize <number> Sets the SO_RCVBUF socket value.\nsendBufferSize <number> Sets the SO_SNDBUF socket value.\nlookup <Function> Custom lookup function. Default: dns.lookup().\nsignal <AbortSignal> An AbortSignal", "doc_id": "8c266d43-bccf-4ab6-a2df-a33f031931c7", "embedding": null, "doc_hash": "9d57993df1947f86a38f797a6ec47a95927fb2b7a6a83fae126010e4ff640e77", "extra_info": null, "node_info": {"start": 2556858, "end": 2560229}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f0008f03-fb03-4545-8173-6fad740d37d7", "3": "37cc330c-9931-408a-86fc-98b4f25cab0f"}}, "__type__": "1"}, "37cc330c-9931-408a-86fc-98b4f25cab0f": {"__data__": {"text": "<Object> Available options are:\ntype <string> The family of socket. Must be either 'udp4' or 'udp6'. Required.\nreuseAddr <boolean> When true socket.bind() will reuse the address, even if another process has already bound a socket on it. Default: false.\nipv6Only <boolean> Setting ipv6Only to true will disable dual-stack support, i.e., binding to address :: won't make 0.0.0.0 be bound. Default: false.\nrecvBufferSize <number> Sets the SO_RCVBUF socket value.\nsendBufferSize <number> Sets the SO_SNDBUF socket value.\nlookup <Function> Custom lookup function. Default: dns.lookup().\nsignal <AbortSignal> An AbortSignal that may be used to close a socket.\ncallback <Function> Attached as a listener for 'message' events. Optional.\nReturns: <dgram.Socket>\nCreates a dgram.Socket object. Once the socket is created, calling socket.bind() will instruct the socket to begin listening for datagram messages. When address and port are not passed to socket.bind() the method will bind the socket to the \"all interfaces\" address on a random port (it does the right thing for both udp4 and udp6 sockets). The bound address and port can be retrieved using socket.address().address and socket.address().port.\n\nIf the signal option is enabled, calling .abort() on the corresponding AbortController is similar to calling .close() on the socket:\n\nconst controller = new AbortController();\nconst { signal } = controller;\nconst server = dgram.createSocket({ type: 'udp4', signal });\nserver.on('message', (msg, rinfo) => {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n// Later, when you want to close the server.\ncontroller.abort();\ndgram.createSocket(type[, callback])#\nAdded in: v0.1.99\ntype <string> Either 'udp4' or 'udp6'.\ncallback <Function> Attached as a listener to 'message' events.\nReturns: <dgram.Socket>\nCreates a dgram.Socket object of the specified type.\n\nOnce the socket is created, calling socket.bind() will instruct the socket to begin listening for datagram messages. When address and port are not passed to socket.bind() the method will bind the socket to the \"all interfaces\" address on a random port (it does the right thing for both udp4 and udp6 sockets). The bound address and port can be retrieved using socket.address().address and socket.address().port.\n\nURL#\nStability: 2 - Stable\nSource Code: lib/url.js\n\nThe node:url module provides utilities for URL resolution and parsing. It can be accessed using:\n\nimport url from 'node:url';\nURL strings and URL objects#\nA URL string is a structured string containing multiple meaningful components. When parsed, a URL object is returned containing properties for each of these components.\n\nThe node:url module provides two APIs for working with URLs: a legacy API that is Node.js specific, and a newer API that implements the same WHATWG URL Standard used by web browsers.\n\nA comparison between the WHATWG and legacy APIs is provided below. Above the URL 'https://user:pass@sub.example.com:8080/p/a/t/h?query=string#hash', properties of an object returned by the legacy url.parse() are shown. Below it are properties of a WHATWG URL object.\n\nWHATWG URL's origin property includes protocol and host, but not username or password.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                              href                                             ", "doc_id": "37cc330c-9931-408a-86fc-98b4f25cab0f", "embedding": null, "doc_hash": "2cfc24b1cdf0940c8ff330558c671136154da5f92a1d72f05868fd0e1b222e93", "extra_info": null, "node_info": {"start": 2560229, "end": 2563637}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8c266d43-bccf-4ab6-a2df-a33f031931c7", "3": "9b23b0e4-81ef-4b48-8fb2-8f88920fbeed"}}, "__type__": "1"}, "9b23b0e4-81ef-4b48-8fb2-8f88920fbeed": {"__data__": {"text": "the URL 'https://user:pass@sub.example.com:8080/p/a/t/h?query=string#hash', properties of an object returned by the legacy url.parse() are shown. Below it are properties of a WHATWG URL object.\n\nWHATWG URL's origin property includes protocol and host, but not username or password.\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                              href                                              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 protocol \u2502  \u2502        auth         \u2502          host          \u2502           path            \u2502 hash  \u2502\n\u2502          \u2502  \u2502                     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524       \u2502\n\u2502          \u2502  \u2502                     \u2502    hostname     \u2502 port \u2502 pathname \u2502     search     \u2502       \u2502\n\u2502          \u2502  \u2502                     \u2502                 \u2502      \u2502          \u251c\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524       \u2502\n\u2502          \u2502  \u2502                     \u2502                 \u2502      \u2502          \u2502 \u2502    query     \u2502       \u2502\n\"  https:   //    user   :   pass   @ sub.example.com : 8080   /p/a/t/h  ?  query=string   #hash \"\n\u2502          \u2502  \u2502          \u2502          \u2502    hostname     \u2502 port \u2502          \u2502                \u2502       \u2502\n\u2502          \u2502  \u2502          \u2502          \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502                \u2502       \u2502\n\u2502 protocol \u2502  \u2502 username \u2502 password \u2502          host          \u2502          \u2502                \u2502       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502                \u2502       \u2502\n\u2502   origin    \u2502                    ", "doc_id": "9b23b0e4-81ef-4b48-8fb2-8f88920fbeed", "embedding": null, "doc_hash": "9a7efd69562f58a26dc227cb09edc22697e2f6fce61c38f2b3efaf7460dee3ae", "extra_info": null, "node_info": {"start": 2563824, "end": 2565429}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "37cc330c-9931-408a-86fc-98b4f25cab0f", "3": "f069d572-39e5-4229-b227-67de55ad5c62"}}, "__type__": "1"}, "f069d572-39e5-4229-b227-67de55ad5c62": {"__data__": {"text": "    \u2502                \u2502       \u2502\n\u2502 protocol \u2502  \u2502 username \u2502 password \u2502          host          \u2502          \u2502                \u2502       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502                \u2502       \u2502\n\u2502   origin    \u2502                     \u2502         origin         \u2502 pathname \u2502     search     \u2502 hash  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                              href                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n(All spaces in the \"\" line should be ignored. They are purely for formatting.)\nParsing the URL string using the WHATWG API:\n\nconst myURL =\n  new URL('https://user:pass@sub.example.com:8080/p/a/t/h?query=string#hash');\nParsing the URL string using the legacy API:\n\nimport url from 'node:url';\nconst myURL =\n  url.parse('https://user:pass@sub.example.com:8080/p/a/t/h?query=string#hash');\nConstructing a URL from component parts and getting the constructed string#\nIt is possible to construct a WHATWG URL from component parts using either the property setters or a template literal string:\n\nconst myURL = new URL('https://example.org');\nmyURL.pathname = '/a/b/c';\nmyURL.search = '?d=e';\nmyURL.hash = '#fgh';\nconst pathname = '/a/b/c';\nconst search = '?d=e';\nconst hash = '#fgh';\nconst myURL = new URL(`https://example.org${pathname}${search}${hash}`);\nTo get the constructed URL string, use the href property accessor:\n\nconsole.log(myURL.href);\nThe WHATWG URL API#\nClass: URL#\nHistory\nBrowser-compatible URL class, implemented by following the WHATWG URL Standard. Examples of parsed URLs may be found in the Standard itself. The URL class is also available on the global object.\n\nIn accordance with browser conventions, all properties of URL objects are implemented as getters and setters on the class prototype, rather than as data properties on the object itself. Thus, unlike legacy urlObjects, using the delete keyword on any properties of URL objects (e.g. delete myURL.protocol, delete myURL.pathname, etc) has no effect but will still return true.\n\nnew URL(input[, base])#\ninput <string> The absolute or relative input URL to parse. If input is relative, then base is required. If input is absolute, the base is ignored. If input is not a string, it is converted to a string first.\nbase <string> The base URL to resolve against if the input is not absolute. If base is not a string, it is converted to a string first.\nCreates a new URL object by parsing the input relative to the base. If base is passed as a string, it will be parsed equivalent to new URL(base).\n\nconst myURL = new URL('/foo', 'https://example.org/');\n//", "doc_id": "f069d572-39e5-4229-b227-67de55ad5c62", "embedding": null, "doc_hash": "4fdc9f435aeca00b35b81a67d5d0248626424857e2a1a157786afbb9ebea7231", "extra_info": null, "node_info": {"start": 2565667, "end": 2568421}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9b23b0e4-81ef-4b48-8fb2-8f88920fbeed", "3": "aaf9bfa8-079f-4727-86ca-40857182d919"}}, "__type__": "1"}, "aaf9bfa8-079f-4727-86ca-40857182d919": {"__data__": {"text": "properties of URL objects (e.g. delete myURL.protocol, delete myURL.pathname, etc) has no effect but will still return true.\n\nnew URL(input[, base])#\ninput <string> The absolute or relative input URL to parse. If input is relative, then base is required. If input is absolute, the base is ignored. If input is not a string, it is converted to a string first.\nbase <string> The base URL to resolve against if the input is not absolute. If base is not a string, it is converted to a string first.\nCreates a new URL object by parsing the input relative to the base. If base is passed as a string, it will be parsed equivalent to new URL(base).\n\nconst myURL = new URL('/foo', 'https://example.org/');\n// https://example.org/foo\nThe URL constructor is accessible as a property on the global object. It can also be imported from the built-in url module:\n\nimport { URL } from 'node:url';\nconsole.log(URL === globalThis.URL); // Prints 'true'.\nA TypeError will be thrown if the input or base are not valid URLs. Note that an effort will be made to coerce the given values into strings. For instance:\n\nconst myURL = new URL({ toString: () => 'https://example.org/' });\n// https://example.org/\nUnicode characters appearing within the host name of input will be automatically converted to ASCII using the Punycode algorithm.\n\nconst myURL = new URL('https://\u6e2c\u8a66');\n// https://xn--g6w251d/\nThis feature is only available if the node executable was compiled with ICU enabled. If not, the domain names are passed through unchanged.\n\nIn cases where it is not known in advance if input is an absolute URL and a base is provided, it is advised to validate that the origin of the URL object is what is expected.\n\nlet myURL = new URL('http://Example.com/', 'https://example.org/');\n// http://example.com/\n\nmyURL = new URL('https://Example.com/', 'https://example.org/');\n// https://example.com/\n\nmyURL = new URL('foo://Example.com/', 'https://example.org/');\n// foo://Example.com/\n\nmyURL = new URL('http:Example.com/', 'https://example.org/');\n// http://example.com/\n\nmyURL = new URL('https:Example.com/', 'https://example.org/');\n// https://example.org/Example.com/\n\nmyURL = new URL('foo:Example.com/', 'https://example.org/');\n// foo:Example.com/\nurl.hash#\n<string>\nGets and sets the fragment portion of the URL.\n\nconst myURL = new URL('https://example.org/foo#bar');\nconsole.log(myURL.hash);\n// Prints #bar\n\nmyURL.hash = 'baz';\nconsole.log(myURL.href);\n// Prints https://example.org/foo#baz\nInvalid URL characters included in the value assigned to the hash property are percent-encoded. The selection of which characters to percent-encode may vary somewhat from what the url.parse() and url.format() methods would produce.\n\nurl.host#\n<string>\nGets and sets the host portion of the URL.\n\nconst myURL = new URL('https://example.org:81/foo');\nconsole.log(myURL.host);\n// Prints example.org:81\n\nmyURL.host = 'example.com:82';\nconsole.log(myURL.href);\n// Prints https://example.com:82/foo\nInvalid host values assigned to the host property are ignored.\n\nurl.hostname#\n<string>\nGets and sets the host name portion of the URL. The key difference between url.host and url.hostname is that url.hostname does not include the port.\n\nconst myURL = new URL('https://example.org:81/foo');\nconsole.log(myURL.hostname);\n// Prints example.org\n\n// Setting the hostname does not change", "doc_id": "aaf9bfa8-079f-4727-86ca-40857182d919", "embedding": null, "doc_hash": "f485498c32f6dbfaffcdcb317b9913a1211939f144cb7ba9ed7b9865665d4598", "extra_info": null, "node_info": {"start": 2567954, "end": 2571301}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f069d572-39e5-4229-b227-67de55ad5c62", "3": "fb5842c7-0b31-4600-b69c-eee69c4176e1"}}, "__type__": "1"}, "fb5842c7-0b31-4600-b69c-eee69c4176e1": {"__data__": {"text": "and sets the host portion of the URL.\n\nconst myURL = new URL('https://example.org:81/foo');\nconsole.log(myURL.host);\n// Prints example.org:81\n\nmyURL.host = 'example.com:82';\nconsole.log(myURL.href);\n// Prints https://example.com:82/foo\nInvalid host values assigned to the host property are ignored.\n\nurl.hostname#\n<string>\nGets and sets the host name portion of the URL. The key difference between url.host and url.hostname is that url.hostname does not include the port.\n\nconst myURL = new URL('https://example.org:81/foo');\nconsole.log(myURL.hostname);\n// Prints example.org\n\n// Setting the hostname does not change the port\nmyURL.hostname = 'example.com';\nconsole.log(myURL.href);\n// Prints https://example.com:81/foo\n\n// Use myURL.host to change the hostname and port\nmyURL.host = 'example.org:82';\nconsole.log(myURL.href);\n// Prints https://example.org:82/foo\nInvalid host name values assigned to the hostname property are ignored.\n\nurl.href#\n<string>\nGets and sets the serialized URL.\n\nconst myURL = new URL('https://example.org/foo');\nconsole.log(myURL.href);\n// Prints https://example.org/foo\n\nmyURL.href = 'https://example.com/bar';\nconsole.log(myURL.href);\n// Prints https://example.com/bar\nGetting the value of the href property is equivalent to calling url.toString().\n\nSetting the value of this property to a new value is equivalent to creating a new URL object using new URL(value). Each of the URL object's properties will be modified.\n\nIf the value assigned to the href property is not a valid URL, a TypeError will be thrown.\n\nurl.origin#\nHistory\n<string>\nGets the read-only serialization of the URL's origin.\n\nconst myURL = new URL('https://example.org/foo/bar?baz');\nconsole.log(myURL.origin);\n// Prints https://example.org\nconst idnURL = new URL('https://\u6e2c\u8a66');\nconsole.log(idnURL.origin);\n// Prints https://xn--g6w251d\n\nconsole.log(idnURL.hostname);\n// Prints xn--g6w251d\nurl.password#\n<string>\nGets and sets the password portion of the URL.\n\nconst myURL = new URL('https://abc:xyz@example.com');\nconsole.log(myURL.password);\n// Prints xyz\n\nmyURL.password = '123';\nconsole.log(myURL.href);\n// Prints https://abc:123@example.com/\nInvalid URL characters included in the value assigned to the password property are percent-encoded. The selection of which characters to percent-encode may vary somewhat from what the url.parse() and url.format() methods would produce.\n\nurl.pathname#\n<string>\nGets and sets the path portion of the URL.\n\nconst myURL = new URL('https://example.org/abc/xyz?123');\nconsole.log(myURL.pathname);\n// Prints /abc/xyz\n\nmyURL.pathname = '/abcdef';\nconsole.log(myURL.href);\n// Prints https://example.org/abcdef?123\nInvalid URL characters included in the value assigned to the pathname property are percent-encoded. The selection of which characters to percent-encode may vary somewhat from what the url.parse() and url.format() methods would produce.\n\nurl.port#\nHistory\n<string>\nGets and sets the port portion of the URL.\n\nThe port value may be a number or a string containing a number in the range 0 to 65535 (inclusive). Setting the value to the default port of the URL objects given protocol will result in the port value becoming the empty string ('').\n\nThe port value can be an empty string in which case the port depends on the", "doc_id": "fb5842c7-0b31-4600-b69c-eee69c4176e1", "embedding": null, "doc_hash": "b2b6622c168575bc24a20a5bb5dd3b228a4ab152e5cf02fb67c0460d7cb95542", "extra_info": null, "node_info": {"start": 2571331, "end": 2574603}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "aaf9bfa8-079f-4727-86ca-40857182d919", "3": "ebe70bf2-84ea-461d-846a-0bf8e53e745f"}}, "__type__": "1"}, "ebe70bf2-84ea-461d-846a-0bf8e53e745f": {"__data__": {"text": "= '/abcdef';\nconsole.log(myURL.href);\n// Prints https://example.org/abcdef?123\nInvalid URL characters included in the value assigned to the pathname property are percent-encoded. The selection of which characters to percent-encode may vary somewhat from what the url.parse() and url.format() methods would produce.\n\nurl.port#\nHistory\n<string>\nGets and sets the port portion of the URL.\n\nThe port value may be a number or a string containing a number in the range 0 to 65535 (inclusive). Setting the value to the default port of the URL objects given protocol will result in the port value becoming the empty string ('').\n\nThe port value can be an empty string in which case the port depends on the protocol/scheme:\n\nprotocol\tport\n\"ftp\"\t21\n\"file\"\t\n\"http\"\t80\n\"https\"\t443\n\"ws\"\t80\n\"wss\"\t443\nUpon assigning a value to the port, the value will first be converted to a string using .toString().\n\nIf that string is invalid but it begins with a number, the leading number is assigned to port. If the number lies outside the range denoted above, it is ignored.\n\nconst myURL = new URL('https://example.org:8888');\nconsole.log(myURL.port);\n// Prints 8888\n\n// Default ports are automatically transformed to the empty string\n// (HTTPS protocol's default port is 443)\nmyURL.port = '443';\nconsole.log(myURL.port);\n// Prints the empty string\nconsole.log(myURL.href);\n// Prints https://example.org/\n\nmyURL.port = 1234;\nconsole.log(myURL.port);\n// Prints 1234\nconsole.log(myURL.href);\n// Prints https://example.org:1234/\n\n// Completely invalid port strings are ignored\nmyURL.port = 'abcd';\nconsole.log(myURL.port);\n// Prints 1234\n\n// Leading numbers are treated as a port number\nmyURL.port = '5678abcd';\nconsole.log(myURL.port);\n// Prints 5678\n\n// Non-integers are truncated\nmyURL.port = 1234.5678;\nconsole.log(myURL.port);\n// Prints 1234\n\n// Out-of-range numbers which are not represented in scientific notation\n// will be ignored.\nmyURL.port = 1e10; // 10000000000, will be range-checked as described below\nconsole.log(myURL.port);\n// Prints 1234\nNumbers which contain a decimal point, such as floating-point numbers or numbers in scientific notation, are not an exception to this rule. Leading numbers up to the decimal point will be set as the URL's port, assuming they are valid:\n\nmyURL.port = 4.567e21;\nconsole.log(myURL.port);\n// Prints 4 (because it is the leading number in the string '4.567e21')\nurl.protocol#\n<string>\nGets and sets the protocol portion of the URL.\n\nconst myURL = new URL('https://example.org');\nconsole.log(myURL.protocol);\n// Prints https:\n\nmyURL.protocol = 'ftp';\nconsole.log(myURL.href);\n// Prints ftp://example.org/\nInvalid URL protocol values assigned to the protocol property are ignored.\n\nSpecial schemes#\nHistory\nThe WHATWG URL Standard considers a handful of URL protocol schemes to be special in terms of how they are parsed and serialized. When a URL is parsed using one of these special protocols, the url.protocol property may be changed to another special protocol but cannot be changed to a non-special protocol, and vice versa.\n\nFor instance, changing from http to https works:\n\nconst u = new URL('http://example.org');\nu.protocol = 'https';\nconsole.log(u.href);\n// https://example.org/\nHowever, changing from http to a hypothetical fish protocol does not because the new protocol is not", "doc_id": "ebe70bf2-84ea-461d-846a-0bf8e53e745f", "embedding": null, "doc_hash": "0587c0c86f719e25d3b2fba6c5226aab2b0cf2ccaa227d9e6c095e940f1e4b81", "extra_info": null, "node_info": {"start": 2574563, "end": 2577875}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fb5842c7-0b31-4600-b69c-eee69c4176e1", "3": "98f93731-019b-4181-8e64-fbd1bce7451c"}}, "__type__": "1"}, "98f93731-019b-4181-8e64-fbd1bce7451c": {"__data__": {"text": "Prints ftp://example.org/\nInvalid URL protocol values assigned to the protocol property are ignored.\n\nSpecial schemes#\nHistory\nThe WHATWG URL Standard considers a handful of URL protocol schemes to be special in terms of how they are parsed and serialized. When a URL is parsed using one of these special protocols, the url.protocol property may be changed to another special protocol but cannot be changed to a non-special protocol, and vice versa.\n\nFor instance, changing from http to https works:\n\nconst u = new URL('http://example.org');\nu.protocol = 'https';\nconsole.log(u.href);\n// https://example.org/\nHowever, changing from http to a hypothetical fish protocol does not because the new protocol is not special.\n\nconst u = new URL('http://example.org');\nu.protocol = 'fish';\nconsole.log(u.href);\n// http://example.org/\nLikewise, changing from a non-special protocol to a special protocol is also not permitted:\n\nconst u = new URL('fish://example.org');\nu.protocol = 'http';\nconsole.log(u.href);\n// fish://example.org\nAccording to the WHATWG URL Standard, special protocol schemes are ftp, file, http, https, ws, and wss.\n\nurl.search#\n<string>\nGets and sets the serialized query portion of the URL.\n\nconst myURL = new URL('https://example.org/abc?123');\nconsole.log(myURL.search);\n// Prints ?123\n\nmyURL.search = 'abc=xyz';\nconsole.log(myURL.href);\n// Prints https://example.org/abc?abc=xyz\nAny invalid URL characters appearing in the value assigned the search property will be percent-encoded. The selection of which characters to percent-encode may vary somewhat from what the url.parse() and url.format() methods would produce.\n\nurl.searchParams#\n<URLSearchParams>\nGets the URLSearchParams object representing the query parameters of the URL. This property is read-only but the URLSearchParams object it provides can be used to mutate the URL instance; to replace the entirety of query parameters of the URL, use the url.search setter. See URLSearchParams documentation for details.\n\nUse care when using .searchParams to modify the URL because, per the WHATWG specification, the URLSearchParams object uses different rules to determine which characters to percent-encode. For instance, the URL object will not percent encode the ASCII tilde (~) character, while URLSearchParams will always encode it:\n\nconst myURL = new URL('https://example.org/abc?foo=~bar');\n\nconsole.log(myURL.search);  // prints ?foo=~bar\n\n// Modify the URL via searchParams...\nmyURL.searchParams.sort();\n\nconsole.log(myURL.search);  // prints ?foo=%7Ebar\nurl.username#\n<string>\nGets and sets the username portion of the URL.\n\nconst myURL = new URL('https://abc:xyz@example.com');\nconsole.log(myURL.username);\n// Prints abc\n\nmyURL.username = '123';\nconsole.log(myURL.href);\n// Prints https://123:xyz@example.com/\nAny invalid URL characters appearing in the value assigned the username property will be percent-encoded. The selection of which characters to percent-encode may vary somewhat from what the url.parse() and url.format() methods would produce.\n\nurl.toString()#\nReturns: <string>\nThe toString() method on the URL object returns the serialized URL. The value returned is equivalent to that of url.href and url.toJSON().\n\nurl.toJSON()#\nReturns: <string>\nThe toJSON() method on the URL object returns the serialized URL. The value returned is equivalent to that of url.href and url.toString().\n\nThis method is automatically called when an URL object is serialized with", "doc_id": "98f93731-019b-4181-8e64-fbd1bce7451c", "embedding": null, "doc_hash": "72c44d595cbd68bfcaf27512a9421a8a1d94e691f29c8ec3f44cd1edc53af10a", "extra_info": null, "node_info": {"start": 2577859, "end": 2581313}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ebe70bf2-84ea-461d-846a-0bf8e53e745f", "3": "5f25302b-231f-4093-acc7-c59aca414427"}}, "__type__": "1"}, "5f25302b-231f-4093-acc7-c59aca414427": {"__data__": {"text": "Prints https://123:xyz@example.com/\nAny invalid URL characters appearing in the value assigned the username property will be percent-encoded. The selection of which characters to percent-encode may vary somewhat from what the url.parse() and url.format() methods would produce.\n\nurl.toString()#\nReturns: <string>\nThe toString() method on the URL object returns the serialized URL. The value returned is equivalent to that of url.href and url.toJSON().\n\nurl.toJSON()#\nReturns: <string>\nThe toJSON() method on the URL object returns the serialized URL. The value returned is equivalent to that of url.href and url.toString().\n\nThis method is automatically called when an URL object is serialized with JSON.stringify().\n\nconst myURLs = [\n  new URL('https://www.example.com'),\n  new URL('https://test.example.org'),\n];\nconsole.log(JSON.stringify(myURLs));\n// Prints [\"https://www.example.com/\",\"https://test.example.org/\"]\nURL.createObjectURL(blob)#\nAdded in: v16.7.0\nStability: 1 - Experimental\nblob <Blob>\nReturns: <string>\nCreates a 'blob:nodedata:...' URL string that represents the given <Blob> object and can be used to retrieve the Blob later.\n\nconst {\n  Blob,\n  resolveObjectURL,\n} = require('node:buffer');\n\nconst blob = new Blob(['hello']);\nconst id = URL.createObjectURL(blob);\n\n// later...\n\nconst otherBlob = resolveObjectURL(id);\nconsole.log(otherBlob.size);\nThe data stored by the registered <Blob> will be retained in memory until URL.revokeObjectURL() is called to remove it.\n\nBlob objects are registered within the current thread. If using Worker Threads, Blob objects registered within one Worker will not be available to other workers or the main thread.\n\nURL.revokeObjectURL(id)#\nAdded in: v16.7.0\nStability: 1 - Experimental\nid <string> A 'blob:nodedata:... URL string returned by a prior call to URL.createObjectURL().\nRemoves the stored <Blob> identified by the given ID. Attempting to revoke a ID that isn't registered will silently fail.\n\nClass: URLSearchParams#\nHistory\nThe URLSearchParams API provides read and write access to the query of a URL. The URLSearchParams class can also be used standalone with one of the four following constructors. The URLSearchParams class is also available on the global object.\n\nThe WHATWG URLSearchParams interface and the querystring module have similar purpose, but the purpose of the querystring module is more general, as it allows the customization of delimiter characters (& and =). On the other hand, this API is designed purely for URL query strings.\n\nconst myURL = new URL('https://example.org/?abc=123');\nconsole.log(myURL.searchParams.get('abc'));\n// Prints 123\n\nmyURL.searchParams.append('abc', 'xyz');\nconsole.log(myURL.href);\n// Prints https://example.org/?abc=123&abc=xyz\n\nmyURL.searchParams.delete('abc');\nmyURL.searchParams.set('a', 'b');\nconsole.log(myURL.href);\n// Prints https://example.org/?a=b\n\nconst newSearchParams = new URLSearchParams(myURL.searchParams);\n// The above is equivalent to\n// const newSearchParams = new URLSearchParams(myURL.search);\n\nnewSearchParams.append('a', 'c');\nconsole.log(myURL.href);\n// Prints https://example.org/?a=b\nconsole.log(newSearchParams.toString());\n// Prints a=b&a=c\n\n// newSearchParams.toString() is implicitly called\nmyURL.search = newSearchParams;\nconsole.log(myURL.href);\n//", "doc_id": "5f25302b-231f-4093-acc7-c59aca414427", "embedding": null, "doc_hash": "87fe9c2af0befa330d380d65eb8502407100a906816933987425e4ee4b176384", "extra_info": null, "node_info": {"start": 2581318, "end": 2584615}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "98f93731-019b-4181-8e64-fbd1bce7451c", "3": "5e5f13b4-eaba-4f24-8a61-62e42c539070"}}, "__type__": "1"}, "5e5f13b4-eaba-4f24-8a61-62e42c539070": {"__data__": {"text": "'b');\nconsole.log(myURL.href);\n// Prints https://example.org/?a=b\n\nconst newSearchParams = new URLSearchParams(myURL.searchParams);\n// The above is equivalent to\n// const newSearchParams = new URLSearchParams(myURL.search);\n\nnewSearchParams.append('a', 'c');\nconsole.log(myURL.href);\n// Prints https://example.org/?a=b\nconsole.log(newSearchParams.toString());\n// Prints a=b&a=c\n\n// newSearchParams.toString() is implicitly called\nmyURL.search = newSearchParams;\nconsole.log(myURL.href);\n// Prints https://example.org/?a=b&a=c\nnewSearchParams.delete('a');\nconsole.log(myURL.href);\n// Prints https://example.org/?a=b&a=c\nnew URLSearchParams()#\nInstantiate a new empty URLSearchParams object.\n\nnew URLSearchParams(string)#\nstring <string> A query string\nParse the string as a query string, and use it to instantiate a new URLSearchParams object. A leading '?', if present, is ignored.\n\nlet params;\n\nparams = new URLSearchParams('user=abc&query=xyz');\nconsole.log(params.get('user'));\n// Prints 'abc'\nconsole.log(params.toString());\n// Prints 'user=abc&query=xyz'\n\nparams = new URLSearchParams('?user=abc&query=xyz');\nconsole.log(params.toString());\n// Prints 'user=abc&query=xyz'\nnew URLSearchParams(obj)#\nAdded in: v7.10.0, v6.13.0\nobj <Object> An object representing a collection of key-value pairs\nInstantiate a new URLSearchParams object with a query hash map. The key and value of each property of obj are always coerced to strings.\n\nUnlike querystring module, duplicate keys in the form of array values are not allowed. Arrays are stringified using array.toString(), which simply joins all array elements with commas.\n\nconst params = new URLSearchParams({\n  user: 'abc',\n  query: ['first', 'second'],\n});\nconsole.log(params.getAll('query'));\n// Prints [ 'first,second' ]\nconsole.log(params.toString());\n// Prints 'user=abc&query=first%2Csecond'\nnew URLSearchParams(iterable)#\nAdded in: v7.10.0, v6.13.0\niterable <Iterable> An iterable object whose elements are key-value pairs\nInstantiate a new URLSearchParams object with an iterable map in a way that is similar to Map's constructor. iterable can be an Array or any iterable object. That means iterable can be another URLSearchParams, in which case the constructor will simply create a clone of the provided URLSearchParams. Elements of iterable are key-value pairs, and can themselves be any iterable object.\n\nDuplicate keys are allowed.\n\nlet params;\n\n// Using an array\nparams = new URLSearchParams([\n  ['user', 'abc'],\n  ['query', 'first'],\n  ['query', 'second'],\n]);\nconsole.log(params.toString());\n// Prints 'user=abc&query=first&query=second'\n\n// Using a Map object\nconst map = new Map();\nmap.set('user', 'abc');\nmap.set('query', 'xyz');\nparams = new URLSearchParams(map);\nconsole.log(params.toString());\n// Prints 'user=abc&query=xyz'\n\n// Using a generator function\nfunction* getQueryPairs() {\n  yield ['user', 'abc'];\n  yield ['query', 'first'];\n  yield ['query', 'second'];\n}\nparams = new URLSearchParams(getQueryPairs());\nconsole.log(params.toString());\n// Prints", "doc_id": "5e5f13b4-eaba-4f24-8a61-62e42c539070", "embedding": null, "doc_hash": "5208d7f3c0e8547ff7e0095b02916bf0b4ff5fcc88a0642f53dea92f1395e028", "extra_info": null, "node_info": {"start": 2584763, "end": 2587790}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5f25302b-231f-4093-acc7-c59aca414427", "3": "e7fed89d-4749-4df0-a451-0f404dcf2fc9"}}, "__type__": "1"}, "e7fed89d-4749-4df0-a451-0f404dcf2fc9": {"__data__": {"text": " ['query', 'second'],\n]);\nconsole.log(params.toString());\n// Prints 'user=abc&query=first&query=second'\n\n// Using a Map object\nconst map = new Map();\nmap.set('user', 'abc');\nmap.set('query', 'xyz');\nparams = new URLSearchParams(map);\nconsole.log(params.toString());\n// Prints 'user=abc&query=xyz'\n\n// Using a generator function\nfunction* getQueryPairs() {\n  yield ['user', 'abc'];\n  yield ['query', 'first'];\n  yield ['query', 'second'];\n}\nparams = new URLSearchParams(getQueryPairs());\nconsole.log(params.toString());\n// Prints 'user=abc&query=first&query=second'\n\n// Each key-value pair must have exactly two elements\nnew URLSearchParams([\n  ['user', 'abc', 'error'],\n]);\n// Throws TypeError [ERR_INVALID_TUPLE]:\n//        Each query pair must be an iterable [name, value] tuple\nurlSearchParams.append(name, value)#\nname <string>\nvalue <string>\nAppend a new name-value pair to the query string.\n\nurlSearchParams.delete(name)#\nname <string>\nRemove all name-value pairs whose name is name.\n\nurlSearchParams.entries()#\nReturns: <Iterator>\nReturns an ES6 Iterator over each of the name-value pairs in the query. Each item of the iterator is a JavaScript Array. The first item of the Array is the name, the second item of the Array is the value.\n\nAlias for urlSearchParams[@@iterator]().\n\nurlSearchParams.forEach(fn[, thisArg])#\nHistory\nfn <Function> Invoked for each name-value pair in the query\nthisArg <Object> To be used as this value for when fn is called\nIterates over each name-value pair in the query and invokes the given function.\n\nconst myURL = new URL('https://example.org/?a=b&c=d');\nmyURL.searchParams.forEach((value, name, searchParams) => {\n  console.log(name, value, myURL.searchParams === searchParams);\n});\n// Prints:\n//   a b true\n//   c d true\nurlSearchParams.get(name)#\nname <string>\nReturns: <string> or null if there is no name-value pair with the given name.\nReturns the value of the first name-value pair whose name is name. If there are no such pairs, null is returned.\n\nurlSearchParams.getAll(name)#\nname <string>\nReturns: <string[]>\nReturns the values of all name-value pairs whose name is name. If there are no such pairs, an empty array is returned.\n\nurlSearchParams.has(name)#\nname <string>\nReturns: <boolean>\nReturns true if there is at least one name-value pair whose name is name.\n\nurlSearchParams.keys()#\nReturns: <Iterator>\nReturns an ES6 Iterator over the names of each name-value pair.\n\nconst params = new URLSearchParams('foo=bar&foo=baz');\nfor (const name of params.keys()) {\n  console.log(name);\n}\n// Prints:\n//   foo\n//   foo\nurlSearchParams.set(name, value)#\nname <string>\nvalue <string>\nSets the value in the URLSearchParams object associated with name to value. If there are any pre-existing name-value pairs whose names are name, set the first such pair's value to value and remove all others. If not, append the name-value pair to the query string.\n\nconst params = new URLSearchParams();\nparams.append('foo', 'bar');\nparams.append('foo', 'baz');\nparams.append('abc', 'def');\nconsole.log(params.toString());\n// Prints foo=bar&foo=baz&abc=def\n\nparams.set('foo', 'def');\nparams.set('xyz',", "doc_id": "e7fed89d-4749-4df0-a451-0f404dcf2fc9", "embedding": null, "doc_hash": "a1bf78bd636a3c40fb31cbee69703994c31eb3a1c75092567d7a0c326798a8a1", "extra_info": null, "node_info": {"start": 2587766, "end": 2590896}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5e5f13b4-eaba-4f24-8a61-62e42c539070", "3": "9f9cc3e6-6f5b-428b-b34a-09ae8876b4d4"}}, "__type__": "1"}, "9f9cc3e6-6f5b-428b-b34a-09ae8876b4d4": {"__data__": {"text": "Prints:\n//   foo\n//   foo\nurlSearchParams.set(name, value)#\nname <string>\nvalue <string>\nSets the value in the URLSearchParams object associated with name to value. If there are any pre-existing name-value pairs whose names are name, set the first such pair's value to value and remove all others. If not, append the name-value pair to the query string.\n\nconst params = new URLSearchParams();\nparams.append('foo', 'bar');\nparams.append('foo', 'baz');\nparams.append('abc', 'def');\nconsole.log(params.toString());\n// Prints foo=bar&foo=baz&abc=def\n\nparams.set('foo', 'def');\nparams.set('xyz', 'opq');\nconsole.log(params.toString());\n// Prints foo=def&abc=def&xyz=opq\nurlSearchParams.size#\nAdded in: v18.16.0\nThe total number of parameter entries.\n\nurlSearchParams.sort()#\nAdded in: v7.7.0, v6.13.0\nSort all existing name-value pairs in-place by their names. Sorting is done with a stable sorting algorithm, so relative order between name-value pairs with the same name is preserved.\n\nThis method can be used, in particular, to increase cache hits.\n\nconst params = new URLSearchParams('query[]=abc&type=search&query[]=123');\nparams.sort();\nconsole.log(params.toString());\n// Prints query%5B%5D=abc&query%5B%5D=123&type=search\nurlSearchParams.toString()#\nReturns: <string>\nReturns the search parameters serialized as a string, with characters percent-encoded where necessary.\n\nurlSearchParams.values()#\nReturns: <Iterator>\nReturns an ES6 Iterator over the values of each name-value pair.\n\nurlSearchParams[Symbol.iterator]()#\nReturns: <Iterator>\nReturns an ES6 Iterator over each of the name-value pairs in the query string. Each item of the iterator is a JavaScript Array. The first item of the Array is the name, the second item of the Array is the value.\n\nAlias for urlSearchParams.entries().\n\nconst params = new URLSearchParams('foo=bar&xyz=baz');\nfor (const [name, value] of params) {\n  console.log(name, value);\n}\n// Prints:\n//   foo bar\n//   xyz baz\nurl.domainToASCII(domain)#\nAdded in: v7.4.0, v6.13.0\ndomain <string>\nReturns: <string>\nReturns the Punycode ASCII serialization of the domain. If domain is an invalid domain, the empty string is returned.\n\nIt performs the inverse operation to url.domainToUnicode().\n\nThis feature is only available if the node executable was compiled with ICU enabled. If not, the domain names are passed through unchanged.\n\nimport url from 'node:url';\n\nconsole.log(url.domainToASCII('espa\u00f1ol.com'));\n// Prints xn--espaol-zwa.com\nconsole.log(url.domainToASCII('\u4e2d\u6587.com'));\n// Prints xn--fiq228c.com\nconsole.log(url.domainToASCII('xn--i\u00f1valid.com'));\n// Prints an empty string\nurl.domainToUnicode(domain)#\nAdded in: v7.4.0, v6.13.0\ndomain <string>\nReturns: <string>\nReturns the Unicode serialization of the domain. If domain is an invalid domain, the empty string is returned.\n\nIt performs the inverse operation to url.domainToASCII().\n\nThis feature is only available if the node executable was compiled with ICU enabled. If not, the domain names are passed through unchanged.\n\nimport url from 'node:url';\n\nconsole.log(url.domainToUnicode('xn--espaol-zwa.com'));\n// Prints", "doc_id": "9f9cc3e6-6f5b-428b-b34a-09ae8876b4d4", "embedding": null, "doc_hash": "87544ff8c1336a41e104557a2589c15a15b6c3f6ecfa7974b3eec3642a7fc88e", "extra_info": null, "node_info": {"start": 2590857, "end": 2593962}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e7fed89d-4749-4df0-a451-0f404dcf2fc9", "3": "397ccffd-7c67-4588-b0a2-3febb40e5a35"}}, "__type__": "1"}, "397ccffd-7c67-4588-b0a2-3febb40e5a35": {"__data__": {"text": "Prints an empty string\nurl.domainToUnicode(domain)#\nAdded in: v7.4.0, v6.13.0\ndomain <string>\nReturns: <string>\nReturns the Unicode serialization of the domain. If domain is an invalid domain, the empty string is returned.\n\nIt performs the inverse operation to url.domainToASCII().\n\nThis feature is only available if the node executable was compiled with ICU enabled. If not, the domain names are passed through unchanged.\n\nimport url from 'node:url';\n\nconsole.log(url.domainToUnicode('xn--espaol-zwa.com'));\n// Prints espa\u00f1ol.com\nconsole.log(url.domainToUnicode('xn--fiq228c.com'));\n// Prints \u4e2d\u6587.com\nconsole.log(url.domainToUnicode('xn--i\u00f1valid.com'));\n// Prints an empty string\nurl.fileURLToPath(url)#\nAdded in: v10.12.0\nurl <URL> | <string> The file URL string or URL object to convert to a path.\nReturns: <string> The fully-resolved platform-specific Node.js file path.\nThis function ensures the correct decodings of percent-encoded characters as well as ensuring a cross-platform valid absolute path string.\n\nimport { fileURLToPath } from 'node:url';\n\nconst __filename = fileURLToPath(import.meta.url);\n\nnew URL('file:///C:/path/').pathname;      // Incorrect: /C:/path/\nfileURLToPath('file:///C:/path/');         // Correct:   C:\\path\\ (Windows)\n\nnew URL('file://nas/foo.txt').pathname;    // Incorrect: /foo.txt\nfileURLToPath('file://nas/foo.txt');       // Correct:   \\\\nas\\foo.txt (Windows)\n\nnew URL('file:///\u4f60\u597d.txt').pathname;      // Incorrect: /%E4%BD%A0%E5%A5%BD.txt\nfileURLToPath('file:///\u4f60\u597d.txt');         // Correct:   /\u4f60\u597d.txt (POSIX)\n\nnew URL('file:///hello world').pathname;   // Incorrect: /hello%20world\nfileURLToPath('file:///hello world');      // Correct:   /hello world (POSIX)\nurl.format(URL[, options])#\nAdded in: v7.6.0\nURL <URL> A WHATWG URL object\noptions <Object>\nauth <boolean> true if the serialized URL string should include the username and password, false otherwise. Default: true.\nfragment <boolean> true if the serialized URL string should include the fragment, false otherwise. Default: true.\nsearch <boolean> true if the serialized URL string should include the search query, false otherwise. Default: true.\nunicode <boolean> true if Unicode characters appearing in the host component of the URL string should be encoded directly as opposed to being Punycode encoded. Default: false.\nReturns: <string>\nReturns a customizable serialization of a URL String representation of a WHATWG URL object.\n\nThe URL object has both a toString() method and href property that return string serializations of the URL. These are not, however, customizable in any way. The url.format(URL[, options]) method allows for basic customization of the output.\n\nimport url from 'node:url';\nconst myURL = new URL('https://a:b@\u6e2c\u8a66?abc#foo');\n\nconsole.log(myURL.href);\n// Prints https://a:b@xn--g6w251d/?abc#foo\n\nconsole.log(myURL.toString());\n// Prints https://a:b@xn--g6w251d/?abc#foo\n\nconsole.log(url.format(myURL, { fragment: false, unicode: true, auth: false }));\n// Prints", "doc_id": "397ccffd-7c67-4588-b0a2-3febb40e5a35", "embedding": null, "doc_hash": "95839418987c56e9a63f391bc1a770ac23dc9d1c54a3b7e1cbdd30f66d46118b", "extra_info": null, "node_info": {"start": 2594029, "end": 2597017}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9f9cc3e6-6f5b-428b-b34a-09ae8876b4d4", "3": "40b85575-0fd9-4fa9-9610-0120cd21dc9e"}}, "__type__": "1"}, "40b85575-0fd9-4fa9-9610-0120cd21dc9e": {"__data__": {"text": "URL object has both a toString() method and href property that return string serializations of the URL. These are not, however, customizable in any way. The url.format(URL[, options]) method allows for basic customization of the output.\n\nimport url from 'node:url';\nconst myURL = new URL('https://a:b@\u6e2c\u8a66?abc#foo');\n\nconsole.log(myURL.href);\n// Prints https://a:b@xn--g6w251d/?abc#foo\n\nconsole.log(myURL.toString());\n// Prints https://a:b@xn--g6w251d/?abc#foo\n\nconsole.log(url.format(myURL, { fragment: false, unicode: true, auth: false }));\n// Prints 'https://\u6e2c\u8a66/?abc'\nurl.pathToFileURL(path)#\nAdded in: v10.12.0\npath <string> The path to convert to a File URL.\nReturns: <URL> The file URL object.\nThis function ensures that path is resolved absolutely, and that the URL control characters are correctly encoded when converting into a File URL.\n\nimport { pathToFileURL } from 'node:url';\n\nnew URL('/foo#1', 'file:');           // Incorrect: file:///foo#1\npathToFileURL('/foo#1');              // Correct:   file:///foo%231 (POSIX)\n\nnew URL('/some/path%.c', 'file:');    // Incorrect: file:///some/path%.c\npathToFileURL('/some/path%.c');       // Correct:   file:///some/path%25.c (POSIX)\nurl.urlToHttpOptions(url)#\nAdded in: v15.7.0, v14.18.0\nurl <URL> The WHATWG URL object to convert to an options object.\nReturns: <Object> Options object\nprotocol <string> Protocol to use.\nhostname <string> A domain name or IP address of the server to issue the request to.\nhash <string> The fragment portion of the URL.\nsearch <string> The serialized query portion of the URL.\npathname <string> The path portion of the URL.\npath <string> Request path. Should include query string if any. E.G. '/index.html?page=12'. An exception is thrown when the request path contains illegal characters. Currently, only spaces are rejected but that may change in the future.\nhref <string> The serialized URL.\nport <number> Port of remote server.\nauth <string> Basic authentication i.e. 'user:password' to compute an Authorization header.\nThis utility function converts a URL object into an ordinary options object as expected by the http.request() and https.request() APIs.\n\nimport { urlToHttpOptions } from 'node:url';\nconst myURL = new URL('https://a:b@\u6e2c\u8a66?abc#foo');\n\nconsole.log(urlToHttpOptions(myURL));\n/*\n{\n  protocol: 'https:',\n  hostname: 'xn--g6w251d',\n  hash: '#foo',\n  search: '?abc',\n  pathname: '/',\n  path: '/?abc',\n  href: 'https://a:b@xn--g6w251d/?abc#foo',\n  auth: 'a:b'\n}\n*/\nLegacy URL API#\nHistory\nStability: 3 - Legacy: Use the WHATWG URL API instead.\nLegacy urlObject#\nHistory\nStability: 3 - Legacy: Use the WHATWG URL API instead.\nThe legacy urlObject (require('node:url').Url or import { Url } from 'node:url') is created and returned by the url.parse() function.\n\nurlObject.auth#\nThe auth property is the username and password portion of the URL, also referred to as userinfo. This string subset follows the protocol and double slashes (if present) and precedes the host component, delimited by @. The string is either the username, or it is the username and password separated by", "doc_id": "40b85575-0fd9-4fa9-9610-0120cd21dc9e", "embedding": null, "doc_hash": "835abf7b811b10d44df6dca65174f1693e6b4cce01e27f0e1dc8192601a09df1", "extra_info": null, "node_info": {"start": 2596984, "end": 2600062}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "397ccffd-7c67-4588-b0a2-3febb40e5a35", "3": "823e36f4-e1d1-4948-87a6-8514453e89b3"}}, "__type__": "1"}, "823e36f4-e1d1-4948-87a6-8514453e89b3": {"__data__": {"text": " auth: 'a:b'\n}\n*/\nLegacy URL API#\nHistory\nStability: 3 - Legacy: Use the WHATWG URL API instead.\nLegacy urlObject#\nHistory\nStability: 3 - Legacy: Use the WHATWG URL API instead.\nThe legacy urlObject (require('node:url').Url or import { Url } from 'node:url') is created and returned by the url.parse() function.\n\nurlObject.auth#\nThe auth property is the username and password portion of the URL, also referred to as userinfo. This string subset follows the protocol and double slashes (if present) and precedes the host component, delimited by @. The string is either the username, or it is the username and password separated by :.\n\nFor example: 'user:pass'.\n\nurlObject.hash#\nThe hash property is the fragment identifier portion of the URL including the leading # character.\n\nFor example: '#hash'.\n\nurlObject.host#\nThe host property is the full lower-cased host portion of the URL, including the port if specified.\n\nFor example: 'sub.example.com:8080'.\n\nurlObject.hostname#\nThe hostname property is the lower-cased host name portion of the host component without the port included.\n\nFor example: 'sub.example.com'.\n\nurlObject.href#\nThe href property is the full URL string that was parsed with both the protocol and host components converted to lower-case.\n\nFor example: 'http://user:pass@sub.example.com:8080/p/a/t/h?query=string#hash'.\n\nurlObject.path#\nThe path property is a concatenation of the pathname and search components.\n\nFor example: '/p/a/t/h?query=string'.\n\nNo decoding of the path is performed.\n\nurlObject.pathname#\nThe pathname property consists of the entire path section of the URL. This is everything following the host (including the port) and before the start of the query or hash components, delimited by either the ASCII question mark (?) or hash (#) characters.\n\nFor example: '/p/a/t/h'.\n\nNo decoding of the path string is performed.\n\nurlObject.port#\nThe port property is the numeric port portion of the host component.\n\nFor example: '8080'.\n\nurlObject.protocol#\nThe protocol property identifies the URL's lower-cased protocol scheme.\n\nFor example: 'http:'.\n\nurlObject.query#\nThe query property is either the query string without the leading ASCII question mark (?), or an object returned by the querystring module's parse() method. Whether the query property is a string or object is determined by the parseQueryString argument passed to url.parse().\n\nFor example: 'query=string' or {'query': 'string'}.\n\nIf returned as a string, no decoding of the query string is performed. If returned as an object, both keys and values are decoded.\n\nurlObject.search#\nThe search property consists of the entire \"query string\" portion of the URL, including the leading ASCII question mark (?) character.\n\nFor example: '?query=string'.\n\nNo decoding of the query string is performed.\n\nurlObject.slashes#\nThe slashes property is a boolean with a value of true if two ASCII forward-slash characters (/) are required following the colon in the protocol.\n\nurl.format(urlObject)#\nHistory\nStability: 3 - Legacy: Use the WHATWG URL API instead.\nurlObject <Object> | <string> A URL object (as returned by url.parse() or constructed otherwise). If a string, it is converted to an object by passing it to url.parse().\nThe url.format() method returns a formatted URL string derived from urlObject.\n\nconst url = require('node:url');\nurl.format({\n  protocol: 'https',\n  hostname: 'example.com',\n  pathname: '/some/path',\n  query: {\n    page: 1,\n    format: 'json',\n  },\n});\n\n// =>", "doc_id": "823e36f4-e1d1-4948-87a6-8514453e89b3", "embedding": null, "doc_hash": "5ef7d4c1f06ab85f1831d3476b0b211709bc91013e60cb9a6ae612682e5c3a60", "extra_info": null, "node_info": {"start": 2600020, "end": 2603496}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "40b85575-0fd9-4fa9-9610-0120cd21dc9e", "3": "7c43228c-caf0-488c-ba1c-0ba2582c9494"}}, "__type__": "1"}, "7c43228c-caf0-488c-ba1c-0ba2582c9494": {"__data__": {"text": "ASCII forward-slash characters (/) are required following the colon in the protocol.\n\nurl.format(urlObject)#\nHistory\nStability: 3 - Legacy: Use the WHATWG URL API instead.\nurlObject <Object> | <string> A URL object (as returned by url.parse() or constructed otherwise). If a string, it is converted to an object by passing it to url.parse().\nThe url.format() method returns a formatted URL string derived from urlObject.\n\nconst url = require('node:url');\nurl.format({\n  protocol: 'https',\n  hostname: 'example.com',\n  pathname: '/some/path',\n  query: {\n    page: 1,\n    format: 'json',\n  },\n});\n\n// => 'https://example.com/some/path?page=1&format=json'\nIf urlObject is not an object or a string, url.format() will throw a TypeError.\n\nThe formatting process operates as follows:\n\nA new empty string result is created.\nIf urlObject.protocol is a string, it is appended as-is to result.\nOtherwise, if urlObject.protocol is not undefined and is not a string, an Error is thrown.\nFor all string values of urlObject.protocol that do not end with an ASCII colon (:) character, the literal string : will be appended to result.\nIf either of the following conditions is true, then the literal string // will be appended to result:\nurlObject.slashes property is true;\nurlObject.protocol begins with http, https, ftp, gopher, or file;\nIf the value of the urlObject.auth property is truthy, and either urlObject.host or urlObject.hostname are not undefined, the value of urlObject.auth will be coerced into a string and appended to result followed by the literal string @.\nIf the urlObject.host property is undefined then:\nIf the urlObject.hostname is a string, it is appended to result.\nOtherwise, if urlObject.hostname is not undefined and is not a string, an Error is thrown.\nIf the urlObject.port property value is truthy, and urlObject.hostname is not undefined:\nThe literal string : is appended to result, and\nThe value of urlObject.port is coerced to a string and appended to result.\nOtherwise, if the urlObject.host property value is truthy, the value of urlObject.host is coerced to a string and appended to result.\nIf the urlObject.pathname property is a string that is not an empty string:\nIf the urlObject.pathname does not start with an ASCII forward slash (/), then the literal string '/' is appended to result.\nThe value of urlObject.pathname is appended to result.\nOtherwise, if urlObject.pathname is not undefined and is not a string, an Error is thrown.\nIf the urlObject.search property is undefined and if the urlObject.query property is an Object, the literal string ? is appended to result followed by the output of calling the querystring module's stringify() method passing the value of urlObject.query.\nOtherwise, if urlObject.search is a string:\nIf the value of urlObject.search does not start with the ASCII question mark (?) character, the literal string ? is appended to result.\nThe value of urlObject.search is appended to result.\nOtherwise, if urlObject.search is not undefined and is not a string, an Error is thrown.\nIf the urlObject.hash property is a string:\nIf the value of urlObject.hash does not start with the ASCII hash (#) character, the literal string # is appended to result.\nThe value of urlObject.hash is appended to result.\nOtherwise, if the urlObject.hash property is not undefined and is not a string, an Error is thrown.\nresult is returned.\nurl.parse(urlString[, parseQueryString[, slashesDenoteHost]])#\nHistory\nStability: 0 - Deprecated: Use the WHATWG URL API instead.\nurlString <string> The URL string to parse.\nparseQueryString <boolean> If true, the query property will always be set to an object returned by the querystring module's", "doc_id": "7c43228c-caf0-488c-ba1c-0ba2582c9494", "embedding": null, "doc_hash": "ac8c3db2b7a33b189acd74d7cb4b69aeae97ea3bbdd468a4bb91c1005a16f407", "extra_info": null, "node_info": {"start": 2603519, "end": 2607192}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "823e36f4-e1d1-4948-87a6-8514453e89b3", "3": "4978ecbd-99b5-41f7-8a52-6923e01a4e19"}}, "__type__": "1"}, "4978ecbd-99b5-41f7-8a52-6923e01a4e19": {"__data__": {"text": "urlObject.search is not undefined and is not a string, an Error is thrown.\nIf the urlObject.hash property is a string:\nIf the value of urlObject.hash does not start with the ASCII hash (#) character, the literal string # is appended to result.\nThe value of urlObject.hash is appended to result.\nOtherwise, if the urlObject.hash property is not undefined and is not a string, an Error is thrown.\nresult is returned.\nurl.parse(urlString[, parseQueryString[, slashesDenoteHost]])#\nHistory\nStability: 0 - Deprecated: Use the WHATWG URL API instead.\nurlString <string> The URL string to parse.\nparseQueryString <boolean> If true, the query property will always be set to an object returned by the querystring module's parse() method. If false, the query property on the returned URL object will be an unparsed, undecoded string. Default: false.\nslashesDenoteHost <boolean> If true, the first token after the literal string // and preceding the next / will be interpreted as the host. For instance, given //foo/bar, the result would be {host: 'foo', pathname: '/bar'} rather than {pathname: '//foo/bar'}. Default: false.\nThe url.parse() method takes a URL string, parses it, and returns a URL object.\n\nA TypeError is thrown if urlString is not a string.\n\nA URIError is thrown if the auth property is present but cannot be decoded.\n\nurl.parse() uses a lenient, non-standard algorithm for parsing URL strings. It is prone to security issues such as host name spoofing and incorrect handling of usernames and passwords. Do not use with untrusted input. CVEs are not issued for url.parse() vulnerabilities. Use the WHATWG URL API instead.\n\nurl.resolve(from, to)#\nHistory\nStability: 3 - Legacy: Use the WHATWG URL API instead.\nfrom <string> The base URL to use if to is a relative URL.\nto <string> The target URL to resolve.\nThe url.resolve() method resolves a target URL relative to a base URL in a manner similar to that of a web browser resolving an anchor tag.\n\nconst url = require('node:url');\nurl.resolve('/one/two/three', 'four');         // '/one/two/four'\nurl.resolve('http://example.com/', '/one');    // 'http://example.com/one'\nurl.resolve('http://example.com/one', '/two'); // 'http://example.com/two'\nTo achieve the same result using the WHATWG URL API:\n\nfunction resolve(from, to) {\n  const resolvedUrl = new URL(to, new URL(from, 'resolve://'));\n  if (resolvedUrl.protocol === 'resolve:') {\n    // `from` is a relative URL.\n    const { pathname, search, hash } = resolvedUrl;\n    return pathname + search + hash;\n  }\n  return resolvedUrl.toString();\n}\n\nresolve('/one/two/three', 'four');         // '/one/two/four'\nresolve('http://example.com/', '/one');    // 'http://example.com/one'\nresolve('http://example.com/one', '/two'); // 'http://example.com/two'\n\nPercent-encoding in URLs#\nURLs are permitted to only contain a certain range of characters. Any character falling outside of that range must be encoded. How such characters are encoded, and which characters to encode depends entirely on where the character is located within the structure of the URL.\n\nLegacy API#\nWithin the Legacy API, spaces (' ') and the following characters will be automatically escaped in the properties of URL objects:\n\n< > \" ` \\r \\n \\t { } | \\ ^ '\nFor example, the ASCII space character (' ') is encoded as %20. The ASCII forward slash (/) character is encoded as", "doc_id": "4978ecbd-99b5-41f7-8a52-6923e01a4e19", "embedding": null, "doc_hash": "93b21ac7f96fef5d9ddb78cca60feb716547ac75110fda8ba43b2d0692670782", "extra_info": null, "node_info": {"start": 2607096, "end": 2610447}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7c43228c-caf0-488c-ba1c-0ba2582c9494", "3": "e4dff01e-b9d6-4249-9e4d-87c2949f7658"}}, "__type__": "1"}, "e4dff01e-b9d6-4249-9e4d-87c2949f7658": {"__data__": {"text": "'/two'); // 'http://example.com/two'\n\nPercent-encoding in URLs#\nURLs are permitted to only contain a certain range of characters. Any character falling outside of that range must be encoded. How such characters are encoded, and which characters to encode depends entirely on where the character is located within the structure of the URL.\n\nLegacy API#\nWithin the Legacy API, spaces (' ') and the following characters will be automatically escaped in the properties of URL objects:\n\n< > \" ` \\r \\n \\t { } | \\ ^ '\nFor example, the ASCII space character (' ') is encoded as %20. The ASCII forward slash (/) character is encoded as %3C.\n\nWHATWG API#\nThe WHATWG URL Standard uses a more selective and fine grained approach to selecting encoded characters than that used by the Legacy API.\n\nThe WHATWG algorithm defines four \"percent-encode sets\" that describe ranges of characters that must be percent-encoded:\n\nThe C0 control percent-encode set includes code points in range U+0000 to U+001F (inclusive) and all code points greater than U+007E.\n\nThe fragment percent-encode set includes the C0 control percent-encode set and code points U+0020, U+0022, U+003C, U+003E, and U+0060.\n\nThe path percent-encode set includes the C0 control percent-encode set and code points U+0020, U+0022, U+0023, U+003C, U+003E, U+003F, U+0060, U+007B, and U+007D.\n\nThe userinfo encode set includes the path percent-encode set and code points U+002F, U+003A, U+003B, U+003D, U+0040, U+005B, U+005C, U+005D, U+005E, and U+007C.\n\nThe userinfo percent-encode set is used exclusively for username and passwords encoded within the URL. The path percent-encode set is used for the path of most URLs. The fragment percent-encode set is used for URL fragments. The C0 control percent-encode set is used for host and path under certain specific conditions, in addition to all other cases.\n\nWhen non-ASCII characters appear within a host name, the host name is encoded using the Punycode algorithm. Note, however, that a host name may contain both Punycode encoded and percent-encoded characters:\n\nconst myURL = new URL('https://%CF%80.example.com/foo');\nconsole.log(myURL.href);\n// Prints https://xn--1xa.example.com/foo\nconsole.log(myURL.origin);\n// Prints https://xn--1xa.example.com\nUtil#\nStability: 2 - Stable\nSource Code: lib/util.js\n\nThe node:util module supports the needs of Node.js internal APIs. Many of the utilities are useful for application and module developers as well. To access it:\n\nconst util = require('node:util');\nutil.callbackify(original)#\nAdded in: v8.2.0\noriginal <Function> An async function\nReturns: <Function> a callback style function\nTakes an async function (or a function that returns a Promise) and returns a function following the error-first callback style, i.e. taking an (err, value) => ... callback as the last argument. In the callback, the first argument will be the rejection reason (or null if the Promise resolved), and the second argument will be the resolved value.\n\nconst util = require('node:util');\n\nasync function fn() {\n  return 'hello world';\n}\nconst callbackFunction = util.callbackify(fn);\n\ncallbackFunction((err, ret) => {\n  if (err) throw err;\n  console.log(ret);\n});\nWill print:\n\nhello world\nThe callback is executed asynchronously, and will have a limited stack trace. If the callback throws, the process will emit an 'uncaughtException' event, and if not handled will", "doc_id": "e4dff01e-b9d6-4249-9e4d-87c2949f7658", "embedding": null, "doc_hash": "41ecdcbf4bc21d9ada61eeeca77b065dd2ee3c80ffc8c76189155865313875db", "extra_info": null, "node_info": {"start": 2610536, "end": 2613927}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4978ecbd-99b5-41f7-8a52-6923e01a4e19", "3": "4e979809-ca56-4a61-9734-f4d4a92bab07"}}, "__type__": "1"}, "4e979809-ca56-4a61-9734-f4d4a92bab07": {"__data__": {"text": "that returns a Promise) and returns a function following the error-first callback style, i.e. taking an (err, value) => ... callback as the last argument. In the callback, the first argument will be the rejection reason (or null if the Promise resolved), and the second argument will be the resolved value.\n\nconst util = require('node:util');\n\nasync function fn() {\n  return 'hello world';\n}\nconst callbackFunction = util.callbackify(fn);\n\ncallbackFunction((err, ret) => {\n  if (err) throw err;\n  console.log(ret);\n});\nWill print:\n\nhello world\nThe callback is executed asynchronously, and will have a limited stack trace. If the callback throws, the process will emit an 'uncaughtException' event, and if not handled will exit.\n\nSince null has a special meaning as the first argument to a callback, if a wrapped function rejects a Promise with a falsy value as a reason, the value is wrapped in an Error with the original value stored in a field named reason.\n\nfunction fn() {\n  return Promise.reject(null);\n}\nconst callbackFunction = util.callbackify(fn);\n\ncallbackFunction((err, ret) => {\n  // When the Promise was rejected with `null` it is wrapped with an Error and\n  // the original value is stored in `reason`.\n  err && Object.hasOwn(err, 'reason') && err.reason === null;  // true\n});\nutil.debuglog(section[, callback])#\nAdded in: v0.11.3\nsection <string> A string identifying the portion of the application for which the debuglog function is being created.\ncallback <Function> A callback invoked the first time the logging function is called with a function argument that is a more optimized logging function.\nReturns: <Function> The logging function\nThe util.debuglog() method is used to create a function that conditionally writes debug messages to stderr based on the existence of the NODE_DEBUG environment variable. If the section name appears within the value of that environment variable, then the returned function operates similar to console.error(). If not, then the returned function is a no-op.\n\nconst util = require('node:util');\nconst debuglog = util.debuglog('foo');\n\ndebuglog('hello from foo [%d]', 123);\nIf this program is run with NODE_DEBUG=foo in the environment, then it will output something like:\n\nFOO 3245: hello from foo [123]\nwhere 3245 is the process id. If it is not run with that environment variable set, then it will not print anything.\n\nThe section supports wildcard also:\n\nconst util = require('node:util');\nconst debuglog = util.debuglog('foo-bar');\n\ndebuglog('hi there, it\\'s foo-bar [%d]', 2333);\nif it is run with NODE_DEBUG=foo* in the environment, then it will output something like:\n\nFOO-BAR 3257: hi there, it's foo-bar [2333]\nMultiple comma-separated section names may be specified in the NODE_DEBUG environment variable: NODE_DEBUG=fs,net,tls.\n\nThe optional callback argument can be used to replace the logging function with a different function that doesn't have any initialization or unnecessary wrapping.\n\nconst util = require('node:util');\nlet debuglog = util.debuglog('internals', (debug) => {\n  // Replace with a logging function that optimizes out\n  // testing if the section is enabled\n  debuglog = debug;\n});\ndebuglog().enabled#\nAdded in: v14.9.0\n<boolean>\nThe util.debuglog().enabled getter is used to create a test that can be used in conditionals based on the existence of the NODE_DEBUG environment variable. If the section name appears within the value of that environment variable, then the returned value will be true. If not, then the returned value will be false.\n\nconst util = require('node:util');\nconst enabled = util.debuglog('foo').enabled;\nif (enabled) {\n  console.log('hello from foo [%d]', 123);\n}\nIf this program is run with NODE_DEBUG=foo in the environment, then it will output something", "doc_id": "4e979809-ca56-4a61-9734-f4d4a92bab07", "embedding": null, "doc_hash": "09ee3a0665871037da839601dd6b3a3f479ee2d265a3da1acbcf6b758162e961", "extra_info": null, "node_info": {"start": 2613834, "end": 2617601}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e4dff01e-b9d6-4249-9e4d-87c2949f7658", "3": "bb64ed71-7dd1-4c84-b6ef-662617a10ee6"}}, "__type__": "1"}, "bb64ed71-7dd1-4c84-b6ef-662617a10ee6": {"__data__": {"text": " // Replace with a logging function that optimizes out\n  // testing if the section is enabled\n  debuglog = debug;\n});\ndebuglog().enabled#\nAdded in: v14.9.0\n<boolean>\nThe util.debuglog().enabled getter is used to create a test that can be used in conditionals based on the existence of the NODE_DEBUG environment variable. If the section name appears within the value of that environment variable, then the returned value will be true. If not, then the returned value will be false.\n\nconst util = require('node:util');\nconst enabled = util.debuglog('foo').enabled;\nif (enabled) {\n  console.log('hello from foo [%d]', 123);\n}\nIf this program is run with NODE_DEBUG=foo in the environment, then it will output something like:\n\nhello from foo [123]\nutil.debug(section)#\nAdded in: v14.9.0\nAlias for util.debuglog. Usage allows for readability of that doesn't imply logging when only using util.debuglog().enabled.\n\nutil.deprecate(fn, msg[, code])#\nHistory\nfn <Function> The function that is being deprecated.\nmsg <string> A warning message to display when the deprecated function is invoked.\ncode <string> A deprecation code. See the list of deprecated APIs for a list of codes.\nReturns: <Function> The deprecated function wrapped to emit a warning.\nThe util.deprecate() method wraps fn (which may be a function or class) in such a way that it is marked as deprecated.\n\nconst util = require('node:util');\n\nexports.obsoleteFunction = util.deprecate(() => {\n  // Do something here.\n}, 'obsoleteFunction() is deprecated. Use newShinyFunction() instead.');\nWhen called, util.deprecate() will return a function that will emit a DeprecationWarning using the 'warning' event. The warning will be emitted and printed to stderr the first time the returned function is called. After the warning is emitted, the wrapped function is called without emitting a warning.\n\nIf the same optional code is supplied in multiple calls to util.deprecate(), the warning will be emitted only once for that code.\n\nconst util = require('node:util');\n\nconst fn1 = util.deprecate(someFunction, someMessage, 'DEP0001');\nconst fn2 = util.deprecate(someOtherFunction, someOtherMessage, 'DEP0001');\nfn1(); // Emits a deprecation warning with code DEP0001\nfn2(); // Does not emit a deprecation warning because it has the same code\nIf either the --no-deprecation or --no-warnings command-line flags are used, or if the process.noDeprecation property is set to true prior to the first deprecation warning, the util.deprecate() method does nothing.\n\nIf the --trace-deprecation or --trace-warnings command-line flags are set, or the process.traceDeprecation property is set to true, a warning and a stack trace are printed to stderr the first time the deprecated function is called.\n\nIf the --throw-deprecation command-line flag is set, or the process.throwDeprecation property is set to true, then an exception will be thrown when the deprecated function is called.\n\nThe --throw-deprecation command-line flag and process.throwDeprecation property take precedence over --trace-deprecation and process.traceDeprecation.\n\nutil.format(format[, ...args])#\nHistory\nformat <string> A printf-like format string.\nThe util.format() method returns a formatted string using the first argument as a printf-like format string which can contain zero or more format specifiers. Each specifier is replaced with the converted value from the corresponding argument. Supported specifiers are:\n\n%s: String will be used to convert all values except BigInt, Object and -0. BigInt values will be represented with an n and Objects that have no user defined toString function are inspected using util.inspect() with options { depth: 0, colors: false, compact: 3 }.\n%d: Number will be used to convert all values except BigInt and Symbol.\n%i: parseInt(value,", "doc_id": "bb64ed71-7dd1-4c84-b6ef-662617a10ee6", "embedding": null, "doc_hash": "ba169beaef5deac57f300b28757a706f3038a2518c2191131116684c8770fca9", "extra_info": null, "node_info": {"start": 2617607, "end": 2621395}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4e979809-ca56-4a61-9734-f4d4a92bab07", "3": "1a8f6b0a-b781-4acf-96f0-f8785fef47a2"}}, "__type__": "1"}, "1a8f6b0a-b781-4acf-96f0-f8785fef47a2": {"__data__": {"text": "and process.traceDeprecation.\n\nutil.format(format[, ...args])#\nHistory\nformat <string> A printf-like format string.\nThe util.format() method returns a formatted string using the first argument as a printf-like format string which can contain zero or more format specifiers. Each specifier is replaced with the converted value from the corresponding argument. Supported specifiers are:\n\n%s: String will be used to convert all values except BigInt, Object and -0. BigInt values will be represented with an n and Objects that have no user defined toString function are inspected using util.inspect() with options { depth: 0, colors: false, compact: 3 }.\n%d: Number will be used to convert all values except BigInt and Symbol.\n%i: parseInt(value, 10) is used for all values except BigInt and Symbol.\n%f: parseFloat(value) is used for all values expect Symbol.\n%j: JSON. Replaced with the string '[Circular]' if the argument contains circular references.\n%o: Object. A string representation of an object with generic JavaScript object formatting. Similar to util.inspect() with options { showHidden: true, showProxy: true }. This will show the full object including non-enumerable properties and proxies.\n%O: Object. A string representation of an object with generic JavaScript object formatting. Similar to util.inspect() without options. This will show the full object not including non-enumerable properties and proxies.\n%c: CSS. This specifier is ignored and will skip any CSS passed in.\n%%: single percent sign ('%'). This does not consume an argument.\nReturns: <string> The formatted string\nIf a specifier does not have a corresponding argument, it is not replaced:\n\nutil.format('%s:%s', 'foo');\n// Returns: 'foo:%s'\nValues that are not part of the format string are formatted using util.inspect() if their type is not string.\n\nIf there are more arguments passed to the util.format() method than the number of specifiers, the extra arguments are concatenated to the returned string, separated by spaces:\n\nutil.format('%s:%s', 'foo', 'bar', 'baz');\n// Returns: 'foo:bar baz'\nIf the first argument does not contain a valid format specifier, util.format() returns a string that is the concatenation of all arguments separated by spaces:\n\nutil.format(1, 2, 3);\n// Returns: '1 2 3'\nIf only one argument is passed to util.format(), it is returned as it is without any formatting:\n\nutil.format('%% %s');\n// Returns: '%% %s'\nutil.format() is a synchronous method that is intended as a debugging tool. Some input values can have a significant performance overhead that can block the event loop. Use this function with care and never in a hot code path.\n\nutil.formatWithOptions(inspectOptions, format[, ...args])#\nAdded in: v10.0.0\ninspectOptions <Object>\nformat <string>\nThis function is identical to util.format(), except in that it takes an inspectOptions argument which specifies options that are passed along to util.inspect().\n\nutil.formatWithOptions({ colors: true }, 'See object %O', { foo: 42 });\n// Returns 'See object { foo: 42 }', where `42` is colored as a number\n// when printed to a terminal.\nutil.getSystemErrorName(err)#\nAdded in: v9.7.0\nerr <number>\nReturns: <string>\nReturns the string name for a numeric error code that comes from a Node.js API. The mapping between error codes and error names is platform-dependent. See Common System Errors for the names of common errors.\n\nfs.access('file/that/does/not/exist', (err) => {\n  const name = util.getSystemErrorName(err.errno);\n  console.error(name);  // ENOENT\n});\nutil.getSystemErrorMap()#\nAdded in: v16.0.0, v14.17.0\nReturns: <Map>\nReturns a Map of all system error codes available from the", "doc_id": "1a8f6b0a-b781-4acf-96f0-f8785fef47a2", "embedding": null, "doc_hash": "874553b7cc2294b6c09e645ed0debe50906de34dd72ec29c42497e76a8187f06", "extra_info": null, "node_info": {"start": 2621370, "end": 2625021}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "bb64ed71-7dd1-4c84-b6ef-662617a10ee6", "3": "78ac8cbc-ab57-40b2-b7a6-f8387938a8b1"}}, "__type__": "1"}, "78ac8cbc-ab57-40b2-b7a6-f8387938a8b1": {"__data__": {"text": "where `42` is colored as a number\n// when printed to a terminal.\nutil.getSystemErrorName(err)#\nAdded in: v9.7.0\nerr <number>\nReturns: <string>\nReturns the string name for a numeric error code that comes from a Node.js API. The mapping between error codes and error names is platform-dependent. See Common System Errors for the names of common errors.\n\nfs.access('file/that/does/not/exist', (err) => {\n  const name = util.getSystemErrorName(err.errno);\n  console.error(name);  // ENOENT\n});\nutil.getSystemErrorMap()#\nAdded in: v16.0.0, v14.17.0\nReturns: <Map>\nReturns a Map of all system error codes available from the Node.js API. The mapping between error codes and error names is platform-dependent. See Common System Errors for the names of common errors.\n\nfs.access('file/that/does/not/exist', (err) => {\n  const errorMap = util.getSystemErrorMap();\n  const name = errorMap.get(err.errno);\n  console.error(name);  // ENOENT\n});\nutil.inherits(constructor, superConstructor)#\nHistory\nStability: 3 - Legacy: Use ES2015 class syntax and extends keyword instead.\nconstructor <Function>\nsuperConstructor <Function>\nUsage of util.inherits() is discouraged. Please use the ES6 class and extends keywords to get language level inheritance support. Also note that the two styles are semantically incompatible.\n\nInherit the prototype methods from one constructor into another. The prototype of constructor will be set to a new object created from superConstructor.\n\nThis mainly adds some input validation on top of Object.setPrototypeOf(constructor.prototype, superConstructor.prototype). As an additional convenience, superConstructor will be accessible through the constructor.super_ property.\n\nconst util = require('node:util');\nconst EventEmitter = require('node:events');\n\nfunction MyStream() {\n  EventEmitter.call(this);\n}\n\nutil.inherits(MyStream, EventEmitter);\n\nMyStream.prototype.write = function(data) {\n  this.emit('data', data);\n};\n\nconst stream = new MyStream();\n\nconsole.log(stream instanceof EventEmitter); // true\nconsole.log(MyStream.super_ === EventEmitter); // true\n\nstream.on('data', (data) => {\n  console.log(`Received data: \"${data}\"`);\n});\nstream.write('It works!'); // Received data: \"It works!\"\nES6 example using class and extends:\n\nconst EventEmitter = require('node:events');\n\nclass MyStream extends EventEmitter {\n  write(data) {\n    this.emit('data', data);\n  }\n}\n\nconst stream = new MyStream();\n\nstream.on('data', (data) => {\n  console.log(`Received data: \"${data}\"`);\n});\nstream.write('With ES6');\nutil.inspect(object[, options])#\nutil.inspect(object[, showHidden[, depth[, colors]]])#\nHistory\nobject <any> Any JavaScript primitive or Object.\noptions <Object>\nshowHidden <boolean> If true, object's non-enumerable symbols and properties are included in the formatted result. WeakMap and WeakSet entries are also included as well as user defined prototype properties (excluding method properties). Default: false.\ndepth <number> Specifies the number of times to recurse while formatting object. This is useful for inspecting large objects. To recurse up to the maximum call stack size pass Infinity or null. Default: 2.\ncolors <boolean> If true, the output is styled with ANSI color codes. Colors are customizable. See Customizing util.inspect colors. Default: false.\ncustomInspect <boolean> If false, [util.inspect.custom](depth, opts, inspect) functions are not invoked. Default: true.\nshowProxy <boolean> If true, Proxy inspection includes the target and handler objects.", "doc_id": "78ac8cbc-ab57-40b2-b7a6-f8387938a8b1", "embedding": null, "doc_hash": "223e42df82ca4dd6ab204c18fcef60945742fe094095817fe666259769cc0b26", "extra_info": null, "node_info": {"start": 2625121, "end": 2628618}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1a8f6b0a-b781-4acf-96f0-f8785fef47a2", "3": "16ed4d02-577f-44fe-a575-5f1eeb7fbdaa"}}, "__type__": "1"}, "16ed4d02-577f-44fe-a575-5f1eeb7fbdaa": {"__data__": {"text": "non-enumerable symbols and properties are included in the formatted result. WeakMap and WeakSet entries are also included as well as user defined prototype properties (excluding method properties). Default: false.\ndepth <number> Specifies the number of times to recurse while formatting object. This is useful for inspecting large objects. To recurse up to the maximum call stack size pass Infinity or null. Default: 2.\ncolors <boolean> If true, the output is styled with ANSI color codes. Colors are customizable. See Customizing util.inspect colors. Default: false.\ncustomInspect <boolean> If false, [util.inspect.custom](depth, opts, inspect) functions are not invoked. Default: true.\nshowProxy <boolean> If true, Proxy inspection includes the target and handler objects. Default: false.\nmaxArrayLength <integer> Specifies the maximum number of Array, TypedArray, WeakMap, and WeakSet elements to include when formatting. Set to null or Infinity to show all elements. Set to 0 or negative to show no elements. Default: 100.\nmaxStringLength <integer> Specifies the maximum number of characters to include when formatting. Set to null or Infinity to show all elements. Set to 0 or negative to show no characters. Default: 10000.\nbreakLength <integer> The length at which input values are split across multiple lines. Set to Infinity to format the input as a single line (in combination with compact set to true or any number >= 1). Default: 80.\ncompact <boolean> | <integer> Setting this to false causes each object key to be displayed on a new line. It will break on new lines in text that is longer than breakLength. If set to a number, the most n inner elements are united on a single line as long as all properties fit into breakLength. Short array elements are also grouped together. For more information, see the example below. Default: 3.\nsorted <boolean> | <Function> If set to true or a function, all properties of an object, and Set and Map entries are sorted in the resulting string. If set to true the default sort is used. If set to a function, it is used as a compare function.\ngetters <boolean> | <string> If set to true, getters are inspected. If set to 'get', only getters without a corresponding setter are inspected. If set to 'set', only getters with a corresponding setter are inspected. This might cause side effects depending on the getter function. Default: false.\nnumericSeparator <boolean> If set to true, an underscore is used to separate every three digits in all bigints and numbers. Default: false.\nReturns: <string> The representation of object.\nThe util.inspect() method returns a string representation of object that is intended for debugging. The output of util.inspect may change at any time and should not be depended upon programmatically. Additional options may be passed that alter the result. util.inspect() will use the constructor's name and/or @@toStringTag to make an identifiable tag for an inspected value.\n\nclass Foo {\n  get [Symbol.toStringTag]() {\n    return 'bar';\n  }\n}\n\nclass Bar {}\n\nconst baz = Object.create(null, { [Symbol.toStringTag]: { value: 'foo' } });\n\nutil.inspect(new Foo()); // 'Foo [bar] {}'\nutil.inspect(new Bar()); // 'Bar {}'\nutil.inspect(baz);       // '[foo] {}'\nCircular references point to their anchor by using a reference index:\n\nconst { inspect } = require('node:util');\n\nconst obj = {};\nobj.a = [obj];\nobj.b = {};\nobj.b.inner = obj.b;\nobj.b.obj = obj;\n\nconsole.log(inspect(obj));\n// <ref *1> {\n//   a: [ [Circular *1] ],\n//   b: <ref *2> { inner: [Circular *2], obj: [Circular *1] }\n// }\nThe following example inspects all properties of the util object:\n\nconst util =", "doc_id": "16ed4d02-577f-44fe-a575-5f1eeb7fbdaa", "embedding": null, "doc_hash": "9a7ddfb6d7a6c28446363066f4f7687910564c8cfd6dd162e145d66c5ed2acf1", "extra_info": null, "node_info": {"start": 2628490, "end": 2632134}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "78ac8cbc-ab57-40b2-b7a6-f8387938a8b1", "3": "203bbc51-3eb1-4611-b8ed-55bf27d5baef"}}, "__type__": "1"}, "203bbc51-3eb1-4611-b8ed-55bf27d5baef": {"__data__": {"text": "Bar()); // 'Bar {}'\nutil.inspect(baz);       // '[foo] {}'\nCircular references point to their anchor by using a reference index:\n\nconst { inspect } = require('node:util');\n\nconst obj = {};\nobj.a = [obj];\nobj.b = {};\nobj.b.inner = obj.b;\nobj.b.obj = obj;\n\nconsole.log(inspect(obj));\n// <ref *1> {\n//   a: [ [Circular *1] ],\n//   b: <ref *2> { inner: [Circular *2], obj: [Circular *1] }\n// }\nThe following example inspects all properties of the util object:\n\nconst util = require('node:util');\n\nconsole.log(util.inspect(util, { showHidden: true, depth: null }));\nThe following example highlights the effect of the compact option:\n\nconst util = require('node:util');\n\nconst o = {\n  a: [1, 2, [[\n    'Lorem ipsum dolor sit amet,\\nconsectetur adipiscing elit, sed do ' +\n      'eiusmod \\ntempor incididunt ut labore et dolore magna aliqua.',\n    'test',\n    'foo']], 4],\n  b: new Map([['za', 1], ['zb', 'test']]),\n};\nconsole.log(util.inspect(o, { compact: true, depth: 5, breakLength: 80 }));\n\n// { a:\n//   [ 1,\n//     2,\n//     [ [ 'Lorem ipsum dolor sit amet,\\nconsectetur [...]', // A long line\n//           'test',\n//           'foo' ] ],\n//     4 ],\n//   b: Map(2) { 'za' => 1, 'zb' => 'test' } }\n\n// Setting `compact` to false or an integer creates more reader friendly output.\nconsole.log(util.inspect(o, { compact: false, depth: 5, breakLength: 80 }));\n\n// {\n//   a: [\n//     1,\n//     2,\n//     [\n//       [\n//         'Lorem ipsum dolor sit amet,\\n' +\n//           'consectetur adipiscing elit, sed do eiusmod \\n' +\n//           'tempor incididunt ut labore et dolore magna aliqua.',\n//         'test',\n//         'foo'\n//       ]\n//     ],\n//     4\n//   ],\n//   b: Map(2) {\n//     'za' => 1,\n//     'zb' => 'test'\n//   }\n// }\n\n// Setting `breakLength` to e.g. 150 will print the \"Lorem ipsum\" text in a\n// single line.\nThe showHidden option allows WeakMap and WeakSet entries to be inspected. If there are more entries than maxArrayLength, there is no guarantee which entries are displayed. That means retrieving the same WeakSet entries twice may result in different output. Furthermore, entries with no remaining strong references may be garbage collected at any time.\n\nconst { inspect } = require('node:util');\n\nconst obj = { a: 1 };\nconst obj2 = { b: 2 };\nconst weakSet = new WeakSet([obj, obj2]);\n\nconsole.log(inspect(weakSet, { showHidden: true }));\n// WeakSet { { a: 1 }, { b: 2 } }\nThe sorted option ensures that an object's property insertion order does not impact the result of util.inspect().\n\nconst { inspect }", "doc_id": "203bbc51-3eb1-4611-b8ed-55bf27d5baef", "embedding": null, "doc_hash": "2e9bf86482229668a43f1df4d66fb5096ec37414c1b5f111c9810f3307614039", "extra_info": null, "node_info": {"start": 2632409, "end": 2634937}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "16ed4d02-577f-44fe-a575-5f1eeb7fbdaa", "3": "ce18685d-01da-4127-ac7b-2f4a0b17f9cf"}}, "__type__": "1"}, "ce18685d-01da-4127-ac7b-2f4a0b17f9cf": {"__data__": {"text": "option allows WeakMap and WeakSet entries to be inspected. If there are more entries than maxArrayLength, there is no guarantee which entries are displayed. That means retrieving the same WeakSet entries twice may result in different output. Furthermore, entries with no remaining strong references may be garbage collected at any time.\n\nconst { inspect } = require('node:util');\n\nconst obj = { a: 1 };\nconst obj2 = { b: 2 };\nconst weakSet = new WeakSet([obj, obj2]);\n\nconsole.log(inspect(weakSet, { showHidden: true }));\n// WeakSet { { a: 1 }, { b: 2 } }\nThe sorted option ensures that an object's property insertion order does not impact the result of util.inspect().\n\nconst { inspect } = require('node:util');\nconst assert = require('node:assert');\n\nconst o1 = {\n  b: [2, 3, 1],\n  a: '`a` comes before `b`',\n  c: new Set([2, 3, 1]),\n};\nconsole.log(inspect(o1, { sorted: true }));\n// { a: '`a` comes before `b`', b: [ 2, 3, 1 ], c: Set(3) { 1, 2, 3 } }\nconsole.log(inspect(o1, { sorted: (a, b) => b.localeCompare(a) }));\n// { c: Set(3) { 3, 2, 1 }, b: [ 2, 3, 1 ], a: '`a` comes before `b`' }\n\nconst o2 = {\n  c: new Set([2, 1, 3]),\n  a: '`a` comes before `b`',\n  b: [2, 3, 1],\n};\nassert.strict.equal(\n  inspect(o1, { sorted: true }),\n  inspect(o2, { sorted: true }),\n);\nThe numericSeparator option adds an underscore every three digits to all numbers.\n\nconst { inspect } = require('node:util');\n\nconst thousand = 1_000;\nconst million = 1_000_000;\nconst bigNumber = 123_456_789n;\nconst bigDecimal = 1_234.123_45;\n\nconsole.log(thousand, million, bigNumber, bigDecimal);\n// 1_000 1_000_000 123_456_789n 1_234.123_45\nutil.inspect() is a synchronous method intended for debugging. Its maximum output length is approximately 128 MiB. Inputs that result in longer output will be truncated.\n\nCustomizing util.inspect colors#\nColor output (if enabled) of util.inspect is customizable globally via the util.inspect.styles and util.inspect.colors properties.\n\nutil.inspect.styles is a map associating a style name to a color from util.inspect.colors.\n\nThe default styles and associated colors are:\n\nbigint: yellow\nboolean: yellow\ndate: magenta\nmodule: underline\nname: (no styling)\nnull: bold\nnumber: yellow\nregexp: red\nspecial: cyan (e.g., Proxies)\nstring: green\nsymbol: green\nundefined: grey\nColor styling uses ANSI control codes that may not be supported on all terminals. To verify color support use tty.hasColors().\n\nPredefined control codes are listed below (grouped as \"Modifiers\", \"Foreground colors\", and \"Background colors\").\n\nModifiers#\nModifier support varies throughout different terminals. They will mostly be ignored, if not supported.\n\nreset - Resets all (color) modifiers to their defaults\nbold - Make text bold\nitalic - Make text italic\nunderline - Make text underlined\nstrikethrough - Puts a horizontal line through the center of the text (Alias: strikeThrough, crossedout, crossedOut)\nhidden - Prints the text, but makes it invisible (Alias: conceal)\ndim - Decreased color intensity (Alias: faint)\noverlined - Make text overlined\nblink - Hides and shows the text in an interval\ninverse - Swap foreground and background colors", "doc_id": "ce18685d-01da-4127-ac7b-2f4a0b17f9cf", "embedding": null, "doc_hash": "51dcc730cd48ae5c6dfc952671b970611746cb9eddcab154a192cc56c5b3800b", "extra_info": null, "node_info": {"start": 2634752, "end": 2637887}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "203bbc51-3eb1-4611-b8ed-55bf27d5baef", "3": "1132bb57-0b64-452d-85fa-d918673a8be4"}}, "__type__": "1"}, "1132bb57-0b64-452d-85fa-d918673a8be4": {"__data__": {"text": "control codes are listed below (grouped as \"Modifiers\", \"Foreground colors\", and \"Background colors\").\n\nModifiers#\nModifier support varies throughout different terminals. They will mostly be ignored, if not supported.\n\nreset - Resets all (color) modifiers to their defaults\nbold - Make text bold\nitalic - Make text italic\nunderline - Make text underlined\nstrikethrough - Puts a horizontal line through the center of the text (Alias: strikeThrough, crossedout, crossedOut)\nhidden - Prints the text, but makes it invisible (Alias: conceal)\ndim - Decreased color intensity (Alias: faint)\noverlined - Make text overlined\nblink - Hides and shows the text in an interval\ninverse - Swap foreground and background colors (Alias: swapcolors, swapColors)\ndoubleunderline - Make text double underlined (Alias: doubleUnderline)\nframed - Draw a frame around the text\nForeground colors#\nblack\nred\ngreen\nyellow\nblue\nmagenta\ncyan\nwhite\ngray (alias: grey, blackBright)\nredBright\ngreenBright\nyellowBright\nblueBright\nmagentaBright\ncyanBright\nwhiteBright\nBackground colors#\nbgBlack\nbgRed\nbgGreen\nbgYellow\nbgBlue\nbgMagenta\nbgCyan\nbgWhite\nbgGray (alias: bgGrey, bgBlackBright)\nbgRedBright\nbgGreenBright\nbgYellowBright\nbgBlueBright\nbgMagentaBright\nbgCyanBright\nbgWhiteBright\nCustom inspection functions on objects#\nHistory\nObjects may also define their own [util.inspect.custom](depth, opts, inspect) function, which util.inspect() will invoke and use the result of when inspecting the object.\n\nconst util = require('node:util');\n\nclass Box {\n  constructor(value) {\n    this.value = value;\n  }\n\n  [util.inspect.custom](depth, options, inspect) {\n    if (depth < 0) {\n      return options.stylize('[Box]', 'special');\n    }\n\n    const newOptions = Object.assign({}, options, {\n      depth: options.depth === null ? null : options.depth - 1,\n    });\n\n    // Five space padding because that's the size of \"Box< \".\n    const padding = ' '.repeat(5);\n    const inner = inspect(this.value, newOptions)\n                  .replace(/\\n/g, `\\n${padding}`);\n    return `${options.stylize('Box', 'special')}< ${inner} >`;\n  }\n}\n\nconst box = new Box(true);\n\nutil.inspect(box);\n// Returns: \"Box< true >\"\nCustom [util.inspect.custom](depth, opts, inspect) functions typically return a string but may return a value of any type that will be formatted accordingly by util.inspect().\n\nconst util = require('node:util');\n\nconst obj = { foo: 'this will not show up in the inspect() output' };\nobj[util.inspect.custom] = (depth) => {\n  return { bar: 'baz' };\n};\n\nutil.inspect(obj);\n// Returns: \"{ bar: 'baz' }\"\nutil.inspect.custom#\nHistory\n<symbol> that can be used to declare custom inspect functions.\nIn addition to being accessible through util.inspect.custom, this symbol is registered globally and can be accessed in any environment as Symbol.for('nodejs.util.inspect.custom').\n\nUsing this allows code to be written in a portable fashion, so that the custom inspect function is used in an Node.js environment and ignored in the browser. The util.inspect() function itself is passed as third argument to the custom inspect function to allow further portability.\n\nconst customInspectSymbol = Symbol.for('nodejs.util.inspect.custom');\n\nclass Password {\n  constructor(value) {\n    this.value = value;\n  }\n\n ", "doc_id": "1132bb57-0b64-452d-85fa-d918673a8be4", "embedding": null, "doc_hash": "53b086683e5eb331ac08fb7a72af22f6a2995e9abae3b5dfc38c4db72dd1adca", "extra_info": null, "node_info": {"start": 2637853, "end": 2641117}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ce18685d-01da-4127-ac7b-2f4a0b17f9cf", "3": "184e1c95-c438-49a3-b6b9-6f67f4074674"}}, "__type__": "1"}, "184e1c95-c438-49a3-b6b9-6f67f4074674": {"__data__": {"text": "}\"\nutil.inspect.custom#\nHistory\n<symbol> that can be used to declare custom inspect functions.\nIn addition to being accessible through util.inspect.custom, this symbol is registered globally and can be accessed in any environment as Symbol.for('nodejs.util.inspect.custom').\n\nUsing this allows code to be written in a portable fashion, so that the custom inspect function is used in an Node.js environment and ignored in the browser. The util.inspect() function itself is passed as third argument to the custom inspect function to allow further portability.\n\nconst customInspectSymbol = Symbol.for('nodejs.util.inspect.custom');\n\nclass Password {\n  constructor(value) {\n    this.value = value;\n  }\n\n  toString() {\n    return 'xxxxxxxx';\n  }\n\n  [customInspectSymbol](depth, inspectOptions, inspect) {\n    return `Password <${this.toString()}>`;\n  }\n}\n\nconst password = new Password('r0sebud');\nconsole.log(password);\n// Prints Password <xxxxxxxx>\nSee Custom inspection functions on Objects for more details.\n\nutil.inspect.defaultOptions#\nAdded in: v6.4.0\nThe defaultOptions value allows customization of the default options used by util.inspect. This is useful for functions like console.log or util.format which implicitly call into util.inspect. It shall be set to an object containing one or more valid util.inspect() options. Setting option properties directly is also supported.\n\nconst util = require('node:util');\nconst arr = Array(101).fill(0);\n\nconsole.log(arr); // Logs the truncated array\nutil.inspect.defaultOptions.maxArrayLength = null;\nconsole.log(arr); // logs the full array\nutil.isDeepStrictEqual(val1, val2)#\nAdded in: v9.0.0\nval1 <any>\nval2 <any>\nReturns: <boolean>\nReturns true if there is deep strict equality between val1 and val2. Otherwise, returns false.\n\nSee assert.deepStrictEqual() for more information about deep strict equality.\n\nClass: util.MIMEType#\nAdded in: v18.13.0\nStability: 1 - Experimental\nAn implementation of the MIMEType class.\n\nIn accordance with browser conventions, all properties of MIMEType objects are implemented as getters and setters on the class prototype, rather than as data properties on the object itself.\n\nA MIME string is a structured string containing multiple meaningful components. When parsed, a MIMEType object is returned containing properties for each of these components.\n\nConstructor: new MIMEType(input)#\ninput <string> The input MIME to parse\nCreates a new MIMEType object by parsing the input.\n\nimport { MIMEType } from 'node:util';\n\nconst myMIME = new MIMEType('text/plain');\nA TypeError will be thrown if the input is not a valid MIME. Note that an effort will be made to coerce the given values into strings. For instance:\n\nimport { MIMEType } from 'node:util';\nconst myMIME = new MIMEType({ toString: () => 'text/plain' });\nconsole.log(String(myMIME));\n// Prints: text/plain\nmime.type#\n<string>\nGets and sets the type portion of the MIME.\n\nimport { MIMEType } from 'node:util';\n\nconst myMIME = new MIMEType('text/javascript');\nconsole.log(myMIME.type);\n// Prints: text\nmyMIME.type = 'application';\nconsole.log(myMIME.type);\n// Prints: application\nconsole.log(String(myMIME));\n// Prints: application/javascript\nmime.subtype#\n<string>\nGets and sets the subtype portion of the MIME.\n\nimport { MIMEType } from 'node:util';\n\nconst myMIME = new", "doc_id": "184e1c95-c438-49a3-b6b9-6f67f4074674", "embedding": null, "doc_hash": "a752e6aa36b9c8e43594f521890211bb6d91392bd959b40e80c7044a45637c44", "extra_info": null, "node_info": {"start": 2641126, "end": 2644437}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1132bb57-0b64-452d-85fa-d918673a8be4", "3": "c019ca3e-ff9c-43f6-b0e5-83aed8fec6f9"}}, "__type__": "1"}, "c019ca3e-ff9c-43f6-b0e5-83aed8fec6f9": {"__data__": {"text": "() => 'text/plain' });\nconsole.log(String(myMIME));\n// Prints: text/plain\nmime.type#\n<string>\nGets and sets the type portion of the MIME.\n\nimport { MIMEType } from 'node:util';\n\nconst myMIME = new MIMEType('text/javascript');\nconsole.log(myMIME.type);\n// Prints: text\nmyMIME.type = 'application';\nconsole.log(myMIME.type);\n// Prints: application\nconsole.log(String(myMIME));\n// Prints: application/javascript\nmime.subtype#\n<string>\nGets and sets the subtype portion of the MIME.\n\nimport { MIMEType } from 'node:util';\n\nconst myMIME = new MIMEType('text/ecmascript');\nconsole.log(myMIME.subtype);\n// Prints: ecmascript\nmyMIME.subtype = 'javascript';\nconsole.log(myMIME.subtype);\n// Prints: javascript\nconsole.log(String(myMIME));\n// Prints: text/javascript\nmime.essence#\n<string>\nGets the essence of the MIME. This property is read only. Use mime.type or mime.subtype to alter the MIME.\n\nimport { MIMEType } from 'node:util';\n\nconst myMIME = new MIMEType('text/javascript;key=value');\nconsole.log(myMIME.essence);\n// Prints: text/javascript\nmyMIME.type = 'application';\nconsole.log(myMIME.essence);\n// Prints: application/javascript\nconsole.log(String(myMIME));\n// Prints: application/javascript;key=value\nmime.params#\n<MIMEParams>\nGets the MIMEParams object representing the parameters of the MIME. This property is read-only. See MIMEParams documentation for details.\n\nmime.toString()#\nReturns: <string>\nThe toString() method on the MIMEType object returns the serialized MIME.\n\nBecause of the need for standard compliance, this method does not allow users to customize the serialization process of the MIME.\n\nmime.toJSON()#\nReturns: <string>\nAlias for mime.toString().\n\nThis method is automatically called when an MIMEType object is serialized with JSON.stringify().\n\nimport { MIMEType } from 'node:util';\n\nconst myMIMES = [\n  new MIMEType('image/png'),\n  new MIMEType('image/gif'),\n];\nconsole.log(JSON.stringify(myMIMES));\n// Prints: [\"image/png\", \"image/gif\"]\nClass: util.MIMEParams#\nAdded in: v18.13.0\nThe MIMEParams API provides read and write access to the parameters of a MIMEType.\n\nConstructor: new MIMEParams()#\nCreates a new MIMEParams object by with empty parameters\n\nimport { MIMEParams } from 'node:util';\n\nconst myParams = new MIMEParams();\nmimeParams.delete(name)#\nname <string>\nRemove all name-value pairs whose name is name.\n\nmimeParams.entries()#\nReturns: <Iterator>\nReturns an iterator over each of the name-value pairs in the parameters. Each item of the iterator is a JavaScript Array. The first item of the array is the name, the second item of the array is the value.\n\nmimeParams.get(name)#\nname <string>\nReturns: <string> or null if there is no name-value pair with the given name.\nReturns the value of the first name-value pair whose name is name. If there are no such pairs, null is returned.\n\nmimeParams.has(name)#\nname <string>\nReturns: <boolean>\nReturns true if there is at least one name-value pair whose name is name.\n\nmimeParams.keys()#\nReturns: <Iterator>\nReturns an iterator over the names of each name-value pair.\n\nimport {", "doc_id": "c019ca3e-ff9c-43f6-b0e5-83aed8fec6f9", "embedding": null, "doc_hash": "c6c53a25e7218db622ca285b4d3c818ac289a2de4a592fe36db0feca9f286376", "extra_info": null, "node_info": {"start": 2644556, "end": 2647615}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "184e1c95-c438-49a3-b6b9-6f67f4074674", "3": "52d8caac-92d5-468e-884b-a67c965c7a9c"}}, "__type__": "1"}, "52d8caac-92d5-468e-884b-a67c965c7a9c": {"__data__": {"text": "an iterator over each of the name-value pairs in the parameters. Each item of the iterator is a JavaScript Array. The first item of the array is the name, the second item of the array is the value.\n\nmimeParams.get(name)#\nname <string>\nReturns: <string> or null if there is no name-value pair with the given name.\nReturns the value of the first name-value pair whose name is name. If there are no such pairs, null is returned.\n\nmimeParams.has(name)#\nname <string>\nReturns: <boolean>\nReturns true if there is at least one name-value pair whose name is name.\n\nmimeParams.keys()#\nReturns: <Iterator>\nReturns an iterator over the names of each name-value pair.\n\nimport { MIMEType } from 'node:util';\n\nconst { params } = new MIMEType('text/plain;foo=0;bar=1');\nfor (const name of params.keys()) {\n  console.log(name);\n}\n// Prints:\n//   foo\n//   bar\nmimeParams.set(name, value)#\nname <string>\nvalue <string>\nSets the value in the MIMEParams object associated with name to value. If there are any pre-existing name-value pairs whose names are name, set the first such pair's value to value.\n\nimport { MIMEType } from 'node:util';\n\nconst { params } = new MIMEType('text/plain;foo=0;bar=1');\nparams.set('foo', 'def');\nparams.set('baz', 'xyz');\nconsole.log(params.toString());\n// Prints: foo=def&bar=1&baz=xyz\nmimeParams.values()#\nReturns: <Iterator>\nReturns an iterator over the values of each name-value pair.\n\nmimeParams[@@iterator]()#\nReturns: <Iterator>\nAlias for mimeParams.entries().\n\nimport { MIMEType } from 'node:util';\n\nconst { params } = new MIMEType('text/plain;foo=bar;xyz=baz');\nfor (const [name, value] of params) {\n  console.log(name, value);\n}\n// Prints:\n//   foo bar\n//   xyz baz\nutil.parseArgs([config])#\nHistory\nStability: 1 - Experimental\nconfig <Object> Used to provide arguments for parsing and to configure the parser. config supports the following properties:\n\nargs <string[]> array of argument strings. Default: process.argv with execPath and filename removed.\noptions <Object> Used to describe arguments known to the parser. Keys of options are the long names of options and values are an <Object> accepting the following properties:\ntype <string> Type of argument, which must be either boolean or string.\nmultiple <boolean> Whether this option can be provided multiple times. If true, all values will be collected in an array. If false, values for the option are last-wins. Default: false.\nshort <string> A single character alias for the option.\ndefault <string> | <boolean> | <string[]> | <boolean[]> The default option value when it is not set by args. It must be of the same type as the type property. When multiple is true, it must be an array.\nstrict <boolean> Should an error be thrown when unknown arguments are encountered, or when arguments are passed that do not match the type configured in options. Default: true.\nallowPositionals <boolean> Whether this command accepts positional arguments. Default: false if strict is true, otherwise true.\ntokens <boolean> Return the parsed tokens. This is useful for extending the built-in behavior, from adding additional checks through to reprocessing the tokens in different ways. Default: false.\nReturns: <Object> The parsed command line arguments:\n\nvalues <Object> A mapping of parsed option names with their <string> or <boolean> values.\npositionals <string[]> Positional arguments.\ntokens <Object[]> | <undefined> See parseArgs tokens section. Only returned if config", "doc_id": "52d8caac-92d5-468e-884b-a67c965c7a9c", "embedding": null, "doc_hash": "fc89488cc7d78333a35b0ac7a7aea9a515100737357dfb77b42405afa221cd5e", "extra_info": null, "node_info": {"start": 2647539, "end": 2650980}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c019ca3e-ff9c-43f6-b0e5-83aed8fec6f9", "3": "d7d3e291-76e9-4657-885a-4643d66b1e26"}}, "__type__": "1"}, "d7d3e291-76e9-4657-885a-4643d66b1e26": {"__data__": {"text": "when unknown arguments are encountered, or when arguments are passed that do not match the type configured in options. Default: true.\nallowPositionals <boolean> Whether this command accepts positional arguments. Default: false if strict is true, otherwise true.\ntokens <boolean> Return the parsed tokens. This is useful for extending the built-in behavior, from adding additional checks through to reprocessing the tokens in different ways. Default: false.\nReturns: <Object> The parsed command line arguments:\n\nvalues <Object> A mapping of parsed option names with their <string> or <boolean> values.\npositionals <string[]> Positional arguments.\ntokens <Object[]> | <undefined> See parseArgs tokens section. Only returned if config includes tokens: true.\nProvides a higher level API for command-line argument parsing than interacting with process.argv directly. Takes a specification for the expected arguments and returns a structured object with the parsed options and positionals.\n\nimport { parseArgs } from 'node:util';\nconst args = ['-f', '--bar', 'b'];\nconst options = {\n  foo: {\n    type: 'boolean',\n    short: 'f',\n  },\n  bar: {\n    type: 'string',\n  },\n};\nconst {\n  values,\n  positionals,\n} = parseArgs({ args, options });\nconsole.log(values, positionals);\n// Prints: [Object: null prototype] { foo: true, bar: 'b' } []\nutil.parseArgs is experimental and behavior may change. Join the conversation in pkgjs/parseargs to contribute to the design.\n\nparseArgs tokens#\nDetailed parse information is available for adding custom behaviours by specifying tokens: true in the configuration. The returned tokens have properties describing:\n\nall tokens\nkind <string> One of 'option', 'positional', or 'option-terminator'.\nindex <number> Index of element in args containing token. So the source argument for a token is args[token.index].\noption tokens\nname <string> Long name of option.\nrawName <string> How option used in args, like -f of --foo.\nvalue <string> | <undefined> Option value specified in args. Undefined for boolean options.\ninlineValue <boolean> | <undefined> Whether option value specified inline, like --foo=bar.\npositional tokens\nvalue <string> The value of the positional argument in args (i.e. args[index]).\noption-terminator token\nThe returned tokens are in the order encountered in the input args. Options that appear more than once in args produce a token for each use. Short option groups like -xy expand to a token for each option. So -xxx produces three tokens.\n\nFor example to use the returned tokens to add support for a negated option like --no-color, the tokens can be reprocessed to change the value stored for the negated option.\n\nimport { parseArgs } from 'node:util';\n\nconst options = {\n  'color': { type: 'boolean' },\n  'no-color': { type: 'boolean' },\n  'logfile': { type: 'string' },\n  'no-logfile': { type: 'boolean' },\n};\nconst { values, tokens } = parseArgs({ options, tokens: true });\n\n// Reprocess the option tokens and overwrite the returned values.\ntokens\n  .filter((token) => token.kind === 'option')\n  .forEach((token) => {\n    if (token.name.startsWith('no-')) {\n      // Store foo:false for --no-foo\n      const positiveName = token.name.slice(3);\n      values[positiveName] = false;\n      delete values[token.name];\n    } else {\n      // Resave value so last one wins if both --foo and --no-foo.\n      values[token.name] = token.value ??", "doc_id": "d7d3e291-76e9-4657-885a-4643d66b1e26", "embedding": null, "doc_hash": "770e16c97d895e2c00ffb3a3babd1f2372f9acbe955cd10081f9eab3f2eac7be", "extra_info": null, "node_info": {"start": 2650913, "end": 2654297}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "52d8caac-92d5-468e-884b-a67c965c7a9c", "3": "f375d61b-61d2-40e7-b410-92b4192d9a75"}}, "__type__": "1"}, "f375d61b-61d2-40e7-b410-92b4192d9a75": {"__data__": {"text": "values, tokens } = parseArgs({ options, tokens: true });\n\n// Reprocess the option tokens and overwrite the returned values.\ntokens\n  .filter((token) => token.kind === 'option')\n  .forEach((token) => {\n    if (token.name.startsWith('no-')) {\n      // Store foo:false for --no-foo\n      const positiveName = token.name.slice(3);\n      values[positiveName] = false;\n      delete values[token.name];\n    } else {\n      // Resave value so last one wins if both --foo and --no-foo.\n      values[token.name] = token.value ?? true;\n    }\n  });\n\nconst color = values.color;\nconst logfile = values.logfile ?? 'default.log';\n\nconsole.log({ logfile, color });\nExample usage showing negated options, and when an option is used multiple ways then last one wins.\n\n$ node negate.js\n{ logfile: 'default.log', color: undefined }\n$ node negate.js --no-logfile --no-color\n{ logfile: false, color: false }\n$ node negate.js --logfile=test.log --color\n{ logfile: 'test.log', color: true }\n$ node negate.js --no-logfile --logfile=test.log --color --no-color\n{ logfile: 'test.log', color: false }\nutil.promisify(original)#\nAdded in: v8.0.0\noriginal <Function>\nReturns: <Function>\nTakes a function following the common error-first callback style, i.e. taking an (err, value) => ... callback as the last argument, and returns a version that returns promises.\n\nconst util = require('node:util');\nconst fs = require('node:fs');\n\nconst stat = util.promisify(fs.stat);\nstat('.').then((stats) => {\n  // Do something with `stats`\n}).catch((error) => {\n  // Handle the error.\n});\nOr, equivalently using async functions:\n\nconst util = require('node:util');\nconst fs = require('node:fs');\n\nconst stat = util.promisify(fs.stat);\n\nasync function callStat() {\n  const stats = await stat('.');\n  console.log(`This directory is owned by ${stats.uid}`);\n}\nIf there is an original[util.promisify.custom] property present, promisify will return its value, see Custom promisified functions.\n\npromisify() assumes that original is a function taking a callback as its final argument in all cases. If original is not a function, promisify() will throw an error. If original is a function but its last argument is not an error-first callback, it will still be passed an error-first callback as its last argument.\n\nUsing promisify() on class methods or other methods that use this may not work as expected unless handled specially:\n\nconst util = require('node:util');\n\nclass Foo {\n  constructor() {\n    this.a = 42;\n  }\n\n  bar(callback) {\n    callback(null, this.a);\n  }\n}\n\nconst foo = new Foo();\n\nconst naiveBar = util.promisify(foo.bar);\n// TypeError: Cannot read property 'a' of undefined\n// naiveBar().then(a => console.log(a));\n\nnaiveBar.call(foo).then((a) => console.log(a)); // '42'\n\nconst bindBar = naiveBar.bind(foo);\nbindBar().then((a) => console.log(a)); // '42'\nCustom promisified functions#\nUsing the util.promisify.custom symbol one can override the return value of util.promisify():\n\nconst util = require('node:util');\n\nfunction doSomething(foo, callback) {\n  // ...\n}\n\ndoSomething[util.promisify.custom] = (foo) => {\n  return", "doc_id": "f375d61b-61d2-40e7-b410-92b4192d9a75", "embedding": null, "doc_hash": "07152771c23e61bcef909163e4b2fe37ac9cc7ae6352172e4ff5947dd2faec8f", "extra_info": null, "node_info": {"start": 2654516, "end": 2657606}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d7d3e291-76e9-4657-885a-4643d66b1e26", "3": "96ce3dc7-2a84-4103-bfa4-5513671e4fa3"}}, "__type__": "1"}, "96ce3dc7-2a84-4103-bfa4-5513671e4fa3": {"__data__": {"text": "new Foo();\n\nconst naiveBar = util.promisify(foo.bar);\n// TypeError: Cannot read property 'a' of undefined\n// naiveBar().then(a => console.log(a));\n\nnaiveBar.call(foo).then((a) => console.log(a)); // '42'\n\nconst bindBar = naiveBar.bind(foo);\nbindBar().then((a) => console.log(a)); // '42'\nCustom promisified functions#\nUsing the util.promisify.custom symbol one can override the return value of util.promisify():\n\nconst util = require('node:util');\n\nfunction doSomething(foo, callback) {\n  // ...\n}\n\ndoSomething[util.promisify.custom] = (foo) => {\n  return getPromiseSomehow();\n};\n\nconst promisified = util.promisify(doSomething);\nconsole.log(promisified === doSomething[util.promisify.custom]);\n// prints 'true'\nThis can be useful for cases where the original function does not follow the standard format of taking an error-first callback as the last argument.\n\nFor example, with a function that takes in (foo, onSuccessCallback, onErrorCallback):\n\ndoSomething[util.promisify.custom] = (foo) => {\n  return new Promise((resolve, reject) => {\n    doSomething(foo, resolve, reject);\n  });\n};\nIf promisify.custom is defined but is not a function, promisify() will throw an error.\n\nutil.promisify.custom#\nHistory\n<symbol> that can be used to declare custom promisified variants of functions, see Custom promisified functions.\nIn addition to being accessible through util.promisify.custom, this symbol is registered globally and can be accessed in any environment as Symbol.for('nodejs.util.promisify.custom').\n\nFor example, with a function that takes in (foo, onSuccessCallback, onErrorCallback):\n\nconst kCustomPromisifiedSymbol = Symbol.for('nodejs.util.promisify.custom');\n\ndoSomething[kCustomPromisifiedSymbol] = (foo) => {\n  return new Promise((resolve, reject) => {\n    doSomething(foo, resolve, reject);\n  });\n};\nutil.stripVTControlCharacters(str)#\nAdded in: v16.11.0\nstr <string>\nReturns: <string>\nReturns str with any ANSI escape codes removed.\n\nconsole.log(util.stripVTControlCharacters('\\u001B[4mvalue\\u001B[0m'));\n// Prints \"value\"\nClass: util.TextDecoder#\nAdded in: v8.3.0\nAn implementation of the WHATWG Encoding Standard TextDecoder API.\n\nconst decoder = new TextDecoder();\nconst u8arr = new Uint8Array([72, 101, 108, 108, 111]);\nconsole.log(decoder.decode(u8arr)); // Hello\nWHATWG supported encodings#\nPer the WHATWG Encoding Standard, the encodings supported by the TextDecoder API are outlined in the tables below. For each encoding, one or more aliases may be used.\n\nDifferent Node.js build configurations support different sets of encodings. (see Internationalization)\n\nEncodings supported by default (with full ICU data)#\nEncoding\tAliases\n'ibm866'\t'866', 'cp866', 'csibm866'\n'iso-8859-2'\t'csisolatin2', 'iso-ir-101', 'iso8859-2', 'iso88592', 'iso_8859-2', 'iso_8859-2:1987', 'l2', 'latin2'\n'iso-8859-3'\t'csisolatin3', 'iso-ir-109', 'iso8859-3', 'iso88593', 'iso_8859-3', 'iso_8859-3:1988', 'l3', 'latin3'\n'iso-8859-4'\t'csisolatin4', 'iso-ir-110', 'iso8859-4', 'iso88594',", "doc_id": "96ce3dc7-2a84-4103-bfa4-5513671e4fa3", "embedding": null, "doc_hash": "ea42a203c776c0de8e8c5cf7f453e5a495d2f1211556f52acc86ad186d40413f", "extra_info": null, "node_info": {"start": 2657523, "end": 2660509}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f375d61b-61d2-40e7-b410-92b4192d9a75", "3": "11d4433a-c921-4db7-b736-6b9d64d05033"}}, "__type__": "1"}, "11d4433a-c921-4db7-b736-6b9d64d05033": {"__data__": {"text": "default (with full ICU data)#\nEncoding\tAliases\n'ibm866'\t'866', 'cp866', 'csibm866'\n'iso-8859-2'\t'csisolatin2', 'iso-ir-101', 'iso8859-2', 'iso88592', 'iso_8859-2', 'iso_8859-2:1987', 'l2', 'latin2'\n'iso-8859-3'\t'csisolatin3', 'iso-ir-109', 'iso8859-3', 'iso88593', 'iso_8859-3', 'iso_8859-3:1988', 'l3', 'latin3'\n'iso-8859-4'\t'csisolatin4', 'iso-ir-110', 'iso8859-4', 'iso88594', 'iso_8859-4', 'iso_8859-4:1988', 'l4', 'latin4'\n'iso-8859-5'\t'csisolatincyrillic', 'cyrillic', 'iso-ir-144', 'iso8859-5', 'iso88595', 'iso_8859-5', 'iso_8859-5:1988'\n'iso-8859-6'\t'arabic', 'asmo-708', 'csiso88596e', 'csiso88596i', 'csisolatinarabic', 'ecma-114', 'iso-8859-6-e', 'iso-8859-6-i', 'iso-ir-127', 'iso8859-6', 'iso88596', 'iso_8859-6', 'iso_8859-6:1987'\n'iso-8859-7'\t'csisolatingreek', 'ecma-118', 'elot_928', 'greek', 'greek8', 'iso-ir-126', 'iso8859-7', 'iso88597', 'iso_8859-7', 'iso_8859-7:1987', 'sun_eu_greek'\n'iso-8859-8'\t'csiso88598e', 'csisolatinhebrew', 'hebrew', 'iso-8859-8-e', 'iso-ir-138', 'iso8859-8', 'iso88598', 'iso_8859-8', 'iso_8859-8:1988', 'visual'\n'iso-8859-8-i'\t'csiso88598i', 'logical'\n'iso-8859-10'\t'csisolatin6', 'iso-ir-157', 'iso8859-10', 'iso885910', 'l6', 'latin6'\n'iso-8859-13'\t'iso8859-13', 'iso885913'\n'iso-8859-14'\t'iso8859-14', 'iso885914'\n'iso-8859-15'\t'csisolatin9', 'iso8859-15', 'iso885915', 'iso_8859-15', 'l9'\n'koi8-r'\t'cskoi8r', 'koi', 'koi8', 'koi8_r'\n'koi8-u'\t'koi8-ru'\n'macintosh'\t'csmacintosh', 'mac', 'x-mac-roman'\n'windows-874'\t'dos-874', 'iso-8859-11', 'iso8859-11', 'iso885911', 'tis-620'\n'windows-1250'\t'cp1250', 'x-cp1250'\n'windows-1251'\t'cp1251', 'x-cp1251'\n'windows-1252'\t'ansi_x3.4-1968', 'ascii', 'cp1252', 'cp819', 'csisolatin1', 'ibm819', 'iso-8859-1', 'iso-ir-100', 'iso8859-1', 'iso88591', 'iso_8859-1', 'iso_8859-1:1987', 'l1', 'latin1', 'us-ascii', 'x-cp1252'\n'windows-1253'\t'cp1253', 'x-cp1253'\n'windows-1254'\t'cp1254', 'csisolatin5', 'iso-8859-9',", "doc_id": "11d4433a-c921-4db7-b736-6b9d64d05033", "embedding": null, "doc_hash": "270633d7724c5ed4377d6d078b83abaa5e577292da1b219f309de38aeffd09fd", "extra_info": null, "node_info": {"start": 2660656, "end": 2662560}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "96ce3dc7-2a84-4103-bfa4-5513671e4fa3", "3": "4307f7b3-a54a-4ceb-9fba-aa44c63217d5"}}, "__type__": "1"}, "4307f7b3-a54a-4ceb-9fba-aa44c63217d5": {"__data__": {"text": "'x-cp1250'\n'windows-1251'\t'cp1251', 'x-cp1251'\n'windows-1252'\t'ansi_x3.4-1968', 'ascii', 'cp1252', 'cp819', 'csisolatin1', 'ibm819', 'iso-8859-1', 'iso-ir-100', 'iso8859-1', 'iso88591', 'iso_8859-1', 'iso_8859-1:1987', 'l1', 'latin1', 'us-ascii', 'x-cp1252'\n'windows-1253'\t'cp1253', 'x-cp1253'\n'windows-1254'\t'cp1254', 'csisolatin5', 'iso-8859-9', 'iso-ir-148', 'iso8859-9', 'iso88599', 'iso_8859-9', 'iso_8859-9:1989', 'l5', 'latin5', 'x-cp1254'\n'windows-1255'\t'cp1255', 'x-cp1255'\n'windows-1256'\t'cp1256', 'x-cp1256'\n'windows-1257'\t'cp1257', 'x-cp1257'\n'windows-1258'\t'cp1258', 'x-cp1258'\n'x-mac-cyrillic'\t'x-mac-ukrainian'\n'gbk'\t'chinese', 'csgb2312', 'csiso58gb231280', 'gb2312', 'gb_2312', 'gb_2312-80', 'iso-ir-58', 'x-gbk'\n'gb18030'\t\n'big5'\t'big5-hkscs', 'cn-big5', 'csbig5', 'x-x-big5'\n'euc-jp'\t'cseucpkdfmtjapanese', 'x-euc-jp'\n'iso-2022-jp'\t'csiso2022jp'\n'shift_jis'\t'csshiftjis', 'ms932', 'ms_kanji', 'shift-jis', 'sjis', 'windows-31j', 'x-sjis'\n'euc-kr'\t'cseuckr', 'csksc56011987', 'iso-ir-149', 'korean', 'ks_c_5601-1987', 'ks_c_5601-1989', 'ksc5601', 'ksc_5601', 'windows-949'\nEncodings supported when Node.js is built with the small-icu option#\nEncoding\tAliases\n'utf-8'\t'unicode-1-1-utf-8', 'utf8'\n'utf-16le'\t'utf-16'\n'utf-16be'\t\nEncodings supported when ICU is disabled#\nEncoding\tAliases\n'utf-8'\t'unicode-1-1-utf-8', 'utf8'\n'utf-16le'\t'utf-16'\nThe 'iso-8859-16' encoding listed in the WHATWG Encoding Standard is not supported.\n\nnew TextDecoder([encoding[, options]])#\nHistory\nencoding <string> Identifies the encoding that this TextDecoder instance supports. Default: 'utf-8'.\noptions <Object>\nfatal <boolean> true if decoding failures are fatal. This option is not supported when ICU is disabled (see Internationalization). Default: false.\nignoreBOM <boolean> When true, the TextDecoder will include the byte order mark in the decoded result. When false, the byte order mark will be removed from the output. This option is only used when encoding is 'utf-8', 'utf-16be', or 'utf-16le'. Default: false.\nCreates a new TextDecoder instance. The encoding may specify one of the supported encodings or an alias.\n\nThe TextDecoder class is also available on the global object.\n\ntextDecoder.decode([input[, options]])#\ninput <ArrayBuffer> | <DataView> | <TypedArray> An ArrayBuffer, DataView, or TypedArray instance containing the encoded data.\noptions <Object>\nstream <boolean> true if additional chunks of", "doc_id": "4307f7b3-a54a-4ceb-9fba-aa44c63217d5", "embedding": null, "doc_hash": "3518b74afce89dbdd5ce02219cb1835c8b73387b1fb5f25faffb4dc1ab33f45c", "extra_info": null, "node_info": {"start": 2662589, "end": 2665006}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "11d4433a-c921-4db7-b736-6b9d64d05033", "3": "51270bef-7da4-43c8-b56f-e951d2c012d2"}}, "__type__": "1"}, "51270bef-7da4-43c8-b56f-e951d2c012d2": {"__data__": {"text": "disabled (see Internationalization). Default: false.\nignoreBOM <boolean> When true, the TextDecoder will include the byte order mark in the decoded result. When false, the byte order mark will be removed from the output. This option is only used when encoding is 'utf-8', 'utf-16be', or 'utf-16le'. Default: false.\nCreates a new TextDecoder instance. The encoding may specify one of the supported encodings or an alias.\n\nThe TextDecoder class is also available on the global object.\n\ntextDecoder.decode([input[, options]])#\ninput <ArrayBuffer> | <DataView> | <TypedArray> An ArrayBuffer, DataView, or TypedArray instance containing the encoded data.\noptions <Object>\nstream <boolean> true if additional chunks of data are expected. Default: false.\nReturns: <string>\nDecodes the input and returns a string. If options.stream is true, any incomplete byte sequences occurring at the end of the input are buffered internally and emitted after the next call to textDecoder.decode().\n\nIf textDecoder.fatal is true, decoding errors that occur will result in a TypeError being thrown.\n\ntextDecoder.encoding#\n<string>\nThe encoding supported by the TextDecoder instance.\n\ntextDecoder.fatal#\n<boolean>\nThe value will be true if decoding errors result in a TypeError being thrown.\n\ntextDecoder.ignoreBOM#\n<boolean>\nThe value will be true if the decoding result will include the byte order mark.\n\nClass: util.TextEncoder#\nHistory\nAn implementation of the WHATWG Encoding Standard TextEncoder API. All instances of TextEncoder only support UTF-8 encoding.\n\nconst encoder = new TextEncoder();\nconst uint8array = encoder.encode('this is some data');\nThe TextEncoder class is also available on the global object.\n\ntextEncoder.encode([input])#\ninput <string> The text to encode. Default: an empty string.\nReturns: <Uint8Array>\nUTF-8 encodes the input string and returns a Uint8Array containing the encoded bytes.\n\ntextEncoder.encodeInto(src, dest)#\nsrc <string> The text to encode.\ndest <Uint8Array> The array to hold the encode result.\nReturns: <Object>\nread <number> The read Unicode code units of src.\nwritten <number> The written UTF-8 bytes of dest.\nUTF-8 encodes the src string to the dest Uint8Array and returns an object containing the read Unicode code units and written UTF-8 bytes.\n\nconst encoder = new TextEncoder();\nconst src = 'this is some data';\nconst dest = new Uint8Array(10);\nconst { read, written } = encoder.encodeInto(src, dest);\ntextEncoder.encoding#\n<string>\nThe encoding supported by the TextEncoder instance. Always set to 'utf-8'.\n\nutil.toUSVString(string)#\nAdded in: v16.8.0, v14.18.0\nstring <string>\nReturns the string after replacing any surrogate code points (or equivalently, any unpaired surrogate code units) with the Unicode \"replacement character\" U+FFFD.\n\nutil.transferableAbortController()#\nAdded in: v18.11.0\nStability: 1 - Experimental\nCreates and returns an <AbortController> instance whose <AbortSignal> is marked as transferable and can be used with structuredClone() or postMessage().\n\nutil.transferableAbortSignal(signal)#\nAdded in: v18.11.0\nStability: 1 - Experimental\nsignal <AbortSignal>\nReturns: <AbortSignal>\nMarks the given <AbortSignal> as transferable so that it can be used with structuredClone() and postMessage().\n\nconst signal = transferableAbortSignal(AbortSignal.timeout(100));\nconst channel = new MessageChannel();\nchannel.port2.postMessage(signal, [signal]);\nutil.aborted(signal, resource)#\nAdded in:", "doc_id": "51270bef-7da4-43c8-b56f-e951d2c012d2", "embedding": null, "doc_hash": "d96aff3e1c68cb6f720d347ef39ed4e84959cb1af9f5fc9798c580b6b8f9dc96", "extra_info": null, "node_info": {"start": 2664716, "end": 2668159}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4307f7b3-a54a-4ceb-9fba-aa44c63217d5", "3": "0ed3fb26-c9e6-47aa-b44b-083b1f702925"}}, "__type__": "1"}, "0ed3fb26-c9e6-47aa-b44b-083b1f702925": {"__data__": {"text": "1 - Experimental\nCreates and returns an <AbortController> instance whose <AbortSignal> is marked as transferable and can be used with structuredClone() or postMessage().\n\nutil.transferableAbortSignal(signal)#\nAdded in: v18.11.0\nStability: 1 - Experimental\nsignal <AbortSignal>\nReturns: <AbortSignal>\nMarks the given <AbortSignal> as transferable so that it can be used with structuredClone() and postMessage().\n\nconst signal = transferableAbortSignal(AbortSignal.timeout(100));\nconst channel = new MessageChannel();\nchannel.port2.postMessage(signal, [signal]);\nutil.aborted(signal, resource)#\nAdded in: v18.16.0\nStability: 1 - Experimental\nsignal <AbortSignal>\nresource <Object> Any non-null entity, reference to which is held weakly.\nReturns: <Promise>\nListens to abort event on the provided signal and returns a promise that is fulfilled when the signal is aborted. If the passed resource is garbage collected before the signal is aborted, the returned promise shall remain pending indefinitely.\n\nconst { aborted } = require('node:util');\n\nconst dependent = obtainSomethingAbortable();\n\naborted(dependent.signal, dependent).then(() => {\n  // Do something when dependent is aborted.\n});\n\ndependent.on('event', () => {\n  dependent.abort();\n});\nutil.types#\nHistory\nutil.types provides type checks for different kinds of built-in objects. Unlike instanceof or Object.prototype.toString.call(value), these checks do not inspect properties of the object that are accessible from JavaScript (like their prototype), and usually have the overhead of calling into C++.\n\nThe result generally does not make any guarantees about what kinds of properties or behavior a value exposes in JavaScript. They are primarily useful for addon developers who prefer to do type checking in JavaScript.\n\nThe API is accessible via require('node:util').types or require('node:util/types').\n\nutil.types.isAnyArrayBuffer(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in ArrayBuffer or SharedArrayBuffer instance.\n\nSee also util.types.isArrayBuffer() and util.types.isSharedArrayBuffer().\n\nutil.types.isAnyArrayBuffer(new ArrayBuffer());  // Returns true\nutil.types.isAnyArrayBuffer(new SharedArrayBuffer());  // Returns true\nutil.types.isArrayBufferView(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is an instance of one of the ArrayBuffer views, such as typed array objects or DataView. Equivalent to ArrayBuffer.isView().\n\nutil.types.isArrayBufferView(new Int8Array());  // true\nutil.types.isArrayBufferView(Buffer.from('hello world')); // true\nutil.types.isArrayBufferView(new DataView(new ArrayBuffer(16)));  // true\nutil.types.isArrayBufferView(new ArrayBuffer());  // false\nutil.types.isArgumentsObject(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is an arguments object.\n\nfunction foo() {\n  util.types.isArgumentsObject(arguments);  // Returns true\n}\nutil.types.isArrayBuffer(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in ArrayBuffer instance. This does not include SharedArrayBuffer instances. Usually, it is desirable to test for both; See util.types.isAnyArrayBuffer() for that.\n\nutil.types.isArrayBuffer(new ArrayBuffer());  // Returns true\nutil.types.isArrayBuffer(new SharedArrayBuffer());  // Returns false\nutil.types.isAsyncFunction(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns", "doc_id": "0ed3fb26-c9e6-47aa-b44b-083b1f702925", "embedding": null, "doc_hash": "7233f1771f315f36e02167a98a46e18afe040dd0ab75a8121da04d0cf9faee00", "extra_info": null, "node_info": {"start": 2668230, "end": 2671689}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "51270bef-7da4-43c8-b56f-e951d2c012d2", "3": "29afcbc9-d49c-4ab4-9457-cc4d67e096cd"}}, "__type__": "1"}, "29afcbc9-d49c-4ab4-9457-cc4d67e096cd": {"__data__": {"text": "true if the value is an arguments object.\n\nfunction foo() {\n  util.types.isArgumentsObject(arguments);  // Returns true\n}\nutil.types.isArrayBuffer(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in ArrayBuffer instance. This does not include SharedArrayBuffer instances. Usually, it is desirable to test for both; See util.types.isAnyArrayBuffer() for that.\n\nutil.types.isArrayBuffer(new ArrayBuffer());  // Returns true\nutil.types.isArrayBuffer(new SharedArrayBuffer());  // Returns false\nutil.types.isAsyncFunction(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is an async function. This only reports back what the JavaScript engine is seeing; in particular, the return value may not match the original source code if a transpilation tool was used.\n\nutil.types.isAsyncFunction(function foo() {});  // Returns false\nutil.types.isAsyncFunction(async function foo() {});  // Returns true\nutil.types.isBigInt64Array(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a BigInt64Array instance.\n\nutil.types.isBigInt64Array(new BigInt64Array());   // Returns true\nutil.types.isBigInt64Array(new BigUint64Array());  // Returns false\nutil.types.isBigUint64Array(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a BigUint64Array instance.\n\nutil.types.isBigUint64Array(new BigInt64Array());   // Returns false\nutil.types.isBigUint64Array(new BigUint64Array());  // Returns true\nutil.types.isBooleanObject(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a boolean object, e.g. created by new Boolean().\n\nutil.types.isBooleanObject(false);  // Returns false\nutil.types.isBooleanObject(true);   // Returns false\nutil.types.isBooleanObject(new Boolean(false)); // Returns true\nutil.types.isBooleanObject(new Boolean(true));  // Returns true\nutil.types.isBooleanObject(Boolean(false)); // Returns false\nutil.types.isBooleanObject(Boolean(true));  // Returns false\nutil.types.isBoxedPrimitive(value)#\nAdded in: v10.11.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is any boxed primitive object, e.g. created by new Boolean(), new String() or Object(Symbol()).\n\nFor example:\n\nutil.types.isBoxedPrimitive(false); // Returns false\nutil.types.isBoxedPrimitive(new Boolean(false)); // Returns true\nutil.types.isBoxedPrimitive(Symbol('foo')); // Returns false\nutil.types.isBoxedPrimitive(Object(Symbol('foo'))); // Returns true\nutil.types.isBoxedPrimitive(Object(BigInt(5))); // Returns true\nutil.types.isCryptoKey(value)#\nAdded in: v16.2.0\nvalue <Object>\nReturns: <boolean>\nReturns true if value is a <CryptoKey>, false otherwise.\n\nutil.types.isDataView(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in DataView instance.\n\nconst ab = new ArrayBuffer(20);\nutil.types.isDataView(new DataView(ab));  // Returns true\nutil.types.isDataView(new Float64Array());  // Returns false\nSee also ArrayBuffer.isView().\n\nutil.types.isDate(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in", "doc_id": "29afcbc9-d49c-4ab4-9457-cc4d67e096cd", "embedding": null, "doc_hash": "c72f0ed62710588943fd8451e288cd2d4ba7fd3a3860d03b0c13bfb6b1b65dad", "extra_info": null, "node_info": {"start": 2671672, "end": 2674826}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0ed3fb26-c9e6-47aa-b44b-083b1f702925", "3": "dd7c1aeb-2e27-48c0-b18b-df8866e10dd5"}}, "__type__": "1"}, "dd7c1aeb-2e27-48c0-b18b-df8866e10dd5": {"__data__": {"text": "in: v16.2.0\nvalue <Object>\nReturns: <boolean>\nReturns true if value is a <CryptoKey>, false otherwise.\n\nutil.types.isDataView(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in DataView instance.\n\nconst ab = new ArrayBuffer(20);\nutil.types.isDataView(new DataView(ab));  // Returns true\nutil.types.isDataView(new Float64Array());  // Returns false\nSee also ArrayBuffer.isView().\n\nutil.types.isDate(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in Date instance.\n\nutil.types.isDate(new Date());  // Returns true\nutil.types.isExternal(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a native External value.\n\nA native External value is a special type of object that contains a raw C++ pointer (void*) for access from native code, and has no other properties. Such objects are created either by Node.js internals or native addons. In JavaScript, they are frozen objects with a null prototype.\n\n#include <js_native_api.h>\n#include <stdlib.h>\nnapi_value result;\nstatic napi_value MyNapi(napi_env env, napi_callback_info info) {\n  int* raw = (int*) malloc(1024);\n  napi_status status = napi_create_external(env, (void*) raw, NULL, NULL, &result);\n  if (status != napi_ok) {\n    napi_throw_error(env, NULL, \"napi_create_external failed\");\n    return NULL;\n  }\n  return result;\n}\n...\nDECLARE_NAPI_PROPERTY(\"myNapi\", MyNapi)\n...\nconst native = require('napi_addon.node');\nconst data = native.myNapi();\nutil.types.isExternal(data); // returns true\nutil.types.isExternal(0); // returns false\nutil.types.isExternal(new String('foo')); // returns false\nFor further information on napi_create_external, refer to napi_create_external().\n\nutil.types.isFloat32Array(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in Float32Array instance.\n\nutil.types.isFloat32Array(new ArrayBuffer());  // Returns false\nutil.types.isFloat32Array(new Float32Array());  // Returns true\nutil.types.isFloat32Array(new Float64Array());  // Returns false\nutil.types.isFloat64Array(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in Float64Array instance.\n\nutil.types.isFloat64Array(new ArrayBuffer());  // Returns false\nutil.types.isFloat64Array(new Uint8Array());  // Returns false\nutil.types.isFloat64Array(new Float64Array());  // Returns true\nutil.types.isGeneratorFunction(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a generator function. This only reports back what the JavaScript engine is seeing; in particular, the return value may not match the original source code if a transpilation tool was used.\n\nutil.types.isGeneratorFunction(function foo() {});  // Returns false\nutil.types.isGeneratorFunction(function* foo() {});  // Returns true\nutil.types.isGeneratorObject(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a generator object as returned from a built-in generator function. This only reports back what the JavaScript engine is seeing; in particular, the return value may not match the original source code if a transpilation tool was", "doc_id": "dd7c1aeb-2e27-48c0-b18b-df8866e10dd5", "embedding": null, "doc_hash": "987bf72edb29c51ace9114b2c1bc0f512e327f963720d68633682a12b9604076", "extra_info": null, "node_info": {"start": 2674905, "end": 2678123}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "29afcbc9-d49c-4ab4-9457-cc4d67e096cd", "3": "a9b29a62-ce5e-433b-9910-9117bc2d23b8"}}, "__type__": "1"}, "a9b29a62-ce5e-433b-9910-9117bc2d23b8": {"__data__": {"text": "<any>\nReturns: <boolean>\nReturns true if the value is a generator function. This only reports back what the JavaScript engine is seeing; in particular, the return value may not match the original source code if a transpilation tool was used.\n\nutil.types.isGeneratorFunction(function foo() {});  // Returns false\nutil.types.isGeneratorFunction(function* foo() {});  // Returns true\nutil.types.isGeneratorObject(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a generator object as returned from a built-in generator function. This only reports back what the JavaScript engine is seeing; in particular, the return value may not match the original source code if a transpilation tool was used.\n\nfunction* foo() {}\nconst generator = foo();\nutil.types.isGeneratorObject(generator);  // Returns true\nutil.types.isInt8Array(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in Int8Array instance.\n\nutil.types.isInt8Array(new ArrayBuffer());  // Returns false\nutil.types.isInt8Array(new Int8Array());  // Returns true\nutil.types.isInt8Array(new Float64Array());  // Returns false\nutil.types.isInt16Array(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in Int16Array instance.\n\nutil.types.isInt16Array(new ArrayBuffer());  // Returns false\nutil.types.isInt16Array(new Int16Array());  // Returns true\nutil.types.isInt16Array(new Float64Array());  // Returns false\nutil.types.isInt32Array(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in Int32Array instance.\n\nutil.types.isInt32Array(new ArrayBuffer());  // Returns false\nutil.types.isInt32Array(new Int32Array());  // Returns true\nutil.types.isInt32Array(new Float64Array());  // Returns false\nutil.types.isKeyObject(value)#\nAdded in: v16.2.0\nvalue <Object>\nReturns: <boolean>\nReturns true if value is a <KeyObject>, false otherwise.\n\nutil.types.isMap(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in Map instance.\n\nutil.types.isMap(new Map());  // Returns true\nutil.types.isMapIterator(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is an iterator returned for a built-in Map instance.\n\nconst map = new Map();\nutil.types.isMapIterator(map.keys());  // Returns true\nutil.types.isMapIterator(map.values());  // Returns true\nutil.types.isMapIterator(map.entries());  // Returns true\nutil.types.isMapIterator(map[Symbol.iterator]());  // Returns true\nutil.types.isModuleNamespaceObject(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is an instance of a Module Namespace Object.\n\nimport * as ns from './a.js';\n\nutil.types.isModuleNamespaceObject(ns);  // Returns true\nutil.types.isNativeError(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is an instance of a built-in Error type.\n\nutil.types.isNativeError(new Error());  // Returns true\nutil.types.isNativeError(new TypeError());  // Returns true\nutil.types.isNativeError(new RangeError());  // Returns true\nutil.types.isNumberObject(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value", "doc_id": "a9b29a62-ce5e-433b-9910-9117bc2d23b8", "embedding": null, "doc_hash": "e6800a09bd57bc039e8518331a0671b693f959be65521f74c6e4b59a6bc5b937", "extra_info": null, "node_info": {"start": 2677986, "end": 2681221}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dd7c1aeb-2e27-48c0-b18b-df8866e10dd5", "3": "8c44c899-bd65-4691-bb38-5a69f6429b2f"}}, "__type__": "1"}, "8c44c899-bd65-4691-bb38-5a69f6429b2f": {"__data__": {"text": "<boolean>\nReturns true if the value is an instance of a Module Namespace Object.\n\nimport * as ns from './a.js';\n\nutil.types.isModuleNamespaceObject(ns);  // Returns true\nutil.types.isNativeError(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is an instance of a built-in Error type.\n\nutil.types.isNativeError(new Error());  // Returns true\nutil.types.isNativeError(new TypeError());  // Returns true\nutil.types.isNativeError(new RangeError());  // Returns true\nutil.types.isNumberObject(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a number object, e.g. created by new Number().\n\nutil.types.isNumberObject(0);  // Returns false\nutil.types.isNumberObject(new Number(0));   // Returns true\nutil.types.isPromise(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in Promise.\n\nutil.types.isPromise(Promise.resolve(42));  // Returns true\nutil.types.isProxy(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a Proxy instance.\n\nconst target = {};\nconst proxy = new Proxy(target, {});\nutil.types.isProxy(target);  // Returns false\nutil.types.isProxy(proxy);  // Returns true\nutil.types.isRegExp(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a regular expression object.\n\nutil.types.isRegExp(/abc/);  // Returns true\nutil.types.isRegExp(new RegExp('abc'));  // Returns true\nutil.types.isSet(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in Set instance.\n\nutil.types.isSet(new Set());  // Returns true\nutil.types.isSetIterator(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is an iterator returned for a built-in Set instance.\n\nconst set = new Set();\nutil.types.isSetIterator(set.keys());  // Returns true\nutil.types.isSetIterator(set.values());  // Returns true\nutil.types.isSetIterator(set.entries());  // Returns true\nutil.types.isSetIterator(set[Symbol.iterator]());  // Returns true\nutil.types.isSharedArrayBuffer(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in SharedArrayBuffer instance. This does not include ArrayBuffer instances. Usually, it is desirable to test for both; See util.types.isAnyArrayBuffer() for that.\n\nutil.types.isSharedArrayBuffer(new ArrayBuffer());  // Returns false\nutil.types.isSharedArrayBuffer(new SharedArrayBuffer());  // Returns true\nutil.types.isStringObject(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a string object, e.g. created by new String().\n\nutil.types.isStringObject('foo');  // Returns false\nutil.types.isStringObject(new String('foo'));   // Returns true\nutil.types.isSymbolObject(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a symbol object, created by calling Object() on a Symbol primitive.\n\nconst symbol = Symbol('foo');\nutil.types.isSymbolObject(symbol);  // Returns false\nutil.types.isSymbolObject(Object(symbol));   // Returns", "doc_id": "8c44c899-bd65-4691-bb38-5a69f6429b2f", "embedding": null, "doc_hash": "5d00acb923695da354d2fee4ec317df73ab365c0b764946c4cf192d0c6aa4cdd", "extra_info": null, "node_info": {"start": 2681304, "end": 2684389}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a9b29a62-ce5e-433b-9910-9117bc2d23b8", "3": "3e1f8747-4406-4786-b548-990dc8d40b94"}}, "__type__": "1"}, "3e1f8747-4406-4786-b548-990dc8d40b94": {"__data__": {"text": "in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a string object, e.g. created by new String().\n\nutil.types.isStringObject('foo');  // Returns false\nutil.types.isStringObject(new String('foo'));   // Returns true\nutil.types.isSymbolObject(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a symbol object, created by calling Object() on a Symbol primitive.\n\nconst symbol = Symbol('foo');\nutil.types.isSymbolObject(symbol);  // Returns false\nutil.types.isSymbolObject(Object(symbol));   // Returns true\nutil.types.isTypedArray(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in TypedArray instance.\n\nutil.types.isTypedArray(new ArrayBuffer());  // Returns false\nutil.types.isTypedArray(new Uint8Array());  // Returns true\nutil.types.isTypedArray(new Float64Array());  // Returns true\nSee also ArrayBuffer.isView().\n\nutil.types.isUint8Array(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in Uint8Array instance.\n\nutil.types.isUint8Array(new ArrayBuffer());  // Returns false\nutil.types.isUint8Array(new Uint8Array());  // Returns true\nutil.types.isUint8Array(new Float64Array());  // Returns false\nutil.types.isUint8ClampedArray(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in Uint8ClampedArray instance.\n\nutil.types.isUint8ClampedArray(new ArrayBuffer());  // Returns false\nutil.types.isUint8ClampedArray(new Uint8ClampedArray());  // Returns true\nutil.types.isUint8ClampedArray(new Float64Array());  // Returns false\nutil.types.isUint16Array(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in Uint16Array instance.\n\nutil.types.isUint16Array(new ArrayBuffer());  // Returns false\nutil.types.isUint16Array(new Uint16Array());  // Returns true\nutil.types.isUint16Array(new Float64Array());  // Returns false\nutil.types.isUint32Array(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in Uint32Array instance.\n\nutil.types.isUint32Array(new ArrayBuffer());  // Returns false\nutil.types.isUint32Array(new Uint32Array());  // Returns true\nutil.types.isUint32Array(new Float64Array());  // Returns false\nutil.types.isWeakMap(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in WeakMap instance.\n\nutil.types.isWeakMap(new WeakMap());  // Returns true\nutil.types.isWeakSet(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in WeakSet instance.\n\nutil.types.isWeakSet(new WeakSet());  // Returns true\nutil.types.isWebAssemblyCompiledModule(value)#\nAdded in: v10.0.0Deprecated since: v14.0.0\nStability: 0 - Deprecated: Use value instanceof WebAssembly.Module instead.\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in WebAssembly.Module instance.\n\nconst module = new WebAssembly.Module(wasmBuffer);\nutil.types.isWebAssemblyCompiledModule(module);  //", "doc_id": "3e1f8747-4406-4786-b548-990dc8d40b94", "embedding": null, "doc_hash": "d04d541af6459046ef4cc69dc45c28f6ed6c87493bc427897bf575c9d3987546", "extra_info": null, "node_info": {"start": 2684437, "end": 2687474}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8c44c899-bd65-4691-bb38-5a69f6429b2f", "3": "e244774b-d408-4c33-b47b-0eeab3569b1c"}}, "__type__": "1"}, "e244774b-d408-4c33-b47b-0eeab3569b1c": {"__data__": {"text": "WeakMap());  // Returns true\nutil.types.isWeakSet(value)#\nAdded in: v10.0.0\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in WeakSet instance.\n\nutil.types.isWeakSet(new WeakSet());  // Returns true\nutil.types.isWebAssemblyCompiledModule(value)#\nAdded in: v10.0.0Deprecated since: v14.0.0\nStability: 0 - Deprecated: Use value instanceof WebAssembly.Module instead.\nvalue <any>\nReturns: <boolean>\nReturns true if the value is a built-in WebAssembly.Module instance.\n\nconst module = new WebAssembly.Module(wasmBuffer);\nutil.types.isWebAssemblyCompiledModule(module);  // Returns true\nDeprecated APIs#\nThe following APIs are deprecated and should no longer be used. Existing applications and modules should be updated to find alternative approaches.\n\nutil._extend(target, source)#\nAdded in: v0.7.5Deprecated since: v6.0.0\nStability: 0 - Deprecated: Use Object.assign() instead.\ntarget <Object>\nsource <Object>\nThe util._extend() method was never intended to be used outside of internal Node.js modules. The community found and used it anyway.\n\nIt is deprecated and should not be used in new code. JavaScript comes with very similar built-in functionality through Object.assign().\n\nutil.isArray(object)#\nAdded in: v0.6.0Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use Array.isArray() instead.\nobject <any>\nReturns: <boolean>\nAlias for Array.isArray().\n\nReturns true if the given object is an Array. Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isArray([]);\n// Returns: true\nutil.isArray(new Array());\n// Returns: true\nutil.isArray({});\n// Returns: false\nutil.isBoolean(object)#\nAdded in: v0.11.5Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use typeof value === 'boolean' instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is a Boolean. Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isBoolean(1);\n// Returns: false\nutil.isBoolean(0);\n// Returns: false\nutil.isBoolean(false);\n// Returns: true\nutil.isBuffer(object)#\nAdded in: v0.11.5Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use Buffer.isBuffer() instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is a Buffer. Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isBuffer({ length: 0 });\n// Returns: false\nutil.isBuffer([]);\n// Returns: false\nutil.isBuffer(Buffer.from('hello world'));\n// Returns: true\nutil.isDate(object)#\nAdded in: v0.6.0Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use util.types.isDate() instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is a Date. Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isDate(new Date());\n// Returns: true\nutil.isDate(Date());\n// false (without 'new' returns a String)\nutil.isDate({});\n// Returns: false\nutil.isError(object)#\nAdded in: v0.6.0Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use util.types.isNativeError() instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is an Error. Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isError(new Error());\n// Returns: true\nutil.isError(new TypeError());\n// Returns: true\nutil.isError({", "doc_id": "e244774b-d408-4c33-b47b-0eeab3569b1c", "embedding": null, "doc_hash": "3b204c9ef656082dba0e8a135ac34824bb092868e0c5caac1bf15cabf4f78578", "extra_info": null, "node_info": {"start": 2687435, "end": 2690613}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3e1f8747-4406-4786-b548-990dc8d40b94", "3": "ecb2f577-e7cf-458c-b5fa-14d954f8baf5"}}, "__type__": "1"}, "ecb2f577-e7cf-458c-b5fa-14d954f8baf5": {"__data__": {"text": "is a Date. Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isDate(new Date());\n// Returns: true\nutil.isDate(Date());\n// false (without 'new' returns a String)\nutil.isDate({});\n// Returns: false\nutil.isError(object)#\nAdded in: v0.6.0Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use util.types.isNativeError() instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is an Error. Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isError(new Error());\n// Returns: true\nutil.isError(new TypeError());\n// Returns: true\nutil.isError({ name: 'Error', message: 'an error occurred' });\n// Returns: false\nThis method relies on Object.prototype.toString() behavior. It is possible to obtain an incorrect result when the object argument manipulates @@toStringTag.\n\nconst util = require('node:util');\nconst obj = { name: 'Error', message: 'an error occurred' };\n\nutil.isError(obj);\n// Returns: false\nobj[Symbol.toStringTag] = 'Error';\nutil.isError(obj);\n// Returns: true\nutil.isFunction(object)#\nAdded in: v0.11.5Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use typeof value === 'function' instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is a Function. Otherwise, returns false.\n\nconst util = require('node:util');\n\nfunction Foo() {}\nconst Bar = () => {};\n\nutil.isFunction({});\n// Returns: false\nutil.isFunction(Foo);\n// Returns: true\nutil.isFunction(Bar);\n// Returns: true\nutil.isNull(object)#\nAdded in: v0.11.5Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use value === null instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is strictly null. Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isNull(0);\n// Returns: false\nutil.isNull(undefined);\n// Returns: false\nutil.isNull(null);\n// Returns: true\nutil.isNullOrUndefined(object)#\nAdded in: v0.11.5Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use value === undefined || value === null instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is null or undefined. Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isNullOrUndefined(0);\n// Returns: false\nutil.isNullOrUndefined(undefined);\n// Returns: true\nutil.isNullOrUndefined(null);\n// Returns: true\nutil.isNumber(object)#\nAdded in: v0.11.5Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use typeof value === 'number' instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is a Number. Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isNumber(false);\n// Returns: false\nutil.isNumber(Infinity);\n// Returns: true\nutil.isNumber(0);\n// Returns: true\nutil.isNumber(NaN);\n// Returns: true\nutil.isObject(object)#\nAdded in: v0.11.5Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use value !== null && typeof value === 'object' instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is strictly an Object and not a Function (even though functions are objects in JavaScript). Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isObject(5);\n// Returns: false\nutil.isObject(null);\n// Returns:", "doc_id": "ecb2f577-e7cf-458c-b5fa-14d954f8baf5", "embedding": null, "doc_hash": "8de031d3aa770bcb4877ed9fe704d60cb2f13a17947178b5806dcd60f183d91b", "extra_info": null, "node_info": {"start": 2690612, "end": 2693754}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e244774b-d408-4c33-b47b-0eeab3569b1c", "3": "d00ea9e9-590b-4896-8b23-15f3d30f8b74"}}, "__type__": "1"}, "d00ea9e9-590b-4896-8b23-15f3d30f8b74": {"__data__": {"text": "Returns: false\nutil.isNumber(Infinity);\n// Returns: true\nutil.isNumber(0);\n// Returns: true\nutil.isNumber(NaN);\n// Returns: true\nutil.isObject(object)#\nAdded in: v0.11.5Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use value !== null && typeof value === 'object' instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is strictly an Object and not a Function (even though functions are objects in JavaScript). Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isObject(5);\n// Returns: false\nutil.isObject(null);\n// Returns: false\nutil.isObject({});\n// Returns: true\nutil.isObject(() => {});\n// Returns: false\nutil.isPrimitive(object)#\nAdded in: v0.11.5Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use (typeof value !== 'object' && typeof value !== 'function') || value === null instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is a primitive type. Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isPrimitive(5);\n// Returns: true\nutil.isPrimitive('foo');\n// Returns: true\nutil.isPrimitive(false);\n// Returns: true\nutil.isPrimitive(null);\n// Returns: true\nutil.isPrimitive(undefined);\n// Returns: true\nutil.isPrimitive({});\n// Returns: false\nutil.isPrimitive(() => {});\n// Returns: false\nutil.isPrimitive(/^$/);\n// Returns: false\nutil.isPrimitive(new Date());\n// Returns: false\nutil.isRegExp(object)#\nAdded in: v0.6.0Deprecated since: v4.0.0\nStability: 0 - Deprecated\nobject <any>\nReturns: <boolean>\nReturns true if the given object is a RegExp. Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isRegExp(/some regexp/);\n// Returns: true\nutil.isRegExp(new RegExp('another regexp'));\n// Returns: true\nutil.isRegExp({});\n// Returns: false\nutil.isString(object)#\nAdded in: v0.11.5Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use typeof value === 'string' instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is a string. Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isString('');\n// Returns: true\nutil.isString('foo');\n// Returns: true\nutil.isString(String('foo'));\n// Returns: true\nutil.isString(5);\n// Returns: false\nutil.isSymbol(object)#\nAdded in: v0.11.5Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use typeof value === 'symbol' instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is a Symbol. Otherwise, returns false.\n\nconst util = require('node:util');\n\nutil.isSymbol(5);\n// Returns: false\nutil.isSymbol('foo');\n// Returns: false\nutil.isSymbol(Symbol('foo'));\n// Returns: true\nutil.isUndefined(object)#\nAdded in: v0.11.5Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use value === undefined instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is undefined. Otherwise, returns false.\n\nconst util = require('node:util');\n\nconst foo = undefined;\nutil.isUndefined(5);\n// Returns: false\nutil.isUndefined(foo);\n// Returns: true\nutil.isUndefined(null);\n// Returns: false\nutil.log(string)#\nAdded in:", "doc_id": "d00ea9e9-590b-4896-8b23-15f3d30f8b74", "embedding": null, "doc_hash": "e60539d7915773dff6111acda939d79f5378594df09832e8a3e66a388f153446", "extra_info": null, "node_info": {"start": 2693784, "end": 2696798}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ecb2f577-e7cf-458c-b5fa-14d954f8baf5", "3": "20513dc9-e293-4231-92c5-1e53d5b0b328"}}, "__type__": "1"}, "20513dc9-e293-4231-92c5-1e53d5b0b328": {"__data__": {"text": "Returns: false\nutil.isSymbol('foo');\n// Returns: false\nutil.isSymbol(Symbol('foo'));\n// Returns: true\nutil.isUndefined(object)#\nAdded in: v0.11.5Deprecated since: v4.0.0\nStability: 0 - Deprecated: Use value === undefined instead.\nobject <any>\nReturns: <boolean>\nReturns true if the given object is undefined. Otherwise, returns false.\n\nconst util = require('node:util');\n\nconst foo = undefined;\nutil.isUndefined(5);\n// Returns: false\nutil.isUndefined(foo);\n// Returns: true\nutil.isUndefined(null);\n// Returns: false\nutil.log(string)#\nAdded in: v0.3.0Deprecated since: v6.0.0\nStability: 0 - Deprecated: Use a third party module instead.\nstring <string>\nThe util.log() method prints the given string to stdout with an included timestamp.\n\nconst util = require('node:util');\n\nutil.log('Timestamped message.');\nV8#\nSource Code: lib/v8.js\n\nThe node:v8 module exposes APIs that are specific to the version of V8 built into the Node.js binary. It can be accessed using:\n\nconst v8 = require('node:v8');\nv8.cachedDataVersionTag()#\nAdded in: v8.0.0\nReturns: <integer>\nReturns an integer representing a version tag derived from the V8 version, command-line flags, and detected CPU features. This is useful for determining whether a vm.Script cachedData buffer is compatible with this instance of V8.\n\nconsole.log(v8.cachedDataVersionTag()); // 3947234607\n// The value returned by v8.cachedDataVersionTag() is derived from the V8\n// version, command-line flags, and detected CPU features. Test that the value\n// does indeed update when flags are toggled.\nv8.setFlagsFromString('--allow_natives_syntax');\nconsole.log(v8.cachedDataVersionTag()); // 183726201\nv8.getHeapCodeStatistics()#\nAdded in: v12.8.0\nReturns: <Object>\nGet statistics about code and its metadata in the heap, see V8 GetHeapCodeAndMetadataStatistics API. Returns an object with the following properties:\n\ncode_and_metadata_size <number>\nbytecode_and_metadata_size <number>\nexternal_script_source_size <number>\ncpu_profiler_metadata_size <number>\n{\n  code_and_metadata_size: 212208,\n  bytecode_and_metadata_size: 161368,\n  external_script_source_size: 1410794,\n  cpu_profiler_metadata_size: 0,\n}\nv8.getHeapSnapshot()#\nAdded in: v11.13.0\nReturns: <stream.Readable> A Readable Stream containing the V8 heap snapshot\nGenerates a snapshot of the current V8 heap and returns a Readable Stream that may be used to read the JSON serialized representation. This JSON stream format is intended to be used with tools such as Chrome DevTools. The JSON schema is undocumented and specific to the V8 engine. Therefore, the schema may change from one version of V8 to the next.\n\nCreating a heap snapshot requires memory about twice the size of the heap at the time the snapshot is created. This results in the risk of OOM killers terminating the process.\n\nGenerating a snapshot is a synchronous operation which blocks the event loop for a duration depending on the heap size.\n\n// Print heap snapshot to the console\nconst v8 = require('node:v8');\nconst stream = v8.getHeapSnapshot();\nstream.pipe(process.stdout);\nv8.getHeapSpaceStatistics()#\nHistory\nReturns: <Object[]>\nReturns statistics about the V8 heap spaces, i.e. the segments which make up the V8 heap. Neither the ordering of heap spaces, nor the availability of a heap space can be guaranteed as the statistics are provided via the V8 GetHeapSpaceStatistics function and may", "doc_id": "20513dc9-e293-4231-92c5-1e53d5b0b328", "embedding": null, "doc_hash": "aa2d04e7d459fab52e88b7458b7f61e257855e55c7cabf077b6d6250f1e7f157", "extra_info": null, "node_info": {"start": 2696809, "end": 2700181}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d00ea9e9-590b-4896-8b23-15f3d30f8b74", "3": "39d8060d-1add-43d1-ade2-ca7c6e6cd3dd"}}, "__type__": "1"}, "39d8060d-1add-43d1-ade2-ca7c6e6cd3dd": {"__data__": {"text": "twice the size of the heap at the time the snapshot is created. This results in the risk of OOM killers terminating the process.\n\nGenerating a snapshot is a synchronous operation which blocks the event loop for a duration depending on the heap size.\n\n// Print heap snapshot to the console\nconst v8 = require('node:v8');\nconst stream = v8.getHeapSnapshot();\nstream.pipe(process.stdout);\nv8.getHeapSpaceStatistics()#\nHistory\nReturns: <Object[]>\nReturns statistics about the V8 heap spaces, i.e. the segments which make up the V8 heap. Neither the ordering of heap spaces, nor the availability of a heap space can be guaranteed as the statistics are provided via the V8 GetHeapSpaceStatistics function and may change from one V8 version to the next.\n\nThe value returned is an array of objects containing the following properties:\n\nspace_name <string>\nspace_size <number>\nspace_used_size <number>\nspace_available_size <number>\nphysical_space_size <number>\n[\n  {\n    \"space_name\": \"new_space\",\n    \"space_size\": 2063872,\n    \"space_used_size\": 951112,\n    \"space_available_size\": 80824,\n    \"physical_space_size\": 2063872\n  },\n  {\n    \"space_name\": \"old_space\",\n    \"space_size\": 3090560,\n    \"space_used_size\": 2493792,\n    \"space_available_size\": 0,\n    \"physical_space_size\": 3090560\n  },\n  {\n    \"space_name\": \"code_space\",\n    \"space_size\": 1260160,\n    \"space_used_size\": 644256,\n    \"space_available_size\": 960,\n    \"physical_space_size\": 1260160\n  },\n  {\n    \"space_name\": \"map_space\",\n    \"space_size\": 1094160,\n    \"space_used_size\": 201608,\n    \"space_available_size\": 0,\n    \"physical_space_size\": 1094160\n  },\n  {\n    \"space_name\": \"large_object_space\",\n    \"space_size\": 0,\n    \"space_used_size\": 0,\n    \"space_available_size\": 1490980608,\n    \"physical_space_size\": 0\n  }\n]\nv8.getHeapStatistics()#\nHistory\nReturns: <Object>\nReturns an object with the following properties:\n\ntotal_heap_size <number>\ntotal_heap_size_executable <number>\ntotal_physical_size <number>\ntotal_available_size <number>\nused_heap_size <number>\nheap_size_limit <number>\nmalloced_memory <number>\npeak_malloced_memory <number>\ndoes_zap_garbage <number>\nnumber_of_native_contexts <number>\nnumber_of_detached_contexts <number>\ntotal_global_handles_size <number>\nused_global_handles_size <number>\nexternal_memory <number>\ndoes_zap_garbage is a 0/1 boolean, which signifies whether the --zap_code_space option is enabled or not. This makes V8 overwrite heap garbage with a bit pattern. The RSS footprint (resident set size) gets bigger because it continuously touches all heap pages and that makes them less likely to get swapped out by the operating system.\n\nnumber_of_native_contexts The value of native_context is the number of the top-level contexts currently active. Increase of this number over time indicates a memory leak.\n\nnumber_of_detached_contexts The value of detached_context is the number of contexts that were detached and not yet garbage collected. This number being non-zero indicates a potential memory leak.\n\ntotal_global_handles_size The value of", "doc_id": "39d8060d-1add-43d1-ade2-ca7c6e6cd3dd", "embedding": null, "doc_hash": "ec1499902830ba28455717a321a376ee4b7882f0376003722ef7c20b30974147", "extra_info": null, "node_info": {"start": 2700075, "end": 2703119}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "20513dc9-e293-4231-92c5-1e53d5b0b328", "3": "72d4ed02-fa09-4cf6-b100-511fb1f9d032"}}, "__type__": "1"}, "72d4ed02-fa09-4cf6-b100-511fb1f9d032": {"__data__": {"text": "is a 0/1 boolean, which signifies whether the --zap_code_space option is enabled or not. This makes V8 overwrite heap garbage with a bit pattern. The RSS footprint (resident set size) gets bigger because it continuously touches all heap pages and that makes them less likely to get swapped out by the operating system.\n\nnumber_of_native_contexts The value of native_context is the number of the top-level contexts currently active. Increase of this number over time indicates a memory leak.\n\nnumber_of_detached_contexts The value of detached_context is the number of contexts that were detached and not yet garbage collected. This number being non-zero indicates a potential memory leak.\n\ntotal_global_handles_size The value of total_global_handles_size is the total memory size of V8 global handles.\n\nused_global_handles_size The value of used_global_handles_size is the used memory size of V8 global handles.\n\nexternal_memory The value of external_memory is the memory size of array buffers and external strings.\n\n{\n  total_heap_size: 7326976,\n  total_heap_size_executable: 4194304,\n  total_physical_size: 7326976,\n  total_available_size: 1152656,\n  used_heap_size: 3476208,\n  heap_size_limit: 1535115264,\n  malloced_memory: 16384,\n  peak_malloced_memory: 1127496,\n  does_zap_garbage: 0,\n  number_of_native_contexts: 1,\n  number_of_detached_contexts: 0,\n  total_global_handles_size: 8192,\n  used_global_handles_size: 3296,\n  external_memory: 318824\n}\nv8.setFlagsFromString(flags)#\nAdded in: v1.0.0\nflags <string>\nThe v8.setFlagsFromString() method can be used to programmatically set V8 command-line flags. This method should be used with care. Changing settings after the VM has started may result in unpredictable behavior, including crashes and data loss; or it may simply do nothing.\n\nThe V8 options available for a version of Node.js may be determined by running node --v8-options.\n\nUsage:\n\n// Print GC events to stdout for one minute.\nconst v8 = require('node:v8');\nv8.setFlagsFromString('--trace_gc');\nsetTimeout(() => { v8.setFlagsFromString('--notrace_gc'); }, 60e3);\nv8.stopCoverage()#\nAdded in: v15.1.0, v14.18.0, v12.22.0\nThe v8.stopCoverage() method allows the user to stop the coverage collection started by NODE_V8_COVERAGE, so that V8 can release the execution count records and optimize code. This can be used in conjunction with v8.takeCoverage() if the user wants to collect the coverage on demand.\n\nv8.takeCoverage()#\nAdded in: v15.1.0, v14.18.0, v12.22.0\nThe v8.takeCoverage() method allows the user to write the coverage started by NODE_V8_COVERAGE to disk on demand. This method can be invoked multiple times during the lifetime of the process. Each time the execution counter will be reset and a new coverage report will be written to the directory specified by NODE_V8_COVERAGE.\n\nWhen the process is about to exit, one last coverage will still be written to disk unless v8.stopCoverage() is invoked before the process exits.\n\nv8.writeHeapSnapshot([filename])#\nHistory\nfilename <string> The file path where the V8 heap snapshot is to be saved. If not specified, a file name with the pattern 'Heap-${yyyymmdd}-${hhmmss}-${pid}-${thread_id}.heapsnapshot' will be generated, where {pid} will be the PID of the Node.js process, {thread_id} will be 0 when writeHeapSnapshot() is called", "doc_id": "72d4ed02-fa09-4cf6-b100-511fb1f9d032", "embedding": null, "doc_hash": "358247a914c015237c2e3073d4be1b306f0ba19b5acab225013a42183f52cdf0", "extra_info": null, "node_info": {"start": 2703105, "end": 2706411}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "39d8060d-1add-43d1-ade2-ca7c6e6cd3dd", "3": "e12c1bc6-c3ea-4b10-9e3e-6088c7b391fc"}}, "__type__": "1"}, "e12c1bc6-c3ea-4b10-9e3e-6088c7b391fc": {"__data__": {"text": "the lifetime of the process. Each time the execution counter will be reset and a new coverage report will be written to the directory specified by NODE_V8_COVERAGE.\n\nWhen the process is about to exit, one last coverage will still be written to disk unless v8.stopCoverage() is invoked before the process exits.\n\nv8.writeHeapSnapshot([filename])#\nHistory\nfilename <string> The file path where the V8 heap snapshot is to be saved. If not specified, a file name with the pattern 'Heap-${yyyymmdd}-${hhmmss}-${pid}-${thread_id}.heapsnapshot' will be generated, where {pid} will be the PID of the Node.js process, {thread_id} will be 0 when writeHeapSnapshot() is called from the main Node.js thread or the id of a worker thread.\nReturns: <string> The filename where the snapshot was saved.\nGenerates a snapshot of the current V8 heap and writes it to a JSON file. This file is intended to be used with tools such as Chrome DevTools. The JSON schema is undocumented and specific to the V8 engine, and may change from one version of V8 to the next.\n\nA heap snapshot is specific to a single V8 isolate. When using worker threads, a heap snapshot generated from the main thread will not contain any information about the workers, and vice versa.\n\nCreating a heap snapshot requires memory about twice the size of the heap at the time the snapshot is created. This results in the risk of OOM killers terminating the process.\n\nGenerating a snapshot is a synchronous operation which blocks the event loop for a duration depending on the heap size.\n\nconst { writeHeapSnapshot } = require('node:v8');\nconst {\n  Worker,\n  isMainThread,\n  parentPort,\n} = require('node:worker_threads');\n\nif (isMainThread) {\n  const worker = new Worker(__filename);\n\n  worker.once('message', (filename) => {\n    console.log(`worker heapdump: ${filename}`);\n    // Now get a heapdump for the main thread.\n    console.log(`main thread heapdump: ${writeHeapSnapshot()}`);\n  });\n\n  // Tell the worker to create a heapdump.\n  worker.postMessage('heapdump');\n} else {\n  parentPort.once('message', (message) => {\n    if (message === 'heapdump') {\n      // Generate a heapdump for the worker\n      // and return the filename to the parent.\n      parentPort.postMessage(writeHeapSnapshot());\n    }\n  });\n}\nv8.setHeapSnapshotNearHeapLimit(limit)#\nAdded in: v18.10.0\nStability: 1 - Experimental\nlimit <integer>\nThe API is a no-op if --heapsnapshot-near-heap-limit is already set from the command line or the API is called more than once. limit must be a positive integer. See --heapsnapshot-near-heap-limit for more information.\n\nSerialization API#\nThe serialization API provides means of serializing JavaScript values in a way that is compatible with the HTML structured clone algorithm.\n\nThe format is backward-compatible (i.e. safe to store to disk). Equal JavaScript values may result in different serialized output.\n\nv8.serialize(value)#\nAdded in: v8.0.0\nvalue <any>\nReturns: <Buffer>\nUses a DefaultSerializer to serialize value into a buffer.\n\nERR_BUFFER_TOO_LARGE will be thrown when trying to serialize a huge object which requires buffer larger than buffer.constants.MAX_LENGTH.\n\nv8.deserialize(buffer)#\nAdded in: v8.0.0\nbuffer <Buffer> | <TypedArray> | <DataView> A buffer returned by serialize().\nUses a DefaultDeserializer with default options to read a JS value from a buffer.\n\nClass: v8.Serializer#\nAdded in:", "doc_id": "e12c1bc6-c3ea-4b10-9e3e-6088c7b391fc", "embedding": null, "doc_hash": "4b490fc7cb4ddac9f2bc3cdaff186a8643fcd0fb729e33338e887396afbf18c8", "extra_info": null, "node_info": {"start": 2706463, "end": 2709841}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "72d4ed02-fa09-4cf6-b100-511fb1f9d032", "3": "fd43d51a-3075-4bca-bc5e-9520a2fb86eb"}}, "__type__": "1"}, "fd43d51a-3075-4bca-bc5e-9520a2fb86eb": {"__data__": {"text": "(i.e. safe to store to disk). Equal JavaScript values may result in different serialized output.\n\nv8.serialize(value)#\nAdded in: v8.0.0\nvalue <any>\nReturns: <Buffer>\nUses a DefaultSerializer to serialize value into a buffer.\n\nERR_BUFFER_TOO_LARGE will be thrown when trying to serialize a huge object which requires buffer larger than buffer.constants.MAX_LENGTH.\n\nv8.deserialize(buffer)#\nAdded in: v8.0.0\nbuffer <Buffer> | <TypedArray> | <DataView> A buffer returned by serialize().\nUses a DefaultDeserializer with default options to read a JS value from a buffer.\n\nClass: v8.Serializer#\nAdded in: v8.0.0\nnew Serializer()#\nCreates a new Serializer object.\n\nserializer.writeHeader()#\nWrites out a header, which includes the serialization format version.\n\nserializer.writeValue(value)#\nvalue <any>\nSerializes a JavaScript value and adds the serialized representation to the internal buffer.\n\nThis throws an error if value cannot be serialized.\n\nserializer.releaseBuffer()#\nReturns: <Buffer>\nReturns the stored internal buffer. This serializer should not be used once the buffer is released. Calling this method results in undefined behavior if a previous write has failed.\n\nserializer.transferArrayBuffer(id, arrayBuffer)#\nid <integer> A 32-bit unsigned integer.\narrayBuffer <ArrayBuffer> An ArrayBuffer instance.\nMarks an ArrayBuffer as having its contents transferred out of band. Pass the corresponding ArrayBuffer in the deserializing context to deserializer.transferArrayBuffer().\n\nserializer.writeUint32(value)#\nvalue <integer>\nWrite a raw 32-bit unsigned integer. For use inside of a custom serializer._writeHostObject().\n\nserializer.writeUint64(hi, lo)#\nhi <integer>\nlo <integer>\nWrite a raw 64-bit unsigned integer, split into high and low 32-bit parts. For use inside of a custom serializer._writeHostObject().\n\nserializer.writeDouble(value)#\nvalue <number>\nWrite a JS number value. For use inside of a custom serializer._writeHostObject().\n\nserializer.writeRawBytes(buffer)#\nbuffer <Buffer> | <TypedArray> | <DataView>\nWrite raw bytes into the serializer's internal buffer. The deserializer will require a way to compute the length of the buffer. For use inside of a custom serializer._writeHostObject().\n\nserializer._writeHostObject(object)#\nobject <Object>\nThis method is called to write some kind of host object, i.e. an object created by native C++ bindings. If it is not possible to serialize object, a suitable exception should be thrown.\n\nThis method is not present on the Serializer class itself but can be provided by subclasses.\n\nserializer._getDataCloneError(message)#\nmessage <string>\nThis method is called to generate error objects that will be thrown when an object can not be cloned.\n\nThis method defaults to the Error constructor and can be overridden on subclasses.\n\nserializer._getSharedArrayBufferId(sharedArrayBuffer)#\nsharedArrayBuffer <SharedArrayBuffer>\nThis method is called when the serializer is going to serialize a SharedArrayBuffer object. It must return an unsigned 32-bit integer ID for the object, using the same ID if this SharedArrayBuffer has already been serialized. When deserializing, this ID will be passed to deserializer.transferArrayBuffer().\n\nIf the object cannot be serialized, an exception should be thrown.\n\nThis method is not present on the Serializer class itself but can be provided by subclasses.\n\nserializer._setTreatArrayBufferViewsAsHostObjects(flag)#\nflag <boolean> Default: false\nIndicate whether to treat TypedArray and DataView objects as host objects, i.e. pass them to serializer._writeHostObject().\n\nClass: v8.Deserializer#\nAdded in: v8.0.0\nnew Deserializer(buffer)#\nbuffer <Buffer> | <TypedArray> |", "doc_id": "fd43d51a-3075-4bca-bc5e-9520a2fb86eb", "embedding": null, "doc_hash": "60a73f950268fa6fbe21611df9b260b24fb69b47e55ec9bc82fdb5127d84974b", "extra_info": null, "node_info": {"start": 2709885, "end": 2713554}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e12c1bc6-c3ea-4b10-9e3e-6088c7b391fc", "3": "f801cc62-51b3-442b-9d82-65d987a9fddc"}}, "__type__": "1"}, "f801cc62-51b3-442b-9d82-65d987a9fddc": {"__data__": {"text": "must return an unsigned 32-bit integer ID for the object, using the same ID if this SharedArrayBuffer has already been serialized. When deserializing, this ID will be passed to deserializer.transferArrayBuffer().\n\nIf the object cannot be serialized, an exception should be thrown.\n\nThis method is not present on the Serializer class itself but can be provided by subclasses.\n\nserializer._setTreatArrayBufferViewsAsHostObjects(flag)#\nflag <boolean> Default: false\nIndicate whether to treat TypedArray and DataView objects as host objects, i.e. pass them to serializer._writeHostObject().\n\nClass: v8.Deserializer#\nAdded in: v8.0.0\nnew Deserializer(buffer)#\nbuffer <Buffer> | <TypedArray> | <DataView> A buffer returned by serializer.releaseBuffer().\nCreates a new Deserializer object.\n\ndeserializer.readHeader()#\nReads and validates a header (including the format version). May, for example, reject an invalid or unsupported wire format. In that case, an Error is thrown.\n\ndeserializer.readValue()#\nDeserializes a JavaScript value from the buffer and returns it.\n\ndeserializer.transferArrayBuffer(id, arrayBuffer)#\nid <integer> A 32-bit unsigned integer.\narrayBuffer <ArrayBuffer> | <SharedArrayBuffer> An ArrayBuffer instance.\nMarks an ArrayBuffer as having its contents transferred out of band. Pass the corresponding ArrayBuffer in the serializing context to serializer.transferArrayBuffer() (or return the id from serializer._getSharedArrayBufferId() in the case of SharedArrayBuffers).\n\ndeserializer.getWireFormatVersion()#\nReturns: <integer>\nReads the underlying wire format version. Likely mostly to be useful to legacy code reading old wire format versions. May not be called before .readHeader().\n\ndeserializer.readUint32()#\nReturns: <integer>\nRead a raw 32-bit unsigned integer and return it. For use inside of a custom deserializer._readHostObject().\n\ndeserializer.readUint64()#\nReturns: <integer[]>\nRead a raw 64-bit unsigned integer and return it as an array [hi, lo] with two 32-bit unsigned integer entries. For use inside of a custom deserializer._readHostObject().\n\ndeserializer.readDouble()#\nReturns: <number>\nRead a JS number value. For use inside of a custom deserializer._readHostObject().\n\ndeserializer.readRawBytes(length)#\nlength <integer>\nReturns: <Buffer>\nRead raw bytes from the deserializer's internal buffer. The length parameter must correspond to the length of the buffer that was passed to serializer.writeRawBytes(). For use inside of a custom deserializer._readHostObject().\n\ndeserializer._readHostObject()#\nThis method is called to read some kind of host object, i.e. an object that is created by native C++ bindings. If it is not possible to deserialize the data, a suitable exception should be thrown.\n\nThis method is not present on the Deserializer class itself but can be provided by subclasses.\n\nClass: v8.DefaultSerializer#\nAdded in: v8.0.0\nA subclass of Serializer that serializes TypedArray (in particular Buffer) and DataView objects as host objects, and only stores the part of their underlying ArrayBuffers that they are referring to.\n\nClass: v8.DefaultDeserializer#\nAdded in: v8.0.0\nA subclass of Deserializer corresponding to the format written by DefaultSerializer.\n\nPromise hooks#\nThe promiseHooks interface can be used to track promise lifecycle events. To track all async activity, see async_hooks which internally uses this module to produce promise lifecycle events in addition to events for other async resources. For request context management, see AsyncLocalStorage.\n\nimport { promiseHooks } from 'node:v8';\n\n// There are four lifecycle events produced by promises:\n\n// The `init` event represents the creation of a promise. This could be a\n// direct creation such as with `new Promise(...)` or a continuation", "doc_id": "f801cc62-51b3-442b-9d82-65d987a9fddc", "embedding": null, "doc_hash": "5b8faf9e026c61b95af21328cb0fd705c6276ad60cf0b9b50f18387cc7480708", "extra_info": null, "node_info": {"start": 2713477, "end": 2717241}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fd43d51a-3075-4bca-bc5e-9520a2fb86eb", "3": "0eb3bb76-fac8-412e-b066-04fa384d36be"}}, "__type__": "1"}, "0eb3bb76-fac8-412e-b066-04fa384d36be": {"__data__": {"text": "that they are referring to.\n\nClass: v8.DefaultDeserializer#\nAdded in: v8.0.0\nA subclass of Deserializer corresponding to the format written by DefaultSerializer.\n\nPromise hooks#\nThe promiseHooks interface can be used to track promise lifecycle events. To track all async activity, see async_hooks which internally uses this module to produce promise lifecycle events in addition to events for other async resources. For request context management, see AsyncLocalStorage.\n\nimport { promiseHooks } from 'node:v8';\n\n// There are four lifecycle events produced by promises:\n\n// The `init` event represents the creation of a promise. This could be a\n// direct creation such as with `new Promise(...)` or a continuation such\n// as `then()` or `catch()`. It also happens whenever an async function is\n// called or does an `await`. If a continuation promise is created, the\n// `parent` will be the promise it is a continuation from.\nfunction init(promise, parent) {\n  console.log('a promise was created', { promise, parent });\n}\n\n// The `settled` event happens when a promise receives a resolution or\n// rejection value. This may happen synchronously such as when using\n// `Promise.resolve()` on non-promise input.\nfunction settled(promise) {\n  console.log('a promise resolved or rejected', { promise });\n}\n\n// The `before` event runs immediately before a `then()` or `catch()` handler\n// runs or an `await` resumes execution.\nfunction before(promise) {\n  console.log('a promise is about to call a then handler', { promise });\n}\n\n// The `after` event runs immediately after a `then()` handler runs or when\n// an `await` begins after resuming from another.\nfunction after(promise) {\n  console.log('a promise is done calling a then handler', { promise });\n}\n\n// Lifecycle hooks may be started and stopped individually\nconst stopWatchingInits = promiseHooks.onInit(init);\nconst stopWatchingSettleds = promiseHooks.onSettled(settled);\nconst stopWatchingBefores = promiseHooks.onBefore(before);\nconst stopWatchingAfters = promiseHooks.onAfter(after);\n\n// Or they may be started and stopped in groups\nconst stopHookSet = promiseHooks.createHook({\n  init,\n  settled,\n  before,\n  after,\n});\n\n// To stop a hook, call the function returned at its creation.\nstopWatchingInits();\nstopWatchingSettleds();\nstopWatchingBefores();\nstopWatchingAfters();\nstopHookSet();\npromiseHooks.onInit(init)#\nAdded in: v17.1.0, v16.14.0\ninit <Function> The init callback to call when a promise is created.\nReturns: <Function> Call to stop the hook.\nThe init hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\n\nimport { promiseHooks } from 'node:v8';\n\nconst stop = promiseHooks.onInit((promise, parent) => {});\npromiseHooks.onSettled(settled)#\nAdded in: v17.1.0, v16.14.0\nsettled <Function> The settled callback to call when a promise is resolved or rejected.\nReturns: <Function> Call to stop the hook.\nThe settled hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\nimport { promiseHooks } from 'node:v8';\n\nconst stop = promiseHooks.onSettled((promise) => {});\npromiseHooks.onBefore(before)#\nAdded in: v17.1.0, v16.14.0\nbefore <Function> The before callback to call before a promise continuation executes.\nReturns: <Function> Call to stop the", "doc_id": "0eb3bb76-fac8-412e-b066-04fa384d36be", "embedding": null, "doc_hash": "29a16324f6e1d988b46d5b0f3cdaef8406e8bcb56a3385762f2d0338b41b24d3", "extra_info": null, "node_info": {"start": 2717231, "end": 2720568}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f801cc62-51b3-442b-9d82-65d987a9fddc", "3": "0835b830-98a6-4a68-abea-44de7e49abda"}}, "__type__": "1"}, "0835b830-98a6-4a68-abea-44de7e49abda": {"__data__": {"text": "{});\npromiseHooks.onSettled(settled)#\nAdded in: v17.1.0, v16.14.0\nsettled <Function> The settled callback to call when a promise is resolved or rejected.\nReturns: <Function> Call to stop the hook.\nThe settled hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\nimport { promiseHooks } from 'node:v8';\n\nconst stop = promiseHooks.onSettled((promise) => {});\npromiseHooks.onBefore(before)#\nAdded in: v17.1.0, v16.14.0\nbefore <Function> The before callback to call before a promise continuation executes.\nReturns: <Function> Call to stop the hook.\nThe before hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\n\nimport { promiseHooks } from 'node:v8';\n\nconst stop = promiseHooks.onBefore((promise) => {});\npromiseHooks.onAfter(after)#\nAdded in: v17.1.0, v16.14.0\nafter <Function> The after callback to call after a promise continuation executes.\nReturns: <Function> Call to stop the hook.\nThe after hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\n\nimport { promiseHooks } from 'node:v8';\n\nconst stop = promiseHooks.onAfter((promise) => {});\npromiseHooks.createHook(callbacks)#\nAdded in: v17.1.0, v16.14.0\ncallbacks <Object> The Hook Callbacks to register\ninit <Function> The init callback.\nbefore <Function> The before callback.\nafter <Function> The after callback.\nsettled <Function> The settled callback.\nReturns: <Function> Used for disabling hooks\nThe hook callbacks must be plain functions. Providing async functions will throw as it would produce an infinite microtask loop.\n\nRegisters functions to be called for different lifetime events of each promise.\n\nThe callbacks init()/before()/after()/settled() are called for the respective events during a promise's lifetime.\n\nAll callbacks are optional. For example, if only promise creation needs to be tracked, then only the init callback needs to be passed. The specifics of all functions that can be passed to callbacks is in the Hook Callbacks section.\n\nimport { promiseHooks } from 'node:v8';\n\nconst stopAll = promiseHooks.createHook({\n  init(promise, parent) {},\n});\nHook callbacks#\nKey events in the lifetime of a promise have been categorized into four areas: creation of a promise, before/after a continuation handler is called or around an await, and when the promise resolves or rejects.\n\nWhile these hooks are similar to those of async_hooks they lack a destroy hook. Other types of async resources typically represent sockets or file descriptors which have a distinct \"closed\" state to express the destroy lifecycle event while promises remain usable for as long as code can still reach them. Garbage collection tracking is used to make promises fit into the async_hooks event model, however this tracking is very expensive and they may not necessarily ever even be garbage collected.\n\nBecause promises are asynchronous resources whose lifecycle is tracked via the promise hooks mechanism, the init(), before(), after(), and settled() callbacks must not be async functions as they create more promises which would produce an infinite loop.\n\nWhile this API is used to feed promise events into async_hooks, the ordering between the two is undefined. Both APIs are multi-tenant and therefore could produce events in any order relative to each other.\n\ninit(promise, parent)#\npromise <Promise> The promise being created.\nparent <Promise> The promise continued from, if applicable.\nCalled when a promise is constructed. This does not mean that corresponding before/after events will occur, only that the possibility", "doc_id": "0835b830-98a6-4a68-abea-44de7e49abda", "embedding": null, "doc_hash": "6d71c342e8c7d10d29c28af50d9b147a6cf167300dce11b16469e1ba7644c0fc", "extra_info": null, "node_info": {"start": 2720656, "end": 2724329}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0eb3bb76-fac8-412e-b066-04fa384d36be", "3": "aa928c03-f2a9-40d2-906c-a3e40039062c"}}, "__type__": "1"}, "aa928c03-f2a9-40d2-906c-a3e40039062c": {"__data__": {"text": "necessarily ever even be garbage collected.\n\nBecause promises are asynchronous resources whose lifecycle is tracked via the promise hooks mechanism, the init(), before(), after(), and settled() callbacks must not be async functions as they create more promises which would produce an infinite loop.\n\nWhile this API is used to feed promise events into async_hooks, the ordering between the two is undefined. Both APIs are multi-tenant and therefore could produce events in any order relative to each other.\n\ninit(promise, parent)#\npromise <Promise> The promise being created.\nparent <Promise> The promise continued from, if applicable.\nCalled when a promise is constructed. This does not mean that corresponding before/after events will occur, only that the possibility exists. This will happen if a promise is created without ever getting a continuation.\n\nbefore(promise)#\npromise <Promise>\nCalled before a promise continuation executes. This can be in the form of then(), catch(), or finally() handlers or an await resuming.\n\nThe before callback will be called 0 to N times. The before callback will typically be called 0 times if no continuation was ever made for the promise. The before callback may be called many times in the case where many continuations have been made from the same promise.\n\nafter(promise)#\npromise <Promise>\nCalled immediately after a promise continuation executes. This may be after a then(), catch(), or finally() handler or before an await after another await.\n\nsettled(promise)#\npromise <Promise>\nCalled when the promise receives a resolution or rejection value. This may occur synchronously in the case of Promise.resolve() or Promise.reject().\n\nStartup Snapshot API#\nAdded in: v18.6.0\nStability: 1 - Experimental\nThe v8.startupSnapshot interface can be used to add serialization and deserialization hooks for custom startup snapshots. Currently the startup snapshots can only be built into the Node.js binary from source.\n\n$ cd /path/to/node\n$ ./configure --node-snapshot-main=entry.js\n$ make node\n# This binary contains the result of the execution of entry.js\n$ out/Release/node\nIn the example above, entry.js can use methods from the v8.startupSnapshot interface to specify how to save information for custom objects in the snapshot during serialization and how the information can be used to synchronize these objects during deserialization of the snapshot. For example, if the entry.js contains the following script:\n\n'use strict';\n\nconst fs = require('node:fs');\nconst zlib = require('node:zlib');\nconst path = require('node:path');\nconst assert = require('node:assert');\n\nconst {\n  isBuildingSnapshot,\n  addSerializeCallback,\n  addDeserializeCallback,\n  setDeserializeMainFunction,\n} = require('node:v8').startupSnapshot;\n\nconst filePath = path.resolve(__dirname, '../x1024.txt');\nconst storage = {};\n\nassert(isBuildingSnapshot());\n\naddSerializeCallback(({ filePath }) => {\n  storage[filePath] = zlib.gzipSync(fs.readFileSync(filePath));\n}, { filePath });\n\naddDeserializeCallback(({ filePath }) => {\n  storage[filePath] = zlib.gunzipSync(storage[filePath]);\n}, { filePath });\n\nsetDeserializeMainFunction(({ filePath }) => {\n  console.log(storage[filePath].toString());\n}, { filePath });\nThe resulted binary will simply print the data deserialized from the snapshot during start up:\n\n$ out/Release/node\n# Prints content of ./test/fixtures/x1024.txt\nCurrently the API is only available to a Node.js instance launched from the default snapshot, that is, the application deserialized from a user-land snapshot cannot use these APIs again.\n\nv8.startupSnapshot.addSerializeCallback(callback[, data])#\nAdded in: v18.6.0\ncallback", "doc_id": "aa928c03-f2a9-40d2-906c-a3e40039062c", "embedding": null, "doc_hash": "5fb087ba55c265f43766cac674aabe91dc33948e54b6253262fd0be0e541e99e", "extra_info": null, "node_info": {"start": 2724199, "end": 2727858}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0835b830-98a6-4a68-abea-44de7e49abda", "3": "13840be5-2b9d-43e9-a0dc-1d9291068cc0"}}, "__type__": "1"}, "13840be5-2b9d-43e9-a0dc-1d9291068cc0": {"__data__": {"text": "filePath }) => {\n  storage[filePath] = zlib.gunzipSync(storage[filePath]);\n}, { filePath });\n\nsetDeserializeMainFunction(({ filePath }) => {\n  console.log(storage[filePath].toString());\n}, { filePath });\nThe resulted binary will simply print the data deserialized from the snapshot during start up:\n\n$ out/Release/node\n# Prints content of ./test/fixtures/x1024.txt\nCurrently the API is only available to a Node.js instance launched from the default snapshot, that is, the application deserialized from a user-land snapshot cannot use these APIs again.\n\nv8.startupSnapshot.addSerializeCallback(callback[, data])#\nAdded in: v18.6.0\ncallback <Function> Callback to be invoked before serialization.\ndata <any> Optional data that will be passed to the callback when it gets called.\nAdd a callback that will be called when the Node.js instance is about to get serialized into a snapshot and exit. This can be used to release resources that should not or cannot be serialized or to convert user data into a form more suitable for serialization.\n\nv8.startupSnapshot.addDeserializeCallback(callback[, data])#\nAdded in: v18.6.0\ncallback <Function> Callback to be invoked after the snapshot is deserialized.\ndata <any> Optional data that will be passed to the callback when it gets called.\nAdd a callback that will be called when the Node.js instance is deserialized from a snapshot. The callback and the data (if provided) will be serialized into the snapshot, they can be used to re-initialize the state of the application or to re-acquire resources that the application needs when the application is restarted from the snapshot.\n\nv8.startupSnapshot.setDeserializeMainFunction(callback[, data])#\nAdded in: v18.6.0\ncallback <Function> Callback to be invoked as the entry point after the snapshot is deserialized.\ndata <any> Optional data that will be passed to the callback when it gets called.\nThis sets the entry point of the Node.js application when it is deserialized from a snapshot. This can be called only once in the snapshot building script. If called, the deserialized application no longer needs an additional entry point script to start up and will simply invoke the callback along with the deserialized data (if provided), otherwise an entry point script still needs to be provided to the deserialized application.\n\nv8.startupSnapshot.isBuildingSnapshot()#\nAdded in: v18.6.0\nReturns: <boolean>\nReturns true if the Node.js instance is run to build a snapshot.\n\nClass: v8.GCProfiler#\nAdded in: v18.15.0\nThis API collects GC data in current thread.\n\nnew v8.GCProfiler()#\nAdded in: v18.15.0\nCreate a new instance of the v8.GCProfiler class.\n\nprofiler.start()#\nAdded in: v18.15.0\nStart collecting GC data.\n\nprofiler.stop()#\nAdded in: v18.15.0\nStop collecting GC data and return an object.The content of object is as follows.\n\n{\n  \"version\": 1,\n  \"startTime\": 1674059033862,\n  \"statistics\": [\n    {\n      \"gcType\": \"Scavenge\",\n      \"beforeGC\": {\n        \"heapStatistics\": {\n          \"totalHeapSize\": 5005312,\n          \"totalHeapSizeExecutable\": 524288,\n          \"totalPhysicalSize\": 5226496,\n          \"totalAvailableSize\": 4341325216,\n          \"totalGlobalHandlesSize\": 8192,\n          \"usedGlobalHandlesSize\": 2112,\n          \"usedHeapSize\": 4883840,\n          \"heapSizeLimit\": 4345298944,\n  ", "doc_id": "13840be5-2b9d-43e9-a0dc-1d9291068cc0", "embedding": null, "doc_hash": "750bf5d40ba220fd6924d1d26a31f0974e572c0edf0b517f2f843fe2058e7cdd", "extra_info": null, "node_info": {"start": 2727952, "end": 2731248}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "aa928c03-f2a9-40d2-906c-a3e40039062c", "3": "8f1a91a9-b000-4c3a-93ea-b68b40efc0bf"}}, "__type__": "1"}, "8f1a91a9-b000-4c3a-93ea-b68b40efc0bf": {"__data__": {"text": "     \"beforeGC\": {\n        \"heapStatistics\": {\n          \"totalHeapSize\": 5005312,\n          \"totalHeapSizeExecutable\": 524288,\n          \"totalPhysicalSize\": 5226496,\n          \"totalAvailableSize\": 4341325216,\n          \"totalGlobalHandlesSize\": 8192,\n          \"usedGlobalHandlesSize\": 2112,\n          \"usedHeapSize\": 4883840,\n          \"heapSizeLimit\": 4345298944,\n          \"mallocedMemory\": 254128,\n          \"externalMemory\": 225138,\n          \"peakMallocedMemory\": 181760\n        },\n        \"heapSpaceStatistics\": [\n          {\n            \"spaceName\": \"read_only_space\",\n            \"spaceSize\": 0,\n            \"spaceUsedSize\": 0,\n            \"spaceAvailableSize\": 0,\n            \"physicalSpaceSize\": 0\n          }\n        ]\n      },\n      \"cost\": 1574.14,\n      \"afterGC\": {\n        \"heapStatistics\": {\n          \"totalHeapSize\": 6053888,\n          \"totalHeapSizeExecutable\": 524288,\n          \"totalPhysicalSize\": 5500928,\n          \"totalAvailableSize\": 4341101384,\n          \"totalGlobalHandlesSize\": 8192,\n          \"usedGlobalHandlesSize\": 2112,\n          \"usedHeapSize\": 4059096,\n          \"heapSizeLimit\": 4345298944,\n          \"mallocedMemory\": 254128,\n          \"externalMemory\": 225138,\n          \"peakMallocedMemory\": 181760\n        },\n        \"heapSpaceStatistics\": [\n          {\n            \"spaceName\": \"read_only_space\",\n            \"spaceSize\": 0,\n            \"spaceUsedSize\": 0,\n            \"spaceAvailableSize\": 0,\n            \"physicalSpaceSize\": 0\n          }\n        ]\n      }\n    }\n  ],\n  \"endTime\": 1674059036865\n}\nHere's an example.\n\nconst { GCProfiler } = require('v8');\nconst profiler = new GCProfiler();\nprofiler.start();\nsetTimeout(() => {\n  console.log(profiler.stop());\n}, 1000);\nVM (executing JavaScript)#\nStability: 2 - Stable\nSource Code: lib/vm.js\n\nThe node:vm module enables compiling and running code within V8 Virtual Machine contexts.\n\nThe node:vm module is not a security mechanism. Do not use it to run untrusted code.\n\nJavaScript code can be compiled and run immediately or compiled, saved, and run later.\n\nA common use case is to run the code in a different V8 Context. This means invoked", "doc_id": "8f1a91a9-b000-4c3a-93ea-b68b40efc0bf", "embedding": null, "doc_hash": "9076e8f1ea405ce5798f22c1e4aaf5eabd11f84c6e0d90e69887afe3bf6ba79c", "extra_info": null, "node_info": {"start": 2731552, "end": 2733692}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "13840be5-2b9d-43e9-a0dc-1d9291068cc0", "3": "b5c2029e-67f7-4144-b567-30a1ac03ec66"}}, "__type__": "1"}, "b5c2029e-67f7-4144-b567-30a1ac03ec66": {"__data__": {"text": " ],\n  \"endTime\": 1674059036865\n}\nHere's an example.\n\nconst { GCProfiler } = require('v8');\nconst profiler = new GCProfiler();\nprofiler.start();\nsetTimeout(() => {\n  console.log(profiler.stop());\n}, 1000);\nVM (executing JavaScript)#\nStability: 2 - Stable\nSource Code: lib/vm.js\n\nThe node:vm module enables compiling and running code within V8 Virtual Machine contexts.\n\nThe node:vm module is not a security mechanism. Do not use it to run untrusted code.\n\nJavaScript code can be compiled and run immediately or compiled, saved, and run later.\n\nA common use case is to run the code in a different V8 Context. This means invoked code has a different global object than the invoking code.\n\nOne can provide the context by contextifying an object. The invoked code treats any property in the context like a global variable. Any changes to global variables caused by the invoked code are reflected in the context object.\n\nconst vm = require('node:vm');\n\nconst x = 1;\n\nconst context = { x: 2 };\nvm.createContext(context); // Contextify the object.\n\nconst code = 'x += 40; var y = 17;';\n// `x` and `y` are global variables in the context.\n// Initially, x has the value 2 because that is the value of context.x.\nvm.runInContext(code, context);\n\nconsole.log(context.x); // 42\nconsole.log(context.y); // 17\n\nconsole.log(x); // 1; y is not defined.\nClass: vm.Script#\nAdded in: v0.3.1\nInstances of the vm.Script class contain precompiled scripts that can be executed in specific contexts.\n\nnew vm.Script(code[, options])#\nHistory\ncode <string> The JavaScript code to compile.\noptions <Object> | <string>\nfilename <string> Specifies the filename used in stack traces produced by this script. Default: 'evalmachine.<anonymous>'.\nlineOffset <number> Specifies the line number offset that is displayed in stack traces produced by this script. Default: 0.\ncolumnOffset <number> Specifies the first-line column number offset that is displayed in stack traces produced by this script. Default: 0.\ncachedData <Buffer> | <TypedArray> | <DataView> Provides an optional Buffer or TypedArray, or DataView with V8's code cache data for the supplied source. When supplied, the cachedDataRejected value will be set to either true or false depending on acceptance of the data by V8.\nproduceCachedData <boolean> When true and no cachedData is present, V8 will attempt to produce code cache data for code. Upon success, a Buffer with V8's code cache data will be produced and stored in the cachedData property of the returned vm.Script instance. The cachedDataProduced value will be set to either true or false depending on whether code cache data is produced successfully. This option is deprecated in favor of script.createCachedData(). Default: false.\nimportModuleDynamically <Function> Called during evaluation of this module when import() is called. If this option is not specified, calls to import() will reject with ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING. This option is part of the experimental modules API. We do not recommend using it in a production environment.\nspecifier <string> specifier passed to import()\nscript <vm.Script>\nimportAssertions <Object> The \"assert\" value passed to the optionsExpression optional parameter, or an empty object if no value was provided.\nReturns: <Module Namespace Object> | <vm.Module> Returning a vm.Module is recommended in order to take advantage of error tracking, and to avoid issues with namespaces that contain then function exports.\nIf options is a string, then it specifies the filename.\n\nCreating a new vm.Script object compiles code but does not run it. The compiled vm.Script can be run later multiple times. The code is not bound to any global object; rather, it is bound before each run, just for that", "doc_id": "b5c2029e-67f7-4144-b567-30a1ac03ec66", "embedding": null, "doc_hash": "63085a99bccdade13e24e048688d5344c6a1abaae8992a06695f6727a6d166d5", "extra_info": null, "node_info": {"start": 2733417, "end": 2737146}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8f1a91a9-b000-4c3a-93ea-b68b40efc0bf", "3": "a730170c-d863-4fe0-891f-8c162d8c689d"}}, "__type__": "1"}, "a730170c-d863-4fe0-891f-8c162d8c689d": {"__data__": {"text": "This option is part of the experimental modules API. We do not recommend using it in a production environment.\nspecifier <string> specifier passed to import()\nscript <vm.Script>\nimportAssertions <Object> The \"assert\" value passed to the optionsExpression optional parameter, or an empty object if no value was provided.\nReturns: <Module Namespace Object> | <vm.Module> Returning a vm.Module is recommended in order to take advantage of error tracking, and to avoid issues with namespaces that contain then function exports.\nIf options is a string, then it specifies the filename.\n\nCreating a new vm.Script object compiles code but does not run it. The compiled vm.Script can be run later multiple times. The code is not bound to any global object; rather, it is bound before each run, just for that run.\n\nscript.cachedDataRejected#\nAdded in: v5.7.0\n<boolean> | <undefined>\nWhen cachedData is supplied to create the vm.Script, this value will be set to either true or false depending on acceptance of the data by V8. Otherwise the value is undefined.\n\nscript.createCachedData()#\nAdded in: v10.6.0\nReturns: <Buffer>\nCreates a code cache that can be used with the Script constructor's cachedData option. Returns a Buffer. This method may be called at any time and any number of times.\n\nThe code cache of the Script doesn't contain any JavaScript observable states. The code cache is safe to be saved along side the script source and used to construct new Script instances multiple times.\n\nFunctions in the Script source can be marked as lazily compiled and they are not compiled at construction of the Script. These functions are going to be compiled when they are invoked the first time. The code cache serializes the metadata that V8 currently knows about the Script that it can use to speed up future compilations.\n\nconst script = new vm.Script(`\nfunction add(a, b) {\n  return a + b;\n}\n\nconst x = add(1, 2);\n`);\n\nconst cacheWithoutAdd = script.createCachedData();\n// In `cacheWithoutAdd` the function `add()` is marked for full compilation\n// upon invocation.\n\nscript.runInThisContext();\n\nconst cacheWithAdd = script.createCachedData();\n// `cacheWithAdd` contains fully compiled function `add()`.\nscript.runInContext(contextifiedObject[, options])#\nHistory\ncontextifiedObject <Object> A contextified object as returned by the vm.createContext() method.\noptions <Object>\ndisplayErrors <boolean> When true, if an Error occurs while compiling the code, the line of code causing the error is attached to the stack trace. Default: true.\ntimeout <integer> Specifies the number of milliseconds to execute code before terminating execution. If execution is terminated, an Error will be thrown. This value must be a strictly positive integer.\nbreakOnSigint <boolean> If true, receiving SIGINT (Ctrl+C) will terminate execution and throw an Error. Existing handlers for the event that have been attached via process.on('SIGINT') are disabled during script execution, but continue to work after that. Default: false.\nReturns: <any> the result of the very last statement executed in the script.\nRuns the compiled code contained by the vm.Script object within the given contextifiedObject and returns the result. Running code does not have access to local scope.\n\nThe following example compiles code that increments a global variable, sets the value of another global variable, then execute the code multiple times. The globals are contained in the context object.\n\nconst vm = require('node:vm');\n\nconst context = {\n  animal: 'cat',\n  count: 2,\n};\n\nconst script = new vm.Script('count += 1; name = \"kitty\";');\n\nvm.createContext(context);\nfor (let i = 0; i < 10; ++i) {\n  script.runInContext(context);\n}\n\nconsole.log(context);\n// Prints: { animal: 'cat', count: 12, name: 'kitty' }\nUsing the timeout or breakOnSigint options will result in new event", "doc_id": "a730170c-d863-4fe0-891f-8c162d8c689d", "embedding": null, "doc_hash": "b6f346c960b6a6ec3c94e523bcd62552d9c6180e9aaef60e8fa6567db2416958", "extra_info": null, "node_info": {"start": 2737011, "end": 2740846}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b5c2029e-67f7-4144-b567-30a1ac03ec66", "3": "88555136-6254-4717-8884-7ac4fbe42200"}}, "__type__": "1"}, "88555136-6254-4717-8884-7ac4fbe42200": {"__data__": {"text": "and returns the result. Running code does not have access to local scope.\n\nThe following example compiles code that increments a global variable, sets the value of another global variable, then execute the code multiple times. The globals are contained in the context object.\n\nconst vm = require('node:vm');\n\nconst context = {\n  animal: 'cat',\n  count: 2,\n};\n\nconst script = new vm.Script('count += 1; name = \"kitty\";');\n\nvm.createContext(context);\nfor (let i = 0; i < 10; ++i) {\n  script.runInContext(context);\n}\n\nconsole.log(context);\n// Prints: { animal: 'cat', count: 12, name: 'kitty' }\nUsing the timeout or breakOnSigint options will result in new event loops and corresponding threads being started, which have a non-zero performance overhead.\n\nscript.runInNewContext([contextObject[, options]])#\nHistory\ncontextObject <Object> An object that will be contextified. If undefined, a new object will be created.\noptions <Object>\ndisplayErrors <boolean> When true, if an Error occurs while compiling the code, the line of code causing the error is attached to the stack trace. Default: true.\ntimeout <integer> Specifies the number of milliseconds to execute code before terminating execution. If execution is terminated, an Error will be thrown. This value must be a strictly positive integer.\nbreakOnSigint <boolean> If true, receiving SIGINT (Ctrl+C) will terminate execution and throw an Error. Existing handlers for the event that have been attached via process.on('SIGINT') are disabled during script execution, but continue to work after that. Default: false.\ncontextName <string> Human-readable name of the newly created context. Default: 'VM Context i', where i is an ascending numerical index of the created context.\ncontextOrigin <string> Origin corresponding to the newly created context for display purposes. The origin should be formatted like a URL, but with only the scheme, host, and port (if necessary), like the value of the url.origin property of a URL object. Most notably, this string should omit the trailing slash, as that denotes a path. Default: ''.\ncontextCodeGeneration <Object>\nstrings <boolean> If set to false any calls to eval or function constructors (Function, GeneratorFunction, etc) will throw an EvalError. Default: true.\nwasm <boolean> If set to false any attempt to compile a WebAssembly module will throw a WebAssembly.CompileError. Default: true.\nmicrotaskMode <string> If set to afterEvaluate, microtasks (tasks scheduled through Promises and async functions) will be run immediately after the script has run. They are included in the timeout and breakOnSigint scopes in that case.\nReturns: <any> the result of the very last statement executed in the script.\nFirst contextifies the given contextObject, runs the compiled code contained by the vm.Script object within the created context, and returns the result. Running code does not have access to local scope.\n\nThe following example compiles code that sets a global variable, then executes the code multiple times in different contexts. The globals are set on and contained within each individual context.\n\nconst vm = require('node:vm');\n\nconst script = new vm.Script('globalVar = \"set\"');\n\nconst contexts = [{}, {}, {}];\ncontexts.forEach((context) => {\n  script.runInNewContext(context);\n});\n\nconsole.log(contexts);\n// Prints: [{ globalVar: 'set' }, { globalVar: 'set' }, { globalVar: 'set' }]\nscript.runInThisContext([options])#\nHistory\noptions <Object>\ndisplayErrors <boolean> When true, if an Error occurs while compiling the code, the line of code causing the error is attached to the stack trace. Default: true.\ntimeout <integer> Specifies the number of milliseconds to execute code before terminating execution. If execution is terminated, an Error will be thrown. This value must be a strictly positive integer.\nbreakOnSigint", "doc_id": "88555136-6254-4717-8884-7ac4fbe42200", "embedding": null, "doc_hash": "6b974c555a72d8f85b61e0058628d8688ac488796359e9f08270d2ca022c0ab9", "extra_info": null, "node_info": {"start": 2740959, "end": 2744788}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a730170c-d863-4fe0-891f-8c162d8c689d", "3": "8b183847-ebb3-4ced-b5c2-7472e70a4242"}}, "__type__": "1"}, "8b183847-ebb3-4ced-b5c2-7472e70a4242": {"__data__": {"text": "contexts = [{}, {}, {}];\ncontexts.forEach((context) => {\n  script.runInNewContext(context);\n});\n\nconsole.log(contexts);\n// Prints: [{ globalVar: 'set' }, { globalVar: 'set' }, { globalVar: 'set' }]\nscript.runInThisContext([options])#\nHistory\noptions <Object>\ndisplayErrors <boolean> When true, if an Error occurs while compiling the code, the line of code causing the error is attached to the stack trace. Default: true.\ntimeout <integer> Specifies the number of milliseconds to execute code before terminating execution. If execution is terminated, an Error will be thrown. This value must be a strictly positive integer.\nbreakOnSigint <boolean> If true, receiving SIGINT (Ctrl+C) will terminate execution and throw an Error. Existing handlers for the event that have been attached via process.on('SIGINT') are disabled during script execution, but continue to work after that. Default: false.\nReturns: <any> the result of the very last statement executed in the script.\nRuns the compiled code contained by the vm.Script within the context of the current global object. Running code does not have access to local scope, but does have access to the current global object.\n\nThe following example compiles code that increments a global variable then executes that code multiple times:\n\nconst vm = require('node:vm');\n\nglobal.globalVar = 0;\n\nconst script = new vm.Script('globalVar += 1', { filename: 'myfile.vm' });\n\nfor (let i = 0; i < 1000; ++i) {\n  script.runInThisContext();\n}\n\nconsole.log(globalVar);\n\n// 1000\nscript.sourceMapURL#\nAdded in: v18.13.0\n<string> | <undefined>\nWhen the script is compiled from a source that contains a source map magic comment, this property will be set to the URL of the source map.\n\nimport vm from 'node:vm';\n\nconst script = new vm.Script(`\nfunction myFunc() {}\n//# sourceMappingURL=sourcemap.json\n`);\n\nconsole.log(script.sourceMapURL);\n// Prints: sourcemap.json\nClass: vm.Module#\nAdded in: v13.0.0, v12.16.0\nStability: 1 - Experimental\nThis feature is only available with the --experimental-vm-modules command flag enabled.\n\nThe vm.Module class provides a low-level interface for using ECMAScript modules in VM contexts. It is the counterpart of the vm.Script class that closely mirrors Module Records as defined in the ECMAScript specification.\n\nUnlike vm.Script however, every vm.Module object is bound to a context from its creation. Operations on vm.Module objects are intrinsically asynchronous, in contrast with the synchronous nature of vm.Script objects. The use of 'async' functions can help with manipulating vm.Module objects.\n\nUsing a vm.Module object requires three distinct steps: creation/parsing, linking, and evaluation. These three steps are illustrated in the following example.\n\nThis implementation lies at a lower level than the ECMAScript Module loader. There is also no way to interact with the Loader yet, though support is planned.\n\nimport vm from 'node:vm';\n\nconst contextifiedObject = vm.createContext({\n  secret: 42,\n  print: console.log,\n});\n\n// Step 1\n//\n// Create a Module by constructing a new `vm.SourceTextModule` object. This\n// parses the provided source text, throwing a `SyntaxError` if anything goes\n// wrong. By default, a Module is created in the top context. But here, we\n// specify `contextifiedObject` as the context this Module belongs to.\n//\n// Here, we attempt to obtain the default export from the module \"foo\", and\n// put it into local binding \"secret\".\n\nconst bar = new vm.SourceTextModule(`\n  import s from 'foo';\n  s;\n  print(s);\n`, { context: contextifiedObject });\n\n// Step 2\n//\n// \"Link\" the imported dependencies of this", "doc_id": "8b183847-ebb3-4ced-b5c2-7472e70a4242", "embedding": null, "doc_hash": "b33297aebc9359e07781ef16566ecc4cf7a03d2b40ecfa1e3cee826ac021fb1c", "extra_info": null, "node_info": {"start": 2744796, "end": 2748407}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "88555136-6254-4717-8884-7ac4fbe42200", "3": "9e9727cc-26b8-4a59-92ba-1cae9bdbb896"}}, "__type__": "1"}, "9e9727cc-26b8-4a59-92ba-1cae9bdbb896": {"__data__": {"text": " secret: 42,\n  print: console.log,\n});\n\n// Step 1\n//\n// Create a Module by constructing a new `vm.SourceTextModule` object. This\n// parses the provided source text, throwing a `SyntaxError` if anything goes\n// wrong. By default, a Module is created in the top context. But here, we\n// specify `contextifiedObject` as the context this Module belongs to.\n//\n// Here, we attempt to obtain the default export from the module \"foo\", and\n// put it into local binding \"secret\".\n\nconst bar = new vm.SourceTextModule(`\n  import s from 'foo';\n  s;\n  print(s);\n`, { context: contextifiedObject });\n\n// Step 2\n//\n// \"Link\" the imported dependencies of this Module to it.\n//\n// The provided linking callback (the \"linker\") accepts two arguments: the\n// parent module (`bar` in this case) and the string that is the specifier of\n// the imported module. The callback is expected to return a Module that\n// corresponds to the provided specifier, with certain requirements documented\n// in `module.link()`.\n//\n// If linking has not started for the returned Module, the same linker\n// callback will be called on the returned Module.\n//\n// Even top-level Modules without dependencies must be explicitly linked. The\n// callback provided would never be called, however.\n//\n// The link() method returns a Promise that will be resolved when all the\n// Promises returned by the linker resolve.\n//\n// Note: This is a contrived example in that the linker function creates a new\n// \"foo\" module every time it is called. In a full-fledged module system, a\n// cache would probably be used to avoid duplicated modules.\n\nasync function linker(specifier, referencingModule) {\n  if (specifier === 'foo') {\n    return new vm.SourceTextModule(`\n      // The \"secret\" variable refers to the global variable we added to\n      // \"contextifiedObject\" when creating the context.\n      export default secret;\n    `, { context: referencingModule.context });\n\n    // Using `contextifiedObject` instead of `referencingModule.context`\n    // here would work as well.\n  }\n  throw new Error(`Unable to resolve dependency: ${specifier}`);\n}\nawait bar.link(linker);\n\n// Step 3\n//\n// Evaluate the Module. The evaluate() method returns a promise which will\n// resolve after the module has finished evaluating.\n\n// Prints 42.\nawait bar.evaluate();\nmodule.dependencySpecifiers#\n<string[]>\nThe specifiers of all dependencies of this module. The returned array is frozen to disallow any changes to it.\n\nCorresponds to the [[RequestedModules]] field of Cyclic Module Records in the ECMAScript specification.\n\nmodule.error#\n<any>\nIf the module.status is 'errored', this property contains the exception thrown by the module during evaluation. If the status is anything else, accessing this property will result in a thrown exception.\n\nThe value undefined cannot be used for cases where there is not a thrown exception due to possible ambiguity with throw undefined;.\n\nCorresponds to the [[EvaluationError]] field of Cyclic Module Records in the ECMAScript specification.\n\nmodule.evaluate([options])#\noptions <Object>\ntimeout <integer> Specifies the number of milliseconds to evaluate before terminating execution. If execution is interrupted, an Error will be thrown. This value must be a strictly positive integer.\nbreakOnSigint <boolean> If true, receiving SIGINT (Ctrl+C) will terminate execution and throw an Error. Existing handlers for the event that have been attached via process.on('SIGINT') are disabled during script execution, but continue to work after that. Default: false.\nReturns: <Promise> Fulfills with undefined upon success.\nEvaluate the module.\n\nThis must be called after the module has been", "doc_id": "9e9727cc-26b8-4a59-92ba-1cae9bdbb896", "embedding": null, "doc_hash": "6c619caea50bc786feebde180e9a950c8b2a6f5a2aea62c74dae9b5afe411565", "extra_info": null, "node_info": {"start": 2748418, "end": 2752073}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "8b183847-ebb3-4ced-b5c2-7472e70a4242", "3": "ea1ebeae-27b0-4f80-b12f-8e07b2004ab1"}}, "__type__": "1"}, "ea1ebeae-27b0-4f80-b12f-8e07b2004ab1": {"__data__": {"text": "to the [[EvaluationError]] field of Cyclic Module Records in the ECMAScript specification.\n\nmodule.evaluate([options])#\noptions <Object>\ntimeout <integer> Specifies the number of milliseconds to evaluate before terminating execution. If execution is interrupted, an Error will be thrown. This value must be a strictly positive integer.\nbreakOnSigint <boolean> If true, receiving SIGINT (Ctrl+C) will terminate execution and throw an Error. Existing handlers for the event that have been attached via process.on('SIGINT') are disabled during script execution, but continue to work after that. Default: false.\nReturns: <Promise> Fulfills with undefined upon success.\nEvaluate the module.\n\nThis must be called after the module has been linked; otherwise it will reject. It could be called also when the module has already been evaluated, in which case it will either do nothing if the initial evaluation ended in success (module.status is 'evaluated') or it will re-throw the exception that the initial evaluation resulted in (module.status is 'errored').\n\nThis method cannot be called while the module is being evaluated (module.status is 'evaluating').\n\nCorresponds to the Evaluate() concrete method field of Cyclic Module Records in the ECMAScript specification.\n\nmodule.identifier#\n<string>\nThe identifier of the current module, as set in the constructor.\n\nmodule.link(linker)#\nlinker <Function>\nspecifier <string> The specifier of the requested module:\n\nimport foo from 'foo';\n//              ^^^^^ the module specifier\nreferencingModule <vm.Module> The Module object link() is called on.\n\nextra <Object>\n\nassert <Object> The data from the assertion:\nimport foo from 'foo' assert { name: 'value' };\n//                           ^^^^^^^^^^^^^^^^^ the assertion\nPer ECMA-262, hosts are expected to ignore assertions that they do not support, as opposed to, for example, triggering an error if an unsupported assertion is present.\nReturns: <vm.Module> | <Promise>\n\nReturns: <Promise>\nLink module dependencies. This method must be called before evaluation, and can only be called once per module.\n\nThe function is expected to return a Module object or a Promise that eventually resolves to a Module object. The returned Module must satisfy the following two invariants:\n\nIt must belong to the same context as the parent Module.\nIts status must not be 'errored'.\nIf the returned Module's status is 'unlinked', this method will be recursively called on the returned Module with the same provided linker function.\n\nlink() returns a Promise that will either get resolved when all linking instances resolve to a valid Module, or rejected if the linker function either throws an exception or returns an invalid Module.\n\nThe linker function roughly corresponds to the implementation-defined HostResolveImportedModule abstract operation in the ECMAScript specification, with a few key differences:\n\nThe linker function is allowed to be asynchronous while HostResolveImportedModule is synchronous.\nThe actual HostResolveImportedModule implementation used during module linking is one that returns the modules linked during linking. Since at that point all modules would have been fully linked already, the HostResolveImportedModule implementation is fully synchronous per specification.\n\nCorresponds to the Link() concrete method field of Cyclic Module Records in the ECMAScript specification.\n\nmodule.namespace#\n<Object>\nThe namespace object of the module. This is only available after linking (module.link()) has completed.\n\nCorresponds to the GetModuleNamespace abstract operation in the ECMAScript specification.\n\nmodule.status#\n<string>\nThe current status of the module. Will be one of:\n\n'unlinked': module.link() has not yet been called.\n\n'linking': module.link() has been called, but not all Promises returned by the linker function have been resolved", "doc_id": "ea1ebeae-27b0-4f80-b12f-8e07b2004ab1", "embedding": null, "doc_hash": "6462a857f3007ff2b80411703ad9de219cbc0126fc49d81eaac32048a4970aac", "extra_info": null, "node_info": {"start": 2751984, "end": 2755831}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "9e9727cc-26b8-4a59-92ba-1cae9bdbb896", "3": "5a968fd3-cddd-493b-8a2e-febc5f6250a2"}}, "__type__": "1"}, "5a968fd3-cddd-493b-8a2e-febc5f6250a2": {"__data__": {"text": "the modules linked during linking. Since at that point all modules would have been fully linked already, the HostResolveImportedModule implementation is fully synchronous per specification.\n\nCorresponds to the Link() concrete method field of Cyclic Module Records in the ECMAScript specification.\n\nmodule.namespace#\n<Object>\nThe namespace object of the module. This is only available after linking (module.link()) has completed.\n\nCorresponds to the GetModuleNamespace abstract operation in the ECMAScript specification.\n\nmodule.status#\n<string>\nThe current status of the module. Will be one of:\n\n'unlinked': module.link() has not yet been called.\n\n'linking': module.link() has been called, but not all Promises returned by the linker function have been resolved yet.\n\n'linked': The module has been linked successfully, and all of its dependencies are linked, but module.evaluate() has not yet been called.\n\n'evaluating': The module is being evaluated through a module.evaluate() on itself or a parent module.\n\n'evaluated': The module has been successfully evaluated.\n\n'errored': The module has been evaluated, but an exception was thrown.\n\nOther than 'errored', this status string corresponds to the specification's Cyclic Module Record's [[Status]] field. 'errored' corresponds to 'evaluated' in the specification, but with [[EvaluationError]] set to a value that is not undefined.\n\nClass: vm.SourceTextModule#\nAdded in: v9.6.0\nStability: 1 - Experimental\nThis feature is only available with the --experimental-vm-modules command flag enabled.\n\nExtends: <vm.Module>\nThe vm.SourceTextModule class provides the Source Text Module Record as defined in the ECMAScript specification.\n\nnew vm.SourceTextModule(code[, options])#\nHistory\ncode <string> JavaScript Module code to parse\noptions\nidentifier <string> String used in stack traces. Default: 'vm:module(i)' where i is a context-specific ascending index.\ncachedData <Buffer> | <TypedArray> | <DataView> Provides an optional Buffer or TypedArray, or DataView with V8's code cache data for the supplied source. The code must be the same as the module from which this cachedData was created.\ncontext <Object> The contextified object as returned by the vm.createContext() method, to compile and evaluate this Module in.\nlineOffset <integer> Specifies the line number offset that is displayed in stack traces produced by this Module. Default: 0.\ncolumnOffset <integer> Specifies the first-line column number offset that is displayed in stack traces produced by this Module. Default: 0.\ninitializeImportMeta <Function> Called during evaluation of this Module to initialize the import.meta.\nmeta <import.meta>\nmodule <vm.SourceTextModule>\nimportModuleDynamically <Function> Called during evaluation of this module when import() is called. If this option is not specified, calls to import() will reject with ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING.\nspecifier <string> specifier passed to import()\nmodule <vm.Module>\nimportAssertions <Object> The \"assert\" value passed to the optionsExpression optional parameter, or an empty object if no value was provided.\nReturns: <Module Namespace Object> | <vm.Module> Returning a vm.Module is recommended in order to take advantage of error tracking, and to avoid issues with namespaces that contain then function exports.\nCreates a new SourceTextModule instance.\n\nProperties assigned to the import.meta object that are objects may allow the module to access information outside the specified context. Use vm.runInContext() to create objects in a specific context.\n\nimport vm from 'node:vm';\n\nconst contextifiedObject = vm.createContext({ secret: 42 });\n\nconst module = new vm.SourceTextModule(\n  'Object.getPrototypeOf(import.meta.prop).secret = secret;',\n  {\n    initializeImportMeta(meta) {\n      // Note: this object is created in the top context. As such,\n      //", "doc_id": "5a968fd3-cddd-493b-8a2e-febc5f6250a2", "embedding": null, "doc_hash": "6ca4a4ee268bcc67d0b7d52a9b199d5e854492fecacb9cb35b372fe18a96005b", "extra_info": null, "node_info": {"start": 2755802, "end": 2759651}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ea1ebeae-27b0-4f80-b12f-8e07b2004ab1", "3": "32758a03-556d-4c57-87fd-b6a3a227353b"}}, "__type__": "1"}, "32758a03-556d-4c57-87fd-b6a3a227353b": {"__data__": {"text": "| <vm.Module> Returning a vm.Module is recommended in order to take advantage of error tracking, and to avoid issues with namespaces that contain then function exports.\nCreates a new SourceTextModule instance.\n\nProperties assigned to the import.meta object that are objects may allow the module to access information outside the specified context. Use vm.runInContext() to create objects in a specific context.\n\nimport vm from 'node:vm';\n\nconst contextifiedObject = vm.createContext({ secret: 42 });\n\nconst module = new vm.SourceTextModule(\n  'Object.getPrototypeOf(import.meta.prop).secret = secret;',\n  {\n    initializeImportMeta(meta) {\n      // Note: this object is created in the top context. As such,\n      // Object.getPrototypeOf(import.meta.prop) points to the\n      // Object.prototype in the top context rather than that in\n      // the contextified object.\n      meta.prop = {};\n    },\n  });\n// Since module has no dependencies, the linker function will never be called.\nawait module.link(() => {});\nawait module.evaluate();\n\n// Now, Object.prototype.secret will be equal to 42.\n//\n// To fix this problem, replace\n//     meta.prop = {};\n// above with\n//     meta.prop = vm.runInContext('{}', contextifiedObject);\nsourceTextModule.createCachedData()#\nAdded in: v13.7.0, v12.17.0\nReturns: <Buffer>\nCreates a code cache that can be used with the SourceTextModule constructor's cachedData option. Returns a Buffer. This method may be called any number of times before the module has been evaluated.\n\nThe code cache of the SourceTextModule doesn't contain any JavaScript observable states. The code cache is safe to be saved along side the script source and used to construct new SourceTextModule instances multiple times.\n\nFunctions in the SourceTextModule source can be marked as lazily compiled and they are not compiled at construction of the SourceTextModule. These functions are going to be compiled when they are invoked the first time. The code cache serializes the metadata that V8 currently knows about the SourceTextModule that it can use to speed up future compilations.\n\n// Create an initial module\nconst module = new vm.SourceTextModule('const a = 1;');\n\n// Create cached data from this module\nconst cachedData = module.createCachedData();\n\n// Create a new module using the cached data. The code must be the same.\nconst module2 = new vm.SourceTextModule('const a = 1;', { cachedData });\nClass: vm.SyntheticModule#\nAdded in: v13.0.0, v12.16.0\nStability: 1 - Experimental\nThis feature is only available with the --experimental-vm-modules command flag enabled.\n\nExtends: <vm.Module>\nThe vm.SyntheticModule class provides the Synthetic Module Record as defined in the WebIDL specification. The purpose of synthetic modules is to provide a generic interface for exposing non-JavaScript sources to ECMAScript module graphs.\n\nconst vm = require('node:vm');\n\nconst source = '{ \"a\": 1 }';\nconst module = new vm.SyntheticModule(['default'], function() {\n  const obj = JSON.parse(source);\n  this.setExport('default', obj);\n});\n\n// Use `module` in linking...\nnew vm.SyntheticModule(exportNames, evaluateCallback[, options])#\nAdded in: v13.0.0, v12.16.0\nexportNames <string[]> Array of names that will be exported from the module.\nevaluateCallback <Function> Called when the module is evaluated.\noptions\nidentifier <string> String used in stack traces. Default: 'vm:module(i)' where i is a context-specific ascending index.\ncontext <Object> The contextified object as returned by the vm.createContext() method, to compile and evaluate this Module in.\nCreates a new SyntheticModule instance.\n\nObjects assigned to the exports of this", "doc_id": "32758a03-556d-4c57-87fd-b6a3a227353b", "embedding": null, "doc_hash": "b0442a6aa41fd6a0b9f01fb111647efe6fb7788935f33b6d58d8c719febf79fc", "extra_info": null, "node_info": {"start": 2759710, "end": 2763349}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5a968fd3-cddd-493b-8a2e-febc5f6250a2", "3": "098d021b-24d0-40c0-9b79-bd04652bba4f"}}, "__type__": "1"}, "098d021b-24d0-40c0-9b79-bd04652bba4f": {"__data__": {"text": "{\n  const obj = JSON.parse(source);\n  this.setExport('default', obj);\n});\n\n// Use `module` in linking...\nnew vm.SyntheticModule(exportNames, evaluateCallback[, options])#\nAdded in: v13.0.0, v12.16.0\nexportNames <string[]> Array of names that will be exported from the module.\nevaluateCallback <Function> Called when the module is evaluated.\noptions\nidentifier <string> String used in stack traces. Default: 'vm:module(i)' where i is a context-specific ascending index.\ncontext <Object> The contextified object as returned by the vm.createContext() method, to compile and evaluate this Module in.\nCreates a new SyntheticModule instance.\n\nObjects assigned to the exports of this instance may allow importers of the module to access information outside the specified context. Use vm.runInContext() to create objects in a specific context.\n\nsyntheticModule.setExport(name, value)#\nAdded in: v13.0.0, v12.16.0\nname <string> Name of the export to set.\nvalue <any> The value to set the export to.\nThis method is used after the module is linked to set the values of exports. If it is called before the module is linked, an ERR_VM_MODULE_STATUS error will be thrown.\n\nimport vm from 'node:vm';\n\nconst m = new vm.SyntheticModule(['x'], () => {\n  m.setExport('x', 1);\n});\n\nawait m.link(() => {});\nawait m.evaluate();\n\nassert.strictEqual(m.namespace.x, 1);\nvm.compileFunction(code[, params[, options]])#\nHistory\ncode <string> The body of the function to compile.\nparams <string[]> An array of strings containing all parameters for the function.\noptions <Object>\nfilename <string> Specifies the filename used in stack traces produced by this script. Default: ''.\nlineOffset <number> Specifies the line number offset that is displayed in stack traces produced by this script. Default: 0.\ncolumnOffset <number> Specifies the first-line column number offset that is displayed in stack traces produced by this script. Default: 0.\ncachedData <Buffer> | <TypedArray> | <DataView> Provides an optional Buffer or TypedArray, or DataView with V8's code cache data for the supplied source.\nproduceCachedData <boolean> Specifies whether to produce new cache data. Default: false.\nparsingContext <Object> The contextified object in which the said function should be compiled in.\ncontextExtensions <Object[]> An array containing a collection of context extensions (objects wrapping the current scope) to be applied while compiling. Default: [].\nimportModuleDynamically <Function> Called during evaluation of this module when import() is called. If this option is not specified, calls to import() will reject with ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING. This option is part of the experimental modules API, and should not be considered stable.\nspecifier <string> specifier passed to import()\nfunction <Function>\nimportAssertions <Object> The \"assert\" value passed to the optionsExpression optional parameter, or an empty object if no value was provided.\nReturns: <Module Namespace Object> | <vm.Module> Returning a vm.Module is recommended in order to take advantage of error tracking, and to avoid issues with namespaces that contain then function exports.\nReturns: <Function>\nCompiles the given code into the provided context (if no context is supplied, the current context is used), and returns it wrapped inside a function with the given params.\n\nvm.createContext([contextObject[, options]])#\nHistory\ncontextObject <Object>\noptions <Object>\nname <string> Human-readable name of the newly created context. Default: 'VM Context i', where i is an ascending numerical index of the created context.\norigin <string> Origin corresponding to the newly created context for display purposes. The origin should be formatted like a URL, but with only the scheme, host, and port (if necessary), like the value of the url.origin", "doc_id": "098d021b-24d0-40c0-9b79-bd04652bba4f", "embedding": null, "doc_hash": "3677fa2f37c382134a68fcdacfd0fa507e5d54c5212cfa1208a3ff53b7883ae4", "extra_info": null, "node_info": {"start": 2763363, "end": 2767154}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "32758a03-556d-4c57-87fd-b6a3a227353b", "3": "49dec80d-8f99-49a6-9421-7a3101ae7e2c"}}, "__type__": "1"}, "49dec80d-8f99-49a6-9421-7a3101ae7e2c": {"__data__": {"text": "vm.Module is recommended in order to take advantage of error tracking, and to avoid issues with namespaces that contain then function exports.\nReturns: <Function>\nCompiles the given code into the provided context (if no context is supplied, the current context is used), and returns it wrapped inside a function with the given params.\n\nvm.createContext([contextObject[, options]])#\nHistory\ncontextObject <Object>\noptions <Object>\nname <string> Human-readable name of the newly created context. Default: 'VM Context i', where i is an ascending numerical index of the created context.\norigin <string> Origin corresponding to the newly created context for display purposes. The origin should be formatted like a URL, but with only the scheme, host, and port (if necessary), like the value of the url.origin property of a URL object. Most notably, this string should omit the trailing slash, as that denotes a path. Default: ''.\ncodeGeneration <Object>\nstrings <boolean> If set to false any calls to eval or function constructors (Function, GeneratorFunction, etc) will throw an EvalError. Default: true.\nwasm <boolean> If set to false any attempt to compile a WebAssembly module will throw a WebAssembly.CompileError. Default: true.\nmicrotaskMode <string> If set to afterEvaluate, microtasks (tasks scheduled through Promises and async functions) will be run immediately after a script has run through script.runInContext(). They are included in the timeout and breakOnSigint scopes in that case.\nReturns: <Object> contextified object.\nIf given a contextObject, the vm.createContext() method will prepare that object so that it can be used in calls to vm.runInContext() or script.runInContext(). Inside such scripts, the contextObject will be the global object, retaining all of its existing properties but also having the built-in objects and functions any standard global object has. Outside of scripts run by the vm module, global variables will remain unchanged.\n\nconst vm = require('node:vm');\n\nglobal.globalVar = 3;\n\nconst context = { globalVar: 1 };\nvm.createContext(context);\n\nvm.runInContext('globalVar *= 2;', context);\n\nconsole.log(context);\n// Prints: { globalVar: 2 }\n\nconsole.log(global.globalVar);\n// Prints: 3\nIf contextObject is omitted (or passed explicitly as undefined), a new, empty contextified object will be returned.\n\nThe vm.createContext() method is primarily useful for creating a single context that can be used to run multiple scripts. For instance, if emulating a web browser, the method can be used to create a single context representing a window's global object, then run all <script> tags together within that context.\n\nThe provided name and origin of the context are made visible through the Inspector API.\n\nvm.isContext(object)#\nAdded in: v0.11.7\nobject <Object>\nReturns: <boolean>\nReturns true if the given object object has been contextified using vm.createContext().\n\nvm.measureMemory([options])#\nAdded in: v13.10.0\nStability: 1 - Experimental\nMeasure the memory known to V8 and used by all contexts known to the current V8 isolate, or the main context.\n\noptions <Object> Optional.\nmode <string> Either 'summary' or 'detailed'. In summary mode, only the memory measured for the main context will be returned. In detailed mode, the memory measured for all contexts known to the current V8 isolate will be returned. Default: 'summary'\nexecution <string> Either 'default' or 'eager'. With default execution, the promise will not resolve until after the next scheduled garbage collection starts, which may take a while (or never if the program exits before the next GC). With eager execution, the GC will be started right away to measure the memory. Default: 'default'\nReturns: <Promise> If the memory is successfully measured the promise will resolve with an object containing information about the memory usage.\nThe format of the object that the returned Promise may resolve with is specific to the V8 engine and may change from one version of", "doc_id": "49dec80d-8f99-49a6-9421-7a3101ae7e2c", "embedding": null, "doc_hash": "e035133f05651fdd61e140237fd42915575ab9d3a868ffe98f3910994dc32012", "extra_info": null, "node_info": {"start": 2767061, "end": 2771038}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "098d021b-24d0-40c0-9b79-bd04652bba4f", "3": "a6d8a47e-8a5c-44a2-9b6d-4b981077bfb8"}}, "__type__": "1"}, "a6d8a47e-8a5c-44a2-9b6d-4b981077bfb8": {"__data__": {"text": "In summary mode, only the memory measured for the main context will be returned. In detailed mode, the memory measured for all contexts known to the current V8 isolate will be returned. Default: 'summary'\nexecution <string> Either 'default' or 'eager'. With default execution, the promise will not resolve until after the next scheduled garbage collection starts, which may take a while (or never if the program exits before the next GC). With eager execution, the GC will be started right away to measure the memory. Default: 'default'\nReturns: <Promise> If the memory is successfully measured the promise will resolve with an object containing information about the memory usage.\nThe format of the object that the returned Promise may resolve with is specific to the V8 engine and may change from one version of V8 to the next.\n\nThe returned result is different from the statistics returned by v8.getHeapSpaceStatistics() in that vm.measureMemory() measure the memory reachable by each V8 specific contexts in the current instance of the V8 engine, while the result of v8.getHeapSpaceStatistics() measure the memory occupied by each heap space in the current V8 instance.\n\nconst vm = require('node:vm');\n// Measure the memory used by the main context.\nvm.measureMemory({ mode: 'summary' })\n  // This is the same as vm.measureMemory()\n  .then((result) => {\n    // The current format is:\n    // {\n    //   total: {\n    //      jsMemoryEstimate: 2418479, jsMemoryRange: [ 2418479, 2745799 ]\n    //    }\n    // }\n    console.log(result);\n  });\n\nconst context = vm.createContext({ a: 1 });\nvm.measureMemory({ mode: 'detailed', execution: 'eager' })\n  .then((result) => {\n    // Reference the context here so that it won't be GC'ed\n    // until the measurement is complete.\n    console.log(context.a);\n    // {\n    //   total: {\n    //     jsMemoryEstimate: 2574732,\n    //     jsMemoryRange: [ 2574732, 2904372 ]\n    //   },\n    //   current: {\n    //     jsMemoryEstimate: 2438996,\n    //     jsMemoryRange: [ 2438996, 2768636 ]\n    //   },\n    //   other: [\n    //     {\n    //       jsMemoryEstimate: 135736,\n    //       jsMemoryRange: [ 135736, 465376 ]\n    //     }\n    //   ]\n    // }\n    console.log(result);\n  });\nvm.runInContext(code, contextifiedObject[, options])#\nHistory\ncode <string> The JavaScript code to compile and run.\ncontextifiedObject <Object> The contextified object that will be used as the global when the code is compiled and run.\noptions <Object> | <string>\nfilename <string> Specifies the filename used in stack traces produced by this script. Default: 'evalmachine.<anonymous>'.\nlineOffset <number> Specifies the line number offset that is displayed in stack traces produced by this script. Default: 0.\ncolumnOffset <number> Specifies the first-line column number offset that is displayed in stack traces produced by this script. Default: 0.\ndisplayErrors <boolean> When true, if an Error occurs while compiling the code, the line of code causing the error is attached to the stack trace. Default: true.\ntimeout <integer> Specifies the number of milliseconds to execute code before terminating execution. If execution is terminated, an Error will be thrown. This value must be a strictly positive integer.\nbreakOnSigint <boolean> If true, receiving SIGINT (Ctrl+C) will terminate execution and", "doc_id": "a6d8a47e-8a5c-44a2-9b6d-4b981077bfb8", "embedding": null, "doc_hash": "d9fa0a1add365e92860f0e6dc7ee170e7a40dd4d3cf8d638720fba567b6794ca", "extra_info": null, "node_info": {"start": 2771047, "end": 2774367}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "49dec80d-8f99-49a6-9421-7a3101ae7e2c", "3": "ac6dcd45-acfd-46b0-9fee-31a97ba2955f"}}, "__type__": "1"}, "ac6dcd45-acfd-46b0-9fee-31a97ba2955f": {"__data__": {"text": "by this script. Default: 'evalmachine.<anonymous>'.\nlineOffset <number> Specifies the line number offset that is displayed in stack traces produced by this script. Default: 0.\ncolumnOffset <number> Specifies the first-line column number offset that is displayed in stack traces produced by this script. Default: 0.\ndisplayErrors <boolean> When true, if an Error occurs while compiling the code, the line of code causing the error is attached to the stack trace. Default: true.\ntimeout <integer> Specifies the number of milliseconds to execute code before terminating execution. If execution is terminated, an Error will be thrown. This value must be a strictly positive integer.\nbreakOnSigint <boolean> If true, receiving SIGINT (Ctrl+C) will terminate execution and throw an Error. Existing handlers for the event that have been attached via process.on('SIGINT') are disabled during script execution, but continue to work after that. Default: false.\ncachedData <Buffer> | <TypedArray> | <DataView> Provides an optional Buffer or TypedArray, or DataView with V8's code cache data for the supplied source.\nimportModuleDynamically <Function> Called during evaluation of this module when import() is called. If this option is not specified, calls to import() will reject with ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING. This option is part of the experimental modules API. We do not recommend using it in a production environment.\nspecifier <string> specifier passed to import()\nscript <vm.Script>\nimportAssertions <Object> The \"assert\" value passed to the optionsExpression optional parameter, or an empty object if no value was provided.\nReturns: <Module Namespace Object> | <vm.Module> Returning a vm.Module is recommended in order to take advantage of error tracking, and to avoid issues with namespaces that contain then function exports.\nReturns: <any> the result of the very last statement executed in the script.\nThe vm.runInContext() method compiles code, runs it within the context of the contextifiedObject, then returns the result. Running code does not have access to the local scope. The contextifiedObject object must have been previously contextified using the vm.createContext() method.\n\nIf options is a string, then it specifies the filename.\n\nThe following example compiles and executes different scripts using a single contextified object:\n\nconst vm = require('node:vm');\n\nconst contextObject = { globalVar: 1 };\nvm.createContext(contextObject);\n\nfor (let i = 0; i < 10; ++i) {\n  vm.runInContext('globalVar *= 2;', contextObject);\n}\nconsole.log(contextObject);\n// Prints: { globalVar: 1024 }\nvm.runInNewContext(code[, contextObject[, options]])#\nHistory\ncode <string> The JavaScript code to compile and run.\ncontextObject <Object> An object that will be contextified. If undefined, a new object will be created.\noptions <Object> | <string>\nfilename <string> Specifies the filename used in stack traces produced by this script. Default: 'evalmachine.<anonymous>'.\nlineOffset <number> Specifies the line number offset that is displayed in stack traces produced by this script. Default: 0.\ncolumnOffset <number> Specifies the first-line column number offset that is displayed in stack traces produced by this script. Default: 0.\ndisplayErrors <boolean> When true, if an Error occurs while compiling the code, the line of code causing the error is attached to the stack trace. Default: true.\ntimeout <integer> Specifies the number of milliseconds to execute code before terminating execution. If execution is terminated, an Error will be thrown. This value must be a strictly positive integer.\nbreakOnSigint <boolean> If true, receiving SIGINT (Ctrl+C) will terminate execution and throw an Error. Existing handlers for the event that have been attached via process.on('SIGINT') are disabled during script execution, but continue to work after that. Default: false.\ncontextName <string> Human-readable name of the newly created context. Default: 'VM Context i', where", "doc_id": "ac6dcd45-acfd-46b0-9fee-31a97ba2955f", "embedding": null, "doc_hash": "a7e8945983062da6269914850c6431924893ecefbaa08bd6cf034f9e1645fd03", "extra_info": null, "node_info": {"start": 2774392, "end": 2778368}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a6d8a47e-8a5c-44a2-9b6d-4b981077bfb8", "3": "05344775-dac4-4b89-aac3-e73fcbeb5e90"}}, "__type__": "1"}, "05344775-dac4-4b89-aac3-e73fcbeb5e90": {"__data__": {"text": "this script. Default: 0.\ndisplayErrors <boolean> When true, if an Error occurs while compiling the code, the line of code causing the error is attached to the stack trace. Default: true.\ntimeout <integer> Specifies the number of milliseconds to execute code before terminating execution. If execution is terminated, an Error will be thrown. This value must be a strictly positive integer.\nbreakOnSigint <boolean> If true, receiving SIGINT (Ctrl+C) will terminate execution and throw an Error. Existing handlers for the event that have been attached via process.on('SIGINT') are disabled during script execution, but continue to work after that. Default: false.\ncontextName <string> Human-readable name of the newly created context. Default: 'VM Context i', where i is an ascending numerical index of the created context.\ncontextOrigin <string> Origin corresponding to the newly created context for display purposes. The origin should be formatted like a URL, but with only the scheme, host, and port (if necessary), like the value of the url.origin property of a URL object. Most notably, this string should omit the trailing slash, as that denotes a path. Default: ''.\ncontextCodeGeneration <Object>\nstrings <boolean> If set to false any calls to eval or function constructors (Function, GeneratorFunction, etc) will throw an EvalError. Default: true.\nwasm <boolean> If set to false any attempt to compile a WebAssembly module will throw a WebAssembly.CompileError. Default: true.\ncachedData <Buffer> | <TypedArray> | <DataView> Provides an optional Buffer or TypedArray, or DataView with V8's code cache data for the supplied source.\nimportModuleDynamically <Function> Called during evaluation of this module when import() is called. If this option is not specified, calls to import() will reject with ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING. This option is part of the experimental modules API. We do not recommend using it in a production environment.\nspecifier <string> specifier passed to import()\nscript <vm.Script>\nimportAssertions <Object> The \"assert\" value passed to the optionsExpression optional parameter, or an empty object if no value was provided.\nReturns: <Module Namespace Object> | <vm.Module> Returning a vm.Module is recommended in order to take advantage of error tracking, and to avoid issues with namespaces that contain then function exports.\nmicrotaskMode <string> If set to afterEvaluate, microtasks (tasks scheduled through Promises and async functions) will be run immediately after the script has run. They are included in the timeout and breakOnSigint scopes in that case.\nReturns: <any> the result of the very last statement executed in the script.\nThe vm.runInNewContext() first contextifies the given contextObject (or creates a new contextObject if passed as undefined), compiles the code, runs it within the created context, then returns the result. Running code does not have access to the local scope.\n\nIf options is a string, then it specifies the filename.\n\nThe following example compiles and executes code that increments a global variable and sets a new one. These globals are contained in the contextObject.\n\nconst vm = require('node:vm');\n\nconst contextObject = {\n  animal: 'cat',\n  count: 2,\n};\n\nvm.runInNewContext('count += 1; name = \"kitty\"', contextObject);\nconsole.log(contextObject);\n// Prints: { animal: 'cat', count: 3, name: 'kitty' }\nvm.runInThisContext(code[, options])#\nHistory\ncode <string> The JavaScript code to compile and run.\noptions <Object> | <string>\nfilename <string> Specifies the filename used in stack traces produced by this script. Default: 'evalmachine.<anonymous>'.\nlineOffset <number> Specifies the line number offset that is displayed in stack traces produced by this script. Default: 0.\ncolumnOffset <number> Specifies the first-line column number offset that is displayed in stack traces produced by this script. Default: 0.\ndisplayErrors", "doc_id": "05344775-dac4-4b89-aac3-e73fcbeb5e90", "embedding": null, "doc_hash": "31a6a73ff1cfd35ec42608260d207b636859d274887f18097c1856e8f4b9c28c", "extra_info": null, "node_info": {"start": 2778375, "end": 2782290}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "ac6dcd45-acfd-46b0-9fee-31a97ba2955f", "3": "5a4bcb56-6f65-4840-a3ef-799c5730e35d"}}, "__type__": "1"}, "5a4bcb56-6f65-4840-a3ef-799c5730e35d": {"__data__": {"text": " count: 2,\n};\n\nvm.runInNewContext('count += 1; name = \"kitty\"', contextObject);\nconsole.log(contextObject);\n// Prints: { animal: 'cat', count: 3, name: 'kitty' }\nvm.runInThisContext(code[, options])#\nHistory\ncode <string> The JavaScript code to compile and run.\noptions <Object> | <string>\nfilename <string> Specifies the filename used in stack traces produced by this script. Default: 'evalmachine.<anonymous>'.\nlineOffset <number> Specifies the line number offset that is displayed in stack traces produced by this script. Default: 0.\ncolumnOffset <number> Specifies the first-line column number offset that is displayed in stack traces produced by this script. Default: 0.\ndisplayErrors <boolean> When true, if an Error occurs while compiling the code, the line of code causing the error is attached to the stack trace. Default: true.\ntimeout <integer> Specifies the number of milliseconds to execute code before terminating execution. If execution is terminated, an Error will be thrown. This value must be a strictly positive integer.\nbreakOnSigint <boolean> If true, receiving SIGINT (Ctrl+C) will terminate execution and throw an Error. Existing handlers for the event that have been attached via process.on('SIGINT') are disabled during script execution, but continue to work after that. Default: false.\ncachedData <Buffer> | <TypedArray> | <DataView> Provides an optional Buffer or TypedArray, or DataView with V8's code cache data for the supplied source.\nimportModuleDynamically <Function> Called during evaluation of this module when import() is called. If this option is not specified, calls to import() will reject with ERR_VM_DYNAMIC_IMPORT_CALLBACK_MISSING. This option is part of the experimental modules API. We do not recommend using it in a production environment.\nspecifier <string> specifier passed to import()\nscript <vm.Script>\nimportAssertions <Object> The \"assert\" value passed to the optionsExpression optional parameter, or an empty object if no value was provided.\nReturns: <Module Namespace Object> | <vm.Module> Returning a vm.Module is recommended in order to take advantage of error tracking, and to avoid issues with namespaces that contain then function exports.\nReturns: <any> the result of the very last statement executed in the script.\nvm.runInThisContext() compiles code, runs it within the context of the current global and returns the result. Running code does not have access to local scope, but does have access to the current global object.\n\nIf options is a string, then it specifies the filename.\n\nThe following example illustrates using both vm.runInThisContext() and the JavaScript eval() function to run the same code:\n\nconst vm = require('node:vm');\nlet localVar = 'initial value';\n\nconst vmResult = vm.runInThisContext('localVar = \"vm\";');\nconsole.log(`vmResult: '${vmResult}', localVar: '${localVar}'`);\n// Prints: vmResult: 'vm', localVar: 'initial value'\n\nconst evalResult = eval('localVar = \"eval\";');\nconsole.log(`evalResult: '${evalResult}', localVar: '${localVar}'`);\n// Prints: evalResult: 'eval', localVar: 'eval'\nBecause vm.runInThisContext() does not have access to the local scope, localVar is unchanged. In contrast, eval() does have access to the local scope, so the value localVar is changed. In this way vm.runInThisContext() is much like an indirect eval() call, e.g. (0,eval)('code').\n\nExample: Running an HTTP server within a VM#\nWhen using either script.runInThisContext() or vm.runInThisContext(), the code is executed within the current V8 global context. The code passed to this VM context will have its own isolated scope.\n\nIn order to run a simple web server using the node:http module the code passed to the context must either call require('node:http') on its own, or have a reference to the", "doc_id": "5a4bcb56-6f65-4840-a3ef-799c5730e35d", "embedding": null, "doc_hash": "f1840f03626b64aad48a5f5b9e0fd6f7c8ddb0b101ae3a5200e546fd47627c99", "extra_info": null, "node_info": {"start": 2782336, "end": 2786105}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "05344775-dac4-4b89-aac3-e73fcbeb5e90", "3": "f38e8cd4-2863-432f-a518-e3a7c3afd82e"}}, "__type__": "1"}, "f38e8cd4-2863-432f-a518-e3a7c3afd82e": {"__data__": {"text": "evalResult: 'eval', localVar: 'eval'\nBecause vm.runInThisContext() does not have access to the local scope, localVar is unchanged. In contrast, eval() does have access to the local scope, so the value localVar is changed. In this way vm.runInThisContext() is much like an indirect eval() call, e.g. (0,eval)('code').\n\nExample: Running an HTTP server within a VM#\nWhen using either script.runInThisContext() or vm.runInThisContext(), the code is executed within the current V8 global context. The code passed to this VM context will have its own isolated scope.\n\nIn order to run a simple web server using the node:http module the code passed to the context must either call require('node:http') on its own, or have a reference to the node:http module passed to it. For instance:\n\n'use strict';\nconst vm = require('node:vm');\n\nconst code = `\n((require) => {\n  const http = require('node:http');\n\n  http.createServer((request, response) => {\n    response.writeHead(200, { 'Content-Type': 'text/plain' });\n    response.end('Hello World\\\\n');\n  }).listen(8124);\n\n  console.log('Server running at http://127.0.0.1:8124/');\n})`;\n\nvm.runInThisContext(code)(require);\nThe require() in the above case shares the state with the context it is passed from. This may introduce risks when untrusted code is executed, e.g. altering objects in the context in unwanted ways.\n\nWhat does it mean to \"contextify\" an object?#\nAll JavaScript executed within Node.js runs within the scope of a \"context\". According to the V8 Embedder's Guide:\n\nIn V8, a context is an execution environment that allows separate, unrelated, JavaScript applications to run in a single instance of V8. You must explicitly specify the context in which you want any JavaScript code to be run.\n\nWhen the method vm.createContext() is called, the contextObject argument (or a newly-created object if contextObject is undefined) is associated internally with a new instance of a V8 Context. This V8 Context provides the code run using the node:vm module's methods with an isolated global environment within which it can operate. The process of creating the V8 Context and associating it with the contextObject is what this document refers to as \"contextifying\" the object.\n\nTimeout interactions with asynchronous tasks and Promises#\nPromises and async functions can schedule tasks run by the JavaScript engine asynchronously. By default, these tasks are run after all JavaScript functions on the current stack are done executing. This allows escaping the functionality of the timeout and breakOnSigint options.\n\nFor example, the following code executed by vm.runInNewContext() with a timeout of 5 milliseconds schedules an infinite loop to run after a promise resolves. The scheduled loop is never interrupted by the timeout:\n\nconst vm = require('node:vm');\n\nfunction loop() {\n  console.log('entering loop');\n  while (1) console.log(Date.now());\n}\n\nvm.runInNewContext(\n  'Promise.resolve().then(() => loop());',\n  { loop, console },\n  { timeout: 5 },\n);\n// This is printed *before* 'entering loop' (!)\nconsole.log('done executing');\nThis can be addressed by passing microtaskMode: 'afterEvaluate' to the code that creates the Context:\n\nconst vm = require('node:vm');\n\nfunction loop() {\n  while (1) console.log(Date.now());\n}\n\nvm.runInNewContext(\n  'Promise.resolve().then(() => loop());',\n  { loop, console },\n  { timeout: 5, microtaskMode: 'afterEvaluate' },\n);\nIn this case, the microtask scheduled through promise.then() will be run before returning from vm.runInNewContext(), and will be interrupted by the timeout functionality. This applies only to code running in a vm.Context, so", "doc_id": "f38e8cd4-2863-432f-a518-e3a7c3afd82e", "embedding": null, "doc_hash": "605bde969b54675d12c33a714c0ed112f502fe1a4567ee0360b286d54d2a2d34", "extra_info": null, "node_info": {"start": 2786092, "end": 2789728}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5a4bcb56-6f65-4840-a3ef-799c5730e35d", "3": "bd1fb1fd-9dfc-4758-870b-fd0dfb1a3362"}}, "__type__": "1"}, "bd1fb1fd-9dfc-4758-870b-fd0dfb1a3362": {"__data__": {"text": "This is printed *before* 'entering loop' (!)\nconsole.log('done executing');\nThis can be addressed by passing microtaskMode: 'afterEvaluate' to the code that creates the Context:\n\nconst vm = require('node:vm');\n\nfunction loop() {\n  while (1) console.log(Date.now());\n}\n\nvm.runInNewContext(\n  'Promise.resolve().then(() => loop());',\n  { loop, console },\n  { timeout: 5, microtaskMode: 'afterEvaluate' },\n);\nIn this case, the microtask scheduled through promise.then() will be run before returning from vm.runInNewContext(), and will be interrupted by the timeout functionality. This applies only to code running in a vm.Context, so e.g. vm.runInThisContext() does not take this option.\n\nPromise callbacks are entered into the microtask queue of the context in which they were created. For example, if () => loop() is replaced with just loop in the above example, then loop will be pushed into the global microtask queue, because it is a function from the outer (main) context, and thus will also be able to escape the timeout.\n\nIf asynchronous scheduling functions such as process.nextTick(), queueMicrotask(), setTimeout(), setImmediate(), etc. are made available inside a vm.Context, functions passed to them will be added to global queues, which are shared by all contexts. Therefore, callbacks passed to those functions are not controllable through the timeout either.\n\nWebAssembly System Interface (WASI)#\nStability: 1 - Experimental\nSource Code: lib/wasi.js\n\nThe WASI API provides an implementation of the WebAssembly System Interface specification. WASI gives sandboxed WebAssembly applications access to the underlying operating system via a collection of POSIX-like functions.\n\nimport { readFile } from 'node:fs/promises';\nimport { WASI } from 'wasi';\nimport { argv, env } from 'node:process';\n\nconst wasi = new WASI({\n  args: argv,\n  env,\n  preopens: {\n    '/sandbox': '/some/real/path/that/wasm/can/access',\n  },\n});\n\n// Some WASI binaries require:\n//   const importObject = { wasi_unstable: wasi.wasiImport };\nconst importObject = { wasi_snapshot_preview1: wasi.wasiImport };\n\nconst wasm = await WebAssembly.compile(\n  await readFile(new URL('./demo.wasm', import.meta.url)),\n);\nconst instance = await WebAssembly.instantiate(wasm, importObject);\n\nwasi.start(instance);\nTo run the above example, create a new WebAssembly text format file named demo.wat:\n\n(module\n    ;; Import the required fd_write WASI function which will write the given io vectors to stdout\n    ;; The function signature for fd_write is:\n    ;; (File Descriptor, *iovs, iovs_len, nwritten) -> Returns number of bytes written\n    (import \"wasi_snapshot_preview1\" \"fd_write\" (func $fd_write (param i32 i32 i32 i32) (result i32)))\n\n    (memory 1)\n    (export \"memory\" (memory 0))\n\n    ;; Write 'hello world\\n' to memory at an offset of 8 bytes\n    ;; Note the trailing newline which is required for the text to appear\n    (data (i32.const 8) \"hello world\\n\")\n\n    (func $main (export \"_start\")\n        ;; Creating a new io vector within linear memory\n        (i32.store (i32.const 0) (i32.const 8))  ;; iov.iov_base - This is a pointer to the start of the 'hello world\\n' string\n        (i32.store (i32.const 4) (i32.const 12))  ;; iov.iov_len - The length of the 'hello", "doc_id": "bd1fb1fd-9dfc-4758-870b-fd0dfb1a3362", "embedding": null, "doc_hash": "e9073366b793b4b9c19bc066ca39d475b19cdbad64c3f3df7332ba22894cfcd2", "extra_info": null, "node_info": {"start": 2789800, "end": 2793048}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f38e8cd4-2863-432f-a518-e3a7c3afd82e", "3": "e4574074-6845-45ed-8a80-25f6cfc1bd48"}}, "__type__": "1"}, "e4574074-6845-45ed-8a80-25f6cfc1bd48": {"__data__": {"text": "   (export \"memory\" (memory 0))\n\n    ;; Write 'hello world\\n' to memory at an offset of 8 bytes\n    ;; Note the trailing newline which is required for the text to appear\n    (data (i32.const 8) \"hello world\\n\")\n\n    (func $main (export \"_start\")\n        ;; Creating a new io vector within linear memory\n        (i32.store (i32.const 0) (i32.const 8))  ;; iov.iov_base - This is a pointer to the start of the 'hello world\\n' string\n        (i32.store (i32.const 4) (i32.const 12))  ;; iov.iov_len - The length of the 'hello world\\n' string\n\n        (call $fd_write\n            (i32.const 1) ;; file_descriptor - 1 for stdout\n            (i32.const 0) ;; *iovs - The pointer to the iov array, which is stored at memory location 0\n            (i32.const 1) ;; iovs_len - We're printing 1 string stored in an iov - so one.\n            (i32.const 20) ;; nwritten - A place in memory to store the number of bytes written\n        )\n        drop ;; Discard the number of bytes written from the top of the stack\n    )\n)\nUse wabt to compile .wat to .wasm\n\n$ wat2wasm demo.wat\nThe --experimental-wasi-unstable-preview1 CLI argument is needed for this example to run.\n\nClass: WASI#\nAdded in: v13.3.0, v12.16.0\nThe WASI class provides the WASI system call API and additional convenience methods for working with WASI-based applications. Each WASI instance represents a distinct sandbox environment. For security purposes, each WASI instance must have its command-line arguments, environment variables, and sandbox directory structure configured explicitly.\n\nnew WASI([options])#\nAdded in: v13.3.0, v12.16.0\noptions <Object>\nargs <Array> An array of strings that the WebAssembly application will see as command-line arguments. The first argument is the virtual path to the WASI command itself. Default: [].\nenv <Object> An object similar to process.env that the WebAssembly application will see as its environment. Default: {}.\npreopens <Object> This object represents the WebAssembly application's sandbox directory structure. The string keys of preopens are treated as directories within the sandbox. The corresponding values in preopens are the real paths to those directories on the host machine.\nreturnOnExit <boolean> By default, WASI applications terminate the Node.js process via the __wasi_proc_exit() function. Setting this option to true causes wasi.start() to return the exit code rather than terminate the process. Default: false.\nstdin <integer> The file descriptor used as standard input in the WebAssembly application. Default: 0.\nstdout <integer> The file descriptor used as standard output in the WebAssembly application. Default: 1.\nstderr <integer> The file descriptor used as standard error in the WebAssembly application. Default: 2.\nwasi.start(instance)#\nAdded in: v13.3.0, v12.16.0\ninstance <WebAssembly.Instance>\nAttempt to begin execution of instance as a WASI command by invoking its _start() export. If instance does not contain a _start() export, or if instance contains an _initialize() export, then an exception is thrown.\n\nstart() requires that instance exports a WebAssembly.Memory named memory. If instance does not have a memory export an exception is thrown.\n\nIf start() is called more than once, an exception is thrown.\n\nwasi.initialize(instance)#\nAdded in: v14.6.0,", "doc_id": "e4574074-6845-45ed-8a80-25f6cfc1bd48", "embedding": null, "doc_hash": "b04753f2bcb1c1715bdf1b559dddf197a972c6c7f76c1d48b90ae7c0310476b5", "extra_info": null, "node_info": {"start": 2793196, "end": 2796485}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "bd1fb1fd-9dfc-4758-870b-fd0dfb1a3362", "3": "41d1c388-96fa-4bfe-b13d-09d4a6336e19"}}, "__type__": "1"}, "41d1c388-96fa-4bfe-b13d-09d4a6336e19": {"__data__": {"text": "application. Default: 1.\nstderr <integer> The file descriptor used as standard error in the WebAssembly application. Default: 2.\nwasi.start(instance)#\nAdded in: v13.3.0, v12.16.0\ninstance <WebAssembly.Instance>\nAttempt to begin execution of instance as a WASI command by invoking its _start() export. If instance does not contain a _start() export, or if instance contains an _initialize() export, then an exception is thrown.\n\nstart() requires that instance exports a WebAssembly.Memory named memory. If instance does not have a memory export an exception is thrown.\n\nIf start() is called more than once, an exception is thrown.\n\nwasi.initialize(instance)#\nAdded in: v14.6.0, v12.19.0\ninstance <WebAssembly.Instance>\nAttempt to initialize instance as a WASI reactor by invoking its _initialize() export, if it is present. If instance contains a _start() export, then an exception is thrown.\n\ninitialize() requires that instance exports a WebAssembly.Memory named memory. If instance does not have a memory export an exception is thrown.\n\nIf initialize() is called more than once, an exception is thrown.\n\nwasi.wasiImport#\nAdded in: v13.3.0, v12.16.0\n<Object>\nwasiImport is an object that implements the WASI system call API. This object should be passed as the wasi_snapshot_preview1 import during the instantiation of a WebAssembly.Instance.\n\nWeb Crypto API#\nHistory\nStability: 1 - Experimental\nNode.js provides an implementation of the standard Web Crypto API.\n\nUse require('node:crypto').webcrypto to access this module.\n\nconst { subtle } = require('node:crypto').webcrypto;\n\n(async function() {\n\n  const key = await subtle.generateKey({\n    name: 'HMAC',\n    hash: 'SHA-256',\n    length: 256,\n  }, true, ['sign', 'verify']);\n\n  const enc = new TextEncoder();\n  const message = enc.encode('I love cupcakes');\n\n  const digest = await subtle.sign({\n    name: 'HMAC',\n  }, key, message);\n\n})();\nExamples#\nGenerating keys#\nThe <SubtleCrypto> class can be used to generate symmetric (secret) keys or asymmetric key pairs (public key and private key).\n\nAES keys#\nconst { subtle } = require('node:crypto').webcrypto;\n\nasync function generateAesKey(length = 256) {\n  const key = await subtle.generateKey({\n    name: 'AES-CBC',\n    length,\n  }, true, ['encrypt', 'decrypt']);\n\n  return key;\n}\nECDSA key pairs#\nconst { subtle } = require('node:crypto').webcrypto;\n\nasync function generateEcKey(namedCurve = 'P-521') {\n  const {\n    publicKey,\n    privateKey,\n  } = await subtle.generateKey({\n    name: 'ECDSA',\n    namedCurve,\n  }, true, ['sign', 'verify']);\n\n  return { publicKey, privateKey };\n}\nEd25519/Ed448/X25519/X448 key pairs#\nStability: 1 - Experimental\nconst { subtle } = require('node:crypto').webcrypto;\n\nasync function generateEd25519Key() {\n  return subtle.generateKey({\n    name: 'Ed25519',\n  }, true, ['sign', 'verify']);\n}\n\nasync function generateX25519Key() {\n  return subtle.generateKey({\n    name: 'X25519',\n  }, true, ['deriveKey']);\n}\nHMAC keys#\nconst { subtle } = require('node:crypto').webcrypto;\n\nasync function generateHmacKey(hash = 'SHA-256')", "doc_id": "41d1c388-96fa-4bfe-b13d-09d4a6336e19", "embedding": null, "doc_hash": "12d42136902084495c4163e341623fc3ec1918293161b182fac3632ed0ca2eda", "extra_info": null, "node_info": {"start": 2796301, "end": 2799365}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "e4574074-6845-45ed-8a80-25f6cfc1bd48", "3": "854cb19b-7eb0-47da-9a83-9bf4271caafb"}}, "__type__": "1"}, "854cb19b-7eb0-47da-9a83-9bf4271caafb": {"__data__": {"text": " return { publicKey, privateKey };\n}\nEd25519/Ed448/X25519/X448 key pairs#\nStability: 1 - Experimental\nconst { subtle } = require('node:crypto').webcrypto;\n\nasync function generateEd25519Key() {\n  return subtle.generateKey({\n    name: 'Ed25519',\n  }, true, ['sign', 'verify']);\n}\n\nasync function generateX25519Key() {\n  return subtle.generateKey({\n    name: 'X25519',\n  }, true, ['deriveKey']);\n}\nHMAC keys#\nconst { subtle } = require('node:crypto').webcrypto;\n\nasync function generateHmacKey(hash = 'SHA-256') {\n  const key = await subtle.generateKey({\n    name: 'HMAC',\n    hash,\n  }, true, ['sign', 'verify']);\n\n  return key;\n}\nRSA key pairs#\nconst { subtle } = require('node:crypto').webcrypto;\nconst publicExponent = new Uint8Array([1, 0, 1]);\n\nasync function generateRsaKey(modulusLength = 2048, hash = 'SHA-256') {\n  const {\n    publicKey,\n    privateKey,\n  } = await subtle.generateKey({\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength,\n    publicExponent,\n    hash,\n  }, true, ['sign', 'verify']);\n\n  return { publicKey, privateKey };\n}\nEncryption and decryption#\nconst crypto = require('node:crypto').webcrypto;\n\nasync function aesEncrypt(plaintext) {\n  const ec = new TextEncoder();\n  const key = await generateAesKey();\n  const iv = crypto.getRandomValues(new Uint8Array(16));\n\n  const ciphertext = await crypto.subtle.encrypt({\n    name: 'AES-CBC',\n    iv,\n  }, key, ec.encode(plaintext));\n\n  return {\n    key,\n    iv,\n    ciphertext,\n  };\n}\n\nasync function aesDecrypt(ciphertext, key, iv) {\n  const dec = new TextDecoder();\n  const plaintext = await crypto.subtle.decrypt({\n    name: 'AES-CBC',\n    iv,\n  }, key, ciphertext);\n\n  return dec.decode(plaintext);\n}\nExporting and importing keys#\nconst { subtle } = require('node:crypto').webcrypto;\n\nasync function generateAndExportHmacKey(format = 'jwk', hash = 'SHA-512') {\n  const key = await subtle.generateKey({\n    name: 'HMAC',\n    hash,\n  }, true, ['sign', 'verify']);\n\n  return subtle.exportKey(format, key);\n}\n\nasync function importHmacKey(keyData, format = 'jwk', hash = 'SHA-512') {\n  const key = await subtle.importKey(format, keyData, {\n    name: 'HMAC',\n    hash,\n  }, true, ['sign', 'verify']);\n\n  return key;\n}\nWrapping and unwrapping keys#\nconst { subtle } = require('node:crypto').webcrypto;\n\nasync function generateAndWrapHmacKey(format = 'jwk', hash = 'SHA-512') {\n  const [\n    key,\n    wrappingKey,\n  ] = await Promise.all([\n    subtle.generateKey({\n      name: 'HMAC', hash,\n    }, true, ['sign', 'verify']),\n    subtle.generateKey({\n      name: 'AES-KW',\n      length: 256,\n    }, true, ['wrapKey',", "doc_id": "854cb19b-7eb0-47da-9a83-9bf4271caafb", "embedding": null, "doc_hash": "9c03d35923ad7b9cccac09e6ff5d79685826f2769f837b029faf364515b7327d", "extra_info": null, "node_info": {"start": 2799503, "end": 2802085}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "41d1c388-96fa-4bfe-b13d-09d4a6336e19", "3": "2c2152d5-7ed2-404c-9785-f400ad6cbf7a"}}, "__type__": "1"}, "2c2152d5-7ed2-404c-9785-f400ad6cbf7a": {"__data__": {"text": " hash,\n  }, true, ['sign', 'verify']);\n\n  return key;\n}\nWrapping and unwrapping keys#\nconst { subtle } = require('node:crypto').webcrypto;\n\nasync function generateAndWrapHmacKey(format = 'jwk', hash = 'SHA-512') {\n  const [\n    key,\n    wrappingKey,\n  ] = await Promise.all([\n    subtle.generateKey({\n      name: 'HMAC', hash,\n    }, true, ['sign', 'verify']),\n    subtle.generateKey({\n      name: 'AES-KW',\n      length: 256,\n    }, true, ['wrapKey', 'unwrapKey']),\n  ]);\n\n  const wrappedKey = await subtle.wrapKey(format, key, wrappingKey, 'AES-KW');\n\n  return { wrappedKey, wrappingKey };\n}\n\nasync function unwrapHmacKey(\n  wrappedKey,\n  wrappingKey,\n  format = 'jwk',\n  hash = 'SHA-512') {\n\n  const key = await subtle.unwrapKey(\n    format,\n    wrappedKey,\n    wrappingKey,\n    'AES-KW',\n    { name: 'HMAC', hash },\n    true,\n    ['sign', 'verify']);\n\n  return key;\n}\nSign and verify#\nconst { subtle } = require('node:crypto').webcrypto;\n\nasync function sign(key, data) {\n  const ec = new TextEncoder();\n  const signature =\n    await subtle.sign('RSASSA-PKCS1-v1_5', key, ec.encode(data));\n  return signature;\n}\n\nasync function verify(key, signature, data) {\n  const ec = new TextEncoder();\n  const verified =\n    await subtle.verify(\n      'RSASSA-PKCS1-v1_5',\n      key,\n      signature,\n      ec.encode(data));\n  return verified;\n}\nDeriving bits and keys#\nconst { subtle } = require('node:crypto').webcrypto;\n\nasync function pbkdf2(pass, salt, iterations = 1000, length = 256) {\n  const ec = new TextEncoder();\n  const key = await subtle.importKey(\n    'raw',\n    ec.encode(pass),\n    'PBKDF2',\n    false,\n    ['deriveBits']);\n  const bits = await subtle.deriveBits({\n    name: 'PBKDF2',\n    hash: 'SHA-512',\n    salt: ec.encode(salt),\n    iterations,\n  }, key, length);\n  return bits;\n}\n\nasync function pbkdf2Key(pass, salt, iterations = 1000, length = 256) {\n  const ec = new TextEncoder();\n  const keyMaterial = await subtle.importKey(\n    'raw',\n    ec.encode(pass),\n    'PBKDF2',\n    false,\n    ['deriveKey']);\n  const key = await subtle.deriveKey({\n    name: 'PBKDF2',\n    hash: 'SHA-512',\n    salt: ec.encode(salt),\n    iterations,\n  }, keyMaterial, {\n    name: 'AES-GCM',\n    length: 256,\n  }, true, ['encrypt', 'decrypt']);\n  return key;\n}\nDigest#\nconst { subtle } = require('node:crypto').webcrypto;\n\nasync function digest(data, algorithm = 'SHA-512') {\n  const ec = new TextEncoder();\n  const digest =", "doc_id": "2c2152d5-7ed2-404c-9785-f400ad6cbf7a", "embedding": null, "doc_hash": "756c67783b8a8dd7c8e0e0339a271bce0b278ab4f2cc10474ed28bf4cc9cb4a9", "extra_info": null, "node_info": {"start": 2802172, "end": 2804591}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "854cb19b-7eb0-47da-9a83-9bf4271caafb", "3": "f73838fb-ea70-4b8f-8482-2ff631a7d2f9"}}, "__type__": "1"}, "f73838fb-ea70-4b8f-8482-2ff631a7d2f9": {"__data__": {"text": "   'PBKDF2',\n    false,\n    ['deriveKey']);\n  const key = await subtle.deriveKey({\n    name: 'PBKDF2',\n    hash: 'SHA-512',\n    salt: ec.encode(salt),\n    iterations,\n  }, keyMaterial, {\n    name: 'AES-GCM',\n    length: 256,\n  }, true, ['encrypt', 'decrypt']);\n  return key;\n}\nDigest#\nconst { subtle } = require('node:crypto').webcrypto;\n\nasync function digest(data, algorithm = 'SHA-512') {\n  const ec = new TextEncoder();\n  const digest = await subtle.digest(algorithm, ec.encode(data));\n  return digest;\n}\nAlgorithm matrix#\nThe table details the algorithms supported by the Node.js Web Crypto API implementation and the APIs supported for each:\n\nAlgorithm\tgenerateKey\texportKey\timportKey\tencrypt\tdecrypt\twrapKey\tunwrapKey\tderiveBits\tderiveKey\tsign\tverify\tdigest\n'RSASSA-PKCS1-v1_5'\t\u2714\t\u2714\t\u2714\t\t\t\t\t\t\t\u2714\t\u2714\t\n'RSA-PSS'\t\u2714\t\u2714\t\u2714\t\t\t\t\t\t\t\u2714\t\u2714\t\n'RSA-OAEP'\t\u2714\t\u2714\t\u2714\t\u2714\t\u2714\t\u2714\t\u2714\t\t\t\t\t\n'ECDSA'\t\u2714\t\u2714\t\u2714\t\t\t\t\t\t\t\u2714\t\u2714\t\n'Ed25519' 1\t\u2714\t\u2714\t\u2714\t\t\t\t\t\t\t\u2714\t\u2714\t\n'Ed448' 1\t\u2714\t\u2714\t\u2714\t\t\t\t\t\t\t\u2714\t\u2714\t\n'ECDH'\t\u2714\t\u2714\t\u2714\t\t\t\t\t\u2714\t\u2714\t\t\t\n'X25519' 1\t\u2714\t\u2714\t\u2714\t\t\t\t\t\u2714\t\u2714\t\t\t\n'X448' 1\t\u2714\t\u2714\t\u2714\t\t\t\t\t\u2714\t\u2714\t\t\t\n'AES-CTR'\t\u2714\t\u2714\t\u2714\t\u2714\t\u2714\t\u2714\t\u2714\t\t\t\t\t\n'AES-CBC'\t\u2714\t\u2714\t\u2714\t\u2714\t\u2714\t\u2714\t\u2714\t\t\t\t\t\n'AES-GCM'\t\u2714\t\u2714\t\u2714\t\u2714\t\u2714\t\u2714\t\u2714\t\t\t\t\t\n'AES-KW'\t\u2714\t\u2714\t\u2714\t\t\t\u2714\t\u2714\t\t\t\t\t\n'HMAC'\t\u2714\t\u2714\t\u2714\t\t\t\t\t\t\t\u2714\t\u2714\t\n'HKDF'\t\t\u2714\t\u2714\t\t\t\t\t\u2714\t\u2714\t\t\t\n'PBKDF2'\t\t\u2714\t\u2714\t\t\t\t\t\u2714\t\u2714\t\t\t\n'SHA-1'\t\t\t\t\t\t\t\t\t\t\t\t\u2714\n'SHA-256'\t\t\t\t\t\t\t\t\t\t\t\t\u2714\n'SHA-384'\t\t\t\t\t\t\t\t\t\t\t\t\u2714\n'SHA-512'\t\t\t\t\t\t\t\t\t\t\t\t\u2714\nClass: Crypto#\nAdded in: v15.0.0\nCalling require('node:crypto').webcrypto returns an instance of the Crypto class. Crypto is a singleton that provides access to the remainder of the crypto API.\n\ncrypto.subtle#\nAdded in: v15.0.0\nType: <SubtleCrypto>\nProvides access to the SubtleCrypto API.\n\ncrypto.getRandomValues(typedArray)#\nAdded in: v15.0.0\ntypedArray <Buffer> | <TypedArray>\nReturns: <Buffer> | <TypedArray>\nGenerates cryptographically strong random values. The given typedArray is filled with random", "doc_id": "f73838fb-ea70-4b8f-8482-2ff631a7d2f9", "embedding": null, "doc_hash": "b453541e737957e3b092d82b81bb495366b3c53cf4b0800bb851a894f6670449", "extra_info": null, "node_info": {"start": 2804598, "end": 2806396}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2c2152d5-7ed2-404c-9785-f400ad6cbf7a", "3": "65012525-4f33-4f14-9904-099be04fe78a"}}, "__type__": "1"}, "65012525-4f33-4f14-9904-099be04fe78a": {"__data__": {"text": "Crypto#\nAdded in: v15.0.0\nCalling require('node:crypto').webcrypto returns an instance of the Crypto class. Crypto is a singleton that provides access to the remainder of the crypto API.\n\ncrypto.subtle#\nAdded in: v15.0.0\nType: <SubtleCrypto>\nProvides access to the SubtleCrypto API.\n\ncrypto.getRandomValues(typedArray)#\nAdded in: v15.0.0\ntypedArray <Buffer> | <TypedArray>\nReturns: <Buffer> | <TypedArray>\nGenerates cryptographically strong random values. The given typedArray is filled with random values, and a reference to typedArray is returned.\n\nThe given typedArray must be an integer-based instance of <TypedArray>, i.e. Float32Array and Float64Array are not accepted.\n\nAn error will be thrown if the given typedArray is larger than 65,536 bytes.\n\ncrypto.randomUUID()#\nAdded in: v16.7.0\nReturns: <string>\nGenerates a random RFC 4122 version 4 UUID. The UUID is generated using a cryptographic pseudorandom number generator.\n\nClass: CryptoKey#\nAdded in: v15.0.0\ncryptoKey.algorithm#\nAdded in: v15.0.0\nType: <AesKeyGenParams> | <RsaHashedKeyGenParams> | <EcKeyGenParams> | <HmacKeyGenParams>\nAn object detailing the algorithm for which the key can be used along with additional algorithm-specific parameters.\n\nRead-only.\n\ncryptoKey.extractable#\nAdded in: v15.0.0\nType: <boolean>\nWhen true, the <CryptoKey> can be extracted using either subtleCrypto.exportKey() or subtleCrypto.wrapKey().\n\nRead-only.\n\ncryptoKey.type#\nAdded in: v15.0.0\nType: <string> One of 'secret', 'private', or 'public'.\nA string identifying whether the key is a symmetric ('secret') or asymmetric ('private' or 'public') key.\n\ncryptoKey.usages#\nAdded in: v15.0.0\nType: <string[]>\nAn array of strings identifying the operations for which the key may be used.\n\nThe possible usages are:\n\n'encrypt' - The key may be used to encrypt data.\n'decrypt' - The key may be used to decrypt data.\n'sign' - The key may be used to generate digital signatures.\n'verify' - The key may be used to verify digital signatures.\n'deriveKey' - The key may be used to derive a new key.\n'deriveBits' - The key may be used to derive bits.\n'wrapKey' - The key may be used to wrap another key.\n'unwrapKey' - The key may be used to unwrap another key.\nValid key usages depend on the key algorithm (identified by cryptokey.algorithm.name).\n\nKey Type\t'encrypt'\t'decrypt'\t'sign'\t'verify'\t'deriveKey'\t'deriveBits'\t'wrapKey'\t'unwrapKey'\n'AES-CBC'\t\u2714\t\u2714\t\t\t\t\t\u2714\t\u2714\n'AES-CTR'\t\u2714\t\u2714\t\t\t\t\t\u2714\t\u2714\n'AES-GCM'\t\u2714\t\u2714\t\t\t\t\t\u2714\t\u2714\n'AES-KW'\t\t\t\t\t\t\t\u2714\t\u2714\n'ECDH'\t\t\t\t\t\u2714\t\u2714\t\t\n'X25519' 1\t\t\t\t\t\u2714\t\u2714\t\t\n'X448' 1\t\t\t\t\t\u2714\t\u2714\t\t\n'ECDSA'\t\t\t\u2714\t\u2714\t\t\t\t\n'Ed25519' 1\t\t\t\u2714\t\u2714\t\t\t\t\n'Ed448'", "doc_id": "65012525-4f33-4f14-9904-099be04fe78a", "embedding": null, "doc_hash": "8fa3a4de826191a9a22d3cab6f6b94abef4919e957a4a565372aef181a478a7d", "extra_info": null, "node_info": {"start": 2806311, "end": 2808877}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f73838fb-ea70-4b8f-8482-2ff631a7d2f9", "3": "815d5737-6799-498d-84a9-9ada8feae2bb"}}, "__type__": "1"}, "815d5737-6799-498d-84a9-9ada8feae2bb": {"__data__": {"text": "1\t\t\t\t\t\u2714\t\u2714\t\t\n'X448' 1\t\t\t\t\t\u2714\t\u2714\t\t\n'ECDSA'\t\t\t\u2714\t\u2714\t\t\t\t\n'Ed25519' 1\t\t\t\u2714\t\u2714\t\t\t\t\n'Ed448' 1\t\t\t\u2714\t\u2714\t\t\t\t\n'HDKF'\t\t\t\t\t\u2714\t\u2714\t\t\n'HMAC'\t\t\t\u2714\t\u2714\t\t\t\t\n'PBKDF2'\t\t\t\t\t\u2714\t\u2714\t\t\n'RSA-OAEP'\t\u2714\t\u2714\t\t\t\t\t\u2714\t\u2714\n'RSA-PSS'\t\t\t\u2714\t\u2714\t\t\t\t\n'RSASSA-PKCS1-v1_5'\t\t\t\u2714\t\u2714\t\t\t\t\nClass: CryptoKeyPair#\nAdded in: v15.0.0\nThe CryptoKeyPair is a simple dictionary object with publicKey and privateKey properties, representing an asymmetric key pair.\n\ncryptoKeyPair.privateKey#\nAdded in: v15.0.0\nType: <CryptoKey> A <CryptoKey> whose type will be 'private'.\ncryptoKeyPair.publicKey#\nAdded in: v15.0.0\nType: <CryptoKey> A <CryptoKey> whose type will be 'public'.\nClass: SubtleCrypto#\nAdded in: v15.0.0\nsubtle.decrypt(algorithm, key, data)#\nAdded in: v15.0.0\nalgorithm: <RsaOaepParams> | <AesCtrParams> | <AesCbcParams> | <AesGcmParams>\nkey: <CryptoKey>\ndata: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\nReturns: <Promise> containing <ArrayBuffer>\nUsing the method and parameters specified in algorithm and the keying material provided by key, subtle.decrypt() attempts to decipher the provided data. If successful, the returned promise will be resolved with an <ArrayBuffer> containing the plaintext result.\n\nThe algorithms currently supported include:\n\n'RSA-OAEP'\n'AES-CTR'\n'AES-CBC'\n'AES-GCM'\nsubtle.deriveBits(algorithm, baseKey, length)#\nHistory\nalgorithm: <AlgorithmIdentifier> | <EcdhKeyDeriveParams> | <HkdfParams> | <Pbkdf2Params>\nbaseKey: <CryptoKey>\nlength: <number> | <null>\nReturns: <Promise> containing <ArrayBuffer>\nUsing the method and parameters specified in algorithm and the keying material provided by baseKey, subtle.deriveBits() attempts to generate length bits.\n\nThe Node.js implementation requires that when length is a number it must be multiple of 8.\n\nWhen length is null the maximum number of bits for a given algorithm is generated. This is allowed for the 'ECDH', 'X25519', and 'X448' algorithms.\n\nIf successful, the returned promise will be resolved with an <ArrayBuffer> containing the generated data.\n\nThe algorithms currently supported include:\n\n'ECDH'\n'X25519' 1\n'X448' 1\n'HKDF'\n'PBKDF2'\nsubtle.deriveKey(algorithm, baseKey, derivedKeyAlgorithm, extractable, keyUsages)#\nHistory\nalgorithm: <AlgorithmIdentifier> | <EcdhKeyDeriveParams> | <HkdfParams> | <Pbkdf2Params>\nbaseKey: <CryptoKey>\nderivedKeyAlgorithm: <HmacKeyGenParams> | <AesKeyGenParams>\nextractable: <boolean>\nkeyUsages: <string[]> See Key usages.\nReturns: <Promise> containing <CryptoKey>\nUsing the method and parameters specified in algorithm, and the keying material provided by baseKey, subtle.deriveKey() attempts to generate a new <CryptoKey> based on the method and parameters in", "doc_id": "815d5737-6799-498d-84a9-9ada8feae2bb", "embedding": null, "doc_hash": "f8a37872e37a56a7c1b1aa12e2ccc1285d314f1268a868ba989a74f86c1e20db", "extra_info": null, "node_info": {"start": 2809249, "end": 2811871}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "65012525-4f33-4f14-9904-099be04fe78a", "3": "fdadb992-a837-4a93-a570-16b5a107772c"}}, "__type__": "1"}, "fdadb992-a837-4a93-a570-16b5a107772c": {"__data__": {"text": "baseKey, derivedKeyAlgorithm, extractable, keyUsages)#\nHistory\nalgorithm: <AlgorithmIdentifier> | <EcdhKeyDeriveParams> | <HkdfParams> | <Pbkdf2Params>\nbaseKey: <CryptoKey>\nderivedKeyAlgorithm: <HmacKeyGenParams> | <AesKeyGenParams>\nextractable: <boolean>\nkeyUsages: <string[]> See Key usages.\nReturns: <Promise> containing <CryptoKey>\nUsing the method and parameters specified in algorithm, and the keying material provided by baseKey, subtle.deriveKey() attempts to generate a new <CryptoKey> based on the method and parameters in derivedKeyAlgorithm.\n\nCalling subtle.deriveKey() is equivalent to calling subtle.deriveBits() to generate raw keying material, then passing the result into the subtle.importKey() method using the deriveKeyAlgorithm, extractable, and keyUsages parameters as input.\n\nThe algorithms currently supported include:\n\n'ECDH'\n'X25519' 1\n'X448' 1\n'HKDF'\n'PBKDF2'\nsubtle.digest(algorithm, data)#\nAdded in: v15.0.0\nalgorithm: <string> | <Object>\ndata: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\nReturns: <Promise> containing <ArrayBuffer>\nUsing the method identified by algorithm, subtle.digest() attempts to generate a digest of data. If successful, the returned promise is resolved with an <ArrayBuffer> containing the computed digest.\n\nIf algorithm is provided as a <string>, it must be one of:\n\n'SHA-1'\n'SHA-256'\n'SHA-384'\n'SHA-512'\nIf algorithm is provided as an <Object>, it must have a name property whose value is one of the above.\n\nsubtle.encrypt(algorithm, key, data)#\nAdded in: v15.0.0\nalgorithm: <RsaOaepParams> | <AesCtrParams> | <AesCbcParams> | <AesGcmParams>\nkey: <CryptoKey>\nReturns: <Promise> containing <ArrayBuffer>\nUsing the method and parameters specified by algorithm and the keying material provided by key, subtle.encrypt() attempts to encipher data. If successful, the returned promise is resolved with an <ArrayBuffer> containing the encrypted result.\n\nThe algorithms currently supported include:\n\n'RSA-OAEP'\n'AES-CTR'\n'AES-CBC'\n'AES-GCM'\nsubtle.exportKey(format, key)#\nHistory\nformat: <string> Must be one of 'raw', 'pkcs8', 'spki', or 'jwk'.\nkey: <CryptoKey>\nReturns: <Promise> containing <ArrayBuffer> | <Object>.\nExports the given key into the specified format, if supported.\n\nIf the <CryptoKey> is not extractable, the returned promise will reject.\n\nWhen format is either 'pkcs8' or 'spki' and the export is successful, the returned promise will be resolved with an <ArrayBuffer> containing the exported key data.\n\nWhen format is 'jwk' and the export is successful, the returned promise will be resolved with a JavaScript object conforming to the JSON Web Key specification.\n\nKey Type\t'spki'\t'pkcs8'\t'jwk'\t'raw'\n'AES-CBC'\t\t\t\u2714\t\u2714\n'AES-CTR'\t\t\t\u2714\t\u2714\n'AES-GCM'\t\t\t\u2714\t\u2714\n'AES-KW'\t\t\t\u2714\t\u2714\n'ECDH'\t\u2714\t\u2714\t\u2714\t\u2714\n'ECDSA'\t\u2714\t\u2714\t\u2714\t\u2714\n'Ed25519' 1\t\u2714\t\u2714\t\u2714\t\u2714\n'Ed448'", "doc_id": "fdadb992-a837-4a93-a570-16b5a107772c", "embedding": null, "doc_hash": "af8307f756278d75930a92c5254b3e01b078f41122f19b6764b3b16d652ee300", "extra_info": null, "node_info": {"start": 2811466, "end": 2814262}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "815d5737-6799-498d-84a9-9ada8feae2bb", "3": "58853dec-bbc1-4f23-bd08-c9c4a83bfa00"}}, "__type__": "1"}, "58853dec-bbc1-4f23-bd08-c9c4a83bfa00": {"__data__": {"text": "containing the exported key data.\n\nWhen format is 'jwk' and the export is successful, the returned promise will be resolved with a JavaScript object conforming to the JSON Web Key specification.\n\nKey Type\t'spki'\t'pkcs8'\t'jwk'\t'raw'\n'AES-CBC'\t\t\t\u2714\t\u2714\n'AES-CTR'\t\t\t\u2714\t\u2714\n'AES-GCM'\t\t\t\u2714\t\u2714\n'AES-KW'\t\t\t\u2714\t\u2714\n'ECDH'\t\u2714\t\u2714\t\u2714\t\u2714\n'ECDSA'\t\u2714\t\u2714\t\u2714\t\u2714\n'Ed25519' 1\t\u2714\t\u2714\t\u2714\t\u2714\n'Ed448' 1\t\u2714\t\u2714\t\u2714\t\u2714\n'HDKF'\t\t\t\t\n'HMAC'\t\t\t\u2714\t\u2714\n'PBKDF2'\t\t\t\t\n'RSA-OAEP'\t\u2714\t\u2714\t\u2714\t\n'RSA-PSS'\t\u2714\t\u2714\t\u2714\t\n'RSASSA-PKCS1-v1_5'\t\u2714\t\u2714\t\u2714\t\nsubtle.generateKey(algorithm, extractable, keyUsages)#\nAdded in: v15.0.0\nalgorithm: <AlgorithmIdentifier> | <RsaHashedKeyGenParams> | <EcKeyGenParams> | <HmacKeyGenParams> | <AesKeyGenParams>\nextractable: <boolean>\nkeyUsages: <string[]> See Key usages.\nReturns: <Promise> containing <CryptoKey> | <CryptoKeyPair>\nUsing the method and parameters provided in algorithm, subtle.generateKey() attempts to generate new keying material. Depending the method used, the method may generate either a single <CryptoKey> or a <CryptoKeyPair>.\n\nThe <CryptoKeyPair> (public and private key) generating algorithms supported include:\n\n'RSASSA-PKCS1-v1_5'\n'RSA-PSS'\n'RSA-OAEP'\n'ECDSA'\n'Ed25519' 1\n'Ed448' 1\n'ECDH'\n'X25519' 1\n'X448' 1\nThe <CryptoKey> (secret key) generating algorithms supported include:\n\n'HMAC'\n'AES-CTR'\n'AES-CBC'\n'AES-GCM'\n'AES-KW'\nsubtle.importKey(format, keyData, algorithm, extractable, keyUsages)#\nHistory\nformat: <string> Must be one of 'raw', 'pkcs8', 'spki', or 'jwk'.\nkeyData: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer> | <Object>\nalgorithm: <AlgorithmIdentifier> | <RsaHashedImportParams> | <EcKeyImportParams> | <HmacImportParams>\nextractable: <boolean>\nkeyUsages: <string[]> See Key usages.\nReturns: <Promise> containing <CryptoKey>\nThe subtle.importKey() method attempts to interpret the provided keyData as the given format to create a <CryptoKey> instance using the provided algorithm, extractable, and keyUsages arguments. If the import is successful, the returned promise will be resolved with the created <CryptoKey>.\n\nIf importing a 'PBKDF2' key, extractable must be false.\n\nThe algorithms currently supported include:\n\nKey Type\t'spki'\t'pkcs8'\t'jwk'\t'raw'\n'AES-CBC'\t\t\t\u2714\t\u2714\n'AES-CTR'\t\t\t\u2714\t\u2714\n'AES-GCM'\t\t\t\u2714\t\u2714\n'AES-KW'\t\t\t\u2714\t\u2714\n'ECDH'\t\u2714\t\u2714\t\u2714\t\u2714\n'X25519' 1\t\u2714\t\u2714\t\u2714\t\u2714\n'X448'", "doc_id": "58853dec-bbc1-4f23-bd08-c9c4a83bfa00", "embedding": null, "doc_hash": "7d56a691365d8c0d482667c9dda6097c1779b5adccfd3c168d14d1e9574d1a22", "extra_info": null, "node_info": {"start": 2814423, "end": 2816676}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "fdadb992-a837-4a93-a570-16b5a107772c", "3": "0b7638c4-8068-422c-9792-6cb8449f5380"}}, "__type__": "1"}, "0b7638c4-8068-422c-9792-6cb8449f5380": {"__data__": {"text": "extractable, and keyUsages arguments. If the import is successful, the returned promise will be resolved with the created <CryptoKey>.\n\nIf importing a 'PBKDF2' key, extractable must be false.\n\nThe algorithms currently supported include:\n\nKey Type\t'spki'\t'pkcs8'\t'jwk'\t'raw'\n'AES-CBC'\t\t\t\u2714\t\u2714\n'AES-CTR'\t\t\t\u2714\t\u2714\n'AES-GCM'\t\t\t\u2714\t\u2714\n'AES-KW'\t\t\t\u2714\t\u2714\n'ECDH'\t\u2714\t\u2714\t\u2714\t\u2714\n'X25519' 1\t\u2714\t\u2714\t\u2714\t\u2714\n'X448' 1\t\u2714\t\u2714\t\u2714\t\u2714\n'ECDSA'\t\u2714\t\u2714\t\u2714\t\u2714\n'Ed25519' 1\t\u2714\t\u2714\t\u2714\t\u2714\n'Ed448' 1\t\u2714\t\u2714\t\u2714\t\u2714\n'HDKF'\t\t\t\t\u2714\n'HMAC'\t\t\t\u2714\t\u2714\n'PBKDF2'\t\t\t\t\u2714\n'RSA-OAEP'\t\u2714\t\u2714\t\u2714\t\n'RSA-PSS'\t\u2714\t\u2714\t\u2714\t\n'RSASSA-PKCS1-v1_5'\t\u2714\t\u2714\t\u2714\t\nsubtle.sign(algorithm, key, data)#\nHistory\nalgorithm: <AlgorithmIdentifier> | <RsaPssParams> | <EcdsaParams> | <Ed448Params>\nkey: <CryptoKey>\ndata: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\nReturns: <Promise> containing <ArrayBuffer>\nUsing the method and parameters given by algorithm and the keying material provided by key, subtle.sign() attempts to generate a cryptographic signature of data. If successful, the returned promise is resolved with an <ArrayBuffer> containing the generated signature.\n\nThe algorithms currently supported include:\n\n'RSASSA-PKCS1-v1_5'\n'RSA-PSS'\n'ECDSA'\n'Ed25519' 1\n'Ed448' 1\n'HMAC'\nsubtle.unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgo, unwrappedKeyAlgo, extractable, keyUsages)#\nAdded in: v15.0.0\nformat: <string> Must be one of 'raw', 'pkcs8', 'spki', or 'jwk'.\nwrappedKey: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\nunwrappingKey: <CryptoKey>\nunwrapAlgo: <AlgorithmIdentifier> | <RsaOaepParams> | <AesCtrParams> | <AesCbcParams> | <AesGcmParams>\nunwrappedKeyAlgo: <AlgorithmIdentifier> | <RsaHashedImportParams> | <EcKeyImportParams> | <HmacImportParams>\nextractable: <boolean>\nkeyUsages: <string[]> See Key usages.\nReturns: <Promise> containing <CryptoKey>\nIn cryptography, \"wrapping a key\" refers to exporting and then encrypting the keying material. The subtle.unwrapKey() method attempts to decrypt a wrapped key and create a <CryptoKey> instance. It is equivalent to calling subtle.decrypt() first on the encrypted key data (using the wrappedKey, unwrapAlgo, and unwrappingKey arguments as input) then passing the results in to the subtle.importKey() method using the unwrappedKeyAlgo, extractable, and keyUsages arguments as inputs. If successful, the returned promise is resolved with a <CryptoKey> object.\n\nThe wrapping algorithms currently supported include:\n\n'RSA-OAEP'\n'AES-CTR'\n'AES-CBC'\n'AES-GCM'\n'AES-KW'\nThe", "doc_id": "0b7638c4-8068-422c-9792-6cb8449f5380", "embedding": null, "doc_hash": "1ea1559b172f9e7162ea6e024ea5bb8d8528b6f22ba6a6e7976fba2af87557de", "extra_info": null, "node_info": {"start": 2816654, "end": 2819085}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "58853dec-bbc1-4f23-bd08-c9c4a83bfa00", "3": "635e075a-c5c0-4957-b41b-03a63dce412a"}}, "__type__": "1"}, "635e075a-c5c0-4957-b41b-03a63dce412a": {"__data__": {"text": "to exporting and then encrypting the keying material. The subtle.unwrapKey() method attempts to decrypt a wrapped key and create a <CryptoKey> instance. It is equivalent to calling subtle.decrypt() first on the encrypted key data (using the wrappedKey, unwrapAlgo, and unwrappingKey arguments as input) then passing the results in to the subtle.importKey() method using the unwrappedKeyAlgo, extractable, and keyUsages arguments as inputs. If successful, the returned promise is resolved with a <CryptoKey> object.\n\nThe wrapping algorithms currently supported include:\n\n'RSA-OAEP'\n'AES-CTR'\n'AES-CBC'\n'AES-GCM'\n'AES-KW'\nThe unwrapped key algorithms supported include:\n\n'RSASSA-PKCS1-v1_5'\n'RSA-PSS'\n'RSA-OAEP'\n'ECDSA'\n'Ed25519' 1\n'Ed448' 1\n'ECDH'\n'X25519' 1\n'X448' 1\n'HMAC'\n'AES-CTR'\n'AES-CBC'\n'AES-GCM'\n'AES-KW'\nsubtle.verify(algorithm, key, signature, data)#\nHistory\nalgorithm: <AlgorithmIdentifier> | <RsaPssParams> | <EcdsaParams> | <Ed448Params>\nkey: <CryptoKey>\nsignature: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\ndata: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\nReturns: <Promise> containing <boolean>\nUsing the method and parameters given in algorithm and the keying material provided by key, subtle.verify() attempts to verify that signature is a valid cryptographic signature of data. The returned promise is resolved with either true or false.\n\nThe algorithms currently supported include:\n\n'RSASSA-PKCS1-v1_5'\n'RSA-PSS'\n'ECDSA'\n'Ed25519' 1\n'Ed448' 1\n'HMAC'\nsubtle.wrapKey(format, key, wrappingKey, wrapAlgo)#\nAdded in: v15.0.0\nformat: <string> Must be one of 'raw', 'pkcs8', 'spki', or 'jwk'.\nkey: <CryptoKey>\nwrappingKey: <CryptoKey>\nwrapAlgo: <AlgorithmIdentifier> | <RsaOaepParams> | <AesCtrParams> | <AesCbcParams> | <AesGcmParams>\nReturns: <Promise> containing <ArrayBuffer>\nIn cryptography, \"wrapping a key\" refers to exporting and then encrypting the keying material. The subtle.wrapKey() method exports the keying material into the format identified by format, then encrypts it using the method and parameters specified by wrapAlgo and the keying material provided by wrappingKey. It is the equivalent to calling subtle.exportKey() using format and key as the arguments, then passing the result to the subtle.encrypt() method using wrappingKey and wrapAlgo as inputs. If successful, the returned promise will be resolved with an <ArrayBuffer> containing the encrypted key data.\n\nThe wrapping algorithms currently supported include:\n\n'RSA-OAEP'\n'AES-CTR'\n'AES-CBC'\n'AES-GCM'\n'AES-KW'\nAlgorithm parameters#\nThe algorithm parameter objects define the methods and parameters used by the various <SubtleCrypto> methods. While described here as \"classes\", they are simple JavaScript dictionary objects.\n\nClass: AlgorithmIdentifier#\nAdded in: v18.4.0\nalgorithmIdentifier.name#\nAdded in: v18.4.0\nType: <string>\nClass: AesCbcParams#\nAdded in: v15.0.0\naesCbcParams.iv#\nAdded in: v15.0.0\nType: <ArrayBuffer> |", "doc_id": "635e075a-c5c0-4957-b41b-03a63dce412a", "embedding": null, "doc_hash": "c73766465de54bcb6f7ae8c364ba0df389620c168356ed91519be6b9694c2399", "extra_info": null, "node_info": {"start": 2818884, "end": 2821823}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "0b7638c4-8068-422c-9792-6cb8449f5380", "3": "99d9910c-53f5-4e40-9683-9cdaf00817be"}}, "__type__": "1"}, "99d9910c-53f5-4e40-9683-9cdaf00817be": {"__data__": {"text": "wrapping algorithms currently supported include:\n\n'RSA-OAEP'\n'AES-CTR'\n'AES-CBC'\n'AES-GCM'\n'AES-KW'\nAlgorithm parameters#\nThe algorithm parameter objects define the methods and parameters used by the various <SubtleCrypto> methods. While described here as \"classes\", they are simple JavaScript dictionary objects.\n\nClass: AlgorithmIdentifier#\nAdded in: v18.4.0\nalgorithmIdentifier.name#\nAdded in: v18.4.0\nType: <string>\nClass: AesCbcParams#\nAdded in: v15.0.0\naesCbcParams.iv#\nAdded in: v15.0.0\nType: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\nProvides the initialization vector. It must be exactly 16-bytes in length and should be unpredictable and cryptographically random.\n\naesCbcParams.name#\nAdded in: v15.0.0\nType: <string> Must be 'AES-CBC'.\nClass: AesCtrParams#\nAdded in: v15.0.0\naesCtrParams.counter#\nAdded in: v15.0.0\nType: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\nThe initial value of the counter block. This must be exactly 16 bytes long.\n\nThe AES-CTR method uses the rightmost length bits of the block as the counter and the remaining bits as the nonce.\n\naesCtrParams.length#\nAdded in: v15.0.0\nType: <number> The number of bits in the aesCtrParams.counter that are to be used as the counter.\naesCtrParams.name#\nAdded in: v15.0.0\nType: <string> Must be 'AES-CTR'.\nClass: AesGcmParams#\nAdded in: v15.0.0\naesGcmParams.additionalData#\nAdded in: v15.0.0\nType: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer> | <undefined>\nWith the AES-GCM method, the additionalData is extra input that is not encrypted but is included in the authentication of the data. The use of additionalData is optional.\n\naesGcmParams.iv#\nAdded in: v15.0.0\nType: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\nThe initialization vector must be unique for every encryption operation using a given key.\n\nIdeally, this is a deterministic 12-byte value that is computed in such a way that it is guaranteed to be unique across all invocations that use the same key. Alternatively, the initialization vector may consist of at least 12 cryptographically random bytes. For more information on constructing initialization vectors for AES-GCM, refer to Section 8 of NIST SP 800-38D.\n\naesGcmParams.name#\nAdded in: v15.0.0\nType: <string> Must be 'AES-GCM'.\naesGcmParams.tagLength#\nAdded in: v15.0.0\nType: <number> The size in bits of the generated authentication tag. This values must be one of 32, 64, 96, 104, 112, 120, or 128. Default: 128.\nClass: AesKeyGenParams#\nAdded in: v15.0.0\naesKeyGenParams.length#\nAdded in: v15.0.0\nType: <number>\nThe length of the AES key to be generated. This must be either 128, 192, or 256.\n\naesKeyGenParams.name#\nAdded in: v15.0.0\nType: <string> Must be one of 'AES-CBC', 'AES-CTR', 'AES-GCM', or 'AES-KW'\nClass: EcdhKeyDeriveParams#\nAdded in: v15.0.0\necdhKeyDeriveParams.name#\nAdded in: v15.0.0\nType: <string> Must be 'ECDH', 'X25519', or", "doc_id": "99d9910c-53f5-4e40-9683-9cdaf00817be", "embedding": null, "doc_hash": "9a98f5469c0f0ee93fa075a927e7d9002ece5937a6301cd418419e99314ecf3a", "extra_info": null, "node_info": {"start": 2821899, "end": 2824771}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "635e075a-c5c0-4957-b41b-03a63dce412a", "3": "419b92c4-0a52-4061-bdcd-594b246eee38"}}, "__type__": "1"}, "419b92c4-0a52-4061-bdcd-594b246eee38": {"__data__": {"text": "Default: 128.\nClass: AesKeyGenParams#\nAdded in: v15.0.0\naesKeyGenParams.length#\nAdded in: v15.0.0\nType: <number>\nThe length of the AES key to be generated. This must be either 128, 192, or 256.\n\naesKeyGenParams.name#\nAdded in: v15.0.0\nType: <string> Must be one of 'AES-CBC', 'AES-CTR', 'AES-GCM', or 'AES-KW'\nClass: EcdhKeyDeriveParams#\nAdded in: v15.0.0\necdhKeyDeriveParams.name#\nAdded in: v15.0.0\nType: <string> Must be 'ECDH', 'X25519', or 'X448'.\necdhKeyDeriveParams.public#\nAdded in: v15.0.0\nType: <CryptoKey>\nECDH key derivation operates by taking as input one parties private key and another parties public key -- using both to generate a common shared secret. The ecdhKeyDeriveParams.public property is set to the other parties public key.\n\nClass: EcdsaParams#\nAdded in: v15.0.0\necdsaParams.hash#\nAdded in: v15.0.0\nType: <string> | <Object>\nIf represented as a <string>, the value must be one of:\n\n'SHA-1'\n'SHA-256'\n'SHA-384'\n'SHA-512'\nIf represented as an <Object>, the object must have a name property whose value is one of the above listed values.\n\necdsaParams.name#\nAdded in: v15.0.0\nType: <string> Must be 'ECDSA'.\nClass: EcKeyGenParams#\nAdded in: v15.0.0\necKeyGenParams.name#\nAdded in: v15.0.0\nType: <string> Must be one of 'ECDSA' or 'ECDH'.\necKeyGenParams.namedCurve#\nAdded in: v15.0.0\nType: <string> Must be one of 'P-256', 'P-384', 'P-521'.\nClass: EcKeyImportParams#\nAdded in: v15.0.0\necKeyImportParams.name#\nAdded in: v15.0.0\nType: <string> Must be one of 'ECDSA' or 'ECDH'.\necKeyImportParams.namedCurve#\nAdded in: v15.0.0\nType: <string> Must be one of 'P-256', 'P-384', 'P-521'.\nClass: Ed448Params#\nAdded in: v15.0.0\ned448Params.name#\nAdded in: v18.4.0\nType: <string> Must be 'Ed448'.\ned448Params.context#\nAdded in: v18.4.0\nType: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer> | <undefined>\nThe context member represents the optional context data to associate with the message. The Node.js Web Crypto API implementation only supports zero-length context which is equivalent to not providing context at all.\n\nClass: HkdfParams#\nAdded in: v15.0.0\nhkdfParams.hash#\nAdded in: v15.0.0\nType: <string> | <Object>\nIf represented as a <string>, the value must be one of:\n\n'SHA-1'\n'SHA-256'\n'SHA-384'\n'SHA-512'\nIf represented as an <Object>, the object must have a name property whose value is one of the above listed values.\n\nhkdfParams.info#\nAdded in: v15.0.0\nType: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\nProvides application-specific contextual input to the HKDF algorithm. This can be zero-length but must be provided.\n\nhkdfParams.name#\nAdded in: v15.0.0\nType: <string> Must be 'HKDF'.\nhkdfParams.salt#\nAdded in: v15.0.0\nType: <ArrayBuffer> |", "doc_id": "419b92c4-0a52-4061-bdcd-594b246eee38", "embedding": null, "doc_hash": "b5d61feec1489bf317a91b8cf321e0427ce1cb079a581a8c076384d0eb96e0b6", "extra_info": null, "node_info": {"start": 2824847, "end": 2827524}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "99d9910c-53f5-4e40-9683-9cdaf00817be", "3": "20e0feac-fa97-40f0-8957-0d6c19c30a33"}}, "__type__": "1"}, "20e0feac-fa97-40f0-8957-0d6c19c30a33": {"__data__": {"text": "represented as a <string>, the value must be one of:\n\n'SHA-1'\n'SHA-256'\n'SHA-384'\n'SHA-512'\nIf represented as an <Object>, the object must have a name property whose value is one of the above listed values.\n\nhkdfParams.info#\nAdded in: v15.0.0\nType: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\nProvides application-specific contextual input to the HKDF algorithm. This can be zero-length but must be provided.\n\nhkdfParams.name#\nAdded in: v15.0.0\nType: <string> Must be 'HKDF'.\nhkdfParams.salt#\nAdded in: v15.0.0\nType: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\nThe salt value significantly improves the strength of the HKDF algorithm. It should be random or pseudorandom and should be the same length as the output of the digest function (for instance, if using 'SHA-256' as the digest, the salt should be 256-bits of random data).\n\nClass: HmacImportParams#\nAdded in: v15.0.0\nhmacImportParams.hash#\nAdded in: v15.0.0\nType: <string> | <Object>\nIf represented as a <string>, the value must be one of:\n\n'SHA-1'\n'SHA-256'\n'SHA-384'\n'SHA-512'\nIf represented as an <Object>, the object must have a name property whose value is one of the above listed values.\n\nhmacImportParams.length#\nAdded in: v15.0.0\nType: <number>\nThe optional number of bits in the HMAC key. This is optional and should be omitted for most cases.\n\nhmacImportParams.name#\nAdded in: v15.0.0\nType: <string> Must be 'HMAC'.\nClass: HmacKeyGenParams#\nAdded in: v15.0.0\nhmacKeyGenParams.hash#\nAdded in: v15.0.0\nType: <string> | <Object>\nIf represented as a <string>, the value must be one of:\n\n'SHA-1'\n'SHA-256'\n'SHA-384'\n'SHA-512'\nIf represented as an <Object>, the object must have a name property whose value is one of the above listed values.\n\nhmacKeyGenParams.length#\nAdded in: v15.0.0\nType: <number>\nThe number of bits to generate for the HMAC key. If omitted, the length will be determined by the hash algorithm used. This is optional and should be omitted for most cases.\n\nhmacKeyGenParams.name#\nAdded in: v15.0.0\nType: <string> Must be 'HMAC'.\nClass: Pbkdf2Params#\nAdded in: v15.0.0\npbkdb2Params.hash#\nAdded in: v15.0.0\nType: <string> | <Object>\nIf represented as a <string>, the value must be one of:\n\n'SHA-1'\n'SHA-256'\n'SHA-384'\n'SHA-512'\nIf represented as an <Object>, the object must have a name property whose value is one of the above listed values.\n\npbkdf2Params.iterations#\nAdded in: v15.0.0\nType: <number>\nThe number of iterations the PBKDF2 algorithm should make when deriving bits.\n\npbkdf2Params.name#\nAdded in: v15.0.0\nType: <string> Must be 'PBKDF2'.\npbkdf2Params.salt#\nAdded in: v15.0.0\nType: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\nShould be at least 16 random or pseudorandom bytes.\n\nClass: RsaHashedImportParams#\nAdded in: v15.0.0\nrsaHashedImportParams.hash#\nAdded in: v15.0.0\nType: <string> | <Object>\nIf represented as a <string>, the value must be one", "doc_id": "20e0feac-fa97-40f0-8957-0d6c19c30a33", "embedding": null, "doc_hash": "3aebbad58f357570d1692ac1cf500a9ebf05cd870976278f1206ad47e3fa6d78", "extra_info": null, "node_info": {"start": 2827444, "end": 2830313}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "419b92c4-0a52-4061-bdcd-594b246eee38", "3": "c37b2361-c202-473d-bf39-cee5bbde4d32"}}, "__type__": "1"}, "c37b2361-c202-473d-bf39-cee5bbde4d32": {"__data__": {"text": "in: v15.0.0\nType: <number>\nThe number of iterations the PBKDF2 algorithm should make when deriving bits.\n\npbkdf2Params.name#\nAdded in: v15.0.0\nType: <string> Must be 'PBKDF2'.\npbkdf2Params.salt#\nAdded in: v15.0.0\nType: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\nShould be at least 16 random or pseudorandom bytes.\n\nClass: RsaHashedImportParams#\nAdded in: v15.0.0\nrsaHashedImportParams.hash#\nAdded in: v15.0.0\nType: <string> | <Object>\nIf represented as a <string>, the value must be one of:\n\n'SHA-1'\n'SHA-256'\n'SHA-384'\n'SHA-512'\nIf represented as an <Object>, the object must have a name property whose value is one of the above listed values.\n\nrsaHashedImportParams.name#\nAdded in: v15.0.0\nType: <string> Must be one of 'RSASSA-PKCS1-v1_5', 'RSA-PSS', or 'RSA-OAEP'.\nClass: RsaHashedKeyGenParams#\nAdded in: v15.0.0\nrsaHashedKeyGenParams.hash#\nAdded in: v15.0.0\nType: <string> | <Object>\nIf represented as a <string>, the value must be one of:\n\n'SHA-1'\n'SHA-256'\n'SHA-384'\n'SHA-512'\nIf represented as an <Object>, the object must have a name property whose value is one of the above listed values.\n\nrsaHashedKeyGenParams.modulusLength#\nAdded in: v15.0.0\nType: <number>\nThe length in bits of the RSA modulus. As a best practice, this should be at least 2048.\n\nrsaHashedKeyGenParams.name#\nAdded in: v15.0.0\nType: <string> Must be one of 'RSASSA-PKCS1-v1_5', 'RSA-PSS', or 'RSA-OAEP'.\nrsaHashedKeyGenParams.publicExponent#\nAdded in: v15.0.0\nType: <Uint8Array>\nThe RSA public exponent. This must be a <Uint8Array> containing a big-endian, unsigned integer that must fit within 32-bits. The <Uint8Array> may contain an arbitrary number of leading zero-bits. The value must be a prime number. Unless there is reason to use a different value, use new Uint8Array([1, 0, 1]) (65537) as the public exponent.\n\nClass: RsaOaepParams#\nAdded in: v15.0.0\nrsaOaepParams.label#\nAdded in: v15.0.0\nType: <ArrayBuffer> | <TypedArray> | <DataView> | <Buffer>\nAn additional collection of bytes that will not be encrypted, but will be bound to the generated ciphertext.\n\nThe rsaOaepParams.label parameter is optional.\n\nrsaOaepParams.name#\nAdded in: v15.0.0\nType: <string> must be 'RSA-OAEP'.\nClass: RsaPssParams#\nAdded in: v15.0.0\nrsaPssParams.name#\nAdded in: v15.0.0\nType: <string> Must be 'RSA-PSS'.\nrsaPssParams.saltLength#\nAdded in: v15.0.0\nType: <number>\nThe length (in bytes) of the random salt to use.\n\nFootnotes\nAn experimental implementation of Secure Curves in the Web Cryptography API as of 05 May 2022 \u21a9 \u21a92 \u21a93 \u21a94 \u21a95 \u21a96 \u21a97 \u21a98 \u21a99 \u21a910 \u21a911 \u21a912 \u21a913 \u21a914 \u21a915 \u21a916 \u21a917 \u21a918 \u21a919 \u21a920 \u21a921 \u21a922 \u21a923 \u21a924 \u21a925 \u21a926", "doc_id": "c37b2361-c202-473d-bf39-cee5bbde4d32", "embedding": null, "doc_hash": "b37a7f2d24b3286919e6a68229c1b66e04b4fe40ada8911f8361249f666ccae5", "extra_info": null, "node_info": {"start": 2830349, "end": 2832943}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "20e0feac-fa97-40f0-8957-0d6c19c30a33", "3": "618c6c2a-f2cb-4bfc-b7ca-832c809a3d83"}}, "__type__": "1"}, "618c6c2a-f2cb-4bfc-b7ca-832c809a3d83": {"__data__": {"text": "in: v15.0.0\nrsaPssParams.name#\nAdded in: v15.0.0\nType: <string> Must be 'RSA-PSS'.\nrsaPssParams.saltLength#\nAdded in: v15.0.0\nType: <number>\nThe length (in bytes) of the random salt to use.\n\nFootnotes\nAn experimental implementation of Secure Curves in the Web Cryptography API as of 05 May 2022 \u21a9 \u21a92 \u21a93 \u21a94 \u21a95 \u21a96 \u21a97 \u21a98 \u21a99 \u21a910 \u21a911 \u21a912 \u21a913 \u21a914 \u21a915 \u21a916 \u21a917 \u21a918 \u21a919 \u21a920 \u21a921 \u21a922 \u21a923 \u21a924 \u21a925 \u21a926 \u21a927 \u21a928 \u21a929 \u21a930\n\nWeb Streams API#\nHistory\nStability: 1 - Experimental.\nAn implementation of the WHATWG Streams Standard.\n\nOverview#\nThe WHATWG Streams Standard (or \"web streams\") defines an API for handling streaming data. It is similar to the Node.js Streams API but emerged later and has become the \"standard\" API for streaming data across many JavaScript environments.\n\nThere are three primary types of objects:\n\nReadableStream - Represents a source of streaming data.\nWritableStream - Represents a destination for streaming data.\nTransformStream - Represents an algorithm for transforming streaming data.\nExample ReadableStream#\nThis example creates a simple ReadableStream that pushes the current performance.now() timestamp once every second forever. An async iterable is used to read the data from the stream.\n\nimport {\n  ReadableStream,\n} from 'node:stream/web';\n\nimport {\n  setInterval as every,\n} from 'node:timers/promises';\n\nimport {\n  performance,\n} from 'node:perf_hooks';\n\nconst SECOND = 1000;\n\nconst stream = new ReadableStream({\n  async start(controller) {\n    for await (const _ of every(SECOND))\n      controller.enqueue(performance.now());\n  },\n});\n\nfor await (const value of stream)\n  console.log(value);\nAPI#\nClass: ReadableStream#\nHistory\nnew ReadableStream([underlyingSource [, strategy]])#\nAdded in: v16.5.0\nunderlyingSource <Object>\nstart <Function> A user-defined function that is invoked immediately when the ReadableStream is created.\ncontroller <ReadableStreamDefaultController> | <ReadableByteStreamController>\nReturns: undefined or a promise fulfilled with undefined.\npull <Function> A user-defined function that is called repeatedly when the ReadableStream internal queue is not full. The operation may be sync or async. If async, the function will not be called again until the previously returned promise is fulfilled.\ncontroller <ReadableStreamDefaultController> | <ReadableByteStreamController>\nReturns: A promise fulfilled with undefined.\ncancel <Function> A user-defined function that is called when the ReadableStream is canceled.\nreason <any>\nReturns: A promise fulfilled with undefined.\ntype <string> Must be 'bytes' or undefined.\nautoAllocateChunkSize <number> Used only when type is equal to 'bytes'.\nstrategy <Object>\nhighWaterMark <number> The maximum internal queue size before backpressure is applied.\nsize <Function> A user-defined function used to identify the size of each chunk of data.\nchunk <any>\nReturns: <number>\nreadableStream.locked#\nAdded in: v16.5.0\nType: <boolean> Set to true if there is an active reader for this <ReadableStream>.\nThe readableStream.locked property is false by default, and is switched to true while there is an active reader consuming the stream's data.\n\nreadableStream.cancel([reason])#\nAdded in: v16.5.0\nreason <any>\nReturns: A promise fulfilled with undefined once cancelation has been completed.\nreadableStream.getReader([options])#\nAdded in: v16.5.0\noptions <Object>\nmode <string>", "doc_id": "618c6c2a-f2cb-4bfc-b7ca-832c809a3d83", "embedding": null, "doc_hash": "0afd4bb915b98ce3d2ba03a318a5577527176b43704daa04890a2a2779dcde29", "extra_info": null, "node_info": {"start": 2833059, "end": 2836414}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "c37b2361-c202-473d-bf39-cee5bbde4d32", "3": "2c66a51e-2513-481c-a279-1e55ff11ccb1"}}, "__type__": "1"}, "2c66a51e-2513-481c-a279-1e55ff11ccb1": {"__data__": {"text": "The maximum internal queue size before backpressure is applied.\nsize <Function> A user-defined function used to identify the size of each chunk of data.\nchunk <any>\nReturns: <number>\nreadableStream.locked#\nAdded in: v16.5.0\nType: <boolean> Set to true if there is an active reader for this <ReadableStream>.\nThe readableStream.locked property is false by default, and is switched to true while there is an active reader consuming the stream's data.\n\nreadableStream.cancel([reason])#\nAdded in: v16.5.0\nreason <any>\nReturns: A promise fulfilled with undefined once cancelation has been completed.\nreadableStream.getReader([options])#\nAdded in: v16.5.0\noptions <Object>\nmode <string> 'byob' or undefined\nReturns: <ReadableStreamDefaultReader> | <ReadableStreamBYOBReader>\nimport { ReadableStream } from 'node:stream/web';\n\nconst stream = new ReadableStream();\n\nconst reader = stream.getReader();\n\nconsole.log(await reader.read());\nCauses the readableStream.locked to be true.\n\nreadableStream.pipeThrough(transform[, options])#\nAdded in: v16.5.0\ntransform <Object>\nreadable <ReadableStream> The ReadableStream to which transform.writable will push the potentially modified data is receives from this ReadableStream.\nwritable <WritableStream> The WritableStream to which this ReadableStream's data will be written.\noptions <Object>\npreventAbort <boolean> When true, errors in this ReadableStream will not cause transform.writable to be aborted.\npreventCancel <boolean> When true, errors in the destination transform.writable do not cause this ReadableStream to be canceled.\npreventClose <boolean> When true, closing this ReadableStream does not cause transform.writable to be closed.\nsignal <AbortSignal> Allows the transfer of data to be canceled using an <AbortController>.\nReturns: <ReadableStream> From transform.readable.\nConnects this <ReadableStream> to the pair of <ReadableStream> and <WritableStream> provided in the transform argument such that the data from this <ReadableStream> is written in to transform.writable, possibly transformed, then pushed to transform.readable. Once the pipeline is configured, transform.readable is returned.\n\nCauses the readableStream.locked to be true while the pipe operation is active.\n\nimport {\n  ReadableStream,\n  TransformStream,\n} from 'node:stream/web';\n\nconst stream = new ReadableStream({\n  start(controller) {\n    controller.enqueue('a');\n  },\n});\n\nconst transform = new TransformStream({\n  transform(chunk, controller) {\n    controller.enqueue(chunk.toUpperCase());\n  },\n});\n\nconst transformedStream = stream.pipeThrough(transform);\n\nfor await (const chunk of transformedStream)\n  console.log(chunk);\nreadableStream.pipeTo(destination[, options])#\nAdded in: v16.5.0\ndestination <WritableStream> A <WritableStream> to which this ReadableStream's data will be written.\noptions <Object>\npreventAbort <boolean> When true, errors in this ReadableStream will not cause destination to be aborted.\npreventCancel <boolean> When true, errors in the destination will not cause this ReadableStream to be canceled.\npreventClose <boolean> When true, closing this ReadableStream does not cause destination to be closed.\nsignal <AbortSignal> Allows the transfer of data to be canceled using an <AbortController>.\nReturns: A promise fulfilled with undefined\nCauses the readableStream.locked to be true while the pipe operation is active.\n\nreadableStream.tee()#\nHistory\nReturns: <ReadableStream[]>\nReturns a pair of new <ReadableStream> instances to which this ReadableStream's data will be forwarded. Each will receive the same data.\n\nCauses the readableStream.locked to be true.\n\nreadableStream.values([options])#\nAdded in: v16.5.0\noptions", "doc_id": "2c66a51e-2513-481c-a279-1e55ff11ccb1", "embedding": null, "doc_hash": "39f20250b56ff9339a68d4e90212286a52e33ce1e25df42bc2e618571a82b1d1", "extra_info": null, "node_info": {"start": 2836140, "end": 2839813}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "618c6c2a-f2cb-4bfc-b7ca-832c809a3d83", "3": "98fa1933-6de3-4f53-9109-9cfc0a25491d"}}, "__type__": "1"}, "98fa1933-6de3-4f53-9109-9cfc0a25491d": {"__data__": {"text": "When true, errors in the destination will not cause this ReadableStream to be canceled.\npreventClose <boolean> When true, closing this ReadableStream does not cause destination to be closed.\nsignal <AbortSignal> Allows the transfer of data to be canceled using an <AbortController>.\nReturns: A promise fulfilled with undefined\nCauses the readableStream.locked to be true while the pipe operation is active.\n\nreadableStream.tee()#\nHistory\nReturns: <ReadableStream[]>\nReturns a pair of new <ReadableStream> instances to which this ReadableStream's data will be forwarded. Each will receive the same data.\n\nCauses the readableStream.locked to be true.\n\nreadableStream.values([options])#\nAdded in: v16.5.0\noptions <Object>\npreventCancel <boolean> When true, prevents the <ReadableStream> from being closed when the async iterator abruptly terminates. Default: false.\nCreates and returns an async iterator usable for consuming this ReadableStream's data.\n\nCauses the readableStream.locked to be true while the async iterator is active.\n\nimport { Buffer } from 'node:buffer';\n\nconst stream = new ReadableStream(getSomeSource());\n\nfor await (const chunk of stream.values({ preventCancel: true }))\n  console.log(Buffer.from(chunk).toString());\nAsync Iteration#\nThe <ReadableStream> object supports the async iterator protocol using for await syntax.\n\nimport { Buffer } from 'node:buffer';\n\nconst stream = new ReadableStream(getSomeSource());\n\nfor await (const chunk of stream)\n  console.log(Buffer.from(chunk).toString());\nThe async iterator will consume the <ReadableStream> until it terminates.\n\nBy default, if the async iterator exits early (via either a break, return, or a throw), the <ReadableStream> will be closed. To prevent automatic closing of the <ReadableStream>, use the readableStream.values() method to acquire the async iterator and set the preventCancel option to true.\n\nThe <ReadableStream> must not be locked (that is, it must not have an existing active reader). During the async iteration, the <ReadableStream> will be locked.\n\nTransferring with postMessage()#\nA <ReadableStream> instance can be transferred using a <MessagePort>.\n\nconst stream = new ReadableStream(getReadableSourceSomehow());\n\nconst { port1, port2 } = new MessageChannel();\n\nport1.onmessage = ({ data }) => {\n  data.getReader().read().then((chunk) => {\n    console.log(chunk);\n  });\n};\n\nport2.postMessage(stream, [stream]);\nClass: ReadableStreamDefaultReader#\nHistory\nBy default, calling readableStream.getReader() with no arguments will return an instance of ReadableStreamDefaultReader. The default reader treats the chunks of data passed through the stream as opaque values, which allows the <ReadableStream> to work with generally any JavaScript value.\n\nnew ReadableStreamDefaultReader(stream)#\nAdded in: v16.5.0\nstream <ReadableStream>\nCreates a new <ReadableStreamDefaultReader> that is locked to the given <ReadableStream>.\n\nreadableStreamDefaultReader.cancel([reason])#\nAdded in: v16.5.0\nreason <any>\nReturns: A promise fulfilled with undefined.\nCancels the <ReadableStream> and returns a promise that is fulfilled when the underlying stream has been canceled.\n\nreadableStreamDefaultReader.closed#\nAdded in: v16.5.0\nType: <Promise> Fulfilled with undefined when the associated <ReadableStream> is closed or rejected if the stream errors or the reader's lock is released before the stream finishes closing.\nreadableStreamDefaultReader.read()#\nAdded in: v16.5.0\nReturns: A promise fulfilled with an object:\nvalue <ArrayBuffer>\ndone <boolean>\nRequests the next chunk of data from the underlying <ReadableStream> and returns a promise that is fulfilled with the data once it is", "doc_id": "98fa1933-6de3-4f53-9109-9cfc0a25491d", "embedding": null, "doc_hash": "c415f8cbc928a48eaf0a6357ef8388d2487aed4855cbd6eadf1efd241e564210", "extra_info": null, "node_info": {"start": 2839790, "end": 2843454}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "2c66a51e-2513-481c-a279-1e55ff11ccb1", "3": "18a86824-8a10-4d0a-b4be-18fdb64f3ac6"}}, "__type__": "1"}, "18a86824-8a10-4d0a-b4be-18fdb64f3ac6": {"__data__": {"text": "<any>\nReturns: A promise fulfilled with undefined.\nCancels the <ReadableStream> and returns a promise that is fulfilled when the underlying stream has been canceled.\n\nreadableStreamDefaultReader.closed#\nAdded in: v16.5.0\nType: <Promise> Fulfilled with undefined when the associated <ReadableStream> is closed or rejected if the stream errors or the reader's lock is released before the stream finishes closing.\nreadableStreamDefaultReader.read()#\nAdded in: v16.5.0\nReturns: A promise fulfilled with an object:\nvalue <ArrayBuffer>\ndone <boolean>\nRequests the next chunk of data from the underlying <ReadableStream> and returns a promise that is fulfilled with the data once it is available.\n\nreadableStreamDefaultReader.releaseLock()#\nAdded in: v16.5.0\nReleases this reader's lock on the underlying <ReadableStream>.\n\nClass: ReadableStreamBYOBReader#\nHistory\nThe ReadableStreamBYOBReader is an alternative consumer for byte-oriented <ReadableStream>s (those that are created with underlyingSource.type set equal to 'bytes' when the ReadableStream was created).\n\nThe BYOB is short for \"bring your own buffer\". This is a pattern that allows for more efficient reading of byte-oriented data that avoids extraneous copying.\n\nimport {\n  open,\n} from 'node:fs/promises';\n\nimport {\n  ReadableStream,\n} from 'node:stream/web';\n\nimport { Buffer } from 'node:buffer';\n\nclass Source {\n  type = 'bytes';\n  autoAllocateChunkSize = 1024;\n\n  async start(controller) {\n    this.file = await open(new URL(import.meta.url));\n    this.controller = controller;\n  }\n\n  async pull(controller) {\n    const view = controller.byobRequest?.view;\n    const {\n      bytesRead,\n    } = await this.file.read({\n      buffer: view,\n      offset: view.byteOffset,\n      length: view.byteLength,\n    });\n\n    if (bytesRead === 0) {\n      await this.file.close();\n      this.controller.close();\n    }\n    controller.byobRequest.respond(bytesRead);\n  }\n}\n\nconst stream = new ReadableStream(new Source());\n\nasync function read(stream) {\n  const reader = stream.getReader({ mode: 'byob' });\n\n  const chunks = [];\n  let result;\n  do {\n    result = await reader.read(Buffer.alloc(100));\n    if (result.value !== undefined)\n      chunks.push(Buffer.from(result.value));\n  } while (!result.done);\n\n  return Buffer.concat(chunks);\n}\n\nconst data = await read(stream);\nconsole.log(Buffer.from(data).toString());\nnew ReadableStreamBYOBReader(stream)#\nAdded in: v16.5.0\nstream <ReadableStream>\nCreates a new ReadableStreamBYOBReader that is locked to the given <ReadableStream>.\n\nreadableStreamBYOBReader.cancel([reason])#\nAdded in: v16.5.0\nreason <any>\nReturns: A promise fulfilled with undefined.\nCancels the <ReadableStream> and returns a promise that is fulfilled when the underlying stream has been canceled.\n\nreadableStreamBYOBReader.closed#\nAdded in: v16.5.0\nType: <Promise> Fulfilled with undefined when the associated <ReadableStream> is closed or rejected if the stream errors or the reader's lock is released before the stream finishes closing.\nreadableStreamBYOBReader.read(view)#\nAdded in: v16.5.0\nview <Buffer> | <TypedArray> | <DataView>\nReturns: A promise fulfilled with an object:\nvalue <ArrayBuffer>\ndone <boolean>\nRequests the next chunk of data from the", "doc_id": "18a86824-8a10-4d0a-b4be-18fdb64f3ac6", "embedding": null, "doc_hash": "e2b3b430c63457d93aa7ce520525c3befb4f62f886273dad78e7d4bef3bde0fe", "extra_info": null, "node_info": {"start": 2843486, "end": 2846711}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "98fa1933-6de3-4f53-9109-9cfc0a25491d", "3": "eb2e8e1a-44a4-4dc2-a891-d313441238a4"}}, "__type__": "1"}, "eb2e8e1a-44a4-4dc2-a891-d313441238a4": {"__data__": {"text": "in: v16.5.0\nreason <any>\nReturns: A promise fulfilled with undefined.\nCancels the <ReadableStream> and returns a promise that is fulfilled when the underlying stream has been canceled.\n\nreadableStreamBYOBReader.closed#\nAdded in: v16.5.0\nType: <Promise> Fulfilled with undefined when the associated <ReadableStream> is closed or rejected if the stream errors or the reader's lock is released before the stream finishes closing.\nreadableStreamBYOBReader.read(view)#\nAdded in: v16.5.0\nview <Buffer> | <TypedArray> | <DataView>\nReturns: A promise fulfilled with an object:\nvalue <ArrayBuffer>\ndone <boolean>\nRequests the next chunk of data from the underlying <ReadableStream> and returns a promise that is fulfilled with the data once it is available.\n\nDo not pass a pooled <Buffer> object instance in to this method. Pooled Buffer objects are created using Buffer.allocUnsafe(), or Buffer.from(), or are often returned by various node:fs module callbacks. These types of Buffers use a shared underlying <ArrayBuffer> object that contains all of the data from all of the pooled Buffer instances. When a Buffer, <TypedArray>, or <DataView> is passed in to readableStreamBYOBReader.read(), the view's underlying ArrayBuffer is detached, invalidating all existing views that may exist on that ArrayBuffer. This can have disastrous consequences for your application.\n\nreadableStreamBYOBReader.releaseLock()#\nAdded in: v16.5.0\nReleases this reader's lock on the underlying <ReadableStream>.\n\nClass: ReadableStreamDefaultController#\nAdded in: v16.5.0\nEvery <ReadableStream> has a controller that is responsible for the internal state and management of the stream's queue. The ReadableStreamDefaultController is the default controller implementation for ReadableStreams that are not byte-oriented.\n\nreadableStreamDefaultController.close()#\nAdded in: v16.5.0\nCloses the <ReadableStream> to which this controller is associated.\n\nreadableStreamDefaultController.desiredSize#\nAdded in: v16.5.0\nType: <number>\nReturns the amount of data remaining to fill the <ReadableStream>'s queue.\n\nreadableStreamDefaultController.enqueue([chunk])#\nAdded in: v16.5.0\nchunk <any>\nAppends a new chunk of data to the <ReadableStream>'s queue.\n\nreadableStreamDefaultController.error([error])#\nAdded in: v16.5.0\nerror <any>\nSignals an error that causes the <ReadableStream> to error and close.\n\nClass: ReadableByteStreamController#\nHistory\nEvery <ReadableStream> has a controller that is responsible for the internal state and management of the stream's queue. The ReadableByteStreamController is for byte-oriented ReadableStreams.\n\nreadableByteStreamController.byobRequest#\nAdded in: v16.5.0\nType: <ReadableStreamBYOBRequest>\nreadableByteStreamController.close()#\nAdded in: v16.5.0\nCloses the <ReadableStream> to which this controller is associated.\n\nreadableByteStreamController.desiredSize#\nAdded in: v16.5.0\nType: <number>\nReturns the amount of data remaining to fill the <ReadableStream>'s queue.\n\nreadableByteStreamController.enqueue(chunk)#\nAdded in: v16.5.0\nchunk: <Buffer> | <TypedArray> | <DataView>\nAppends a new chunk of data to the <ReadableStream>'s queue.\n\nreadableByteStreamController.error([error])#\nAdded in: v16.5.0\nerror <any>\nSignals an error that causes the <ReadableStream> to error and close.\n\nClass: ReadableStreamBYOBRequest#\nHistory\nWhen using ReadableByteStreamController in byte-oriented streams, and when using the ReadableStreamBYOBReader, the readableByteStreamController.byobRequest property provides access to a ReadableStreamBYOBRequest instance that represents the current read request. The object is used to gain access to the ArrayBuffer/TypedArray that has been provided for the read", "doc_id": "eb2e8e1a-44a4-4dc2-a891-d313441238a4", "embedding": null, "doc_hash": "e8c5c7af269a8bf47311d44eb9f6775fd0c127b1d3cbfa6c36ab43db6e1361fd", "extra_info": null, "node_info": {"start": 2846738, "end": 2850427}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "18a86824-8a10-4d0a-b4be-18fdb64f3ac6", "3": "740732ce-bc1a-4c91-a2d3-5c0ab10bc60b"}}, "__type__": "1"}, "740732ce-bc1a-4c91-a2d3-5c0ab10bc60b": {"__data__": {"text": "in: v16.5.0\nchunk: <Buffer> | <TypedArray> | <DataView>\nAppends a new chunk of data to the <ReadableStream>'s queue.\n\nreadableByteStreamController.error([error])#\nAdded in: v16.5.0\nerror <any>\nSignals an error that causes the <ReadableStream> to error and close.\n\nClass: ReadableStreamBYOBRequest#\nHistory\nWhen using ReadableByteStreamController in byte-oriented streams, and when using the ReadableStreamBYOBReader, the readableByteStreamController.byobRequest property provides access to a ReadableStreamBYOBRequest instance that represents the current read request. The object is used to gain access to the ArrayBuffer/TypedArray that has been provided for the read request to fill, and provides methods for signaling that the data has been provided.\n\nreadableStreamBYOBRequest.respond(bytesWritten)#\nAdded in: v16.5.0\nbytesWritten <number>\nSignals that a bytesWritten number of bytes have been written to readableStreamBYOBRequest.view.\n\nreadableStreamBYOBRequest.respondWithNewView(view)#\nAdded in: v16.5.0\nview <Buffer> | <TypedArray> | <DataView>\nSignals that the request has been fulfilled with bytes written to a new Buffer, TypedArray, or DataView.\n\nreadableStreamBYOBRequest.view#\nAdded in: v16.5.0\nType: <Buffer> | <TypedArray> | <DataView>\nClass: WritableStream#\nHistory\nThe WritableStream is a destination to which stream data is sent.\n\nimport {\n  WritableStream,\n} from 'node:stream/web';\n\nconst stream = new WritableStream({\n  write(chunk) {\n    console.log(chunk);\n  },\n});\n\nawait stream.getWriter().write('Hello World');\nnew WritableStream([underlyingSink[, strategy]])#\nAdded in: v16.5.0\nunderlyingSink <Object>\nstart <Function> A user-defined function that is invoked immediately when the WritableStream is created.\ncontroller <WritableStreamDefaultController>\nReturns: undefined or a promise fulfilled with undefined.\nwrite <Function> A user-defined function that is invoked when a chunk of data has been written to the WritableStream.\nchunk <any>\ncontroller <WritableStreamDefaultController>\nReturns: A promise fulfilled with undefined.\nclose <Function> A user-defined function that is called when the WritableStream is closed.\nReturns: A promise fulfilled with undefined.\nabort <Function> A user-defined function that is called to abruptly close the WritableStream.\nreason <any>\nReturns: A promise fulfilled with undefined.\ntype <any> The type option is reserved for future use and must be undefined.\nstrategy <Object>\nhighWaterMark <number> The maximum internal queue size before backpressure is applied.\nsize <Function> A user-defined function used to identify the size of each chunk of data.\nchunk <any>\nReturns: <number>\nwritableStream.abort([reason])#\nAdded in: v16.5.0\nreason <any>\nReturns: A promise fulfilled with undefined.\nAbruptly terminates the WritableStream. All queued writes will be canceled with their associated promises rejected.\n\nwritableStream.close()#\nAdded in: v16.5.0\nReturns: A promise fulfilled with undefined.\nCloses the WritableStream when no additional writes are expected.\n\nwritableStream.getWriter()#\nAdded in: v16.5.0\nReturns: <WritableStreamDefaultWriter>\nCreates and creates a new writer instance that can be used to write data into the WritableStream.\n\nwritableStream.locked#\nAdded in: v16.5.0\nType: <boolean>\nThe writableStream.locked property is false by default, and is switched to true while there is an active writer attached to this WritableStream.\n\nTransferring with postMessage()#\nA <WritableStream> instance can be transferred using a <MessagePort>.\n\nconst stream = new WritableStream(getWritableSinkSomehow());\n\nconst", "doc_id": "740732ce-bc1a-4c91-a2d3-5c0ab10bc60b", "embedding": null, "doc_hash": "1976cf8488dbf42becb52678fb14f677dbba9678ac2303648aa5d81c12431139", "extra_info": null, "node_info": {"start": 2850401, "end": 2853986}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "eb2e8e1a-44a4-4dc2-a891-d313441238a4", "3": "4bf70481-825f-4b92-92bc-9443888dfe24"}}, "__type__": "1"}, "4bf70481-825f-4b92-92bc-9443888dfe24": {"__data__": {"text": "v16.5.0\nReturns: A promise fulfilled with undefined.\nCloses the WritableStream when no additional writes are expected.\n\nwritableStream.getWriter()#\nAdded in: v16.5.0\nReturns: <WritableStreamDefaultWriter>\nCreates and creates a new writer instance that can be used to write data into the WritableStream.\n\nwritableStream.locked#\nAdded in: v16.5.0\nType: <boolean>\nThe writableStream.locked property is false by default, and is switched to true while there is an active writer attached to this WritableStream.\n\nTransferring with postMessage()#\nA <WritableStream> instance can be transferred using a <MessagePort>.\n\nconst stream = new WritableStream(getWritableSinkSomehow());\n\nconst { port1, port2 } = new MessageChannel();\n\nport1.onmessage = ({ data }) => {\n  data.getWriter().write('hello');\n};\n\nport2.postMessage(stream, [stream]);\nClass: WritableStreamDefaultWriter#\nHistory\nnew WritableStreamDefaultWriter(stream)#\nAdded in: v16.5.0\nstream <WritableStream>\nCreates a new WritableStreamDefaultWriter that is locked to the given WritableStream.\n\nwritableStreamDefaultWriter.abort([reason])#\nAdded in: v16.5.0\nreason <any>\nReturns: A promise fulfilled with undefined.\nAbruptly terminates the WritableStream. All queued writes will be canceled with their associated promises rejected.\n\nwritableStreamDefaultWriter.close()#\nAdded in: v16.5.0\nReturns: A promise fulfilled with undefined.\nCloses the WritableStream when no additional writes are expected.\n\nwritableStreamDefaultWriter.closed#\nAdded in: v16.5.0\nType: <Promise> Fulfilled with undefined when the associated <WritableStream> is closed or rejected if the stream errors or the writer's lock is released before the stream finishes closing.\nwritableStreamDefaultWriter.desiredSize#\nAdded in: v16.5.0\nType: <number>\nThe amount of data required to fill the <WritableStream>'s queue.\n\nwritableStreamDefaultWriter.ready#\nAdded in: v16.5.0\ntype: A promise that is fulfilled with undefined when the writer is ready to be used.\nwritableStreamDefaultWriter.releaseLock()#\nAdded in: v16.5.0\nReleases this writer's lock on the underlying <ReadableStream>.\n\nwritableStreamDefaultWriter.write([chunk])#\nAdded in: v16.5.0\nchunk: <any>\nReturns: A promise fulfilled with undefined.\nAppends a new chunk of data to the <WritableStream>'s queue.\n\nClass: WritableStreamDefaultController#\nHistory\nThe WritableStreamDefaultController manage's the <WritableStream>'s internal state.\n\nwritableStreamDefaultController.error([error])#\nAdded in: v16.5.0\nerror <any>\nCalled by user-code to signal that an error has occurred while processing the WritableStream data. When called, the <WritableStream> will be aborted, with currently pending writes canceled.\n\nwritableStreamDefaultController.signal#\nType: <AbortSignal> An AbortSignal that can be used to cancel pending write or close operations when a <WritableStream> is aborted.\nClass: TransformStream#\nHistory\nA TransformStream consists of a <ReadableStream> and a <WritableStream> that are connected such that the data written to the WritableStream is received, and potentially transformed, before being pushed into the ReadableStream's queue.\n\nimport {\n  TransformStream,\n} from 'node:stream/web';\n\nconst transform = new TransformStream({\n  transform(chunk, controller) {\n    controller.enqueue(chunk.toUpperCase());\n  },\n});\n\nawait Promise.all([\n  transform.writable.getWriter().write('A'),\n  transform.readable.getReader().read(),\n]);\nnew TransformStream([transformer[, writableStrategy[, readableStrategy]]])#\nAdded in:", "doc_id": "4bf70481-825f-4b92-92bc-9443888dfe24", "embedding": null, "doc_hash": "b93eec71961696cff901386418a21973f4ee04ac9a8344f74cf9d23f2241d5bd", "extra_info": null, "node_info": {"start": 2853976, "end": 2857478}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "740732ce-bc1a-4c91-a2d3-5c0ab10bc60b", "3": "f71c0155-c447-4c30-87da-b0105d12a537"}}, "__type__": "1"}, "f71c0155-c447-4c30-87da-b0105d12a537": {"__data__": {"text": "when a <WritableStream> is aborted.\nClass: TransformStream#\nHistory\nA TransformStream consists of a <ReadableStream> and a <WritableStream> that are connected such that the data written to the WritableStream is received, and potentially transformed, before being pushed into the ReadableStream's queue.\n\nimport {\n  TransformStream,\n} from 'node:stream/web';\n\nconst transform = new TransformStream({\n  transform(chunk, controller) {\n    controller.enqueue(chunk.toUpperCase());\n  },\n});\n\nawait Promise.all([\n  transform.writable.getWriter().write('A'),\n  transform.readable.getReader().read(),\n]);\nnew TransformStream([transformer[, writableStrategy[, readableStrategy]]])#\nAdded in: v16.5.0\ntransformer <Object>\nstart <Function> A user-defined function that is invoked immediately when the TransformStream is created.\ncontroller <TransformStreamDefaultController>\nReturns: undefined or a promise fulfilled with undefined\ntransform <Function> A user-defined function that receives, and potentially modifies, a chunk of data written to transformStream.writable, before forwarding that on to transformStream.readable.\nchunk <any>\ncontroller <TransformStreamDefaultController>\nReturns: A promise fulfilled with undefined.\nflush <Function> A user-defined function that is called immediately before the writable side of the TransformStream is closed, signaling the end of the transformation process.\ncontroller <TransformStreamDefaultController>\nReturns: A promise fulfilled with undefined.\nreadableType <any> the readableType option is reserved for future use and must be undefined.\nwritableType <any> the writableType option is reserved for future use and must be undefined.\nwritableStrategy <Object>\nhighWaterMark <number> The maximum internal queue size before backpressure is applied.\nsize <Function> A user-defined function used to identify the size of each chunk of data.\nchunk <any>\nReturns: <number>\nreadableStrategy <Object>\nhighWaterMark <number> The maximum internal queue size before backpressure is applied.\nsize <Function> A user-defined function used to identify the size of each chunk of data.\nchunk <any>\nReturns: <number>\ntransformStream.readable#\nAdded in: v16.5.0\nType: <ReadableStream>\ntransformStream.writable#\nAdded in: v16.5.0\nType: <WritableStream>\nTransferring with postMessage()#\nA <TransformStream> instance can be transferred using a <MessagePort>.\n\nconst stream = new TransformStream();\n\nconst { port1, port2 } = new MessageChannel();\n\nport1.onmessage = ({ data }) => {\n  const { writable, readable } = data;\n  // ...\n};\n\nport2.postMessage(stream, [stream]);\nClass: TransformStreamDefaultController#\nHistory\nThe TransformStreamDefaultController manages the internal state of the TransformStream.\n\ntransformStreamDefaultController.desiredSize#\nAdded in: v16.5.0\nType: <number>\nThe amount of data required to fill the readable side's queue.\n\ntransformStreamDefaultController.enqueue([chunk])#\nAdded in: v16.5.0\nchunk <any>\nAppends a chunk of data to the readable side's queue.\n\ntransformStreamDefaultController.error([reason])#\nAdded in: v16.5.0\nreason <any>\nSignals to both the readable and writable side that an error has occurred while processing the transform data, causing both sides to be abruptly closed.\n\ntransformStreamDefaultController.terminate()#\nAdded in: v16.5.0\nCloses the readable side of the transport and causes the writable side to be abruptly closed with an error.\n\nClass: ByteLengthQueuingStrategy#\nHistory\nnew ByteLengthQueuingStrategy(options)#\nAdded in: v16.5.0\noptions <Object>\nhighWaterMark <number>\nbyteLengthQueuingStrategy.highWaterMark#\nAdded in: v16.5.0\nType: <number>\nbyteLengthQueuingStrategy.size#\nAdded in: v16.5.0\nType: <Function>\nchunk", "doc_id": "f71c0155-c447-4c30-87da-b0105d12a537", "embedding": null, "doc_hash": "d95fddbb550e9b6016c01f3004c766c99b8f45c6e79c7a422de8fac4361635b9", "extra_info": null, "node_info": {"start": 2857469, "end": 2861164}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "4bf70481-825f-4b92-92bc-9443888dfe24", "3": "bf67375e-eed0-4373-a87e-7703de3a87c8"}}, "__type__": "1"}, "bf67375e-eed0-4373-a87e-7703de3a87c8": {"__data__": {"text": "<any>\nSignals to both the readable and writable side that an error has occurred while processing the transform data, causing both sides to be abruptly closed.\n\ntransformStreamDefaultController.terminate()#\nAdded in: v16.5.0\nCloses the readable side of the transport and causes the writable side to be abruptly closed with an error.\n\nClass: ByteLengthQueuingStrategy#\nHistory\nnew ByteLengthQueuingStrategy(options)#\nAdded in: v16.5.0\noptions <Object>\nhighWaterMark <number>\nbyteLengthQueuingStrategy.highWaterMark#\nAdded in: v16.5.0\nType: <number>\nbyteLengthQueuingStrategy.size#\nAdded in: v16.5.0\nType: <Function>\nchunk <any>\nReturns: <number>\nClass: CountQueuingStrategy#\nHistory\nnew CountQueuingStrategy(options)#\nAdded in: v16.5.0\noptions <Object>\nhighWaterMark <number>\ncountQueuingStrategy.highWaterMark#\nAdded in: v16.5.0\nType: <number>\ncountQueuingStrategy.size#\nAdded in: v16.5.0\nType: <Function>\nchunk <any>\nReturns: <number>\nClass: TextEncoderStream#\nHistory\nnew TextEncoderStream()#\nAdded in: v16.6.0\nCreates a new TextEncoderStream instance.\n\ntextEncoderStream.encoding#\nAdded in: v16.6.0\nType: <string>\nThe encoding supported by the TextEncoderStream instance.\n\ntextEncoderStream.readable#\nAdded in: v16.6.0\nType: <ReadableStream>\ntextEncoderStream.writable#\nAdded in: v16.6.0\nType: <WritableStream>\nClass: TextDecoderStream#\nHistory\nnew TextDecoderStream([encoding[, options]])#\nAdded in: v16.6.0\nencoding <string> Identifies the encoding that this TextDecoder instance supports. Default: 'utf-8'.\noptions <Object>\nfatal <boolean> true if decoding failures are fatal.\nignoreBOM <boolean> When true, the TextDecoderStream will include the byte order mark in the decoded result. When false, the byte order mark will be removed from the output. This option is only used when encoding is 'utf-8', 'utf-16be', or 'utf-16le'. Default: false.\nCreates a new TextDecoderStream instance.\n\ntextDecoderStream.encoding#\nAdded in: v16.6.0\nType: <string>\nThe encoding supported by the TextDecoderStream instance.\n\ntextDecoderStream.fatal#\nAdded in: v16.6.0\nType: <boolean>\nThe value will be true if decoding errors result in a TypeError being thrown.\n\ntextDecoderStream.ignoreBOM#\nAdded in: v16.6.0\nType: <boolean>\nThe value will be true if the decoding result will include the byte order mark.\n\ntextDecoderStream.readable#\nAdded in: v16.6.0\nType: <ReadableStream>\ntextDecoderStream.writable#\nAdded in: v16.6.0\nType: <WritableStream>\nClass: CompressionStream#\nHistory\nnew CompressionStream(format)#\nAdded in: v17.0.0\nformat <string> One of either 'deflate' or 'gzip'.\ncompressionStream.readable#\nAdded in: v17.0.0\nType: <ReadableStream>\ncompressionStream.writable#\nAdded in: v17.0.0\nType: <WritableStream>\nClass: DecompressionStream#\nHistory\nnew DecompressionStream(format)#\nAdded in: v17.0.0\nformat <string> One of either 'deflate' or 'gzip'.\ndecompressionStream.readable#\nAdded in: v17.0.0\nType: <ReadableStream>\ndecompressionStream.writable#\nAdded in: v17.0.0\nType: <WritableStream>\nUtility Consumers#\nAdded in: v16.7.0\nThe utility consumer functions provide common options for consuming", "doc_id": "bf67375e-eed0-4373-a87e-7703de3a87c8", "embedding": null, "doc_hash": "9284c5a351c6f445116b9a6d7f9042a0f90b9d7c21539ce37c9ee06340cdf2ef", "extra_info": null, "node_info": {"start": 2861220, "end": 2864309}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f71c0155-c447-4c30-87da-b0105d12a537", "3": "b741adfb-6bc4-49cd-971e-1ee02bfbcfab"}}, "__type__": "1"}, "b741adfb-6bc4-49cd-971e-1ee02bfbcfab": {"__data__": {"text": "One of either 'deflate' or 'gzip'.\ncompressionStream.readable#\nAdded in: v17.0.0\nType: <ReadableStream>\ncompressionStream.writable#\nAdded in: v17.0.0\nType: <WritableStream>\nClass: DecompressionStream#\nHistory\nnew DecompressionStream(format)#\nAdded in: v17.0.0\nformat <string> One of either 'deflate' or 'gzip'.\ndecompressionStream.readable#\nAdded in: v17.0.0\nType: <ReadableStream>\ndecompressionStream.writable#\nAdded in: v17.0.0\nType: <WritableStream>\nUtility Consumers#\nAdded in: v16.7.0\nThe utility consumer functions provide common options for consuming streams.\n\nThey are accessed using:\n\nimport {\n  arrayBuffer,\n  blob,\n  buffer,\n  json,\n  text,\n} from 'node:stream/consumers';\nstreamConsumers.arrayBuffer(stream)#\nAdded in: v16.7.0\nstream <ReadableStream> | <stream.Readable> | <AsyncIterator>\nReturns: <Promise> Fulfills with an ArrayBuffer containing the full contents of the stream.\nimport { buffer as arrayBuffer } from 'node:stream/consumers';\nimport { Readable } from 'node:stream';\nimport { TextEncoder } from 'node:util';\n\nconst encoder = new TextEncoder();\nconst dataArray = encoder.encode('hello world from consumers!');\n\nconst readable = Readable.from(dataArray);\nconst data = await arrayBuffer(readable);\nconsole.log(`from readable: ${data.byteLength}`);\nstreamConsumers.blob(stream)#\nAdded in: v16.7.0\nstream <ReadableStream> | <stream.Readable> | <AsyncIterator>\nReturns: <Promise> Fulfills with a <Blob> containing the full contents of the stream.\nimport { blob } from 'node:stream/consumers';\n\nconst dataBlob = new Blob(['hello world from consumers!']);\n\nconst readable = dataBlob.stream();\nconst data = await blob(readable);\nconsole.log(`from readable: ${data.size}`);\nstreamConsumers.buffer(stream)#\nAdded in: v16.7.0\nstream <ReadableStream> | <stream.Readable> | <AsyncIterator>\nReturns: <Promise> Fulfills with a <Buffer> containing the full contents of the stream.\nimport { buffer } from 'node:stream/consumers';\nimport { Readable } from 'node:stream';\nimport { Buffer } from 'node:buffer';\n\nconst dataBuffer = Buffer.from('hello world from consumers!');\n\nconst readable = Readable.from(dataBuffer);\nconst data = await buffer(readable);\nconsole.log(`from readable: ${data.length}`);\nstreamConsumers.json(stream)#\nAdded in: v16.7.0\nstream <ReadableStream> | <stream.Readable> | <AsyncIterator>\nReturns: <Promise> Fulfills with the contents of the stream parsed as a UTF-8 encoded string that is then passed through JSON.parse().\nimport { json } from 'node:stream/consumers';\nimport { Readable } from 'node:stream';\n\nconst items = Array.from(\n  {\n    length: 100,\n  },\n  () => ({\n    message: 'hello world from consumers!',\n  }),\n);\n\nconst readable = Readable.from(JSON.stringify(items));\nconst data = await json(readable);\nconsole.log(`from readable: ${data.length}`);\nstreamConsumers.text(stream)#\nAdded in: v16.7.0\nstream <ReadableStream> | <stream.Readable> | <AsyncIterator>\nReturns: <Promise> Fulfills with the contents of the stream parsed as a UTF-8 encoded string.\nimport { text } from 'node:stream/consumers';\nimport { Readable } from 'node:stream';\n\nconst readable = Readable.from('Hello world from consumers!');\nconst data =", "doc_id": "b741adfb-6bc4-49cd-971e-1ee02bfbcfab", "embedding": null, "doc_hash": "53f80659696ffe7e1fff0fd230eda59bf4dc7fc4266b66281450d9cb10d08f96", "extra_info": null, "node_info": {"start": 2864355, "end": 2867517}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "bf67375e-eed0-4373-a87e-7703de3a87c8", "3": "12b61431-9abd-4d0e-ac5c-18b8697d2ffa"}}, "__type__": "1"}, "12b61431-9abd-4d0e-ac5c-18b8697d2ffa": {"__data__": {"text": "   length: 100,\n  },\n  () => ({\n    message: 'hello world from consumers!',\n  }),\n);\n\nconst readable = Readable.from(JSON.stringify(items));\nconst data = await json(readable);\nconsole.log(`from readable: ${data.length}`);\nstreamConsumers.text(stream)#\nAdded in: v16.7.0\nstream <ReadableStream> | <stream.Readable> | <AsyncIterator>\nReturns: <Promise> Fulfills with the contents of the stream parsed as a UTF-8 encoded string.\nimport { text } from 'node:stream/consumers';\nimport { Readable } from 'node:stream';\n\nconst readable = Readable.from('Hello world from consumers!');\nconst data = await text(readable);\nconsole.log(`from readable: ${data.length}`);\nWorker threads#\nStability: 2 - Stable\nSource Code: lib/worker_threads.js\n\nThe node:worker_threads module enables the use of threads that execute JavaScript in parallel. To access it:\n\nconst worker = require('node:worker_threads');\nWorkers (threads) are useful for performing CPU-intensive JavaScript operations. They do not help much with I/O-intensive work. The Node.js built-in asynchronous I/O operations are more efficient than Workers can be.\n\nUnlike child_process or cluster, worker_threads can share memory. They do so by transferring ArrayBuffer instances or sharing SharedArrayBuffer instances.\n\nconst {\n  Worker, isMainThread, parentPort, workerData,\n} = require('node:worker_threads');\n\nif (isMainThread) {\n  module.exports = function parseJSAsync(script) {\n    return new Promise((resolve, reject) => {\n      const worker = new Worker(__filename, {\n        workerData: script,\n      });\n      worker.on('message', resolve);\n      worker.on('error', reject);\n      worker.on('exit', (code) => {\n        if (code !== 0)\n          reject(new Error(`Worker stopped with exit code ${code}`));\n      });\n    });\n  };\n} else {\n  const { parse } = require('some-js-parsing-library');\n  const script = workerData;\n  parentPort.postMessage(parse(script));\n}\nThe above example spawns a Worker thread for each parseJSAsync() call. In practice, use a pool of Workers for these kinds of tasks. Otherwise, the overhead of creating Workers would likely exceed their benefit.\n\nWhen implementing a worker pool, use the AsyncResource API to inform diagnostic tools (e.g. to provide asynchronous stack traces) about the correlation between tasks and their outcomes. See \"Using AsyncResource for a Worker thread pool\" in the async_hooks documentation for an example implementation.\n\nWorker threads inherit non-process-specific options by default. Refer to Worker constructor options to know how to customize worker thread options, specifically argv and execArgv options.\n\nworker.getEnvironmentData(key)#\nHistory\nkey <any> Any arbitrary, cloneable JavaScript value that can be used as a <Map> key.\nReturns: <any>\nWithin a worker thread, worker.getEnvironmentData() returns a clone of data passed to the spawning thread's worker.setEnvironmentData(). Every new Worker receives its own copy of the environment data automatically.\n\nconst {\n  Worker,\n  isMainThread,\n  setEnvironmentData,\n  getEnvironmentData,\n} = require('node:worker_threads');\n\nif (isMainThread) {\n  setEnvironmentData('Hello', 'World!');\n  const worker = new Worker(__filename);\n} else {\n  console.log(getEnvironmentData('Hello'));  // Prints 'World!'.\n}\nworker.isMainThread#\nAdded in:", "doc_id": "12b61431-9abd-4d0e-ac5c-18b8697d2ffa", "embedding": null, "doc_hash": "98e8491ba45acaf24cc56531af7c433f35a0824296ab2a96f7b3b24d3aba53d4", "extra_info": null, "node_info": {"start": 2867516, "end": 2870815}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "b741adfb-6bc4-49cd-971e-1ee02bfbcfab", "3": "449a0449-9615-4daf-a41a-21712f8df628"}}, "__type__": "1"}, "449a0449-9615-4daf-a41a-21712f8df628": {"__data__": {"text": "<any> Any arbitrary, cloneable JavaScript value that can be used as a <Map> key.\nReturns: <any>\nWithin a worker thread, worker.getEnvironmentData() returns a clone of data passed to the spawning thread's worker.setEnvironmentData(). Every new Worker receives its own copy of the environment data automatically.\n\nconst {\n  Worker,\n  isMainThread,\n  setEnvironmentData,\n  getEnvironmentData,\n} = require('node:worker_threads');\n\nif (isMainThread) {\n  setEnvironmentData('Hello', 'World!');\n  const worker = new Worker(__filename);\n} else {\n  console.log(getEnvironmentData('Hello'));  // Prints 'World!'.\n}\nworker.isMainThread#\nAdded in: v10.5.0\n<boolean>\nIs true if this code is not running inside of a Worker thread.\n\nconst { Worker, isMainThread } = require('node:worker_threads');\n\nif (isMainThread) {\n  // This re-loads the current file inside a Worker instance.\n  new Worker(__filename);\n} else {\n  console.log('Inside Worker!');\n  console.log(isMainThread);  // Prints 'false'.\n}\nworker.markAsUntransferable(object)#\nAdded in: v14.5.0, v12.19.0\nMark an object as not transferable. If object occurs in the transfer list of a port.postMessage() call, it is ignored.\n\nIn particular, this makes sense for objects that can be cloned, rather than transferred, and which are used by other objects on the sending side. For example, Node.js marks the ArrayBuffers it uses for its Buffer pool with this.\n\nThis operation cannot be undone.\n\nconst { MessageChannel, markAsUntransferable } = require('node:worker_threads');\n\nconst pooledBuffer = new ArrayBuffer(8);\nconst typedArray1 = new Uint8Array(pooledBuffer);\nconst typedArray2 = new Float64Array(pooledBuffer);\n\nmarkAsUntransferable(pooledBuffer);\n\nconst { port1 } = new MessageChannel();\nport1.postMessage(typedArray1, [ typedArray1.buffer ]);\n\n// The following line prints the contents of typedArray1 -- it still owns\n// its memory and has been cloned, not transferred. Without\n// `markAsUntransferable()`, this would print an empty Uint8Array.\n// typedArray2 is intact as well.\nconsole.log(typedArray1);\nconsole.log(typedArray2);\nThere is no equivalent to this API in browsers.\n\nworker.moveMessagePortToContext(port, contextifiedSandbox)#\nAdded in: v11.13.0\nport <MessagePort> The message port to transfer.\n\ncontextifiedSandbox <Object> A contextified object as returned by the vm.createContext() method.\n\nReturns: <MessagePort>\n\nTransfer a MessagePort to a different vm Context. The original port object is rendered unusable, and the returned MessagePort instance takes its place.\n\nThe returned MessagePort is an object in the target context and inherits from its global Object class. Objects passed to the port.onmessage() listener are also created in the target context and inherit from its global Object class.\n\nHowever, the created MessagePort no longer inherits from EventTarget, and only port.onmessage() can be used to receive events using it.\n\nworker.parentPort#\nAdded in: v10.5.0\n<null> | <MessagePort>\nIf this thread is a Worker, this is a MessagePort allowing communication with the parent thread. Messages sent using parentPort.postMessage() are available in the parent thread using worker.on('message'), and messages sent from the parent thread using worker.postMessage() are available in this thread using parentPort.on('message').\n\nconst { Worker, isMainThread, parentPort } = require('node:worker_threads');\n\nif (isMainThread) {\n  const worker = new Worker(__filename);\n  worker.once('message', (message) => {\n    console.log(message);  // Prints 'Hello,", "doc_id": "449a0449-9615-4daf-a41a-21712f8df628", "embedding": null, "doc_hash": "6a4e3ff5b58c22c42212a3950507164e8fc8712330e181b6068e933b62745c5a", "extra_info": null, "node_info": {"start": 2870773, "end": 2874295}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "12b61431-9abd-4d0e-ac5c-18b8697d2ffa", "3": "aa33f70a-f3b5-48b1-8ee7-0c0c1ccda6f2"}}, "__type__": "1"}, "aa33f70a-f3b5-48b1-8ee7-0c0c1ccda6f2": {"__data__": {"text": "from EventTarget, and only port.onmessage() can be used to receive events using it.\n\nworker.parentPort#\nAdded in: v10.5.0\n<null> | <MessagePort>\nIf this thread is a Worker, this is a MessagePort allowing communication with the parent thread. Messages sent using parentPort.postMessage() are available in the parent thread using worker.on('message'), and messages sent from the parent thread using worker.postMessage() are available in this thread using parentPort.on('message').\n\nconst { Worker, isMainThread, parentPort } = require('node:worker_threads');\n\nif (isMainThread) {\n  const worker = new Worker(__filename);\n  worker.once('message', (message) => {\n    console.log(message);  // Prints 'Hello, world!'.\n  });\n  worker.postMessage('Hello, world!');\n} else {\n  // When a message from the parent thread is received, send it back:\n  parentPort.once('message', (message) => {\n    parentPort.postMessage(message);\n  });\n}\nworker.receiveMessageOnPort(port)#\nHistory\nport <MessagePort> | <BroadcastChannel>\n\nReturns: <Object> | <undefined>\n\nReceive a single message from a given MessagePort. If no message is available, undefined is returned, otherwise an object with a single message property that contains the message payload, corresponding to the oldest message in the MessagePort's queue.\n\nconst { MessageChannel, receiveMessageOnPort } = require('node:worker_threads');\nconst { port1, port2 } = new MessageChannel();\nport1.postMessage({ hello: 'world' });\n\nconsole.log(receiveMessageOnPort(port2));\n// Prints: { message: { hello: 'world' } }\nconsole.log(receiveMessageOnPort(port2));\n// Prints: undefined\nWhen this function is used, no 'message' event is emitted and the onmessage listener is not invoked.\n\nworker.resourceLimits#\nAdded in: v13.2.0, v12.16.0\n<Object>\nmaxYoungGenerationSizeMb <number>\nmaxOldGenerationSizeMb <number>\ncodeRangeSizeMb <number>\nstackSizeMb <number>\nProvides the set of JS engine resource constraints inside this Worker thread. If the resourceLimits option was passed to the Worker constructor, this matches its values.\n\nIf this is used in the main thread, its value is an empty object.\n\nworker.SHARE_ENV#\nAdded in: v11.14.0\n<symbol>\nA special value that can be passed as the env option of the Worker constructor, to indicate that the current thread and the Worker thread should share read and write access to the same set of environment variables.\n\nconst { Worker, SHARE_ENV } = require('node:worker_threads');\nnew Worker('process.env.SET_IN_WORKER = \"foo\"', { eval: true, env: SHARE_ENV })\n  .on('exit', () => {\n    console.log(process.env.SET_IN_WORKER);  // Prints 'foo'.\n  });\nworker.setEnvironmentData(key[, value])#\nHistory\nkey <any> Any arbitrary, cloneable JavaScript value that can be used as a <Map> key.\nvalue <any> Any arbitrary, cloneable JavaScript value that will be cloned and passed automatically to all new Worker instances. If value is passed as undefined, any previously set value for the key will be deleted.\nThe worker.setEnvironmentData() API sets the content of worker.getEnvironmentData() in the current thread and all new Worker instances spawned from the current context.\n\nworker.threadId#\nAdded in: v10.5.0\n<integer>\nAn integer identifier for the current thread. On the corresponding worker object (if there is any), it is available as worker.threadId. This value is unique for each Worker instance inside a single process.\n\nworker.workerData#\nAdded in: v10.5.0\nAn arbitrary JavaScript value that contains a clone of the data passed to this thread's", "doc_id": "aa33f70a-f3b5-48b1-8ee7-0c0c1ccda6f2", "embedding": null, "doc_hash": "501b3c31b88a6b083a02f3c1738e4d8ec1125695b33dd4ffda3502580e206a1c", "extra_info": null, "node_info": {"start": 2874243, "end": 2877757}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "449a0449-9615-4daf-a41a-21712f8df628", "3": "6492bf57-d943-4b47-bc4b-7425a48a13a5"}}, "__type__": "1"}, "6492bf57-d943-4b47-bc4b-7425a48a13a5": {"__data__": {"text": "Any arbitrary, cloneable JavaScript value that will be cloned and passed automatically to all new Worker instances. If value is passed as undefined, any previously set value for the key will be deleted.\nThe worker.setEnvironmentData() API sets the content of worker.getEnvironmentData() in the current thread and all new Worker instances spawned from the current context.\n\nworker.threadId#\nAdded in: v10.5.0\n<integer>\nAn integer identifier for the current thread. On the corresponding worker object (if there is any), it is available as worker.threadId. This value is unique for each Worker instance inside a single process.\n\nworker.workerData#\nAdded in: v10.5.0\nAn arbitrary JavaScript value that contains a clone of the data passed to this thread's Worker constructor.\n\nThe data is cloned as if using postMessage(), according to the HTML structured clone algorithm.\n\nconst { Worker, isMainThread, workerData } = require('node:worker_threads');\n\nif (isMainThread) {\n  const worker = new Worker(__filename, { workerData: 'Hello, world!' });\n} else {\n  console.log(workerData);  // Prints 'Hello, world!'.\n}\nClass: BroadcastChannel extends EventTarget#\nHistory\nInstances of BroadcastChannel allow asynchronous one-to-many communication with all other BroadcastChannel instances bound to the same channel name.\n\n'use strict';\n\nconst {\n  isMainThread,\n  BroadcastChannel,\n  Worker,\n} = require('node:worker_threads');\n\nconst bc = new BroadcastChannel('hello');\n\nif (isMainThread) {\n  let c = 0;\n  bc.onmessage = (event) => {\n    console.log(event.data);\n    if (++c === 10) bc.close();\n  };\n  for (let n = 0; n < 10; n++)\n    new Worker(__filename);\n} else {\n  bc.postMessage('hello from every worker');\n  bc.close();\n}\nnew BroadcastChannel(name)#\nAdded in: v15.4.0\nname <any> The name of the channel to connect to. Any JavaScript value that can be converted to a string using `${name}` is permitted.\nbroadcastChannel.close()#\nAdded in: v15.4.0\nCloses the BroadcastChannel connection.\n\nbroadcastChannel.onmessage#\nAdded in: v15.4.0\nType: <Function> Invoked with a single MessageEvent argument when a message is received.\nbroadcastChannel.onmessageerror#\nAdded in: v15.4.0\nType: <Function> Invoked with a received message cannot be deserialized.\nbroadcastChannel.postMessage(message)#\nAdded in: v15.4.0\nmessage <any> Any cloneable JavaScript value.\nbroadcastChannel.ref()#\nAdded in: v15.4.0\nOpposite of unref(). Calling ref() on a previously unref()ed BroadcastChannel does not let the program exit if it's the only active handle left (the default behavior). If the port is ref()ed, calling ref() again has no effect.\n\nbroadcastChannel.unref()#\nAdded in: v15.4.0\nCalling unref() on a BroadcastChannel allows the thread to exit if this is the only active handle in the event system. If the BroadcastChannel is already unref()ed calling unref() again has no effect.\n\nClass: MessageChannel#\nAdded in: v10.5.0\nInstances of the worker.MessageChannel class represent an asynchronous, two-way communications channel. The MessageChannel has no methods of its own. new MessageChannel() yields an object with port1 and port2 properties, which refer to linked MessagePort instances.\n\nconst { MessageChannel } = require('node:worker_threads');\n\nconst { port1, port2 } = new MessageChannel();\nport1.on('message', (message) => console.log('received', message));\nport2.postMessage({ foo: 'bar' });\n// Prints: received { foo: 'bar' } from the `port1.on('message')` listener\nClass:", "doc_id": "6492bf57-d943-4b47-bc4b-7425a48a13a5", "embedding": null, "doc_hash": "b9d1c9b0f2e96e2c2dbfa093404e752da9645bc12346612a89b5fec408f3ba0e", "extra_info": null, "node_info": {"start": 2877727, "end": 2881187}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "aa33f70a-f3b5-48b1-8ee7-0c0c1ccda6f2", "3": "a5f0a211-ff89-4cc5-950d-a04ce90fcfb3"}}, "__type__": "1"}, "a5f0a211-ff89-4cc5-950d-a04ce90fcfb3": {"__data__": {"text": "event system. If the BroadcastChannel is already unref()ed calling unref() again has no effect.\n\nClass: MessageChannel#\nAdded in: v10.5.0\nInstances of the worker.MessageChannel class represent an asynchronous, two-way communications channel. The MessageChannel has no methods of its own. new MessageChannel() yields an object with port1 and port2 properties, which refer to linked MessagePort instances.\n\nconst { MessageChannel } = require('node:worker_threads');\n\nconst { port1, port2 } = new MessageChannel();\nport1.on('message', (message) => console.log('received', message));\nport2.postMessage({ foo: 'bar' });\n// Prints: received { foo: 'bar' } from the `port1.on('message')` listener\nClass: MessagePort#\nHistory\nExtends: <EventTarget>\nInstances of the worker.MessagePort class represent one end of an asynchronous, two-way communications channel. It can be used to transfer structured data, memory regions and other MessagePorts between different Workers.\n\nThis implementation matches browser MessagePorts.\n\nEvent: 'close'#\nAdded in: v10.5.0\nThe 'close' event is emitted once either side of the channel has been disconnected.\n\nconst { MessageChannel } = require('node:worker_threads');\nconst { port1, port2 } = new MessageChannel();\n\n// Prints:\n//   foobar\n//   closed!\nport2.on('message', (message) => console.log(message));\nport2.on('close', () => console.log('closed!'));\n\nport1.postMessage('foobar');\nport1.close();\nEvent: 'message'#\nAdded in: v10.5.0\nvalue <any> The transmitted value\nThe 'message' event is emitted for any incoming message, containing the cloned input of port.postMessage().\n\nListeners on this event receive a clone of the value parameter as passed to postMessage() and no further arguments.\n\nEvent: 'messageerror'#\nAdded in: v14.5.0, v12.19.0\nerror <Error> An Error object\nThe 'messageerror' event is emitted when deserializing a message failed.\n\nCurrently, this event is emitted when there is an error occurring while instantiating the posted JS object on the receiving end. Such situations are rare, but can happen, for instance, when certain Node.js API objects are received in a vm.Context (where Node.js APIs are currently unavailable).\n\nport.close()#\nAdded in: v10.5.0\nDisables further sending of messages on either side of the connection. This method can be called when no further communication will happen over this MessagePort.\n\nThe 'close' event is emitted on both MessagePort instances that are part of the channel.\n\nport.postMessage(value[, transferList])#\nHistory\nvalue <any>\ntransferList <Object[]>\nSends a JavaScript value to the receiving side of this channel. value is transferred in a way which is compatible with the HTML structured clone algorithm.\n\nIn particular, the significant differences to JSON are:\nvalue may contain circular references.\nvalue may contain instances of builtin JS types such as RegExps, BigInts, Maps, Sets, etc.\nvalue may contain typed arrays, both using ArrayBuffers and SharedArrayBuffers.\nvalue may contain WebAssembly.Module instances.\nvalue may not contain native (C++-backed) objects other than:\n<CryptoKey>s,\n<FileHandle>s,\n<Histogram>s,\n<KeyObject>s,\n<MessagePort>s,\n<net.BlockList>s,\n<net.SocketAddress>es,\n<X509Certificate>s.\nconst { MessageChannel } = require('node:worker_threads');\nconst { port1, port2 } = new MessageChannel();\n\nport1.on('message', (message) => console.log(message));\n\nconst circularData = {};\ncircularData.foo = circularData;\n// Prints: { foo: [Circular] }\nport2.postMessage(circularData);\ntransferList may be", "doc_id": "a5f0a211-ff89-4cc5-950d-a04ce90fcfb3", "embedding": null, "doc_hash": "dba317411d8d4009316da0b0324fc46a02319d76898f10a0c8b5743dc5aeb552", "extra_info": null, "node_info": {"start": 2881218, "end": 2884733}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6492bf57-d943-4b47-bc4b-7425a48a13a5", "3": "f5b92018-201f-4fa4-aa25-f9dc9d59c02a"}}, "__type__": "1"}, "f5b92018-201f-4fa4-aa25-f9dc9d59c02a": {"__data__": {"text": "may contain WebAssembly.Module instances.\nvalue may not contain native (C++-backed) objects other than:\n<CryptoKey>s,\n<FileHandle>s,\n<Histogram>s,\n<KeyObject>s,\n<MessagePort>s,\n<net.BlockList>s,\n<net.SocketAddress>es,\n<X509Certificate>s.\nconst { MessageChannel } = require('node:worker_threads');\nconst { port1, port2 } = new MessageChannel();\n\nport1.on('message', (message) => console.log(message));\n\nconst circularData = {};\ncircularData.foo = circularData;\n// Prints: { foo: [Circular] }\nport2.postMessage(circularData);\ntransferList may be a list of ArrayBuffer, MessagePort, and FileHandle objects. After transferring, they are not usable on the sending side of the channel anymore (even if they are not contained in value). Unlike with child processes, transferring handles such as network sockets is currently not supported.\n\nIf value contains SharedArrayBuffer instances, those are accessible from either thread. They cannot be listed in transferList.\n\nvalue may still contain ArrayBuffer instances that are not in transferList; in that case, the underlying memory is copied rather than moved.\n\nconst { MessageChannel } = require('node:worker_threads');\nconst { port1, port2 } = new MessageChannel();\n\nport1.on('message', (message) => console.log(message));\n\nconst uint8Array = new Uint8Array([ 1, 2, 3, 4 ]);\n// This posts a copy of `uint8Array`:\nport2.postMessage(uint8Array);\n// This does not copy data, but renders `uint8Array` unusable:\nport2.postMessage(uint8Array, [ uint8Array.buffer ]);\n\n// The memory for the `sharedUint8Array` is accessible from both the\n// original and the copy received by `.on('message')`:\nconst sharedUint8Array = new Uint8Array(new SharedArrayBuffer(4));\nport2.postMessage(sharedUint8Array);\n\n// This transfers a freshly created message port to the receiver.\n// This can be used, for example, to create communication channels between\n// multiple `Worker` threads that are children of the same parent thread.\nconst otherChannel = new MessageChannel();\nport2.postMessage({ port: otherChannel.port1 }, [ otherChannel.port1 ]);\nThe message object is cloned immediately, and can be modified after posting without having side effects.\n\nFor more information on the serialization and deserialization mechanisms behind this API, see the serialization API of the node:v8 module.\n\nConsiderations when transferring TypedArrays and Buffers#\nAll TypedArray and Buffer instances are views over an underlying ArrayBuffer. That is, it is the ArrayBuffer that actually stores the raw data while the TypedArray and Buffer objects provide a way of viewing and manipulating the data. It is possible and common for multiple views to be created over the same ArrayBuffer instance. Great care must be taken when using a transfer list to transfer an ArrayBuffer as doing so causes all TypedArray and Buffer instances that share that same ArrayBuffer to become unusable.\n\nconst ab = new ArrayBuffer(10);\n\nconst u1 = new Uint8Array(ab);\nconst u2 = new Uint16Array(ab);\n\nconsole.log(u2.length);  // prints 5\n\nport.postMessage(u1, [u1.buffer]);\n\nconsole.log(u2.length);  // prints 0\nFor Buffer instances, specifically, whether the underlying ArrayBuffer can be transferred or cloned depends entirely on how instances were created, which often cannot be reliably determined.\n\nAn ArrayBuffer can be marked with markAsUntransferable() to indicate that it should always be cloned and never transferred.\n\nDepending on how a Buffer instance was created, it may or may not own its underlying ArrayBuffer. An ArrayBuffer must not be transferred unless it is known that the Buffer instance owns it. In particular, for Buffers created from the internal Buffer pool (using, for instance Buffer.from() or Buffer.allocUnsafe()), transferring them is not", "doc_id": "f5b92018-201f-4fa4-aa25-f9dc9d59c02a", "embedding": null, "doc_hash": "95b176b48aca8ea5ec4bdfc13342c0025eb7dbd74b058c8e622c9cc06d066c01", "extra_info": null, "node_info": {"start": 2884846, "end": 2888598}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "a5f0a211-ff89-4cc5-950d-a04ce90fcfb3", "3": "eb44fa65-027b-4be5-b949-aeffe4a9cb18"}}, "__type__": "1"}, "eb44fa65-027b-4be5-b949-aeffe4a9cb18": {"__data__": {"text": " // prints 5\n\nport.postMessage(u1, [u1.buffer]);\n\nconsole.log(u2.length);  // prints 0\nFor Buffer instances, specifically, whether the underlying ArrayBuffer can be transferred or cloned depends entirely on how instances were created, which often cannot be reliably determined.\n\nAn ArrayBuffer can be marked with markAsUntransferable() to indicate that it should always be cloned and never transferred.\n\nDepending on how a Buffer instance was created, it may or may not own its underlying ArrayBuffer. An ArrayBuffer must not be transferred unless it is known that the Buffer instance owns it. In particular, for Buffers created from the internal Buffer pool (using, for instance Buffer.from() or Buffer.allocUnsafe()), transferring them is not possible and they are always cloned, which sends a copy of the entire Buffer pool. This behavior may come with unintended higher memory usage and possible security concerns.\n\nSee Buffer.allocUnsafe() for more details on Buffer pooling.\n\nThe ArrayBuffers for Buffer instances created using Buffer.alloc() or Buffer.allocUnsafeSlow() can always be transferred but doing so renders all other existing views of those ArrayBuffers unusable.\n\nConsiderations when cloning objects with prototypes, classes, and accessors#\nBecause object cloning uses the HTML structured clone algorithm, non-enumerable properties, property accessors, and object prototypes are not preserved. In particular, Buffer objects will be read as plain Uint8Arrays on the receiving side, and instances of JavaScript classes will be cloned as plain JavaScript objects.\n\nconst b = Symbol('b');\n\nclass Foo {\n  #a = 1;\n  constructor() {\n    this[b] = 2;\n    this.c = 3;\n  }\n\n  get d() { return 4; }\n}\n\nconst { port1, port2 } = new MessageChannel();\n\nport1.onmessage = ({ data }) => console.log(data);\n\nport2.postMessage(new Foo());\n\n// Prints: { c: 3 }\nThis limitation extends to many built-in objects, such as the global URL object:\n\nconst { port1, port2 } = new MessageChannel();\n\nport1.onmessage = ({ data }) => console.log(data);\n\nport2.postMessage(new URL('https://example.org'));\n\n// Prints: { }\nport.hasRef()#\nAdded in: v18.1.0\nStability: 1 - Experimental\nReturns: <boolean>\nIf true, the MessagePort object will keep the Node.js event loop active.\n\nport.ref()#\nAdded in: v10.5.0\nOpposite of unref(). Calling ref() on a previously unref()ed port does not let the program exit if it's the only active handle left (the default behavior). If the port is ref()ed, calling ref() again has no effect.\n\nIf listeners are attached or removed using .on('message'), the port is ref()ed and unref()ed automatically depending on whether listeners for the event exist.\n\nport.start()#\nAdded in: v10.5.0\nStarts receiving messages on this MessagePort. When using this port as an event emitter, this is called automatically once 'message' listeners are attached.\n\nThis method exists for parity with the Web MessagePort API. In Node.js, it is only useful for ignoring messages when no event listener is present. Node.js also diverges in its handling of .onmessage. Setting it automatically calls .start(), but unsetting it lets messages queue up until a new handler is set or the port is discarded.\n\nport.unref()#\nAdded in: v10.5.0\nCalling unref() on a port allows the thread to exit if this is the only active handle in the event system. If the port is already unref()ed calling unref() again has no effect.\n\nIf listeners are attached or removed using .on('message'), the port is ref()ed and unref()ed automatically depending on whether listeners for the event exist.\n\nClass: Worker#\nAdded in: v10.5.0\nExtends: <EventEmitter>\nThe", "doc_id": "eb44fa65-027b-4be5-b949-aeffe4a9cb18", "embedding": null, "doc_hash": "a1b3e70f449bd849e27ebf3d74d881e8b3e792f88293ef840979e7916315e62d", "extra_info": null, "node_info": {"start": 2888462, "end": 2892086}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "f5b92018-201f-4fa4-aa25-f9dc9d59c02a", "3": "87cfa9be-cd2c-498d-b06f-397a3bed950d"}}, "__type__": "1"}, "87cfa9be-cd2c-498d-b06f-397a3bed950d": {"__data__": {"text": "useful for ignoring messages when no event listener is present. Node.js also diverges in its handling of .onmessage. Setting it automatically calls .start(), but unsetting it lets messages queue up until a new handler is set or the port is discarded.\n\nport.unref()#\nAdded in: v10.5.0\nCalling unref() on a port allows the thread to exit if this is the only active handle in the event system. If the port is already unref()ed calling unref() again has no effect.\n\nIf listeners are attached or removed using .on('message'), the port is ref()ed and unref()ed automatically depending on whether listeners for the event exist.\n\nClass: Worker#\nAdded in: v10.5.0\nExtends: <EventEmitter>\nThe Worker class represents an independent JavaScript execution thread. Most Node.js APIs are available inside of it.\n\nNotable differences inside a Worker environment are:\n\nThe process.stdin, process.stdout, and process.stderr streams may be redirected by the parent thread.\nThe require('node:worker_threads').isMainThread property is set to false.\nThe require('node:worker_threads').parentPort message port is available.\nprocess.exit() does not stop the whole program, just the single thread, and process.abort() is not available.\nprocess.chdir() and process methods that set group or user ids are not available.\nprocess.env is a copy of the parent thread's environment variables, unless otherwise specified. Changes to one copy are not visible in other threads, and are not visible to native add-ons (unless worker.SHARE_ENV is passed as the env option to the Worker constructor).\nprocess.title cannot be modified.\nSignals are not delivered through process.on('...').\nExecution may stop at any point as a result of worker.terminate() being invoked.\nIPC channels from parent processes are not accessible.\nThe trace_events module is not supported.\nNative add-ons can only be loaded from multiple threads if they fulfill certain conditions.\nCreating Worker instances inside of other Workers is possible.\n\nLike Web Workers and the node:cluster module, two-way communication can be achieved through inter-thread message passing. Internally, a Worker has a built-in pair of MessagePorts that are already associated with each other when the Worker is created. While the MessagePort object on the parent side is not directly exposed, its functionalities are exposed through worker.postMessage() and the worker.on('message') event on the Worker object for the parent thread.\n\nTo create custom messaging channels (which is encouraged over using the default global channel because it facilitates separation of concerns), users can create a MessageChannel object on either thread and pass one of the MessagePorts on that MessageChannel to the other thread through a pre-existing channel, such as the global one.\n\nSee port.postMessage() for more information on how messages are passed, and what kind of JavaScript values can be successfully transported through the thread barrier.\n\nconst assert = require('node:assert');\nconst {\n  Worker, MessageChannel, MessagePort, isMainThread, parentPort,\n} = require('node:worker_threads');\nif (isMainThread) {\n  const worker = new Worker(__filename);\n  const subChannel = new MessageChannel();\n  worker.postMessage({ hereIsYourPort: subChannel.port1 }, [subChannel.port1]);\n  subChannel.port2.on('message', (value) => {\n    console.log('received:', value);\n  });\n} else {\n  parentPort.once('message', (value) => {\n    assert(value.hereIsYourPort instanceof MessagePort);\n    value.hereIsYourPort.postMessage('the worker is sending this');\n    value.hereIsYourPort.close();\n  });\n}\nnew Worker(filename[, options])#\nHistory\nfilename <string> | <URL> The path to the Worker's main script or module. Must be either an absolute path or a relative path (i.e. relative to the current working directory) starting with ./ or ../, or a WHATWG URL object using file: or data: protocol. When using", "doc_id": "87cfa9be-cd2c-498d-b06f-397a3bed950d", "embedding": null, "doc_hash": "ebd6b8489950ab9fffbc4c8aac9e4f723eab82a8f7a84c6679ffab94807f08c4", "extra_info": null, "node_info": {"start": 2892147, "end": 2896040}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "eb44fa65-027b-4be5-b949-aeffe4a9cb18", "3": "1b77c616-9a04-43f6-8103-c60c5542b594"}}, "__type__": "1"}, "1b77c616-9a04-43f6-8103-c60c5542b594": {"__data__": {"text": "[subChannel.port1]);\n  subChannel.port2.on('message', (value) => {\n    console.log('received:', value);\n  });\n} else {\n  parentPort.once('message', (value) => {\n    assert(value.hereIsYourPort instanceof MessagePort);\n    value.hereIsYourPort.postMessage('the worker is sending this');\n    value.hereIsYourPort.close();\n  });\n}\nnew Worker(filename[, options])#\nHistory\nfilename <string> | <URL> The path to the Worker's main script or module. Must be either an absolute path or a relative path (i.e. relative to the current working directory) starting with ./ or ../, or a WHATWG URL object using file: or data: protocol. When using a data: URL, the data is interpreted based on MIME type using the ECMAScript module loader. If options.eval is true, this is a string containing JavaScript code rather than a path.\noptions <Object>\nargv <any[]> List of arguments which would be stringified and appended to process.argv in the worker. This is mostly similar to the workerData but the values are available on the global process.argv as if they were passed as CLI options to the script.\nenv <Object> If set, specifies the initial value of process.env inside the Worker thread. As a special value, worker.SHARE_ENV may be used to specify that the parent thread and the child thread should share their environment variables; in that case, changes to one thread's process.env object affect the other thread as well. Default: process.env.\neval <boolean> If true and the first argument is a string, interpret the first argument to the constructor as a script that is executed once the worker is online.\nexecArgv <string[]> List of node CLI options passed to the worker. V8 options (such as --max-old-space-size) and options that affect the process (such as --title) are not supported. If set, this is provided as process.execArgv inside the worker. By default, options are inherited from the parent thread.\nstdin <boolean> If this is set to true, then worker.stdin provides a writable stream whose contents appear as process.stdin inside the Worker. By default, no data is provided.\nstdout <boolean> If this is set to true, then worker.stdout is not automatically piped through to process.stdout in the parent.\nstderr <boolean> If this is set to true, then worker.stderr is not automatically piped through to process.stderr in the parent.\nworkerData <any> Any JavaScript value that is cloned and made available as require('node:worker_threads').workerData. The cloning occurs as described in the HTML structured clone algorithm, and an error is thrown if the object cannot be cloned (e.g. because it contains functions).\ntrackUnmanagedFds <boolean> If this is set to true, then the Worker tracks raw file descriptors managed through fs.open() and fs.close(), and closes them when the Worker exits, similar to other resources like network sockets or file descriptors managed through the FileHandle API. This option is automatically inherited by all nested Workers. Default: true.\ntransferList <Object[]> If one or more MessagePort-like objects are passed in workerData, a transferList is required for those items or ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST is thrown. See port.postMessage() for more information.\nresourceLimits <Object> An optional set of resource limits for the new JS engine instance. Reaching these limits leads to termination of the Worker instance. These limits only affect the JS engine, and no external data, including no ArrayBuffers. Even if these limits are set, the process may still abort if it encounters a global out-of-memory situation.\nmaxOldGenerationSizeMb <number> The maximum size of the main heap in MB. If the command-line argument --max-old-space-size is set, it overrides this setting.\nmaxYoungGenerationSizeMb <number> The maximum size of a heap space for recently created objects. If the command-line argument", "doc_id": "1b77c616-9a04-43f6-8103-c60c5542b594", "embedding": null, "doc_hash": "6baaa219c4948f9e434dc75f9f2f3b11255e387f3329bdf52b8bf567a44a7472", "extra_info": null, "node_info": {"start": 2896078, "end": 2899921}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "87cfa9be-cd2c-498d-b06f-397a3bed950d", "3": "6f88cfbf-e12c-49a8-928e-795876a16b6d"}}, "__type__": "1"}, "6f88cfbf-e12c-49a8-928e-795876a16b6d": {"__data__": {"text": "or ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST is thrown. See port.postMessage() for more information.\nresourceLimits <Object> An optional set of resource limits for the new JS engine instance. Reaching these limits leads to termination of the Worker instance. These limits only affect the JS engine, and no external data, including no ArrayBuffers. Even if these limits are set, the process may still abort if it encounters a global out-of-memory situation.\nmaxOldGenerationSizeMb <number> The maximum size of the main heap in MB. If the command-line argument --max-old-space-size is set, it overrides this setting.\nmaxYoungGenerationSizeMb <number> The maximum size of a heap space for recently created objects. If the command-line argument --max-semi-space-size is set, it overrides this setting.\ncodeRangeSizeMb <number> The size of a pre-allocated memory range used for generated code.\nstackSizeMb <number> The default maximum stack size for the thread. Small values may lead to unusable Worker instances. Default: 4.\nname <string> An optional name to be appended to the worker title for debuggin/identification purposes, making the final title as [worker ${id}] ${name}. Default: ''.\nEvent: 'error'#\nAdded in: v10.5.0\nerr <Error>\nThe 'error' event is emitted if the worker thread throws an uncaught exception. In that case, the worker is terminated.\n\nEvent: 'exit'#\nAdded in: v10.5.0\nexitCode <integer>\nThe 'exit' event is emitted once the worker has stopped. If the worker exited by calling process.exit(), the exitCode parameter is the passed exit code. If the worker was terminated, the exitCode parameter is 1.\n\nThis is the final event emitted by any Worker instance.\n\nEvent: 'message'#\nAdded in: v10.5.0\nvalue <any> The transmitted value\nThe 'message' event is emitted when the worker thread has invoked require('node:worker_threads').parentPort.postMessage(). See the port.on('message') event for more details.\n\nAll messages sent from the worker thread are emitted before the 'exit' event is emitted on the Worker object.\n\nEvent: 'messageerror'#\nAdded in: v14.5.0, v12.19.0\nerror <Error> An Error object\nThe 'messageerror' event is emitted when deserializing a message failed.\n\nEvent: 'online'#\nAdded in: v10.5.0\nThe 'online' event is emitted when the worker thread has started executing JavaScript code.\n\nworker.getHeapSnapshot()#\nAdded in: v13.9.0, v12.17.0\nReturns: <Promise> A promise for a Readable Stream containing a V8 heap snapshot\nReturns a readable stream for a V8 snapshot of the current state of the Worker. See v8.getHeapSnapshot() for more details.\n\nIf the Worker thread is no longer running, which may occur before the 'exit' event is emitted, the returned Promise is rejected immediately with an ERR_WORKER_NOT_RUNNING error.\n\nworker.performance#\nAdded in: v15.1.0, v14.17.0, v12.22.0\nAn object that can be used to query performance information from a worker instance. Similar to perf_hooks.performance.\n\nperformance.eventLoopUtilization([utilization1[, utilization2]])#\nAdded in: v15.1.0, v14.17.0, v12.22.0\nutilization1 <Object> The result of a previous call to eventLoopUtilization().\nutilization2 <Object> The result of a previous call to eventLoopUtilization() prior to utilization1.\nReturns <Object>\nidle <number>\nactive <number>\nutilization <number>\nThe same call as perf_hooks eventLoopUtilization(), except the values of the worker instance are returned.\n\nOne difference is that, unlike the main thread, bootstrapping within a worker is done within the event loop. So the event loop utilization is", "doc_id": "6f88cfbf-e12c-49a8-928e-795876a16b6d", "embedding": null, "doc_hash": "4cdf5d168be80b48057ce629bc5618da282f1683cd057a076ddd70ebe98fec33", "extra_info": null, "node_info": {"start": 2899827, "end": 2903360}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1b77c616-9a04-43f6-8103-c60c5542b594", "3": "32c0b39a-6f4b-441c-ad68-de43fdef945e"}}, "__type__": "1"}, "32c0b39a-6f4b-441c-ad68-de43fdef945e": {"__data__": {"text": "performance information from a worker instance. Similar to perf_hooks.performance.\n\nperformance.eventLoopUtilization([utilization1[, utilization2]])#\nAdded in: v15.1.0, v14.17.0, v12.22.0\nutilization1 <Object> The result of a previous call to eventLoopUtilization().\nutilization2 <Object> The result of a previous call to eventLoopUtilization() prior to utilization1.\nReturns <Object>\nidle <number>\nactive <number>\nutilization <number>\nThe same call as perf_hooks eventLoopUtilization(), except the values of the worker instance are returned.\n\nOne difference is that, unlike the main thread, bootstrapping within a worker is done within the event loop. So the event loop utilization is immediately available once the worker's script begins execution.\n\nAn idle time that does not increase does not indicate that the worker is stuck in bootstrap. The following examples shows how the worker's entire lifetime never accumulates any idle time, but is still be able to process messages.\n\nconst { Worker, isMainThread, parentPort } = require('node:worker_threads');\n\nif (isMainThread) {\n  const worker = new Worker(__filename);\n  setInterval(() => {\n    worker.postMessage('hi');\n    console.log(worker.performance.eventLoopUtilization());\n  }, 100).unref();\n  return;\n}\n\nparentPort.on('message', () => console.log('msg')).unref();\n(function r(n) {\n  if (--n < 0) return;\n  const t = Date.now();\n  while (Date.now() - t < 300);\n  setImmediate(r, n);\n})(10);\nThe event loop utilization of a worker is available only after the 'online' event emitted, and if called before this, or after the 'exit' event, then all properties have the value of 0.\n\nworker.postMessage(value[, transferList])#\nAdded in: v10.5.0\nvalue <any>\ntransferList <Object[]>\nSend a message to the worker that is received via require('node:worker_threads').parentPort.on('message'). See port.postMessage() for more details.\n\nworker.ref()#\nAdded in: v10.5.0\nOpposite of unref(), calling ref() on a previously unref()ed worker does not let the program exit if it's the only active handle left (the default behavior). If the worker is ref()ed, calling ref() again has no effect.\n\nworker.resourceLimits#\nAdded in: v13.2.0, v12.16.0\n<Object>\nmaxYoungGenerationSizeMb <number>\nmaxOldGenerationSizeMb <number>\ncodeRangeSizeMb <number>\nstackSizeMb <number>\nProvides the set of JS engine resource constraints for this Worker thread. If the resourceLimits option was passed to the Worker constructor, this matches its values.\n\nIf the worker has stopped, the return value is an empty object.\n\nworker.stderr#\nAdded in: v10.5.0\n<stream.Readable>\nThis is a readable stream which contains data written to process.stderr inside the worker thread. If stderr: true was not passed to the Worker constructor, then data is piped to the parent thread's process.stderr stream.\n\nworker.stdin#\nAdded in: v10.5.0\n<null> | <stream.Writable>\nIf stdin: true was passed to the Worker constructor, this is a writable stream. The data written to this stream will be made available in the worker thread as process.stdin.\n\nworker.stdout#\nAdded in: v10.5.0\n<stream.Readable>\nThis is a readable stream which contains data written to process.stdout inside the worker thread. If stdout: true was not passed to the Worker constructor, then data is piped to the parent thread's process.stdout stream.\n\nworker.terminate()#\nHistory\nReturns: <Promise>\nStop all JavaScript execution in the worker thread as soon as possible. Returns a", "doc_id": "32c0b39a-6f4b-441c-ad68-de43fdef945e", "embedding": null, "doc_hash": "7a9d6bda6e615b020a62df7e936ac1dd4980a06df44b104cc432c01409b5ff3f", "extra_info": null, "node_info": {"start": 2903391, "end": 2906841}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "6f88cfbf-e12c-49a8-928e-795876a16b6d", "3": "3937eb1f-1148-4831-be0e-8095bf9c46ee"}}, "__type__": "1"}, "3937eb1f-1148-4831-be0e-8095bf9c46ee": {"__data__": {"text": "parent thread's process.stderr stream.\n\nworker.stdin#\nAdded in: v10.5.0\n<null> | <stream.Writable>\nIf stdin: true was passed to the Worker constructor, this is a writable stream. The data written to this stream will be made available in the worker thread as process.stdin.\n\nworker.stdout#\nAdded in: v10.5.0\n<stream.Readable>\nThis is a readable stream which contains data written to process.stdout inside the worker thread. If stdout: true was not passed to the Worker constructor, then data is piped to the parent thread's process.stdout stream.\n\nworker.terminate()#\nHistory\nReturns: <Promise>\nStop all JavaScript execution in the worker thread as soon as possible. Returns a Promise for the exit code that is fulfilled when the 'exit' event is emitted.\n\nworker.threadId#\nAdded in: v10.5.0\n<integer>\nAn integer identifier for the referenced thread. Inside the worker thread, it is available as require('node:worker_threads').threadId. This value is unique for each Worker instance inside a single process.\n\nworker.unref()#\nAdded in: v10.5.0\nCalling unref() on a worker allows the thread to exit if this is the only active handle in the event system. If the worker is already unref()ed calling unref() again has no effect.\n\nNotes#\nSynchronous blocking of stdio#\nWorkers utilize message passing via <MessagePort> to implement interactions with stdio. This means that stdio output originating from a Worker can get blocked by synchronous code on the receiving end that is blocking the Node.js event loop.\n\nimport {\n  Worker,\n  isMainThread,\n} from 'worker_threads';\n\nif (isMainThread) {\n  new Worker(new URL(import.meta.url));\n  for (let n = 0; n < 1e10; n++) {\n    // Looping to simulate work.\n  }\n} else {\n  // This output will be blocked by the for loop in the main thread.\n  console.log('foo');\n}\nLaunching worker threads from preload scripts#\nTake care when launching worker threads from preload scripts (scripts loaded and run using the -r command line flag). Unless the execArgv option is explicitly set, new Worker threads automatically inherit the command line flags from the running process and will preload the same preload scripts as the main thread. If the preload script unconditionally launches a worker thread, every thread spawned will spawn another until the application crashes.\n\nZlib#\nStability: 2 - Stable\nSource Code: lib/zlib.js\n\nThe node:zlib module provides compression functionality implemented using Gzip, Deflate/Inflate, and Brotli.\n\nTo access it:\n\nconst zlib = require('node:zlib');\nCompression and decompression are built around the Node.js Streams API.\n\nCompressing or decompressing a stream (such as a file) can be accomplished by piping the source stream through a zlib Transform stream into a destination stream:\n\nconst { createGzip } = require('node:zlib');\nconst { pipeline } = require('node:stream');\nconst {\n  createReadStream,\n  createWriteStream,\n} = require('node:fs');\n\nconst gzip = createGzip();\nconst source = createReadStream('input.txt');\nconst destination = createWriteStream('input.txt.gz');\n\npipeline(source, gzip, destination, (err) => {\n  if (err) {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  }\n});\n\n// Or, Promisified\n\nconst { promisify } = require('node:util');\nconst pipe = promisify(pipeline);\n\nasync function do_gzip(input, output) {\n  const gzip = createGzip();\n  const source = createReadStream(input);\n  const destination = createWriteStream(output);\n  await pipe(source, gzip,", "doc_id": "3937eb1f-1148-4831-be0e-8095bf9c46ee", "embedding": null, "doc_hash": "e1f34d50f89e433ff501409fe8e1a7d606c9be6a19993b326cfdc892fe28dc3a", "extra_info": null, "node_info": {"start": 2906863, "end": 2910328}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "32c0b39a-6f4b-441c-ad68-de43fdef945e", "3": "dbcd3d9f-fa7e-47b6-b9a4-3e11df4423c5"}}, "__type__": "1"}, "dbcd3d9f-fa7e-47b6-b9a4-3e11df4423c5": {"__data__": {"text": "gzip = createGzip();\nconst source = createReadStream('input.txt');\nconst destination = createWriteStream('input.txt.gz');\n\npipeline(source, gzip, destination, (err) => {\n  if (err) {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  }\n});\n\n// Or, Promisified\n\nconst { promisify } = require('node:util');\nconst pipe = promisify(pipeline);\n\nasync function do_gzip(input, output) {\n  const gzip = createGzip();\n  const source = createReadStream(input);\n  const destination = createWriteStream(output);\n  await pipe(source, gzip, destination);\n}\n\ndo_gzip('input.txt', 'input.txt.gz')\n  .catch((err) => {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  });\nIt is also possible to compress or decompress data in a single step:\n\nconst { deflate, unzip } = require('node:zlib');\n\nconst input = '.................................';\ndeflate(input, (err, buffer) => {\n  if (err) {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  }\n  console.log(buffer.toString('base64'));\n});\n\nconst buffer = Buffer.from('eJzT0yMAAGTvBe8=', 'base64');\nunzip(buffer, (err, buffer) => {\n  if (err) {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  }\n  console.log(buffer.toString());\n});\n\n// Or, Promisified\n\nconst { promisify } = require('node:util');\nconst do_unzip = promisify(unzip);\n\ndo_unzip(buffer)\n  .then((buf) => console.log(buf.toString()))\n  .catch((err) => {\n    console.error('An error occurred:', err);\n    process.exitCode = 1;\n  });\nThreadpool usage and performance considerations#\nAll zlib APIs, except those that are explicitly synchronous, use the Node.js internal threadpool. This can lead to surprising effects and performance limitations in some applications.\n\nCreating and using a large number of zlib objects simultaneously can cause significant memory fragmentation.\n\nconst zlib = require('node:zlib');\n\nconst payload = Buffer.from('This is some data');\n\n// WARNING: DO NOT DO THIS!\nfor (let i = 0; i < 30000; ++i) {\n  zlib.deflate(payload, (err, buffer) => {});\n}\nIn the preceding example, 30,000 deflate instances are created concurrently. Because of how some operating systems handle memory allocation and deallocation, this may lead to significant memory fragmentation.\n\nIt is strongly recommended that the results of compression operations be cached to avoid duplication of effort.\n\nCompressing HTTP requests and responses#\nThe node:zlib module can be used to implement support for the gzip, deflate and br content-encoding mechanisms defined by HTTP.\n\nThe HTTP Accept-Encoding header is used within an HTTP request to identify the compression encodings accepted by the client. The Content-Encoding header is used to identify the compression encodings actually applied to a message.\n\nThe examples given below are drastically simplified to show the basic concept. Using zlib encoding can be expensive, and the results ought to be cached. See Memory usage tuning for more information on the speed/memory/compression tradeoffs involved in zlib usage.\n\n// Client request example\nconst zlib = require('node:zlib');\nconst http = require('node:http');\nconst fs = require('node:fs');\nconst { pipeline } = require('node:stream');\n\nconst request = http.get({ host: 'example.com',\n       ", "doc_id": "dbcd3d9f-fa7e-47b6-b9a4-3e11df4423c5", "embedding": null, "doc_hash": "dc88a58ac14f0c5c80bc8ebc999970cb7529702115e32b38c07098837de97aea", "extra_info": null, "node_info": {"start": 2910434, "end": 2913715}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "3937eb1f-1148-4831-be0e-8095bf9c46ee", "3": "38178f26-1ac8-477e-918e-3e106fe68c30"}}, "__type__": "1"}, "38178f26-1ac8-477e-918e-3e106fe68c30": {"__data__": {"text": "HTTP.\n\nThe HTTP Accept-Encoding header is used within an HTTP request to identify the compression encodings accepted by the client. The Content-Encoding header is used to identify the compression encodings actually applied to a message.\n\nThe examples given below are drastically simplified to show the basic concept. Using zlib encoding can be expensive, and the results ought to be cached. See Memory usage tuning for more information on the speed/memory/compression tradeoffs involved in zlib usage.\n\n// Client request example\nconst zlib = require('node:zlib');\nconst http = require('node:http');\nconst fs = require('node:fs');\nconst { pipeline } = require('node:stream');\n\nconst request = http.get({ host: 'example.com',\n                           path: '/',\n                           port: 80,\n                           headers: { 'Accept-Encoding': 'br,gzip,deflate' } });\nrequest.on('response', (response) => {\n  const output = fs.createWriteStream('example.com_index.html');\n\n  const onError = (err) => {\n    if (err) {\n      console.error('An error occurred:', err);\n      process.exitCode = 1;\n    }\n  };\n\n  switch (response.headers['content-encoding']) {\n    case 'br':\n      pipeline(response, zlib.createBrotliDecompress(), output, onError);\n      break;\n    // Or, just use zlib.createUnzip() to handle both of the following cases:\n    case 'gzip':\n      pipeline(response, zlib.createGunzip(), output, onError);\n      break;\n    case 'deflate':\n      pipeline(response, zlib.createInflate(), output, onError);\n      break;\n    default:\n      pipeline(response, output, onError);\n      break;\n  }\n});\n// server example\n// Running a gzip operation on every request is quite expensive.\n// It would be much more efficient to cache the compressed buffer.\nconst zlib = require('node:zlib');\nconst http = require('node:http');\nconst fs = require('node:fs');\nconst { pipeline } = require('node:stream');\n\nhttp.createServer((request, response) => {\n  const raw = fs.createReadStream('index.html');\n  // Store both a compressed and an uncompressed version of the resource.\n  response.setHeader('Vary', 'Accept-Encoding');\n  let acceptEncoding = request.headers['accept-encoding'];\n  if (!acceptEncoding) {\n    acceptEncoding = '';\n  }\n\n  const onError = (err) => {\n    if (err) {\n      // If an error occurs, there's not much we can do because\n      // the server has already sent the 200 response code and\n      // some amount of data has already been sent to the client.\n      // The best we can do is terminate the response immediately\n      // and log the error.\n      response.end();\n      console.error('An error occurred:', err);\n    }\n  };\n\n  // Note: This is not a conformant accept-encoding parser.\n  // See https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\n  if (/\\bdeflate\\b/.test(acceptEncoding)) {\n    response.writeHead(200, { 'Content-Encoding': 'deflate' });\n   ", "doc_id": "38178f26-1ac8-477e-918e-3e106fe68c30", "embedding": null, "doc_hash": "918c4d40d94275161ff1b3b33a44316d24c700f7437b53e3a4d6df58b2b6ff39", "extra_info": null, "node_info": {"start": 2913570, "end": 2916469}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "dbcd3d9f-fa7e-47b6-b9a4-3e11df4423c5", "3": "977d084f-2c78-4d47-b558-e1f937cb8023"}}, "__type__": "1"}, "977d084f-2c78-4d47-b558-e1f937cb8023": {"__data__": {"text": "sent the 200 response code and\n      // some amount of data has already been sent to the client.\n      // The best we can do is terminate the response immediately\n      // and log the error.\n      response.end();\n      console.error('An error occurred:', err);\n    }\n  };\n\n  // Note: This is not a conformant accept-encoding parser.\n  // See https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\n  if (/\\bdeflate\\b/.test(acceptEncoding)) {\n    response.writeHead(200, { 'Content-Encoding': 'deflate' });\n    pipeline(raw, zlib.createDeflate(), response, onError);\n  } else if (/\\bgzip\\b/.test(acceptEncoding)) {\n    response.writeHead(200, { 'Content-Encoding': 'gzip' });\n    pipeline(raw, zlib.createGzip(), response, onError);\n  } else if (/\\bbr\\b/.test(acceptEncoding)) {\n    response.writeHead(200, { 'Content-Encoding': 'br' });\n    pipeline(raw, zlib.createBrotliCompress(), response, onError);\n  } else {\n    response.writeHead(200, {});\n    pipeline(raw, response, onError);\n  }\n}).listen(1337);\nBy default, the zlib methods will throw an error when decompressing truncated data. However, if it is known that the data is incomplete, or the desire is to inspect only the beginning of a compressed file, it is possible to suppress the default error handling by changing the flushing method that is used to decompress the last chunk of input data:\n\n// This is a truncated version of the buffer from the above examples\nconst buffer = Buffer.from('eJzT0yMA', 'base64');\n\nzlib.unzip(\n  buffer,\n  // For Brotli, the equivalent is zlib.constants.BROTLI_OPERATION_FLUSH.\n  { finishFlush: zlib.constants.Z_SYNC_FLUSH },\n  (err, buffer) => {\n    if (err) {\n      console.error('An error occurred:', err);\n      process.exitCode = 1;\n    }\n    console.log(buffer.toString());\n  });\nThis will not change the behavior in other error-throwing situations, e.g. when the input data has an invalid format. Using this method, it will not be possible to determine whether the input ended prematurely or lacks the integrity checks, making it necessary to manually check that the decompressed result is valid.\n\nMemory usage tuning#\nFor zlib-based streams#\nFrom zlib/zconf.h, modified for Node.js usage:\n\nThe memory requirements for deflate are (in bytes):\n\n(1 << (windowBits + 2)) + (1 << (memLevel + 9))\nThat is: 128K for windowBits = 15 + 128K for memLevel = 8 (default values) plus a few kilobytes for small objects.\n\nFor example, to reduce the default memory requirements from 256K to 128K, the options should be set to:\n\nconst options = { windowBits: 14, memLevel: 7 };\nThis will, however, generally degrade compression.\n\nThe memory requirements for inflate are (in bytes) 1 << windowBits. That is, 32K for windowBits = 15 (default value) plus a few kilobytes for small objects.\n\nThis is in addition to a single internal output slab buffer of size chunkSize, which defaults to 16K.\n\nThe speed of zlib compression is affected most dramatically by the level setting. A higher level will result in better compression, but will take longer to complete. A lower level will result in less compression, but will be much faster.\n\nIn general, greater memory usage", "doc_id": "977d084f-2c78-4d47-b558-e1f937cb8023", "embedding": null, "doc_hash": "f19895a6bc70cdd6ae1c4bc99e40c12ff74682c90658c1385d48708e6f6178d4", "extra_info": null, "node_info": {"start": 2916681, "end": 2919837}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "38178f26-1ac8-477e-918e-3e106fe68c30", "3": "588be179-5add-405f-be93-6cccbf66ab98"}}, "__type__": "1"}, "588be179-5add-405f-be93-6cccbf66ab98": {"__data__": {"text": "example, to reduce the default memory requirements from 256K to 128K, the options should be set to:\n\nconst options = { windowBits: 14, memLevel: 7 };\nThis will, however, generally degrade compression.\n\nThe memory requirements for inflate are (in bytes) 1 << windowBits. That is, 32K for windowBits = 15 (default value) plus a few kilobytes for small objects.\n\nThis is in addition to a single internal output slab buffer of size chunkSize, which defaults to 16K.\n\nThe speed of zlib compression is affected most dramatically by the level setting. A higher level will result in better compression, but will take longer to complete. A lower level will result in less compression, but will be much faster.\n\nIn general, greater memory usage options will mean that Node.js has to make fewer calls to zlib because it will be able to process more data on each write operation. So, this is another factor that affects the speed, at the cost of memory usage.\n\nFor Brotli-based streams#\nThere are equivalents to the zlib options for Brotli-based streams, although these options have different ranges than the zlib ones:\n\nzlib's level option matches Brotli's BROTLI_PARAM_QUALITY option.\nzlib's windowBits option matches Brotli's BROTLI_PARAM_LGWIN option.\nSee below for more details on Brotli-specific options.\n\nFlushing#\nCalling .flush() on a compression stream will make zlib return as much output as currently possible. This may come at the cost of degraded compression quality, but can be useful when data needs to be available as soon as possible.\n\nIn the following example, flush() is used to write a compressed partial HTTP response to the client:\n\nconst zlib = require('node:zlib');\nconst http = require('node:http');\nconst { pipeline } = require('node:stream');\n\nhttp.createServer((request, response) => {\n  // For the sake of simplicity, the Accept-Encoding checks are omitted.\n  response.writeHead(200, { 'content-encoding': 'gzip' });\n  const output = zlib.createGzip();\n  let i;\n\n  pipeline(output, response, (err) => {\n    if (err) {\n      // If an error occurs, there's not much we can do because\n      // the server has already sent the 200 response code and\n      // some amount of data has already been sent to the client.\n      // The best we can do is terminate the response immediately\n      // and log the error.\n      clearInterval(i);\n      response.end();\n      console.error('An error occurred:', err);\n    }\n  });\n\n  i = setInterval(() => {\n    output.write(`The current time is ${Date()}\\n`, () => {\n      // The data has been passed to zlib, but the compression algorithm may\n      // have decided to buffer the data for more efficient compression.\n      // Calling .flush() will make the data available as soon as the client\n      // is ready to receive it.\n      output.flush();\n    });\n  }, 1000);\n}).listen(1337);\nConstants#\nAdded in: v0.5.8\nzlib constants#\nAll of the constants defined in zlib.h are also defined on require('node:zlib').constants. In the normal course of operations, it will not be necessary to use these constants. They are documented so that their presence is not surprising. This section is taken almost directly from the zlib documentation.\n\nPreviously, the constants were available directly from require('node:zlib'), for instance zlib.Z_NO_FLUSH. Accessing the constants directly from the module is currently still possible but is deprecated.\n\nAllowed flush", "doc_id": "588be179-5add-405f-be93-6cccbf66ab98", "embedding": null, "doc_hash": "31e7513eefd93b3513b008072b64375df2115076a5c5676e4cbf996cca8098c2", "extra_info": null, "node_info": {"start": 2919638, "end": 2923040}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "977d084f-2c78-4d47-b558-e1f937cb8023", "3": "5d068e48-b2d8-4339-9926-a8220620c4a7"}}, "__type__": "1"}, "5d068e48-b2d8-4339-9926-a8220620c4a7": {"__data__": {"text": "the client\n      // is ready to receive it.\n      output.flush();\n    });\n  }, 1000);\n}).listen(1337);\nConstants#\nAdded in: v0.5.8\nzlib constants#\nAll of the constants defined in zlib.h are also defined on require('node:zlib').constants. In the normal course of operations, it will not be necessary to use these constants. They are documented so that their presence is not surprising. This section is taken almost directly from the zlib documentation.\n\nPreviously, the constants were available directly from require('node:zlib'), for instance zlib.Z_NO_FLUSH. Accessing the constants directly from the module is currently still possible but is deprecated.\n\nAllowed flush values.\n\nzlib.constants.Z_NO_FLUSH\nzlib.constants.Z_PARTIAL_FLUSH\nzlib.constants.Z_SYNC_FLUSH\nzlib.constants.Z_FULL_FLUSH\nzlib.constants.Z_FINISH\nzlib.constants.Z_BLOCK\nzlib.constants.Z_TREES\nReturn codes for the compression/decompression functions. Negative values are errors, positive values are used for special but normal events.\n\nzlib.constants.Z_OK\nzlib.constants.Z_STREAM_END\nzlib.constants.Z_NEED_DICT\nzlib.constants.Z_ERRNO\nzlib.constants.Z_STREAM_ERROR\nzlib.constants.Z_DATA_ERROR\nzlib.constants.Z_MEM_ERROR\nzlib.constants.Z_BUF_ERROR\nzlib.constants.Z_VERSION_ERROR\nCompression levels.\n\nzlib.constants.Z_NO_COMPRESSION\nzlib.constants.Z_BEST_SPEED\nzlib.constants.Z_BEST_COMPRESSION\nzlib.constants.Z_DEFAULT_COMPRESSION\nCompression strategy.\n\nzlib.constants.Z_FILTERED\nzlib.constants.Z_HUFFMAN_ONLY\nzlib.constants.Z_RLE\nzlib.constants.Z_FIXED\nzlib.constants.Z_DEFAULT_STRATEGY\nBrotli constants#\nAdded in: v11.7.0, v10.16.0\nThere are several options and other constants available for Brotli-based streams:\n\nFlush operations#\nThe following values are valid flush operations for Brotli-based streams:\n\nzlib.constants.BROTLI_OPERATION_PROCESS (default for all operations)\nzlib.constants.BROTLI_OPERATION_FLUSH (default when calling .flush())\nzlib.constants.BROTLI_OPERATION_FINISH (default for the last chunk)\nzlib.constants.BROTLI_OPERATION_EMIT_METADATA\nThis particular operation may be hard to use in a Node.js context, as the streaming layer makes it hard to know which data will end up in this frame. Also, there is currently no way to consume this data through the Node.js API.\nCompressor options#\nThere are several options that can be set on Brotli encoders, affecting compression efficiency and speed. Both the keys and the values can be accessed as properties of the zlib.constants object.\n\nThe most important options are:\n\nBROTLI_PARAM_MODE\nBROTLI_MODE_GENERIC (default)\nBROTLI_MODE_TEXT, adjusted for UTF-8 text\nBROTLI_MODE_FONT, adjusted for WOFF 2.0 fonts\nBROTLI_PARAM_QUALITY\nRanges from BROTLI_MIN_QUALITY to BROTLI_MAX_QUALITY, with a default of BROTLI_DEFAULT_QUALITY.\nBROTLI_PARAM_SIZE_HINT\nInteger value representing the expected input size; defaults to 0 for an unknown input size.\nThe following flags can be set for advanced control over the compression algorithm and memory usage", "doc_id": "5d068e48-b2d8-4339-9926-a8220620c4a7", "embedding": null, "doc_hash": "73b8d8d0c5d82ea214953a98c7fbcb5463d7eaf31a69ecba74b662b0a48432ff", "extra_info": null, "node_info": {"start": 2923089, "end": 2926065}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "588be179-5add-405f-be93-6cccbf66ab98", "3": "d373936e-731b-431f-9309-e0430ccf3986"}}, "__type__": "1"}, "d373936e-731b-431f-9309-e0430ccf3986": {"__data__": {"text": "efficiency and speed. Both the keys and the values can be accessed as properties of the zlib.constants object.\n\nThe most important options are:\n\nBROTLI_PARAM_MODE\nBROTLI_MODE_GENERIC (default)\nBROTLI_MODE_TEXT, adjusted for UTF-8 text\nBROTLI_MODE_FONT, adjusted for WOFF 2.0 fonts\nBROTLI_PARAM_QUALITY\nRanges from BROTLI_MIN_QUALITY to BROTLI_MAX_QUALITY, with a default of BROTLI_DEFAULT_QUALITY.\nBROTLI_PARAM_SIZE_HINT\nInteger value representing the expected input size; defaults to 0 for an unknown input size.\nThe following flags can be set for advanced control over the compression algorithm and memory usage tuning:\n\nBROTLI_PARAM_LGWIN\nRanges from BROTLI_MIN_WINDOW_BITS to BROTLI_MAX_WINDOW_BITS, with a default of BROTLI_DEFAULT_WINDOW, or up to BROTLI_LARGE_MAX_WINDOW_BITS if the BROTLI_PARAM_LARGE_WINDOW flag is set.\nBROTLI_PARAM_LGBLOCK\nRanges from BROTLI_MIN_INPUT_BLOCK_BITS to BROTLI_MAX_INPUT_BLOCK_BITS.\nBROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING\nBoolean flag that decreases compression ratio in favour of decompression speed.\nBROTLI_PARAM_LARGE_WINDOW\nBoolean flag enabling \u201cLarge Window Brotli\u201d mode (not compatible with the Brotli format as standardized in RFC 7932).\nBROTLI_PARAM_NPOSTFIX\nRanges from 0 to BROTLI_MAX_NPOSTFIX.\nBROTLI_PARAM_NDIRECT\nRanges from 0 to 15 << NPOSTFIX in steps of 1 << NPOSTFIX.\nDecompressor options#\nThese advanced options are available for controlling decompression:\n\nBROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION\nBoolean flag that affects internal memory allocation patterns.\nBROTLI_DECODER_PARAM_LARGE_WINDOW\nBoolean flag enabling \u201cLarge Window Brotli\u201d mode (not compatible with the Brotli format as standardized in RFC 7932).\nClass: Options#\nHistory\nEach zlib-based class takes an options object. No options are required.\n\nSome options are only relevant when compressing and are ignored by the decompression classes.\n\nflush <integer> Default: zlib.constants.Z_NO_FLUSH\nfinishFlush <integer> Default: zlib.constants.Z_FINISH\nchunkSize <integer> Default: 16 * 1024\nwindowBits <integer>\nlevel <integer> (compression only)\nmemLevel <integer> (compression only)\nstrategy <integer> (compression only)\ndictionary <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> (deflate/inflate only, empty dictionary by default)\ninfo <boolean> (If true, returns an object with buffer and engine.)\nmaxOutputLength <integer> Limits output size when using convenience methods. Default: buffer.kMaxLength\nSee the deflateInit2 and inflateInit2 documentation for more information.\n\nClass: BrotliOptions#\nHistory\nEach Brotli-based class takes an options object. All options are optional.\n\nflush <integer> Default: zlib.constants.BROTLI_OPERATION_PROCESS\nfinishFlush <integer> Default: zlib.constants.BROTLI_OPERATION_FINISH\nchunkSize <integer> Default: 16 * 1024\nparams <Object> Key-value object containing indexed Brotli parameters.\nmaxOutputLength <integer> Limits output size when using convenience methods. Default: buffer.kMaxLength\nFor example:\n\nconst stream = zlib.createBrotliCompress({\n  chunkSize: 32 * 1024,\n  params: {\n    [zlib.constants.BROTLI_PARAM_MODE]:", "doc_id": "d373936e-731b-431f-9309-e0430ccf3986", "embedding": null, "doc_hash": "c9ac8fc798115633895206957a40d017dfa00dfc0c1be14431067521360a3475", "extra_info": null, "node_info": {"start": 2926093, "end": 2929204}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "5d068e48-b2d8-4339-9926-a8220620c4a7", "3": "7135fd03-891b-4e3d-a91e-ed938f4c234c"}}, "__type__": "1"}, "7135fd03-891b-4e3d-a91e-ed938f4c234c": {"__data__": {"text": "for more information.\n\nClass: BrotliOptions#\nHistory\nEach Brotli-based class takes an options object. All options are optional.\n\nflush <integer> Default: zlib.constants.BROTLI_OPERATION_PROCESS\nfinishFlush <integer> Default: zlib.constants.BROTLI_OPERATION_FINISH\nchunkSize <integer> Default: 16 * 1024\nparams <Object> Key-value object containing indexed Brotli parameters.\nmaxOutputLength <integer> Limits output size when using convenience methods. Default: buffer.kMaxLength\nFor example:\n\nconst stream = zlib.createBrotliCompress({\n  chunkSize: 32 * 1024,\n  params: {\n    [zlib.constants.BROTLI_PARAM_MODE]: zlib.constants.BROTLI_MODE_TEXT,\n    [zlib.constants.BROTLI_PARAM_QUALITY]: 4,\n    [zlib.constants.BROTLI_PARAM_SIZE_HINT]: fs.statSync(inputFile).size,\n  },\n});\nClass: zlib.BrotliCompress#\nAdded in: v11.7.0, v10.16.0\nCompress data using the Brotli algorithm.\n\nClass: zlib.BrotliDecompress#\nAdded in: v11.7.0, v10.16.0\nDecompress data using the Brotli algorithm.\n\nClass: zlib.Deflate#\nAdded in: v0.5.8\nCompress data using deflate.\n\nClass: zlib.DeflateRaw#\nAdded in: v0.5.8\nCompress data using deflate, and do not append a zlib header.\n\nClass: zlib.Gunzip#\nHistory\nDecompress a gzip stream.\n\nClass: zlib.Gzip#\nAdded in: v0.5.8\nCompress data using gzip.\n\nClass: zlib.Inflate#\nHistory\nDecompress a deflate stream.\n\nClass: zlib.InflateRaw#\nHistory\nDecompress a raw deflate stream.\n\nClass: zlib.Unzip#\nAdded in: v0.5.8\nDecompress either a Gzip- or Deflate-compressed stream by auto-detecting the header.\n\nClass: zlib.ZlibBase#\nHistory\nNot exported by the node:zlib module. It is documented here because it is the base class of the compressor/decompressor classes.\n\nThis class inherits from stream.Transform, allowing node:zlib objects to be used in pipes and similar stream operations.\n\nzlib.bytesRead#\nAdded in: v8.1.0Deprecated since: v10.0.0\nStability: 0 - Deprecated: Use zlib.bytesWritten instead.\n<number>\nDeprecated alias for zlib.bytesWritten. This original name was chosen because it also made sense to interpret the value as the number of bytes read by the engine, but is inconsistent with other streams in Node.js that expose values under these names.\n\nzlib.bytesWritten#\nAdded in: v10.0.0\n<number>\nThe zlib.bytesWritten property specifies the number of bytes written to the engine, before the bytes are processed (compressed or decompressed, as appropriate for the derived class).\n\nzlib.close([callback])#\nAdded in: v0.9.4\ncallback <Function>\nClose the underlying handle.\n\nzlib.flush([kind, ]callback)#\nAdded in: v0.5.8\nkind Default: zlib.constants.Z_FULL_FLUSH for zlib-based streams, zlib.constants.BROTLI_OPERATION_FLUSH for Brotli-based streams.\ncallback <Function>\nFlush pending data. Don't call this frivolously, premature flushes negatively impact the effectiveness of the compression algorithm.\n\nCalling this only flushes data from the internal zlib state, and does not perform flushing of any kind on the streams level. Rather, it behaves like a normal call to .write(), i.e. it will be queued up behind other pending writes and will only produce output when data is being read from", "doc_id": "7135fd03-891b-4e3d-a91e-ed938f4c234c", "embedding": null, "doc_hash": "ea5b7f28bcd44a280109756fc49005e45023bef763acddf552e11ac7333672bf", "extra_info": null, "node_info": {"start": 2929196, "end": 2932305}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "d373936e-731b-431f-9309-e0430ccf3986", "3": "1e46f31d-bf83-48a6-991f-5721abe56a31"}}, "__type__": "1"}, "1e46f31d-bf83-48a6-991f-5721abe56a31": {"__data__": {"text": "<Function>\nClose the underlying handle.\n\nzlib.flush([kind, ]callback)#\nAdded in: v0.5.8\nkind Default: zlib.constants.Z_FULL_FLUSH for zlib-based streams, zlib.constants.BROTLI_OPERATION_FLUSH for Brotli-based streams.\ncallback <Function>\nFlush pending data. Don't call this frivolously, premature flushes negatively impact the effectiveness of the compression algorithm.\n\nCalling this only flushes data from the internal zlib state, and does not perform flushing of any kind on the streams level. Rather, it behaves like a normal call to .write(), i.e. it will be queued up behind other pending writes and will only produce output when data is being read from the stream.\n\nzlib.params(level, strategy, callback)#\nAdded in: v0.11.4\nlevel <integer>\nstrategy <integer>\ncallback <Function>\nThis function is only available for zlib-based streams, i.e. not Brotli.\n\nDynamically update the compression level and compression strategy. Only applicable to deflate algorithm.\n\nzlib.reset()#\nAdded in: v0.7.0\nReset the compressor/decompressor to factory defaults. Only applicable to the inflate and deflate algorithms.\n\nzlib.constants#\nAdded in: v7.0.0\nProvides an object enumerating Zlib-related constants.\n\nzlib.createBrotliCompress([options])#\nAdded in: v11.7.0, v10.16.0\noptions <brotli options>\nCreates and returns a new BrotliCompress object.\n\nzlib.createBrotliDecompress([options])#\nAdded in: v11.7.0, v10.16.0\noptions <brotli options>\nCreates and returns a new BrotliDecompress object.\n\nzlib.createDeflate([options])#\nAdded in: v0.5.8\noptions <zlib options>\nCreates and returns a new Deflate object.\n\nzlib.createDeflateRaw([options])#\nAdded in: v0.5.8\noptions <zlib options>\nCreates and returns a new DeflateRaw object.\n\nAn upgrade of zlib from 1.2.8 to 1.2.11 changed behavior when windowBits is set to 8 for raw deflate streams. zlib would automatically set windowBits to 9 if was initially set to 8. Newer versions of zlib will throw an exception, so Node.js restored the original behavior of upgrading a value of 8 to 9, since passing windowBits = 9 to zlib actually results in a compressed stream that effectively uses an 8-bit window only.\n\nzlib.createGunzip([options])#\nAdded in: v0.5.8\noptions <zlib options>\nCreates and returns a new Gunzip object.\n\nzlib.createGzip([options])#\nAdded in: v0.5.8\noptions <zlib options>\nCreates and returns a new Gzip object. See example.\n\nzlib.createInflate([options])#\nAdded in: v0.5.8\noptions <zlib options>\nCreates and returns a new Inflate object.\n\nzlib.createInflateRaw([options])#\nAdded in: v0.5.8\noptions <zlib options>\nCreates and returns a new InflateRaw object.\n\nzlib.createUnzip([options])#\nAdded in: v0.5.8\noptions <zlib options>\nCreates and returns a new Unzip object.\n\nConvenience methods#\nAll of these take a Buffer, TypedArray, DataView, ArrayBuffer or string as the first argument, an optional second argument to supply options to the zlib classes and will call the supplied callback with callback(error, result).\n\nEvery method has a *Sync counterpart, which accept the same arguments, but without a callback.\n\nzlib.brotliCompress(buffer[, options], callback)#\nAdded in: v11.7.0, v10.16.0\nbuffer <Buffer>", "doc_id": "1e46f31d-bf83-48a6-991f-5721abe56a31", "embedding": null, "doc_hash": "3bbefe9cf4850b0f8892e12d422fadf2fb60f2af987b5c8735249af0d9baea63", "extra_info": null, "node_info": {"start": 2932283, "end": 2935441}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "7135fd03-891b-4e3d-a91e-ed938f4c234c", "3": "1912c505-1ffd-4a40-af71-607313a5ce43"}}, "__type__": "1"}, "1912c505-1ffd-4a40-af71-607313a5ce43": {"__data__": {"text": "in: v0.5.8\noptions <zlib options>\nCreates and returns a new InflateRaw object.\n\nzlib.createUnzip([options])#\nAdded in: v0.5.8\noptions <zlib options>\nCreates and returns a new Unzip object.\n\nConvenience methods#\nAll of these take a Buffer, TypedArray, DataView, ArrayBuffer or string as the first argument, an optional second argument to supply options to the zlib classes and will call the supplied callback with callback(error, result).\n\nEvery method has a *Sync counterpart, which accept the same arguments, but without a callback.\n\nzlib.brotliCompress(buffer[, options], callback)#\nAdded in: v11.7.0, v10.16.0\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <brotli options>\ncallback <Function>\nzlib.brotliCompressSync(buffer[, options])#\nAdded in: v11.7.0, v10.16.0\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <brotli options>\nCompress a chunk of data with BrotliCompress.\n\nzlib.brotliDecompress(buffer[, options], callback)#\nAdded in: v11.7.0, v10.16.0\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <brotli options>\ncallback <Function>\nzlib.brotliDecompressSync(buffer[, options])#\nAdded in: v11.7.0, v10.16.0\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <brotli options>\nDecompress a chunk of data with BrotliDecompress.\n\nzlib.deflate(buffer[, options], callback)#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\ncallback <Function>\nzlib.deflateSync(buffer[, options])#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\nCompress a chunk of data with Deflate.\n\nzlib.deflateRaw(buffer[, options], callback)#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\ncallback <Function>\nzlib.deflateRawSync(buffer[, options])#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\nCompress a chunk of data with DeflateRaw.\n\nzlib.gunzip(buffer[, options], callback)#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\ncallback <Function>\nzlib.gunzipSync(buffer[, options])#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\nDecompress a chunk of data with Gunzip.\n\nzlib.gzip(buffer[, options], callback)#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\ncallback <Function>\nzlib.gzipSync(buffer[, options])#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\nCompress a chunk of data with Gzip.\n\nzlib.inflate(buffer[, options], callback)#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\ncallback <Function>\nzlib.inflateSync(buffer[, options])#\nHistory\nbuffer <Buffer> | <TypedArray> |", "doc_id": "1912c505-1ffd-4a40-af71-607313a5ce43", "embedding": null, "doc_hash": "ce92f8974a73d1f44f7795d8c13a188094dba86602ae87f912239b8c58af61cc", "extra_info": null, "node_info": {"start": 2935464, "end": 2938442}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1e46f31d-bf83-48a6-991f-5721abe56a31", "3": "0c7dbe74-9f71-4766-b3b9-057da687c59e"}}, "__type__": "1"}, "0c7dbe74-9f71-4766-b3b9-057da687c59e": {"__data__": {"text": "options], callback)#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\ncallback <Function>\nzlib.gzipSync(buffer[, options])#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\nCompress a chunk of data with Gzip.\n\nzlib.inflate(buffer[, options], callback)#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\ncallback <Function>\nzlib.inflateSync(buffer[, options])#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\nDecompress a chunk of data with Inflate.\n\nzlib.inflateRaw(buffer[, options], callback)#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\ncallback <Function>\nzlib.inflateRawSync(buffer[, options])#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\nDecompress a chunk of data with InflateRaw.\n\nzlib.unzip(buffer[, options], callback)#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\ncallback <Function>\nzlib.unzipSync(buffer[, options])#\nHistory\nbuffer <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <string>\noptions <zlib options>\nDecompress a chunk of data with Unzip.", "doc_id": "0c7dbe74-9f71-4766-b3b9-057da687c59e", "embedding": null, "doc_hash": "f2baae4e3c59c7f6d6ae438675959c680bb6cb0a2ce6b0b48cc368712375c05c", "extra_info": null, "node_info": {"start": 2938438, "end": 2939793}, "relationships": {"1": "92e6b704-ed02-434f-b494-b9d85a9fa755", "2": "1912c505-1ffd-4a40-af71-607313a5ce43"}}, "__type__": "1"}}}